
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	c0 82 00 20 c5 2d 01 00 c1 34 02 00 99 2d 01 00     ... .-...4...-..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	99 2d 01 00 99 2d 01 00 99 2d 01 00 00 00 00 00     .-...-...-......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	41 28 01 00 99 2d 01 00 00 00 00 00 ed 27 01 00     A(...-.......'..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	99 2d 01 00                                         .-..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	f1 28 01 00 79 4e 02 00 f1 28 01 00 f1 28 01 00     .(..yN...(...(..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	f1 28 01 00 4f 50 02 00 f1 28 01 00 f1 28 01 00     .(..OP...(...(..

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	41 4e 02 00 f1 28 01 00 f1 28 01 00 5f 4e 02 00     AN...(...(.._N..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	f1 28 01 00 f1 28 01 00 f1 28 01 00 f1 28 01 00     .(...(...(...(..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	f1 28 01 00 f1 28 01 00 f1 28 01 00 f1 28 01 00     .(...(...(...(..
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
  90:	f1 28 01 00 f1 28 01 00 f1 28 01 00 f1 28 01 00     .(...(...(...(..
			switch (*fmt) {
  a0:	f1 28 01 00 f1 28 01 00 f1 28 01 00 f1 28 01 00     .(...(...(...(..
  b0:	f1 28 01 00 f1 28 01 00 f1 28 01 00 f1 28 01 00     .(...(...(...(..
  c0:	f1 28 01 00 f1 28 01 00 f1 28 01 00 f1 28 01 00     .(...(...(...(..
  d0:	f1 28 01 00 f1 28 01 00 f1 28 01 00 f1 28 01 00     .(...(...(...(..
  e0:	f1 28 01 00 f1 28 01 00 f1 28 01 00 f1 28 01 00     .(...(...(...(..
  f0:	f1 28 01 00 f1 28 01 00 f1 28 01 00 f1 28 01 00     .(...(...(...(..

Disassembly of section text:

00000100 <__aeabi_frsub>:
				align = VA_STACK_ALIGN(void *);
     100:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
			switch (*fmt) {
     104:	e002      	b.n	10c <__addsf3>
     106:	bf00      	nop

00000108 <__aeabi_fsub>:
     108:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000010c <__addsf3>:
     10c:	0042      	lsls	r2, r0, #1
     10e:	bf1f      	itttt	ne
     110:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     114:	ea92 0f03 	teqne	r2, r3
     118:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     11c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     120:	d06a      	beq.n	1f8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x8b>
     122:	ea4f 6212 	mov.w	r2, r2, lsr #24
		buf = (void *) ROUND_UP(buf, align);
     126:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     12a:	bfc1      	itttt	gt
     12c:	18d2      	addgt	r2, r2, r3
     12e:	4041      	eorgt	r1, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     130:	4048      	eorgt	r0, r1
     132:	4041      	eorgt	r1, r0
     134:	bfb8      	it	lt
     136:	425b      	neglt	r3, r3
     138:	2b19      	cmp	r3, #25
     13a:	bf88      	it	hi
     13c:	4770      	bxhi	lr
     13e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
		if (is_str_arg) {
     142:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     146:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			int v = va_arg(ap, int);
     14a:	bf18      	it	ne

			if (buf0 != NULL) {
				*(int *)buf = v;
     14c:	4240      	negne	r0, r0
			}
			buf += sizeof(int);
     14e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     152:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
				arg_idx--;
     156:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
				parsing = false;
     15a:	bf18      	it	ne
     15c:	4249      	negne	r1, r1
				continue;
     15e:	ea92 0f03 	teq	r2, r3
				if (fmt[-1] == 'l') {
     162:	d03f      	beq.n	1e4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x77>
     164:	f1a2 0201 	sub.w	r2, r2, #1
					if (fmt[-2] == 'l') {
     168:	fa41 fc03 	asr.w	ip, r1, r3
     16c:	eb10 000c 	adds.w	r0, r0, ip
				parsing = false;
     170:	f1c3 0320 	rsb	r3, r3, #32
						align = VA_STACK_ALIGN(long long);
     174:	fa01 f103 	lsl.w	r1, r1, r3
				size = sizeof(void *);
     178:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
					v.ld = va_arg(ap, long double);
     17c:	d502      	bpl.n	184 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17>
     17e:	4249      	negs	r1, r1
     180:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
				buf = (void *) ROUND_UP(buf, align);
     184:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
					v.ld = va_arg(ap, long double);
     188:	d313      	bcc.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
				buf = (void *) ROUND_UP(buf, align);
     18a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
				if (buf0 != NULL) {
     18e:	d306      	bcc.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
					if (BUF_OFFSET + size > len) {
     190:	0840      	lsrs	r0, r0, #1
     192:	ea4f 0131 	mov.w	r1, r1, rrx
     196:	f102 0201 	add.w	r2, r2, #1
						*(long double *)buf = v.ld;
     19a:	2afe      	cmp	r2, #254	; 0xfe
     19c:	d251      	bcs.n	242 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd5>
				buf += size;
     19e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
				parsing = false;
     1a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
			switch (*fmt) {
     1a6:	bf08      	it	eq
     1a8:	f020 0001 	biceq.w	r0, r0, #1
			if (*++fmt == '\0') {
     1ac:	ea40 0003 	orr.w	r0, r0, r3
     1b0:	4770      	bx	lr
     1b2:	0049      	lsls	r1, r1, #1
			if (!parsing) {
     1b4:	eb40 0000 	adc.w	r0, r0, r0
     1b8:	3a01      	subs	r2, #1
     1ba:	bf28      	it	cs
				if (*fmt == '%') {
     1bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
					arg_idx++;
     1c0:	d2ed      	bcs.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
     1c2:	fab0 fc80 	clz	ip, r0
					parsing = true;
     1c6:	f1ac 0c08 	sub.w	ip, ip, #8
				align = VA_STACK_ALIGN(size_t);
     1ca:	ebb2 020c 	subs.w	r2, r2, ip
     1ce:	fa00 f00c 	lsl.w	r0, r0, ip
			switch (*fmt) {
     1d2:	bfaa      	itet	ge
     1d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
				parsing = false;
     1d8:	4252      	neglt	r2, r2

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1da:	4318      	orrge	r0, r3
     1dc:	bfbc      	itt	lt
     1de:	40d0      	lsrlt	r0, r2
			long long v = va_arg(ap, long long);
     1e0:	4318      	orrlt	r0, r3
     1e2:	4770      	bx	lr
     1e4:	f092 0f00 	teq	r2, #0
     1e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     1ec:	bf06      	itte	eq
     1ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
				}
			}
			buf += sizeof(long long);
     1f2:	3201      	addeq	r2, #1
     1f4:	3b01      	subne	r3, #1
		if (is_str_arg) {
     1f6:	e7b5      	b.n	164 <CONFIG_IDLE_STACK_SIZE+0x24>
		} else if (size == sizeof(int)) {
     1f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
			int v = va_arg(ap, int);
     1fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
			if (buf0 != NULL) {
     200:	bf18      	it	ne
		} else if (size == sizeof(long long)) {
     202:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
			long long v = va_arg(ap, long long);
     206:	d021      	beq.n	24c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdf>
     208:	ea92 0f03 	teq	r2, r3
     20c:	d004      	beq.n	218 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xab>
     20e:	f092 0f00 	teq	r2, #0
			if (buf0 != NULL) {
     212:	bf08      	it	eq
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     214:	4608      	moveq	r0, r1
     216:	4770      	bx	lr
     218:	ea90 0f01 	teq	r0, r1
			s = va_arg(ap, char *);
     21c:	bf1c      	itt	ne
     21e:	2000      	movne	r0, #0
     220:	4770      	bxne	lr
			if (is_ro && !do_ro) {
     222:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     226:	d104      	bne.n	232 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xc5>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     228:	0040      	lsls	r0, r0, #1
     22a:	bf28      	it	cs
     22c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     230:	4770      	bx	lr
     232:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     236:	bf3c      	itt	cc
     238:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
					__ASSERT(false, "String with too many arguments");
     23c:	4770      	bxcc	lr
     23e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     242:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     246:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
					__ASSERT(false, "str_ptr_pos[] too small");
     24a:	4770      	bx	lr
     24c:	ea7f 6222 	mvns.w	r2, r2, asr #24
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     250:	bf16      	itet	ne
     252:	4608      	movne	r0, r1
				if (buf0 != NULL) {
     254:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
					str_ptr_pos[s_idx] = s_ptr_idx;
     258:	4601      	movne	r1, r0
     25a:	0242      	lsls	r2, r0, #9
     25c:	bf06      	itte	eq
     25e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     262:	ea90 0f01 	teqeq	r0, r1
					str_ptr_arg[s_idx] = arg_idx;
     266:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
						s_rw_cnt++;
     26a:	4770      	bx	lr

0000026c <__aeabi_ui2f>:
     26c:	f04f 0300 	mov.w	r3, #0
     270:	e004      	b.n	27c <__aeabi_i2f+0x8>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     272:	bf00      	nop

00000274 <__aeabi_i2f>:
     274:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
					__ASSERT(false, "str_ptr_pos[] too small");
     278:	bf48      	it	mi
     27a:	4240      	negmi	r0, r0
     27c:	ea5f 0c00 	movs.w	ip, r0
     280:	bf08      	it	eq
     282:	4770      	bxeq	lr
     284:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
				if (buf0 != NULL) {
     288:	4601      	mov	r1, r0
					str_ptr_pos[s_idx] = s_ptr_idx;
     28a:	f04f 0000 	mov.w	r0, #0
     28e:	e01c      	b.n	2ca <__aeabi_l2f+0x2a>

00000290 <__aeabi_ul2f>:
     290:	ea50 0201 	orrs.w	r2, r0, r1
					str_ptr_arg[s_idx] = arg_idx;
     294:	bf08      	it	eq
					str_ptr_pos[s_idx] = s_ptr_idx;
     296:	4770      	bxeq	lr
     298:	f04f 0300 	mov.w	r3, #0
					str_ptr_arg[s_idx] = arg_idx;
     29c:	e00a      	b.n	2b4 <__aeabi_l2f+0x14>
					if (is_ro) {
     29e:	bf00      	nop

000002a0 <__aeabi_l2f>:
     2a0:	ea50 0201 	orrs.w	r2, r0, r1
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     2a4:	bf08      	it	eq
     2a6:	4770      	bxeq	lr
     2a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
						s_ro_cnt++;
     2ac:	d502      	bpl.n	2b4 <__aeabi_l2f+0x14>
     2ae:	4240      	negs	r0, r0
				s_idx++;
     2b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
					if (BUF_OFFSET + size > len) {
     2b4:	ea5f 0c01 	movs.w	ip, r1
     2b8:	bf02      	ittt	eq
			switch (*fmt) {
     2ba:	4684      	moveq	ip, r0
     2bc:	4601      	moveq	r1, r0
     2be:	2000      	moveq	r0, #0
				} else if (is_ro) {
     2c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     2c4:	bf08      	it	eq
					len += 1;
     2c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     2ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     2ce:	fabc f28c 	clz	r2, ip
     2d2:	3a08      	subs	r2, #8
     2d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     2d8:	db10      	blt.n	2fc <__aeabi_l2f+0x5c>
     2da:	fa01 fc02 	lsl.w	ip, r1, r2
					len += 2;
     2de:	4463      	add	r3, ip
				} else if (rws_pos_en) {
     2e0:	fa00 fc02 	lsl.w	ip, r0, r2
					len += strlen(s) + 1 + 1;
     2e4:	f1c2 0220 	rsb	r2, r2, #32
     2e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2ec:	fa20 f202 	lsr.w	r2, r0, r2
     2f0:	eb43 0002 	adc.w	r0, r3, r2
     2f4:	bf08      	it	eq
		} else {
			__ASSERT(false, "unexpected size %u", size);
     2f6:	f020 0001 	biceq.w	r0, r0, #1
     2fa:	4770      	bx	lr
     2fc:	f102 0220 	add.w	r2, r2, #32
     300:	fa01 fc02 	lsl.w	ip, r1, r2
     304:	f1c2 0220 	rsb	r2, r2, #32
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     308:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     30c:	fa21 f202 	lsr.w	r2, r1, r2
		__ASSERT(false, "too many format args");
     310:	eb43 0002 	adc.w	r0, r3, r2
     314:	bf08      	it	eq
     316:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     31a:	4770      	bx	lr

0000031c <__aeabi_fmul>:
     31c:	f04f 0cff 	mov.w	ip, #255	; 0xff
     320:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     324:	bf1e      	ittt	ne
     326:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     32a:	ea92 0f0c 	teqne	r2, ip
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     32e:	ea93 0f0c 	teqne	r3, ip

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     332:	d06f      	beq.n	414 <CONFIG_BT_RX_STACK_SIZE+0x14>

	if (rws_pos_en) {
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     334:	441a      	add	r2, r3
     336:	ea80 0c01 	eor.w	ip, r0, r1
     33a:	0240      	lsls	r0, r0, #9
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     33c:	bf18      	it	ne
     33e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     342:	d01e      	beq.n	382 <__aeabi_fmul+0x66>
     344:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
		for (i = 0; i < s_idx; i++) {
     348:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     34c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
		for (i = 0; i < s_idx; i++) {
     350:	fba0 3101 	umull	r3, r1, r0, r1
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     354:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     358:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
			*buf++ = str_ptr_arg[i];
     35c:	bf3e      	ittt	cc
		if (BUF_OFFSET + 1 + size > len) {
     35e:	0049      	lslcc	r1, r1, #1
			*buf++ = str_ptr_arg[i];
     360:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
	for (i = 0; i < s_idx; i++) {
     364:	005b      	lslcc	r3, r3, #1
     366:	ea40 0001 	orr.w	r0, r0, r1
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     36a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
		pkg_hdr->desc.rw_str_cnt = 0;
     36e:	2afd      	cmp	r2, #253	; 0xfd
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     370:	d81d      	bhi.n	3ae <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2a>
     372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     376:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
			if (BUF_OFFSET + 1 > len) {
     37a:	bf08      	it	eq
     37c:	f020 0001 	biceq.w	r0, r0, #1
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     380:	4770      	bx	lr
			if (BUF_OFFSET + 1 > len) {
     382:	f090 0f00 	teq	r0, #0
			*buf++ = pos;
     386:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
		for (i = 0; i < s_idx; i++) {
     38a:	bf08      	it	eq
     38c:	0249      	lsleq	r1, r1, #9
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     38e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     392:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     396:	3a7f      	subs	r2, #127	; 0x7f
     398:	bfc2      	ittt	gt
     39a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
		if (rws_pos_en) {
     39e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
			*buf++ = str_ptr_arg[i];
     3a2:	4770      	bxgt	lr
     3a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
			size = 0;
     3a8:	f04f 0300 	mov.w	r3, #0
		if (BUF_OFFSET + 1 + size > len) {
     3ac:	3a01      	subs	r2, #1
     3ae:	dc5d      	bgt.n	46c <CONFIG_BT_RX_STACK_SIZE+0x6c>
     3b0:	f112 0f19 	cmn.w	r2, #25
     3b4:	bfdc      	itt	le
		*buf++ = str_ptr_pos[i];
     3b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     3ba:	4770      	bxle	lr
     3bc:	f1c2 0200 	rsb	r2, r2, #0
		memcpy(buf, s, size);
     3c0:	0041      	lsls	r1, r0, #1
     3c2:	fa21 f102 	lsr.w	r1, r1, r2
     3c6:	f1c2 0220 	rsb	r2, r2, #32
		buf += size;
     3ca:	fa00 fc02 	lsl.w	ip, r0, r2
	for (i = 0; i < s_idx; i++) {
     3ce:	ea5f 0031 	movs.w	r0, r1, rrx
     3d2:	f140 0000 	adc.w	r0, r0, #0
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     3d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     3da:	bf08      	it	eq
     3dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     3e0:	4770      	bx	lr
     3e2:	f092 0f00 	teq	r2, #0
			size = strlen(s) + 1;
     3e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     3ea:	bf02      	ittt	eq
     3ec:	0040      	lsleq	r0, r0, #1
     3ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
		return -EFAULT;
     3f2:	3a01      	subeq	r2, #1
     3f4:	d0f9      	beq.n	3ea <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x66>
     3f6:	ea40 000c 	orr.w	r0, r0, ip
     3fa:	f093 0f00 	teq	r3, #0
     3fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     402:	bf02      	ittt	eq
     404:	0049      	lsleq	r1, r1, #1
     406:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     40a:	3b01      	subeq	r3, #1
     40c:	d0f9      	beq.n	402 <CONFIG_BT_RX_STACK_SIZE+0x2>
     40e:	ea41 010c 	orr.w	r1, r1, ip
     412:	e78f      	b.n	334 <__aeabi_fmul+0x18>
     414:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     418:	ea92 0f0c 	teq	r2, ip
     41c:	bf18      	it	ne
     41e:	ea93 0f0c 	teqne	r3, ip
     422:	d00a      	beq.n	43a <CONFIG_BT_RX_STACK_SIZE+0x3a>
     424:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     428:	bf18      	it	ne
     42a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     42e:	d1d8      	bne.n	3e2 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x5e>
     430:	ea80 0001 	eor.w	r0, r0, r1
     434:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     438:	4770      	bx	lr
     43a:	f090 0f00 	teq	r0, #0
     43e:	bf17      	itett	ne
     440:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     444:	4608      	moveq	r0, r1
     446:	f091 0f00 	teqne	r1, #0
     44a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     44e:	d014      	beq.n	47a <CONFIG_BT_RX_STACK_SIZE+0x7a>
     450:	ea92 0f0c 	teq	r2, ip
     454:	d101      	bne.n	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     456:	0242      	lsls	r2, r0, #9
     458:	d10f      	bne.n	47a <CONFIG_BT_RX_STACK_SIZE+0x7a>
     45a:	ea93 0f0c 	teq	r3, ip
     45e:	d103      	bne.n	468 <CONFIG_BT_RX_STACK_SIZE+0x68>
     460:	024b      	lsls	r3, r1, #9
     462:	bf18      	it	ne
     464:	4608      	movne	r0, r1
     466:	d108      	bne.n	47a <CONFIG_BT_RX_STACK_SIZE+0x7a>
     468:	ea80 0001 	eor.w	r0, r0, r1
     46c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     470:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     474:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     478:	4770      	bx	lr
     47a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     47e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     482:	4770      	bx	lr

00000484 <__aeabi_fdiv>:
     484:	f04f 0cff 	mov.w	ip, #255	; 0xff
     488:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     48c:	bf1e      	ittt	ne
     48e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     492:	ea92 0f0c 	teqne	r2, ip
     496:	ea93 0f0c 	teqne	r3, ip
     49a:	d069      	beq.n	570 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x5c>
     49c:	eba2 0203 	sub.w	r2, r2, r3
     4a0:	ea80 0c01 	eor.w	ip, r0, r1
     4a4:	0249      	lsls	r1, r1, #9
     4a6:	ea4f 2040 	mov.w	r0, r0, lsl #9
     4aa:	d037      	beq.n	51c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x8>
     4ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     4b0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     4b4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     4b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     4bc:	428b      	cmp	r3, r1
     4be:	bf38      	it	cc
     4c0:	005b      	lslcc	r3, r3, #1
     4c2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     4c6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     4ca:	428b      	cmp	r3, r1
     4cc:	bf24      	itt	cs
     4ce:	1a5b      	subcs	r3, r3, r1
     4d0:	ea40 000c 	orrcs.w	r0, r0, ip
     4d4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     4d8:	bf24      	itt	cs
     4da:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     4de:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     4e2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     4e6:	bf24      	itt	cs
     4e8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     4ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     4f0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     4f4:	bf24      	itt	cs
     4f6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     4fa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     4fe:	011b      	lsls	r3, r3, #4
     500:	bf18      	it	ne
     502:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     506:	d1e0      	bne.n	4ca <__aeabi_fdiv+0x46>
     508:	2afd      	cmp	r2, #253	; 0xfd
     50a:	f63f af50 	bhi.w	3ae <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2a>
     50e:	428b      	cmp	r3, r1
     510:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     514:	bf08      	it	eq
     516:	f020 0001 	biceq.w	r0, r0, #1
     51a:	4770      	bx	lr
     51c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     520:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     524:	327f      	adds	r2, #127	; 0x7f
     526:	bfc2      	ittt	gt
     528:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     52c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     530:	4770      	bxgt	lr
     532:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     536:	f04f 0300 	mov.w	r3, #0
     53a:	3a01      	subs	r2, #1
     53c:	e737      	b.n	3ae <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x2a>
     53e:	f092 0f00 	teq	r2, #0
     542:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     546:	bf02      	ittt	eq
     548:	0040      	lsleq	r0, r0, #1
     54a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     54e:	3a01      	subeq	r2, #1
     550:	d0f9      	beq.n	546 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x32>
     552:	ea40 000c 	orr.w	r0, r0, ip
     556:	f093 0f00 	teq	r3, #0
     55a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     55e:	bf02      	ittt	eq
     560:	0049      	lsleq	r1, r1, #1
     562:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     566:	3b01      	subeq	r3, #1
     568:	d0f9      	beq.n	55e <CONFIG_BT_LONG_WQ_STACK_SIZE+0x4a>
     56a:	ea41 010c 	orr.w	r1, r1, ip
     56e:	e795      	b.n	49c <__aeabi_fdiv+0x18>
     570:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     574:	ea92 0f0c 	teq	r2, ip
     578:	d108      	bne.n	58c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x78>
     57a:	0242      	lsls	r2, r0, #9
     57c:	f47f af7d 	bne.w	47a <CONFIG_BT_RX_STACK_SIZE+0x7a>
     580:	ea93 0f0c 	teq	r3, ip
     584:	f47f af70 	bne.w	468 <CONFIG_BT_RX_STACK_SIZE+0x68>
     588:	4608      	mov	r0, r1
     58a:	e776      	b.n	47a <CONFIG_BT_RX_STACK_SIZE+0x7a>
     58c:	ea93 0f0c 	teq	r3, ip
     590:	d104      	bne.n	59c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x88>
     592:	024b      	lsls	r3, r1, #9
     594:	f43f af4c 	beq.w	430 <CONFIG_BT_RX_STACK_SIZE+0x30>
     598:	4608      	mov	r0, r1
     59a:	e76e      	b.n	47a <CONFIG_BT_RX_STACK_SIZE+0x7a>
     59c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     5a0:	bf18      	it	ne
     5a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     5a6:	d1ca      	bne.n	53e <CONFIG_BT_LONG_WQ_STACK_SIZE+0x2a>
     5a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     5ac:	f47f af5c 	bne.w	468 <CONFIG_BT_RX_STACK_SIZE+0x68>
     5b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     5b4:	f47f af3c 	bne.w	430 <CONFIG_BT_RX_STACK_SIZE+0x30>
     5b8:	e75f      	b.n	47a <CONFIG_BT_RX_STACK_SIZE+0x7a>
     5ba:	bf00      	nop

000005bc <__gesf2>:
     5bc:	f04f 3cff 	mov.w	ip, #4294967295
     5c0:	e006      	b.n	5d0 <__cmpsf2+0x4>
     5c2:	bf00      	nop

000005c4 <__lesf2>:
     5c4:	f04f 0c01 	mov.w	ip, #1
     5c8:	e002      	b.n	5d0 <__cmpsf2+0x4>
     5ca:	bf00      	nop

000005cc <__cmpsf2>:
     5cc:	f04f 0c01 	mov.w	ip, #1
     5d0:	f84d cd04 	str.w	ip, [sp, #-4]!
     5d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
     5d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
     5dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     5e0:	bf18      	it	ne
     5e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     5e6:	d011      	beq.n	60c <CONFIG_BT_HCI_TX_STACK_SIZE+0xc>
     5e8:	b001      	add	sp, #4
     5ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     5ee:	bf18      	it	ne
     5f0:	ea90 0f01 	teqne	r0, r1
     5f4:	bf58      	it	pl
     5f6:	ebb2 0003 	subspl.w	r0, r2, r3
     5fa:	bf88      	it	hi
     5fc:	17c8      	asrhi	r0, r1, #31
     5fe:	bf38      	it	cc
     600:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     604:	bf18      	it	ne
     606:	f040 0001 	orrne.w	r0, r0, #1
     60a:	4770      	bx	lr
     60c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     610:	d102      	bne.n	618 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     612:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     616:	d105      	bne.n	624 <CONFIG_BT_HCI_TX_STACK_SIZE+0x24>
     618:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     61c:	d1e4      	bne.n	5e8 <__cmpsf2+0x1c>
     61e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     622:	d0e1      	beq.n	5e8 <__cmpsf2+0x1c>
     624:	f85d 0b04 	ldr.w	r0, [sp], #4
     628:	4770      	bx	lr
     62a:	bf00      	nop

0000062c <__aeabi_cfrcmple>:
     62c:	4684      	mov	ip, r0
     62e:	4608      	mov	r0, r1
     630:	4661      	mov	r1, ip
     632:	e7ff      	b.n	634 <__aeabi_cfcmpeq>

00000634 <__aeabi_cfcmpeq>:
     634:	b50f      	push	{r0, r1, r2, r3, lr}
     636:	f7ff ffc9 	bl	5cc <__cmpsf2>
     63a:	2800      	cmp	r0, #0
     63c:	bf48      	it	mi
     63e:	f110 0f00 	cmnmi.w	r0, #0
     642:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000644 <__aeabi_fcmpeq>:
     644:	f84d ed08 	str.w	lr, [sp, #-8]!
     648:	f7ff fff4 	bl	634 <__aeabi_cfcmpeq>
     64c:	bf0c      	ite	eq
     64e:	2001      	moveq	r0, #1
     650:	2000      	movne	r0, #0
     652:	f85d fb08 	ldr.w	pc, [sp], #8
     656:	bf00      	nop

00000658 <__aeabi_fcmplt>:
     658:	f84d ed08 	str.w	lr, [sp, #-8]!
     65c:	f7ff ffea 	bl	634 <__aeabi_cfcmpeq>
     660:	bf34      	ite	cc
     662:	2001      	movcc	r0, #1
     664:	2000      	movcs	r0, #0
     666:	f85d fb08 	ldr.w	pc, [sp], #8
     66a:	bf00      	nop

0000066c <__aeabi_fcmple>:
     66c:	f84d ed08 	str.w	lr, [sp, #-8]!
     670:	f7ff ffe0 	bl	634 <__aeabi_cfcmpeq>
     674:	bf94      	ite	ls
     676:	2001      	movls	r0, #1
     678:	2000      	movhi	r0, #0
     67a:	f85d fb08 	ldr.w	pc, [sp], #8
     67e:	bf00      	nop

00000680 <__aeabi_fcmpge>:
     680:	f84d ed08 	str.w	lr, [sp, #-8]!
     684:	f7ff ffd2 	bl	62c <__aeabi_cfrcmple>
     688:	bf94      	ite	ls
     68a:	2001      	movls	r0, #1
     68c:	2000      	movhi	r0, #0
     68e:	f85d fb08 	ldr.w	pc, [sp], #8
     692:	bf00      	nop

00000694 <__aeabi_fcmpgt>:
     694:	f84d ed08 	str.w	lr, [sp, #-8]!
     698:	f7ff ffc8 	bl	62c <__aeabi_cfrcmple>
     69c:	bf34      	ite	cc
     69e:	2001      	movcc	r0, #1
     6a0:	2000      	movcs	r0, #0
     6a2:	f85d fb08 	ldr.w	pc, [sp], #8
     6a6:	bf00      	nop

000006a8 <__aeabi_f2uiz>:
     6a8:	0042      	lsls	r2, r0, #1
     6aa:	d20e      	bcs.n	6ca <__aeabi_f2uiz+0x22>
     6ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     6b0:	d30b      	bcc.n	6ca <__aeabi_f2uiz+0x22>
     6b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
     6b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     6ba:	d409      	bmi.n	6d0 <__aeabi_f2uiz+0x28>
     6bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
     6c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     6c4:	fa23 f002 	lsr.w	r0, r3, r2
     6c8:	4770      	bx	lr
     6ca:	f04f 0000 	mov.w	r0, #0
     6ce:	4770      	bx	lr
     6d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
     6d4:	d101      	bne.n	6da <__aeabi_f2uiz+0x32>
     6d6:	0242      	lsls	r2, r0, #9
     6d8:	d102      	bne.n	6e0 <__aeabi_f2uiz+0x38>
     6da:	f04f 30ff 	mov.w	r0, #4294967295
     6de:	4770      	bx	lr
     6e0:	f04f 0000 	mov.w	r0, #0
     6e4:	4770      	bx	lr
     6e6:	bf00      	nop

000006e8 <__aeabi_ldivmod>:
     6e8:	b97b      	cbnz	r3, 70a <__aeabi_ldivmod+0x22>
     6ea:	b972      	cbnz	r2, 70a <__aeabi_ldivmod+0x22>
     6ec:	2900      	cmp	r1, #0
     6ee:	bfbe      	ittt	lt
     6f0:	2000      	movlt	r0, #0
     6f2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     6f6:	e006      	blt.n	706 <__aeabi_ldivmod+0x1e>
     6f8:	bf08      	it	eq
     6fa:	2800      	cmpeq	r0, #0
     6fc:	bf1c      	itt	ne
     6fe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     702:	f04f 30ff 	movne.w	r0, #4294967295
     706:	f000 b857 	b.w	7b8 <__aeabi_idiv0>
     70a:	f1ad 0c08 	sub.w	ip, sp, #8
     70e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     712:	2900      	cmp	r1, #0
     714:	db09      	blt.n	72a <__aeabi_ldivmod+0x42>
     716:	2b00      	cmp	r3, #0
     718:	db1a      	blt.n	750 <__aeabi_ldivmod+0x68>
     71a:	f00b fc3b 	bl	bf94 <__udivmoddi4>
     71e:	f8dd e004 	ldr.w	lr, [sp, #4]
     722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     726:	b004      	add	sp, #16
     728:	4770      	bx	lr
     72a:	4240      	negs	r0, r0
     72c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     730:	2b00      	cmp	r3, #0
     732:	db1b      	blt.n	76c <__aeabi_ldivmod+0x84>
     734:	f00b fc2e 	bl	bf94 <__udivmoddi4>
     738:	f8dd e004 	ldr.w	lr, [sp, #4]
     73c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     740:	b004      	add	sp, #16
     742:	4240      	negs	r0, r0
     744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     748:	4252      	negs	r2, r2
     74a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     74e:	4770      	bx	lr
     750:	4252      	negs	r2, r2
     752:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     756:	f00b fc1d 	bl	bf94 <__udivmoddi4>
     75a:	f8dd e004 	ldr.w	lr, [sp, #4]
     75e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     762:	b004      	add	sp, #16
     764:	4240      	negs	r0, r0
     766:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     76a:	4770      	bx	lr
     76c:	4252      	negs	r2, r2
     76e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     772:	f00b fc0f 	bl	bf94 <__udivmoddi4>
     776:	f8dd e004 	ldr.w	lr, [sp, #4]
     77a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     77e:	b004      	add	sp, #16
     780:	4252      	negs	r2, r2
     782:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     786:	4770      	bx	lr

00000788 <__aeabi_uldivmod>:
     788:	b953      	cbnz	r3, 7a0 <__aeabi_uldivmod+0x18>
     78a:	b94a      	cbnz	r2, 7a0 <__aeabi_uldivmod+0x18>
     78c:	2900      	cmp	r1, #0
     78e:	bf08      	it	eq
     790:	2800      	cmpeq	r0, #0
     792:	bf1c      	itt	ne
     794:	f04f 31ff 	movne.w	r1, #4294967295
     798:	f04f 30ff 	movne.w	r0, #4294967295
     79c:	f000 b80c 	b.w	7b8 <__aeabi_idiv0>
     7a0:	f1ad 0c08 	sub.w	ip, sp, #8
     7a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     7a8:	f00b fbf4 	bl	bf94 <__udivmoddi4>
     7ac:	f8dd e004 	ldr.w	lr, [sp, #4]
     7b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     7b4:	b004      	add	sp, #16
     7b6:	4770      	bx	lr

000007b8 <__aeabi_idiv0>:
     7b8:	4770      	bx	lr
     7ba:	bf00      	nop

000007bc <ocrypto_bigint_add256>:
     7bc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     7c0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     7c4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     7c8:	185b      	adds	r3, r3, r1
     7ca:	eb54 040c 	adcs.w	r4, r4, ip
     7ce:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     7d2:	414d      	adcs	r5, r1
     7d4:	eb56 060c 	adcs.w	r6, r6, ip
     7d8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     7dc:	414f      	adcs	r7, r1
     7de:	eb58 080c 	adcs.w	r8, r8, ip
     7e2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     7e6:	eb59 0901 	adcs.w	r9, r9, r1
     7ea:	eb5a 0a0c 	adcs.w	sl, sl, ip
     7ee:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     7f2:	4180      	sbcs	r0, r0
     7f4:	3001      	adds	r0, #1
     7f6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     7fa:	4770      	bx	lr

000007fc <ocrypto_bigint_sub256>:
     7fc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     800:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     804:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     808:	1a5b      	subs	r3, r3, r1
     80a:	eb74 040c 	sbcs.w	r4, r4, ip
     80e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     812:	418d      	sbcs	r5, r1
     814:	eb76 060c 	sbcs.w	r6, r6, ip
     818:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     81c:	418f      	sbcs	r7, r1
     81e:	eb78 080c 	sbcs.w	r8, r8, ip
     822:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     826:	eb79 0901 	sbcs.w	r9, r9, r1
     82a:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     82e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     832:	4180      	sbcs	r0, r0
     834:	4240      	negs	r0, r0
     836:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     83a:	4770      	bx	lr

0000083c <ocrypto_bigint_cadd256>:
     83c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     840:	4252      	negs	r2, r2
     842:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     846:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     84a:	4017      	ands	r7, r2
     84c:	19db      	adds	r3, r3, r7
     84e:	ea18 0802 	ands.w	r8, r8, r2
     852:	eb54 0408 	adcs.w	r4, r4, r8
     856:	ea19 0902 	ands.w	r9, r9, r2
     85a:	eb55 0509 	adcs.w	r5, r5, r9
     85e:	ea1a 0a02 	ands.w	sl, sl, r2
     862:	eb56 060a 	adcs.w	r6, r6, sl
     866:	c078      	stmia	r0!, {r3, r4, r5, r6}
     868:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     86c:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     870:	4017      	ands	r7, r2
     872:	417b      	adcs	r3, r7
     874:	ea18 0802 	ands.w	r8, r8, r2
     878:	eb54 0408 	adcs.w	r4, r4, r8
     87c:	ea19 0902 	ands.w	r9, r9, r2
     880:	eb55 0509 	adcs.w	r5, r5, r9
     884:	ea1a 0a02 	ands.w	sl, sl, r2
     888:	eb56 060a 	adcs.w	r6, r6, sl
     88c:	c078      	stmia	r0!, {r3, r4, r5, r6}
     88e:	4180      	sbcs	r0, r0
     890:	3001      	adds	r0, #1
     892:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     896:	4770      	bx	lr

00000898 <ocrypto_bigint_csub256>:
     898:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     89c:	4252      	negs	r2, r2
     89e:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     8a2:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     8a6:	4017      	ands	r7, r2
     8a8:	1bdb      	subs	r3, r3, r7
     8aa:	ea18 0802 	ands.w	r8, r8, r2
     8ae:	eb74 0408 	sbcs.w	r4, r4, r8
     8b2:	ea19 0902 	ands.w	r9, r9, r2
     8b6:	eb75 0509 	sbcs.w	r5, r5, r9
     8ba:	ea1a 0a02 	ands.w	sl, sl, r2
     8be:	eb76 060a 	sbcs.w	r6, r6, sl
     8c2:	c078      	stmia	r0!, {r3, r4, r5, r6}
     8c4:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     8c8:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     8cc:	4017      	ands	r7, r2
     8ce:	41bb      	sbcs	r3, r7
     8d0:	ea18 0802 	ands.w	r8, r8, r2
     8d4:	eb74 0408 	sbcs.w	r4, r4, r8
     8d8:	ea19 0902 	ands.w	r9, r9, r2
     8dc:	eb75 0509 	sbcs.w	r5, r5, r9
     8e0:	ea1a 0a02 	ands.w	sl, sl, r2
     8e4:	eb76 060a 	sbcs.w	r6, r6, sl
     8e8:	c078      	stmia	r0!, {r3, r4, r5, r6}
     8ea:	4180      	sbcs	r0, r0
     8ec:	4240      	negs	r0, r0
     8ee:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     8f2:	4770      	bx	lr

000008f4 <ocrypto_bigint_cswap256>:
     8f4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     8f8:	4252      	negs	r2, r2
     8fa:	f04f 0804 	mov.w	r8, #4

000008fe <cswap256_loop>:
     8fe:	e890 0030 	ldmia.w	r0, {r4, r5}
     902:	e891 00c0 	ldmia.w	r1, {r6, r7}
     906:	1ba3      	subs	r3, r4, r6
     908:	4013      	ands	r3, r2
     90a:	1ae4      	subs	r4, r4, r3
     90c:	18f6      	adds	r6, r6, r3
     90e:	1beb      	subs	r3, r5, r7
     910:	4013      	ands	r3, r2
     912:	1aed      	subs	r5, r5, r3
     914:	18ff      	adds	r7, r7, r3
     916:	c030      	stmia	r0!, {r4, r5}
     918:	c1c0      	stmia	r1!, {r6, r7}
     91a:	f1b8 0801 	subs.w	r8, r8, #1
     91e:	d1ee      	bne.n	8fe <cswap256_loop>
     920:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <ocrypto_mul256_noframe>:
     928:	b500      	push	{lr}
     92a:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     92e:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     932:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     936:	b402      	push	{r1}
     938:	fba7 5102 	umull	r5, r1, r7, r2
     93c:	950a      	str	r5, [sp, #40]	; 0x28
     93e:	fba8 0b02 	umull	r0, fp, r8, r2
     942:	fbe7 1063 	umaal	r1, r0, r7, r3
     946:	fbe9 b062 	umaal	fp, r0, r9, r2
     94a:	910b      	str	r1, [sp, #44]	; 0x2c
     94c:	fba8 5103 	umull	r5, r1, r8, r3
     950:	fbea 0162 	umaal	r0, r1, sl, r2
     954:	fbe7 b564 	umaal	fp, r5, r7, r4
     958:	fbe7 0566 	umaal	r0, r5, r7, r6
     95c:	fbe8 1566 	umaal	r1, r5, r8, r6
     960:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     964:	fba9 b603 	umull	fp, r6, r9, r3
     968:	fbea 1663 	umaal	r1, r6, sl, r3
     96c:	fbec 5663 	umaal	r5, r6, ip, r3
     970:	fbe8 0b64 	umaal	r0, fp, r8, r4
     974:	fbe9 1b64 	umaal	r1, fp, r9, r4
     978:	fbea 5b64 	umaal	r5, fp, sl, r4
     97c:	fbec 6b64 	umaal	r6, fp, ip, r4
     980:	900d      	str	r0, [sp, #52]	; 0x34
     982:	fbac 3002 	umull	r3, r0, ip, r2
     986:	9c05      	ldr	r4, [sp, #20]
     988:	fbee 5062 	umaal	r5, r0, lr, r2
     98c:	fbe9 6064 	umaal	r6, r0, r9, r4
     990:	fbea b064 	umaal	fp, r0, sl, r4
     994:	fbe7 3164 	umaal	r3, r1, r7, r4
     998:	fbe8 5164 	umaal	r5, r1, r8, r4
     99c:	9c06      	ldr	r4, [sp, #24]
     99e:	fbe8 6164 	umaal	r6, r1, r8, r4
     9a2:	fbe9 b164 	umaal	fp, r1, r9, r4
     9a6:	fbea 0164 	umaal	r0, r1, sl, r4
     9aa:	930e      	str	r3, [sp, #56]	; 0x38
     9ac:	fba7 3204 	umull	r3, r2, r7, r4
     9b0:	9c07      	ldr	r4, [sp, #28]
     9b2:	fbe7 6264 	umaal	r6, r2, r7, r4
     9b6:	fbe8 b264 	umaal	fp, r2, r8, r4
     9ba:	fbe9 0264 	umaal	r0, r2, r9, r4
     9be:	fbea 1264 	umaal	r1, r2, sl, r4
     9c2:	9c04      	ldr	r4, [sp, #16]
     9c4:	fbe9 5364 	umaal	r5, r3, r9, r4
     9c8:	fbea 6364 	umaal	r6, r3, sl, r4
     9cc:	9c08      	ldr	r4, [sp, #32]
     9ce:	fbe7 b364 	umaal	fp, r3, r7, r4
     9d2:	fbe8 0364 	umaal	r0, r3, r8, r4
     9d6:	fbe9 1364 	umaal	r1, r3, r9, r4
     9da:	fbea 2364 	umaal	r2, r3, sl, r4
     9de:	950f      	str	r5, [sp, #60]	; 0x3c
     9e0:	f85d 9b04 	ldr.w	r9, [sp], #4
     9e4:	e899 0600 	ldmia.w	r9, {r9, sl}
     9e8:	f8dd 8000 	ldr.w	r8, [sp]
     9ec:	fba9 5408 	umull	r5, r4, r9, r8
     9f0:	fbea b468 	umaal	fp, r4, sl, r8
     9f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
     9f8:	fbec 0468 	umaal	r0, r4, ip, r8
     9fc:	fbee 1468 	umaal	r1, r4, lr, r8
     a00:	fbe9 2468 	umaal	r2, r4, r9, r8
     a04:	fbea 3468 	umaal	r3, r4, sl, r8
     a08:	f8dd 8004 	ldr.w	r8, [sp, #4]
     a0c:	fbee 6568 	umaal	r6, r5, lr, r8
     a10:	fbe9 b568 	umaal	fp, r5, r9, r8
     a14:	fbea 0568 	umaal	r0, r5, sl, r8
     a18:	f8dd 8014 	ldr.w	r8, [sp, #20]
     a1c:	fbec 1568 	umaal	r1, r5, ip, r8
     a20:	fbee 2568 	umaal	r2, r5, lr, r8
     a24:	fbe9 3568 	umaal	r3, r5, r9, r8
     a28:	fbea 4568 	umaal	r4, r5, sl, r8
     a2c:	960f      	str	r6, [sp, #60]	; 0x3c
     a2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
     a32:	fbae 7608 	umull	r7, r6, lr, r8
     a36:	fbe9 0668 	umaal	r0, r6, r9, r8
     a3a:	fbea 1668 	umaal	r1, r6, sl, r8
     a3e:	f8dd 8018 	ldr.w	r8, [sp, #24]
     a42:	fbec 2668 	umaal	r2, r6, ip, r8
     a46:	fbee 3668 	umaal	r3, r6, lr, r8
     a4a:	fbe9 4668 	umaal	r4, r6, r9, r8
     a4e:	fbea 5668 	umaal	r5, r6, sl, r8
     a52:	f8dd 800c 	ldr.w	r8, [sp, #12]
     a56:	fbec b768 	umaal	fp, r7, ip, r8
     a5a:	fbee 0768 	umaal	r0, r7, lr, r8
     a5e:	fbe9 1768 	umaal	r1, r7, r9, r8
     a62:	fbea 2768 	umaal	r2, r7, sl, r8
     a66:	f8dd 801c 	ldr.w	r8, [sp, #28]
     a6a:	fbec 3768 	umaal	r3, r7, ip, r8
     a6e:	fbee 4768 	umaal	r4, r7, lr, r8
     a72:	fbe9 5768 	umaal	r5, r7, r9, r8
     a76:	fbea 6768 	umaal	r6, r7, sl, r8
     a7a:	b008      	add	sp, #32
     a7c:	bd00      	pop	{pc}
     a7e:	bf00      	nop

00000a80 <ocrypto_bigint_mul256>:
     a80:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a84:	b087      	sub	sp, #28
     a86:	f7ff ff4f 	bl	928 <ocrypto_mul256_noframe>
     a8a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     a8e:	f108 0820 	add.w	r8, r8, #32
     a92:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     a96:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     a98:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000aa0 <ocrypto_sqr256_noframe>:
     aa0:	b500      	push	{lr}
     aa2:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     aa6:	fba3 5203 	umull	r5, r2, r3, r3
     aaa:	9501      	str	r5, [sp, #4]
     aac:	fba3 0104 	umull	r0, r1, r3, r4
     ab0:	fbe3 2064 	umaal	r2, r0, r3, r4
     ab4:	fbe3 1067 	umaal	r1, r0, r3, r7
     ab8:	9202      	str	r2, [sp, #8]
     aba:	fba3 5207 	umull	r5, r2, r3, r7
     abe:	fbe3 0268 	umaal	r0, r2, r3, r8
     ac2:	fbe4 1564 	umaal	r1, r5, r4, r4
     ac6:	fbe3 0568 	umaal	r0, r5, r3, r8
     aca:	fbe3 2569 	umaal	r2, r5, r3, r9
     ace:	9103      	str	r1, [sp, #12]
     ad0:	fba4 b607 	umull	fp, r6, r4, r7
     ad4:	fbe3 2669 	umaal	r2, r6, r3, r9
     ad8:	fbe3 566a 	umaal	r5, r6, r3, sl
     adc:	fbe4 0b67 	umaal	r0, fp, r4, r7
     ae0:	fbe4 2b68 	umaal	r2, fp, r4, r8
     ae4:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     ae8:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     aec:	9004      	str	r0, [sp, #16]
     aee:	fba4 1008 	umull	r1, r0, r4, r8
     af2:	fbe4 5069 	umaal	r5, r0, r4, r9
     af6:	fbe3 606c 	umaal	r6, r0, r3, ip
     afa:	fbe3 b06e 	umaal	fp, r0, r3, lr
     afe:	fbe7 2167 	umaal	r2, r1, r7, r7
     b02:	fbe4 5169 	umaal	r5, r1, r4, r9
     b06:	fbe4 616a 	umaal	r6, r1, r4, sl
     b0a:	fbe3 b16e 	umaal	fp, r1, r3, lr
     b0e:	fbe4 016e 	umaal	r0, r1, r4, lr
     b12:	9205      	str	r2, [sp, #20]
     b14:	fba7 3208 	umull	r3, r2, r7, r8
     b18:	fbe4 626a 	umaal	r6, r2, r4, sl
     b1c:	fbe4 b26c 	umaal	fp, r2, r4, ip
     b20:	fbe4 026e 	umaal	r0, r2, r4, lr
     b24:	fbe7 126e 	umaal	r1, r2, r7, lr
     b28:	fbe7 5368 	umaal	r5, r3, r7, r8
     b2c:	fbe7 6369 	umaal	r6, r3, r7, r9
     b30:	fbe4 b36c 	umaal	fp, r3, r4, ip
     b34:	fbe7 036c 	umaal	r0, r3, r7, ip
     b38:	fbe7 136e 	umaal	r1, r3, r7, lr
     b3c:	fbe8 236e 	umaal	r2, r3, r8, lr
     b40:	9506      	str	r5, [sp, #24]
     b42:	fba7 5409 	umull	r5, r4, r7, r9
     b46:	fbe7 b46a 	umaal	fp, r4, r7, sl
     b4a:	fbe7 046c 	umaal	r0, r4, r7, ip
     b4e:	fbe8 146c 	umaal	r1, r4, r8, ip
     b52:	fbe8 246e 	umaal	r2, r4, r8, lr
     b56:	fbe9 346e 	umaal	r3, r4, r9, lr
     b5a:	fbe8 6568 	umaal	r6, r5, r8, r8
     b5e:	fbe7 b56a 	umaal	fp, r5, r7, sl
     b62:	fbe8 056a 	umaal	r0, r5, r8, sl
     b66:	fbe8 156c 	umaal	r1, r5, r8, ip
     b6a:	fbe9 256c 	umaal	r2, r5, r9, ip
     b6e:	fbe9 356e 	umaal	r3, r5, r9, lr
     b72:	fbea 456e 	umaal	r4, r5, sl, lr
     b76:	9607      	str	r6, [sp, #28]
     b78:	fba8 7609 	umull	r7, r6, r8, r9
     b7c:	fbe8 066a 	umaal	r0, r6, r8, sl
     b80:	fbe9 166a 	umaal	r1, r6, r9, sl
     b84:	fbe9 266c 	umaal	r2, r6, r9, ip
     b88:	fbea 366c 	umaal	r3, r6, sl, ip
     b8c:	fbea 466e 	umaal	r4, r6, sl, lr
     b90:	fbec 566e 	umaal	r5, r6, ip, lr
     b94:	fbe8 b769 	umaal	fp, r7, r8, r9
     b98:	fbe9 0769 	umaal	r0, r7, r9, r9
     b9c:	fbe9 176a 	umaal	r1, r7, r9, sl
     ba0:	fbea 276a 	umaal	r2, r7, sl, sl
     ba4:	fbea 376c 	umaal	r3, r7, sl, ip
     ba8:	fbec 476c 	umaal	r4, r7, ip, ip
     bac:	fbec 576e 	umaal	r5, r7, ip, lr
     bb0:	fbee 676e 	umaal	r6, r7, lr, lr
     bb4:	bd00      	pop	{pc}
     bb6:	bf00      	nop

00000bb8 <ocrypto_bigint_sqr256>:
     bb8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bbc:	b087      	sub	sp, #28
     bbe:	f7ff ff6f 	bl	aa0 <ocrypto_sqr256_noframe>
     bc2:	f8dd 801c 	ldr.w	r8, [sp, #28]
     bc6:	f108 0820 	add.w	r8, r8, #32
     bca:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     bce:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     bd0:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000bd8 <ocrypto_constant_time_equal>:
     bd8:	b430      	push	{r4, r5}
     bda:	f04f 0300 	mov.w	r3, #0

00000bde <constant_time_equal_loop>:
     bde:	f810 4b01 	ldrb.w	r4, [r0], #1
     be2:	f811 5b01 	ldrb.w	r5, [r1], #1
     be6:	3a01      	subs	r2, #1
     be8:	ea84 0405 	eor.w	r4, r4, r5
     bec:	ea43 0304 	orr.w	r3, r3, r4
     bf0:	d1f5      	bne.n	bde <constant_time_equal_loop>
     bf2:	f1a3 0301 	sub.w	r3, r3, #1
     bf6:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     bfa:	bc30      	pop	{r4, r5}
     bfc:	4770      	bx	lr
     bfe:	bf00      	nop

00000c00 <ocrypto_constant_time_is_zero>:
     c00:	f04f 0300 	mov.w	r3, #0

00000c04 <constant_time_is_zero_loop>:
     c04:	f810 2b01 	ldrb.w	r2, [r0], #1
     c08:	3901      	subs	r1, #1
     c0a:	ea43 0302 	orr.w	r3, r3, r2
     c0e:	d1f9      	bne.n	c04 <constant_time_is_zero_loop>
     c10:	f1a3 0301 	sub.w	r3, r3, #1
     c14:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     c18:	4770      	bx	lr
     c1a:	bf00      	nop

00000c1c <ocrypto_constant_time_xor>:
     c1c:	b430      	push	{r4, r5}

00000c1e <constant_time_xor_loop>:
     c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
     c22:	f812 5b01 	ldrb.w	r5, [r2], #1
     c26:	406c      	eors	r4, r5
     c28:	f800 4b01 	strb.w	r4, [r0], #1
     c2c:	3b01      	subs	r3, #1
     c2e:	d1f6      	bne.n	c1e <constant_time_xor_loop>
     c30:	bc30      	pop	{r4, r5}
     c32:	4770      	bx	lr

00000c34 <ocrypto_mod_p256_add>:
     c34:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     c38:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     c3c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c40:	185b      	adds	r3, r3, r1
     c42:	eb54 040c 	adcs.w	r4, r4, ip
     c46:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c4a:	414d      	adcs	r5, r1
     c4c:	eb56 060c 	adcs.w	r6, r6, ip
     c50:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c54:	414f      	adcs	r7, r1
     c56:	eb58 080c 	adcs.w	r8, r8, ip
     c5a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     c5e:	eb59 0901 	adcs.w	r9, r9, r1
     c62:	eb5a 0a0c 	adcs.w	sl, sl, ip
     c66:	4189      	sbcs	r1, r1
     c68:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     c6c:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     c70:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     c74:	f176 0600 	sbcs.w	r6, r6, #0
     c78:	f177 0700 	sbcs.w	r7, r7, #0
     c7c:	f178 0800 	sbcs.w	r8, r8, #0
     c80:	f179 0901 	sbcs.w	r9, r9, #1
     c84:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     c88:	f151 0100 	adcs.w	r1, r1, #0
     c8c:	185b      	adds	r3, r3, r1
     c8e:	414c      	adcs	r4, r1
     c90:	414d      	adcs	r5, r1
     c92:	f156 0600 	adcs.w	r6, r6, #0
     c96:	f157 0700 	adcs.w	r7, r7, #0
     c9a:	f158 0800 	adcs.w	r8, r8, #0
     c9e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     ca2:	eb5a 0a01 	adcs.w	sl, sl, r1
     ca6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     caa:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     cae:	4770      	bx	lr

00000cb0 <ocrypto_mod_p256_sub>:
     cb0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     cb4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     cb8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     cbc:	1a5b      	subs	r3, r3, r1
     cbe:	eb74 040c 	sbcs.w	r4, r4, ip
     cc2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     cc6:	418d      	sbcs	r5, r1
     cc8:	eb76 060c 	sbcs.w	r6, r6, ip
     ccc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     cd0:	418f      	sbcs	r7, r1
     cd2:	eb78 080c 	sbcs.w	r8, r8, ip
     cd6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     cda:	eb79 0901 	sbcs.w	r9, r9, r1
     cde:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     ce2:	4189      	sbcs	r1, r1
     ce4:	185b      	adds	r3, r3, r1
     ce6:	414c      	adcs	r4, r1
     ce8:	414d      	adcs	r5, r1
     cea:	f156 0600 	adcs.w	r6, r6, #0
     cee:	f157 0700 	adcs.w	r7, r7, #0
     cf2:	f158 0800 	adcs.w	r8, r8, #0
     cf6:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     cfa:	eb5a 0a01 	adcs.w	sl, sl, r1
     cfe:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     d02:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     d06:	4770      	bx	lr

00000d08 <mul_reduce>:
     d08:	eb18 0804 	adds.w	r8, r8, r4
     d0c:	eb59 0905 	adcs.w	r9, r9, r5
     d10:	eb5a 0a06 	adcs.w	sl, sl, r6
     d14:	eb5b 0b07 	adcs.w	fp, fp, r7
     d18:	f05f 0c00 	movs.w	ip, #0
     d1c:	f14c 0c00 	adc.w	ip, ip, #0
     d20:	eb18 0805 	adds.w	r8, r8, r5
     d24:	eb59 0906 	adcs.w	r9, r9, r6
     d28:	eb5a 0a07 	adcs.w	sl, sl, r7
     d2c:	eb5b 0b07 	adcs.w	fp, fp, r7
     d30:	eb50 000c 	adcs.w	r0, r0, ip
     d34:	f05f 0c00 	movs.w	ip, #0
     d38:	eb51 010c 	adcs.w	r1, r1, ip
     d3c:	eb52 020c 	adcs.w	r2, r2, ip
     d40:	4163      	adcs	r3, r4
     d42:	f14c 0c00 	adc.w	ip, ip, #0
     d46:	ebb8 0807 	subs.w	r8, r8, r7
     d4a:	f179 0900 	sbcs.w	r9, r9, #0
     d4e:	f17a 0a00 	sbcs.w	sl, sl, #0
     d52:	eb7b 0b04 	sbcs.w	fp, fp, r4
     d56:	41a8      	sbcs	r0, r5
     d58:	41b1      	sbcs	r1, r6
     d5a:	41a2      	sbcs	r2, r4
     d5c:	41b3      	sbcs	r3, r6
     d5e:	f16c 0c00 	sbc.w	ip, ip, #0
     d62:	ebbb 0b05 	subs.w	fp, fp, r5
     d66:	41b0      	sbcs	r0, r6
     d68:	41b9      	sbcs	r1, r7
     d6a:	41aa      	sbcs	r2, r5
     d6c:	41bb      	sbcs	r3, r7
     d6e:	f16c 0c00 	sbc.w	ip, ip, #0
     d72:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     d76:	ebb8 0804 	subs.w	r8, r8, r4
     d7a:	eb79 0904 	sbcs.w	r9, r9, r4
     d7e:	eb7a 0a04 	sbcs.w	sl, sl, r4
     d82:	f17b 0b00 	sbcs.w	fp, fp, #0
     d86:	f170 0000 	sbcs.w	r0, r0, #0
     d8a:	f171 0100 	sbcs.w	r1, r1, #0
     d8e:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     d92:	41a3      	sbcs	r3, r4
     d94:	f16c 0c00 	sbc.w	ip, ip, #0
     d98:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     d9c:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     da0:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     da4:	f15b 0b00 	adcs.w	fp, fp, #0
     da8:	f150 0400 	adcs.w	r4, r0, #0
     dac:	f151 0500 	adcs.w	r5, r1, #0
     db0:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     db4:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     db8:	f14c 0c00 	adc.w	ip, ip, #0
     dbc:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     dc0:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     dc4:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     dc8:	f15b 0300 	adcs.w	r3, fp, #0
     dcc:	f154 0400 	adcs.w	r4, r4, #0
     dd0:	f155 0500 	adcs.w	r5, r5, #0
     dd4:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     dd8:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     ddc:	4770      	bx	lr
     dde:	bf00      	nop

00000de0 <ocrypto_mod_p256_mul>:
     de0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     de4:	b087      	sub	sp, #28
     de6:	f7ff fd9f 	bl	928 <ocrypto_mul256_noframe>
     dea:	f8dd 8010 	ldr.w	r8, [sp, #16]
     dee:	f8dd 9014 	ldr.w	r9, [sp, #20]
     df2:	f8dd a018 	ldr.w	sl, [sp, #24]
     df6:	f7ff ff87 	bl	d08 <mul_reduce>
     dfa:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     dfe:	f7ff ff83 	bl	d08 <mul_reduce>
     e02:	b003      	add	sp, #12
     e04:	f85d 8b04 	ldr.w	r8, [sp], #4
     e08:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000e10 <ocrypto_mod_p256_sqr>:
     e10:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e14:	b087      	sub	sp, #28
     e16:	f7ff fe43 	bl	aa0 <ocrypto_sqr256_noframe>
     e1a:	f8dd 8010 	ldr.w	r8, [sp, #16]
     e1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
     e22:	f8dd a018 	ldr.w	sl, [sp, #24]
     e26:	f7ff ff6f 	bl	d08 <mul_reduce>
     e2a:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     e2e:	f7ff ff6b 	bl	d08 <mul_reduce>
     e32:	b003      	add	sp, #12
     e34:	f85d 8b04 	ldr.w	r8, [sp], #4
     e38:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000e40 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
     e40:	4801      	ldr	r0, [pc, #4]	; (e48 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
     e42:	7800      	ldrb	r0, [r0, #0]
     e44:	4770      	bx	lr
     e46:	0000      	.short	0x0000
     e48:	20000028 	.word	0x20000028

00000e4c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     e4c:	b570      	push	{r4, r5, r6, lr}
     e4e:	4c17      	ldr	r4, [pc, #92]	; (eac <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
     e50:	7860      	ldrb	r0, [r4, #1]
     e52:	2800      	cmp	r0, #0
     e54:	d123      	bne.n	e9e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
     e56:	2001      	movs	r0, #1
     e58:	7060      	strb	r0, [r4, #1]
     e5a:	f00b fb32 	bl	c4c2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     e5e:	f06f 0527 	mvn.w	r5, #39	; 0x27
     e62:	b928      	cbnz	r0, e70 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     e64:	f00b fb63 	bl	c52e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     e68:	b910      	cbnz	r0, e70 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     e6a:	f00b fb6a 	bl	c542 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     e6e:	b120      	cbz	r0, e7a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
     e70:	480f      	ldr	r0, [pc, #60]	; (eb0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
     e72:	6060      	str	r0, [r4, #4]
     e74:	70a5      	strb	r5, [r4, #2]
     e76:	2008      	movs	r0, #8
     e78:	e010      	b.n	e9c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
     e7a:	f00b faf7 	bl	c46c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     e7e:	b940      	cbnz	r0, e92 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     e80:	f00b fafe 	bl	c480 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     e84:	b928      	cbnz	r0, e92 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     e86:	f00b fb12 	bl	c4ae <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     e8a:	b910      	cbnz	r0, e92 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     e8c:	f00b fb23 	bl	c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     e90:	b130      	cbz	r0, ea0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
     e92:	4807      	ldr	r0, [pc, #28]	; (eb0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
     e94:	3031      	adds	r0, #49	; 0x31
     e96:	6060      	str	r0, [r4, #4]
     e98:	70a5      	strb	r5, [r4, #2]
     e9a:	2004      	movs	r0, #4
     e9c:	70e0      	strb	r0, [r4, #3]
     e9e:	bd70      	pop	{r4, r5, r6, pc}
     ea0:	f44f 718f 	mov.w	r1, #286	; 0x11e
     ea4:	2074      	movs	r0, #116	; 0x74
     ea6:	f003 fb23 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     eaa:	0000      	.short	0x0000
     eac:	20000028 	.word	0x20000028
     eb0:	000107b6 	.word	0x000107b6

00000eb4 <mpsl_tx_power_radio_supported_power_adjust>:
     eb4:	4908      	ldr	r1, [pc, #32]	; (ed8 <mpsl_tx_power_radio_supported_power_adjust+0x24>)
     eb6:	f991 2003 	ldrsb.w	r2, [r1, #3]
     eba:	4290      	cmp	r0, r2
     ebc:	da03      	bge.n	ec6 <mpsl_tx_power_radio_supported_power_adjust+0x12>
     ebe:	f991 2002 	ldrsb.w	r2, [r1, #2]
     ec2:	4290      	cmp	r0, r2
     ec4:	dc01      	bgt.n	eca <mpsl_tx_power_radio_supported_power_adjust+0x16>
     ec6:	4610      	mov	r0, r2
     ec8:	4770      	bx	lr
     eca:	6849      	ldr	r1, [r1, #4]
     ecc:	1a80      	subs	r0, r0, r2
     ece:	5c08      	ldrb	r0, [r1, r0]
     ed0:	4902      	ldr	r1, [pc, #8]	; (edc <mpsl_tx_power_radio_supported_power_adjust+0x28>)
     ed2:	5608      	ldrsb	r0, [r1, r0]
     ed4:	4770      	bx	lr
     ed6:	0000      	.short	0x0000
     ed8:	20000028 	.word	0x20000028
     edc:	000107a8 	.word	0x000107a8

00000ee0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
     ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ee4:	461c      	mov	r4, r3
     ee6:	4690      	mov	r8, r2
     ee8:	460d      	mov	r5, r1
     eea:	4606      	mov	r6, r0
     eec:	f06f 0715 	mvn.w	r7, #21
     ef0:	2804      	cmp	r0, #4
     ef2:	d804      	bhi.n	efe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     ef4:	b11c      	cbz	r4, efe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
     ef6:	f00b f99d 	bl	c234 <__udivmoddi4+0x2a0>
     efa:	42a8      	cmp	r0, r5
     efc:	d802      	bhi.n	f04 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
     efe:	4638      	mov	r0, r7
     f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f04:	4805      	ldr	r0, [pc, #20]	; (f1c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
     f06:	4642      	mov	r2, r8
     f08:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     f0c:	b118      	cbz	r0, f16 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     f0e:	5740      	ldrsb	r0, [r0, r5]
     f10:	4282      	cmp	r2, r0
     f12:	dd00      	ble.n	f16 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
     f14:	4602      	mov	r2, r0
     f16:	7022      	strb	r2, [r4, #0]
     f18:	2000      	movs	r0, #0
     f1a:	e7f1      	b.n	f00 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
     f1c:	20000d98 	.word	0x20000d98

00000f20 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     f20:	4801      	ldr	r0, [pc, #4]	; (f28 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     f22:	7800      	ldrb	r0, [r0, #0]
     f24:	4770      	bx	lr
     f26:	0000      	.short	0x0000
     f28:	20000030 	.word	0x20000030

00000f2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     f2c:	4905      	ldr	r1, [pc, #20]	; (f44 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     f2e:	780a      	ldrb	r2, [r1, #0]
     f30:	4290      	cmp	r0, r2
     f32:	d301      	bcc.n	f38 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     f34:	2000      	movs	r0, #0
     f36:	4770      	bx	lr
     f38:	6849      	ldr	r1, [r1, #4]
     f3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     f3e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     f42:	4770      	bx	lr
     f44:	20000030 	.word	0x20000030

00000f48 <MPSL_IRQ_RADIO_Handler>:
     f48:	490e      	ldr	r1, [pc, #56]	; (f84 <MPSL_IRQ_RADIO_Handler+0x3c>)
     f4a:	b510      	push	{r4, lr}
     f4c:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     f50:	2820      	cmp	r0, #32
     f52:	d012      	beq.n	f7a <MPSL_IRQ_RADIO_Handler+0x32>
     f54:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
     f58:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
     f5c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     f60:	eb02 0080 	add.w	r0, r2, r0, lsl #2
     f64:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
     f68:	6840      	ldr	r0, [r0, #4]
     f6a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
     f6e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
     f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     f76:	2104      	movs	r1, #4
     f78:	4710      	bx	r2
     f7a:	f640 01bc 	movw	r1, #2236	; 0x8bc
     f7e:	2070      	movs	r0, #112	; 0x70
     f80:	f003 fab6 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f84:	200011ac 	.word	0x200011ac
     f88:	b570      	push	{r4, r5, r6, lr}
     f8a:	4605      	mov	r5, r0
     f8c:	2a20      	cmp	r2, #32
     f8e:	d028      	beq.n	fe2 <MPSL_IRQ_RADIO_Handler+0x9a>
     f90:	4819      	ldr	r0, [pc, #100]	; (ff8 <MPSL_IRQ_RADIO_Handler+0xb0>)
     f92:	4c1a      	ldr	r4, [pc, #104]	; (ffc <MPSL_IRQ_RADIO_Handler+0xb4>)
     f94:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     f98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     f9c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     fa0:	4423      	add	r3, r4
     fa2:	2920      	cmp	r1, #32
     fa4:	d022      	beq.n	fec <MPSL_IRQ_RADIO_Handler+0xa4>
     fa6:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     faa:	7840      	ldrb	r0, [r0, #1]
     fac:	784c      	ldrb	r4, [r1, #1]
     fae:	7048      	strb	r0, [r1, #1]
     fb0:	4620      	mov	r0, r4
     fb2:	4601      	mov	r1, r0
     fb4:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     fb8:	4291      	cmp	r1, r2
     fba:	7005      	strb	r5, [r0, #0]
     fbc:	7840      	ldrb	r0, [r0, #1]
     fbe:	d1f8      	bne.n	fb2 <MPSL_IRQ_RADIO_Handler+0x6a>
     fc0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     fc4:	2a20      	cmp	r2, #32
     fc6:	bf1a      	itte	ne
     fc8:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     fcc:	7054      	strbne	r4, [r2, #1]
     fce:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     fd2:	2220      	movs	r2, #32
     fd4:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     fd8:	f88c 2001 	strb.w	r2, [ip, #1]
     fdc:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     fe0:	bd70      	pop	{r4, r5, r6, pc}
     fe2:	f44f 7126 	mov.w	r1, #664	; 0x298
     fe6:	2070      	movs	r0, #112	; 0x70
     fe8:	f003 fa82 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fec:	f893 4020 	ldrb.w	r4, [r3, #32]
     ff0:	7840      	ldrb	r0, [r0, #1]
     ff2:	f883 0020 	strb.w	r0, [r3, #32]
     ff6:	e7db      	b.n	fb0 <MPSL_IRQ_RADIO_Handler+0x68>
     ff8:	2000112c 	.word	0x2000112c
     ffc:	200011ac 	.word	0x200011ac
    1000:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1004:	b08d      	sub	sp, #52	; 0x34
    1006:	4615      	mov	r5, r2
    1008:	460c      	mov	r4, r1
    100a:	f002 f9cd 	bl	33a8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    100e:	4428      	add	r0, r5
    1010:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1014:	9008      	str	r0, [sp, #32]
    1016:	6821      	ldr	r1, [r4, #0]
    1018:	1a08      	subs	r0, r1, r0
    101a:	0200      	lsls	r0, r0, #8
    101c:	17c1      	asrs	r1, r0, #31
    101e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1022:	1200      	asrs	r0, r0, #8
    1024:	2800      	cmp	r0, #0
    1026:	f300 80f0 	bgt.w	120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
    102a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    102e:	48cd      	ldr	r0, [pc, #820]	; (1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>)
    1030:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    1034:	4408      	add	r0, r1
    1036:	9009      	str	r0, [sp, #36]	; 0x24
    1038:	f890 5020 	ldrb.w	r5, [r0, #32]
    103c:	2020      	movs	r0, #32
    103e:	4eca      	ldr	r6, [pc, #808]	; (1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>)
    1040:	f10d 0a18 	add.w	sl, sp, #24
    1044:	f10d 091c 	add.w	r9, sp, #28
    1048:	f88d 0018 	strb.w	r0, [sp, #24]
    104c:	2d20      	cmp	r5, #32
    104e:	bf1c      	itt	ne
    1050:	48c6      	ldrne	r0, [pc, #792]	; (136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>)
    1052:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1056:	d038      	beq.n	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
    1058:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    105c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1060:	f100 0108 	add.w	r1, r0, #8
    1064:	68c0      	ldr	r0, [r0, #12]
    1066:	6827      	ldr	r7, [r4, #0]
    1068:	1a38      	subs	r0, r7, r0
    106a:	0200      	lsls	r0, r0, #8
    106c:	17c2      	asrs	r2, r0, #31
    106e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1072:	1200      	asrs	r0, r0, #8
    1074:	d429      	bmi.n	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
    1076:	89e0      	ldrh	r0, [r4, #14]
    1078:	b300      	cbz	r0, 10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    107a:	89c8      	ldrh	r0, [r1, #14]
    107c:	b9f0      	cbnz	r0, 10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    107e:	6808      	ldr	r0, [r1, #0]
    1080:	9003      	str	r0, [sp, #12]
    1082:	f003 f88b 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1086:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    108a:	bf08      	it	eq
    108c:	200d      	moveq	r0, #13
    108e:	d00b      	beq.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
    1090:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1094:	3856      	subs	r0, #86	; 0x56
    1096:	bf08      	it	eq
    1098:	201c      	moveq	r0, #28
    109a:	d005      	beq.n	10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
    109c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    10a0:	389f      	subs	r0, #159	; 0x9f
    10a2:	bf14      	ite	ne
    10a4:	2000      	movne	r0, #0
    10a6:	2032      	moveq	r0, #50	; 0x32
    10a8:	1c41      	adds	r1, r0, #1
    10aa:	9803      	ldr	r0, [sp, #12]
    10ac:	1a38      	subs	r0, r7, r0
    10ae:	0200      	lsls	r0, r0, #8
    10b0:	17c2      	asrs	r2, r0, #31
    10b2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    10b6:	1200      	asrs	r0, r0, #8
    10b8:	4288      	cmp	r0, r1
    10ba:	db06      	blt.n	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
    10bc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    10c0:	f88a 5000 	strb.w	r5, [sl]
    10c4:	7845      	ldrb	r5, [r0, #1]
    10c6:	2d20      	cmp	r5, #32
    10c8:	d1c6      	bne.n	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
    10ca:	f89a 0000 	ldrb.w	r0, [sl]
    10ce:	f889 0000 	strb.w	r0, [r9]
    10d2:	2d20      	cmp	r5, #32
    10d4:	bf1c      	itt	ne
    10d6:	48a5      	ldrne	r0, [pc, #660]	; (136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>)
    10d8:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    10dc:	f000 813e 	beq.w	135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>
    10e0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    10e4:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    10e8:	6861      	ldr	r1, [r4, #4]
    10ea:	f8d7 8008 	ldr.w	r8, [r7, #8]
    10ee:	f107 0008 	add.w	r0, r7, #8
    10f2:	eba8 0101 	sub.w	r1, r8, r1
    10f6:	0209      	lsls	r1, r1, #8
    10f8:	17ca      	asrs	r2, r1, #31
    10fa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    10fe:	1209      	asrs	r1, r1, #8
    1100:	d427      	bmi.n	1152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
    1102:	89c0      	ldrh	r0, [r0, #14]
    1104:	2800      	cmp	r0, #0
    1106:	f000 8129 	beq.w	135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>
    110a:	89e0      	ldrh	r0, [r4, #14]
    110c:	2800      	cmp	r0, #0
    110e:	f040 8125 	bne.w	135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>
    1112:	f8d4 a000 	ldr.w	sl, [r4]
    1116:	f003 f841 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    111a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    111e:	bf08      	it	eq
    1120:	200d      	moveq	r0, #13
    1122:	d00b      	beq.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
    1124:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1128:	3856      	subs	r0, #86	; 0x56
    112a:	bf08      	it	eq
    112c:	201c      	moveq	r0, #28
    112e:	d005      	beq.n	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
    1130:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1134:	389f      	subs	r0, #159	; 0x9f
    1136:	bf14      	ite	ne
    1138:	2000      	movne	r0, #0
    113a:	2032      	moveq	r0, #50	; 0x32
    113c:	1c41      	adds	r1, r0, #1
    113e:	eba8 000a 	sub.w	r0, r8, sl
    1142:	0200      	lsls	r0, r0, #8
    1144:	17c2      	asrs	r2, r0, #31
    1146:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    114a:	1200      	asrs	r0, r0, #8
    114c:	4288      	cmp	r0, r1
    114e:	f280 8105 	bge.w	135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>
    1152:	f889 5000 	strb.w	r5, [r9]
    1156:	7e38      	ldrb	r0, [r7, #24]
    1158:	7c21      	ldrb	r1, [r4, #16]
    115a:	4288      	cmp	r0, r1
    115c:	d906      	bls.n	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
    115e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1162:	7845      	ldrb	r5, [r0, #1]
    1164:	2d20      	cmp	r5, #32
    1166:	d1bb      	bne.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
    1168:	f000 b8f8 	b.w	135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>
    116c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1170:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1174:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1178:	8ac1      	ldrh	r1, [r0, #22]
    117a:	68c5      	ldr	r5, [r0, #12]
    117c:	bbe1      	cbnz	r1, 11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>
    117e:	89e1      	ldrh	r1, [r4, #14]
    1180:	b3d1      	cbz	r1, 11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>
    1182:	6887      	ldr	r7, [r0, #8]
    1184:	f003 f80a 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1188:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    118c:	bf08      	it	eq
    118e:	200d      	moveq	r0, #13
    1190:	d00b      	beq.n	11aa <CONFIG_FPROTECT_BLOCK_SIZE+0x1aa>
    1192:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1196:	3856      	subs	r0, #86	; 0x56
    1198:	bf08      	it	eq
    119a:	201c      	moveq	r0, #28
    119c:	d005      	beq.n	11aa <CONFIG_FPROTECT_BLOCK_SIZE+0x1aa>
    119e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    11a2:	389f      	subs	r0, #159	; 0x9f
    11a4:	bf14      	ite	ne
    11a6:	2000      	movne	r0, #0
    11a8:	2032      	moveq	r0, #50	; 0x32
    11aa:	1c41      	adds	r1, r0, #1
    11ac:	1be8      	subs	r0, r5, r7
    11ae:	0200      	lsls	r0, r0, #8
    11b0:	17c2      	asrs	r2, r0, #31
    11b2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    11b6:	1200      	asrs	r0, r0, #8
    11b8:	4288      	cmp	r0, r1
    11ba:	da1d      	bge.n	11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>
    11bc:	f002 ffee 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    11c0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    11c4:	bf08      	it	eq
    11c6:	200d      	moveq	r0, #13
    11c8:	d00b      	beq.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
    11ca:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    11ce:	3856      	subs	r0, #86	; 0x56
    11d0:	bf08      	it	eq
    11d2:	201c      	moveq	r0, #28
    11d4:	d005      	beq.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
    11d6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    11da:	389f      	subs	r0, #159	; 0x9f
    11dc:	bf14      	ite	ne
    11de:	2000      	movne	r0, #0
    11e0:	2032      	moveq	r0, #50	; 0x32
    11e2:	f89d 101c 	ldrb.w	r1, [sp, #28]
    11e6:	1c40      	adds	r0, r0, #1
    11e8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    11ec:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    11f0:	6889      	ldr	r1, [r1, #8]
    11f2:	4408      	add	r0, r1
    11f4:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    11f8:	9808      	ldr	r0, [sp, #32]
    11fa:	1a28      	subs	r0, r5, r0
    11fc:	0200      	lsls	r0, r0, #8
    11fe:	17c1      	asrs	r1, r0, #31
    1200:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1204:	1200      	asrs	r0, r0, #8
    1206:	2800      	cmp	r0, #0
    1208:	dd03      	ble.n	1212 <CONFIG_FPROTECT_BLOCK_SIZE+0x212>
    120a:	b011      	add	sp, #68	; 0x44
    120c:	2000      	movs	r0, #0
    120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1212:	6820      	ldr	r0, [r4, #0]
    1214:	42a8      	cmp	r0, r5
    1216:	d902      	bls.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
    1218:	68a1      	ldr	r1, [r4, #8]
    121a:	1c49      	adds	r1, r1, #1
    121c:	60a1      	str	r1, [r4, #8]
    121e:	6861      	ldr	r1, [r4, #4]
    1220:	f10d 0a18 	add.w	sl, sp, #24
    1224:	1a08      	subs	r0, r1, r0
    1226:	4428      	add	r0, r5
    1228:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    122c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1230:	e9c4 1000 	strd	r1, r0, [r4]
    1234:	9810      	ldr	r0, [sp, #64]	; 0x40
    1236:	900b      	str	r0, [sp, #44]	; 0x2c
    1238:	9809      	ldr	r0, [sp, #36]	; 0x24
    123a:	f10d 081c 	add.w	r8, sp, #28
    123e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1242:	2020      	movs	r0, #32
    1244:	f88d 0018 	strb.w	r0, [sp, #24]
    1248:	2d20      	cmp	r5, #32
    124a:	d03c      	beq.n	12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    124c:	4947      	ldr	r1, [pc, #284]	; (136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>)
    124e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1250:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    1254:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1258:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    125c:	f100 0108 	add.w	r1, r0, #8
    1260:	68c0      	ldr	r0, [r0, #12]
    1262:	6827      	ldr	r7, [r4, #0]
    1264:	1a38      	subs	r0, r7, r0
    1266:	0200      	lsls	r0, r0, #8
    1268:	17c2      	asrs	r2, r0, #31
    126a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    126e:	1200      	asrs	r0, r0, #8
    1270:	d429      	bmi.n	12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    1272:	89e0      	ldrh	r0, [r4, #14]
    1274:	b300      	cbz	r0, 12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
    1276:	89c8      	ldrh	r0, [r1, #14]
    1278:	b9f0      	cbnz	r0, 12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
    127a:	f8d1 9000 	ldr.w	r9, [r1]
    127e:	f002 ff8d 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1282:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1286:	bf08      	it	eq
    1288:	200d      	moveq	r0, #13
    128a:	d00b      	beq.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    128c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1290:	3856      	subs	r0, #86	; 0x56
    1292:	bf08      	it	eq
    1294:	201c      	moveq	r0, #28
    1296:	d005      	beq.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
    1298:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    129c:	389f      	subs	r0, #159	; 0x9f
    129e:	bf14      	ite	ne
    12a0:	2000      	movne	r0, #0
    12a2:	2032      	moveq	r0, #50	; 0x32
    12a4:	1c41      	adds	r1, r0, #1
    12a6:	eba7 0009 	sub.w	r0, r7, r9
    12aa:	0200      	lsls	r0, r0, #8
    12ac:	17c2      	asrs	r2, r0, #31
    12ae:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    12b2:	1200      	asrs	r0, r0, #8
    12b4:	4288      	cmp	r0, r1
    12b6:	db06      	blt.n	12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    12b8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    12bc:	f88a 5000 	strb.w	r5, [sl]
    12c0:	7845      	ldrb	r5, [r0, #1]
    12c2:	2d20      	cmp	r5, #32
    12c4:	d1c6      	bne.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
    12c6:	f89a 0000 	ldrb.w	r0, [sl]
    12ca:	f888 0000 	strb.w	r0, [r8]
    12ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
    12d0:	2d20      	cmp	r5, #32
    12d2:	bf1c      	itt	ne
    12d4:	4925      	ldrne	r1, [pc, #148]	; (136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>)
    12d6:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    12da:	d03f      	beq.n	135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>
    12dc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    12e0:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    12e4:	6860      	ldr	r0, [r4, #4]
    12e6:	f8d7 9008 	ldr.w	r9, [r7, #8]
    12ea:	f107 0108 	add.w	r1, r7, #8
    12ee:	eba9 0000 	sub.w	r0, r9, r0
    12f2:	0200      	lsls	r0, r0, #8
    12f4:	17c2      	asrs	r2, r0, #31
    12f6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    12fa:	1200      	asrs	r0, r0, #8
    12fc:	d422      	bmi.n	1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
    12fe:	89c8      	ldrh	r0, [r1, #14]
    1300:	b360      	cbz	r0, 135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>
    1302:	89e0      	ldrh	r0, [r4, #14]
    1304:	bb50      	cbnz	r0, 135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>
    1306:	f8d4 a000 	ldr.w	sl, [r4]
    130a:	f002 ff47 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    130e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1312:	bf08      	it	eq
    1314:	200d      	moveq	r0, #13
    1316:	d00b      	beq.n	1330 <CONFIG_FPROTECT_BLOCK_SIZE+0x330>
    1318:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    131c:	3856      	subs	r0, #86	; 0x56
    131e:	bf08      	it	eq
    1320:	201c      	moveq	r0, #28
    1322:	d005      	beq.n	1330 <CONFIG_FPROTECT_BLOCK_SIZE+0x330>
    1324:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1328:	389f      	subs	r0, #159	; 0x9f
    132a:	bf14      	ite	ne
    132c:	2000      	movne	r0, #0
    132e:	2032      	moveq	r0, #50	; 0x32
    1330:	1c41      	adds	r1, r0, #1
    1332:	eba9 000a 	sub.w	r0, r9, sl
    1336:	0200      	lsls	r0, r0, #8
    1338:	17c2      	asrs	r2, r0, #31
    133a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    133e:	1200      	asrs	r0, r0, #8
    1340:	4288      	cmp	r0, r1
    1342:	da0b      	bge.n	135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>
    1344:	f888 5000 	strb.w	r5, [r8]
    1348:	7e38      	ldrb	r0, [r7, #24]
    134a:	7c21      	ldrb	r1, [r4, #16]
    134c:	4288      	cmp	r0, r1
    134e:	f67f af0d 	bls.w	116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>
    1352:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1356:	7845      	ldrb	r5, [r0, #1]
    1358:	2d20      	cmp	r5, #32
    135a:	d1bf      	bne.n	12dc <CONFIG_FPROTECT_BLOCK_SIZE+0x2dc>
    135c:	b011      	add	sp, #68	; 0x44
    135e:	2001      	movs	r0, #1
    1360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1364:	200011ac 	.word	0x200011ac
    1368:	20000dac 	.word	0x20000dac
    136c:	2000112c 	.word	0x2000112c
    1370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1374:	460f      	mov	r7, r1
    1376:	4606      	mov	r6, r0
    1378:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    137c:	494b      	ldr	r1, [pc, #300]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    137e:	4699      	mov	r9, r3
    1380:	4408      	add	r0, r1
    1382:	4692      	mov	sl, r2
    1384:	f890 4020 	ldrb.w	r4, [r0, #32]
    1388:	2020      	movs	r0, #32
    138a:	7010      	strb	r0, [r2, #0]
    138c:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    1390:	2c20      	cmp	r4, #32
    1392:	bf1c      	itt	ne
    1394:	4846      	ldrne	r0, [pc, #280]	; (14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>)
    1396:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    139a:	d038      	beq.n	140e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x86>
    139c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    13a0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    13a4:	f100 0108 	add.w	r1, r0, #8
    13a8:	68c0      	ldr	r0, [r0, #12]
    13aa:	6835      	ldr	r5, [r6, #0]
    13ac:	1a28      	subs	r0, r5, r0
    13ae:	0200      	lsls	r0, r0, #8
    13b0:	17c2      	asrs	r2, r0, #31
    13b2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13b6:	1200      	asrs	r0, r0, #8
    13b8:	d429      	bmi.n	140e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x86>
    13ba:	89f0      	ldrh	r0, [r6, #14]
    13bc:	b300      	cbz	r0, 1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>
    13be:	89c8      	ldrh	r0, [r1, #14]
    13c0:	b9f0      	cbnz	r0, 1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>
    13c2:	6808      	ldr	r0, [r1, #0]
    13c4:	9000      	str	r0, [sp, #0]
    13c6:	f002 fee9 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    13ca:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    13ce:	bf08      	it	eq
    13d0:	200d      	moveq	r0, #13
    13d2:	d00b      	beq.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
    13d4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    13d8:	3856      	subs	r0, #86	; 0x56
    13da:	bf08      	it	eq
    13dc:	201c      	moveq	r0, #28
    13de:	d005      	beq.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
    13e0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    13e4:	389f      	subs	r0, #159	; 0x9f
    13e6:	bf14      	ite	ne
    13e8:	2000      	movne	r0, #0
    13ea:	2032      	moveq	r0, #50	; 0x32
    13ec:	1c41      	adds	r1, r0, #1
    13ee:	9800      	ldr	r0, [sp, #0]
    13f0:	1a28      	subs	r0, r5, r0
    13f2:	0200      	lsls	r0, r0, #8
    13f4:	17c2      	asrs	r2, r0, #31
    13f6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13fa:	1200      	asrs	r0, r0, #8
    13fc:	4288      	cmp	r0, r1
    13fe:	db06      	blt.n	140e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x86>
    1400:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    1404:	f88a 4000 	strb.w	r4, [sl]
    1408:	7844      	ldrb	r4, [r0, #1]
    140a:	2c20      	cmp	r4, #32
    140c:	d1c6      	bne.n	139c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14>
    140e:	f89a 0000 	ldrb.w	r0, [sl]
    1412:	f889 0000 	strb.w	r0, [r9]
    1416:	2c20      	cmp	r4, #32
    1418:	bf1c      	itt	ne
    141a:	4825      	ldrne	r0, [pc, #148]	; (14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>)
    141c:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    1420:	d040      	beq.n	14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>
    1422:	bf00      	nop
    1424:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1428:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    142c:	6870      	ldr	r0, [r6, #4]
    142e:	68bd      	ldr	r5, [r7, #8]
    1430:	f107 0108 	add.w	r1, r7, #8
    1434:	1a28      	subs	r0, r5, r0
    1436:	0200      	lsls	r0, r0, #8
    1438:	17c2      	asrs	r2, r0, #31
    143a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    143e:	1200      	asrs	r0, r0, #8
    1440:	d422      	bmi.n	1488 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100>
    1442:	89c8      	ldrh	r0, [r1, #14]
    1444:	b370      	cbz	r0, 14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>
    1446:	89f0      	ldrh	r0, [r6, #14]
    1448:	bb60      	cbnz	r0, 14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>
    144a:	f8d6 b000 	ldr.w	fp, [r6]
    144e:	f002 fea5 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1452:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1456:	bf08      	it	eq
    1458:	200d      	moveq	r0, #13
    145a:	d00b      	beq.n	1474 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xec>
    145c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1460:	3856      	subs	r0, #86	; 0x56
    1462:	bf08      	it	eq
    1464:	201c      	moveq	r0, #28
    1466:	d005      	beq.n	1474 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xec>
    1468:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    146c:	389f      	subs	r0, #159	; 0x9f
    146e:	bf14      	ite	ne
    1470:	2000      	movne	r0, #0
    1472:	2032      	moveq	r0, #50	; 0x32
    1474:	1c41      	adds	r1, r0, #1
    1476:	eba5 000b 	sub.w	r0, r5, fp
    147a:	0200      	lsls	r0, r0, #8
    147c:	17c2      	asrs	r2, r0, #31
    147e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1482:	1200      	asrs	r0, r0, #8
    1484:	4288      	cmp	r0, r1
    1486:	da0d      	bge.n	14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>
    1488:	f889 4000 	strb.w	r4, [r9]
    148c:	7e38      	ldrb	r0, [r7, #24]
    148e:	7c31      	ldrb	r1, [r6, #16]
    1490:	4288      	cmp	r0, r1
    1492:	d802      	bhi.n	149a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x112>
    1494:	2000      	movs	r0, #0
    1496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    149a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    149e:	7844      	ldrb	r4, [r0, #1]
    14a0:	2c20      	cmp	r4, #32
    14a2:	d1bf      	bne.n	1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>
    14a4:	2001      	movs	r0, #1
    14a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14aa:	0000      	.short	0x0000
    14ac:	200011ac 	.word	0x200011ac
    14b0:	2000112c 	.word	0x2000112c
    14b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14b8:	b098      	sub	sp, #96	; 0x60
    14ba:	4615      	mov	r5, r2
    14bc:	468b      	mov	fp, r1
    14be:	f002 fa21 	bl	3904 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    14c2:	4604      	mov	r4, r0
    14c4:	f002 fc9c 	bl	3e00 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    14c8:	4606      	mov	r6, r0
    14ca:	f1bb 0f01 	cmp.w	fp, #1
    14ce:	bf18      	it	ne
    14d0:	f1bb 0f02 	cmpne.w	fp, #2
    14d4:	d005      	beq.n	14e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a>
    14d6:	f640 1192 	movw	r1, #2450	; 0x992
    14da:	f04f 0070 	mov.w	r0, #112	; 0x70
    14de:	f003 f807 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14e2:	49ff      	ldr	r1, [pc, #1020]	; (18e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x558>)
    14e4:	2001      	movs	r0, #1
    14e6:	6008      	str	r0, [r1, #0]
    14e8:	49fe      	ldr	r1, [pc, #1016]	; (18e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x55c>)
    14ea:	6889      	ldr	r1, [r1, #8]
    14ec:	6008      	str	r0, [r1, #0]
    14ee:	2000      	movs	r0, #0
    14f0:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
    14f4:	900e      	str	r0, [sp, #56]	; 0x38
    14f6:	1e40      	subs	r0, r0, #1
    14f8:	900f      	str	r0, [sp, #60]	; 0x3c
    14fa:	49fb      	ldr	r1, [pc, #1004]	; (18e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x560>)
    14fc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1500:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    1504:	e9d1 0c02 	ldrd	r0, ip, [r1, #8]
    1508:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    150c:	e9cd 0c10 	strd	r0, ip, [sp, #64]	; 0x40
    1510:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    1514:	6989      	ldr	r1, [r1, #24]
    1516:	9114      	str	r1, [sp, #80]	; 0x50
    1518:	f00a fec3 	bl	c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    151c:	4601      	mov	r1, r0
    151e:	f8bd 804e 	ldrh.w	r8, [sp, #78]	; 0x4e
    1522:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1526:	4bf1      	ldr	r3, [pc, #964]	; (18ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x564>)
    1528:	4440      	add	r0, r8
    152a:	1c42      	adds	r2, r0, #1
    152c:	1888      	adds	r0, r1, r2
    152e:	4299      	cmp	r1, r3
    1530:	d84f      	bhi.n	15d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24a>
    1532:	4def      	ldr	r5, [pc, #956]	; (18f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x568>)
    1534:	42aa      	cmp	r2, r5
    1536:	dc53      	bgt.n	15e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x258>
    1538:	4269      	negs	r1, r5
    153a:	428a      	cmp	r2, r1
    153c:	db58      	blt.n	15f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x268>
    153e:	1c59      	adds	r1, r3, #1
    1540:	4281      	cmp	r1, r0
    1542:	bfdc      	itt	le
    1544:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1548:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    154c:	dd05      	ble.n	155a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d2>
    154e:	2800      	cmp	r0, #0
    1550:	bfbc      	itt	lt
    1552:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1556:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    155a:	900c      	str	r0, [sp, #48]	; 0x30
    155c:	48e5      	ldr	r0, [pc, #916]	; (18f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56c>)
    155e:	f1b8 0f00 	cmp.w	r8, #0
    1562:	8b80      	ldrh	r0, [r0, #28]
    1564:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
    1568:	bf04      	itt	eq
    156a:	2000      	moveq	r0, #0
    156c:	900b      	streq	r0, [sp, #44]	; 0x2c
    156e:	d00b      	beq.n	1588 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x200>
    1570:	2001      	movs	r0, #1
    1572:	900b      	str	r0, [sp, #44]	; 0x2c
    1574:	48df      	ldr	r0, [pc, #892]	; (18f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56c>)
    1576:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    157a:	b928      	cbnz	r0, 1588 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x200>
    157c:	f002 ff40 	bl	4400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1580:	2800      	cmp	r0, #0
    1582:	bf08      	it	eq
    1584:	2701      	moveq	r7, #1
    1586:	d000      	beq.n	158a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x202>
    1588:	2700      	movs	r7, #0
    158a:	f002 fe07 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    158e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1592:	bf08      	it	eq
    1594:	200d      	moveq	r0, #13
    1596:	d00b      	beq.n	15b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x228>
    1598:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    159c:	3856      	subs	r0, #86	; 0x56
    159e:	bf08      	it	eq
    15a0:	201c      	moveq	r0, #28
    15a2:	d005      	beq.n	15b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x228>
    15a4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    15a8:	389f      	subs	r0, #159	; 0x9f
    15aa:	bf14      	ite	ne
    15ac:	2000      	movne	r0, #0
    15ae:	2032      	moveq	r0, #50	; 0x32
    15b0:	f04f 0900 	mov.w	r9, #0
    15b4:	46ca      	mov	sl, r9
    15b6:	9009      	str	r0, [sp, #36]	; 0x24
    15b8:	4546      	cmp	r6, r8
    15ba:	d937      	bls.n	162c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a4>
    15bc:	990c      	ldr	r1, [sp, #48]	; 0x30
    15be:	f8df 932c 	ldr.w	r9, [pc, #812]	; 18ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x564>
    15c2:	ea6f 0c06 	mvn.w	ip, r6
    15c6:	466b      	mov	r3, sp
    15c8:	aa16      	add	r2, sp, #88	; 0x58
    15ca:	eb01 000c 	add.w	r0, r1, ip
    15ce:	4549      	cmp	r1, r9
    15d0:	d904      	bls.n	15dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x254>
    15d2:	f240 519e 	movw	r1, #1438	; 0x59e
    15d6:	2070      	movs	r0, #112	; 0x70
    15d8:	f002 ff8a 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15dc:	45ac      	cmp	ip, r5
    15de:	dd04      	ble.n	15ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x262>
    15e0:	f240 519f 	movw	r1, #1439	; 0x59f
    15e4:	2070      	movs	r0, #112	; 0x70
    15e6:	f002 ff83 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15ea:	49c3      	ldr	r1, [pc, #780]	; (18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>)
    15ec:	458c      	cmp	ip, r1
    15ee:	da04      	bge.n	15fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x272>
    15f0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    15f4:	2070      	movs	r0, #112	; 0x70
    15f6:	f002 ff7b 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15fa:	49c0      	ldr	r1, [pc, #768]	; (18fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x574>)
    15fc:	4281      	cmp	r1, r0
    15fe:	bfdc      	itt	le
    1600:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1604:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1608:	dd05      	ble.n	1616 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28e>
    160a:	2800      	cmp	r0, #0
    160c:	bfbc      	itt	lt
    160e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1612:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1616:	4619      	mov	r1, r3
    1618:	f001 fee2 	bl	33e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    161c:	9800      	ldr	r0, [sp, #0]
    161e:	9910      	ldr	r1, [sp, #64]	; 0x40
    1620:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1624:	9000      	str	r0, [sp, #0]
    1626:	1a08      	subs	r0, r1, r0
    1628:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    162c:	2f00      	cmp	r7, #0
    162e:	bf18      	it	ne
    1630:	f8dd a024 	ldrne.w	sl, [sp, #36]	; 0x24
    1634:	d105      	bne.n	1642 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ba>
    1636:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    163a:	2800      	cmp	r0, #0
    163c:	bf18      	it	ne
    163e:	f04f 0a02 	movne.w	sl, #2
    1642:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1646:	d008      	beq.n	165a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d2>
    1648:	9810      	ldr	r0, [sp, #64]	; 0x40
    164a:	1b00      	subs	r0, r0, r4
    164c:	0200      	lsls	r0, r0, #8
    164e:	17c1      	asrs	r1, r0, #31
    1650:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1654:	1200      	asrs	r0, r0, #8
    1656:	2801      	cmp	r0, #1
    1658:	da02      	bge.n	1660 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d8>
    165a:	2003      	movs	r0, #3
    165c:	9d18      	ldr	r5, [sp, #96]	; 0x60
    165e:	e00d      	b.n	167c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f4>
    1660:	b157      	cbz	r7, 1678 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f0>
    1662:	48a4      	ldr	r0, [pc, #656]	; (18f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56c>)
    1664:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    1668:	b130      	cbz	r0, 1678 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f0>
    166a:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    166e:	f110 0a00 	adds.w	sl, r0, #0
    1672:	bf18      	it	ne
    1674:	f04f 0a02 	movne.w	sl, #2
    1678:	4625      	mov	r5, r4
    167a:	2000      	movs	r0, #0
    167c:	4482      	add	sl, r0
    167e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1680:	eba0 0009 	sub.w	r0, r0, r9
    1684:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1688:	1e50      	subs	r0, r2, #1
    168a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    168e:	1b41      	subs	r1, r0, r5
    1690:	0209      	lsls	r1, r1, #8
    1692:	17cb      	asrs	r3, r1, #31
    1694:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    1698:	1209      	asrs	r1, r1, #8
    169a:	4551      	cmp	r1, sl
    169c:	db04      	blt.n	16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>
    169e:	f1b9 0f00 	cmp.w	r9, #0
    16a2:	bf18      	it	ne
    16a4:	9210      	strne	r2, [sp, #64]	; 0x40
    16a6:	e02d      	b.n	1704 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x37c>
    16a8:	f1b9 0f00 	cmp.w	r9, #0
    16ac:	d005      	beq.n	16ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x332>
    16ae:	f89d 0055 	ldrb.w	r0, [sp, #85]	; 0x55
    16b2:	b920      	cbnz	r0, 16be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x336>
    16b4:	f002 fb9a 	bl	3dec <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    16b8:	b108      	cbz	r0, 16be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x336>
    16ba:	b9af      	cbnz	r7, 16e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x360>
    16bc:	e00c      	b.n	16d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x350>
    16be:	b92f      	cbnz	r7, 16cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x344>
    16c0:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    16c4:	2800      	cmp	r0, #0
    16c6:	bf18      	it	ne
    16c8:	f1aa 0a02 	subne.w	sl, sl, #2
    16cc:	f04f 0900 	mov.w	r9, #0
    16d0:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
    16d4:	464e      	mov	r6, r9
    16d6:	e007      	b.n	16e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x360>
    16d8:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    16dc:	b120      	cbz	r0, 16e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x360>
    16de:	2000      	movs	r0, #0
    16e0:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    16e4:	f1aa 0a02 	sub.w	sl, sl, #2
    16e8:	9810      	ldr	r0, [sp, #64]	; 0x40
    16ea:	eba0 0009 	sub.w	r0, r0, r9
    16ee:	1e40      	subs	r0, r0, #1
    16f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16f4:	1b41      	subs	r1, r0, r5
    16f6:	0209      	lsls	r1, r1, #8
    16f8:	17ca      	asrs	r2, r1, #31
    16fa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    16fe:	1209      	asrs	r1, r1, #8
    1700:	4551      	cmp	r1, sl
    1702:	db7c      	blt.n	17fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x476>
    1704:	970a      	str	r7, [sp, #40]	; 0x28
    1706:	4605      	mov	r5, r0
    1708:	f04f 0900 	mov.w	r9, #0
    170c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    170e:	f001 ffd1 	bl	36b4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1712:	1a28      	subs	r0, r5, r0
    1714:	0200      	lsls	r0, r0, #8
    1716:	17c1      	asrs	r1, r0, #31
    1718:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    171c:	ea4f 2a20 	mov.w	sl, r0, asr #8
    1720:	f002 fd3c 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1724:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1728:	bf08      	it	eq
    172a:	200d      	moveq	r0, #13
    172c:	d00b      	beq.n	1746 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3be>
    172e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1732:	3856      	subs	r0, #86	; 0x56
    1734:	bf08      	it	eq
    1736:	201c      	moveq	r0, #28
    1738:	d005      	beq.n	1746 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3be>
    173a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    173e:	389f      	subs	r0, #159	; 0x9f
    1740:	bf14      	ite	ne
    1742:	2000      	movne	r0, #0
    1744:	2032      	moveq	r0, #50	; 0x32
    1746:	300b      	adds	r0, #11
    1748:	4582      	cmp	sl, r0
    174a:	da20      	bge.n	178e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x406>
    174c:	f1bb 0f01 	cmp.w	fp, #1
    1750:	d002      	beq.n	1758 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d0>
    1752:	980a      	ldr	r0, [sp, #40]	; 0x28
    1754:	b140      	cbz	r0, 1768 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e0>
    1756:	e012      	b.n	177e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f6>
    1758:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    175c:	d11c      	bne.n	1798 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x410>
    175e:	f640 1113 	movw	r1, #2323	; 0x913
    1762:	2070      	movs	r0, #112	; 0x70
    1764:	f002 fec4 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1768:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    176c:	d007      	beq.n	177e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3f6>
    176e:	1b60      	subs	r0, r4, r5
    1770:	0200      	lsls	r0, r0, #8
    1772:	17c1      	asrs	r1, r0, #31
    1774:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1778:	1200      	asrs	r0, r0, #8
    177a:	2804      	cmp	r0, #4
    177c:	dd04      	ble.n	1788 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x400>
    177e:	462c      	mov	r4, r5
    1780:	4620      	mov	r0, r4
    1782:	f001 ffbd 	bl	3700 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1786:	e007      	b.n	1798 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x410>
    1788:	2800      	cmp	r0, #0
    178a:	dc64      	bgt.n	1856 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ce>
    178c:	e004      	b.n	1798 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x410>
    178e:	462c      	mov	r4, r5
    1790:	4620      	mov	r0, r4
    1792:	f001 ffb5 	bl	3700 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1796:	46b9      	mov	r9, r7
    1798:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    179c:	d056      	beq.n	184c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c4>
    179e:	9810      	ldr	r0, [sp, #64]	; 0x40
    17a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    17a2:	1b00      	subs	r0, r0, r4
    17a4:	1b12      	subs	r2, r2, r4
    17a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17aa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    17ae:	2801      	cmp	r0, #1
    17b0:	d351      	bcc.n	1856 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ce>
    17b2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    17b6:	bf98      	it	ls
    17b8:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    17bc:	d84b      	bhi.n	1856 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ce>
    17be:	4620      	mov	r0, r4
    17c0:	f00a fd6f 	bl	c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    17c4:	990c      	ldr	r1, [sp, #48]	; 0x30
    17c6:	4a4a      	ldr	r2, [pc, #296]	; (18f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x568>)
    17c8:	1a0d      	subs	r5, r1, r0
    17ca:	f04f 0a00 	mov.w	sl, #0
    17ce:	1aaa      	subs	r2, r5, r2
    17d0:	f17a 0200 	sbcs.w	r2, sl, #0
    17d4:	d318      	bcc.n	1808 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x480>
    17d6:	4b46      	ldr	r3, [pc, #280]	; (18f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x568>)
    17d8:	1a42      	subs	r2, r0, r1
    17da:	1ad3      	subs	r3, r2, r3
    17dc:	f17a 0300 	sbcs.w	r3, sl, #0
    17e0:	d312      	bcc.n	1808 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x480>
    17e2:	4b42      	ldr	r3, [pc, #264]	; (18ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x564>)
    17e4:	42ab      	cmp	r3, r5
    17e6:	bf3e      	ittt	cc
    17e8:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    17ec:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    17f0:	1845      	addcc	r5, r0, r1
    17f2:	d309      	bcc.n	1808 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x480>
    17f4:	4293      	cmp	r3, r2
    17f6:	d232      	bcs.n	185e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d6>
    17f8:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    17fc:	e000      	b.n	1800 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x478>
    17fe:	e02a      	b.n	1856 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4ce>
    1800:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    1804:	4408      	add	r0, r1
    1806:	4245      	negs	r5, r0
    1808:	4f3a      	ldr	r7, [pc, #232]	; (18f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x56c>)
    180a:	7fb8      	ldrb	r0, [r7, #30]
    180c:	b360      	cbz	r0, 1868 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e0>
    180e:	bf00      	nop
    1810:	f1bb 0f01 	cmp.w	fp, #1
    1814:	d005      	beq.n	1822 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x49a>
    1816:	2002      	movs	r0, #2
    1818:	f002 f9ae 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    181c:	2001      	movs	r0, #1
    181e:	f002 f9ab 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1822:	45b0      	cmp	r8, r6
    1824:	d22c      	bcs.n	1880 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f8>
    1826:	eba5 0106 	sub.w	r1, r5, r6
    182a:	f04f 0002 	mov.w	r0, #2
    182e:	f002 f8ed 	bl	3a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1832:	b390      	cbz	r0, 189a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x512>
    1834:	f1b8 0f00 	cmp.w	r8, #0
    1838:	bf1c      	itt	ne
    183a:	eba5 0108 	subne.w	r1, r5, r8
    183e:	2001      	movne	r0, #1
    1840:	d034      	beq.n	18ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x524>
    1842:	bf00      	nop
    1844:	f002 f8e2 	bl	3a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1848:	b338      	cbz	r0, 189a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x512>
    184a:	e02f      	b.n	18ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x524>
    184c:	f640 2126 	movw	r1, #2598	; 0xa26
    1850:	2070      	movs	r0, #112	; 0x70
    1852:	f002 fe4d 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1856:	b01b      	add	sp, #108	; 0x6c
    1858:	2000      	movs	r0, #0
    185a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    185e:	f640 21fa 	movw	r1, #2810	; 0xafa
    1862:	2070      	movs	r0, #112	; 0x70
    1864:	f002 fe44 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1868:	45b0      	cmp	r8, r6
    186a:	bf34      	ite	cc
    186c:	4630      	movcc	r0, r6
    186e:	4640      	movcs	r0, r8
    1870:	301e      	adds	r0, #30
    1872:	42a8      	cmp	r0, r5
    1874:	dbcc      	blt.n	1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>
    1876:	f640 213a 	movw	r1, #2618	; 0xa3a
    187a:	2070      	movs	r0, #112	; 0x70
    187c:	f002 fe38 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1880:	d90c      	bls.n	189c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x514>
    1882:	eba5 0108 	sub.w	r1, r5, r8
    1886:	2001      	movs	r0, #1
    1888:	f002 f8c0 	bl	3a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    188c:	b128      	cbz	r0, 189a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x512>
    188e:	2e00      	cmp	r6, #0
    1890:	bf1c      	itt	ne
    1892:	1ba9      	subne	r1, r5, r6
    1894:	2002      	movne	r0, #2
    1896:	d009      	beq.n	18ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x524>
    1898:	e7d4      	b.n	1844 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4bc>
    189a:	e041      	b.n	1920 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x598>
    189c:	ea56 0008 	orrs.w	r0, r6, r8
    18a0:	d004      	beq.n	18ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x524>
    18a2:	f640 1176 	movw	r1, #2422	; 0x976
    18a6:	2070      	movs	r0, #112	; 0x70
    18a8:	f002 fe22 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ac:	4629      	mov	r1, r5
    18ae:	2000      	movs	r0, #0
    18b0:	f002 f8ac 	bl	3a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    18b4:	b3a0      	cbz	r0, 1920 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x598>
    18b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    18b8:	2601      	movs	r6, #1
    18ba:	2800      	cmp	r0, #0
    18bc:	bf04      	itt	eq
    18be:	f897 002b 	ldrbeq.w	r0, [r7, #43]	; 0x2b
    18c2:	2800      	cmpeq	r0, #0
    18c4:	d002      	beq.n	18cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x544>
    18c6:	f1b9 0f00 	cmp.w	r9, #0
    18ca:	d034      	beq.n	1936 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ae>
    18cc:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    18d0:	b118      	cbz	r0, 18da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x552>
    18d2:	f002 fc69 	bl	41a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    18d6:	f887 a02a 	strb.w	sl, [r7, #42]	; 0x2a
    18da:	f1b9 0f00 	cmp.w	r9, #0
    18de:	e00f      	b.n	1900 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x578>
    18e0:	40000508 	.word	0x40000508
    18e4:	20000038 	.word	0x20000038
    18e8:	20000dac 	.word	0x20000dac
    18ec:	1e847fff 	.word	0x1e847fff
    18f0:	0f424000 	.word	0x0f424000
    18f4:	200011ac 	.word	0x200011ac
    18f8:	f0bdc000 	.word	0xf0bdc000
    18fc:	1e848000 	.word	0x1e848000
    1900:	d01c      	beq.n	193c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b4>
    1902:	9809      	ldr	r0, [sp, #36]	; 0x24
    1904:	1a20      	subs	r0, r4, r0
    1906:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    190a:	2005      	movs	r0, #5
    190c:	f002 f87e 	bl	3a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1910:	b360      	cbz	r0, 196c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e4>
    1912:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    1916:	2800      	cmp	r0, #0
    1918:	bf08      	it	eq
    191a:	f887 602b 	strbeq.w	r6, [r7, #43]	; 0x2b
    191e:	e015      	b.n	194c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c4>
    1920:	e7ff      	b.n	1922 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x59a>
    1922:	2002      	movs	r0, #2
    1924:	f002 f928 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1928:	2001      	movs	r0, #1
    192a:	f002 f925 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    192e:	b01b      	add	sp, #108	; 0x6c
    1930:	2000      	movs	r0, #0
    1932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1936:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
    193a:	b190      	cbz	r0, 1962 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5da>
    193c:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
    1940:	b120      	cbz	r0, 194c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c4>
    1942:	2005      	movs	r0, #5
    1944:	f002 f918 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1948:	f887 a02b 	strb.w	sl, [r7, #43]	; 0x2b
    194c:	eba5 0008 	sub.w	r0, r5, r8
    1950:	f1a0 0119 	sub.w	r1, r0, #25
    1954:	2900      	cmp	r1, #0
    1956:	dc0e      	bgt.n	1976 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5ee>
    1958:	f640 2163 	movw	r1, #2659	; 0xa63
    195c:	2070      	movs	r0, #112	; 0x70
    195e:	f002 fdc7 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1962:	f002 fc3d 	bl	41e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1966:	f887 602a 	strb.w	r6, [r7, #42]	; 0x2a
    196a:	e7b6      	b.n	18da <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x552>
    196c:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    1970:	2070      	movs	r0, #112	; 0x70
    1972:	f002 fdbd 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1976:	2003      	movs	r0, #3
    1978:	f002 f848 	bl	3a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    197c:	b1c0      	cbz	r0, 19b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x628>
    197e:	480f      	ldr	r0, [pc, #60]	; (19bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x634>)
    1980:	6880      	ldr	r0, [r0, #8]
    1982:	f8c0 a000 	str.w	sl, [r0]
    1986:	480e      	ldr	r0, [pc, #56]	; (19c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x638>)
    1988:	f8c0 a000 	str.w	sl, [r0]
    198c:	ac0e      	add	r4, sp, #56	; 0x38
    198e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1992:	6038      	str	r0, [r7, #0]
    1994:	6079      	str	r1, [r7, #4]
    1996:	60ba      	str	r2, [r7, #8]
    1998:	60fb      	str	r3, [r7, #12]
    199a:	ac12      	add	r4, sp, #72	; 0x48
    199c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    19a0:	6138      	str	r0, [r7, #16]
    19a2:	6179      	str	r1, [r7, #20]
    19a4:	61ba      	str	r2, [r7, #24]
    19a6:	61fb      	str	r3, [r7, #28]
    19a8:	b01b      	add	sp, #108	; 0x6c
    19aa:	2001      	movs	r0, #1
    19ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19b0:	f640 216b 	movw	r1, #2667	; 0xa6b
    19b4:	2070      	movs	r0, #112	; 0x70
    19b6:	f002 fd9b 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19ba:	0000      	.short	0x0000
    19bc:	20000038 	.word	0x20000038
    19c0:	40000508 	.word	0x40000508
    19c4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19c8:	4614      	mov	r4, r2
    19ca:	460d      	mov	r5, r1
    19cc:	f04f 0a00 	mov.w	sl, #0
    19d0:	890a      	ldrh	r2, [r1, #8]
    19d2:	4651      	mov	r1, sl
    19d4:	f362 411f 	bfi	r1, r2, #16, #16
    19d8:	7aaa      	ldrb	r2, [r5, #10]
    19da:	46d1      	mov	r9, sl
    19dc:	f362 0907 	bfi	r9, r2, #0, #8
    19e0:	7aea      	ldrb	r2, [r5, #11]
    19e2:	4606      	mov	r6, r0
    19e4:	f362 290f 	bfi	r9, r2, #8, #8
    19e8:	782a      	ldrb	r2, [r5, #0]
    19ea:	b083      	sub	sp, #12
    19ec:	6840      	ldr	r0, [r0, #4]
    19ee:	f8c4 a000 	str.w	sl, [r4]
    19f2:	f362 4917 	bfi	r9, r2, #16, #8
    19f6:	f8c4 a004 	str.w	sl, [r4, #4]
    19fa:	f8c4 9010 	str.w	r9, [r4, #16]
    19fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
    1a02:	4f9d      	ldr	r7, [pc, #628]	; (1c78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8f0>)
    1a04:	6870      	ldr	r0, [r6, #4]
    1a06:	fba0 8907 	umull	r8, r9, r0, r7
    1a0a:	6830      	ldr	r0, [r6, #0]
    1a0c:	f00a fc49 	bl	c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1a10:	eb10 0108 	adds.w	r1, r0, r8
    1a14:	eb4a 0209 	adc.w	r2, sl, r9
    1a18:	7828      	ldrb	r0, [r5, #0]
    1a1a:	ea4f 0967 	mov.w	r9, r7, asr #1
    1a1e:	f1c9 0b00 	rsb	fp, r9, #0
    1a22:	b170      	cbz	r0, 1a42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ba>
    1a24:	89e0      	ldrh	r0, [r4, #14]
    1a26:	f894 8011 	ldrb.w	r8, [r4, #17]
    1a2a:	43c0      	mvns	r0, r0
    1a2c:	f8d5 a004 	ldr.w	sl, [r5, #4]
    1a30:	f104 020c 	add.w	r2, r4, #12
    1a34:	4548      	cmp	r0, r9
    1a36:	dd7c      	ble.n	1b32 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7aa>
    1a38:	f240 519f 	movw	r1, #1439	; 0x59f
    1a3c:	2070      	movs	r0, #112	; 0x70
    1a3e:	f002 fd57 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a42:	f8df c238 	ldr.w	ip, [pc, #568]	; 1c7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8f4>
    1a46:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    1a4a:	eb11 0a0c 	adds.w	sl, r1, ip
    1a4e:	f142 0c00 	adc.w	ip, r2, #0
    1a52:	ebb0 0a0a 	subs.w	sl, r0, sl
    1a56:	eb73 0c0c 	sbcs.w	ip, r3, ip
    1a5a:	d272      	bcs.n	1b42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ba>
    1a5c:	1a41      	subs	r1, r0, r1
    1a5e:	eb73 0102 	sbcs.w	r1, r3, r2
    1a62:	d36e      	bcc.n	1b42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ba>
    1a64:	ebb0 0608 	subs.w	r6, r0, r8
    1a68:	42b7      	cmp	r7, r6
    1a6a:	d82b      	bhi.n	1ac4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x73c>
    1a6c:	89e0      	ldrh	r0, [r4, #14]
    1a6e:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    1a72:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    1a76:	43c1      	mvns	r1, r0
    1a78:	4a81      	ldr	r2, [pc, #516]	; (1c80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8f8>)
    1a7a:	eb08 0001 	add.w	r0, r8, r1
    1a7e:	4542      	cmp	r2, r8
    1a80:	d32b      	bcc.n	1ada <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x752>
    1a82:	4549      	cmp	r1, r9
    1a84:	dcd8      	bgt.n	1a38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b0>
    1a86:	4559      	cmp	r1, fp
    1a88:	db66      	blt.n	1b58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d0>
    1a8a:	4287      	cmp	r7, r0
    1a8c:	bfdc      	itt	le
    1a8e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1a92:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1a96:	dd05      	ble.n	1aa4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x71c>
    1a98:	2800      	cmp	r0, #0
    1a9a:	bfbc      	itt	lt
    1a9c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1aa0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1aa4:	466a      	mov	r2, sp
    1aa6:	a901      	add	r1, sp, #4
    1aa8:	f001 fc9a 	bl	33e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1aac:	89e0      	ldrh	r0, [r4, #14]
    1aae:	f89d 1000 	ldrb.w	r1, [sp]
    1ab2:	1a30      	subs	r0, r6, r0
    1ab4:	1a40      	subs	r0, r0, r1
    1ab6:	1e40      	subs	r0, r0, #1
    1ab8:	42b8      	cmp	r0, r7
    1aba:	d302      	bcc.n	1ac2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x73a>
    1abc:	68a0      	ldr	r0, [r4, #8]
    1abe:	1c40      	adds	r0, r0, #1
    1ac0:	60a0      	str	r0, [r4, #8]
    1ac2:	4646      	mov	r6, r8
    1ac4:	89e0      	ldrh	r0, [r4, #14]
    1ac6:	4b6e      	ldr	r3, [pc, #440]	; (1c80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8f8>)
    1ac8:	43c1      	mvns	r1, r0
    1aca:	686d      	ldr	r5, [r5, #4]
    1acc:	f894 8011 	ldrb.w	r8, [r4, #17]
    1ad0:	1870      	adds	r0, r6, r1
    1ad2:	f104 020c 	add.w	r2, r4, #12
    1ad6:	429e      	cmp	r6, r3
    1ad8:	d904      	bls.n	1ae4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x75c>
    1ada:	f240 519e 	movw	r1, #1438	; 0x59e
    1ade:	2070      	movs	r0, #112	; 0x70
    1ae0:	f002 fd06 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ae4:	4549      	cmp	r1, r9
    1ae6:	dca7      	bgt.n	1a38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b0>
    1ae8:	4559      	cmp	r1, fp
    1aea:	db35      	blt.n	1b58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7d0>
    1aec:	4287      	cmp	r7, r0
    1aee:	bfdc      	itt	le
    1af0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1af4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1af8:	dd05      	ble.n	1b06 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x77e>
    1afa:	2800      	cmp	r0, #0
    1afc:	bfbc      	itt	lt
    1afe:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1b02:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1b06:	4621      	mov	r1, r4
    1b08:	f001 fc6a 	bl	33e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1b0c:	6820      	ldr	r0, [r4, #0]
    1b0e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1b12:	1970      	adds	r0, r6, r5
    1b14:	1c40      	adds	r0, r0, #1
    1b16:	6021      	str	r1, [r4, #0]
    1b18:	f1b8 0f00 	cmp.w	r8, #0
    1b1c:	bf08      	it	eq
    1b1e:	307a      	addeq	r0, #122	; 0x7a
    1b20:	d004      	beq.n	1b2c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a4>
    1b22:	f1b8 0f01 	cmp.w	r8, #1
    1b26:	bf08      	it	eq
    1b28:	3048      	addeq	r0, #72	; 0x48
    1b2a:	d13a      	bne.n	1ba2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x81a>
    1b2c:	f001 fc3c 	bl	33a8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1b30:	e001      	b.n	1b36 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ae>
    1b32:	e00e      	b.n	1b52 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ca>
    1b34:	e005      	b.n	1b42 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ba>
    1b36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b3a:	6060      	str	r0, [r4, #4]
    1b3c:	b007      	add	sp, #28
    1b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b42:	6830      	ldr	r0, [r6, #0]
    1b44:	1e40      	subs	r0, r0, #1
    1b46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b4a:	6020      	str	r0, [r4, #0]
    1b4c:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    1b50:	e7f3      	b.n	1b3a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b2>
    1b52:	4601      	mov	r1, r0
    1b54:	4558      	cmp	r0, fp
    1b56:	da04      	bge.n	1b62 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7da>
    1b58:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    1b5c:	2070      	movs	r0, #112	; 0x70
    1b5e:	f002 fcc7 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b62:	4287      	cmp	r7, r0
    1b64:	bfdc      	itt	le
    1b66:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1b6a:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1b6e:	dd05      	ble.n	1b7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7f4>
    1b70:	2800      	cmp	r0, #0
    1b72:	bfbc      	itt	lt
    1b74:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1b78:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1b7c:	4621      	mov	r1, r4
    1b7e:	f001 fc2f 	bl	33e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1b82:	6820      	ldr	r0, [r4, #0]
    1b84:	f1b8 0f00 	cmp.w	r8, #0
    1b88:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1b8c:	f10a 0001 	add.w	r0, sl, #1
    1b90:	6021      	str	r1, [r4, #0]
    1b92:	bf08      	it	eq
    1b94:	307a      	addeq	r0, #122	; 0x7a
    1b96:	d009      	beq.n	1bac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x824>
    1b98:	f1b8 0f01 	cmp.w	r8, #1
    1b9c:	bf08      	it	eq
    1b9e:	3048      	addeq	r0, #72	; 0x48
    1ba0:	d004      	beq.n	1bac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x824>
    1ba2:	f240 6139 	movw	r1, #1593	; 0x639
    1ba6:	2070      	movs	r0, #112	; 0x70
    1ba8:	f002 fca2 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bac:	f001 fbfc 	bl	33a8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1bb0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1bb4:	6061      	str	r1, [r4, #4]
    1bb6:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    1bba:	aa01      	add	r2, sp, #4
    1bbc:	4669      	mov	r1, sp
    1bbe:	4648      	mov	r0, r9
    1bc0:	6837      	ldr	r7, [r6, #0]
    1bc2:	f001 fc0d 	bl	33e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1bc6:	f002 f91b 	bl	3e00 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    1bca:	f001 fbed 	bl	33a8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1bce:	4680      	mov	r8, r0
    1bd0:	482c      	ldr	r0, [pc, #176]	; (1c84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8fc>)
    1bd2:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    1bd6:	2920      	cmp	r1, #32
    1bd8:	d02a      	beq.n	1c30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8a8>
    1bda:	68c0      	ldr	r0, [r0, #12]
    1bdc:	1d40      	adds	r0, r0, #5
    1bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1be2:	bf00      	nop
    1be4:	e9d4 2100 	ldrd	r2, r1, [r4]
    1be8:	1a89      	subs	r1, r1, r2
    1bea:	4401      	add	r1, r0
    1bec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1bf0:	e9c4 0100 	strd	r0, r1, [r4]
    1bf4:	6831      	ldr	r1, [r6, #0]
    1bf6:	4281      	cmp	r1, r0
    1bf8:	d902      	bls.n	1c00 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x878>
    1bfa:	68a0      	ldr	r0, [r4, #8]
    1bfc:	1c40      	adds	r0, r0, #1
    1bfe:	60a0      	str	r0, [r4, #8]
    1c00:	6832      	ldr	r2, [r6, #0]
    1c02:	6928      	ldr	r0, [r5, #16]
    1c04:	4621      	mov	r1, r4
    1c06:	9b06      	ldr	r3, [sp, #24]
    1c08:	f7ff f9fa 	bl	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
    1c0c:	2800      	cmp	r0, #0
    1c0e:	bf1c      	itt	ne
    1c10:	b007      	addne	sp, #28
    1c12:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c16:	e9d4 1000 	ldrd	r1, r0, [r4]
    1c1a:	1a40      	subs	r0, r0, r1
    1c1c:	6831      	ldr	r1, [r6, #0]
    1c1e:	6021      	str	r1, [r4, #0]
    1c20:	6831      	ldr	r1, [r6, #0]
    1c22:	4408      	add	r0, r1
    1c24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c28:	6060      	str	r0, [r4, #4]
    1c2a:	b007      	add	sp, #28
    1c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c30:	3709      	adds	r7, #9
    1c32:	f1b9 0f00 	cmp.w	r9, #0
    1c36:	d016      	beq.n	1c66 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8de>
    1c38:	f002 fbe2 	bl	4400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1c3c:	b998      	cbnz	r0, 1c66 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8de>
    1c3e:	f002 faad 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    1c42:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    1c46:	bf08      	it	eq
    1c48:	200d      	moveq	r0, #13
    1c4a:	d00b      	beq.n	1c64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8dc>
    1c4c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    1c50:	3856      	subs	r0, #86	; 0x56
    1c52:	bf08      	it	eq
    1c54:	201c      	moveq	r0, #28
    1c56:	d005      	beq.n	1c64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8dc>
    1c58:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    1c5c:	389f      	subs	r0, #159	; 0x9f
    1c5e:	bf14      	ite	ne
    1c60:	2000      	movne	r0, #0
    1c62:	2032      	moveq	r0, #50	; 0x32
    1c64:	4407      	add	r7, r0
    1c66:	9800      	ldr	r0, [sp, #0]
    1c68:	4580      	cmp	r8, r0
    1c6a:	bf84      	itt	hi
    1c6c:	eba8 0000 	subhi.w	r0, r8, r0
    1c70:	4407      	addhi	r7, r0
    1c72:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1c76:	e7b5      	b.n	1be4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x85c>
    1c78:	1e848000 	.word	0x1e848000
    1c7c:	0f424000 	.word	0x0f424000
    1c80:	1e847fff 	.word	0x1e847fff
    1c84:	200011ac 	.word	0x200011ac
    1c88:	b570      	push	{r4, r5, r6, lr}
    1c8a:	4d1e      	ldr	r5, [pc, #120]	; (1d04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x97c>)
    1c8c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    1c90:	2820      	cmp	r0, #32
    1c92:	bf18      	it	ne
    1c94:	bd70      	popne	{r4, r5, r6, pc}
    1c96:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    1c9a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    1c9e:	4428      	add	r0, r5
    1ca0:	f890 4020 	ldrb.w	r4, [r0, #32]
    1ca4:	2c20      	cmp	r4, #32
    1ca6:	d027      	beq.n	1cf8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x970>
    1ca8:	4b17      	ldr	r3, [pc, #92]	; (1d08 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x980>)
    1caa:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    1cae:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    1cb2:	7849      	ldrb	r1, [r1, #1]
    1cb4:	f880 1020 	strb.w	r1, [r0, #32]
    1cb8:	20ff      	movs	r0, #255	; 0xff
    1cba:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    1cbe:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
    1cc2:	4621      	mov	r1, r4
    1cc4:	2002      	movs	r0, #2
    1cc6:	f000 f891 	bl	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1cca:	2000      	movs	r0, #0
    1ccc:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    1cd0:	77a8      	strb	r0, [r5, #30]
    1cd2:	490e      	ldr	r1, [pc, #56]	; (1d0c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x984>)
    1cd4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1cd8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1cdc:	7e00      	ldrb	r0, [r0, #24]
    1cde:	2800      	cmp	r0, #0
    1ce0:	bf08      	it	eq
    1ce2:	f002 fd6f 	bleq	47c4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    1ce6:	2000      	movs	r0, #0
    1ce8:	4909      	ldr	r1, [pc, #36]	; (1d10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x988>)
    1cea:	6849      	ldr	r1, [r1, #4]
    1cec:	2900      	cmp	r1, #0
    1cee:	bf08      	it	eq
    1cf0:	bd70      	popeq	{r4, r5, r6, pc}
    1cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1cf6:	4708      	bx	r1
    1cf8:	f240 3132 	movw	r1, #818	; 0x332
    1cfc:	2070      	movs	r0, #112	; 0x70
    1cfe:	f002 fbf7 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d02:	0000      	.short	0x0000
    1d04:	200011ac 	.word	0x200011ac
    1d08:	2000112c 	.word	0x2000112c
    1d0c:	20000dac 	.word	0x20000dac
    1d10:	20000038 	.word	0x20000038
    1d14:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1d18:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1d1c:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1d20:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1d24:	4440      	add	r0, r8
    1d26:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1d2a:	2c20      	cmp	r4, #32
    1d2c:	bf08      	it	eq
    1d2e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d32:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 1de0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    1d36:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1d3a:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    1d3e:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1d42:	2607      	movs	r6, #7
    1d44:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1d48:	2801      	cmp	r0, #1
    1d4a:	d00e      	beq.n	1d6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1d4c:	2804      	cmp	r0, #4
    1d4e:	bf08      	it	eq
    1d50:	2602      	moveq	r6, #2
    1d52:	d00a      	beq.n	1d6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1d54:	2805      	cmp	r0, #5
    1d56:	bf0c      	ite	eq
    1d58:	2603      	moveq	r6, #3
    1d5a:	2806      	cmpne	r0, #6
    1d5c:	d005      	beq.n	1d6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1d5e:	f640 01dd 	movw	r1, #2269	; 0x8dd
    1d62:	f04f 0070 	mov.w	r0, #112	; 0x70
    1d66:	f002 fbc3 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d6a:	f1bb 0f00 	cmp.w	fp, #0
    1d6e:	bf18      	it	ne
    1d70:	f3af 8000 	nopne.w
    1d74:	f3ef 8010 	mrs	r0, PRIMASK
    1d78:	b672      	cpsid	i
    1d7a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1d7e:	784a      	ldrb	r2, [r1, #1]
    1d80:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1d84:	4441      	add	r1, r8
    1d86:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1d8a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1d8e:	42a2      	cmp	r2, r4
    1d90:	bf04      	itt	eq
    1d92:	2220      	moveq	r2, #32
    1d94:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1d98:	b1c0      	cbz	r0, 1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>
    1d9a:	462a      	mov	r2, r5
    1d9c:	4621      	mov	r1, r4
    1d9e:	2001      	movs	r0, #1
    1da0:	f000 f824 	bl	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1da4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1da8:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    1dac:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    1db0:	6840      	ldr	r0, [r0, #4]
    1db2:	4631      	mov	r1, r6
    1db4:	4790      	blx	r2
    1db6:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
    1dba:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1dbe:	4440      	add	r0, r8
    1dc0:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1dc4:	2c20      	cmp	r4, #32
    1dc6:	d1ba      	bne.n	1d3e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b6>
    1dc8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1dcc:	4806      	ldr	r0, [pc, #24]	; (1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>)
    1dce:	2800      	cmp	r0, #0
    1dd0:	bf18      	it	ne
    1dd2:	f3af 8000 	nopne.w
    1dd6:	b662      	cpsie	i
    1dd8:	e7df      	b.n	1d9a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e>
    1dda:	0000      	.short	0x0000
    1ddc:	200011ac 	.word	0x200011ac
    1de0:	00000000 	.word	0x00000000
    1de4:	2000112c 	.word	0x2000112c
    1de8:	00000000 	.word	0x00000000
    1dec:	f8df c058 	ldr.w	ip, [pc, #88]	; 1e48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>
    1df0:	b510      	push	{r4, lr}
    1df2:	2300      	movs	r3, #0
    1df4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1df8:	2807      	cmp	r0, #7
    1dfa:	d21f      	bcs.n	1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1dfc:	e8df f000 	tbb	[pc, r0]
    1e00:	05050505 	.word	0x05050505
    1e04:	00040404 	.word	0x00040404
    1e08:	2301      	movs	r3, #1
    1e0a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1e0e:	2b00      	cmp	r3, #0
    1e10:	bf08      	it	eq
    1e12:	bd10      	popeq	{r4, pc}
    1e14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1e18:	480c      	ldr	r0, [pc, #48]	; (1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>)
    1e1a:	4402      	add	r2, r0
    1e1c:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1e20:	2820      	cmp	r0, #32
    1e22:	bf0e      	itee	eq
    1e24:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1e28:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1e2c:	7041      	strbne	r1, [r0, #1]
    1e2e:	2020      	movs	r0, #32
    1e30:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1e34:	7058      	strb	r0, [r3, #1]
    1e36:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1e3a:	bd10      	pop	{r4, pc}
    1e3c:	f240 216e 	movw	r1, #622	; 0x26e
    1e40:	2070      	movs	r0, #112	; 0x70
    1e42:	f002 fb55 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e46:	0000      	.short	0x0000
    1e48:	2000112c 	.word	0x2000112c
    1e4c:	200011ac 	.word	0x200011ac
    1e50:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1e54:	460f      	mov	r7, r1
    1e56:	4680      	mov	r8, r0
    1e58:	f8df a158 	ldr.w	sl, [pc, #344]	; 1fb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>
    1e5c:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    1e60:	4450      	add	r0, sl
    1e62:	f1b8 0f01 	cmp.w	r8, #1
    1e66:	f890 4020 	ldrb.w	r4, [r0, #32]
    1e6a:	4625      	mov	r5, r4
    1e6c:	bf18      	it	ne
    1e6e:	f1b8 0f02 	cmpne.w	r8, #2
    1e72:	d005      	beq.n	1e80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x134>
    1e74:	f640 21a1 	movw	r1, #2721	; 0xaa1
    1e78:	f04f 0070 	mov.w	r0, #112	; 0x70
    1e7c:	f002 fb38 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e80:	f04f 0b00 	mov.w	fp, #0
    1e84:	2d20      	cmp	r5, #32
    1e86:	d042      	beq.n	1f0e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c2>
    1e88:	f89a 001e 	ldrb.w	r0, [sl, #30]
    1e8c:	2600      	movs	r6, #0
    1e8e:	2800      	cmp	r0, #0
    1e90:	bf08      	it	eq
    1e92:	2602      	moveq	r6, #2
    1e94:	f001 fc0e 	bl	36b4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1e98:	f8df c11c 	ldr.w	ip, [pc, #284]	; 1fb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>
    1e9c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1ea0:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1ea4:	688a      	ldr	r2, [r1, #8]
    1ea6:	68c9      	ldr	r1, [r1, #12]
    1ea8:	1a12      	subs	r2, r2, r0
    1eaa:	1a09      	subs	r1, r1, r0
    1eac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1eb0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1eb4:	4296      	cmp	r6, r2
    1eb6:	bf99      	ittee	ls
    1eb8:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1ebc:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1ec0:	4a3e      	ldrhi	r2, [pc, #248]	; (1fbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>)
    1ec2:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    1ec6:	d920      	bls.n	1f0a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1be>
    1ec8:	4622      	mov	r2, r4
    1eca:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    1ece:	784c      	ldrb	r4, [r1, #1]
    1ed0:	2c20      	cmp	r4, #32
    1ed2:	d012      	beq.n	1efa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ae>
    1ed4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    1ed8:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    1edc:	688b      	ldr	r3, [r1, #8]
    1ede:	68c9      	ldr	r1, [r1, #12]
    1ee0:	1a1b      	subs	r3, r3, r0
    1ee2:	1a09      	subs	r1, r1, r0
    1ee4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1ee8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1eec:	429e      	cmp	r6, r3
    1eee:	bf9c      	itt	ls
    1ef0:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    1ef4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    1ef8:	d8e6      	bhi.n	1ec8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17c>
    1efa:	2a20      	cmp	r2, #32
    1efc:	d005      	beq.n	1f0a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1be>
    1efe:	463b      	mov	r3, r7
    1f00:	2120      	movs	r1, #32
    1f02:	2004      	movs	r0, #4
    1f04:	f7ff f840 	bl	f88 <MPSL_IRQ_RADIO_Handler+0x40>
    1f08:	4604      	mov	r4, r0
    1f0a:	42ac      	cmp	r4, r5
    1f0c:	d116      	bne.n	1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1f0e:	482c      	ldr	r0, [pc, #176]	; (1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>)
    1f10:	2800      	cmp	r0, #0
    1f12:	bf18      	it	ne
    1f14:	f3af 8000 	nopne.w
    1f18:	f001 fbcc 	bl	36b4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1f1c:	4603      	mov	r3, r0
    1f1e:	f89a 002e 	ldrb.w	r0, [sl, #46]	; 0x2e
    1f22:	2820      	cmp	r0, #32
    1f24:	d00d      	beq.n	1f42 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f6>
    1f26:	f8da 0008 	ldr.w	r0, [sl, #8]
    1f2a:	1c99      	adds	r1, r3, #2
    1f2c:	1a08      	subs	r0, r1, r0
    1f2e:	0200      	lsls	r0, r0, #8
    1f30:	17c1      	asrs	r1, r0, #31
    1f32:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1f36:	1200      	asrs	r0, r0, #8
    1f38:	2800      	cmp	r0, #0
    1f3a:	dd02      	ble.n	1f42 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f6>
    1f3c:	2000      	movs	r0, #0
    1f3e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1f42:	2d20      	cmp	r5, #32
    1f44:	d014      	beq.n	1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>
    1f46:	462a      	mov	r2, r5
    1f48:	4641      	mov	r1, r8
    1f4a:	4618      	mov	r0, r3
    1f4c:	f7ff fab2 	bl	14b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c>
    1f50:	2800      	cmp	r0, #0
    1f52:	bf1e      	ittt	ne
    1f54:	f88a 502e 	strbne.w	r5, [sl, #46]	; 0x2e
    1f58:	2002      	movne	r0, #2
    1f5a:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1f5e:	463b      	mov	r3, r7
    1f60:	462a      	mov	r2, r5
    1f62:	2120      	movs	r1, #32
    1f64:	2004      	movs	r0, #4
    1f66:	f7ff f80f 	bl	f88 <MPSL_IRQ_RADIO_Handler+0x40>
    1f6a:	2000      	movs	r0, #0
    1f6c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1f70:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
    1f74:	b118      	cbz	r0, 1f7e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x232>
    1f76:	f002 f917 	bl	41a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1f7a:	f88a b02a 	strb.w	fp, [sl, #42]	; 0x2a
    1f7e:	f89a 002b 	ldrb.w	r0, [sl, #43]	; 0x2b
    1f82:	b120      	cbz	r0, 1f8e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x242>
    1f84:	2005      	movs	r0, #5
    1f86:	f001 fdf7 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1f8a:	f88a b02b 	strb.w	fp, [sl, #43]	; 0x2b
    1f8e:	2004      	movs	r0, #4
    1f90:	f001 fdf2 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1f94:	f001 fe60 	bl	3c58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1f98:	2020      	movs	r0, #32
    1f9a:	f88a 002e 	strb.w	r0, [sl, #46]	; 0x2e
    1f9e:	4809      	ldr	r0, [pc, #36]	; (1fc4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x278>)
    1fa0:	6880      	ldr	r0, [r0, #8]
    1fa2:	f8c0 b000 	str.w	fp, [r0]
    1fa6:	4808      	ldr	r0, [pc, #32]	; (1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>)
    1fa8:	f8c0 b000 	str.w	fp, [r0]
    1fac:	2001      	movs	r0, #1
    1fae:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1fb2:	0000      	.short	0x0000
    1fb4:	200011ac 	.word	0x200011ac
    1fb8:	20000dac 	.word	0x20000dac
    1fbc:	2000112c 	.word	0x2000112c
    1fc0:	00000000 	.word	0x00000000
    1fc4:	20000038 	.word	0x20000038
    1fc8:	40000508 	.word	0x40000508

00001fcc <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1fcc:	4906      	ldr	r1, [pc, #24]	; (1fe8 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1fce:	b510      	push	{r4, lr}
    1fd0:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    1fd4:	2a20      	cmp	r2, #32
    1fd6:	bf1c      	itt	ne
    1fd8:	7788      	strbne	r0, [r1, #30]
    1fda:	bd10      	popne	{r4, pc}
    1fdc:	f240 319a 	movw	r1, #922	; 0x39a
    1fe0:	2070      	movs	r0, #112	; 0x70
    1fe2:	f002 fa85 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fe6:	0000      	.short	0x0000
    1fe8:	200011ac 	.word	0x200011ac

00001fec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ff0:	4e69      	ldr	r6, [pc, #420]	; (2198 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    1ff2:	4607      	mov	r7, r0
    1ff4:	b08d      	sub	sp, #52	; 0x34
    1ff6:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    1ffa:	4688      	mov	r8, r1
    1ffc:	2820      	cmp	r0, #32
    1ffe:	d055      	beq.n	20ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    2000:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    2004:	f106 0408 	add.w	r4, r6, #8
    2008:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    200c:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    2010:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    2014:	2020      	movs	r0, #32
    2016:	f88d 0020 	strb.w	r0, [sp, #32]
    201a:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    201e:	aa0a      	add	r2, sp, #40	; 0x28
    2020:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2024:	4430      	add	r0, r6
    2026:	a909      	add	r1, sp, #36	; 0x24
    2028:	f890 5020 	ldrb.w	r5, [r0, #32]
    202c:	68f0      	ldr	r0, [r6, #12]
    202e:	9002      	str	r0, [sp, #8]
    2030:	6830      	ldr	r0, [r6, #0]
    2032:	4438      	add	r0, r7
    2034:	f001 f9d4 	bl	33e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2038:	f8da 000c 	ldr.w	r0, [sl, #12]
    203c:	9909      	ldr	r1, [sp, #36]	; 0x24
    203e:	2f65      	cmp	r7, #101	; 0x65
    2040:	4408      	add	r0, r1
    2042:	d338      	bcc.n	20b6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2044:	4a55      	ldr	r2, [pc, #340]	; (219c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    2046:	2100      	movs	r1, #0
    2048:	1bd2      	subs	r2, r2, r7
    204a:	eb71 0201 	sbcs.w	r2, r1, r1
    204e:	d332      	bcc.n	20b6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2050:	6822      	ldr	r2, [r4, #0]
    2052:	1a82      	subs	r2, r0, r2
    2054:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2058:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    205c:	d82b      	bhi.n	20b6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    205e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2062:	6060      	str	r0, [r4, #4]
    2064:	4630      	mov	r0, r6
    2066:	f884 8010 	strb.w	r8, [r4, #16]
    206a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    206e:	f10d 0a20 	add.w	sl, sp, #32
    2072:	2d20      	cmp	r5, #32
    2074:	bf1c      	itt	ne
    2076:	494a      	ldrne	r1, [pc, #296]	; (21a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2078:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    207c:	d050      	beq.n	2120 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    207e:	bf00      	nop
    2080:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    2084:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    2088:	6861      	ldr	r1, [r4, #4]
    208a:	f8d8 6008 	ldr.w	r6, [r8, #8]
    208e:	f108 0008 	add.w	r0, r8, #8
    2092:	1a71      	subs	r1, r6, r1
    2094:	0209      	lsls	r1, r1, #8
    2096:	17ca      	asrs	r2, r1, #31
    2098:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    209c:	1209      	asrs	r1, r1, #8
    209e:	d42d      	bmi.n	20fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    20a0:	89c0      	ldrh	r0, [r0, #14]
    20a2:	2800      	cmp	r0, #0
    20a4:	d03c      	beq.n	2120 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    20a6:	89e0      	ldrh	r0, [r4, #14]
    20a8:	b148      	cbz	r0, 20be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    20aa:	e039      	b.n	2120 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    20ac:	f640 3168 	movw	r1, #2920	; 0xb68
    20b0:	2070      	movs	r0, #112	; 0x70
    20b2:	f002 fa1d 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20b6:	b00d      	add	sp, #52	; 0x34
    20b8:	2001      	movs	r0, #1
    20ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20be:	6820      	ldr	r0, [r4, #0]
    20c0:	900c      	str	r0, [sp, #48]	; 0x30
    20c2:	f002 f86b 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    20c6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    20ca:	bf08      	it	eq
    20cc:	200d      	moveq	r0, #13
    20ce:	d00b      	beq.n	20e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    20d0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    20d4:	3856      	subs	r0, #86	; 0x56
    20d6:	bf08      	it	eq
    20d8:	201c      	moveq	r0, #28
    20da:	d005      	beq.n	20e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    20dc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    20e0:	389f      	subs	r0, #159	; 0x9f
    20e2:	bf14      	ite	ne
    20e4:	2000      	movne	r0, #0
    20e6:	2032      	moveq	r0, #50	; 0x32
    20e8:	1c41      	adds	r1, r0, #1
    20ea:	980c      	ldr	r0, [sp, #48]	; 0x30
    20ec:	1a30      	subs	r0, r6, r0
    20ee:	0200      	lsls	r0, r0, #8
    20f0:	17c2      	asrs	r2, r0, #31
    20f2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    20f6:	1200      	asrs	r0, r0, #8
    20f8:	4288      	cmp	r0, r1
    20fa:	da11      	bge.n	2120 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    20fc:	f88a 5000 	strb.w	r5, [sl]
    2100:	f898 1018 	ldrb.w	r1, [r8, #24]
    2104:	7c20      	ldrb	r0, [r4, #16]
    2106:	4281      	cmp	r1, r0
    2108:	d805      	bhi.n	2116 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    210a:	9802      	ldr	r0, [sp, #8]
    210c:	6060      	str	r0, [r4, #4]
    210e:	b00d      	add	sp, #52	; 0x34
    2110:	2002      	movs	r0, #2
    2112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2116:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    211a:	7845      	ldrb	r5, [r0, #1]
    211c:	2d20      	cmp	r5, #32
    211e:	d1af      	bne.n	2080 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    2120:	2005      	movs	r0, #5
    2122:	f001 fd29 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2126:	4c1c      	ldr	r4, [pc, #112]	; (2198 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    2128:	f04f 30ff 	mov.w	r0, #4294967295
    212c:	6060      	str	r0, [r4, #4]
    212e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    2132:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2136:	2120      	movs	r1, #32
    2138:	2a20      	cmp	r2, #32
    213a:	d003      	beq.n	2144 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    213c:	2005      	movs	r0, #5
    213e:	f7fe ff23 	bl	f88 <MPSL_IRQ_RADIO_Handler+0x40>
    2142:	e004      	b.n	214e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    2144:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    2148:	4420      	add	r0, r4
    214a:	f890 0020 	ldrb.w	r0, [r0, #32]
    214e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    2152:	4913      	ldr	r1, [pc, #76]	; (21a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    2154:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    2158:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    215c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2160:	7048      	strb	r0, [r1, #1]
    2162:	6820      	ldr	r0, [r4, #0]
    2164:	4438      	add	r0, r7
    2166:	6020      	str	r0, [r4, #0]
    2168:	20ff      	movs	r0, #255	; 0xff
    216a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    216e:	7e60      	ldrb	r0, [r4, #25]
    2170:	2801      	cmp	r0, #1
    2172:	d105      	bne.n	2180 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    2174:	68e0      	ldr	r0, [r4, #12]
    2176:	1e40      	subs	r0, r0, #1
    2178:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    217c:	f001 fb60 	bl	3840 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2180:	f89d 0020 	ldrb.w	r0, [sp, #32]
    2184:	2820      	cmp	r0, #32
    2186:	d003      	beq.n	2190 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    2188:	4806      	ldr	r0, [pc, #24]	; (21a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    218a:	7840      	ldrb	r0, [r0, #1]
    218c:	f002 fa84 	bl	4698 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2190:	b00d      	add	sp, #52	; 0x34
    2192:	2000      	movs	r0, #0
    2194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2198:	200011ac 	.word	0x200011ac
    219c:	0f424000 	.word	0x0f424000
    21a0:	2000112c 	.word	0x2000112c
    21a4:	20000038 	.word	0x20000038

000021a8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    21a8:	4806      	ldr	r0, [pc, #24]	; (21c4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    21aa:	b510      	push	{r4, lr}
    21ac:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    21b0:	2920      	cmp	r1, #32
    21b2:	bf1c      	itt	ne
    21b4:	7e00      	ldrbne	r0, [r0, #24]
    21b6:	bd10      	popne	{r4, pc}
    21b8:	f640 3162 	movw	r1, #2914	; 0xb62
    21bc:	2070      	movs	r0, #112	; 0x70
    21be:	f002 f997 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21c2:	0000      	.short	0x0000
    21c4:	200011ac 	.word	0x200011ac

000021c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    21c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ca:	4d6b      	ldr	r5, [pc, #428]	; (2378 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    21cc:	4a6b      	ldr	r2, [pc, #428]	; (237c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    21ce:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    21d2:	2601      	movs	r6, #1
    21d4:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
    21d8:	2808      	cmp	r0, #8
    21da:	d27c      	bcs.n	22d6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    21dc:	e8df f000 	tbb	[pc, r0]
    21e0:	a9977004 	.word	0xa9977004
    21e4:	b3ae41c7 	.word	0xb3ae41c7
    21e8:	b919      	cbnz	r1, 21f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    21ea:	f001 fff9 	bl	41e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    21ee:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    21f2:	8ae0      	ldrh	r0, [r4, #22]
    21f4:	b110      	cbz	r0, 21fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    21f6:	f002 f903 	bl	4400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    21fa:	b180      	cbz	r0, 221e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x56>
    21fc:	f7ff fd44 	bl	1c88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x900>
    2200:	20ff      	movs	r0, #255	; 0xff
    2202:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2206:	6861      	ldr	r1, [r4, #4]
    2208:	f1b1 3fff 	cmp.w	r1, #4294967295
    220c:	d003      	beq.n	2216 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x4e>
    220e:	2005      	movs	r0, #5
    2210:	f001 fbfc 	bl	3a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2214:	b140      	cbz	r0, 2228 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    2216:	7e60      	ldrb	r0, [r4, #25]
    2218:	2801      	cmp	r0, #1
    221a:	d110      	bne.n	223e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    221c:	e009      	b.n	2232 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    221e:	f640 0169 	movw	r1, #2153	; 0x869
    2222:	2070      	movs	r0, #112	; 0x70
    2224:	f002 f964 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2228:	f640 016e 	movw	r1, #2158	; 0x86e
    222c:	2070      	movs	r0, #112	; 0x70
    222e:	f002 f95f 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2232:	68e0      	ldr	r0, [r4, #12]
    2234:	1e40      	subs	r0, r0, #1
    2236:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    223a:	f001 fb01 	bl	3840 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    223e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2242:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2246:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    224a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    224e:	6840      	ldr	r0, [r0, #4]
    2250:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2254:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2258:	b001      	add	sp, #4
    225a:	2101      	movs	r1, #1
    225c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2260:	4710      	bx	r2
    2262:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2266:	b140      	cbz	r0, 227a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb2>
    2268:	b919      	cbnz	r1, 2272 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xaa>
    226a:	f001 ffb9 	bl	41e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    226e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2272:	2000      	movs	r0, #0
    2274:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    227a:	f7ff fd05 	bl	1c88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x900>
    227e:	f04f 30ff 	mov.w	r0, #4294967295
    2282:	6060      	str	r0, [r4, #4]
    2284:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2288:	f88d 0000 	strb.w	r0, [sp]
    228c:	f89d 0000 	ldrb.w	r0, [sp]
    2290:	b188      	cbz	r0, 22b6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xee>
    2292:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2296:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    229a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    229e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    22a2:	6840      	ldr	r0, [r0, #4]
    22a4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    22a8:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    22ac:	b001      	add	sp, #4
    22ae:	2106      	movs	r1, #6
    22b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    22b4:	4710      	bx	r2
    22b6:	f640 0185 	movw	r1, #2181	; 0x885
    22ba:	2070      	movs	r0, #112	; 0x70
    22bc:	f002 f918 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22c0:	f7ff fce2 	bl	1c88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x900>
    22c4:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    22c8:	f002 f89a 	bl	4400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    22cc:	b120      	cbz	r0, 22d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x110>
    22ce:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    22d2:	b130      	cbz	r0, 22e2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11a>
    22d4:	e009      	b.n	22ea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x122>
    22d6:	e04a      	b.n	236e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a6>
    22d8:	f640 0193 	movw	r1, #2195	; 0x893
    22dc:	2070      	movs	r0, #112	; 0x70
    22de:	f002 f907 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22e2:	f001 ff7d 	bl	41e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    22e6:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    22ea:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    22ee:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    22f2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    22f6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    22fa:	6840      	ldr	r0, [r0, #4]
    22fc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2300:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2304:	b001      	add	sp, #4
    2306:	2100      	movs	r1, #0
    2308:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    230c:	4710      	bx	r2
    230e:	f001 fd59 	bl	3dc4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    2312:	8ae0      	ldrh	r0, [r4, #22]
    2314:	b110      	cbz	r0, 231c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x154>
    2316:	f002 f873 	bl	4400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    231a:	b128      	cbz	r0, 2328 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x160>
    231c:	f001 fd66 	bl	3dec <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    2320:	2800      	cmp	r0, #0
    2322:	bf18      	it	ne
    2324:	7766      	strbne	r6, [r4, #29]
    2326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2328:	f640 019d 	movw	r1, #2205	; 0x89d
    232c:	2070      	movs	r0, #112	; 0x70
    232e:	f002 f8df 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2332:	4813      	ldr	r0, [pc, #76]	; (2380 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2334:	6006      	str	r6, [r0, #0]
    2336:	6890      	ldr	r0, [r2, #8]
    2338:	6006      	str	r6, [r0, #0]
    233a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    233c:	7810      	ldrb	r0, [r2, #0]
    233e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2342:	f002 b9a9 	b.w	4698 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2346:	f7ff fc9f 	bl	1c88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x900>
    234a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    234e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2352:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2356:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    235a:	6840      	ldr	r0, [r0, #4]
    235c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2360:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    2364:	b001      	add	sp, #4
    2366:	2105      	movs	r1, #5
    2368:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    236c:	4710      	bx	r2
    236e:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    2372:	2070      	movs	r0, #112	; 0x70
    2374:	f002 f8bc 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2378:	20000dac 	.word	0x20000dac
    237c:	20000038 	.word	0x20000038
    2380:	40000508 	.word	0x40000508

00002384 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2384:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2388:	4682      	mov	sl, r0
    238a:	48ef      	ldr	r0, [pc, #956]	; (2748 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    238c:	b095      	sub	sp, #84	; 0x54
    238e:	6800      	ldr	r0, [r0, #0]
    2390:	4dee      	ldr	r5, [pc, #952]	; (274c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    2392:	05c0      	lsls	r0, r0, #23
    2394:	0dc0      	lsrs	r0, r0, #23
    2396:	d00e      	beq.n	23b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2398:	3810      	subs	r0, #16
    239a:	b240      	sxtb	r0, r0
    239c:	2800      	cmp	r0, #0
    239e:	bfb8      	it	lt
    23a0:	f000 000f 	andlt.w	r0, r0, #15
    23a4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    23a8:	bfac      	ite	ge
    23aa:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    23ae:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    23b2:	0940      	lsrs	r0, r0, #5
    23b4:	d00d      	beq.n	23d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    23b6:	9816      	ldr	r0, [sp, #88]	; 0x58
    23b8:	f04f 0b00 	mov.w	fp, #0
    23bc:	7800      	ldrb	r0, [r0, #0]
    23be:	2800      	cmp	r0, #0
    23c0:	bf18      	it	ne
    23c2:	2801      	cmpne	r0, #1
    23c4:	d018      	beq.n	23f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    23c6:	f240 713b 	movw	r1, #1851	; 0x73b
    23ca:	f04f 0070 	mov.w	r0, #112	; 0x70
    23ce:	f002 f88f 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23d2:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    23d6:	f04f 0b01 	mov.w	fp, #1
    23da:	2820      	cmp	r0, #32
    23dc:	d007      	beq.n	23ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    23de:	9816      	ldr	r0, [sp, #88]	; 0x58
    23e0:	7800      	ldrb	r0, [r0, #0]
    23e2:	b148      	cbz	r0, 23f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    23e4:	f240 7137 	movw	r1, #1847	; 0x737
    23e8:	2070      	movs	r0, #112	; 0x70
    23ea:	f002 f881 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23ee:	f240 7134 	movw	r1, #1844	; 0x734
    23f2:	2070      	movs	r0, #112	; 0x70
    23f4:	f002 f87c 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23f8:	4cd5      	ldr	r4, [pc, #852]	; (2750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    23fa:	b124      	cbz	r4, 2406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    23fc:	2100      	movs	r1, #0
    23fe:	f240 703e 	movw	r0, #1854	; 0x73e
    2402:	f3af 8000 	nop.w
    2406:	2000      	movs	r0, #0
    2408:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    240c:	49d1      	ldr	r1, [pc, #836]	; (2754 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    240e:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    2412:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2416:	f04f 0901 	mov.w	r9, #1
    241a:	9000      	str	r0, [sp, #0]
    241c:	b124      	cbz	r4, 2428 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    241e:	2100      	movs	r1, #0
    2420:	f240 7049 	movw	r0, #1865	; 0x749
    2424:	f3af 8000 	nop.w
    2428:	f1b9 0f00 	cmp.w	r9, #0
    242c:	d00a      	beq.n	2444 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    242e:	bf00      	nop
    2430:	f895 602c 	ldrb.w	r6, [r5, #44]	; 0x2c
    2434:	f04f 0800 	mov.w	r8, #0
    2438:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    243c:	f1bb 0f00 	cmp.w	fp, #0
    2440:	d007      	beq.n	2452 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    2442:	e038      	b.n	24b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    2444:	48c4      	ldr	r0, [pc, #784]	; (2758 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    2446:	2800      	cmp	r0, #0
    2448:	bf18      	it	ne
    244a:	f3af 8000 	nopne.w
    244e:	b662      	cpsie	i
    2450:	e7ee      	b.n	2430 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    2452:	4637      	mov	r7, r6
    2454:	2001      	movs	r0, #1
    2456:	ea20 0607 	bic.w	r6, r0, r7
    245a:	48c0      	ldr	r0, [pc, #768]	; (275c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    245c:	2240      	movs	r2, #64	; 0x40
    245e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2462:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2466:	f00a f876 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    246a:	b124      	cbz	r4, 2476 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    246c:	2100      	movs	r1, #0
    246e:	f240 505e 	movw	r0, #1374	; 0x55e
    2472:	f3af 8000 	nop.w
    2476:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    247a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    247e:	4429      	add	r1, r5
    2480:	4428      	add	r0, r5
    2482:	8c0a      	ldrh	r2, [r1, #32]
    2484:	8402      	strh	r2, [r0, #32]
    2486:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    248a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    248e:	b124      	cbz	r4, 249a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    2490:	2100      	movs	r1, #0
    2492:	f240 5062 	movw	r0, #1378	; 0x562
    2496:	f3af 8000 	nop.w
    249a:	b124      	cbz	r4, 24a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    249c:	2100      	movs	r1, #0
    249e:	f240 7053 	movw	r0, #1875	; 0x753
    24a2:	f3af 8000 	nop.w
    24a6:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    24aa:	f88d 0008 	strb.w	r0, [sp, #8]
    24ae:	f89d 0008 	ldrb.w	r0, [sp, #8]
    24b2:	2800      	cmp	r0, #0
    24b4:	d1b2      	bne.n	241c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    24b6:	b124      	cbz	r4, 24c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    24b8:	2100      	movs	r1, #0
    24ba:	f240 705d 	movw	r0, #1885	; 0x75d
    24be:	f3af 8000 	nop.w
    24c2:	a802      	add	r0, sp, #8
    24c4:	f001 f8fc 	bl	36c0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    24c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    24cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    24d0:	4633      	mov	r3, r6
    24d2:	aa09      	add	r2, sp, #36	; 0x24
    24d4:	a80e      	add	r0, sp, #56	; 0x38
    24d6:	9916      	ldr	r1, [sp, #88]	; 0x58
    24d8:	f7ff fa74 	bl	19c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x63c>
    24dc:	b124      	cbz	r4, 24e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    24de:	2100      	movs	r1, #0
    24e0:	f240 7064 	movw	r0, #1892	; 0x764
    24e4:	f3af 8000 	nop.w
    24e8:	4a9c      	ldr	r2, [pc, #624]	; (275c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    24ea:	990e      	ldr	r1, [sp, #56]	; 0x38
    24ec:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    24f0:	a809      	add	r0, sp, #36	; 0x24
    24f2:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    24f6:	2a01      	cmp	r2, #1
    24f8:	bf18      	it	ne
    24fa:	2a02      	cmpne	r2, #2
    24fc:	d138      	bne.n	2570 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    24fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2502:	eba2 0201 	sub.w	r2, r2, r1
    2506:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    250a:	eba3 0101 	sub.w	r1, r3, r1
    250e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    2512:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2516:	2a02      	cmp	r2, #2
    2518:	d364      	bcc.n	25e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    251a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    251e:	bf98      	it	ls
    2520:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2524:	d85e      	bhi.n	25e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    2526:	f04f 0801 	mov.w	r8, #1
    252a:	ab14      	add	r3, sp, #80	; 0x50
    252c:	aa13      	add	r2, sp, #76	; 0x4c
    252e:	4631      	mov	r1, r6
    2530:	f7fe ff1e 	bl	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
    2534:	2800      	cmp	r0, #0
    2536:	d05d      	beq.n	25f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    2538:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    253c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    2540:	4633      	mov	r3, r6
    2542:	428a      	cmp	r2, r1
    2544:	d05a      	beq.n	25fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    2546:	2005      	movs	r0, #5
    2548:	f7fe fd1e 	bl	f88 <MPSL_IRQ_RADIO_Handler+0x40>
    254c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2550:	7048      	strb	r0, [r1, #1]
    2552:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    2556:	2820      	cmp	r0, #32
    2558:	bf1c      	itt	ne
    255a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    255e:	f880 a001 	strbne.w	sl, [r0, #1]
    2562:	d057      	beq.n	2614 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    2564:	4632      	mov	r2, r6
    2566:	4651      	mov	r1, sl
    2568:	f05f 0003 	movs.w	r0, #3
    256c:	f7ff fc3e 	bl	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    2570:	b124      	cbz	r4, 257c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    2572:	2100      	movs	r1, #0
    2574:	f240 7069 	movw	r0, #1897	; 0x769
    2578:	f3af 8000 	nop.w
    257c:	4878      	ldr	r0, [pc, #480]	; (2760 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    257e:	2800      	cmp	r0, #0
    2580:	bf18      	it	ne
    2582:	f3af 8000 	nopne.w
    2586:	f3ef 8910 	mrs	r9, PRIMASK
    258a:	b672      	cpsid	i
    258c:	b124      	cbz	r4, 2598 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    258e:	2100      	movs	r1, #0
    2590:	f240 706f 	movw	r0, #1903	; 0x76f
    2594:	f3af 8000 	nop.w
    2598:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    259c:	f88d 0008 	strb.w	r0, [sp, #8]
    25a0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    25a4:	2800      	cmp	r0, #0
    25a6:	f47f af39 	bne.w	241c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    25aa:	b124      	cbz	r4, 25b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    25ac:	2100      	movs	r1, #0
    25ae:	f240 7077 	movw	r0, #1911	; 0x777
    25b2:	f3af 8000 	nop.w
    25b6:	af09      	add	r7, sp, #36	; 0x24
    25b8:	9800      	ldr	r0, [sp, #0]
    25ba:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    25be:	f100 0708 	add.w	r7, r0, #8
    25c2:	f1b8 0f00 	cmp.w	r8, #0
    25c6:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    25ca:	990d      	ldr	r1, [sp, #52]	; 0x34
    25cc:	6181      	str	r1, [r0, #24]
    25ce:	d051      	beq.n	2674 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    25d0:	b124      	cbz	r4, 25dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    25d2:	2100      	movs	r1, #0
    25d4:	f240 7084 	movw	r0, #1924	; 0x784
    25d8:	f3af 8000 	nop.w
    25dc:	f1bb 0f00 	cmp.w	fp, #0
    25e0:	d139      	bne.n	2656 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    25e2:	e01f      	b.n	2624 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    25e4:	4632      	mov	r2, r6
    25e6:	4651      	mov	r1, sl
    25e8:	2004      	movs	r0, #4
    25ea:	f7ff fbff 	bl	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    25ee:	f04f 0801 	mov.w	r8, #1
    25f2:	e7bd      	b.n	2570 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    25f4:	4632      	mov	r2, r6
    25f6:	4651      	mov	r1, sl
    25f8:	2004      	movs	r0, #4
    25fa:	e7b7      	b.n	256c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    25fc:	2920      	cmp	r1, #32
    25fe:	bf19      	ittee	ne
    2600:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2604:	7840      	ldrbne	r0, [r0, #1]
    2606:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    260a:	4428      	addeq	r0, r5
    260c:	bf08      	it	eq
    260e:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2612:	e79b      	b.n	254c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    2614:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    2618:	4429      	add	r1, r5
    261a:	f881 a020 	strb.w	sl, [r1, #32]
    261e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    2622:	e79f      	b.n	2564 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    2624:	9811      	ldr	r0, [sp, #68]	; 0x44
    2626:	f010 0fff 	tst.w	r0, #255	; 0xff
    262a:	d014      	beq.n	2656 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    262c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2630:	2820      	cmp	r0, #32
    2632:	d110      	bne.n	2656 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    2634:	b124      	cbz	r4, 2640 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    2636:	2100      	movs	r1, #0
    2638:	f240 7089 	movw	r0, #1929	; 0x789
    263c:	f3af 8000 	nop.w
    2640:	4631      	mov	r1, r6
    2642:	2002      	movs	r0, #2
    2644:	f7ff fc04 	bl	1e50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>
    2648:	9010      	str	r0, [sp, #64]	; 0x40
    264a:	b920      	cbnz	r0, 2656 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    264c:	9816      	ldr	r0, [sp, #88]	; 0x58
    264e:	7800      	ldrb	r0, [r0, #0]
    2650:	b1e8      	cbz	r0, 268e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    2652:	2801      	cmp	r0, #1
    2654:	d02a      	beq.n	26ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    2656:	b124      	cbz	r4, 2662 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    2658:	2100      	movs	r1, #0
    265a:	f240 70a6 	movw	r0, #1958	; 0x7a6
    265e:	f3af 8000 	nop.w
    2662:	20ff      	movs	r0, #255	; 0xff
    2664:	f1bb 0f00 	cmp.w	fp, #0
    2668:	bf18      	it	ne
    266a:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    266e:	d026      	beq.n	26be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    2670:	f04f 0801 	mov.w	r8, #1
    2674:	b124      	cbz	r4, 2680 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    2676:	2100      	movs	r1, #0
    2678:	f240 70b7 	movw	r0, #1975	; 0x7b7
    267c:	f3af 8000 	nop.w
    2680:	9810      	ldr	r0, [sp, #64]	; 0x40
    2682:	4e38      	ldr	r6, [pc, #224]	; (2764 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    2684:	2802      	cmp	r0, #2
    2686:	d023      	beq.n	26d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    2688:	2801      	cmp	r0, #1
    268a:	d029      	beq.n	26e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    268c:	e02d      	b.n	26ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    268e:	b124      	cbz	r4, 269a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    2690:	2100      	movs	r1, #0
    2692:	f240 7091 	movw	r0, #1937	; 0x791
    2696:	f3af 8000 	nop.w
    269a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    269e:	4651      	mov	r1, sl
    26a0:	2004      	movs	r0, #4
    26a2:	f7ff fba3 	bl	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    26a6:	f04f 0801 	mov.w	r8, #1
    26aa:	e7e3      	b.n	2674 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    26ac:	2c00      	cmp	r4, #0
    26ae:	f43f aeb5 	beq.w	241c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    26b2:	2100      	movs	r1, #0
    26b4:	f240 709c 	movw	r0, #1948	; 0x79c
    26b8:	f3af 8000 	nop.w
    26bc:	e6ae      	b.n	241c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    26be:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
    26c2:	2101      	movs	r1, #1
    26c4:	4391      	bics	r1, r2
    26c6:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
    26ca:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    26ce:	e7cf      	b.n	2670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    26d0:	68a8      	ldr	r0, [r5, #8]
    26d2:	990e      	ldr	r1, [sp, #56]	; 0x38
    26d4:	1a40      	subs	r0, r0, r1
    26d6:	f009 fde4 	bl	c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    26da:	6871      	ldr	r1, [r6, #4]
    26dc:	b921      	cbnz	r1, 26e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    26de:	e004      	b.n	26ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    26e0:	6871      	ldr	r1, [r6, #4]
    26e2:	f04f 30ff 	mov.w	r0, #4294967295
    26e6:	b101      	cbz	r1, 26ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    26e8:	4788      	blx	r1
    26ea:	f1b9 0f00 	cmp.w	r9, #0
    26ee:	d024      	beq.n	273a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    26f0:	b124      	cbz	r4, 26fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    26f2:	2100      	movs	r1, #0
    26f4:	f240 70c7 	movw	r0, #1991	; 0x7c7
    26f8:	f3af 8000 	nop.w
    26fc:	f1b8 0f00 	cmp.w	r8, #0
    2700:	d011      	beq.n	2726 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    2702:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2706:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    270a:	4428      	add	r0, r5
    270c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2710:	2820      	cmp	r0, #32
    2712:	d008      	beq.n	2726 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    2714:	b124      	cbz	r4, 2720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    2716:	2100      	movs	r1, #0
    2718:	f240 70ce 	movw	r0, #1998	; 0x7ce
    271c:	f3af 8000 	nop.w
    2720:	7870      	ldrb	r0, [r6, #1]
    2722:	f001 ffb9 	bl	4698 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2726:	b124      	cbz	r4, 2732 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    2728:	2100      	movs	r1, #0
    272a:	f240 70d3 	movw	r0, #2003	; 0x7d3
    272e:	f3af 8000 	nop.w
    2732:	b017      	add	sp, #92	; 0x5c
    2734:	4640      	mov	r0, r8
    2736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    273a:	4807      	ldr	r0, [pc, #28]	; (2758 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    273c:	2800      	cmp	r0, #0
    273e:	bf18      	it	ne
    2740:	f3af 8000 	nopne.w
    2744:	b662      	cpsie	i
    2746:	e7d3      	b.n	26f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    2748:	e000ed04 	.word	0xe000ed04
    274c:	200011ac 	.word	0x200011ac
    2750:	00000000 	.word	0x00000000
    2754:	20000dac 	.word	0x20000dac
    2758:	00000000 	.word	0x00000000
    275c:	2000112c 	.word	0x2000112c
    2760:	00000000 	.word	0x00000000
    2764:	20000038 	.word	0x20000038

00002768 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    276c:	4606      	mov	r6, r0
    276e:	7800      	ldrb	r0, [r0, #0]
    2770:	b08d      	sub	sp, #52	; 0x34
    2772:	b118      	cbz	r0, 277c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    2774:	b00d      	add	sp, #52	; 0x34
    2776:	2000      	movs	r0, #0
    2778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    277c:	488c      	ldr	r0, [pc, #560]	; (29b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    277e:	6800      	ldr	r0, [r0, #0]
    2780:	05c0      	lsls	r0, r0, #23
    2782:	0dc0      	lsrs	r0, r0, #23
    2784:	d00e      	beq.n	27a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    2786:	3810      	subs	r0, #16
    2788:	b240      	sxtb	r0, r0
    278a:	2800      	cmp	r0, #0
    278c:	bfb8      	it	lt
    278e:	f000 000f 	andlt.w	r0, r0, #15
    2792:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2796:	bfac      	ite	ge
    2798:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    279c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    27a0:	0940      	lsrs	r0, r0, #5
    27a2:	d0e7      	beq.n	2774 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    27a4:	4d83      	ldr	r5, [pc, #524]	; (29b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    27a6:	4c84      	ldr	r4, [pc, #528]	; (29b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    27a8:	f04f 0b01 	mov.w	fp, #1
    27ac:	2700      	movs	r7, #0
    27ae:	b125      	cbz	r5, 27ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    27b0:	2100      	movs	r1, #0
    27b2:	f240 50e5 	movw	r0, #1509	; 0x5e5
    27b6:	f3af 8000 	nop.w
    27ba:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
    27be:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    27c2:	f04f 0900 	mov.w	r9, #0
    27c6:	b125      	cbz	r5, 27d2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    27c8:	2100      	movs	r1, #0
    27ca:	f240 50ea 	movw	r0, #1514	; 0x5ea
    27ce:	f3af 8000 	nop.w
    27d2:	487a      	ldr	r0, [pc, #488]	; (29bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    27d4:	ea2b 080a 	bic.w	r8, fp, sl
    27d8:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    27dc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    27e0:	2240      	movs	r2, #64	; 0x40
    27e2:	f009 feb8 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    27e6:	b125      	cbz	r5, 27f2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    27e8:	2100      	movs	r1, #0
    27ea:	f240 505e 	movw	r0, #1374	; 0x55e
    27ee:	f3af 8000 	nop.w
    27f2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    27f6:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    27fa:	4421      	add	r1, r4
    27fc:	4420      	add	r0, r4
    27fe:	8c0a      	ldrh	r2, [r1, #32]
    2800:	8402      	strh	r2, [r0, #32]
    2802:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2806:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    280a:	b125      	cbz	r5, 2816 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    280c:	2100      	movs	r1, #0
    280e:	f240 5062 	movw	r0, #1378	; 0x562
    2812:	f3af 8000 	nop.w
    2816:	b125      	cbz	r5, 2822 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    2818:	2100      	movs	r1, #0
    281a:	f240 50ef 	movw	r0, #1519	; 0x5ef
    281e:	f3af 8000 	nop.w
    2822:	a808      	add	r0, sp, #32
    2824:	f000 ff4c 	bl	36c0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    2828:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    282c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    2830:	4643      	mov	r3, r8
    2832:	466a      	mov	r2, sp
    2834:	4631      	mov	r1, r6
    2836:	a80a      	add	r0, sp, #40	; 0x28
    2838:	f7ff f8c4 	bl	19c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x63c>
    283c:	b125      	cbz	r5, 2848 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    283e:	2100      	movs	r1, #0
    2840:	f240 50f5 	movw	r0, #1525	; 0x5f5
    2844:	f3af 8000 	nop.w
    2848:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    284c:	2820      	cmp	r0, #32
    284e:	d01a      	beq.n	2886 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    2850:	68e0      	ldr	r0, [r4, #12]
    2852:	9900      	ldr	r1, [sp, #0]
    2854:	1a09      	subs	r1, r1, r0
    2856:	0209      	lsls	r1, r1, #8
    2858:	17ca      	asrs	r2, r1, #31
    285a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    285e:	1209      	asrs	r1, r1, #8
    2860:	d511      	bpl.n	2886 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    2862:	9900      	ldr	r1, [sp, #0]
    2864:	4281      	cmp	r1, r0
    2866:	d902      	bls.n	286e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    2868:	9902      	ldr	r1, [sp, #8]
    286a:	1c49      	adds	r1, r1, #1
    286c:	9102      	str	r1, [sp, #8]
    286e:	e9dd 2100 	ldrd	r2, r1, [sp]
    2872:	1a89      	subs	r1, r1, r2
    2874:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2878:	4408      	add	r0, r1
    287a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    287e:	e9cd 2000 	strd	r2, r0, [sp]
    2882:	f04f 0901 	mov.w	r9, #1
    2886:	b125      	cbz	r5, 2892 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    2888:	2100      	movs	r1, #0
    288a:	f240 50ff 	movw	r0, #1535	; 0x5ff
    288e:	f3af 8000 	nop.w
    2892:	9900      	ldr	r1, [sp, #0]
    2894:	980a      	ldr	r0, [sp, #40]	; 0x28
    2896:	9a01      	ldr	r2, [sp, #4]
    2898:	1a09      	subs	r1, r1, r0
    289a:	1a10      	subs	r0, r2, r0
    289c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    28a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    28a8:	bf98      	it	ls
    28aa:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    28ae:	d809      	bhi.n	28c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    28b0:	4643      	mov	r3, r8
    28b2:	4669      	mov	r1, sp
    28b4:	4842      	ldr	r0, [pc, #264]	; (29c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    28b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    28b8:	f7fe fba2 	bl	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
    28bc:	ea59 0000 	orrs.w	r0, r9, r0
    28c0:	d129      	bne.n	2916 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    28c2:	e042      	b.n	294a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    28c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    28c6:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    28ca:	9002      	str	r0, [sp, #8]
    28cc:	aa09      	add	r2, sp, #36	; 0x24
    28ce:	a907      	add	r1, sp, #28
    28d0:	4650      	mov	r0, sl
    28d2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    28d6:	f000 fd83 	bl	33e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    28da:	f001 fa91 	bl	3e00 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    28de:	f000 fd63 	bl	33a8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    28e2:	4681      	mov	r9, r0
    28e4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    28e8:	2820      	cmp	r0, #32
    28ea:	d03b      	beq.n	2964 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    28ec:	68e0      	ldr	r0, [r4, #12]
    28ee:	1d40      	adds	r0, r0, #5
    28f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28f4:	9900      	ldr	r1, [sp, #0]
    28f6:	4281      	cmp	r1, r0
    28f8:	d902      	bls.n	2900 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    28fa:	9902      	ldr	r1, [sp, #8]
    28fc:	1c49      	adds	r1, r1, #1
    28fe:	9102      	str	r1, [sp, #8]
    2900:	e9dd 2100 	ldrd	r2, r1, [sp]
    2904:	1a89      	subs	r1, r1, r2
    2906:	9000      	str	r0, [sp, #0]
    2908:	4408      	add	r0, r1
    290a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    290e:	9001      	str	r0, [sp, #4]
    2910:	201f      	movs	r0, #31
    2912:	f88d 000c 	strb.w	r0, [sp, #12]
    2916:	9800      	ldr	r0, [sp, #0]
    2918:	f009 fcc3 	bl	c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    291c:	1c41      	adds	r1, r0, #1
    291e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2922:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2926:	4410      	add	r0, r2
    2928:	4408      	add	r0, r1
    292a:	e9c6 0704 	strd	r0, r7, [r6, #16]
    292e:	b125      	cbz	r5, 293a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    2930:	2100      	movs	r1, #0
    2932:	f240 601a 	movw	r0, #1562	; 0x61a
    2936:	f3af 8000 	nop.w
    293a:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    293e:	4a21      	ldr	r2, [pc, #132]	; (29c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    2940:	9b02      	ldr	r3, [sp, #8]
    2942:	fbe3 1002 	umlal	r1, r0, r3, r2
    2946:	e9c6 1004 	strd	r1, r0, [r6, #16]
    294a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    294e:	f88d 0014 	strb.w	r0, [sp, #20]
    2952:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2956:	2800      	cmp	r0, #0
    2958:	f47f af29 	bne.w	27ae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    295c:	b00d      	add	sp, #52	; 0x34
    295e:	2001      	movs	r0, #1
    2960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2964:	f108 0809 	add.w	r8, r8, #9
    2968:	f1ba 0f00 	cmp.w	sl, #0
    296c:	d016      	beq.n	299c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    296e:	f001 fd47 	bl	4400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2972:	b998      	cbnz	r0, 299c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    2974:	f001 fc12 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2978:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    297c:	bf08      	it	eq
    297e:	200d      	moveq	r0, #13
    2980:	d00b      	beq.n	299a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    2982:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    2986:	3856      	subs	r0, #86	; 0x56
    2988:	bf08      	it	eq
    298a:	201c      	moveq	r0, #28
    298c:	d005      	beq.n	299a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    298e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    2992:	389f      	subs	r0, #159	; 0x9f
    2994:	bf14      	ite	ne
    2996:	4638      	movne	r0, r7
    2998:	2032      	moveq	r0, #50	; 0x32
    299a:	4480      	add	r8, r0
    299c:	9807      	ldr	r0, [sp, #28]
    299e:	4581      	cmp	r9, r0
    29a0:	bf84      	itt	hi
    29a2:	eba9 0000 	subhi.w	r0, r9, r0
    29a6:	4480      	addhi	r8, r0
    29a8:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    29ac:	e7a2      	b.n	28f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    29ae:	0000      	.short	0x0000
    29b0:	e000ed04 	.word	0xe000ed04
    29b4:	00000000 	.word	0x00000000
    29b8:	200011ac 	.word	0x200011ac
    29bc:	2000112c 	.word	0x2000112c
    29c0:	0f424000 	.word	0x0f424000
    29c4:	1e848000 	.word	0x1e848000

000029c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    29c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29cc:	4d92      	ldr	r5, [pc, #584]	; (2c18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    29ce:	b08c      	sub	sp, #48	; 0x30
    29d0:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    29d4:	2000      	movs	r0, #0
    29d6:	9008      	str	r0, [sp, #32]
    29d8:	9006      	str	r0, [sp, #24]
    29da:	2001      	movs	r0, #1
    29dc:	4c8f      	ldr	r4, [pc, #572]	; (2c1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    29de:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    29e2:	f04f 0800 	mov.w	r8, #0
    29e6:	4607      	mov	r7, r0
    29e8:	9007      	str	r0, [sp, #28]
    29ea:	b124      	cbz	r4, 29f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    29ec:	2100      	movs	r1, #0
    29ee:	f240 70e4 	movw	r0, #2020	; 0x7e4
    29f2:	f3af 8000 	nop.w
    29f6:	9807      	ldr	r0, [sp, #28]
    29f8:	2800      	cmp	r0, #0
    29fa:	d03c      	beq.n	2a76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    29fc:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    2a00:	b124      	cbz	r4, 2a0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    2a02:	2100      	movs	r1, #0
    2a04:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2a08:	f3af 8000 	nop.w
    2a0c:	f895 a02c 	ldrb.w	sl, [r5, #44]	; 0x2c
    2a10:	2240      	movs	r2, #64	; 0x40
    2a12:	ea27 060a 	bic.w	r6, r7, sl
    2a16:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    2a1a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    2a1e:	4683      	mov	fp, r0
    2a20:	f009 fd99 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2a24:	b124      	cbz	r4, 2a30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    2a26:	2100      	movs	r1, #0
    2a28:	f240 505e 	movw	r0, #1374	; 0x55e
    2a2c:	f3af 8000 	nop.w
    2a30:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2a34:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    2a38:	4428      	add	r0, r5
    2a3a:	4429      	add	r1, r5
    2a3c:	9000      	str	r0, [sp, #0]
    2a3e:	8c0a      	ldrh	r2, [r1, #32]
    2a40:	8402      	strh	r2, [r0, #32]
    2a42:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    2a46:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    2a4a:	b124      	cbz	r4, 2a56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    2a4c:	2100      	movs	r1, #0
    2a4e:	f240 5062 	movw	r0, #1378	; 0x562
    2a52:	f3af 8000 	nop.w
    2a56:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2a5a:	f88d 0008 	strb.w	r0, [sp, #8]
    2a5e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2a62:	b178      	cbz	r0, 2a84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2a64:	2c00      	cmp	r4, #0
    2a66:	bf1c      	itt	ne
    2a68:	2100      	movne	r1, #0
    2a6a:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    2a6e:	d0bc      	beq.n	29ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    2a70:	f3af 8000 	nop.w
    2a74:	e7b9      	b.n	29ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    2a76:	486a      	ldr	r0, [pc, #424]	; (2c20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    2a78:	2800      	cmp	r0, #0
    2a7a:	bf18      	it	ne
    2a7c:	f3af 8000 	nopne.w
    2a80:	b662      	cpsie	i
    2a82:	e7bb      	b.n	29fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2a84:	b124      	cbz	r4, 2a90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    2a86:	2100      	movs	r1, #0
    2a88:	f240 70f3 	movw	r0, #2035	; 0x7f3
    2a8c:	f3af 8000 	nop.w
    2a90:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a92:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2a96:	2803      	cmp	r0, #3
    2a98:	d17e      	bne.n	2b98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    2a9a:	9a00      	ldr	r2, [sp, #0]
    2a9c:	990c      	ldr	r1, [sp, #48]	; 0x30
    2a9e:	f892 0020 	ldrb.w	r0, [r2, #32]
    2aa2:	4288      	cmp	r0, r1
    2aa4:	bf14      	ite	ne
    2aa6:	f04f 0a00 	movne.w	sl, #0
    2aaa:	f04f 0a01 	moveq.w	sl, #1
    2aae:	f102 0c20 	add.w	ip, r2, #32
    2ab2:	4683      	mov	fp, r0
    2ab4:	2220      	movs	r2, #32
    2ab6:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    2aba:	e003      	b.n	2ac4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    2abc:	4602      	mov	r2, r0
    2abe:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2ac2:	7840      	ldrb	r0, [r0, #1]
    2ac4:	4288      	cmp	r0, r1
    2ac6:	d002      	beq.n	2ace <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    2ac8:	2820      	cmp	r0, #32
    2aca:	d00a      	beq.n	2ae2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2acc:	e7f6      	b.n	2abc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    2ace:	2820      	cmp	r0, #32
    2ad0:	d007      	beq.n	2ae2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    2ad2:	4583      	cmp	fp, r0
    2ad4:	d107      	bne.n	2ae6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    2ad6:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    2ada:	7840      	ldrb	r0, [r0, #1]
    2adc:	f88c 0000 	strb.w	r0, [ip]
    2ae0:	e007      	b.n	2af2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    2ae2:	4640      	mov	r0, r8
    2ae4:	e00c      	b.n	2b00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    2ae6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2aea:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2aee:	7840      	ldrb	r0, [r0, #1]
    2af0:	7048      	strb	r0, [r1, #1]
    2af2:	b124      	cbz	r4, 2afe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    2af4:	2100      	movs	r1, #0
    2af6:	f240 40c9 	movw	r0, #1225	; 0x4c9
    2afa:	f3af 8000 	nop.w
    2afe:	4638      	mov	r0, r7
    2b00:	46c3      	mov	fp, r8
    2b02:	ea10 0f0a 	tst.w	r0, sl
    2b06:	bf18      	it	ne
    2b08:	46bb      	movne	fp, r7
    2b0a:	2800      	cmp	r0, #0
    2b0c:	d04e      	beq.n	2bac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    2b0e:	b124      	cbz	r4, 2b1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    2b10:	2100      	movs	r1, #0
    2b12:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2b16:	f3af 8000 	nop.w
    2b1a:	4632      	mov	r2, r6
    2b1c:	2001      	movs	r0, #1
    2b1e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2b20:	f7ff f964 	bl	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    2b24:	b124      	cbz	r4, 2b30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    2b26:	2100      	movs	r1, #0
    2b28:	f640 0001 	movw	r0, #2049	; 0x801
    2b2c:	f3af 8000 	nop.w
    2b30:	483c      	ldr	r0, [pc, #240]	; (2c24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    2b32:	2800      	cmp	r0, #0
    2b34:	bf18      	it	ne
    2b36:	f3af 8000 	nopne.w
    2b3a:	f3ef 8010 	mrs	r0, PRIMASK
    2b3e:	b672      	cpsid	i
    2b40:	9007      	str	r0, [sp, #28]
    2b42:	b124      	cbz	r4, 2b4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    2b44:	2100      	movs	r1, #0
    2b46:	f640 0006 	movw	r0, #2054	; 0x806
    2b4a:	f3af 8000 	nop.w
    2b4e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    2b52:	f88d 0008 	strb.w	r0, [sp, #8]
    2b56:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2b5a:	b138      	cbz	r0, 2b6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    2b5c:	2c00      	cmp	r4, #0
    2b5e:	bf1c      	itt	ne
    2b60:	2100      	movne	r1, #0
    2b62:	f640 000a 	movwne	r0, #2058	; 0x80a
    2b66:	f43f af40 	beq.w	29ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    2b6a:	e781      	b.n	2a70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    2b6c:	f1bb 0f00 	cmp.w	fp, #0
    2b70:	d009      	beq.n	2b86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    2b72:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    2b76:	2820      	cmp	r0, #32
    2b78:	d105      	bne.n	2b86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    2b7a:	4631      	mov	r1, r6
    2b7c:	2002      	movs	r0, #2
    2b7e:	f7ff f967 	bl	1e50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>
    2b82:	9006      	str	r0, [sp, #24]
    2b84:	b1f8      	cbz	r0, 2bc6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    2b86:	b124      	cbz	r4, 2b92 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    2b88:	2100      	movs	r1, #0
    2b8a:	f640 001e 	movw	r0, #2078	; 0x81e
    2b8e:	f3af 8000 	nop.w
    2b92:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    2b96:	e000      	b.n	2b9a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2b98:	e008      	b.n	2bac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    2b9a:	ea27 0000 	bic.w	r0, r7, r0
    2b9e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    2ba2:	20ff      	movs	r0, #255	; 0xff
    2ba4:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    2ba8:	2001      	movs	r0, #1
    2baa:	9008      	str	r0, [sp, #32]
    2bac:	b124      	cbz	r4, 2bb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    2bae:	2100      	movs	r1, #0
    2bb0:	f640 0027 	movw	r0, #2087	; 0x827
    2bb4:	f3af 8000 	nop.w
    2bb8:	9806      	ldr	r0, [sp, #24]
    2bba:	4e1b      	ldr	r6, [pc, #108]	; (2c28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    2bbc:	2802      	cmp	r0, #2
    2bbe:	d009      	beq.n	2bd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    2bc0:	2801      	cmp	r0, #1
    2bc2:	d010      	beq.n	2be6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    2bc4:	e014      	b.n	2bf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2bc6:	b19c      	cbz	r4, 2bf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2bc8:	2100      	movs	r1, #0
    2bca:	f640 0019 	movw	r0, #2073	; 0x819
    2bce:	f3af 8000 	nop.w
    2bd2:	e7ec      	b.n	2bae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2bd4:	f000 fd6e 	bl	36b4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2bd8:	68a9      	ldr	r1, [r5, #8]
    2bda:	1a08      	subs	r0, r1, r0
    2bdc:	f009 fb61 	bl	c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2be0:	6871      	ldr	r1, [r6, #4]
    2be2:	b921      	cbnz	r1, 2bee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    2be4:	e004      	b.n	2bf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2be6:	6871      	ldr	r1, [r6, #4]
    2be8:	f04f 30ff 	mov.w	r0, #4294967295
    2bec:	b101      	cbz	r1, 2bf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    2bee:	4788      	blx	r1
    2bf0:	9807      	ldr	r0, [sp, #28]
    2bf2:	b148      	cbz	r0, 2c08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    2bf4:	b124      	cbz	r4, 2c00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    2bf6:	2100      	movs	r1, #0
    2bf8:	f640 003c 	movw	r0, #2108	; 0x83c
    2bfc:	f3af 8000 	nop.w
    2c00:	9808      	ldr	r0, [sp, #32]
    2c02:	b00d      	add	sp, #52	; 0x34
    2c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c08:	4805      	ldr	r0, [pc, #20]	; (2c20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    2c0a:	2800      	cmp	r0, #0
    2c0c:	bf18      	it	ne
    2c0e:	f3af 8000 	nopne.w
    2c12:	b662      	cpsie	i
    2c14:	e7ee      	b.n	2bf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    2c16:	0000      	.short	0x0000
    2c18:	200011ac 	.word	0x200011ac
	...
    2c28:	20000038 	.word	0x20000038

00002c2c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2c2c:	2820      	cmp	r0, #32
    2c2e:	bf24      	itt	cs
    2c30:	2000      	movcs	r0, #0
    2c32:	4770      	bxcs	lr
    2c34:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c38:	4b03      	ldr	r3, [pc, #12]	; (2c48 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2c3a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    2c3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c42:	6042      	str	r2, [r0, #4]
    2c44:	2001      	movs	r0, #1
    2c46:	4770      	bx	lr
    2c48:	20000dac 	.word	0x20000dac

00002c4c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2c4c:	b510      	push	{r4, lr}
    2c4e:	2820      	cmp	r0, #32
    2c50:	d211      	bcs.n	2c76 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2c52:	490e      	ldr	r1, [pc, #56]	; (2c8c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2c54:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2c58:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2c5c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2c60:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2c64:	b13b      	cbz	r3, 2c76 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2c66:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    2c6a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2c6e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2c72:	2a01      	cmp	r2, #1
    2c74:	d001      	beq.n	2c7a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2c76:	2000      	movs	r0, #0
    2c78:	bd10      	pop	{r4, pc}
    2c7a:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    2c7e:	4601      	mov	r1, r0
    2c80:	2000      	movs	r0, #0
    2c82:	f7ff f8b3 	bl	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    2c86:	2001      	movs	r0, #1
    2c88:	bd10      	pop	{r4, pc}
    2c8a:	0000      	.short	0x0000
    2c8c:	200011ac 	.word	0x200011ac

00002c90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c94:	4e86      	ldr	r6, [pc, #536]	; (2eb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    2c96:	4680      	mov	r8, r0
    2c98:	f896 002c 	ldrb.w	r0, [r6, #44]	; 0x2c
    2c9c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2ca0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2ca4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2ca8:	2800      	cmp	r0, #0
    2caa:	d071      	beq.n	2d90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2cac:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
    2cb0:	4d80      	ldr	r5, [pc, #512]	; (2eb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    2cb2:	b125      	cbz	r5, 2cbe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2cb4:	2100      	movs	r1, #0
    2cb6:	f640 30ae 	movw	r0, #2990	; 0xbae
    2cba:	f3af 8000 	nop.w
    2cbe:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2cc2:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2cc6:	2801      	cmp	r0, #1
    2cc8:	d018      	beq.n	2cfc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2cca:	b2c0      	uxtb	r0, r0
    2ccc:	2804      	cmp	r0, #4
    2cce:	bf1c      	itt	ne
    2cd0:	2805      	cmpne	r0, #5
    2cd2:	2806      	cmpne	r0, #6
    2cd4:	d061      	beq.n	2d9a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    2cd6:	b12d      	cbz	r5, 2ce4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2cd8:	f04f 0100 	mov.w	r1, #0
    2cdc:	f640 30ba 	movw	r0, #3002	; 0xbba
    2ce0:	f3af 8000 	nop.w
    2ce4:	f001 fd3e 	bl	4764 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2ce8:	b125      	cbz	r5, 2cf4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2cea:	2100      	movs	r1, #0
    2cec:	f640 30be 	movw	r0, #3006	; 0xbbe
    2cf0:	f3af 8000 	nop.w
    2cf4:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2cf8:	2801      	cmp	r0, #1
    2cfa:	d1e6      	bne.n	2cca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2cfc:	2401      	movs	r4, #1
    2cfe:	b125      	cbz	r5, 2d0a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2d00:	2100      	movs	r1, #0
    2d02:	f640 30c5 	movw	r0, #3013	; 0xbc5
    2d06:	f3af 8000 	nop.w
    2d0a:	2c00      	cmp	r4, #0
    2d0c:	d04b      	beq.n	2da6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    2d0e:	2000      	movs	r0, #0
    2d10:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2d14:	b125      	cbz	r5, 2d20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2d16:	2100      	movs	r1, #0
    2d18:	f640 30ca 	movw	r0, #3018	; 0xbca
    2d1c:	f3af 8000 	nop.w
    2d20:	f896 b02c 	ldrb.w	fp, [r6, #44]	; 0x2c
    2d24:	2001      	movs	r0, #1
    2d26:	ea20 090b 	bic.w	r9, r0, fp
    2d2a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2d2e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2d32:	2240      	movs	r2, #64	; 0x40
    2d34:	f009 fc0f 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2d38:	b125      	cbz	r5, 2d44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2d3a:	2100      	movs	r1, #0
    2d3c:	f240 505e 	movw	r0, #1374	; 0x55e
    2d40:	f3af 8000 	nop.w
    2d44:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    2d48:	eb00 0a06 	add.w	sl, r0, r6
    2d4c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    2d50:	4430      	add	r0, r6
    2d52:	8c01      	ldrh	r1, [r0, #32]
    2d54:	f8aa 1020 	strh.w	r1, [sl, #32]
    2d58:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    2d5c:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    2d60:	b125      	cbz	r5, 2d6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    2d62:	2100      	movs	r1, #0
    2d64:	f240 5062 	movw	r0, #1378	; 0x562
    2d68:	f3af 8000 	nop.w
    2d6c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2d70:	f88d 0000 	strb.w	r0, [sp]
    2d74:	f89d 0000 	ldrb.w	r0, [sp]
    2d78:	b1e0      	cbz	r0, 2db4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    2d7a:	2d00      	cmp	r5, #0
    2d7c:	bf1c      	itt	ne
    2d7e:	2100      	movne	r1, #0
    2d80:	f44f 603d 	movne.w	r0, #3024	; 0xbd0
    2d84:	d0bb      	beq.n	2cfe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2d86:	bf00      	nop
    2d88:	f3af 8000 	nop.w
    2d8c:	e7b7      	b.n	2cfe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2d8e:	e7ff      	b.n	2d90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    2d90:	f640 31a5 	movw	r1, #2981	; 0xba5
    2d94:	2070      	movs	r0, #112	; 0x70
    2d96:	f001 fbab 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d9a:	464a      	mov	r2, r9
    2d9c:	4641      	mov	r1, r8
    2d9e:	2001      	movs	r0, #1
    2da0:	f7ff f824 	bl	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    2da4:	e7a0      	b.n	2ce8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2da6:	4844      	ldr	r0, [pc, #272]	; (2eb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2da8:	2800      	cmp	r0, #0
    2daa:	bf18      	it	ne
    2dac:	f3af 8000 	nopne.w
    2db0:	b662      	cpsie	i
    2db2:	e7ac      	b.n	2d0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2db4:	b125      	cbz	r5, 2dc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    2db6:	2100      	movs	r1, #0
    2db8:	f640 30d4 	movw	r0, #3028	; 0xbd4
    2dbc:	f3af 8000 	nop.w
    2dc0:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2dc4:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2dc8:	4640      	mov	r0, r8
    2dca:	461c      	mov	r4, r3
    2dcc:	f04f 0b20 	mov.w	fp, #32
    2dd0:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2dd4:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2dd8:	e004      	b.n	2de4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    2dda:	46a3      	mov	fp, r4
    2ddc:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    2de0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2de4:	4284      	cmp	r4, r0
    2de6:	d002      	beq.n	2dee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    2de8:	2c20      	cmp	r4, #32
    2dea:	d02b      	beq.n	2e44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2dec:	e7f5      	b.n	2dda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    2dee:	2c20      	cmp	r4, #32
    2df0:	d028      	beq.n	2e44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    2df2:	42a3      	cmp	r3, r4
    2df4:	d104      	bne.n	2e00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    2df6:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2dfa:	7840      	ldrb	r0, [r0, #1]
    2dfc:	7008      	strb	r0, [r1, #0]
    2dfe:	e005      	b.n	2e0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    2e00:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2e04:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2e08:	7840      	ldrb	r0, [r0, #1]
    2e0a:	7048      	strb	r0, [r1, #1]
    2e0c:	f1ba 0f00 	cmp.w	sl, #0
    2e10:	d011      	beq.n	2e36 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2e12:	b125      	cbz	r5, 2e1e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    2e14:	2100      	movs	r1, #0
    2e16:	f240 40c1 	movw	r0, #1217	; 0x4c1
    2e1a:	f3af 8000 	nop.w
    2e1e:	f89a 0000 	ldrb.w	r0, [sl]
    2e22:	42a0      	cmp	r0, r4
    2e24:	d107      	bne.n	2e36 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    2e26:	b125      	cbz	r5, 2e32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    2e28:	2100      	movs	r1, #0
    2e2a:	f240 40c4 	movw	r0, #1220	; 0x4c4
    2e2e:	f3af 8000 	nop.w
    2e32:	f88a b000 	strb.w	fp, [sl]
    2e36:	b15d      	cbz	r5, 2e50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2e38:	2100      	movs	r1, #0
    2e3a:	f240 40c9 	movw	r0, #1225	; 0x4c9
    2e3e:	f3af 8000 	nop.w
    2e42:	e000      	b.n	2e46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    2e44:	b125      	cbz	r5, 2e50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    2e46:	2100      	movs	r1, #0
    2e48:	f640 30d8 	movw	r0, #3032	; 0xbd8
    2e4c:	f3af 8000 	nop.w
    2e50:	481a      	ldr	r0, [pc, #104]	; (2ebc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    2e52:	2800      	cmp	r0, #0
    2e54:	bf18      	it	ne
    2e56:	f3af 8000 	nopne.w
    2e5a:	f3ef 8410 	mrs	r4, PRIMASK
    2e5e:	b672      	cpsid	i
    2e60:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    2e64:	f88d 0000 	strb.w	r0, [sp]
    2e68:	f89d 0000 	ldrb.w	r0, [sp]
    2e6c:	b138      	cbz	r0, 2e7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    2e6e:	2d00      	cmp	r5, #0
    2e70:	bf1c      	itt	ne
    2e72:	2100      	movne	r1, #0
    2e74:	f640 30de 	movwne	r0, #3038	; 0xbde
    2e78:	f43f af41 	beq.w	2cfe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2e7c:	e784      	b.n	2d88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2e7e:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
    2e82:	20ff      	movs	r0, #255	; 0xff
    2e84:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    2e88:	b154      	cbz	r4, 2ea0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    2e8a:	2d00      	cmp	r5, #0
    2e8c:	bf08      	it	eq
    2e8e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e92:	2100      	movs	r1, #0
    2e94:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2e98:	f3af 8000 	nop.w
    2e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ea0:	4805      	ldr	r0, [pc, #20]	; (2eb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    2ea2:	2800      	cmp	r0, #0
    2ea4:	bf18      	it	ne
    2ea6:	f3af 8000 	nopne.w
    2eaa:	b662      	cpsie	i
    2eac:	e7ed      	b.n	2e8a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2eae:	0000      	.short	0x0000
    2eb0:	200011ac 	.word	0x200011ac
	...

00002ec0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2ec0:	b570      	push	{r4, r5, r6, lr}
    2ec2:	460d      	mov	r5, r1
    2ec4:	4606      	mov	r6, r0
    2ec6:	f001 fa89 	bl	43dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    2eca:	480f      	ldr	r0, [pc, #60]	; (2f08 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2ecc:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
    2ed0:	2400      	movs	r4, #0
    2ed2:	3880      	subs	r0, #128	; 0x80
    2ed4:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2ed8:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2edc:	b129      	cbz	r1, 2eea <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2ede:	1c61      	adds	r1, r4, #1
    2ee0:	b2cc      	uxtb	r4, r1
    2ee2:	2c20      	cmp	r4, #32
    2ee4:	d3f8      	bcc.n	2ed8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2ee6:	2020      	movs	r0, #32
    2ee8:	bd70      	pop	{r4, r5, r6, pc}
    2eea:	4808      	ldr	r0, [pc, #32]	; (2f0c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2eec:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    2ef0:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    2ef4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2ef8:	4621      	mov	r1, r4
    2efa:	6045      	str	r5, [r0, #4]
    2efc:	2001      	movs	r0, #1
    2efe:	f7fe ff75 	bl	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    2f02:	4620      	mov	r0, r4
    2f04:	bd70      	pop	{r4, r5, r6, pc}
    2f06:	0000      	.short	0x0000
    2f08:	200011ac 	.word	0x200011ac
    2f0c:	20000dac 	.word	0x20000dac

00002f10 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f14:	b083      	sub	sp, #12
    2f16:	f000 fbcd 	bl	36b4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2f1a:	4605      	mov	r5, r0
    2f1c:	f000 fe9c 	bl	3c58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2f20:	4c84      	ldr	r4, [pc, #528]	; (3134 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    2f22:	6860      	ldr	r0, [r4, #4]
    2f24:	f1b0 3fff 	cmp.w	r0, #4294967295
    2f28:	bf1c      	itt	ne
    2f2a:	f04f 30ff 	movne.w	r0, #4294967295
    2f2e:	6060      	strne	r0, [r4, #4]
    2f30:	7fa0      	ldrb	r0, [r4, #30]
    2f32:	f8df 9204 	ldr.w	r9, [pc, #516]	; 3138 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    2f36:	b990      	cbnz	r0, 2f5e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    2f38:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    2f3c:	1a40      	subs	r0, r0, r1
    2f3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f42:	f44f 710c 	mov.w	r1, #560	; 0x230
    2f46:	f009 f9d7 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2f4a:	68e1      	ldr	r1, [r4, #12]
    2f4c:	4408      	add	r0, r1
    2f4e:	1a28      	subs	r0, r5, r0
    2f50:	0200      	lsls	r0, r0, #8
    2f52:	17c1      	asrs	r1, r0, #31
    2f54:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2f58:	1200      	asrs	r0, r0, #8
    2f5a:	0fc0      	lsrs	r0, r0, #31
    2f5c:	d012      	beq.n	2f84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    2f5e:	7e60      	ldrb	r0, [r4, #25]
    2f60:	b320      	cbz	r0, 2fac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2f62:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    2f66:	f88d 0000 	strb.w	r0, [sp]
    2f6a:	f89d 0000 	ldrb.w	r0, [sp]
    2f6e:	b1e8      	cbz	r0, 2fac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    2f70:	f000 fcce 	bl	3910 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2f74:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    2f78:	b1f0      	cbz	r0, 2fb8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    2f7a:	f240 31f5 	movw	r1, #1013	; 0x3f5
    2f7e:	2070      	movs	r0, #112	; 0x70
    2f80:	f001 fab6 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f84:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2f88:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
    2f8c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2f90:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    2f94:	6840      	ldr	r0, [r0, #4]
    2f96:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2f9a:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    2f9e:	2108      	movs	r1, #8
    2fa0:	4790      	blx	r2
    2fa2:	f240 31dd 	movw	r1, #989	; 0x3dd
    2fa6:	2070      	movs	r0, #112	; 0x70
    2fa8:	f001 faa2 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fac:	1ce8      	adds	r0, r5, #3
    2fae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fb2:	f000 fba5 	bl	3700 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2fb6:	e7dd      	b.n	2f74 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    2fb8:	2001      	movs	r0, #1
    2fba:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2fbe:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2fc2:	2820      	cmp	r0, #32
    2fc4:	d021      	beq.n	300a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    2fc6:	f894 802d 	ldrb.w	r8, [r4, #45]	; 0x2d
    2fca:	2020      	movs	r0, #32
    2fcc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2fd0:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2fd4:	2000      	movs	r0, #0
    2fd6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    2fda:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    2fde:	6020      	str	r0, [r4, #0]
    2fe0:	f000 ff14 	bl	3e0c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    2fe4:	7720      	strb	r0, [r4, #28]
    2fe6:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
    2fea:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    2fee:	1907      	adds	r7, r0, r4
    2ff0:	f897 0020 	ldrb.w	r0, [r7, #32]
    2ff4:	2820      	cmp	r0, #32
    2ff6:	d058      	beq.n	30aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    2ff8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ffc:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    3000:	f899 001a 	ldrb.w	r0, [r9, #26]
    3004:	2801      	cmp	r0, #1
    3006:	d005      	beq.n	3014 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    3008:	e04f      	b.n	30aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    300a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    300e:	2070      	movs	r0, #112	; 0x70
    3010:	f001 fa6e 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3014:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    3018:	aa01      	add	r2, sp, #4
    301a:	4669      	mov	r1, sp
    301c:	4658      	mov	r0, fp
    301e:	f000 f9df 	bl	33e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3022:	f000 feed 	bl	3e00 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    3026:	f000 f9bf 	bl	33a8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    302a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    302e:	2820      	cmp	r0, #32
    3030:	d004      	beq.n	303c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    3032:	68e0      	ldr	r0, [r4, #12]
    3034:	1d40      	adds	r0, r0, #5
    3036:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    303a:	e01d      	b.n	3078 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    303c:	f105 0a09 	add.w	sl, r5, #9
    3040:	f1bb 0f00 	cmp.w	fp, #0
    3044:	d016      	beq.n	3074 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    3046:	f001 f9db 	bl	4400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    304a:	b998      	cbnz	r0, 3074 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    304c:	f001 f8a6 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    3050:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    3054:	bf08      	it	eq
    3056:	200d      	moveq	r0, #13
    3058:	d00b      	beq.n	3072 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    305a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    305e:	3856      	subs	r0, #86	; 0x56
    3060:	bf08      	it	eq
    3062:	201c      	moveq	r0, #28
    3064:	d005      	beq.n	3072 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    3066:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    306a:	389f      	subs	r0, #159	; 0x9f
    306c:	bf14      	ite	ne
    306e:	2000      	movne	r0, #0
    3070:	2032      	moveq	r0, #50	; 0x32
    3072:	4482      	add	sl, r0
    3074:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    3078:	f8d9 2008 	ldr.w	r2, [r9, #8]
    307c:	1a81      	subs	r1, r0, r2
    307e:	0209      	lsls	r1, r1, #8
    3080:	17cb      	asrs	r3, r1, #31
    3082:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    3086:	1209      	asrs	r1, r1, #8
    3088:	2900      	cmp	r1, #0
    308a:	dc0e      	bgt.n	30aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    308c:	f109 0308 	add.w	r3, r9, #8
    3090:	4282      	cmp	r2, r0
    3092:	d202      	bcs.n	309a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    3094:	6899      	ldr	r1, [r3, #8]
    3096:	1e49      	subs	r1, r1, #1
    3098:	6099      	str	r1, [r3, #8]
    309a:	e9d3 2100 	ldrd	r2, r1, [r3]
    309e:	1a89      	subs	r1, r1, r2
    30a0:	6018      	str	r0, [r3, #0]
    30a2:	4408      	add	r0, r1
    30a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    30a8:	6058      	str	r0, [r3, #4]
    30aa:	4631      	mov	r1, r6
    30ac:	2001      	movs	r0, #1
    30ae:	f7fe fecf 	bl	1e50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>
    30b2:	ea5f 0900 	movs.w	r9, r0
    30b6:	d0f8      	beq.n	30aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    30b8:	4820      	ldr	r0, [pc, #128]	; (313c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    30ba:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    30be:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    30c2:	2802      	cmp	r0, #2
    30c4:	d104      	bne.n	30d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    30c6:	4632      	mov	r2, r6
    30c8:	4641      	mov	r1, r8
    30ca:	2006      	movs	r0, #6
    30cc:	f7fe fe8e 	bl	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    30d0:	20ff      	movs	r0, #255	; 0xff
    30d2:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    30d6:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    30da:	4e19      	ldr	r6, [pc, #100]	; (3140 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    30dc:	2820      	cmp	r0, #32
    30de:	bf1c      	itt	ne
    30e0:	7870      	ldrbne	r0, [r6, #1]
    30e2:	f001 fad9 	blne	4698 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    30e6:	7f20      	ldrb	r0, [r4, #28]
    30e8:	b120      	cbz	r0, 30f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    30ea:	f000 fe6b 	bl	3dc4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    30ee:	2000      	movs	r0, #0
    30f0:	7720      	strb	r0, [r4, #28]
    30f2:	7760      	strb	r0, [r4, #29]
    30f4:	f1b9 0f02 	cmp.w	r9, #2
    30f8:	d011      	beq.n	311e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    30fa:	f1b9 0f01 	cmp.w	r9, #1
    30fe:	bf1c      	itt	ne
    3100:	b003      	addne	sp, #12
    3102:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3106:	f04f 30ff 	mov.w	r0, #4294967295
    310a:	6871      	ldr	r1, [r6, #4]
    310c:	2900      	cmp	r1, #0
    310e:	bf04      	itt	eq
    3110:	b003      	addeq	sp, #12
    3112:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3116:	b003      	add	sp, #12
    3118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    311c:	4708      	bx	r1
    311e:	68a0      	ldr	r0, [r4, #8]
    3120:	1b40      	subs	r0, r0, r5
    3122:	f009 f8be 	bl	c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3126:	6871      	ldr	r1, [r6, #4]
    3128:	2900      	cmp	r1, #0
    312a:	d1f4      	bne.n	3116 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    312c:	b003      	add	sp, #12
    312e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3132:	0000      	.short	0x0000
    3134:	200011ac 	.word	0x200011ac
    3138:	20000dac 	.word	0x20000dac
    313c:	2000112c 	.word	0x2000112c
    3140:	20000038 	.word	0x20000038

00003144 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3144:	b570      	push	{r4, r5, r6, lr}
    3146:	4c42      	ldr	r4, [pc, #264]	; (3250 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    3148:	4605      	mov	r5, r0
    314a:	b082      	sub	sp, #8
    314c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3150:	2820      	cmp	r0, #32
    3152:	d008      	beq.n	3166 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    3154:	6860      	ldr	r0, [r4, #4]
    3156:	f1b0 3fff 	cmp.w	r0, #4294967295
    315a:	d009      	beq.n	3170 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    315c:	f640 21d9 	movw	r1, #2777	; 0xad9
    3160:	2070      	movs	r0, #112	; 0x70
    3162:	f001 f9c5 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3166:	f640 21d8 	movw	r1, #2776	; 0xad8
    316a:	2070      	movs	r0, #112	; 0x70
    316c:	f001 f9c0 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3170:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    3174:	4937      	ldr	r1, [pc, #220]	; (3254 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    3176:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    317a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    317e:	68b0      	ldr	r0, [r6, #8]
    3180:	f009 f88f 	bl	c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3184:	4602      	mov	r2, r0
    3186:	8af0      	ldrh	r0, [r6, #22]
    3188:	7d31      	ldrb	r1, [r6, #20]
    318a:	4b33      	ldr	r3, [pc, #204]	; (3258 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    318c:	4408      	add	r0, r1
    318e:	1c40      	adds	r0, r0, #1
    3190:	1811      	adds	r1, r2, r0
    3192:	429a      	cmp	r2, r3
    3194:	d817      	bhi.n	31c6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    3196:	4a31      	ldr	r2, [pc, #196]	; (325c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    3198:	4290      	cmp	r0, r2
    319a:	dc1b      	bgt.n	31d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    319c:	f1c2 0c00 	rsb	ip, r2, #0
    31a0:	4560      	cmp	r0, ip
    31a2:	db1e      	blt.n	31e2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    31a4:	0056      	lsls	r6, r2, #1
    31a6:	428e      	cmp	r6, r1
    31a8:	bfdc      	itt	le
    31aa:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    31ae:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    31b2:	dd05      	ble.n	31c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    31b4:	2900      	cmp	r1, #0
    31b6:	bfbc      	itt	lt
    31b8:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    31bc:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    31c0:	1948      	adds	r0, r1, r5
    31c2:	4299      	cmp	r1, r3
    31c4:	d904      	bls.n	31d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    31c6:	f240 519e 	movw	r1, #1438	; 0x59e
    31ca:	2070      	movs	r0, #112	; 0x70
    31cc:	f001 f990 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31d0:	4295      	cmp	r5, r2
    31d2:	dd04      	ble.n	31de <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    31d4:	f240 519f 	movw	r1, #1439	; 0x59f
    31d8:	2070      	movs	r0, #112	; 0x70
    31da:	f001 f989 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31de:	4565      	cmp	r5, ip
    31e0:	da04      	bge.n	31ec <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    31e2:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    31e6:	2070      	movs	r0, #112	; 0x70
    31e8:	f001 f982 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31ec:	4286      	cmp	r6, r0
    31ee:	bfdc      	itt	le
    31f0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    31f4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    31f8:	dd05      	ble.n	3206 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    31fa:	2800      	cmp	r0, #0
    31fc:	bfbc      	itt	lt
    31fe:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    3202:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    3206:	aa01      	add	r2, sp, #4
    3208:	4669      	mov	r1, sp
    320a:	f000 f8e9 	bl	33e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    320e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3212:	280f      	cmp	r0, #15
    3214:	bf8c      	ite	hi
    3216:	2001      	movhi	r0, #1
    3218:	2000      	movls	r0, #0
    321a:	9900      	ldr	r1, [sp, #0]
    321c:	4408      	add	r0, r1
    321e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3222:	6061      	str	r1, [r4, #4]
    3224:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    3228:	f88d 0000 	strb.w	r0, [sp]
    322c:	f89d 0000 	ldrb.w	r0, [sp]
    3230:	2800      	cmp	r0, #0
    3232:	bf04      	itt	eq
    3234:	b002      	addeq	sp, #8
    3236:	bd70      	popeq	{r4, r5, r6, pc}
    3238:	2005      	movs	r0, #5
    323a:	f000 fbe7 	bl	3a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    323e:	2800      	cmp	r0, #0
    3240:	bf1c      	itt	ne
    3242:	b002      	addne	sp, #8
    3244:	bd70      	popne	{r4, r5, r6, pc}
    3246:	f44f 612e 	mov.w	r1, #2784	; 0xae0
    324a:	2070      	movs	r0, #112	; 0x70
    324c:	f001 f950 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3250:	200011ac 	.word	0x200011ac
    3254:	20000dac 	.word	0x20000dac
    3258:	1e847fff 	.word	0x1e847fff
    325c:	0f424000 	.word	0x0f424000

00003260 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3260:	b570      	push	{r4, r5, r6, lr}
    3262:	4c1c      	ldr	r4, [pc, #112]	; (32d4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    3264:	2120      	movs	r1, #32
    3266:	f884 1020 	strb.w	r1, [r4, #32]
    326a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    326e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3272:	2000      	movs	r0, #0
    3274:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3278:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
    327c:	1e42      	subs	r2, r0, #1
    327e:	e9c4 0200 	strd	r0, r2, [r4]
    3282:	77a0      	strb	r0, [r4, #30]
    3284:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    3288:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    328c:	7720      	strb	r0, [r4, #28]
    328e:	7760      	strb	r0, [r4, #29]
    3290:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
    3294:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    3298:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    329c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    32a0:	2210      	movs	r2, #16
    32a2:	7088      	strb	r0, [r1, #2]
    32a4:	f801 0f04 	strb.w	r0, [r1, #4]!
    32a8:	1e52      	subs	r2, r2, #1
    32aa:	d1fa      	bne.n	32a2 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x42>
    32ac:	f000 fdb8 	bl	3e20 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    32b0:	4d09      	ldr	r5, [pc, #36]	; (32d8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    32b2:	2601      	movs	r6, #1
    32b4:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    32b8:	20ff      	movs	r0, #255	; 0xff
    32ba:	7028      	strb	r0, [r5, #0]
    32bc:	4807      	ldr	r0, [pc, #28]	; (32dc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    32be:	f001 f9cd 	bl	465c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    32c2:	7068      	strb	r0, [r5, #1]
    32c4:	f001 fa38 	bl	4738 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    32c8:	60a8      	str	r0, [r5, #8]
    32ca:	f000 fd33 	bl	3d34 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    32ce:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
    32d2:	bd70      	pop	{r4, r5, r6, pc}
    32d4:	200011ac 	.word	0x200011ac
    32d8:	20000038 	.word	0x20000038
    32dc:	00001d15 	.word	0x00001d15

000032e0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    32e0:	b500      	push	{lr}
    32e2:	b083      	sub	sp, #12
    32e4:	4668      	mov	r0, sp
    32e6:	f000 f9eb 	bl	36c0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    32ea:	9800      	ldr	r0, [sp, #0]
    32ec:	f008 ffd9 	bl	c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    32f0:	9a01      	ldr	r2, [sp, #4]
    32f2:	4b03      	ldr	r3, [pc, #12]	; (3300 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    32f4:	2100      	movs	r1, #0
    32f6:	fbe2 0103 	umlal	r0, r1, r2, r3
    32fa:	b003      	add	sp, #12
    32fc:	bd00      	pop	{pc}
    32fe:	0000      	.short	0x0000
    3300:	1e848000 	.word	0x1e848000

00003304 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    3304:	b570      	push	{r4, r5, r6, lr}
    3306:	4606      	mov	r6, r0
    3308:	b082      	sub	sp, #8
    330a:	461d      	mov	r5, r3
    330c:	4610      	mov	r0, r2
    330e:	f008 ffc8 	bl	c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3312:	4604      	mov	r4, r0
    3314:	4668      	mov	r0, sp
    3316:	f000 f9d3 	bl	36c0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    331a:	4920      	ldr	r1, [pc, #128]	; (339c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    331c:	9801      	ldr	r0, [sp, #4]
    331e:	fba0 0201 	umull	r0, r2, r0, r1
    3322:	1a30      	subs	r0, r6, r0
    3324:	bf44      	itt	mi
    3326:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    332a:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    332e:	d504      	bpl.n	333a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    3330:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    3334:	2070      	movs	r0, #112	; 0x70
    3336:	f001 f8db 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    333a:	4288      	cmp	r0, r1
    333c:	db04      	blt.n	3348 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    333e:	f640 4101 	movw	r1, #3073	; 0xc01
    3342:	2070      	movs	r0, #112	; 0x70
    3344:	f001 f8d4 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3348:	4a15      	ldr	r2, [pc, #84]	; (33a0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    334a:	1a21      	subs	r1, r4, r0
    334c:	2300      	movs	r3, #0
    334e:	1a8a      	subs	r2, r1, r2
    3350:	f173 0200 	sbcs.w	r2, r3, #0
    3354:	d318      	bcc.n	3388 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3356:	f8df c048 	ldr.w	ip, [pc, #72]	; 33a0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    335a:	1b02      	subs	r2, r0, r4
    335c:	ebb2 0c0c 	subs.w	ip, r2, ip
    3360:	f173 0300 	sbcs.w	r3, r3, #0
    3364:	d310      	bcc.n	3388 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3366:	4b0f      	ldr	r3, [pc, #60]	; (33a4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    3368:	428b      	cmp	r3, r1
    336a:	bf3e      	ittt	cc
    336c:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    3370:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    3374:	1901      	addcc	r1, r0, r4
    3376:	d307      	bcc.n	3388 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    3378:	4293      	cmp	r3, r2
    337a:	d20a      	bcs.n	3392 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    337c:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    3380:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    3384:	4408      	add	r0, r1
    3386:	4241      	negs	r1, r0
    3388:	f101 000f 	add.w	r0, r1, #15
    338c:	b002      	add	sp, #8
    338e:	1a28      	subs	r0, r5, r0
    3390:	bd70      	pop	{r4, r5, r6, pc}
    3392:	f640 21fa 	movw	r1, #2810	; 0xafa
    3396:	2070      	movs	r0, #112	; 0x70
    3398:	f001 f8aa 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    339c:	1e848000 	.word	0x1e848000
    33a0:	0f424000 	.word	0x0f424000
    33a4:	1e847fff 	.word	0x1e847fff

000033a8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    33a8:	0b41      	lsrs	r1, r0, #13
    33aa:	f248 6237 	movw	r2, #34359	; 0x8637
    33ae:	4351      	muls	r1, r2
    33b0:	0c0a      	lsrs	r2, r1, #16
    33b2:	4b09      	ldr	r3, [pc, #36]	; (33d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    33b4:	0251      	lsls	r1, r2, #9
    33b6:	fb02 0203 	mla	r2, r2, r3, r0
    33ba:	4808      	ldr	r0, [pc, #32]	; (33dc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    33bc:	4350      	muls	r0, r2
    33be:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    33c2:	306e      	adds	r0, #110	; 0x6e
    33c4:	0d40      	lsrs	r0, r0, #21
    33c6:	425b      	negs	r3, r3
    33c8:	fb10 f303 	smulbb	r3, r0, r3
    33cc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    33d0:	bf88      	it	hi
    33d2:	1c49      	addhi	r1, r1, #1
    33d4:	4408      	add	r0, r1
    33d6:	4770      	bx	lr
    33d8:	ffffc2f7 	.word	0xffffc2f7
    33dc:	00010c6f 	.word	0x00010c6f

000033e0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    33e0:	0b43      	lsrs	r3, r0, #13
    33e2:	f248 6c37 	movw	ip, #34359	; 0x8637
    33e6:	fb03 f30c 	mul.w	r3, r3, ip
    33ea:	b430      	push	{r4, r5}
    33ec:	0c1b      	lsrs	r3, r3, #16
    33ee:	f8df c044 	ldr.w	ip, [pc, #68]	; 3434 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    33f2:	025c      	lsls	r4, r3, #9
    33f4:	fb03 030c 	mla	r3, r3, ip, r0
    33f8:	480f      	ldr	r0, [pc, #60]	; (3438 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    33fa:	4358      	muls	r0, r3
    33fc:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3400:	eb04 000c 	add.w	r0, r4, ip
    3404:	f643 5409 	movw	r4, #15625	; 0x3d09
    3408:	fb1c f404 	smulbb	r4, ip, r4
    340c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3410:	f643 5508 	movw	r5, #15624	; 0x3d08
    3414:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3418:	442c      	add	r4, r5
    341a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    341e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3422:	bf84      	itt	hi
    3424:	f04f 0c00 	movhi.w	ip, #0
    3428:	1c40      	addhi	r0, r0, #1
    342a:	6008      	str	r0, [r1, #0]
    342c:	f882 c000 	strb.w	ip, [r2]
    3430:	bc30      	pop	{r4, r5}
    3432:	4770      	bx	lr
    3434:	ffffc2f7 	.word	0xffffc2f7
    3438:	00010c6f 	.word	0x00010c6f

0000343c <MPSL_IRQ_RTC0_Handler>:
    343c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3440:	4d3b      	ldr	r5, [pc, #236]	; (3530 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3442:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3446:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3534 <MPSL_IRQ_RTC0_Handler+0xf8>
    344a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    344e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    3452:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3456:	f04f 0400 	mov.w	r4, #0
    345a:	d019      	beq.n	3490 <MPSL_IRQ_RTC0_Handler+0x54>
    345c:	4836      	ldr	r0, [pc, #216]	; (3538 <MPSL_IRQ_RTC0_Handler+0xfc>)
    345e:	6800      	ldr	r0, [r0, #0]
    3460:	b1b0      	cbz	r0, 3490 <MPSL_IRQ_RTC0_Handler+0x54>
    3462:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    3466:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    346a:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    346e:	f8d8 1000 	ldr.w	r1, [r8]
    3472:	1a40      	subs	r0, r0, r1
    3474:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3478:	2802      	cmp	r0, #2
    347a:	d302      	bcc.n	3482 <MPSL_IRQ_RTC0_Handler+0x46>
    347c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3480:	d906      	bls.n	3490 <MPSL_IRQ_RTC0_Handler+0x54>
    3482:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3486:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    348a:	2004      	movs	r0, #4
    348c:	f7fe fe9c 	bl	21c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3490:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3494:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3498:	d01a      	beq.n	34d0 <MPSL_IRQ_RTC0_Handler+0x94>
    349a:	4828      	ldr	r0, [pc, #160]	; (353c <MPSL_IRQ_RTC0_Handler+0x100>)
    349c:	6800      	ldr	r0, [r0, #0]
    349e:	b1b8      	cbz	r0, 34d0 <MPSL_IRQ_RTC0_Handler+0x94>
    34a0:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    34a4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    34a8:	4825      	ldr	r0, [pc, #148]	; (3540 <MPSL_IRQ_RTC0_Handler+0x104>)
    34aa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    34ae:	f8d8 1000 	ldr.w	r1, [r8]
    34b2:	1a40      	subs	r0, r0, r1
    34b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34b8:	2802      	cmp	r0, #2
    34ba:	d302      	bcc.n	34c2 <MPSL_IRQ_RTC0_Handler+0x86>
    34bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    34c0:	d906      	bls.n	34d0 <MPSL_IRQ_RTC0_Handler+0x94>
    34c2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    34c6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    34ca:	2005      	movs	r0, #5
    34cc:	f7fe fe7c 	bl	21c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    34d0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    34d4:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    34d8:	d01a      	beq.n	3510 <MPSL_IRQ_RTC0_Handler+0xd4>
    34da:	481a      	ldr	r0, [pc, #104]	; (3544 <MPSL_IRQ_RTC0_Handler+0x108>)
    34dc:	6800      	ldr	r0, [r0, #0]
    34de:	b1b8      	cbz	r0, 3510 <MPSL_IRQ_RTC0_Handler+0xd4>
    34e0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    34e4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    34e8:	4817      	ldr	r0, [pc, #92]	; (3548 <MPSL_IRQ_RTC0_Handler+0x10c>)
    34ea:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    34ee:	f8d8 1000 	ldr.w	r1, [r8]
    34f2:	1a40      	subs	r0, r0, r1
    34f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34f8:	2802      	cmp	r0, #2
    34fa:	d302      	bcc.n	3502 <MPSL_IRQ_RTC0_Handler+0xc6>
    34fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3500:	d906      	bls.n	3510 <MPSL_IRQ_RTC0_Handler+0xd4>
    3502:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3506:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    350a:	2006      	movs	r0, #6
    350c:	f7fe fe5c 	bl	21c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3510:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    3514:	2800      	cmp	r0, #0
    3516:	bf08      	it	eq
    3518:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    351c:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    3520:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3524:	4809      	ldr	r0, [pc, #36]	; (354c <MPSL_IRQ_RTC0_Handler+0x110>)
    3526:	68c1      	ldr	r1, [r0, #12]
    3528:	1c49      	adds	r1, r1, #1
    352a:	60c1      	str	r1, [r0, #12]
    352c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3530:	4000b000 	.word	0x4000b000
    3534:	4000b504 	.word	0x4000b504
    3538:	4000b140 	.word	0x4000b140
    353c:	4000b144 	.word	0x4000b144
    3540:	4000b004 	.word	0x4000b004
    3544:	4000b148 	.word	0x4000b148
    3548:	4000b008 	.word	0x4000b008
    354c:	20000044 	.word	0x20000044

00003550 <MPSL_IRQ_TIMER0_Handler>:
    3550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3554:	4d38      	ldr	r5, [pc, #224]	; (3638 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3556:	7828      	ldrb	r0, [r5, #0]
    3558:	2804      	cmp	r0, #4
    355a:	d068      	beq.n	362e <MPSL_IRQ_TIMER0_Handler+0xde>
    355c:	1ca8      	adds	r0, r5, #2
    355e:	2201      	movs	r2, #1
    3560:	7801      	ldrb	r1, [r0, #0]
    3562:	b159      	cbz	r1, 357c <MPSL_IRQ_TIMER0_Handler+0x2c>
    3564:	2901      	cmp	r1, #1
    3566:	bf08      	it	eq
    3568:	706a      	strbeq	r2, [r5, #1]
    356a:	d002      	beq.n	3572 <MPSL_IRQ_TIMER0_Handler+0x22>
    356c:	7869      	ldrb	r1, [r5, #1]
    356e:	2900      	cmp	r1, #0
    3570:	d058      	beq.n	3624 <MPSL_IRQ_TIMER0_Handler+0xd4>
    3572:	2102      	movs	r1, #2
    3574:	7001      	strb	r1, [r0, #0]
    3576:	7840      	ldrb	r0, [r0, #1]
    3578:	f000 fafe 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    357c:	4c2f      	ldr	r4, [pc, #188]	; (363c <MPSL_IRQ_TIMER0_Handler+0xec>)
    357e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3582:	f04f 0800 	mov.w	r8, #0
    3586:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    358a:	f44f 7780 	mov.w	r7, #256	; 0x100
    358e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    3592:	d00a      	beq.n	35aa <MPSL_IRQ_TIMER0_Handler+0x5a>
    3594:	482a      	ldr	r0, [pc, #168]	; (3640 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3596:	6800      	ldr	r0, [r0, #0]
    3598:	b138      	cbz	r0, 35aa <MPSL_IRQ_TIMER0_Handler+0x5a>
    359a:	2003      	movs	r0, #3
    359c:	f000 faec 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    35a0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    35a4:	2003      	movs	r0, #3
    35a6:	f7fe fe0f 	bl	21c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    35aa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    35ae:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    35b2:	d00a      	beq.n	35ca <MPSL_IRQ_TIMER0_Handler+0x7a>
    35b4:	4823      	ldr	r0, [pc, #140]	; (3644 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    35b6:	6800      	ldr	r0, [r0, #0]
    35b8:	b138      	cbz	r0, 35ca <MPSL_IRQ_TIMER0_Handler+0x7a>
    35ba:	2002      	movs	r0, #2
    35bc:	f000 fadc 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    35c0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    35c4:	2002      	movs	r0, #2
    35c6:	f7fe fdff 	bl	21c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    35ca:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    35ce:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    35d2:	d00a      	beq.n	35ea <MPSL_IRQ_TIMER0_Handler+0x9a>
    35d4:	481c      	ldr	r0, [pc, #112]	; (3648 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    35d6:	6800      	ldr	r0, [r0, #0]
    35d8:	b138      	cbz	r0, 35ea <MPSL_IRQ_TIMER0_Handler+0x9a>
    35da:	2001      	movs	r0, #1
    35dc:	f000 facc 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    35e0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    35e4:	2001      	movs	r0, #1
    35e6:	f7fe fdef 	bl	21c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    35ea:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    35ee:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    35f2:	bf08      	it	eq
    35f4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    35f8:	4814      	ldr	r0, [pc, #80]	; (364c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    35fa:	6800      	ldr	r0, [r0, #0]
    35fc:	2800      	cmp	r0, #0
    35fe:	bf08      	it	eq
    3600:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3604:	2000      	movs	r0, #0
    3606:	f000 fab7 	bl	3b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    360a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    360e:	2004      	movs	r0, #4
    3610:	7028      	strb	r0, [r5, #0]
    3612:	f8c5 8004 	str.w	r8, [r5, #4]
    3616:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    361a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    361e:	2000      	movs	r0, #0
    3620:	f7fe bdd2 	b.w	21c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3624:	f240 41a3 	movw	r1, #1187	; 0x4a3
    3628:	206c      	movs	r0, #108	; 0x6c
    362a:	f000 ff61 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    362e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3632:	2007      	movs	r0, #7
    3634:	f7fe bdc8 	b.w	21c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3638:	20000044 	.word	0x20000044
    363c:	40008000 	.word	0x40008000
    3640:	4000814c 	.word	0x4000814c
    3644:	40008148 	.word	0x40008148
    3648:	40008144 	.word	0x40008144
    364c:	40008140 	.word	0x40008140
    3650:	2201      	movs	r2, #1
    3652:	0211      	lsls	r1, r2, #8
    3654:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3658:	2000      	movs	r0, #0
    365a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    365e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    3662:	f3bf 8f4f 	dsb	sy
    3666:	f3bf 8f6f 	isb	sy
    366a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    366e:	490e      	ldr	r1, [pc, #56]	; (36a8 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3670:	f841 2f04 	str.w	r2, [r1, #4]!
    3674:	1e43      	subs	r3, r0, #1
    3676:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    367a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    367e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3682:	4b0a      	ldr	r3, [pc, #40]	; (36ac <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3684:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3688:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    368c:	1d1b      	adds	r3, r3, #4
    368e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3692:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3696:	1d1b      	adds	r3, r3, #4
    3698:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    369c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    36a0:	60ca      	str	r2, [r1, #12]
    36a2:	4903      	ldr	r1, [pc, #12]	; (36b0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    36a4:	7048      	strb	r0, [r1, #1]
    36a6:	4770      	bx	lr
    36a8:	40008000 	.word	0x40008000
    36ac:	40008004 	.word	0x40008004
    36b0:	20000044 	.word	0x20000044

000036b4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    36b4:	4801      	ldr	r0, [pc, #4]	; (36bc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    36b6:	6800      	ldr	r0, [r0, #0]
    36b8:	4770      	bx	lr
    36ba:	0000      	.short	0x0000
    36bc:	4000b504 	.word	0x4000b504

000036c0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    36c0:	b430      	push	{r4, r5}
    36c2:	f3ef 8c10 	mrs	ip, PRIMASK
    36c6:	b672      	cpsid	i
    36c8:	2500      	movs	r5, #0
    36ca:	4b0b      	ldr	r3, [pc, #44]	; (36f8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    36cc:	4a0b      	ldr	r2, [pc, #44]	; (36fc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    36ce:	bf00      	nop
    36d0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    36d4:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    36d8:	b12c      	cbz	r4, 36e6 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    36da:	68d1      	ldr	r1, [r2, #12]
    36dc:	1c49      	adds	r1, r1, #1
    36de:	60d1      	str	r1, [r2, #12]
    36e0:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    36e4:	e7f4      	b.n	36d0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    36e6:	68d2      	ldr	r2, [r2, #12]
    36e8:	f1bc 0f00 	cmp.w	ip, #0
    36ec:	d100      	bne.n	36f0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    36ee:	b662      	cpsie	i
    36f0:	e9c0 1200 	strd	r1, r2, [r0]
    36f4:	bc30      	pop	{r4, r5}
    36f6:	4770      	bx	lr
    36f8:	4000b000 	.word	0x4000b000
    36fc:	20000044 	.word	0x20000044

00003700 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3704:	4e46      	ldr	r6, [pc, #280]	; (3820 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    3706:	4605      	mov	r5, r0
    3708:	1eb7      	subs	r7, r6, #2
    370a:	7833      	ldrb	r3, [r6, #0]
    370c:	68b9      	ldr	r1, [r7, #8]
    370e:	2b01      	cmp	r3, #1
    3710:	bf04      	itt	eq
    3712:	42a9      	cmpeq	r1, r5
    3714:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3718:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    371c:	4a41      	ldr	r2, [pc, #260]	; (3824 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    371e:	6010      	str	r0, [r2, #0]
    3720:	4a42      	ldr	r2, [pc, #264]	; (382c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    3722:	4841      	ldr	r0, [pc, #260]	; (3828 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3724:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3728:	f102 0c04 	add.w	ip, r2, #4
    372c:	f04f 0400 	mov.w	r4, #0
    3730:	2b00      	cmp	r3, #0
    3732:	d062      	beq.n	37fa <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    3734:	483e      	ldr	r0, [pc, #248]	; (3830 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3736:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    373a:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    373e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3742:	bf00      	nop
    3744:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
    3748:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    374c:	f04f 0801 	mov.w	r8, #1
    3750:	2800      	cmp	r0, #0
    3752:	bf01      	itttt	eq
    3754:	f8d2 0104 	ldreq.w	r0, [r2, #260]	; 0x104
    3758:	2800      	cmpeq	r0, #0
    375a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    375e:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    3762:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3766:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    376a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    376e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3772:	4830      	ldr	r0, [pc, #192]	; (3834 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3774:	f8d0 c000 	ldr.w	ip, [r0]
    3778:	eba5 0c0c 	sub.w	ip, r5, ip
    377c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3780:	f1bc 0f02 	cmp.w	ip, #2
    3784:	d344      	bcc.n	3810 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    3786:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    378a:	d841      	bhi.n	3810 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>
    378c:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3790:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3794:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3798:	b12b      	cbz	r3, 37a6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa6>
    379a:	6802      	ldr	r2, [r0, #0]
    379c:	1a8a      	subs	r2, r1, r2
    379e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    37a2:	2a02      	cmp	r2, #2
    37a4:	d3f9      	bcc.n	379a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9a>
    37a6:	f8c7 8004 	str.w	r8, [r7, #4]
    37aa:	703c      	strb	r4, [r7, #0]
    37ac:	f7ff ff50 	bl	3650 <MPSL_IRQ_TIMER0_Handler+0x100>
    37b0:	4821      	ldr	r0, [pc, #132]	; (3838 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    37b2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    37b6:	f364 0101 	bfi	r1, r4, #0, #2
    37ba:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    37be:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    37c2:	2102      	movs	r1, #2
    37c4:	f361 0201 	bfi	r2, r1, #0, #2
    37c8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    37cc:	2104      	movs	r1, #4
    37ce:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    37d2:	f8c0 800c 	str.w	r8, [r0, #12]
    37d6:	6879      	ldr	r1, [r7, #4]
    37d8:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    37dc:	1580      	asrs	r0, r0, #22
    37de:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    37e2:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    37e6:	4915      	ldr	r1, [pc, #84]	; (383c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    37e8:	05c0      	lsls	r0, r0, #23
    37ea:	6008      	str	r0, [r1, #0]
    37ec:	2004      	movs	r0, #4
    37ee:	60bd      	str	r5, [r7, #8]
    37f0:	7070      	strb	r0, [r6, #1]
    37f2:	f886 8000 	strb.w	r8, [r6]
    37f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37fa:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    37fe:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    3802:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3806:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    380a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    380e:	e799      	b.n	3744 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x44>
    3810:	2000      	movs	r0, #0
    3812:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3816:	f240 2197 	movw	r1, #663	; 0x297
    381a:	206c      	movs	r0, #108	; 0x6c
    381c:	f000 fe68 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3820:	20000046 	.word	0x20000046
    3824:	4001f508 	.word	0x4001f508
    3828:	fffbfffd 	.word	0xfffbfffd
    382c:	4000b000 	.word	0x4000b000
    3830:	fffafffd 	.word	0xfffafffd
    3834:	4000b504 	.word	0x4000b504
    3838:	40008000 	.word	0x40008000
    383c:	4001f504 	.word	0x4001f504

00003840 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3840:	b570      	push	{r4, r5, r6, lr}
    3842:	4c2a      	ldr	r4, [pc, #168]	; (38ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    3844:	68a1      	ldr	r1, [r4, #8]
    3846:	4281      	cmp	r1, r0
    3848:	bf14      	ite	ne
    384a:	2201      	movne	r2, #1
    384c:	2200      	moveq	r2, #0
    384e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 38f0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    3852:	f89c 5000 	ldrb.w	r5, [ip]
    3856:	2d02      	cmp	r5, #2
    3858:	d002      	beq.n	3860 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    385a:	2a00      	cmp	r2, #0
    385c:	d034      	beq.n	38c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    385e:	e002      	b.n	3866 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3860:	2a00      	cmp	r2, #0
    3862:	bf08      	it	eq
    3864:	bd70      	popeq	{r4, r5, r6, pc}
    3866:	7862      	ldrb	r2, [r4, #1]
    3868:	b39a      	cbz	r2, 38d2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    386a:	4b22      	ldr	r3, [pc, #136]	; (38f4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    386c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3870:	601a      	str	r2, [r3, #0]
    3872:	4b21      	ldr	r3, [pc, #132]	; (38f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3874:	1392      	asrs	r2, r2, #14
    3876:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    387a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    387e:	2200      	movs	r2, #0
    3880:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3884:	4a1d      	ldr	r2, [pc, #116]	; (38fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3886:	6816      	ldr	r6, [r2, #0]
    3888:	1b86      	subs	r6, r0, r6
    388a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    388e:	2e02      	cmp	r6, #2
    3890:	d324      	bcc.n	38dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3892:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3896:	d821      	bhi.n	38dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3898:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    389c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    38a0:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    38a4:	b12d      	cbz	r5, 38b2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    38a6:	6813      	ldr	r3, [r2, #0]
    38a8:	1acb      	subs	r3, r1, r3
    38aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    38ae:	2b02      	cmp	r3, #2
    38b0:	d3f9      	bcc.n	38a6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    38b2:	4b13      	ldr	r3, [pc, #76]	; (3900 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    38b4:	2102      	movs	r1, #2
    38b6:	074a      	lsls	r2, r1, #29
    38b8:	601a      	str	r2, [r3, #0]
    38ba:	60a0      	str	r0, [r4, #8]
    38bc:	2004      	movs	r0, #4
    38be:	f88c 0001 	strb.w	r0, [ip, #1]
    38c2:	f88c 1000 	strb.w	r1, [ip]
    38c6:	bd70      	pop	{r4, r5, r6, pc}
    38c8:	f240 21a5 	movw	r1, #677	; 0x2a5
    38cc:	206c      	movs	r0, #108	; 0x6c
    38ce:	f000 fe0f 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38d2:	f240 21a9 	movw	r1, #681	; 0x2a9
    38d6:	206c      	movs	r0, #108	; 0x6c
    38d8:	f000 fe0a 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38dc:	2000      	movs	r0, #0
    38de:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    38e2:	f240 21b5 	movw	r1, #693	; 0x2b5
    38e6:	206c      	movs	r0, #108	; 0x6c
    38e8:	f000 fe02 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38ec:	20000044 	.word	0x20000044
    38f0:	20000046 	.word	0x20000046
    38f4:	4001f508 	.word	0x4001f508
    38f8:	4000b000 	.word	0x4000b000
    38fc:	4000b504 	.word	0x4000b504
    3900:	4001f504 	.word	0x4001f504

00003904 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3904:	4801      	ldr	r0, [pc, #4]	; (390c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3906:	6880      	ldr	r0, [r0, #8]
    3908:	4770      	bx	lr
    390a:	0000      	.short	0x0000
    390c:	20000044 	.word	0x20000044

00003910 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3914:	4836      	ldr	r0, [pc, #216]	; (39f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3916:	4a35      	ldr	r2, [pc, #212]	; (39ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    3918:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    391c:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 39f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    3920:	1d03      	adds	r3, r0, #4
    3922:	2100      	movs	r1, #0
    3924:	f89c 4000 	ldrb.w	r4, [ip]
    3928:	b184      	cbz	r4, 394c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    392a:	4a33      	ldr	r2, [pc, #204]	; (39f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    392c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3930:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3934:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3938:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    393c:	2301      	movs	r3, #1
    393e:	2a00      	cmp	r2, #0
    3940:	bf04      	itt	eq
    3942:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3946:	2800      	cmpeq	r0, #0
    3948:	d111      	bne.n	396e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    394a:	e00a      	b.n	3962 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    394c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3950:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3954:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3958:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    395c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3960:	e7ea      	b.n	3938 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3962:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3966:	f44f 6000 	mov.w	r0, #2048	; 0x800
    396a:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    396e:	2c02      	cmp	r4, #2
    3970:	d004      	beq.n	397c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    3972:	f240 21c1 	movw	r1, #705	; 0x2c1
    3976:	206c      	movs	r0, #108	; 0x6c
    3978:	f000 fdba 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    397c:	4e1f      	ldr	r6, [pc, #124]	; (39fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    397e:	6830      	ldr	r0, [r6, #0]
    3980:	4c1f      	ldr	r4, [pc, #124]	; (3a00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3982:	1cc0      	adds	r0, r0, #3
    3984:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3988:	68a2      	ldr	r2, [r4, #8]
    398a:	4d1e      	ldr	r5, [pc, #120]	; (3a04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    398c:	4290      	cmp	r0, r2
    398e:	d00b      	beq.n	39a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    3990:	6837      	ldr	r7, [r6, #0]
    3992:	1bd7      	subs	r7, r2, r7
    3994:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3998:	2f04      	cmp	r7, #4
    399a:	d305      	bcc.n	39a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    399c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    39a0:	d802      	bhi.n	39a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    39a2:	f7ff fead 	bl	3700 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    39a6:	e01b      	b.n	39e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    39a8:	6830      	ldr	r0, [r6, #0]
    39aa:	1a10      	subs	r0, r2, r0
    39ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    39b0:	2802      	cmp	r0, #2
    39b2:	d313      	bcc.n	39dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    39b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    39b8:	d810      	bhi.n	39dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    39ba:	4a13      	ldr	r2, [pc, #76]	; (3a08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    39bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    39c0:	6010      	str	r0, [r2, #0]
    39c2:	6063      	str	r3, [r4, #4]
    39c4:	7021      	strb	r1, [r4, #0]
    39c6:	606b      	str	r3, [r5, #4]
    39c8:	60eb      	str	r3, [r5, #12]
    39ca:	0040      	lsls	r0, r0, #1
    39cc:	1f11      	subs	r1, r2, #4
    39ce:	6008      	str	r0, [r1, #0]
    39d0:	2004      	movs	r0, #4
    39d2:	f88c 0001 	strb.w	r0, [ip, #1]
    39d6:	f88c 3000 	strb.w	r3, [ip]
    39da:	e001      	b.n	39e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    39dc:	6063      	str	r3, [r4, #4]
    39de:	7021      	strb	r1, [r4, #0]
    39e0:	6860      	ldr	r0, [r4, #4]
    39e2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    39e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39ea:	0000      	.short	0x0000
    39ec:	fffbfffd 	.word	0xfffbfffd
    39f0:	4000b000 	.word	0x4000b000
    39f4:	20000046 	.word	0x20000046
    39f8:	fffafffd 	.word	0xfffafffd
    39fc:	4000b504 	.word	0x4000b504
    3a00:	20000044 	.word	0x20000044
    3a04:	40008000 	.word	0x40008000
    3a08:	4001f508 	.word	0x4001f508

00003a0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a10:	4a54      	ldr	r2, [pc, #336]	; (3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>)
    3a12:	2500      	movs	r5, #0
    3a14:	2401      	movs	r4, #1
    3a16:	f892 c000 	ldrb.w	ip, [r2]
    3a1a:	7853      	ldrb	r3, [r2, #1]
    3a1c:	f44f 76a0 	mov.w	r6, #320	; 0x140
    3a20:	2807      	cmp	r0, #7
    3a22:	d27d      	bcs.n	3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
    3a24:	e8df f000 	tbb	[pc, r0]
    3a28:	04040404 	.word	0x04040404
    3a2c:	00585858 	.word	0x00585858
    3a30:	4a4d      	ldr	r2, [pc, #308]	; (3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>)
    3a32:	6897      	ldr	r7, [r2, #8]
    3a34:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    3a38:	bf04      	itt	eq
    3a3a:	7852      	ldrbeq	r2, [r2, #1]
    3a3c:	2a00      	cmpeq	r2, #0
    3a3e:	d003      	beq.n	3a48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3a40:	f1bc 0f02 	cmp.w	ip, #2
    3a44:	d005      	beq.n	3a52 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3a46:	e026      	b.n	3a96 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3a48:	f240 3151 	movw	r1, #849	; 0x351
    3a4c:	206c      	movs	r0, #108	; 0x6c
    3a4e:	f000 fd4f 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a52:	1f1a      	subs	r2, r3, #4
    3a54:	b2d2      	uxtb	r2, r2
    3a56:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    3a5a:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    3a5e:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    3a62:	2200      	movs	r2, #0
    3a64:	f1bc 0f01 	cmp.w	ip, #1
    3a68:	d003      	beq.n	3a72 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    3a6a:	f1bc 0f02 	cmp.w	ip, #2
    3a6e:	d008      	beq.n	3a82 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    3a70:	e00e      	b.n	3a90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3a72:	2b04      	cmp	r3, #4
    3a74:	bf24      	itt	cs
    3a76:	6837      	ldrcs	r7, [r6, #0]
    3a78:	2f00      	cmpcs	r7, #0
    3a7a:	bf08      	it	eq
    3a7c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    3a80:	e006      	b.n	3a90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    3a82:	2b04      	cmp	r3, #4
    3a84:	bf24      	itt	cs
    3a86:	6837      	ldrcs	r7, [r6, #0]
    3a88:	2f00      	cmpcs	r7, #0
    3a8a:	bf08      	it	eq
    3a8c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    3a90:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    3a94:	d1e5      	bne.n	3a62 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    3a96:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>
    3a9a:	f100 0210 	add.w	r2, r0, #16
    3a9e:	fa04 f202 	lsl.w	r2, r4, r2
    3aa2:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3aa6:	f04f 0340 	mov.w	r3, #64	; 0x40
    3aaa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3aae:	b2db      	uxtb	r3, r3
    3ab0:	4463      	add	r3, ip
    3ab2:	601c      	str	r4, [r3, #0]
    3ab4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3ab8:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    3abc:	eba1 0303 	sub.w	r3, r1, r3
    3ac0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ac4:	2b03      	cmp	r3, #3
    3ac6:	bf26      	itte	cs
    3ac8:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3acc:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    3ad0:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    3ad4:	d237      	bcs.n	3b46 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xae>
    3ad6:	e03c      	b.n	3b52 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xba>
    3ad8:	f1bc 0f00 	cmp.w	ip, #0
    3adc:	d006      	beq.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3ade:	4283      	cmp	r3, r0
    3ae0:	d104      	bne.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3ae2:	f240 3171 	movw	r1, #881	; 0x371
    3ae6:	206c      	movs	r0, #108	; 0x6c
    3ae8:	f000 fd02 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3aec:	1f02      	subs	r2, r0, #4
    3aee:	b2d3      	uxtb	r3, r2
    3af0:	2b03      	cmp	r3, #3
    3af2:	d304      	bcc.n	3afe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x66>
    3af4:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    3af8:	206c      	movs	r0, #108	; 0x6c
    3afa:	f000 fcf9 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3afe:	f8df c070 	ldr.w	ip, [pc, #112]	; 3b70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd8>
    3b02:	f103 0210 	add.w	r2, r3, #16
    3b06:	fa04 f202 	lsl.w	r2, r4, r2
    3b0a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    3b0e:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    3b12:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3b16:	f84c 5003 	str.w	r5, [ip, r3]
    3b1a:	4b16      	ldr	r3, [pc, #88]	; (3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>)
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	e000      	b.n	3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
    3b20:	e01a      	b.n	3b58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc0>
    3b22:	1f00      	subs	r0, r0, #4
    3b24:	1acb      	subs	r3, r1, r3
    3b26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3b2a:	b2c0      	uxtb	r0, r0
    3b2c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3b30:	2b02      	cmp	r3, #2
    3b32:	d30b      	bcc.n	3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>
    3b34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3b38:	d808      	bhi.n	3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>
    3b3a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3b3e:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    3b42:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    3b46:	2001      	movs	r0, #1
    3b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b4c:	2100      	movs	r1, #0
    3b4e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3b52:	2000      	movs	r0, #0
    3b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b58:	f240 3175 	movw	r1, #885	; 0x375
    3b5c:	206c      	movs	r0, #108	; 0x6c
    3b5e:	f000 fcc7 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b62:	0000      	.short	0x0000
    3b64:	20000046 	.word	0x20000046
    3b68:	20000044 	.word	0x20000044
    3b6c:	40008000 	.word	0x40008000
    3b70:	4000b000 	.word	0x4000b000
    3b74:	4000b504 	.word	0x4000b504

00003b78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3b7c:	2601      	movs	r6, #1
    3b7e:	2700      	movs	r7, #0
    3b80:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3b84:	2807      	cmp	r0, #7
    3b86:	d251      	bcs.n	3c2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    3b88:	e8df f000 	tbb	[pc, r0]
    3b8c:	04040404 	.word	0x04040404
    3b90:	00191919 	.word	0x00191919
    3b94:	f100 0110 	add.w	r1, r0, #16
    3b98:	fa06 f201 	lsl.w	r2, r6, r1
    3b9c:	4926      	ldr	r1, [pc, #152]	; (3c38 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3b9e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3ba2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3ba6:	2200      	movs	r2, #0
    3ba8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3bac:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3bb0:	508f      	str	r7, [r1, r2]
    3bb2:	4922      	ldr	r1, [pc, #136]	; (3c3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3bb4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3bb8:	9000      	str	r0, [sp, #0]
    3bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3bbe:	4d20      	ldr	r5, [pc, #128]	; (3c40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3bc0:	1f01      	subs	r1, r0, #4
    3bc2:	b2cc      	uxtb	r4, r1
    3bc4:	7829      	ldrb	r1, [r5, #0]
    3bc6:	b179      	cbz	r1, 3be8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3bc8:	786a      	ldrb	r2, [r5, #1]
    3bca:	4282      	cmp	r2, r0
    3bcc:	d10c      	bne.n	3be8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3bce:	4a1d      	ldr	r2, [pc, #116]	; (3c44 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3bd0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3bd4:	6010      	str	r0, [r2, #0]
    3bd6:	2901      	cmp	r1, #1
    3bd8:	bf08      	it	eq
    3bda:	f7ff fd39 	bleq	3650 <MPSL_IRQ_TIMER0_Handler+0x100>
    3bde:	702f      	strb	r7, [r5, #0]
    3be0:	4919      	ldr	r1, [pc, #100]	; (3c48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3be2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3be6:	6088      	str	r0, [r1, #8]
    3be8:	4918      	ldr	r1, [pc, #96]	; (3c4c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3bea:	f104 0010 	add.w	r0, r4, #16
    3bee:	fa06 f000 	lsl.w	r0, r6, r0
    3bf2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3bf6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    3bfa:	00a0      	lsls	r0, r4, #2
    3bfc:	4408      	add	r0, r1
    3bfe:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3c02:	4a13      	ldr	r2, [pc, #76]	; (3c50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3c04:	6812      	ldr	r2, [r2, #0]
    3c06:	1a80      	subs	r0, r0, r2
    3c08:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3c0c:	2802      	cmp	r0, #2
    3c0e:	d307      	bcc.n	3c20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    3c10:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    3c14:	2000      	movs	r0, #0
    3c16:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3c1a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    3c1e:	500f      	str	r7, [r1, r0]
    3c20:	480c      	ldr	r0, [pc, #48]	; (3c54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    3c22:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3c26:	9000      	str	r0, [sp, #0]
    3c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3c2c:	f240 31f9 	movw	r1, #1017	; 0x3f9
    3c30:	206c      	movs	r0, #108	; 0x6c
    3c32:	f000 fc5d 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c36:	0000      	.short	0x0000
    3c38:	40008000 	.word	0x40008000
    3c3c:	40008140 	.word	0x40008140
    3c40:	20000046 	.word	0x20000046
    3c44:	4001f508 	.word	0x4001f508
    3c48:	20000044 	.word	0x20000044
    3c4c:	4000b000 	.word	0x4000b000
    3c50:	4000b504 	.word	0x4000b504
    3c54:	4000b140 	.word	0x4000b140

00003c58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3c58:	4825      	ldr	r0, [pc, #148]	; (3cf0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    3c5a:	4a24      	ldr	r2, [pc, #144]	; (3cec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    3c5c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3c60:	4924      	ldr	r1, [pc, #144]	; (3cf4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    3c62:	1d03      	adds	r3, r0, #4
    3c64:	f891 c000 	ldrb.w	ip, [r1]
    3c68:	2100      	movs	r1, #0
    3c6a:	f1bc 0f00 	cmp.w	ip, #0
    3c6e:	d010      	beq.n	3c92 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    3c70:	4a21      	ldr	r2, [pc, #132]	; (3cf8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    3c72:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3c76:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3c7a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3c7e:	bf00      	nop
    3c80:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    3c84:	2a00      	cmp	r2, #0
    3c86:	bf04      	itt	eq
    3c88:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    3c8c:	2800      	cmpeq	r0, #0
    3c8e:	d111      	bne.n	3cb4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    3c90:	e00a      	b.n	3ca8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3c92:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    3c96:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3c9a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3c9e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    3ca2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3ca6:	e7eb      	b.n	3c80 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3ca8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3cac:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3cb0:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    3cb4:	4811      	ldr	r0, [pc, #68]	; (3cfc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    3cb6:	f04f 32ff 	mov.w	r2, #4294967295
    3cba:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    3cbe:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3cc2:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3cc6:	f100 0204 	add.w	r2, r0, #4
    3cca:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3cce:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3cd2:	f102 0204 	add.w	r2, r2, #4
    3cd6:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3cda:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    3cde:	f102 0204 	add.w	r2, r2, #4
    3ce2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3ce6:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    3cea:	4770      	bx	lr
    3cec:	fffbfffd 	.word	0xfffbfffd
    3cf0:	4000b000 	.word	0x4000b000
    3cf4:	20000046 	.word	0x20000046
    3cf8:	fffafffd 	.word	0xfffafffd
    3cfc:	40008000 	.word	0x40008000

00003d00 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    3d00:	b510      	push	{r4, lr}
    3d02:	2807      	cmp	r0, #7
    3d04:	d20d      	bcs.n	3d22 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    3d06:	e8df f000 	tbb	[pc, r0]
    3d0a:	0404      	.short	0x0404
    3d0c:	06060404 	.word	0x06060404
    3d10:	0006      	.short	0x0006
    3d12:	4906      	ldr	r1, [pc, #24]	; (3d2c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3d14:	e002      	b.n	3d1c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3d16:	1f00      	subs	r0, r0, #4
    3d18:	4905      	ldr	r1, [pc, #20]	; (3d30 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    3d1a:	b2c0      	uxtb	r0, r0
    3d1c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3d20:	bd10      	pop	{r4, pc}
    3d22:	f240 3199 	movw	r1, #921	; 0x399
    3d26:	206c      	movs	r0, #108	; 0x6c
    3d28:	f000 fbe2 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d2c:	40008140 	.word	0x40008140
    3d30:	4000b140 	.word	0x4000b140

00003d34 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3d34:	b570      	push	{r4, r5, r6, lr}
    3d36:	481f      	ldr	r0, [pc, #124]	; (3db4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    3d38:	2400      	movs	r4, #0
    3d3a:	2104      	movs	r1, #4
    3d3c:	7004      	strb	r4, [r0, #0]
    3d3e:	1e80      	subs	r0, r0, #2
    3d40:	7001      	strb	r1, [r0, #0]
    3d42:	0589      	lsls	r1, r1, #22
    3d44:	60c4      	str	r4, [r0, #12]
    3d46:	6081      	str	r1, [r0, #8]
    3d48:	f7ff fc82 	bl	3650 <MPSL_IRQ_TIMER0_Handler+0x100>
    3d4c:	2501      	movs	r5, #1
    3d4e:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3d52:	02eb      	lsls	r3, r5, #11
    3d54:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3d58:	f3bf 8f4f 	dsb	sy
    3d5c:	f3bf 8f6f 	isb	sy
    3d60:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3d64:	4814      	ldr	r0, [pc, #80]	; (3db8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    3d66:	6045      	str	r5, [r0, #4]
    3d68:	6085      	str	r5, [r0, #8]
    3d6a:	4914      	ldr	r1, [pc, #80]	; (3dbc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    3d6c:	680a      	ldr	r2, [r1, #0]
    3d6e:	2a00      	cmp	r2, #0
    3d70:	d1fc      	bne.n	3d6c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    3d72:	1e51      	subs	r1, r2, #1
    3d74:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3d78:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3d7c:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3d80:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3d84:	490e      	ldr	r1, [pc, #56]	; (3dc0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    3d86:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3d8a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3d8e:	1d09      	adds	r1, r1, #4
    3d90:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3d94:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3d98:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    3d9c:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    3da0:	6005      	str	r5, [r0, #0]
    3da2:	f44f 7182 	mov.w	r1, #260	; 0x104
    3da6:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    3daa:	2102      	movs	r1, #2
    3dac:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    3db0:	bd70      	pop	{r4, r5, r6, pc}
    3db2:	0000      	.short	0x0000
    3db4:	20000046 	.word	0x20000046
    3db8:	4000b000 	.word	0x4000b000
    3dbc:	4000b504 	.word	0x4000b504
    3dc0:	4000b004 	.word	0x4000b004

00003dc4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    3dc4:	4808      	ldr	r0, [pc, #32]	; (3de8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    3dc6:	f990 0000 	ldrsb.w	r0, [r0]
    3dca:	2800      	cmp	r0, #0
    3dcc:	bfb8      	it	lt
    3dce:	4770      	bxlt	lr
    3dd0:	f000 011f 	and.w	r1, r0, #31
    3dd4:	2201      	movs	r2, #1
    3dd6:	fa02 f101 	lsl.w	r1, r2, r1
    3dda:	0940      	lsrs	r0, r0, #5
    3ddc:	0080      	lsls	r0, r0, #2
    3dde:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3de2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3de6:	4770      	bx	lr
    3de8:	20000350 	.word	0x20000350

00003dec <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    3dec:	4803      	ldr	r0, [pc, #12]	; (3dfc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    3dee:	7800      	ldrb	r0, [r0, #0]
    3df0:	2803      	cmp	r0, #3
    3df2:	bf0c      	ite	eq
    3df4:	2001      	moveq	r0, #1
    3df6:	2000      	movne	r0, #0
    3df8:	4770      	bx	lr
    3dfa:	0000      	.short	0x0000
    3dfc:	2000033c 	.word	0x2000033c

00003e00 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    3e00:	4801      	ldr	r0, [pc, #4]	; (3e08 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    3e02:	8840      	ldrh	r0, [r0, #2]
    3e04:	4770      	bx	lr
    3e06:	0000      	.short	0x0000
    3e08:	2000033c 	.word	0x2000033c

00003e0c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    3e0c:	4803      	ldr	r0, [pc, #12]	; (3e1c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    3e0e:	7800      	ldrb	r0, [r0, #0]
    3e10:	2802      	cmp	r0, #2
    3e12:	bf16      	itet	ne
    3e14:	2803      	cmpne	r0, #3
    3e16:	2001      	moveq	r0, #1
    3e18:	2000      	movne	r0, #0
    3e1a:	4770      	bx	lr
    3e1c:	2000033c 	.word	0x2000033c

00003e20 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    3e20:	4802      	ldr	r0, [pc, #8]	; (3e2c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    3e22:	2100      	movs	r1, #0
    3e24:	7001      	strb	r1, [r0, #0]
    3e26:	8041      	strh	r1, [r0, #2]
    3e28:	4770      	bx	lr
    3e2a:	0000      	.short	0x0000
    3e2c:	2000033c 	.word	0x2000033c

00003e30 <MPSL_IRQ_CLOCK_Handler>:
    3e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e34:	4c16      	ldr	r4, [pc, #88]	; (3e90 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3e36:	7a60      	ldrb	r0, [r4, #9]
    3e38:	2800      	cmp	r0, #0
    3e3a:	d027      	beq.n	3e8c <MPSL_IRQ_CLOCK_Handler+0x5c>
    3e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3e40:	058d      	lsls	r5, r1, #22
    3e42:	4628      	mov	r0, r5
    3e44:	f008 fa7c 	bl	c340 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3e48:	4680      	mov	r8, r0
    3e4a:	f44f 7182 	mov.w	r1, #260	; 0x104
    3e4e:	4628      	mov	r0, r5
    3e50:	f008 fa76 	bl	c340 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3e54:	2600      	movs	r6, #0
    3e56:	4607      	mov	r7, r0
    3e58:	f1b8 0f00 	cmp.w	r8, #0
    3e5c:	d009      	beq.n	3e72 <MPSL_IRQ_CLOCK_Handler+0x42>
    3e5e:	2001      	movs	r0, #1
    3e60:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3e64:	7920      	ldrb	r0, [r4, #4]
    3e66:	b120      	cbz	r0, 3e72 <MPSL_IRQ_CLOCK_Handler+0x42>
    3e68:	7126      	strb	r6, [r4, #4]
    3e6a:	69e0      	ldr	r0, [r4, #28]
    3e6c:	b108      	cbz	r0, 3e72 <MPSL_IRQ_CLOCK_Handler+0x42>
    3e6e:	4780      	blx	r0
    3e70:	61e6      	str	r6, [r4, #28]
    3e72:	b137      	cbz	r7, 3e82 <MPSL_IRQ_CLOCK_Handler+0x52>
    3e74:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3e78:	2002      	movs	r0, #2
    3e7a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3e7e:	f000 fa6b 	bl	4358 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3e82:	4640      	mov	r0, r8
    3e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e88:	f000 b858 	b.w	3f3c <MPSL_IRQ_CLOCK_Handler+0x10c>
    3e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e90:	20000054 	.word	0x20000054
    3e94:	b510      	push	{r4, lr}
    3e96:	f008 fafd 	bl	c494 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3e9a:	b930      	cbnz	r0, 3eaa <MPSL_IRQ_CLOCK_Handler+0x7a>
    3e9c:	f008 fb1b 	bl	c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3ea0:	b918      	cbnz	r0, 3eaa <MPSL_IRQ_CLOCK_Handler+0x7a>
    3ea2:	f008 fb4e 	bl	c542 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3ea6:	2800      	cmp	r0, #0
    3ea8:	d002      	beq.n	3eb0 <MPSL_IRQ_CLOCK_Handler+0x80>
    3eaa:	4902      	ldr	r1, [pc, #8]	; (3eb4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3eac:	2002      	movs	r0, #2
    3eae:	6008      	str	r0, [r1, #0]
    3eb0:	bd10      	pop	{r4, pc}
    3eb2:	0000      	.short	0x0000
    3eb4:	40000c34 	.word	0x40000c34
    3eb8:	b570      	push	{r4, r5, r6, lr}
    3eba:	f000 f991 	bl	41e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3ebe:	f000 fa9f 	bl	4400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3ec2:	4c09      	ldr	r4, [pc, #36]	; (3ee8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3ec4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3ec8:	b130      	cbz	r0, 3ed8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    3eca:	f7ff ffe3 	bl	3e94 <MPSL_IRQ_CLOCK_Handler+0x64>
    3ece:	2001      	movs	r0, #1
    3ed0:	6128      	str	r0, [r5, #16]
    3ed2:	2004      	movs	r0, #4
    3ed4:	72a0      	strb	r0, [r4, #10]
    3ed6:	e004      	b.n	3ee2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    3ed8:	2003      	movs	r0, #3
    3eda:	72a0      	strb	r0, [r4, #10]
    3edc:	2001      	movs	r0, #1
    3ede:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3ee2:	2000      	movs	r0, #0
    3ee4:	71e0      	strb	r0, [r4, #7]
    3ee6:	bd70      	pop	{r4, r5, r6, pc}
    3ee8:	20000054 	.word	0x20000054
    3eec:	b570      	push	{r4, r5, r6, lr}
    3eee:	4c12      	ldr	r4, [pc, #72]	; (3f38 <MPSL_IRQ_CLOCK_Handler+0x108>)
    3ef0:	79a0      	ldrb	r0, [r4, #6]
    3ef2:	b1e0      	cbz	r0, 3f2e <MPSL_IRQ_CLOCK_Handler+0xfe>
    3ef4:	79e1      	ldrb	r1, [r4, #7]
    3ef6:	1e40      	subs	r0, r0, #1
    3ef8:	4281      	cmp	r1, r0
    3efa:	da18      	bge.n	3f2e <MPSL_IRQ_CLOCK_Handler+0xfe>
    3efc:	f000 fa80 	bl	4400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3f00:	4605      	mov	r5, r0
    3f02:	f000 fb69 	bl	45d8 <mpsl_temperature_get>
    3f06:	79a1      	ldrb	r1, [r4, #6]
    3f08:	2901      	cmp	r1, #1
    3f0a:	d902      	bls.n	3f12 <MPSL_IRQ_CLOCK_Handler+0xe2>
    3f0c:	79e1      	ldrb	r1, [r4, #7]
    3f0e:	1c49      	adds	r1, r1, #1
    3f10:	71e1      	strb	r1, [r4, #7]
    3f12:	b10d      	cbz	r5, 3f18 <MPSL_IRQ_CLOCK_Handler+0xe8>
    3f14:	6961      	ldr	r1, [r4, #20]
    3f16:	e000      	b.n	3f1a <MPSL_IRQ_CLOCK_Handler+0xea>
    3f18:	6921      	ldr	r1, [r4, #16]
    3f1a:	1a41      	subs	r1, r0, r1
    3f1c:	2902      	cmp	r1, #2
    3f1e:	da02      	bge.n	3f26 <MPSL_IRQ_CLOCK_Handler+0xf6>
    3f20:	f111 0f02 	cmn.w	r1, #2
    3f24:	dc07      	bgt.n	3f36 <MPSL_IRQ_CLOCK_Handler+0x106>
    3f26:	b10d      	cbz	r5, 3f2c <MPSL_IRQ_CLOCK_Handler+0xfc>
    3f28:	6160      	str	r0, [r4, #20]
    3f2a:	e000      	b.n	3f2e <MPSL_IRQ_CLOCK_Handler+0xfe>
    3f2c:	6120      	str	r0, [r4, #16]
    3f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3f32:	f7ff bfc1 	b.w	3eb8 <MPSL_IRQ_CLOCK_Handler+0x88>
    3f36:	bd70      	pop	{r4, r5, r6, pc}
    3f38:	20000054 	.word	0x20000054
    3f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f40:	4606      	mov	r6, r0
    3f42:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3f46:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3f4a:	4628      	mov	r0, r5
    3f4c:	f008 f9f8 	bl	c340 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3f50:	4680      	mov	r8, r0
    3f52:	f44f 7188 	mov.w	r1, #272	; 0x110
    3f56:	4628      	mov	r0, r5
    3f58:	f008 f9f2 	bl	c340 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3f5c:	4c27      	ldr	r4, [pc, #156]	; (3ffc <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3f5e:	4682      	mov	sl, r0
    3f60:	7827      	ldrb	r7, [r4, #0]
    3f62:	f104 0008 	add.w	r0, r4, #8
    3f66:	f008 fa5f 	bl	c428 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3f6a:	b110      	cbz	r0, 3f72 <MPSL_IRQ_CLOCK_Handler+0x142>
    3f6c:	f240 11b9 	movw	r1, #441	; 0x1b9
    3f70:	e016      	b.n	3fa0 <MPSL_IRQ_CLOCK_Handler+0x170>
    3f72:	f04f 0901 	mov.w	r9, #1
    3f76:	b146      	cbz	r6, 3f8a <MPSL_IRQ_CLOCK_Handler+0x15a>
    3f78:	7aa0      	ldrb	r0, [r4, #10]
    3f7a:	2803      	cmp	r0, #3
    3f7c:	d105      	bne.n	3f8a <MPSL_IRQ_CLOCK_Handler+0x15a>
    3f7e:	2004      	movs	r0, #4
    3f80:	72a0      	strb	r0, [r4, #10]
    3f82:	f7ff ff87 	bl	3e94 <MPSL_IRQ_CLOCK_Handler+0x64>
    3f86:	f8c5 9010 	str.w	r9, [r5, #16]
    3f8a:	2600      	movs	r6, #0
    3f8c:	f1b8 0f00 	cmp.w	r8, #0
    3f90:	d018      	beq.n	3fc4 <MPSL_IRQ_CLOCK_Handler+0x194>
    3f92:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3f96:	7aa0      	ldrb	r0, [r4, #10]
    3f98:	2804      	cmp	r0, #4
    3f9a:	d004      	beq.n	3fa6 <MPSL_IRQ_CLOCK_Handler+0x176>
    3f9c:	f240 11cb 	movw	r1, #459	; 0x1cb
    3fa0:	206d      	movs	r0, #109	; 0x6d
    3fa2:	f000 faa5 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3fa6:	f008 fa75 	bl	c494 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3faa:	b928      	cbnz	r0, 3fb8 <MPSL_IRQ_CLOCK_Handler+0x188>
    3fac:	f008 fa93 	bl	c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3fb0:	b910      	cbnz	r0, 3fb8 <MPSL_IRQ_CLOCK_Handler+0x188>
    3fb2:	f008 fac6 	bl	c542 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3fb6:	b108      	cbz	r0, 3fbc <MPSL_IRQ_CLOCK_Handler+0x18c>
    3fb8:	4811      	ldr	r0, [pc, #68]	; (4000 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3fba:	6006      	str	r6, [r0, #0]
    3fbc:	2002      	movs	r0, #2
    3fbe:	72a0      	strb	r0, [r4, #10]
    3fc0:	f000 f8f2 	bl	41a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3fc4:	f1ba 0f00 	cmp.w	sl, #0
    3fc8:	d008      	beq.n	3fdc <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3fca:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3fce:	7aa0      	ldrb	r0, [r4, #10]
    3fd0:	2802      	cmp	r0, #2
    3fd2:	d101      	bne.n	3fd8 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    3fd4:	f7ff ff8a 	bl	3eec <MPSL_IRQ_CLOCK_Handler+0xbc>
    3fd8:	f8c5 9014 	str.w	r9, [r5, #20]
    3fdc:	b13f      	cbz	r7, 3fee <MPSL_IRQ_CLOCK_Handler+0x1be>
    3fde:	7026      	strb	r6, [r4, #0]
    3fe0:	7aa0      	ldrb	r0, [r4, #10]
    3fe2:	2802      	cmp	r0, #2
    3fe4:	d101      	bne.n	3fea <MPSL_IRQ_CLOCK_Handler+0x1ba>
    3fe6:	f7ff ff67 	bl	3eb8 <MPSL_IRQ_CLOCK_Handler+0x88>
    3fea:	f000 f8dd 	bl	41a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3fee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ff2:	4802      	ldr	r0, [pc, #8]	; (3ffc <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    3ff4:	3008      	adds	r0, #8
    3ff6:	f008 ba2e 	b.w	c456 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3ffa:	0000      	.short	0x0000
    3ffc:	20000054 	.word	0x20000054
    4000:	40000c34 	.word	0x40000c34
    4004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4008:	4c5f      	ldr	r4, [pc, #380]	; (4188 <MPSL_IRQ_CLOCK_Handler+0x358>)
    400a:	2700      	movs	r7, #0
    400c:	4606      	mov	r6, r0
    400e:	61a7      	str	r7, [r4, #24]
    4010:	7842      	ldrb	r2, [r0, #1]
    4012:	7881      	ldrb	r1, [r0, #2]
    4014:	7800      	ldrb	r0, [r0, #0]
    4016:	72e0      	strb	r0, [r4, #11]
    4018:	7162      	strb	r2, [r4, #5]
    401a:	71a1      	strb	r1, [r4, #6]
    401c:	71e7      	strb	r7, [r4, #7]
    401e:	f04f 0801 	mov.w	r8, #1
    4022:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4026:	2805      	cmp	r0, #5
    4028:	d225      	bcs.n	4076 <MPSL_IRQ_CLOCK_Handler+0x246>
    402a:	e8df f000 	tbb	[pc, r0]
    402e:	0310      	.short	0x0310
    4030:	00222006 	.word	0x00222006
    4034:	f8c4 8018 	str.w	r8, [r4, #24]
    4038:	e009      	b.n	404e <MPSL_IRQ_CLOCK_Handler+0x21e>
    403a:	f000 f8d1 	bl	41e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    403e:	2101      	movs	r1, #1
    4040:	4628      	mov	r0, r5
    4042:	f008 f982 	bl	c34a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4046:	2800      	cmp	r0, #0
    4048:	d0f9      	beq.n	403e <MPSL_IRQ_CLOCK_Handler+0x20e>
    404a:	2002      	movs	r0, #2
    404c:	61a0      	str	r0, [r4, #24]
    404e:	f008 f9a8 	bl	c3a2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    4052:	b1b0      	cbz	r0, 4082 <MPSL_IRQ_CLOCK_Handler+0x252>
    4054:	f000 f9ee 	bl	4434 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4058:	7e21      	ldrb	r1, [r4, #24]
    405a:	f001 0103 	and.w	r1, r1, #3
    405e:	4288      	cmp	r0, r1
    4060:	d10f      	bne.n	4082 <MPSL_IRQ_CLOCK_Handler+0x252>
    4062:	79b0      	ldrb	r0, [r6, #6]
    4064:	b150      	cbz	r0, 407c <MPSL_IRQ_CLOCK_Handler+0x24c>
    4066:	2002      	movs	r0, #2
    4068:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    406c:	e070      	b.n	4150 <MPSL_IRQ_CLOCK_Handler+0x320>
    406e:	4847      	ldr	r0, [pc, #284]	; (418c <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4070:	e7ec      	b.n	404c <MPSL_IRQ_CLOCK_Handler+0x21c>
    4072:	4847      	ldr	r0, [pc, #284]	; (4190 <MPSL_IRQ_CLOCK_Handler+0x360>)
    4074:	e7ea      	b.n	404c <MPSL_IRQ_CLOCK_Handler+0x21c>
    4076:	f240 313a 	movw	r1, #826	; 0x33a
    407a:	e04d      	b.n	4118 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    407c:	f000 f9ae 	bl	43dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4080:	e066      	b.n	4150 <MPSL_IRQ_CLOCK_Handler+0x320>
    4082:	f8c5 800c 	str.w	r8, [r5, #12]
    4086:	f44f 7a82 	mov.w	sl, #260	; 0x104
    408a:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    408e:	69a0      	ldr	r0, [r4, #24]
    4090:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    4094:	f008 f9ea 	bl	c46c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4098:	b940      	cbnz	r0, 40ac <MPSL_IRQ_CLOCK_Handler+0x27c>
    409a:	f008 f9f1 	bl	c480 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    409e:	b928      	cbnz	r0, 40ac <MPSL_IRQ_CLOCK_Handler+0x27c>
    40a0:	f008 fa05 	bl	c4ae <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    40a4:	b910      	cbnz	r0, 40ac <MPSL_IRQ_CLOCK_Handler+0x27c>
    40a6:	f008 fa16 	bl	c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    40aa:	b138      	cbz	r0, 40bc <MPSL_IRQ_CLOCK_Handler+0x28c>
    40ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    40b0:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    40b4:	4937      	ldr	r1, [pc, #220]	; (4194 <MPSL_IRQ_CLOCK_Handler+0x364>)
    40b6:	f3c0 3042 	ubfx	r0, r0, #13, #3
    40ba:	6008      	str	r0, [r1, #0]
    40bc:	f008 f9d6 	bl	c46c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    40c0:	b940      	cbnz	r0, 40d4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    40c2:	f008 f9dd 	bl	c480 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    40c6:	b928      	cbnz	r0, 40d4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    40c8:	f008 f9f1 	bl	c4ae <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    40cc:	b910      	cbnz	r0, 40d4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    40ce:	f008 fa02 	bl	c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    40d2:	b118      	cbz	r0, 40dc <MPSL_IRQ_CLOCK_Handler+0x2ac>
    40d4:	492f      	ldr	r1, [pc, #188]	; (4194 <MPSL_IRQ_CLOCK_Handler+0x364>)
    40d6:	3110      	adds	r1, #16
    40d8:	f8c1 8000 	str.w	r8, [r1]
    40dc:	f8c5 8008 	str.w	r8, [r5, #8]
    40e0:	2002      	movs	r0, #2
    40e2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    40e6:	79b0      	ldrb	r0, [r6, #6]
    40e8:	bb90      	cbnz	r0, 4150 <MPSL_IRQ_CLOCK_Handler+0x320>
    40ea:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    40ee:	f010 0f02 	tst.w	r0, #2
    40f2:	d00f      	beq.n	4114 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    40f4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4198 <MPSL_IRQ_CLOCK_Handler+0x368>
    40f8:	f8d9 1000 	ldr.w	r1, [r9]
    40fc:	43c9      	mvns	r1, r1
    40fe:	f341 1100 	sbfx	r1, r1, #4, #1
    4102:	f101 0801 	add.w	r8, r1, #1
    4106:	f8d9 1000 	ldr.w	r1, [r9]
    410a:	f041 0110 	orr.w	r1, r1, #16
    410e:	f8c9 1000 	str.w	r1, [r9]
    4112:	e007      	b.n	4124 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    4114:	f240 21fb 	movw	r1, #763	; 0x2fb
    4118:	206d      	movs	r0, #109	; 0x6d
    411a:	f000 f9e9 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    411e:	bf00      	nop
    4120:	f000 fb20 	bl	4764 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4124:	4651      	mov	r1, sl
    4126:	4628      	mov	r0, r5
    4128:	f008 f90a 	bl	c340 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    412c:	2800      	cmp	r0, #0
    412e:	d0f7      	beq.n	4120 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4130:	f000 f954 	bl	43dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4134:	f1b8 0f00 	cmp.w	r8, #0
    4138:	d105      	bne.n	4146 <MPSL_IRQ_CLOCK_Handler+0x316>
    413a:	f8d9 1000 	ldr.w	r1, [r9]
    413e:	f021 0110 	bic.w	r1, r1, #16
    4142:	f8c9 1000 	str.w	r1, [r9]
    4146:	2002      	movs	r0, #2
    4148:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    414c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4150:	79a0      	ldrb	r0, [r4, #6]
    4152:	b170      	cbz	r0, 4172 <MPSL_IRQ_CLOCK_Handler+0x342>
    4154:	7830      	ldrb	r0, [r6, #0]
    4156:	b960      	cbnz	r0, 4172 <MPSL_IRQ_CLOCK_Handler+0x342>
    4158:	f000 f952 	bl	4400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    415c:	4606      	mov	r6, r0
    415e:	f000 fa3b 	bl	45d8 <mpsl_temperature_get>
    4162:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    4166:	b116      	cbz	r6, 416e <MPSL_IRQ_CLOCK_Handler+0x33e>
    4168:	e9c4 1004 	strd	r1, r0, [r4, #16]
    416c:	e001      	b.n	4172 <MPSL_IRQ_CLOCK_Handler+0x342>
    416e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4172:	2101      	movs	r1, #1
    4174:	4628      	mov	r0, r5
    4176:	f008 f8e8 	bl	c34a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    417a:	b108      	cbz	r0, 4180 <MPSL_IRQ_CLOCK_Handler+0x350>
    417c:	f000 f93a 	bl	43f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4180:	72a7      	strb	r7, [r4, #10]
    4182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4186:	0000      	.short	0x0000
    4188:	20000054 	.word	0x20000054
    418c:	00020001 	.word	0x00020001
    4190:	00030001 	.word	0x00030001
    4194:	4000053c 	.word	0x4000053c
    4198:	e000ed10 	.word	0xe000ed10

0000419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    419c:	4801      	ldr	r0, [pc, #4]	; (41a4 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    419e:	89c0      	ldrh	r0, [r0, #14]
    41a0:	4770      	bx	lr
    41a2:	0000      	.short	0x0000
    41a4:	20000054 	.word	0x20000054

000041a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    41a8:	b510      	push	{r4, lr}
    41aa:	f3ef 8410 	mrs	r4, PRIMASK
    41ae:	b672      	cpsid	i
    41b0:	480a      	ldr	r0, [pc, #40]	; (41dc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    41b2:	7841      	ldrb	r1, [r0, #1]
    41b4:	b129      	cbz	r1, 41c2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    41b6:	7841      	ldrb	r1, [r0, #1]
    41b8:	1e49      	subs	r1, r1, #1
    41ba:	7041      	strb	r1, [r0, #1]
    41bc:	7841      	ldrb	r1, [r0, #1]
    41be:	b129      	cbz	r1, 41cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    41c0:	e008      	b.n	41d4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    41c2:	f44f 718e 	mov.w	r1, #284	; 0x11c
    41c6:	206d      	movs	r0, #109	; 0x6d
    41c8:	f000 f992 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    41cc:	7880      	ldrb	r0, [r0, #2]
    41ce:	b908      	cbnz	r0, 41d4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    41d0:	f000 f924 	bl	441c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    41d4:	2c00      	cmp	r4, #0
    41d6:	d100      	bne.n	41da <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    41d8:	b662      	cpsie	i
    41da:	bd10      	pop	{r4, pc}
    41dc:	20000054 	.word	0x20000054

000041e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    41e0:	b510      	push	{r4, lr}
    41e2:	f3ef 8410 	mrs	r4, PRIMASK
    41e6:	b672      	cpsid	i
    41e8:	4806      	ldr	r0, [pc, #24]	; (4204 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    41ea:	7841      	ldrb	r1, [r0, #1]
    41ec:	1c49      	adds	r1, r1, #1
    41ee:	7041      	strb	r1, [r0, #1]
    41f0:	7840      	ldrb	r0, [r0, #1]
    41f2:	2801      	cmp	r0, #1
    41f4:	d101      	bne.n	41fa <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    41f6:	f008 f8bf 	bl	c378 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    41fa:	2c00      	cmp	r4, #0
    41fc:	d100      	bne.n	4200 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    41fe:	b662      	cpsie	i
    4200:	bd10      	pop	{r4, pc}
    4202:	0000      	.short	0x0000
    4204:	20000054 	.word	0x20000054

00004208 <mpsl_clock_hfclk_release>:
    4208:	4805      	ldr	r0, [pc, #20]	; (4220 <mpsl_clock_hfclk_release+0x18>)
    420a:	b510      	push	{r4, lr}
    420c:	78c1      	ldrb	r1, [r0, #3]
    420e:	b121      	cbz	r1, 421a <mpsl_clock_hfclk_release+0x12>
    4210:	2100      	movs	r1, #0
    4212:	7101      	strb	r1, [r0, #4]
    4214:	70c1      	strb	r1, [r0, #3]
    4216:	f7ff ffc7 	bl	41a8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    421a:	2000      	movs	r0, #0
    421c:	bd10      	pop	{r4, pc}
    421e:	0000      	.short	0x0000
    4220:	20000054 	.word	0x20000054

00004224 <mpsl_clock_hfclk_request>:
    4224:	b570      	push	{r4, r5, r6, lr}
    4226:	4c0c      	ldr	r4, [pc, #48]	; (4258 <mpsl_clock_hfclk_request+0x34>)
    4228:	78e1      	ldrb	r1, [r4, #3]
    422a:	b961      	cbnz	r1, 4246 <mpsl_clock_hfclk_request+0x22>
    422c:	2501      	movs	r5, #1
    422e:	70e5      	strb	r5, [r4, #3]
    4230:	61e0      	str	r0, [r4, #28]
    4232:	f7ff ffd5 	bl	41e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4236:	f000 f8e3 	bl	4400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    423a:	b130      	cbz	r0, 424a <mpsl_clock_hfclk_request+0x26>
    423c:	69e0      	ldr	r0, [r4, #28]
    423e:	b110      	cbz	r0, 4246 <mpsl_clock_hfclk_request+0x22>
    4240:	4780      	blx	r0
    4242:	2000      	movs	r0, #0
    4244:	61e0      	str	r0, [r4, #28]
    4246:	2000      	movs	r0, #0
    4248:	bd70      	pop	{r4, r5, r6, pc}
    424a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    424e:	7125      	strb	r5, [r4, #4]
    4250:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4254:	e7f7      	b.n	4246 <mpsl_clock_hfclk_request+0x22>
    4256:	0000      	.short	0x0000
    4258:	20000054 	.word	0x20000054

0000425c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4260:	0005      	movs	r5, r0
    4262:	f06f 0015 	mvn.w	r0, #21
    4266:	d03f      	beq.n	42e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4268:	7829      	ldrb	r1, [r5, #0]
    426a:	2904      	cmp	r1, #4
    426c:	d83c      	bhi.n	42e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    426e:	2900      	cmp	r1, #0
    4270:	7869      	ldrb	r1, [r5, #1]
    4272:	d03b      	beq.n	42ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    4274:	2900      	cmp	r1, #0
    4276:	d137      	bne.n	42e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    4278:	78a9      	ldrb	r1, [r5, #2]
    427a:	2900      	cmp	r1, #0
    427c:	d134      	bne.n	42e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    427e:	2000      	movs	r0, #0
    4280:	f008 f829 	bl	c2d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    4284:	2000      	movs	r0, #0
    4286:	f008 f819 	bl	c2bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    428a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    428e:	f04f 31ff 	mov.w	r1, #4294967295
    4292:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    4296:	2600      	movs	r6, #0
    4298:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    429c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    42a0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    42a4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    42a8:	4c14      	ldr	r4, [pc, #80]	; (42fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    42aa:	7066      	strb	r6, [r4, #1]
    42ac:	88a8      	ldrh	r0, [r5, #4]
    42ae:	81a0      	strh	r0, [r4, #12]
    42b0:	f008 f859 	bl	c366 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    42b4:	2701      	movs	r7, #1
    42b6:	b108      	cbz	r0, 42bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    42b8:	70e7      	strb	r7, [r4, #3]
    42ba:	7067      	strb	r7, [r4, #1]
    42bc:	2101      	movs	r1, #1
    42be:	4640      	mov	r0, r8
    42c0:	f008 f843 	bl	c34a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    42c4:	b108      	cbz	r0, 42ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    42c6:	f000 f895 	bl	43f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    42ca:	f240 50f5 	movw	r0, #1525	; 0x5f5
    42ce:	81e0      	strh	r0, [r4, #14]
    42d0:	4628      	mov	r0, r5
    42d2:	f7ff fe97 	bl	4004 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    42d6:	7267      	strb	r7, [r4, #9]
    42d8:	2000      	movs	r0, #0
    42da:	f007 ffef 	bl	c2bc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    42de:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    42e2:	4630      	mov	r0, r6
    42e4:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    42e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42ec:	2900      	cmp	r1, #0
    42ee:	d0fb      	beq.n	42e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    42f0:	2920      	cmp	r1, #32
    42f2:	d8f9      	bhi.n	42e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    42f4:	78a9      	ldrb	r1, [r5, #2]
    42f6:	2921      	cmp	r1, #33	; 0x21
    42f8:	d9c1      	bls.n	427e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    42fa:	e7f5      	b.n	42e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    42fc:	20000054 	.word	0x20000054

00004300 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4300:	4801      	ldr	r0, [pc, #4]	; (4308 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    4302:	8980      	ldrh	r0, [r0, #12]
    4304:	4770      	bx	lr
    4306:	0000      	.short	0x0000
    4308:	20000054 	.word	0x20000054

0000430c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    430c:	b510      	push	{r4, lr}
    430e:	480d      	ldr	r0, [pc, #52]	; (4344 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4310:	f008 f88a 	bl	c428 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4314:	490b      	ldr	r1, [pc, #44]	; (4344 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4316:	3908      	subs	r1, #8
    4318:	b148      	cbz	r0, 432e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    431a:	2001      	movs	r0, #1
    431c:	7008      	strb	r0, [r1, #0]
    431e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4322:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    432a:	f7ff bf59 	b.w	41e0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    432e:	7a88      	ldrb	r0, [r1, #10]
    4330:	2802      	cmp	r0, #2
    4332:	d101      	bne.n	4338 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4334:	f7ff fdc0 	bl	3eb8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    433c:	4801      	ldr	r0, [pc, #4]	; (4344 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    433e:	f008 b88a 	b.w	c456 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4342:	0000      	.short	0x0000
    4344:	2000005c 	.word	0x2000005c

00004348 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4348:	4802      	ldr	r0, [pc, #8]	; (4354 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    434a:	7a80      	ldrb	r0, [r0, #10]
    434c:	2800      	cmp	r0, #0
    434e:	d000      	beq.n	4352 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4350:	2001      	movs	r0, #1
    4352:	4770      	bx	lr
    4354:	20000054 	.word	0x20000054

00004358 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    435a:	4d1f      	ldr	r5, [pc, #124]	; (43d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    435c:	7ae8      	ldrb	r0, [r5, #11]
    435e:	2800      	cmp	r0, #0
    4360:	d10f      	bne.n	4382 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4362:	7e28      	ldrb	r0, [r5, #24]
    4364:	f000 0003 	and.w	r0, r0, #3
    4368:	f008 f80b 	bl	c382 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    436c:	2800      	cmp	r0, #0
    436e:	d008      	beq.n	4382 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4370:	f3ef 8110 	mrs	r1, PRIMASK
    4374:	b672      	cpsid	i
    4376:	f7ff ffe7 	bl	4348 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    437a:	b118      	cbz	r0, 4384 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    437c:	2900      	cmp	r1, #0
    437e:	d100      	bne.n	4382 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4380:	b662      	cpsie	i
    4382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4384:	2601      	movs	r6, #1
    4386:	72ae      	strb	r6, [r5, #10]
    4388:	b901      	cbnz	r1, 438c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    438a:	b662      	cpsie	i
    438c:	2018      	movs	r0, #24
    438e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4392:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4396:	61a6      	str	r6, [r4, #24]
    4398:	f44f 7020 	mov.w	r0, #640	; 0x280
    439c:	f8ad 0000 	strh.w	r0, [sp]
    43a0:	f8bd 0000 	ldrh.w	r0, [sp]
    43a4:	1e41      	subs	r1, r0, #1
    43a6:	f8ad 1000 	strh.w	r1, [sp]
    43aa:	d2f9      	bcs.n	43a0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    43ac:	2700      	movs	r7, #0
    43ae:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    43b2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    43b6:	4808      	ldr	r0, [pc, #32]	; (43d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    43b8:	3008      	adds	r0, #8
    43ba:	f008 f848 	bl	c44e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    43be:	702f      	strb	r7, [r5, #0]
    43c0:	f7ff fd7a 	bl	3eb8 <MPSL_IRQ_CLOCK_Handler+0x88>
    43c4:	6166      	str	r6, [r4, #20]
    43c6:	7968      	ldrb	r0, [r5, #5]
    43c8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    43cc:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    43d0:	2018      	movs	r0, #24
    43d2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    43d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43d8:	20000054 	.word	0x20000054

000043dc <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    43dc:	b510      	push	{r4, lr}
    43de:	4c04      	ldr	r4, [pc, #16]	; (43f0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    43e0:	7e20      	ldrb	r0, [r4, #24]
    43e2:	f000 0003 	and.w	r0, r0, #3
    43e6:	f007 ffcc 	bl	c382 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    43ea:	2800      	cmp	r0, #0
    43ec:	d0f8      	beq.n	43e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    43ee:	bd10      	pop	{r4, pc}
    43f0:	20000054 	.word	0x20000054

000043f4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    43f4:	4901      	ldr	r1, [pc, #4]	; (43fc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    43f6:	2001      	movs	r0, #1
    43f8:	7008      	strb	r0, [r1, #0]
    43fa:	4770      	bx	lr
    43fc:	20000351 	.word	0x20000351

00004400 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4400:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4404:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4408:	b918      	cbnz	r0, 4412 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    440a:	4803      	ldr	r0, [pc, #12]	; (4418 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    440c:	7800      	ldrb	r0, [r0, #0]
    440e:	2800      	cmp	r0, #0
    4410:	d000      	beq.n	4414 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4412:	2001      	movs	r0, #1
    4414:	4770      	bx	lr
    4416:	0000      	.short	0x0000
    4418:	20000351 	.word	0x20000351

0000441c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    441c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4420:	2101      	movs	r1, #1
    4422:	6041      	str	r1, [r0, #4]
    4424:	2100      	movs	r1, #0
    4426:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    442a:	4801      	ldr	r0, [pc, #4]	; (4430 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    442c:	7001      	strb	r1, [r0, #0]
    442e:	4770      	bx	lr
    4430:	20000351 	.word	0x20000351

00004434 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4434:	4802      	ldr	r0, [pc, #8]	; (4440 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4436:	6800      	ldr	r0, [r0, #0]
    4438:	f000 0003 	and.w	r0, r0, #3
    443c:	4770      	bx	lr
    443e:	0000      	.short	0x0000
    4440:	4000041c 	.word	0x4000041c
    4444:	b510      	push	{r4, lr}
    4446:	b131      	cbz	r1, 4456 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4448:	2901      	cmp	r1, #1
    444a:	d007      	beq.n	445c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    444c:	f240 3102 	movw	r1, #770	; 0x302
    4450:	a005      	add	r0, pc, #20	; (adr r0, 4468 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    4452:	f000 f821 	bl	4498 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4456:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    445a:	e001      	b.n	4460 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    445c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4460:	f000 0001 	and.w	r0, r0, #1
    4464:	bd10      	pop	{r4, pc}
    4466:	0000      	.short	0x0000
    4468:	5f66726e 	.word	0x5f66726e
    446c:	636f6c63 	.word	0x636f6c63
    4470:	00682e6b 	.word	0x00682e6b
    4474:	f3bf 8f4f 	dsb	sy
    4478:	4805      	ldr	r0, [pc, #20]	; (4490 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    447a:	6801      	ldr	r1, [r0, #0]
    447c:	4a05      	ldr	r2, [pc, #20]	; (4494 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    447e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4482:	4311      	orrs	r1, r2
    4484:	6001      	str	r1, [r0, #0]
    4486:	f3bf 8f4f 	dsb	sy
    448a:	bf00      	nop
    448c:	e7fd      	b.n	448a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    448e:	0000      	.short	0x0000
    4490:	e000ed0c 	.word	0xe000ed0c
    4494:	05fa0004 	.word	0x05fa0004

00004498 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4498:	b672      	cpsid	i
    449a:	4a03      	ldr	r2, [pc, #12]	; (44a8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    449c:	6852      	ldr	r2, [r2, #4]
    449e:	b102      	cbz	r2, 44a2 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    44a0:	4790      	blx	r2
    44a2:	f7ff ffe7 	bl	4474 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    44a6:	0000      	.short	0x0000
    44a8:	20000074 	.word	0x20000074
    44ac:	4806      	ldr	r0, [pc, #24]	; (44c8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    44ae:	b510      	push	{r4, lr}
    44b0:	2100      	movs	r1, #0
    44b2:	6001      	str	r1, [r0, #0]
    44b4:	2101      	movs	r1, #1
    44b6:	6001      	str	r1, [r0, #0]
    44b8:	4608      	mov	r0, r1
    44ba:	f007 ff89 	bl	c3d0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    44be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44c2:	2001      	movs	r0, #1
    44c4:	f007 bf77 	b.w	c3b6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    44c8:	40001ffc 	.word	0x40001ffc
    44cc:	4807      	ldr	r0, [pc, #28]	; (44ec <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    44ce:	b510      	push	{r4, lr}
    44d0:	2101      	movs	r1, #1
    44d2:	6041      	str	r1, [r0, #4]
    44d4:	1e89      	subs	r1, r1, #2
    44d6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    44da:	200c      	movs	r0, #12
    44dc:	f007 ff78 	bl	c3d0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    44e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44e4:	200c      	movs	r0, #12
    44e6:	f007 bf66 	b.w	c3b6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    44ea:	0000      	.short	0x0000
    44ec:	4000c000 	.word	0x4000c000

000044f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    44f0:	b50e      	push	{r1, r2, r3, lr}
    44f2:	b672      	cpsid	i
    44f4:	4a0f      	ldr	r2, [pc, #60]	; (4534 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    44f6:	6855      	ldr	r5, [r2, #4]
    44f8:	b1d5      	cbz	r5, 4530 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    44fa:	2200      	movs	r2, #0
    44fc:	4603      	mov	r3, r0
    44fe:	466e      	mov	r6, sp
    4500:	240a      	movs	r4, #10
    4502:	e003      	b.n	450c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4504:	fbb0 f0f4 	udiv	r0, r0, r4
    4508:	1c52      	adds	r2, r2, #1
    450a:	b2d2      	uxtb	r2, r2
    450c:	2800      	cmp	r0, #0
    450e:	d1f9      	bne.n	4504 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4510:	54b0      	strb	r0, [r6, r2]
    4512:	e009      	b.n	4528 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4514:	fbb3 f0f4 	udiv	r0, r3, r4
    4518:	fb04 3010 	mls	r0, r4, r0, r3
    451c:	fbb3 f3f4 	udiv	r3, r3, r4
    4520:	1e52      	subs	r2, r2, #1
    4522:	b2d2      	uxtb	r2, r2
    4524:	3030      	adds	r0, #48	; 0x30
    4526:	54b0      	strb	r0, [r6, r2]
    4528:	2a00      	cmp	r2, #0
    452a:	d1f3      	bne.n	4514 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    452c:	4630      	mov	r0, r6
    452e:	47a8      	blx	r5
    4530:	f7ff ffa0 	bl	4474 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4534:	20000074 	.word	0x20000074

00004538 <mpsl_init>:
    4538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    453c:	4c18      	ldr	r4, [pc, #96]	; (45a0 <mpsl_init+0x68>)
    453e:	4606      	mov	r6, r0
    4540:	4617      	mov	r7, r2
    4542:	7860      	ldrb	r0, [r4, #1]
    4544:	460d      	mov	r5, r1
    4546:	b118      	cbz	r0, 4550 <mpsl_init+0x18>
    4548:	f04f 30ff 	mov.w	r0, #4294967295
    454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4550:	f7fc fc7c 	bl	e4c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    4554:	b906      	cbnz	r6, 4558 <mpsl_init+0x20>
    4556:	4e13      	ldr	r6, [pc, #76]	; (45a4 <mpsl_init+0x6c>)
    4558:	6067      	str	r7, [r4, #4]
    455a:	7025      	strb	r5, [r4, #0]
    455c:	f7ff ffa6 	bl	44ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4560:	f7ff ffb4 	bl	44cc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    4564:	4630      	mov	r0, r6
    4566:	f7ff fe79 	bl	425c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    456a:	0006      	movs	r6, r0
    456c:	d1ee      	bne.n	454c <mpsl_init+0x14>
    456e:	f7fe fe77 	bl	3260 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4572:	f7ff fef1 	bl	4358 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4576:	f007 fe70 	bl	c25a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    457a:	4628      	mov	r0, r5
    457c:	f007 ff1b 	bl	c3b6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4580:	2001      	movs	r0, #1
    4582:	2d00      	cmp	r5, #0
    4584:	db09      	blt.n	459a <mpsl_init+0x62>
    4586:	f005 011f 	and.w	r1, r5, #31
    458a:	fa00 f101 	lsl.w	r1, r0, r1
    458e:	096a      	lsrs	r2, r5, #5
    4590:	0092      	lsls	r2, r2, #2
    4592:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4596:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    459a:	7060      	strb	r0, [r4, #1]
    459c:	4630      	mov	r0, r6
    459e:	e7d5      	b.n	454c <mpsl_init+0x14>
    45a0:	20000074 	.word	0x20000074
    45a4:	0000c3f2 	.word	0x0000c3f2

000045a8 <mpsl_is_initialized>:
    45a8:	4801      	ldr	r0, [pc, #4]	; (45b0 <mpsl_is_initialized+0x8>)
    45aa:	7840      	ldrb	r0, [r0, #1]
    45ac:	4770      	bx	lr
    45ae:	0000      	.short	0x0000
    45b0:	20000074 	.word	0x20000074

000045b4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    45b4:	4807      	ldr	r0, [pc, #28]	; (45d4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    45b6:	f990 0000 	ldrsb.w	r0, [r0]
    45ba:	2800      	cmp	r0, #0
    45bc:	db09      	blt.n	45d2 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    45be:	f000 021f 	and.w	r2, r0, #31
    45c2:	2101      	movs	r1, #1
    45c4:	4091      	lsls	r1, r2
    45c6:	0940      	lsrs	r0, r0, #5
    45c8:	0080      	lsls	r0, r0, #2
    45ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    45ce:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    45d2:	4770      	bx	lr
    45d4:	20000074 	.word	0x20000074

000045d8 <mpsl_temperature_get>:
    45d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45dc:	2601      	movs	r6, #1
    45de:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    45e2:	0331      	lsls	r1, r6, #12
    45e4:	f04f 0800 	mov.w	r8, #0
    45e8:	4640      	mov	r0, r8
    45ea:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    45ee:	f3bf 8f4f 	dsb	sy
    45f2:	f3bf 8f6f 	isb	sy
    45f6:	4c16      	ldr	r4, [pc, #88]	; (4650 <mpsl_temperature_get+0x78>)
    45f8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    45fc:	200c      	movs	r0, #12
    45fe:	f007 ff06 	bl	c40e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4602:	4d14      	ldr	r5, [pc, #80]	; (4654 <mpsl_temperature_get+0x7c>)
    4604:	6828      	ldr	r0, [r5, #0]
    4606:	43c0      	mvns	r0, r0
    4608:	f340 1700 	sbfx	r7, r0, #4, #1
    460c:	6828      	ldr	r0, [r5, #0]
    460e:	f040 0010 	orr.w	r0, r0, #16
    4612:	6028      	str	r0, [r5, #0]
    4614:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4618:	6026      	str	r6, [r4, #0]
    461a:	1c7f      	adds	r7, r7, #1
    461c:	e002      	b.n	4624 <mpsl_temperature_get+0x4c>
    461e:	bf00      	nop
    4620:	f000 f8a0 	bl	4764 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4624:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4628:	2800      	cmp	r0, #0
    462a:	d0f9      	beq.n	4620 <mpsl_temperature_get+0x48>
    462c:	b91f      	cbnz	r7, 4636 <mpsl_temperature_get+0x5e>
    462e:	6828      	ldr	r0, [r5, #0]
    4630:	f020 0010 	bic.w	r0, r0, #16
    4634:	6028      	str	r0, [r5, #0]
    4636:	4808      	ldr	r0, [pc, #32]	; (4658 <mpsl_temperature_get+0x80>)
    4638:	6805      	ldr	r5, [r0, #0]
    463a:	6066      	str	r6, [r4, #4]
    463c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4640:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4644:	200c      	movs	r0, #12
    4646:	f007 fee2 	bl	c40e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    464a:	4628      	mov	r0, r5
    464c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4650:	4000c000 	.word	0x4000c000
    4654:	e000ed10 	.word	0xe000ed10
    4658:	4000c508 	.word	0x4000c508

0000465c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    465c:	b510      	push	{r4, lr}
    465e:	4602      	mov	r2, r0
    4660:	2005      	movs	r0, #5
    4662:	490c      	ldr	r1, [pc, #48]	; (4694 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4664:	e004      	b.n	4670 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4666:	bf00      	nop
    4668:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    466c:	791b      	ldrb	r3, [r3, #4]
    466e:	b133      	cbz	r3, 467e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4670:	1e40      	subs	r0, r0, #1
    4672:	b2c0      	uxtb	r0, r0
    4674:	d2f8      	bcs.n	4668 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4676:	2148      	movs	r1, #72	; 0x48
    4678:	2069      	movs	r0, #105	; 0x69
    467a:	f7ff ff39 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    467e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    4682:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4686:	2200      	movs	r2, #0
    4688:	714a      	strb	r2, [r1, #5]
    468a:	718a      	strb	r2, [r1, #6]
    468c:	2201      	movs	r2, #1
    468e:	710a      	strb	r2, [r1, #4]
    4690:	bd10      	pop	{r4, pc}
    4692:	0000      	.short	0x0000
    4694:	200011dc 	.word	0x200011dc

00004698 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4698:	b510      	push	{r4, lr}
    469a:	2805      	cmp	r0, #5
    469c:	d301      	bcc.n	46a2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    469e:	2158      	movs	r1, #88	; 0x58
    46a0:	e006      	b.n	46b0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    46a2:	490a      	ldr	r1, [pc, #40]	; (46cc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    46a4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    46a8:	7901      	ldrb	r1, [r0, #4]
    46aa:	2901      	cmp	r1, #1
    46ac:	d003      	beq.n	46b6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    46ae:	2159      	movs	r1, #89	; 0x59
    46b0:	2069      	movs	r0, #105	; 0x69
    46b2:	f7ff ff1d 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    46b6:	7941      	ldrb	r1, [r0, #5]
    46b8:	7982      	ldrb	r2, [r0, #6]
    46ba:	1c49      	adds	r1, r1, #1
    46bc:	b2c9      	uxtb	r1, r1
    46be:	428a      	cmp	r2, r1
    46c0:	d000      	beq.n	46c4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    46c2:	7141      	strb	r1, [r0, #5]
    46c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46c8:	f7ff bf74 	b.w	45b4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    46cc:	200011dc 	.word	0x200011dc

000046d0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    46d0:	b510      	push	{r4, lr}
    46d2:	2805      	cmp	r0, #5
    46d4:	d303      	bcc.n	46de <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    46d6:	214f      	movs	r1, #79	; 0x4f
    46d8:	2069      	movs	r0, #105	; 0x69
    46da:	f7ff ff09 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    46de:	4a03      	ldr	r2, [pc, #12]	; (46ec <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    46e0:	2100      	movs	r1, #0
    46e2:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    46e6:	7101      	strb	r1, [r0, #4]
    46e8:	bd10      	pop	{r4, pc}
    46ea:	0000      	.short	0x0000
    46ec:	200011dc 	.word	0x200011dc

000046f0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    46f0:	b570      	push	{r4, r5, r6, lr}
    46f2:	2505      	movs	r5, #5
    46f4:	4e0e      	ldr	r6, [pc, #56]	; (4730 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    46f6:	4c0f      	ldr	r4, [pc, #60]	; (4734 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    46f8:	e016      	b.n	4728 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    46fa:	7821      	ldrb	r1, [r4, #0]
    46fc:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4700:	7902      	ldrb	r2, [r0, #4]
    4702:	2a01      	cmp	r2, #1
    4704:	d108      	bne.n	4718 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4706:	7942      	ldrb	r2, [r0, #5]
    4708:	7983      	ldrb	r3, [r0, #6]
    470a:	429a      	cmp	r2, r3
    470c:	d004      	beq.n	4718 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    470e:	7942      	ldrb	r2, [r0, #5]
    4710:	7182      	strb	r2, [r0, #6]
    4712:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4716:	4780      	blx	r0
    4718:	7820      	ldrb	r0, [r4, #0]
    471a:	1c40      	adds	r0, r0, #1
    471c:	b2c0      	uxtb	r0, r0
    471e:	7020      	strb	r0, [r4, #0]
    4720:	2805      	cmp	r0, #5
    4722:	d301      	bcc.n	4728 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4724:	2000      	movs	r0, #0
    4726:	7020      	strb	r0, [r4, #0]
    4728:	1e6d      	subs	r5, r5, #1
    472a:	b2ed      	uxtb	r5, r5
    472c:	d2e5      	bcs.n	46fa <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    472e:	bd70      	pop	{r4, r5, r6, pc}
    4730:	200011dc 	.word	0x200011dc
    4734:	20000352 	.word	0x20000352

00004738 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4738:	b500      	push	{lr}
    473a:	f007 fe97 	bl	c46c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    473e:	b940      	cbnz	r0, 4752 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4740:	f007 fe9e 	bl	c480 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4744:	b928      	cbnz	r0, 4752 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4746:	f007 feb2 	bl	c4ae <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    474a:	b910      	cbnz	r0, 4752 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    474c:	f007 fec3 	bl	c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4750:	b108      	cbz	r0, 4756 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4752:	4802      	ldr	r0, [pc, #8]	; (475c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4754:	bd00      	pop	{pc}
    4756:	4802      	ldr	r0, [pc, #8]	; (4760 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4758:	bd00      	pop	{pc}
    475a:	0000      	.short	0x0000
    475c:	4000050c 	.word	0x4000050c
    4760:	4001e700 	.word	0x4001e700

00004764 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4764:	b510      	push	{r4, lr}
    4766:	f007 feb6 	bl	c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    476a:	b330      	cbz	r0, 47ba <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    476c:	f3ef 8010 	mrs	r0, PRIMASK
    4770:	b1c8      	cbz	r0, 47a6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4772:	2100      	movs	r1, #0
    4774:	b672      	cpsid	i
    4776:	4812      	ldr	r0, [pc, #72]	; (47c0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4778:	6802      	ldr	r2, [r0, #0]
    477a:	6803      	ldr	r3, [r0, #0]
    477c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4780:	f043 0310 	orr.w	r3, r3, #16
    4784:	6003      	str	r3, [r0, #0]
    4786:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    478a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    478e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4792:	431c      	orrs	r4, r3
    4794:	d000      	beq.n	4798 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4796:	bf40      	sev
    4798:	bf20      	wfe
    479a:	bf00      	nop
    479c:	bf00      	nop
    479e:	bf00      	nop
    47a0:	bf00      	nop
    47a2:	b112      	cbz	r2, 47aa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    47a4:	e005      	b.n	47b2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    47a6:	2101      	movs	r1, #1
    47a8:	e7e4      	b.n	4774 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    47aa:	6802      	ldr	r2, [r0, #0]
    47ac:	f022 0210 	bic.w	r2, r2, #16
    47b0:	6002      	str	r2, [r0, #0]
    47b2:	2900      	cmp	r1, #0
    47b4:	d000      	beq.n	47b8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    47b6:	b662      	cpsie	i
    47b8:	bd10      	pop	{r4, pc}
    47ba:	bf20      	wfe
    47bc:	bd10      	pop	{r4, pc}
    47be:	0000      	.short	0x0000
    47c0:	e000ed10 	.word	0xe000ed10

000047c4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    47c4:	4901      	ldr	r1, [pc, #4]	; (47cc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    47c6:	2001      	movs	r0, #1
    47c8:	7088      	strb	r0, [r1, #2]
    47ca:	4770      	bx	lr
    47cc:	2000007c 	.word	0x2000007c

000047d0 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    47d0:	0000c723 0000c75b 0000c745 0000c733     #...[...E...3...
    47e0:	0000c73f 0000c72d 0000c721 0000c71f     ?...-...!.......
    47f0:	0000c757 0000c74b 0000c739 0000c727     W...K...9...'...
    4800:	0000c719 0000c711 0000c715 0000c70b     ................

00004810 <mpsl_fem_disable>:
    4810:	4801      	ldr	r0, [pc, #4]	; (4818 <mpsl_fem_disable+0x8>)
    4812:	6800      	ldr	r0, [r0, #0]
    4814:	6800      	ldr	r0, [r0, #0]
    4816:	4700      	bx	r0
    4818:	20000090 	.word	0x20000090

0000481c <mpsl_fem_lna_configuration_clear>:
    481c:	4801      	ldr	r0, [pc, #4]	; (4824 <mpsl_fem_lna_configuration_clear+0x8>)
    481e:	6800      	ldr	r0, [r0, #0]
    4820:	6940      	ldr	r0, [r0, #20]
    4822:	4700      	bx	r0
    4824:	20000090 	.word	0x20000090

00004828 <mpsl_fem_lna_configuration_set>:
    4828:	4a01      	ldr	r2, [pc, #4]	; (4830 <mpsl_fem_lna_configuration_set+0x8>)
    482a:	6812      	ldr	r2, [r2, #0]
    482c:	68d2      	ldr	r2, [r2, #12]
    482e:	4710      	bx	r2
    4830:	20000090 	.word	0x20000090

00004834 <mpsl_fem_lna_is_configured>:
    4834:	4901      	ldr	r1, [pc, #4]	; (483c <mpsl_fem_lna_is_configured+0x8>)
    4836:	6809      	ldr	r1, [r1, #0]
    4838:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    483a:	4708      	bx	r1
    483c:	20000090 	.word	0x20000090

00004840 <mpsl_fem_pa_configuration_clear>:
    4840:	4801      	ldr	r0, [pc, #4]	; (4848 <mpsl_fem_pa_configuration_clear+0x8>)
    4842:	6800      	ldr	r0, [r0, #0]
    4844:	6900      	ldr	r0, [r0, #16]
    4846:	4700      	bx	r0
    4848:	20000090 	.word	0x20000090

0000484c <mpsl_fem_pa_configuration_set>:
    484c:	4a01      	ldr	r2, [pc, #4]	; (4854 <mpsl_fem_pa_configuration_set+0x8>)
    484e:	6812      	ldr	r2, [r2, #0]
    4850:	6892      	ldr	r2, [r2, #8]
    4852:	4710      	bx	r2
    4854:	20000090 	.word	0x20000090

00004858 <mpsl_fem_pa_gain_set>:
    4858:	4901      	ldr	r1, [pc, #4]	; (4860 <mpsl_fem_pa_gain_set+0x8>)
    485a:	6809      	ldr	r1, [r1, #0]
    485c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    485e:	4708      	bx	r1
    4860:	20000090 	.word	0x20000090

00004864 <mpsl_fem_pa_is_configured>:
    4864:	4901      	ldr	r1, [pc, #4]	; (486c <mpsl_fem_pa_is_configured+0x8>)
    4866:	6809      	ldr	r1, [r1, #0]
    4868:	6a89      	ldr	r1, [r1, #40]	; 0x28
    486a:	4708      	bx	r1
    486c:	20000090 	.word	0x20000090

00004870 <mpsl_fem_tx_power_split>:
    4870:	4b01      	ldr	r3, [pc, #4]	; (4878 <mpsl_fem_tx_power_split+0x8>)
    4872:	681b      	ldr	r3, [r3, #0]
    4874:	685b      	ldr	r3, [r3, #4]
    4876:	4718      	bx	r3
    4878:	20000090 	.word	0x20000090

0000487c <mpsl_fem_device_config_254_apply_get>:
    487c:	4801      	ldr	r0, [pc, #4]	; (4884 <mpsl_fem_device_config_254_apply_get+0x8>)
    487e:	7800      	ldrb	r0, [r0, #0]
    4880:	4770      	bx	lr
    4882:	0000      	.short	0x0000
    4884:	20000353 	.word	0x20000353
    4888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    488a:	4c14      	ldr	r4, [pc, #80]	; (48dc <mpsl_fem_device_config_254_apply_get+0x60>)
    488c:	7a20      	ldrb	r0, [r4, #8]
    488e:	f88d 0001 	strb.w	r0, [sp, #1]
    4892:	79e0      	ldrb	r0, [r4, #7]
    4894:	f88d 0000 	strb.w	r0, [sp]
    4898:	79a0      	ldrb	r0, [r4, #6]
    489a:	f8ad 0004 	strh.w	r0, [sp, #4]
    489e:	7960      	ldrb	r0, [r4, #5]
    48a0:	f8ad 0002 	strh.w	r0, [sp, #2]
    48a4:	4668      	mov	r0, sp
    48a6:	f005 fe73 	bl	a590 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    48aa:	b108      	cbz	r0, 48b0 <mpsl_fem_device_config_254_apply_get+0x34>
    48ac:	2190      	movs	r1, #144	; 0x90
    48ae:	e010      	b.n	48d2 <mpsl_fem_device_config_254_apply_get+0x56>
    48b0:	68e0      	ldr	r0, [r4, #12]
    48b2:	9002      	str	r0, [sp, #8]
    48b4:	a802      	add	r0, sp, #8
    48b6:	f005 fe81 	bl	a5bc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    48ba:	b108      	cbz	r0, 48c0 <mpsl_fem_device_config_254_apply_get+0x44>
    48bc:	2194      	movs	r1, #148	; 0x94
    48be:	e008      	b.n	48d2 <mpsl_fem_device_config_254_apply_get+0x56>
    48c0:	4807      	ldr	r0, [pc, #28]	; (48e0 <mpsl_fem_device_config_254_apply_get+0x64>)
    48c2:	6800      	ldr	r0, [r0, #0]
    48c4:	9003      	str	r0, [sp, #12]
    48c6:	a803      	add	r0, sp, #12
    48c8:	f00b fafc 	bl	fec4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    48cc:	2800      	cmp	r0, #0
    48ce:	d003      	beq.n	48d8 <mpsl_fem_device_config_254_apply_get+0x5c>
    48d0:	2198      	movs	r1, #152	; 0x98
    48d2:	2003      	movs	r0, #3
    48d4:	f000 f8ea 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48d8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    48da:	0000      	.short	0x0000
    48dc:	20001204 	.word	0x20001204
    48e0:	00004bb4 	.word	0x00004bb4

000048e4 <sdc_build_revision_get>:
    48e4:	b510      	push	{r4, lr}
    48e6:	b128      	cbz	r0, 48f4 <sdc_build_revision_get+0x10>
    48e8:	2214      	movs	r2, #20
    48ea:	4904      	ldr	r1, [pc, #16]	; (48fc <sdc_build_revision_get+0x18>)
    48ec:	f007 fe33 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    48f0:	2000      	movs	r0, #0
    48f2:	bd10      	pop	{r4, pc}
    48f4:	f06f 0015 	mvn.w	r0, #21
    48f8:	bd10      	pop	{r4, pc}
    48fa:	0000      	.short	0x0000
    48fc:	00004bd8 	.word	0x00004bd8

00004900 <sdc_cfg_set>:
    4900:	b570      	push	{r4, r5, r6, lr}
    4902:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    4906:	bb90      	cbnz	r0, 496e <sdc_cfg_set+0x6e>
    4908:	4c24      	ldr	r4, [pc, #144]	; (499c <sdc_cfg_set+0x9c>)
    490a:	7860      	ldrb	r0, [r4, #1]
    490c:	b108      	cbz	r0, 4912 <sdc_cfg_set+0x12>
    490e:	1198      	asrs	r0, r3, #6
    4910:	bd70      	pop	{r4, r5, r6, pc}
    4912:	b309      	cbz	r1, 4958 <sdc_cfg_set+0x58>
    4914:	f06f 0515 	mvn.w	r5, #21
    4918:	b33a      	cbz	r2, 496a <sdc_cfg_set+0x6a>
    491a:	4821      	ldr	r0, [pc, #132]	; (49a0 <sdc_cfg_set+0xa0>)
    491c:	2908      	cmp	r1, #8
    491e:	d237      	bcs.n	4990 <sdc_cfg_set+0x90>
    4920:	e8df f001 	tbb	[pc, r1]
    4924:	0a070436 	.word	0x0a070436
    4928:	291e1b18 	.word	0x291e1b18
    492c:	7811      	ldrb	r1, [r2, #0]
    492e:	7001      	strb	r1, [r0, #0]
    4930:	e023      	b.n	497a <sdc_cfg_set+0x7a>
    4932:	7811      	ldrb	r1, [r2, #0]
    4934:	7041      	strb	r1, [r0, #1]
    4936:	e020      	b.n	497a <sdc_cfg_set+0x7a>
    4938:	7891      	ldrb	r1, [r2, #2]
    493a:	b1b1      	cbz	r1, 496a <sdc_cfg_set+0x6a>
    493c:	78d1      	ldrb	r1, [r2, #3]
    493e:	b1a1      	cbz	r1, 496a <sdc_cfg_set+0x6a>
    4940:	7811      	ldrb	r1, [r2, #0]
    4942:	291b      	cmp	r1, #27
    4944:	d311      	bcc.n	496a <sdc_cfg_set+0x6a>
    4946:	7851      	ldrb	r1, [r2, #1]
    4948:	291b      	cmp	r1, #27
    494a:	d30e      	bcc.n	496a <sdc_cfg_set+0x6a>
    494c:	6811      	ldr	r1, [r2, #0]
    494e:	f8c0 1005 	str.w	r1, [r0, #5]
    4952:	e012      	b.n	497a <sdc_cfg_set+0x7a>
    4954:	6811      	ldr	r1, [r2, #0]
    4956:	60c1      	str	r1, [r0, #12]
    4958:	e00f      	b.n	497a <sdc_cfg_set+0x7a>
    495a:	7811      	ldrb	r1, [r2, #0]
    495c:	7081      	strb	r1, [r0, #2]
    495e:	e00c      	b.n	497a <sdc_cfg_set+0x7a>
    4960:	78e1      	ldrb	r1, [r4, #3]
    4962:	b129      	cbz	r1, 4970 <sdc_cfg_set+0x70>
    4964:	7811      	ldrb	r1, [r2, #0]
    4966:	2902      	cmp	r1, #2
    4968:	d202      	bcs.n	4970 <sdc_cfg_set+0x70>
    496a:	4628      	mov	r0, r5
    496c:	bd70      	pop	{r4, r5, r6, pc}
    496e:	e00f      	b.n	4990 <sdc_cfg_set+0x90>
    4970:	7811      	ldrb	r1, [r2, #0]
    4972:	7401      	strb	r1, [r0, #16]
    4974:	e001      	b.n	497a <sdc_cfg_set+0x7a>
    4976:	8811      	ldrh	r1, [r2, #0]
    4978:	8241      	strh	r1, [r0, #18]
    497a:	2201      	movs	r2, #1
    497c:	4908      	ldr	r1, [pc, #32]	; (49a0 <sdc_cfg_set+0xa0>)
    497e:	2000      	movs	r0, #0
    4980:	f007 ff07 	bl	c792 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    4984:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4988:	db04      	blt.n	4994 <sdc_cfg_set+0x94>
    498a:	f06f 000b 	mvn.w	r0, #11
    498e:	e7ed      	b.n	496c <sdc_cfg_set+0x6c>
    4990:	4618      	mov	r0, r3
    4992:	e7eb      	b.n	496c <sdc_cfg_set+0x6c>
    4994:	2101      	movs	r1, #1
    4996:	70a1      	strb	r1, [r4, #2]
    4998:	e7e8      	b.n	496c <sdc_cfg_set+0x6c>
    499a:	0000      	.short	0x0000
    499c:	20000094 	.word	0x20000094
    49a0:	20001204 	.word	0x20001204

000049a4 <sdc_disable>:
    49a4:	b510      	push	{r4, lr}
    49a6:	4c07      	ldr	r4, [pc, #28]	; (49c4 <sdc_disable+0x20>)
    49a8:	7860      	ldrb	r0, [r4, #1]
    49aa:	b120      	cbz	r0, 49b6 <sdc_disable+0x12>
    49ac:	f006 f8aa 	bl	ab04 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    49b0:	7820      	ldrb	r0, [r4, #0]
    49b2:	f7ff fe8d 	bl	46d0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    49b6:	f000 fd85 	bl	54c4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    49ba:	f000 fe5f 	bl	567c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    49be:	2000      	movs	r0, #0
    49c0:	7060      	strb	r0, [r4, #1]
    49c2:	bd10      	pop	{r4, pc}
    49c4:	20000094 	.word	0x20000094

000049c8 <sdc_enable>:
    49c8:	b570      	push	{r4, r5, r6, lr}
    49ca:	460c      	mov	r4, r1
    49cc:	0005      	movs	r5, r0
    49ce:	d019      	beq.n	4a04 <sdc_enable+0x3c>
    49d0:	b1c4      	cbz	r4, 4a04 <sdc_enable+0x3c>
    49d2:	f000 f927 	bl	4c24 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    49d6:	b1c0      	cbz	r0, 4a0a <sdc_enable+0x42>
    49d8:	4628      	mov	r0, r5
    49da:	f7ff fe3f 	bl	465c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    49de:	4d0c      	ldr	r5, [pc, #48]	; (4a10 <sdc_enable+0x48>)
    49e0:	2200      	movs	r2, #0
    49e2:	490c      	ldr	r1, [pc, #48]	; (4a14 <sdc_enable+0x4c>)
    49e4:	7028      	strb	r0, [r5, #0]
    49e6:	4620      	mov	r0, r4
    49e8:	f007 fed3 	bl	c792 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x2e>
    49ec:	f00b fe6d 	bl	106ca <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    49f0:	2100      	movs	r1, #0
    49f2:	7828      	ldrb	r0, [r5, #0]
    49f4:	f006 f876 	bl	aae4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    49f8:	f7ff ff46 	bl	4888 <mpsl_fem_device_config_254_apply_get+0xc>
    49fc:	2001      	movs	r0, #1
    49fe:	7068      	strb	r0, [r5, #1]
    4a00:	2000      	movs	r0, #0
    4a02:	bd70      	pop	{r4, r5, r6, pc}
    4a04:	f06f 0015 	mvn.w	r0, #21
    4a08:	bd70      	pop	{r4, r5, r6, pc}
    4a0a:	f04f 30ff 	mov.w	r0, #4294967295
    4a0e:	bd70      	pop	{r4, r5, r6, pc}
    4a10:	20000094 	.word	0x20000094
    4a14:	20001204 	.word	0x20001204

00004a18 <sdc_init>:
    4a18:	b530      	push	{r4, r5, lr}
    4a1a:	b089      	sub	sp, #36	; 0x24
    4a1c:	0005      	movs	r5, r0
    4a1e:	d00c      	beq.n	4a3a <sdc_init+0x22>
    4a20:	f7ff fdc2 	bl	45a8 <mpsl_is_initialized>
    4a24:	f04f 34ff 	mov.w	r4, #4294967295
    4a28:	b120      	cbz	r0, 4a34 <sdc_init+0x1c>
    4a2a:	f7ff fc69 	bl	4300 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4a2e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4a32:	d905      	bls.n	4a40 <sdc_init+0x28>
    4a34:	4620      	mov	r0, r4
    4a36:	b009      	add	sp, #36	; 0x24
    4a38:	bd30      	pop	{r4, r5, pc}
    4a3a:	f06f 0015 	mvn.w	r0, #21
    4a3e:	e7fa      	b.n	4a36 <sdc_init+0x1e>
    4a40:	4c15      	ldr	r4, [pc, #84]	; (4a98 <sdc_init+0x80>)
    4a42:	4816      	ldr	r0, [pc, #88]	; (4a9c <sdc_init+0x84>)
    4a44:	6065      	str	r5, [r4, #4]
    4a46:	f000 fa0b 	bl	4e60 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4a4a:	2000      	movs	r0, #0
    4a4c:	7060      	strb	r0, [r4, #1]
    4a4e:	70a0      	strb	r0, [r4, #2]
    4a50:	70e0      	strb	r0, [r4, #3]
    4a52:	4601      	mov	r1, r0
    4a54:	2220      	movs	r2, #32
    4a56:	4668      	mov	r0, sp
    4a58:	f007 fdf7 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4a5c:	2220      	movs	r2, #32
    4a5e:	4910      	ldr	r1, [pc, #64]	; (4aa0 <sdc_init+0x88>)
    4a60:	4668      	mov	r0, sp
    4a62:	f007 fd78 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4a66:	2220      	movs	r2, #32
    4a68:	4669      	mov	r1, sp
    4a6a:	480e      	ldr	r0, [pc, #56]	; (4aa4 <sdc_init+0x8c>)
    4a6c:	f007 fd73 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4a70:	f3ef 8410 	mrs	r4, PRIMASK
    4a74:	b672      	cpsid	i
    4a76:	f06f 000c 	mvn.w	r0, #12
    4a7a:	f000 fd31 	bl	54e0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4a7e:	480a      	ldr	r0, [pc, #40]	; (4aa8 <sdc_init+0x90>)
    4a80:	f000 fe08 	bl	5694 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4a84:	b118      	cbz	r0, 4a8e <sdc_init+0x76>
    4a86:	21ab      	movs	r1, #171	; 0xab
    4a88:	2003      	movs	r0, #3
    4a8a:	f000 f80f 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a8e:	b904      	cbnz	r4, 4a92 <sdc_init+0x7a>
    4a90:	b662      	cpsie	i
    4a92:	2000      	movs	r0, #0
    4a94:	e7cf      	b.n	4a36 <sdc_init+0x1e>
    4a96:	0000      	.short	0x0000
    4a98:	20000094 	.word	0x20000094
    4a9c:	00004889 	.word	0x00004889
    4aa0:	00004bb8 	.word	0x00004bb8
    4aa4:	20001204 	.word	0x20001204
    4aa8:	00004c51 	.word	0x00004c51

00004aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4aac:	b50e      	push	{r1, r2, r3, lr}
    4aae:	b672      	cpsid	i
    4ab0:	4a15      	ldr	r2, [pc, #84]	; (4b08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4ab2:	6855      	ldr	r5, [r2, #4]
    4ab4:	b1dd      	cbz	r5, 4aee <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    4ab6:	2200      	movs	r2, #0
    4ab8:	4603      	mov	r3, r0
    4aba:	466e      	mov	r6, sp
    4abc:	240a      	movs	r4, #10
    4abe:	e003      	b.n	4ac8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4ac0:	fbb0 f0f4 	udiv	r0, r0, r4
    4ac4:	1c52      	adds	r2, r2, #1
    4ac6:	b2d2      	uxtb	r2, r2
    4ac8:	2800      	cmp	r0, #0
    4aca:	d1f9      	bne.n	4ac0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4acc:	54b0      	strb	r0, [r6, r2]
    4ace:	e00a      	b.n	4ae6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    4ad0:	b2d8      	uxtb	r0, r3
    4ad2:	fbb0 f7f4 	udiv	r7, r0, r4
    4ad6:	fbb3 f3f4 	udiv	r3, r3, r4
    4ada:	fb04 0017 	mls	r0, r4, r7, r0
    4ade:	1e52      	subs	r2, r2, #1
    4ae0:	b2d2      	uxtb	r2, r2
    4ae2:	3030      	adds	r0, #48	; 0x30
    4ae4:	54b0      	strb	r0, [r6, r2]
    4ae6:	2a00      	cmp	r2, #0
    4ae8:	d1f2      	bne.n	4ad0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4aea:	4630      	mov	r0, r6
    4aec:	47a8      	blx	r5
    4aee:	f3bf 8f4f 	dsb	sy
    4af2:	4806      	ldr	r0, [pc, #24]	; (4b0c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4af4:	6801      	ldr	r1, [r0, #0]
    4af6:	4a06      	ldr	r2, [pc, #24]	; (4b10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4af8:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4afc:	4311      	orrs	r1, r2
    4afe:	6001      	str	r1, [r0, #0]
    4b00:	f3bf 8f4f 	dsb	sy
    4b04:	bf00      	nop
    4b06:	e7fd      	b.n	4b04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    4b08:	20000094 	.word	0x20000094
    4b0c:	e000ed0c 	.word	0xe000ed0c
    4b10:	05fa0004 	.word	0x05fa0004

00004b14 <sdc_support_adv>:
    4b14:	4806      	ldr	r0, [pc, #24]	; (4b30 <sdc_support_adv+0x1c>)
    4b16:	b510      	push	{r4, lr}
    4b18:	7881      	ldrb	r1, [r0, #2]
    4b1a:	7840      	ldrb	r0, [r0, #1]
    4b1c:	4301      	orrs	r1, r0
    4b1e:	d002      	beq.n	4b26 <sdc_support_adv+0x12>
    4b20:	f04f 30ff 	mov.w	r0, #4294967295
    4b24:	bd10      	pop	{r4, pc}
    4b26:	f005 fffb 	bl	ab20 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4b2a:	2000      	movs	r0, #0
    4b2c:	bd10      	pop	{r4, pc}
    4b2e:	0000      	.short	0x0000
    4b30:	20000094 	.word	0x20000094

00004b34 <sdc_support_dle_peripheral>:
    4b34:	4806      	ldr	r0, [pc, #24]	; (4b50 <sdc_support_dle_peripheral+0x1c>)
    4b36:	b510      	push	{r4, lr}
    4b38:	7881      	ldrb	r1, [r0, #2]
    4b3a:	7840      	ldrb	r0, [r0, #1]
    4b3c:	4301      	orrs	r1, r0
    4b3e:	d002      	beq.n	4b46 <sdc_support_dle_peripheral+0x12>
    4b40:	f04f 30ff 	mov.w	r0, #4294967295
    4b44:	bd10      	pop	{r4, pc}
    4b46:	f005 fd51 	bl	a5ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    4b4a:	2000      	movs	r0, #0
    4b4c:	bd10      	pop	{r4, pc}
    4b4e:	0000      	.short	0x0000
    4b50:	20000094 	.word	0x20000094

00004b54 <sdc_support_le_2m_phy>:
    4b54:	4806      	ldr	r0, [pc, #24]	; (4b70 <sdc_support_le_2m_phy+0x1c>)
    4b56:	b510      	push	{r4, lr}
    4b58:	7881      	ldrb	r1, [r0, #2]
    4b5a:	7840      	ldrb	r0, [r0, #1]
    4b5c:	4301      	orrs	r1, r0
    4b5e:	d002      	beq.n	4b66 <sdc_support_le_2m_phy+0x12>
    4b60:	f04f 30ff 	mov.w	r0, #4294967295
    4b64:	bd10      	pop	{r4, pc}
    4b66:	f00b fb78 	bl	1025a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4b6a:	2000      	movs	r0, #0
    4b6c:	bd10      	pop	{r4, pc}
    4b6e:	0000      	.short	0x0000
    4b70:	20000094 	.word	0x20000094

00004b74 <sdc_support_peripheral>:
    4b74:	4806      	ldr	r0, [pc, #24]	; (4b90 <sdc_support_peripheral+0x1c>)
    4b76:	b510      	push	{r4, lr}
    4b78:	7881      	ldrb	r1, [r0, #2]
    4b7a:	7840      	ldrb	r0, [r0, #1]
    4b7c:	4301      	orrs	r1, r0
    4b7e:	d002      	beq.n	4b86 <sdc_support_peripheral+0x12>
    4b80:	f04f 30ff 	mov.w	r0, #4294967295
    4b84:	bd10      	pop	{r4, pc}
    4b86:	f005 ffdd 	bl	ab44 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4b8a:	2000      	movs	r0, #0
    4b8c:	bd10      	pop	{r4, pc}
    4b8e:	0000      	.short	0x0000
    4b90:	20000094 	.word	0x20000094

00004b94 <sdc_support_phy_update_peripheral>:
    4b94:	4806      	ldr	r0, [pc, #24]	; (4bb0 <sdc_support_phy_update_peripheral+0x1c>)
    4b96:	b510      	push	{r4, lr}
    4b98:	7881      	ldrb	r1, [r0, #2]
    4b9a:	7840      	ldrb	r0, [r0, #1]
    4b9c:	4301      	orrs	r1, r0
    4b9e:	d002      	beq.n	4ba6 <sdc_support_phy_update_peripheral+0x12>
    4ba0:	f04f 30ff 	mov.w	r0, #4294967295
    4ba4:	bd10      	pop	{r4, pc}
    4ba6:	f00b fb68 	bl	1027a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    4baa:	2000      	movs	r0, #0
    4bac:	bd10      	pop	{r4, pc}
    4bae:	0000      	.short	0x0000
    4bb0:	20000094 	.word	0x20000094
    4bb4:	00000001 	.word	0x00000001
    4bb8:	00010101 	.word	0x00010101
    4bbc:	031b1b00 	.word	0x031b1b00
    4bc0:	00000002 	.word	0x00000002
    4bc4:	00001d4c 	.word	0x00001d4c
    4bc8:	001f0003 	.word	0x001f0003
	...
    4bd8:	2a41906d 	.word	0x2a41906d
    4bdc:	17ade838 	.word	0x17ade838
    4be0:	3803a529 	.word	0x3803a529
    4be4:	85d72739 	.word	0x85d72739
    4be8:	e1d8851f 	.word	0xe1d8851f

00004bec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4bec:	4a05      	ldr	r2, [pc, #20]	; (4c04 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4bee:	b510      	push	{r4, lr}
    4bf0:	6852      	ldr	r2, [r2, #4]
    4bf2:	b112      	cbz	r2, 4bfa <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bf8:	4710      	bx	r2
    4bfa:	2192      	movs	r1, #146	; 0x92
    4bfc:	2004      	movs	r0, #4
    4bfe:	f7ff ff55 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c02:	0000      	.short	0x0000
    4c04:	20001224 	.word	0x20001224

00004c08 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4c08:	4a05      	ldr	r2, [pc, #20]	; (4c20 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4c0a:	b510      	push	{r4, lr}
    4c0c:	6892      	ldr	r2, [r2, #8]
    4c0e:	b112      	cbz	r2, 4c16 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c14:	4710      	bx	r2
    4c16:	2198      	movs	r1, #152	; 0x98
    4c18:	2004      	movs	r0, #4
    4c1a:	f7ff ff47 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c1e:	0000      	.short	0x0000
    4c20:	20001224 	.word	0x20001224

00004c24 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4c24:	4805      	ldr	r0, [pc, #20]	; (4c3c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4c26:	6801      	ldr	r1, [r0, #0]
    4c28:	b129      	cbz	r1, 4c36 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4c2a:	6841      	ldr	r1, [r0, #4]
    4c2c:	b119      	cbz	r1, 4c36 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4c2e:	6880      	ldr	r0, [r0, #8]
    4c30:	b108      	cbz	r0, 4c36 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4c32:	2001      	movs	r0, #1
    4c34:	4770      	bx	lr
    4c36:	2000      	movs	r0, #0
    4c38:	4770      	bx	lr
    4c3a:	0000      	.short	0x0000
    4c3c:	20001224 	.word	0x20001224

00004c40 <sdc_rand_source_register>:
    4c40:	4902      	ldr	r1, [pc, #8]	; (4c4c <sdc_rand_source_register+0xc>)
    4c42:	c80d      	ldmia	r0, {r0, r2, r3}
    4c44:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4c48:	2000      	movs	r0, #0
    4c4a:	4770      	bx	lr
    4c4c:	20001224 	.word	0x20001224

00004c50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c52:	4c12      	ldr	r4, [pc, #72]	; (4c9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4c54:	2600      	movs	r6, #0
    4c56:	6825      	ldr	r5, [r4, #0]
    4c58:	e011      	b.n	4c7e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4c5a:	9800      	ldr	r0, [sp, #0]
    4c5c:	2802      	cmp	r0, #2
    4c5e:	d002      	beq.n	4c66 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4c60:	2803      	cmp	r0, #3
    4c62:	d10c      	bne.n	4c7e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4c64:	e006      	b.n	4c74 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4c66:	6820      	ldr	r0, [r4, #0]
    4c68:	b110      	cbz	r0, 4c70 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4c6a:	2000      	movs	r0, #0
    4c6c:	6026      	str	r6, [r4, #0]
    4c6e:	e005      	b.n	4c7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4c70:	2128      	movs	r1, #40	; 0x28
    4c72:	e00c      	b.n	4c8e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4c74:	6820      	ldr	r0, [r4, #0]
    4c76:	b168      	cbz	r0, 4c94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4c78:	2001      	movs	r0, #1
    4c7a:	6026      	str	r6, [r4, #0]
    4c7c:	47a8      	blx	r5
    4c7e:	4668      	mov	r0, sp
    4c80:	f000 fcce 	bl	5620 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4c84:	2800      	cmp	r0, #0
    4c86:	d0e8      	beq.n	4c5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4c88:	2805      	cmp	r0, #5
    4c8a:	d005      	beq.n	4c98 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4c8c:	2135      	movs	r1, #53	; 0x35
    4c8e:	2004      	movs	r0, #4
    4c90:	f7ff ff0c 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c94:	212d      	movs	r1, #45	; 0x2d
    4c96:	e7fa      	b.n	4c8e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c9a:	0000      	.short	0x0000
    4c9c:	2000009c 	.word	0x2000009c

00004ca0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    4ca0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4ca4:	4c29      	ldr	r4, [pc, #164]	; (4d4c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4ca6:	4605      	mov	r5, r0
    4ca8:	1d00      	adds	r0, r0, #4
    4caa:	f504 7782 	add.w	r7, r4, #260	; 0x104
    4cae:	60a0      	str	r0, [r4, #8]
    4cb0:	7838      	ldrb	r0, [r7, #0]
    4cb2:	b158      	cbz	r0, 4ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    4cb4:	78ba      	ldrb	r2, [r7, #2]
    4cb6:	463c      	mov	r4, r7
    4cb8:	1c79      	adds	r1, r7, #1
    4cba:	4628      	mov	r0, r5
    4cbc:	1c92      	adds	r2, r2, #2
    4cbe:	f007 fc4a 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4cc2:	2000      	movs	r0, #0
    4cc4:	7020      	strb	r0, [r4, #0]
    4cc6:	2004      	movs	r0, #4
    4cc8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    4ccc:	481f      	ldr	r0, [pc, #124]	; (4d4c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4cce:	f001 fe97 	bl	6a00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4cd2:	4606      	mov	r6, r0
    4cd4:	2802      	cmp	r0, #2
    4cd6:	d002      	beq.n	4cde <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x3e>
    4cd8:	2e04      	cmp	r6, #4
    4cda:	d005      	beq.n	4ce8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x48>
    4cdc:	e026      	b.n	4d2c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    4cde:	491b      	ldr	r1, [pc, #108]	; (4d4c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4ce0:	4628      	mov	r0, r5
    4ce2:	f007 fdd5 	bl	c890 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    4ce6:	e021      	b.n	4d2c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8c>
    4ce8:	7820      	ldrb	r0, [r4, #0]
    4cea:	2811      	cmp	r0, #17
    4cec:	d104      	bne.n	4cf8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x58>
    4cee:	210a      	movs	r1, #10
    4cf0:	203e      	movs	r0, #62	; 0x3e
    4cf2:	f007 fd9f 	bl	c834 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    4cf6:	b118      	cbz	r0, 4d00 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x60>
    4cf8:	7820      	ldrb	r0, [r4, #0]
    4cfa:	2808      	cmp	r0, #8
    4cfc:	d005      	beq.n	4d0a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6a>
    4cfe:	e009      	b.n	4d14 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x74>
    4d00:	4912      	ldr	r1, [pc, #72]	; (4d4c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4d02:	4628      	mov	r0, r5
    4d04:	f007 ffbc 	bl	cc80 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4d08:	e00a      	b.n	4d20 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
    4d0a:	2105      	movs	r1, #5
    4d0c:	203e      	movs	r0, #62	; 0x3e
    4d0e:	f007 fd91 	bl	c834 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    4d12:	b168      	cbz	r0, 4d30 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    4d14:	490d      	ldr	r1, [pc, #52]	; (4d4c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>)
    4d16:	4628      	mov	r0, r5
    4d18:	f007 fde8 	bl	c8ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4d1c:	2800      	cmp	r0, #0
    4d1e:	d0c7      	beq.n	4cb0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    4d20:	78a9      	ldrb	r1, [r5, #2]
    4d22:	7828      	ldrb	r0, [r5, #0]
    4d24:	f007 fd86 	bl	c834 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    4d28:	2800      	cmp	r0, #0
    4d2a:	d0c1      	beq.n	4cb0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    4d2c:	4630      	mov	r0, r6
    4d2e:	e7cb      	b.n	4cc8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    4d30:	88a0      	ldrh	r0, [r4, #4]
    4d32:	f8ad 0000 	strh.w	r0, [sp]
    4d36:	a901      	add	r1, sp, #4
    4d38:	4668      	mov	r0, sp
    4d3a:	f008 f8d4 	bl	cee6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4d3e:	2800      	cmp	r0, #0
    4d40:	d0b6      	beq.n	4cb0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    4d42:	21aa      	movs	r1, #170	; 0xaa
    4d44:	2008      	movs	r0, #8
    4d46:	f7ff feb1 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d4a:	0000      	.short	0x0000
    4d4c:	20001230 	.word	0x20001230
    4d50:	b570      	push	{r4, r5, r6, lr}
    4d52:	780a      	ldrb	r2, [r1, #0]
    4d54:	7082      	strb	r2, [r0, #2]
    4d56:	b33a      	cbz	r2, 4da8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    4d58:	2a01      	cmp	r2, #1
    4d5a:	d825      	bhi.n	4da8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x108>
    4d5c:	2313      	movs	r3, #19
    4d5e:	7003      	strb	r3, [r0, #0]
    4d60:	2300      	movs	r3, #0
    4d62:	e00a      	b.n	4d7a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xda>
    4d64:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4d68:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4d6c:	78a6      	ldrb	r6, [r4, #2]
    4d6e:	70ee      	strb	r6, [r5, #3]
    4d70:	8864      	ldrh	r4, [r4, #2]
    4d72:	0a24      	lsrs	r4, r4, #8
    4d74:	1c5b      	adds	r3, r3, #1
    4d76:	712c      	strb	r4, [r5, #4]
    4d78:	b2db      	uxtb	r3, r3
    4d7a:	4293      	cmp	r3, r2
    4d7c:	d3f2      	bcc.n	4d64 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc4>
    4d7e:	2300      	movs	r3, #0
    4d80:	e00b      	b.n	4d9a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xfa>
    4d82:	bf00      	nop
    4d84:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4d88:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4d8c:	792e      	ldrb	r6, [r5, #4]
    4d8e:	7166      	strb	r6, [r4, #5]
    4d90:	88ad      	ldrh	r5, [r5, #4]
    4d92:	0a2d      	lsrs	r5, r5, #8
    4d94:	1c5b      	adds	r3, r3, #1
    4d96:	71a5      	strb	r5, [r4, #6]
    4d98:	b2db      	uxtb	r3, r3
    4d9a:	4293      	cmp	r3, r2
    4d9c:	d3f2      	bcc.n	4d84 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe4>
    4d9e:	2101      	movs	r1, #1
    4da0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4da4:	b2c0      	uxtb	r0, r0
    4da6:	bd70      	pop	{r4, r5, r6, pc}
    4da8:	2000      	movs	r0, #0
    4daa:	bd70      	pop	{r4, r5, r6, pc}

00004dac <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4dac:	2840      	cmp	r0, #64	; 0x40
    4dae:	d203      	bcs.n	4db8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    4db0:	1e40      	subs	r0, r0, #1
    4db2:	b2c1      	uxtb	r1, r0
    4db4:	4805      	ldr	r0, [pc, #20]	; (4dcc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4db6:	e005      	b.n	4dc4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    4db8:	28ff      	cmp	r0, #255	; 0xff
    4dba:	d005      	beq.n	4dc8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    4dbc:	3840      	subs	r0, #64	; 0x40
    4dbe:	b2c1      	uxtb	r1, r0
    4dc0:	4802      	ldr	r0, [pc, #8]	; (4dcc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    4dc2:	3008      	adds	r0, #8
    4dc4:	f007 bf86 	b.w	ccd4 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4dc8:	2001      	movs	r0, #1
    4dca:	4770      	bx	lr
    4dcc:	200000a0 	.word	0x200000a0

00004dd0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4dd0:	1e40      	subs	r0, r0, #1
    4dd2:	b2c1      	uxtb	r1, r0
    4dd4:	4801      	ldr	r0, [pc, #4]	; (4ddc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    4dd6:	f007 bf7d 	b.w	ccd4 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y+0x54>
    4dda:	0000      	.short	0x0000
    4ddc:	200000b0 	.word	0x200000b0

00004de0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4de0:	4902      	ldr	r1, [pc, #8]	; (4dec <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    4de2:	6802      	ldr	r2, [r0, #0]
    4de4:	610a      	str	r2, [r1, #16]
    4de6:	6840      	ldr	r0, [r0, #4]
    4de8:	6148      	str	r0, [r1, #20]
    4dea:	4770      	bx	lr
    4dec:	200000a0 	.word	0x200000a0

00004df0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4df0:	4905      	ldr	r1, [pc, #20]	; (4e08 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4df2:	6802      	ldr	r2, [r0, #0]
    4df4:	600a      	str	r2, [r1, #0]
    4df6:	6840      	ldr	r0, [r0, #4]
    4df8:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4dfc:	600a      	str	r2, [r1, #0]
    4dfe:	4a03      	ldr	r2, [pc, #12]	; (4e0c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    4e00:	4310      	orrs	r0, r2
    4e02:	6048      	str	r0, [r1, #4]
    4e04:	4770      	bx	lr
    4e06:	0000      	.short	0x0000
    4e08:	200000a0 	.word	0x200000a0
    4e0c:	024007f8 	.word	0x024007f8

00004e10 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4e10:	4902      	ldr	r1, [pc, #8]	; (4e1c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    4e12:	6802      	ldr	r2, [r0, #0]
    4e14:	608a      	str	r2, [r1, #8]
    4e16:	6840      	ldr	r0, [r0, #4]
    4e18:	60c8      	str	r0, [r1, #12]
    4e1a:	4770      	bx	lr
    4e1c:	200000a0 	.word	0x200000a0

00004e20 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4e20:	4807      	ldr	r0, [pc, #28]	; (4e40 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    4e22:	f04f 31ff 	mov.w	r1, #4294967295
    4e26:	2200      	movs	r2, #0
    4e28:	6001      	str	r1, [r0, #0]
    4e2a:	0cc9      	lsrs	r1, r1, #19
    4e2c:	6041      	str	r1, [r0, #4]
    4e2e:	f100 0108 	add.w	r1, r0, #8
    4e32:	201f      	movs	r0, #31
    4e34:	600a      	str	r2, [r1, #0]
    4e36:	604a      	str	r2, [r1, #4]
    4e38:	3108      	adds	r1, #8
    4e3a:	e9c1 0200 	strd	r0, r2, [r1]
    4e3e:	4770      	bx	lr
    4e40:	200000a0 	.word	0x200000a0

00004e44 <sdc_hci_cmd_cb_reset>:
    4e44:	b510      	push	{r4, lr}
    4e46:	f7ff ffeb 	bl	4e20 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4e4a:	f00b f97f 	bl	1014c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4e4e:	4604      	mov	r4, r0
    4e50:	4802      	ldr	r0, [pc, #8]	; (4e5c <sdc_hci_cmd_cb_reset+0x18>)
    4e52:	6800      	ldr	r0, [r0, #0]
    4e54:	b100      	cbz	r0, 4e58 <sdc_hci_cmd_cb_reset+0x14>
    4e56:	4780      	blx	r0
    4e58:	4620      	mov	r0, r4
    4e5a:	bd10      	pop	{r4, pc}
    4e5c:	200000b8 	.word	0x200000b8

00004e60 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4e60:	4901      	ldr	r1, [pc, #4]	; (4e68 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4e62:	6008      	str	r0, [r1, #0]
    4e64:	4770      	bx	lr
    4e66:	0000      	.short	0x0000
    4e68:	200000b8 	.word	0x200000b8

00004e6c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4e6c:	2102      	movs	r1, #2
    4e6e:	8001      	strh	r1, [r0, #0]
    4e70:	8041      	strh	r1, [r0, #2]
    4e72:	2100      	movs	r1, #0
    4e74:	7101      	strb	r1, [r0, #4]
    4e76:	216d      	movs	r1, #109	; 0x6d
    4e78:	7141      	strb	r1, [r0, #5]
    4e7a:	f244 1190 	movw	r1, #16784	; 0x4190
    4e7e:	80c1      	strh	r1, [r0, #6]
    4e80:	4901      	ldr	r1, [pc, #4]	; (4e88 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4e82:	6081      	str	r1, [r0, #8]
    4e84:	2000      	movs	r0, #0
    4e86:	4770      	bx	lr
    4e88:	ade8382a 	.word	0xade8382a

00004e8c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4e8c:	b510      	push	{r4, lr}
    4e8e:	2802      	cmp	r0, #2
    4e90:	d304      	bcc.n	4e9c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4e92:	f44f 7101 	mov.w	r1, #516	; 0x204
    4e96:	2017      	movs	r0, #23
    4e98:	f7ff fe08 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e9c:	4901      	ldr	r1, [pc, #4]	; (4ea4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4e9e:	5c08      	ldrb	r0, [r1, r0]
    4ea0:	bd10      	pop	{r4, pc}
    4ea2:	0000      	.short	0x0000
    4ea4:	20001438 	.word	0x20001438

00004ea8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4eaa:	0005      	movs	r5, r0
    4eac:	9500      	str	r5, [sp, #0]
    4eae:	d00d      	beq.n	4ecc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    4eb0:	2600      	movs	r6, #0
    4eb2:	7808      	ldrb	r0, [r1, #0]
    4eb4:	7849      	ldrb	r1, [r1, #1]
    4eb6:	4604      	mov	r4, r0
    4eb8:	42a1      	cmp	r1, r4
    4eba:	d900      	bls.n	4ebe <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    4ebc:	460c      	mov	r4, r1
    4ebe:	07aa      	lsls	r2, r5, #30
    4ec0:	d006      	beq.n	4ed0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    4ec2:	f240 11cb 	movw	r1, #459	; 0x1cb
    4ec6:	2017      	movs	r0, #23
    4ec8:	f7ff fdf0 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ecc:	2601      	movs	r6, #1
    4ece:	e7f0      	b.n	4eb2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    4ed0:	4f12      	ldr	r7, [pc, #72]	; (4f1c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    4ed2:	7038      	strb	r0, [r7, #0]
    4ed4:	7079      	strb	r1, [r7, #1]
    4ed6:	4631      	mov	r1, r6
    4ed8:	4668      	mov	r0, sp
    4eda:	f000 f8d3 	bl	5084 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    4ede:	2100      	movs	r1, #0
    4ee0:	460b      	mov	r3, r1
    4ee2:	9800      	ldr	r0, [sp, #0]
    4ee4:	1cc0      	adds	r0, r0, #3
    4ee6:	f020 0003 	bic.w	r0, r0, #3
    4eea:	9000      	str	r0, [sp, #0]
    4eec:	b966      	cbnz	r6, 4f08 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4eee:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    4ef2:	60d0      	str	r0, [r2, #12]
    4ef4:	2000      	movs	r0, #0
    4ef6:	e005      	b.n	4f04 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    4ef8:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4efc:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    4f00:	1c40      	adds	r0, r0, #1
    4f02:	b2c0      	uxtb	r0, r0
    4f04:	42a0      	cmp	r0, r4
    4f06:	d3f7      	bcc.n	4ef8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    4f08:	9800      	ldr	r0, [sp, #0]
    4f0a:	1c49      	adds	r1, r1, #1
    4f0c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4f10:	b2c9      	uxtb	r1, r1
    4f12:	9000      	str	r0, [sp, #0]
    4f14:	2902      	cmp	r1, #2
    4f16:	d3e4      	bcc.n	4ee2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    4f18:	1b40      	subs	r0, r0, r5
    4f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f1c:	20001438 	.word	0x20001438

00004f20 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4f20:	b570      	push	{r4, r5, r6, lr}
    4f22:	4604      	mov	r4, r0
    4f24:	7985      	ldrb	r5, [r0, #6]
    4f26:	f000 f8e9 	bl	50fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    4f2a:	4a0c      	ldr	r2, [pc, #48]	; (4f5c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    4f2c:	79e1      	ldrb	r1, [r4, #7]
    4f2e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    4f32:	e00e      	b.n	4f52 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    4f34:	68d3      	ldr	r3, [r2, #12]
    4f36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4f3a:	b143      	cbz	r3, 4f4e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    4f3c:	1c48      	adds	r0, r1, #1
    4f3e:	71e0      	strb	r0, [r4, #7]
    4f40:	80a1      	strh	r1, [r4, #4]
    4f42:	68d0      	ldr	r0, [r2, #12]
    4f44:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4f48:	6020      	str	r0, [r4, #0]
    4f4a:	2000      	movs	r0, #0
    4f4c:	bd70      	pop	{r4, r5, r6, pc}
    4f4e:	1c49      	adds	r1, r1, #1
    4f50:	b2c9      	uxtb	r1, r1
    4f52:	4281      	cmp	r1, r0
    4f54:	d3ee      	bcc.n	4f34 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    4f56:	71e1      	strb	r1, [r4, #7]
    4f58:	2005      	movs	r0, #5
    4f5a:	bd70      	pop	{r4, r5, r6, pc}
    4f5c:	20001438 	.word	0x20001438

00004f60 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4f60:	b4f0      	push	{r4, r5, r6, r7}
    4f62:	b121      	cbz	r1, 4f6e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4f64:	2901      	cmp	r1, #1
    4f66:	d002      	beq.n	4f6e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    4f68:	bcf0      	pop	{r4, r5, r6, r7}
    4f6a:	2000      	movs	r0, #0
    4f6c:	4770      	bx	lr
    4f6e:	4a0f      	ldr	r2, [pc, #60]	; (4fac <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4f70:	2500      	movs	r5, #0
    4f72:	462b      	mov	r3, r5
    4f74:	f64f 74ff 	movw	r4, #65535	; 0xffff
    4f78:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    4f7c:	5c57      	ldrb	r7, [r2, r1]
    4f7e:	e00a      	b.n	4f96 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    4f80:	195a      	adds	r2, r3, r5
    4f82:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    4f86:	b292      	uxth	r2, r2
    4f88:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    4f8c:	f1bc 0f00 	cmp.w	ip, #0
    4f90:	d004      	beq.n	4f9c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    4f92:	1c5b      	adds	r3, r3, #1
    4f94:	b29b      	uxth	r3, r3
    4f96:	429f      	cmp	r7, r3
    4f98:	d8f2      	bhi.n	4f80 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    4f9a:	4622      	mov	r2, r4
    4f9c:	8002      	strh	r2, [r0, #0]
    4f9e:	4610      	mov	r0, r2
    4fa0:	42a2      	cmp	r2, r4
    4fa2:	d0e1      	beq.n	4f68 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    4fa4:	bcf0      	pop	{r4, r5, r6, r7}
    4fa6:	f000 b835 	b.w	5014 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4faa:	0000      	.short	0x0000
    4fac:	20001438 	.word	0x20001438

00004fb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fb4:	4606      	mov	r6, r0
    4fb6:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4fba:	460c      	mov	r4, r1
    4fbc:	f243 0702 	movw	r7, #12290	; 0x3002
    4fc0:	38ff      	subs	r0, #255	; 0xff
    4fc2:	d020      	beq.n	5006 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4fc4:	2c02      	cmp	r4, #2
    4fc6:	d302      	bcc.n	4fce <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4fc8:	2007      	movs	r0, #7
    4fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fce:	4630      	mov	r0, r6
    4fd0:	f000 f848 	bl	5064 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4fd4:	0005      	movs	r5, r0
    4fd6:	d016      	beq.n	5006 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4fd8:	480c      	ldr	r0, [pc, #48]	; (500c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4fda:	4629      	mov	r1, r5
    4fdc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4fe0:	4630      	mov	r0, r6
    4fe2:	4790      	blx	r2
    4fe4:	480a      	ldr	r0, [pc, #40]	; (5010 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4fe6:	2100      	movs	r1, #0
    4fe8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4fec:	68f8      	ldr	r0, [r7, #12]
    4fee:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4ff2:	4620      	mov	r0, r4
    4ff4:	f000 f878 	bl	50e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4ff8:	4602      	mov	r2, r0
    4ffa:	4629      	mov	r1, r5
    4ffc:	6878      	ldr	r0, [r7, #4]
    4ffe:	f008 fa04 	bl	d40a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5002:	2000      	movs	r0, #0
    5004:	e7e1      	b.n	4fca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    5006:	4638      	mov	r0, r7
    5008:	e7df      	b.n	4fca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    500a:	0000      	.short	0x0000
    500c:	00005114 	.word	0x00005114
    5010:	20001438 	.word	0x20001438
    5014:	b570      	push	{r4, r5, r6, lr}
    5016:	460e      	mov	r6, r1
    5018:	4605      	mov	r5, r0
    501a:	f008 fa30 	bl	d47e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    501e:	b158      	cbz	r0, 5038 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    5020:	480f      	ldr	r0, [pc, #60]	; (5060 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    5022:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    5026:	68e0      	ldr	r0, [r4, #12]
    5028:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    502c:	b138      	cbz	r0, 503e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    502e:	f240 118b 	movw	r1, #395	; 0x18b
    5032:	2017      	movs	r0, #23
    5034:	f7ff fd3a 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5038:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    503c:	e7f9      	b.n	5032 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    503e:	6860      	ldr	r0, [r4, #4]
    5040:	2800      	cmp	r0, #0
    5042:	d00b      	beq.n	505c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    5044:	4630      	mov	r0, r6
    5046:	f000 f84f 	bl	50e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    504a:	4601      	mov	r1, r0
    504c:	6860      	ldr	r0, [r4, #4]
    504e:	f008 f984 	bl	d35a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5052:	2800      	cmp	r0, #0
    5054:	d002      	beq.n	505c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    5056:	68e1      	ldr	r1, [r4, #12]
    5058:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    505c:	bd70      	pop	{r4, r5, r6, pc}
    505e:	0000      	.short	0x0000
    5060:	20001438 	.word	0x20001438
    5064:	b570      	push	{r4, r5, r6, lr}
    5066:	460c      	mov	r4, r1
    5068:	4605      	mov	r5, r0
    506a:	f008 fa08 	bl	d47e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    506e:	2800      	cmp	r0, #0
    5070:	d005      	beq.n	507e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    5072:	4803      	ldr	r0, [pc, #12]	; (5080 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    5074:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5078:	68c0      	ldr	r0, [r0, #12]
    507a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    507e:	bd70      	pop	{r4, r5, r6, pc}
    5080:	20001438 	.word	0x20001438
    5084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5088:	4e16      	ldr	r6, [pc, #88]	; (50e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    508a:	4688      	mov	r8, r1
    508c:	4605      	mov	r5, r0
    508e:	2400      	movs	r4, #0
    5090:	6828      	ldr	r0, [r5, #0]
    5092:	1cc0      	adds	r0, r0, #3
    5094:	f020 0003 	bic.w	r0, r0, #3
    5098:	6028      	str	r0, [r5, #0]
    509a:	4620      	mov	r0, r4
    509c:	f000 f824 	bl	50e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    50a0:	5d31      	ldrb	r1, [r6, r4]
    50a2:	4348      	muls	r0, r1
    50a4:	f1b8 0f00 	cmp.w	r8, #0
    50a8:	d001      	beq.n	50ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    50aa:	2200      	movs	r2, #0
    50ac:	e000      	b.n	50b0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    50ae:	682a      	ldr	r2, [r5, #0]
    50b0:	4601      	mov	r1, r0
    50b2:	9200      	str	r2, [sp, #0]
    50b4:	b132      	cbz	r2, 50c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    50b6:	2700      	movs	r7, #0
    50b8:	ea4f 000d 	mov.w	r0, sp
    50bc:	f008 f97e 	bl	d3bc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    50c0:	b11f      	cbz	r7, 50ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    50c2:	e006      	b.n	50d2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    50c4:	2701      	movs	r7, #1
    50c6:	2000      	movs	r0, #0
    50c8:	e7f8      	b.n	50bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    50ca:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    50ce:	9a00      	ldr	r2, [sp, #0]
    50d0:	604a      	str	r2, [r1, #4]
    50d2:	6829      	ldr	r1, [r5, #0]
    50d4:	1c64      	adds	r4, r4, #1
    50d6:	4408      	add	r0, r1
    50d8:	b2e4      	uxtb	r4, r4
    50da:	6028      	str	r0, [r5, #0]
    50dc:	2c02      	cmp	r4, #2
    50de:	d3d7      	bcc.n	5090 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    50e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50e4:	20001438 	.word	0x20001438
    50e8:	4903      	ldr	r1, [pc, #12]	; (50f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    50ea:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    50ee:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    50f2:	1cc0      	adds	r0, r0, #3
    50f4:	4008      	ands	r0, r1
    50f6:	4770      	bx	lr
    50f8:	00005110 	.word	0x00005110
    50fc:	4903      	ldr	r1, [pc, #12]	; (510c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    50fe:	7808      	ldrb	r0, [r1, #0]
    5100:	7849      	ldrb	r1, [r1, #1]
    5102:	4288      	cmp	r0, r1
    5104:	d200      	bcs.n	5108 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    5106:	4608      	mov	r0, r1
    5108:	4770      	bx	lr
    510a:	0000      	.short	0x0000
    510c:	20001438 	.word	0x20001438
    5110:	011802e8 	.word	0x011802e8
    5114:	0000f2ab 	.word	0x0000f2ab
    5118:	0000e61f 	.word	0x0000e61f

0000511c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    511c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5120:	4c24      	ldr	r4, [pc, #144]	; (51b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    5122:	4606      	mov	r6, r0
    5124:	b081      	sub	sp, #4
    5126:	6820      	ldr	r0, [r4, #0]
    5128:	469a      	mov	sl, r3
    512a:	4693      	mov	fp, r2
    512c:	b158      	cbz	r0, 5146 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    512e:	7a01      	ldrb	r1, [r0, #8]
    5130:	42b1      	cmp	r1, r6
    5132:	d903      	bls.n	513c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5134:	6840      	ldr	r0, [r0, #4]
    5136:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    513a:	b140      	cbz	r0, 514e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    513c:	f243 0002 	movw	r0, #12290	; 0x3002
    5140:	b005      	add	sp, #20
    5142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5146:	21a5      	movs	r1, #165	; 0xa5
    5148:	2018      	movs	r0, #24
    514a:	f7ff fcaf 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    514e:	4619      	mov	r1, r3
    5150:	9802      	ldr	r0, [sp, #8]
    5152:	f008 f9b7 	bl	d4c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    5156:	4680      	mov	r8, r0
    5158:	4658      	mov	r0, fp
    515a:	990e      	ldr	r1, [sp, #56]	; 0x38
    515c:	f008 f9a8 	bl	d4b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    5160:	4605      	mov	r5, r0
    5162:	eb08 0005 	add.w	r0, r8, r5
    5166:	1d00      	adds	r0, r0, #4
    5168:	b287      	uxth	r7, r0
    516a:	6820      	ldr	r0, [r4, #0]
    516c:	46a1      	mov	r9, r4
    516e:	4639      	mov	r1, r7
    5170:	6800      	ldr	r0, [r0, #0]
    5172:	f008 f8f2 	bl	d35a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5176:	0004      	movs	r4, r0
    5178:	d01a      	beq.n	51b0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    517a:	8067      	strh	r7, [r4, #2]
    517c:	8025      	strh	r5, [r4, #0]
    517e:	4629      	mov	r1, r5
    5180:	1d20      	adds	r0, r4, #4
    5182:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5184:	4607      	mov	r7, r0
    5186:	465a      	mov	r2, fp
    5188:	2309      	movs	r3, #9
    518a:	9500      	str	r5, [sp, #0]
    518c:	f008 f85b 	bl	d246 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5190:	8820      	ldrh	r0, [r4, #0]
    5192:	4641      	mov	r1, r8
    5194:	4438      	add	r0, r7
    5196:	230a      	movs	r3, #10
    5198:	9a02      	ldr	r2, [sp, #8]
    519a:	f8cd a000 	str.w	sl, [sp]
    519e:	f008 f852 	bl	d246 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    51a2:	f8d9 0000 	ldr.w	r0, [r9]
    51a6:	6840      	ldr	r0, [r0, #4]
    51a8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    51ac:	2000      	movs	r0, #0
    51ae:	e7c7      	b.n	5140 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    51b0:	2004      	movs	r0, #4
    51b2:	e7c5      	b.n	5140 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    51b4:	200000bc 	.word	0x200000bc

000051b8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    51b8:	b570      	push	{r4, r5, r6, lr}
    51ba:	4c14      	ldr	r4, [pc, #80]	; (520c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    51bc:	6823      	ldr	r3, [r4, #0]
    51be:	b18b      	cbz	r3, 51e4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    51c0:	7a19      	ldrb	r1, [r3, #8]
    51c2:	4281      	cmp	r1, r0
    51c4:	d912      	bls.n	51ec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    51c6:	685a      	ldr	r2, [r3, #4]
    51c8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    51cc:	b171      	cbz	r1, 51ec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    51ce:	2500      	movs	r5, #0
    51d0:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    51d4:	884a      	ldrh	r2, [r1, #2]
    51d6:	6818      	ldr	r0, [r3, #0]
    51d8:	f008 f917 	bl	d40a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    51dc:	6821      	ldr	r1, [r4, #0]
    51de:	2000      	movs	r0, #0
    51e0:	7a0a      	ldrb	r2, [r1, #8]
    51e2:	e00c      	b.n	51fe <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    51e4:	21c6      	movs	r1, #198	; 0xc6
    51e6:	2018      	movs	r0, #24
    51e8:	f7ff fc60 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51ec:	f243 0002 	movw	r0, #12290	; 0x3002
    51f0:	bd70      	pop	{r4, r5, r6, pc}
    51f2:	684b      	ldr	r3, [r1, #4]
    51f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    51f8:	b933      	cbnz	r3, 5208 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    51fa:	1c40      	adds	r0, r0, #1
    51fc:	b2c0      	uxtb	r0, r0
    51fe:	4282      	cmp	r2, r0
    5200:	d8f7      	bhi.n	51f2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    5202:	6808      	ldr	r0, [r1, #0]
    5204:	f008 f8f6 	bl	d3f4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    5208:	2000      	movs	r0, #0
    520a:	bd70      	pop	{r4, r5, r6, pc}
    520c:	200000bc 	.word	0x200000bc

00005210 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5214:	460d      	mov	r5, r1
    5216:	0004      	movs	r4, r0
    5218:	4690      	mov	r8, r2
    521a:	f04f 0600 	mov.w	r6, #0
    521e:	d006      	beq.n	522e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    5220:	2700      	movs	r7, #0
    5222:	07a0      	lsls	r0, r4, #30
    5224:	d005      	beq.n	5232 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    5226:	2186      	movs	r1, #134	; 0x86
    5228:	2018      	movs	r0, #24
    522a:	f7ff fc3f 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    522e:	2701      	movs	r7, #1
    5230:	e7f7      	b.n	5222 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5232:	b1cd      	cbz	r5, 5268 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    5234:	4611      	mov	r1, r2
    5236:	2000      	movs	r0, #0
    5238:	f008 f8c0 	bl	d3bc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    523c:	300c      	adds	r0, #12
    523e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5242:	b98f      	cbnz	r7, 5268 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    5244:	4f0a      	ldr	r7, [pc, #40]	; (5270 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    5246:	f104 000c 	add.w	r0, r4, #12
    524a:	00aa      	lsls	r2, r5, #2
    524c:	603c      	str	r4, [r7, #0]
    524e:	7225      	strb	r5, [r4, #8]
    5250:	6060      	str	r0, [r4, #4]
    5252:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5256:	6020      	str	r0, [r4, #0]
    5258:	2100      	movs	r1, #0
    525a:	6860      	ldr	r0, [r4, #4]
    525c:	f007 f9f5 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5260:	4641      	mov	r1, r8
    5262:	6838      	ldr	r0, [r7, #0]
    5264:	f008 f8aa 	bl	d3bc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5268:	4630      	mov	r0, r6
    526a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    526e:	0000      	.short	0x0000
    5270:	200000bc 	.word	0x200000bc

00005274 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5274:	b570      	push	{r4, r5, r6, lr}
    5276:	4d08      	ldr	r5, [pc, #32]	; (5298 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5278:	6828      	ldr	r0, [r5, #0]
    527a:	2800      	cmp	r0, #0
    527c:	d00a      	beq.n	5294 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    527e:	2400      	movs	r4, #0
    5280:	e004      	b.n	528c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    5282:	4620      	mov	r0, r4
    5284:	f7ff ff98 	bl	51b8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5288:	1c64      	adds	r4, r4, #1
    528a:	b2e4      	uxtb	r4, r4
    528c:	6828      	ldr	r0, [r5, #0]
    528e:	7a00      	ldrb	r0, [r0, #8]
    5290:	42a0      	cmp	r0, r4
    5292:	d8f6      	bhi.n	5282 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5294:	bd70      	pop	{r4, r5, r6, pc}
    5296:	0000      	.short	0x0000
    5298:	200000bc 	.word	0x200000bc

0000529c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    529c:	4909      	ldr	r1, [pc, #36]	; (52c4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    529e:	b510      	push	{r4, lr}
    52a0:	4602      	mov	r2, r0
    52a2:	6809      	ldr	r1, [r1, #0]
    52a4:	2000      	movs	r0, #0
    52a6:	b149      	cbz	r1, 52bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    52a8:	7a0b      	ldrb	r3, [r1, #8]
    52aa:	4293      	cmp	r3, r2
    52ac:	d905      	bls.n	52ba <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    52ae:	6849      	ldr	r1, [r1, #4]
    52b0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    52b4:	2900      	cmp	r1, #0
    52b6:	d000      	beq.n	52ba <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    52b8:	1d08      	adds	r0, r1, #4
    52ba:	bd10      	pop	{r4, pc}
    52bc:	21ec      	movs	r1, #236	; 0xec
    52be:	2018      	movs	r0, #24
    52c0:	f7ff fbf4 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52c4:	200000bc 	.word	0x200000bc

000052c8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    52c8:	490a      	ldr	r1, [pc, #40]	; (52f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    52ca:	b510      	push	{r4, lr}
    52cc:	4602      	mov	r2, r0
    52ce:	6809      	ldr	r1, [r1, #0]
    52d0:	2000      	movs	r0, #0
    52d2:	b159      	cbz	r1, 52ec <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    52d4:	7a0b      	ldrb	r3, [r1, #8]
    52d6:	4293      	cmp	r3, r2
    52d8:	d907      	bls.n	52ea <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    52da:	6849      	ldr	r1, [r1, #4]
    52dc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    52e0:	2900      	cmp	r1, #0
    52e2:	d002      	beq.n	52ea <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    52e4:	f831 0b04 	ldrh.w	r0, [r1], #4
    52e8:	4408      	add	r0, r1
    52ea:	bd10      	pop	{r4, pc}
    52ec:	21fa      	movs	r1, #250	; 0xfa
    52ee:	2018      	movs	r0, #24
    52f0:	f7ff fbdc 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52f4:	200000bc 	.word	0x200000bc
    52f8:	b570      	push	{r4, r5, r6, lr}
    52fa:	4b1e      	ldr	r3, [pc, #120]	; (5374 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    52fc:	6845      	ldr	r5, [r0, #4]
    52fe:	4604      	mov	r4, r0
    5300:	2200      	movs	r2, #0
    5302:	b1a1      	cbz	r1, 532e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    5304:	2001      	movs	r0, #1
    5306:	7060      	strb	r0, [r4, #1]
    5308:	8858      	ldrh	r0, [r3, #2]
    530a:	0881      	lsrs	r1, r0, #2
    530c:	f05f 0000 	movs.w	r0, #0
    5310:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5314:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5318:	831a      	strh	r2, [r3, #24]
    531a:	8419      	strh	r1, [r3, #32]
    531c:	fb00 5301 	mla	r3, r0, r1, r5
    5320:	6073      	str	r3, [r6, #4]
    5322:	1823      	adds	r3, r4, r0
    5324:	1c40      	adds	r0, r0, #1
    5326:	751a      	strb	r2, [r3, #20]
    5328:	2804      	cmp	r0, #4
    532a:	d3f1      	bcc.n	5310 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    532c:	bd70      	pop	{r4, r5, r6, pc}
    532e:	7062      	strb	r2, [r4, #1]
    5330:	f05f 0000 	movs.w	r0, #0
    5334:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5338:	830a      	strh	r2, [r1, #24]
    533a:	840a      	strh	r2, [r1, #32]
    533c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5340:	604a      	str	r2, [r1, #4]
    5342:	1821      	adds	r1, r4, r0
    5344:	1c40      	adds	r0, r0, #1
    5346:	750a      	strb	r2, [r1, #20]
    5348:	2804      	cmp	r0, #4
    534a:	d3f3      	bcc.n	5334 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    534c:	8858      	ldrh	r0, [r3, #2]
    534e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5352:	d201      	bcs.n	5358 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5354:	0846      	lsrs	r6, r0, #1
    5356:	e000      	b.n	535a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5358:	26ff      	movs	r6, #255	; 0xff
    535a:	f008 f927 	bl	d5ac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    535e:	6065      	str	r5, [r4, #4]
    5360:	8420      	strh	r0, [r4, #32]
    5362:	1829      	adds	r1, r5, r0
    5364:	60a1      	str	r1, [r4, #8]
    5366:	8466      	strh	r6, [r4, #34]	; 0x22
    5368:	60e5      	str	r5, [r4, #12]
    536a:	84a0      	strh	r0, [r4, #36]	; 0x24
    536c:	6121      	str	r1, [r4, #16]
    536e:	84e6      	strh	r6, [r4, #38]	; 0x26
    5370:	bd70      	pop	{r4, r5, r6, pc}
    5372:	0000      	.short	0x0000
    5374:	200000c0 	.word	0x200000c0

00005378 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    537c:	b158      	cbz	r0, 5396 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    537e:	2500      	movs	r5, #0
    5380:	4411      	add	r1, r2
    5382:	4e24      	ldr	r6, [pc, #144]	; (5414 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    5384:	b2cc      	uxtb	r4, r1
    5386:	2700      	movs	r7, #0
    5388:	7034      	strb	r4, [r6, #0]
    538a:	0781      	lsls	r1, r0, #30
    538c:	d005      	beq.n	539a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    538e:	214e      	movs	r1, #78	; 0x4e
    5390:	2009      	movs	r0, #9
    5392:	f7ff fb8b 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5396:	2501      	movs	r5, #1
    5398:	e7f2      	b.n	5380 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    539a:	2b1f      	cmp	r3, #31
    539c:	d804      	bhi.n	53a8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    539e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    53a2:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    53a6:	e009      	b.n	53bc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    53a8:	0059      	lsls	r1, r3, #1
    53aa:	2bff      	cmp	r3, #255	; 0xff
    53ac:	d90c      	bls.n	53c8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    53ae:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    53b2:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    53b6:	d200      	bcs.n	53ba <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    53b8:	4611      	mov	r1, r2
    53ba:	b289      	uxth	r1, r1
    53bc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    53c0:	1cc9      	adds	r1, r1, #3
    53c2:	4011      	ands	r1, r2
    53c4:	b135      	cbz	r5, 53d4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    53c6:	e007      	b.n	53d8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    53c8:	227c      	movs	r2, #124	; 0x7c
    53ca:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    53ce:	d3f4      	bcc.n	53ba <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    53d0:	217c      	movs	r1, #124	; 0x7c
    53d2:	e7f2      	b.n	53ba <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    53d4:	6070      	str	r0, [r6, #4]
    53d6:	8071      	strh	r1, [r6, #2]
    53d8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    53dc:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    53e0:	2200      	movs	r2, #0
    53e2:	6876      	ldr	r6, [r6, #4]
    53e4:	f04f 0c01 	mov.w	ip, #1
    53e8:	e00d      	b.n	5406 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    53ea:	b94d      	cbnz	r5, 5400 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    53ec:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    53f0:	eb00 0e03 	add.w	lr, r0, r3
    53f4:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    53f8:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    53fc:	f8c7 e004 	str.w	lr, [r7, #4]
    5400:	1c52      	adds	r2, r2, #1
    5402:	440b      	add	r3, r1
    5404:	b2d2      	uxtb	r2, r2
    5406:	42a2      	cmp	r2, r4
    5408:	d3ef      	bcc.n	53ea <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    540a:	1ddb      	adds	r3, r3, #7
    540c:	f023 0007 	bic.w	r0, r3, #7
    5410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5414:	200000c0 	.word	0x200000c0

00005418 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5418:	b570      	push	{r4, r5, r6, lr}
    541a:	4a10      	ldr	r2, [pc, #64]	; (545c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    541c:	2000      	movs	r0, #0
    541e:	6851      	ldr	r1, [r2, #4]
    5420:	7812      	ldrb	r2, [r2, #0]
    5422:	e014      	b.n	544e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5424:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5428:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    542c:	b16b      	cbz	r3, 544a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    542e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5432:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    5436:	d00c      	beq.n	5452 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    5438:	2500      	movs	r5, #0
    543a:	70a5      	strb	r5, [r4, #2]
    543c:	2101      	movs	r1, #1
    543e:	4620      	mov	r0, r4
    5440:	f7ff ff5a 	bl	52f8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5444:	7025      	strb	r5, [r4, #0]
    5446:	4620      	mov	r0, r4
    5448:	bd70      	pop	{r4, r5, r6, pc}
    544a:	1c40      	adds	r0, r0, #1
    544c:	b2c0      	uxtb	r0, r0
    544e:	4290      	cmp	r0, r2
    5450:	d3e8      	bcc.n	5424 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5452:	21a9      	movs	r1, #169	; 0xa9
    5454:	2009      	movs	r0, #9
    5456:	f7ff fb29 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    545a:	0000      	.short	0x0000
    545c:	200000c0 	.word	0x200000c0

00005460 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5460:	4804      	ldr	r0, [pc, #16]	; (5474 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5462:	b510      	push	{r4, lr}
    5464:	8840      	ldrh	r0, [r0, #2]
    5466:	0884      	lsrs	r4, r0, #2
    5468:	f008 f8a0 	bl	d5ac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    546c:	4284      	cmp	r4, r0
    546e:	d300      	bcc.n	5472 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5470:	4620      	mov	r0, r4
    5472:	bd10      	pop	{r4, pc}
    5474:	200000c0 	.word	0x200000c0
    5478:	b530      	push	{r4, r5, lr}
    547a:	490d      	ldr	r1, [pc, #52]	; (54b0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    547c:	2001      	movs	r0, #1
    547e:	6048      	str	r0, [r1, #4]
    5480:	1e82      	subs	r2, r0, #2
    5482:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5486:	490b      	ldr	r1, [pc, #44]	; (54b4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    5488:	6088      	str	r0, [r1, #8]
    548a:	2300      	movs	r3, #0
    548c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    5490:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5494:	4c08      	ldr	r4, [pc, #32]	; (54b8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    5496:	6023      	str	r3, [r4, #0]
    5498:	1d25      	adds	r5, r4, #4
    549a:	6028      	str	r0, [r5, #0]
    549c:	6088      	str	r0, [r1, #8]
    549e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    54a2:	6023      	str	r3, [r4, #0]
    54a4:	6028      	str	r0, [r5, #0]
    54a6:	4906      	ldr	r1, [pc, #24]	; (54c0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    54a8:	4804      	ldr	r0, [pc, #16]	; (54bc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    54aa:	6008      	str	r0, [r1, #0]
    54ac:	bd30      	pop	{r4, r5, pc}
    54ae:	0000      	.short	0x0000
    54b0:	4000e000 	.word	0x4000e000
    54b4:	4000f000 	.word	0x4000f000
    54b8:	4000f500 	.word	0x4000f500
    54bc:	3ff60000 	.word	0x3ff60000
    54c0:	4001f508 	.word	0x4001f508

000054c4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    54c4:	b510      	push	{r4, lr}
    54c6:	f7ff ffd7 	bl	5478 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    54ca:	f008 f942 	bl	d752 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    54ce:	4903      	ldr	r1, [pc, #12]	; (54dc <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    54d0:	4801      	ldr	r0, [pc, #4]	; (54d8 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    54d2:	6008      	str	r0, [r1, #0]
    54d4:	bd10      	pop	{r4, pc}
    54d6:	0000      	.short	0x0000
    54d8:	3ff60000 	.word	0x3ff60000
    54dc:	4001f508 	.word	0x4001f508

000054e0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    54e0:	b510      	push	{r4, lr}
    54e2:	4604      	mov	r4, r0
    54e4:	f7ff ffc8 	bl	5478 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    54e8:	f008 f933 	bl	d752 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    54ec:	f000 f888 	bl	5600 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    54f0:	4905      	ldr	r1, [pc, #20]	; (5508 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    54f2:	4804      	ldr	r0, [pc, #16]	; (5504 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    54f4:	6008      	str	r0, [r1, #0]
    54f6:	4620      	mov	r0, r4
    54f8:	f000 f8b8 	bl	566c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    54fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5500:	f000 b8dc 	b.w	56bc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    5504:	3ff60000 	.word	0x3ff60000
    5508:	4001f508 	.word	0x4001f508
    550c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5510:	4682      	mov	sl, r0
    5512:	4838      	ldr	r0, [pc, #224]	; (55f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    5514:	f006 ff88 	bl	c428 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5518:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 55f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    551c:	b128      	cbz	r0, 552a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    551e:	2601      	movs	r6, #1
    5520:	f10b 0001 	add.w	r0, fp, #1
    5524:	21ff      	movs	r1, #255	; 0xff
    5526:	7001      	strb	r1, [r0, #0]
    5528:	e000      	b.n	552c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    552a:	2600      	movs	r6, #0
    552c:	f44f 7580 	mov.w	r5, #256	; 0x100
    5530:	4c31      	ldr	r4, [pc, #196]	; (55f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    5532:	f04f 0800 	mov.w	r8, #0
    5536:	1d2f      	adds	r7, r5, #4
    5538:	2101      	movs	r1, #1
    553a:	6061      	str	r1, [r4, #4]
    553c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5540:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5544:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    5548:	6021      	str	r1, [r4, #0]
    554a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 55fc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    554e:	e01c      	b.n	558a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5550:	f8d9 0000 	ldr.w	r0, [r9]
    5554:	06c0      	lsls	r0, r0, #27
    5556:	d518      	bpl.n	558a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5558:	200e      	movs	r0, #14
    555a:	f008 f909 	bl	d770 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    555e:	f3ef 8010 	mrs	r0, PRIMASK
    5562:	9000      	str	r0, [sp, #0]
    5564:	b672      	cpsid	i
    5566:	2103      	movs	r1, #3
    5568:	4620      	mov	r0, r4
    556a:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    556e:	4629      	mov	r1, r5
    5570:	f008 f90b 	bl	d78a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5574:	b930      	cbnz	r0, 5584 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5576:	4639      	mov	r1, r7
    5578:	4620      	mov	r0, r4
    557a:	f008 f906 	bl	d78a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    557e:	b908      	cbnz	r0, 5584 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5580:	f7ff f8f0 	bl	4764 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5584:	9800      	ldr	r0, [sp, #0]
    5586:	b900      	cbnz	r0, 558a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5588:	b662      	cpsie	i
    558a:	4629      	mov	r1, r5
    558c:	4620      	mov	r0, r4
    558e:	f008 f8fc 	bl	d78a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5592:	b928      	cbnz	r0, 55a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    5594:	4639      	mov	r1, r7
    5596:	4620      	mov	r0, r4
    5598:	f008 f8f7 	bl	d78a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    559c:	2800      	cmp	r0, #0
    559e:	d0d7      	beq.n	5550 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    55a0:	4639      	mov	r1, r7
    55a2:	4620      	mov	r0, r4
    55a4:	f008 f8f1 	bl	d78a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    55a8:	2800      	cmp	r0, #0
    55aa:	d1c5      	bne.n	5538 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    55ac:	bb06      	cbnz	r6, 55f0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    55ae:	f89b 1001 	ldrb.w	r1, [fp, #1]
    55b2:	f88d 1000 	strb.w	r1, [sp]
    55b6:	9900      	ldr	r1, [sp, #0]
    55b8:	9100      	str	r1, [sp, #0]
    55ba:	f89d 1000 	ldrb.w	r1, [sp]
    55be:	b109      	cbz	r1, 55c4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    55c0:	2501      	movs	r5, #1
    55c2:	e000      	b.n	55c6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    55c4:	2500      	movs	r5, #0
    55c6:	f10b 0001 	add.w	r0, fp, #1
    55ca:	f880 8000 	strb.w	r8, [r0]
    55ce:	2003      	movs	r0, #3
    55d0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    55d4:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    55d8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    55dc:	200e      	movs	r0, #14
    55de:	f008 f8c7 	bl	d770 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    55e2:	4804      	ldr	r0, [pc, #16]	; (55f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    55e4:	f006 ff37 	bl	c456 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    55e8:	b115      	cbz	r5, 55f0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    55ea:	2011      	movs	r0, #17
    55ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55f0:	2000      	movs	r0, #0
    55f2:	e7fb      	b.n	55ec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    55f4:	20000354 	.word	0x20000354
    55f8:	4000e000 	.word	0x4000e000
    55fc:	e000ed10 	.word	0xe000ed10

00005600 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    5600:	b510      	push	{r4, lr}
    5602:	4806      	ldr	r0, [pc, #24]	; (561c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    5604:	f006 ff23 	bl	c44e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    5608:	b118      	cbz	r0, 5612 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    560a:	2127      	movs	r1, #39	; 0x27
    560c:	201d      	movs	r0, #29
    560e:	f7ff fa4d 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5612:	4802      	ldr	r0, [pc, #8]	; (561c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    5614:	2100      	movs	r1, #0
    5616:	7041      	strb	r1, [r0, #1]
    5618:	bd10      	pop	{r4, pc}
    561a:	0000      	.short	0x0000
    561c:	20000354 	.word	0x20000354

00005620 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    5620:	b570      	push	{r4, r5, r6, lr}
    5622:	4911      	ldr	r1, [pc, #68]	; (5668 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    5624:	680a      	ldr	r2, [r1, #0]
    5626:	b1ea      	cbz	r2, 5664 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5628:	2300      	movs	r3, #0
    562a:	461d      	mov	r5, r3
    562c:	2401      	movs	r4, #1
    562e:	684a      	ldr	r2, [r1, #4]
    5630:	1c52      	adds	r2, r2, #1
    5632:	604a      	str	r2, [r1, #4]
    5634:	2a09      	cmp	r2, #9
    5636:	d300      	bcc.n	563a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5638:	604d      	str	r5, [r1, #4]
    563a:	790e      	ldrb	r6, [r1, #4]
    563c:	fa04 f206 	lsl.w	r2, r4, r6
    5640:	680e      	ldr	r6, [r1, #0]
    5642:	4216      	tst	r6, r2
    5644:	d00b      	beq.n	565e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    5646:	f3ef 8310 	mrs	r3, PRIMASK
    564a:	b672      	cpsid	i
    564c:	680c      	ldr	r4, [r1, #0]
    564e:	4394      	bics	r4, r2
    5650:	600c      	str	r4, [r1, #0]
    5652:	b903      	cbnz	r3, 5656 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5654:	b662      	cpsie	i
    5656:	6849      	ldr	r1, [r1, #4]
    5658:	6001      	str	r1, [r0, #0]
    565a:	2000      	movs	r0, #0
    565c:	bd70      	pop	{r4, r5, r6, pc}
    565e:	1c5b      	adds	r3, r3, #1
    5660:	2b09      	cmp	r3, #9
    5662:	d3e4      	bcc.n	562e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5664:	2005      	movs	r0, #5
    5666:	bd70      	pop	{r4, r5, r6, pc}
    5668:	200000c8 	.word	0x200000c8

0000566c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    566c:	4802      	ldr	r0, [pc, #8]	; (5678 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    566e:	2100      	movs	r1, #0
    5670:	6001      	str	r1, [r0, #0]
    5672:	6041      	str	r1, [r0, #4]
    5674:	4770      	bx	lr
    5676:	0000      	.short	0x0000
    5678:	200000c8 	.word	0x200000c8

0000567c <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    567c:	b510      	push	{r4, lr}
    567e:	4c04      	ldr	r4, [pc, #16]	; (5690 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    5680:	7820      	ldrb	r0, [r4, #0]
    5682:	28ff      	cmp	r0, #255	; 0xff
    5684:	d003      	beq.n	568e <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    5686:	f7ff f823 	bl	46d0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    568a:	20ff      	movs	r0, #255	; 0xff
    568c:	7020      	strb	r0, [r4, #0]
    568e:	bd10      	pop	{r4, pc}
    5690:	20000000 	.word	0x20000000

00005694 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5694:	b510      	push	{r4, lr}
    5696:	4c08      	ldr	r4, [pc, #32]	; (56b8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5698:	7861      	ldrb	r1, [r4, #1]
    569a:	b109      	cbz	r1, 56a0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    569c:	200f      	movs	r0, #15
    569e:	bd10      	pop	{r4, pc}
    56a0:	f7fe ffdc 	bl	465c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    56a4:	7020      	strb	r0, [r4, #0]
    56a6:	28ff      	cmp	r0, #255	; 0xff
    56a8:	d001      	beq.n	56ae <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    56aa:	2000      	movs	r0, #0
    56ac:	bd10      	pop	{r4, pc}
    56ae:	2178      	movs	r1, #120	; 0x78
    56b0:	201f      	movs	r0, #31
    56b2:	f7ff f9fb 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56b6:	0000      	.short	0x0000
    56b8:	20000000 	.word	0x20000000

000056bc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    56bc:	4901      	ldr	r1, [pc, #4]	; (56c4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    56be:	2000      	movs	r0, #0
    56c0:	7048      	strb	r0, [r1, #1]
    56c2:	4770      	bx	lr
    56c4:	20000000 	.word	0x20000000

000056c8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    56c8:	4806      	ldr	r0, [pc, #24]	; (56e4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    56ca:	4a07      	ldr	r2, [pc, #28]	; (56e8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    56cc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    56ce:	8852      	ldrh	r2, [r2, #2]
    56d0:	4291      	cmp	r1, r2
    56d2:	d104      	bne.n	56de <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    56d4:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    56d8:	b108      	cbz	r0, 56de <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    56da:	2000      	movs	r0, #0
    56dc:	4770      	bx	lr
    56de:	2001      	movs	r0, #1
    56e0:	4770      	bx	lr
    56e2:	0000      	.short	0x0000
    56e4:	200014e8 	.word	0x200014e8
    56e8:	20000340 	.word	0x20000340

000056ec <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    56ec:	4901      	ldr	r1, [pc, #4]	; (56f4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    56ee:	8048      	strh	r0, [r1, #2]
    56f0:	4770      	bx	lr
    56f2:	0000      	.short	0x0000
    56f4:	20000340 	.word	0x20000340

000056f8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    56f8:	4808      	ldr	r0, [pc, #32]	; (571c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    56fa:	4a09      	ldr	r2, [pc, #36]	; (5720 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    56fc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    56fe:	8852      	ldrh	r2, [r2, #2]
    5700:	4291      	cmp	r1, r2
    5702:	d109      	bne.n	5718 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5704:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5708:	8481      	strh	r1, [r0, #36]	; 0x24
    570a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    570e:	b119      	cbz	r1, 5718 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5710:	2100      	movs	r1, #0
    5712:	7001      	strb	r1, [r0, #0]
    5714:	2001      	movs	r0, #1
    5716:	4770      	bx	lr
    5718:	2000      	movs	r0, #0
    571a:	4770      	bx	lr
    571c:	200014e8 	.word	0x200014e8
    5720:	20000340 	.word	0x20000340

00005724 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5724:	4807      	ldr	r0, [pc, #28]	; (5744 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5726:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    572a:	2901      	cmp	r1, #1
    572c:	d007      	beq.n	573e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    572e:	2101      	movs	r1, #1
    5730:	7001      	strb	r1, [r0, #0]
    5732:	4805      	ldr	r0, [pc, #20]	; (5748 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5734:	4903      	ldr	r1, [pc, #12]	; (5744 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5736:	8800      	ldrh	r0, [r0, #0]
    5738:	8488      	strh	r0, [r1, #36]	; 0x24
    573a:	2001      	movs	r0, #1
    573c:	4770      	bx	lr
    573e:	2000      	movs	r0, #0
    5740:	4770      	bx	lr
    5742:	0000      	.short	0x0000
    5744:	200014e8 	.word	0x200014e8
    5748:	20000340 	.word	0x20000340

0000574c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    574c:	4906      	ldr	r1, [pc, #24]	; (5768 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    574e:	4b07      	ldr	r3, [pc, #28]	; (576c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5750:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5752:	885b      	ldrh	r3, [r3, #2]
    5754:	429a      	cmp	r2, r3
    5756:	d105      	bne.n	5764 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5758:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    575c:	b112      	cbz	r2, 5764 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    575e:	6001      	str	r1, [r0, #0]
    5760:	2001      	movs	r0, #1
    5762:	4770      	bx	lr
    5764:	2000      	movs	r0, #0
    5766:	4770      	bx	lr
    5768:	200014e8 	.word	0x200014e8
    576c:	20000340 	.word	0x20000340

00005770 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5770:	4909      	ldr	r1, [pc, #36]	; (5798 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5772:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5774:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5778:	3bff      	subs	r3, #255	; 0xff
    577a:	d002      	beq.n	5782 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    577c:	2100      	movs	r1, #0
    577e:	6001      	str	r1, [r0, #0]
    5780:	e007      	b.n	5792 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5782:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5786:	4904      	ldr	r1, [pc, #16]	; (5798 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5788:	2a01      	cmp	r2, #1
    578a:	d002      	beq.n	5792 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    578c:	6001      	str	r1, [r0, #0]
    578e:	2001      	movs	r0, #1
    5790:	4770      	bx	lr
    5792:	2000      	movs	r0, #0
    5794:	4770      	bx	lr
    5796:	0000      	.short	0x0000
    5798:	200014e8 	.word	0x200014e8

0000579c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    579c:	4901      	ldr	r1, [pc, #4]	; (57a4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    579e:	8008      	strh	r0, [r1, #0]
    57a0:	4770      	bx	lr
    57a2:	0000      	.short	0x0000
    57a4:	20000340 	.word	0x20000340

000057a8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    57a8:	4905      	ldr	r1, [pc, #20]	; (57c0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    57aa:	2000      	movs	r0, #0
    57ac:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    57b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    57b4:	8488      	strh	r0, [r1, #36]	; 0x24
    57b6:	4903      	ldr	r1, [pc, #12]	; (57c4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    57b8:	8008      	strh	r0, [r1, #0]
    57ba:	8048      	strh	r0, [r1, #2]
    57bc:	4770      	bx	lr
    57be:	0000      	.short	0x0000
    57c0:	200014e8 	.word	0x200014e8
    57c4:	20000340 	.word	0x20000340
    57c8:	4905      	ldr	r1, [pc, #20]	; (57e0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    57ca:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    57cc:	4282      	cmp	r2, r0
    57ce:	d105      	bne.n	57dc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    57d0:	2000      	movs	r0, #0
    57d2:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    57d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    57da:	8488      	strh	r0, [r1, #36]	; 0x24
    57dc:	4770      	bx	lr
    57de:	0000      	.short	0x0000
    57e0:	200014e8 	.word	0x200014e8

000057e4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    57e4:	4a0a      	ldr	r2, [pc, #40]	; (5810 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    57e6:	b110      	cbz	r0, 57ee <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    57e8:	2801      	cmp	r0, #1
    57ea:	d007      	beq.n	57fc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    57ec:	e00e      	b.n	580c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    57ee:	7850      	ldrb	r0, [r2, #1]
    57f0:	b160      	cbz	r0, 580c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    57f2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    57f6:	6008      	str	r0, [r1, #0]
    57f8:	88d0      	ldrh	r0, [r2, #6]
    57fa:	e004      	b.n	5806 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    57fc:	7810      	ldrb	r0, [r2, #0]
    57fe:	b128      	cbz	r0, 580c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5800:	6890      	ldr	r0, [r2, #8]
    5802:	6008      	str	r0, [r1, #0]
    5804:	8990      	ldrh	r0, [r2, #12]
    5806:	8088      	strh	r0, [r1, #4]
    5808:	2001      	movs	r0, #1
    580a:	4770      	bx	lr
    580c:	2000      	movs	r0, #0
    580e:	4770      	bx	lr
    5810:	20000356 	.word	0x20000356

00005814 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5814:	4a08      	ldr	r2, [pc, #32]	; (5838 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5816:	2301      	movs	r3, #1
    5818:	b138      	cbz	r0, 582a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    581a:	2801      	cmp	r0, #1
    581c:	d104      	bne.n	5828 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    581e:	7013      	strb	r3, [r2, #0]
    5820:	6808      	ldr	r0, [r1, #0]
    5822:	6090      	str	r0, [r2, #8]
    5824:	8888      	ldrh	r0, [r1, #4]
    5826:	8190      	strh	r0, [r2, #12]
    5828:	4770      	bx	lr
    582a:	7053      	strb	r3, [r2, #1]
    582c:	6808      	ldr	r0, [r1, #0]
    582e:	f8c2 0002 	str.w	r0, [r2, #2]
    5832:	8888      	ldrh	r0, [r1, #4]
    5834:	80d0      	strh	r0, [r2, #6]
    5836:	4770      	bx	lr
    5838:	20000356 	.word	0x20000356

0000583c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    583c:	4906      	ldr	r1, [pc, #24]	; (5858 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    583e:	b110      	cbz	r0, 5846 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5840:	2801      	cmp	r0, #1
    5842:	d002      	beq.n	584a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5844:	e005      	b.n	5852 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5846:	7848      	ldrb	r0, [r1, #1]
    5848:	e000      	b.n	584c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    584a:	7808      	ldrb	r0, [r1, #0]
    584c:	b108      	cbz	r0, 5852 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    584e:	2001      	movs	r0, #1
    5850:	4770      	bx	lr
    5852:	2000      	movs	r0, #0
    5854:	4770      	bx	lr
    5856:	0000      	.short	0x0000
    5858:	20000356 	.word	0x20000356

0000585c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    585c:	4901      	ldr	r1, [pc, #4]	; (5864 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    585e:	7708      	strb	r0, [r1, #28]
    5860:	4770      	bx	lr
    5862:	0000      	.short	0x0000
    5864:	20000d72 	.word	0x20000d72

00005868 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5868:	4801      	ldr	r0, [pc, #4]	; (5870 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    586a:	78c0      	ldrb	r0, [r0, #3]
    586c:	4770      	bx	lr
    586e:	0000      	.short	0x0000
    5870:	200000d0 	.word	0x200000d0

00005874 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5874:	4801      	ldr	r0, [pc, #4]	; (587c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5876:	7900      	ldrb	r0, [r0, #4]
    5878:	4770      	bx	lr
    587a:	0000      	.short	0x0000
    587c:	200000d0 	.word	0x200000d0

00005880 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5880:	b510      	push	{r4, lr}
    5882:	4604      	mov	r4, r0
    5884:	f000 f944 	bl	5b10 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5888:	b118      	cbz	r0, 5892 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    588a:	21c5      	movs	r1, #197	; 0xc5
    588c:	2027      	movs	r0, #39	; 0x27
    588e:	f7ff f90d 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5892:	4803      	ldr	r0, [pc, #12]	; (58a0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5894:	2101      	movs	r1, #1
    5896:	f008 fb9d 	bl	dfd4 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    589a:	4802      	ldr	r0, [pc, #8]	; (58a4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    589c:	62c4      	str	r4, [r0, #44]	; 0x2c
    589e:	bd10      	pop	{r4, pc}
    58a0:	20000d50 	.word	0x20000d50
    58a4:	200000d0 	.word	0x200000d0

000058a8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    58a8:	4901      	ldr	r1, [pc, #4]	; (58b0 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    58aa:	2001      	movs	r0, #1
    58ac:	7188      	strb	r0, [r1, #6]
    58ae:	4770      	bx	lr
    58b0:	200000d0 	.word	0x200000d0

000058b4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    58b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58b8:	4c5d      	ldr	r4, [pc, #372]	; (5a30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    58ba:	9d06      	ldr	r5, [sp, #24]
    58bc:	7826      	ldrb	r6, [r4, #0]
    58be:	2e00      	cmp	r6, #0
    58c0:	d16a      	bne.n	5998 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    58c2:	2a00      	cmp	r2, #0
    58c4:	d068      	beq.n	5998 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    58c6:	2b00      	cmp	r3, #0
    58c8:	d066      	beq.n	5998 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    58ca:	2d00      	cmp	r5, #0
    58cc:	d064      	beq.n	5998 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    58ce:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    58d2:	f104 0614 	add.w	r6, r4, #20
    58d6:	2000      	movs	r0, #0
    58d8:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    58dc:	71a0      	strb	r0, [r4, #6]
    58de:	7160      	strb	r0, [r4, #5]
    58e0:	70e0      	strb	r0, [r4, #3]
    58e2:	70a0      	strb	r0, [r4, #2]
    58e4:	7120      	strb	r0, [r4, #4]
    58e6:	81a0      	strh	r0, [r4, #12]
    58e8:	81e0      	strh	r0, [r4, #14]
    58ea:	f000 f955 	bl	5b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    58ee:	4606      	mov	r6, r0
    58f0:	f000 f94c 	bl	5b8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    58f4:	4605      	mov	r5, r0
    58f6:	f005 fd87 	bl	b408 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    58fa:	f005 fadf 	bl	aebc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    58fe:	f995 006e 	ldrsb.w	r0, [r5, #110]	; 0x6e
    5902:	f005 fe05 	bl	b510 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5906:	69e8      	ldr	r0, [r5, #28]
    5908:	f005 fed8 	bl	b6bc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    590c:	6968      	ldr	r0, [r5, #20]
    590e:	f005 fecb 	bl	b6a8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5912:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    5916:	f005 ff01 	bl	b71c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    591a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    591e:	6840      	ldr	r0, [r0, #4]
    5920:	f890 020c 	ldrb.w	r0, [r0, #524]	; 0x20c
    5924:	b108      	cbz	r0, 592a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x76>
    5926:	f005 fcef 	bl	b308 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    592a:	f895 106b 	ldrb.w	r1, [r5, #107]	; 0x6b
    592e:	2001      	movs	r0, #1
    5930:	f005 fc2e 	bl	b190 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5934:	2800      	cmp	r0, #0
    5936:	d074      	beq.n	5a22 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    5938:	483e      	ldr	r0, [pc, #248]	; (5a34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    593a:	f005 fc95 	bl	b268 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    593e:	8828      	ldrh	r0, [r5, #0]
    5940:	f7ff fcc2 	bl	52c8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5944:	6320      	str	r0, [r4, #48]	; 0x30
    5946:	8828      	ldrh	r0, [r5, #0]
    5948:	f7ff fca8 	bl	529c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    594c:	6360      	str	r0, [r4, #52]	; 0x34
    594e:	f106 0080 	add.w	r0, r6, #128	; 0x80
    5952:	3680      	adds	r6, #128	; 0x80
    5954:	4938      	ldr	r1, [pc, #224]	; (5a38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5956:	e896 108c 	ldmia.w	r6, {r2, r3, r7, ip}
    595a:	f101 0808 	add.w	r8, r1, #8
    595e:	3e80      	subs	r6, #128	; 0x80
    5960:	e888 108c 	stmia.w	r8, {r2, r3, r7, ip}
    5964:	6902      	ldr	r2, [r0, #16]
    5966:	f8c1 2021 	str.w	r2, [r1, #33]	; 0x21
    596a:	6940      	ldr	r0, [r0, #20]
    596c:	f8c1 0025 	str.w	r0, [r1, #37]	; 0x25
    5970:	f000 f972 	bl	5c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12c>
    5974:	4601      	mov	r1, r0
    5976:	8f28      	ldrh	r0, [r5, #56]	; 0x38
    5978:	f008 f88e 	bl	da98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    597c:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
    597e:	4281      	cmp	r1, r0
    5980:	d200      	bcs.n	5984 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd0>
    5982:	4608      	mov	r0, r1
    5984:	7220      	strb	r0, [r4, #8]
    5986:	46a0      	mov	r8, r4
    5988:	f895 106b 	ldrb.w	r1, [r5, #107]	; 0x6b
    598c:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
    598e:	7ef7      	ldrb	r7, [r6, #27]
    5990:	8fac      	ldrh	r4, [r5, #60]	; 0x3c
    5992:	2908      	cmp	r1, #8
    5994:	d104      	bne.n	59a0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5996:	e002      	b.n	599e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xea>
    5998:	f240 111d 	movw	r1, #285	; 0x11d
    599c:	e045      	b.n	5a2a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    599e:	2104      	movs	r1, #4
    59a0:	f008 f87a 	bl	da98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    59a4:	b90f      	cbnz	r7, 59aa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf6>
    59a6:	1d00      	adds	r0, r0, #4
    59a8:	b280      	uxth	r0, r0
    59aa:	4284      	cmp	r4, r0
    59ac:	d200      	bcs.n	59b0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    59ae:	4620      	mov	r0, r4
    59b0:	b2c4      	uxtb	r4, r0
    59b2:	f888 4009 	strb.w	r4, [r8, #9]
    59b6:	7ef1      	ldrb	r1, [r6, #27]
    59b8:	2900      	cmp	r1, #0
    59ba:	d001      	beq.n	59c0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    59bc:	f04f 0104 	mov.w	r1, #4
    59c0:	4421      	add	r1, r4
    59c2:	f888 1007 	strb.w	r1, [r8, #7]
    59c6:	d014      	beq.n	59f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13e>
    59c8:	481b      	ldr	r0, [pc, #108]	; (5a38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    59ca:	f04f 0701 	mov.w	r7, #1
    59ce:	f100 0008 	add.w	r0, r0, #8
    59d2:	7607      	strb	r7, [r0, #24]
    59d4:	e9d6 121e 	ldrd	r1, r2, [r6, #120]	; 0x78
    59d8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    59dc:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    59e0:	f007 ff5f 	bl	d8a2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    59e4:	4914      	ldr	r1, [pc, #80]	; (5a38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    59e6:	4603      	mov	r3, r0
    59e8:	4622      	mov	r2, r4
    59ea:	3108      	adds	r1, #8
    59ec:	4638      	mov	r0, r7
    59ee:	f005 f9d1 	bl	ad94 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    59f2:	2001      	movs	r0, #1
    59f4:	f000 fb88 	bl	6108 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>
    59f8:	4810      	ldr	r0, [pc, #64]	; (5a3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    59fa:	6800      	ldr	r0, [r0, #0]
    59fc:	2803      	cmp	r0, #3
    59fe:	d012      	beq.n	5a26 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5a00:	280b      	cmp	r0, #11
    5a02:	d010      	beq.n	5a26 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5a04:	480c      	ldr	r0, [pc, #48]	; (5a38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5a06:	220e      	movs	r2, #14
    5a08:	2100      	movs	r1, #0
    5a0a:	3052      	adds	r0, #82	; 0x52
    5a0c:	f006 fe1d 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5a10:	4809      	ldr	r0, [pc, #36]	; (5a38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5a12:	89b1      	ldrh	r1, [r6, #12]
    5a14:	3052      	adds	r0, #82	; 0x52
    5a16:	8041      	strh	r1, [r0, #2]
    5a18:	8829      	ldrh	r1, [r5, #0]
    5a1a:	8001      	strh	r1, [r0, #0]
    5a1c:	f896 102b 	ldrb.w	r1, [r6, #43]	; 0x2b
    5a20:	7101      	strb	r1, [r0, #4]
    5a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a26:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    5a2a:	2027      	movs	r0, #39	; 0x27
    5a2c:	f7ff f83e 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a30:	200000d0 	.word	0x200000d0
    5a34:	00006308 	.word	0x00006308
    5a38:	20000d20 	.word	0x20000d20
    5a3c:	40001550 	.word	0x40001550

00005a40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5a40:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5a44:	468a      	mov	sl, r1
    5a46:	4606      	mov	r6, r0
    5a48:	f000 f8a6 	bl	5b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5a4c:	4d2b      	ldr	r5, [pc, #172]	; (5afc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbc>)
    5a4e:	4604      	mov	r4, r0
    5a50:	f04f 0800 	mov.w	r8, #0
    5a54:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5a56:	7847      	ldrb	r7, [r0, #1]
    5a58:	b10e      	cbz	r6, 5a5e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1e>
    5a5a:	2e01      	cmp	r6, #1
    5a5c:	d101      	bne.n	5a62 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x22>
    5a5e:	f885 8001 	strb.w	r8, [r5, #1]
    5a62:	7868      	ldrb	r0, [r5, #1]
    5a64:	f04f 0901 	mov.w	r9, #1
    5a68:	b150      	cbz	r0, 5a80 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x40>
    5a6a:	2801      	cmp	r0, #1
    5a6c:	d021      	beq.n	5ab2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x72>
    5a6e:	2802      	cmp	r0, #2
    5a70:	d02b      	beq.n	5aca <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x8a>
    5a72:	2803      	cmp	r0, #3
    5a74:	d03a      	beq.n	5aec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5a76:	f240 411d 	movw	r1, #1053	; 0x41d
    5a7a:	2027      	movs	r0, #39	; 0x27
    5a7c:	f7ff f816 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a80:	2e01      	cmp	r6, #1
    5a82:	d028      	beq.n	5ad6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5a84:	f000 f8d4 	bl	5c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5a88:	4669      	mov	r1, sp
    5a8a:	aa01      	add	r2, sp, #4
    5a8c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5a8e:	f007 fb57 	bl	d140 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    5a92:	9800      	ldr	r0, [sp, #0]
    5a94:	f007 fb0a 	bl	d0ac <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5a98:	f8ca 0000 	str.w	r0, [sl]
    5a9c:	4639      	mov	r1, r7
    5a9e:	2201      	movs	r2, #1
    5aa0:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5aa2:	e00d      	b.n	5ac0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x80>
    5aa4:	f884 8010 	strb.w	r8, [r4, #16]
    5aa8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5aac:	f884 9010 	strb.w	r9, [r4, #16]
    5ab0:	e7fa      	b.n	5aa8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    5ab2:	2e01      	cmp	r6, #1
    5ab4:	d00f      	beq.n	5ad6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5ab6:	f000 f8bb 	bl	5c30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5aba:	4639      	mov	r1, r7
    5abc:	2200      	movs	r2, #0
    5abe:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5ac0:	f007 faab 	bl	d01a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5ac4:	2e02      	cmp	r6, #2
    5ac6:	d106      	bne.n	5ad6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5ac8:	e7ee      	b.n	5aa8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    5aca:	2e01      	cmp	r6, #1
    5acc:	d003      	beq.n	5ad6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x96>
    5ace:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5ad0:	f007 fc3f 	bl	d352 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5ad4:	e7f6      	b.n	5ac4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x84>
    5ad6:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    5ada:	1c40      	adds	r0, r0, #1
    5adc:	f141 0100 	adc.w	r1, r1, #0
    5ae0:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    5ae4:	7c20      	ldrb	r0, [r4, #16]
    5ae6:	2801      	cmp	r0, #1
    5ae8:	d1e0      	bne.n	5aac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6c>
    5aea:	e7db      	b.n	5aa4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    5aec:	2e01      	cmp	r6, #1
    5aee:	d0db      	beq.n	5aa8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x68>
    5af0:	6b68      	ldr	r0, [r5, #52]	; 0x34
    5af2:	e8bd 47fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5af6:	f007 bc2c 	b.w	d352 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5afa:	0000      	.short	0x0000
    5afc:	200000d0 	.word	0x200000d0

00005b00 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5b00:	4802      	ldr	r0, [pc, #8]	; (5b0c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5b02:	89c0      	ldrh	r0, [r0, #14]
    5b04:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5b08:	4770      	bx	lr
    5b0a:	0000      	.short	0x0000
    5b0c:	200000d0 	.word	0x200000d0

00005b10 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5b10:	4804      	ldr	r0, [pc, #16]	; (5b24 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5b12:	7800      	ldrb	r0, [r0, #0]
    5b14:	b108      	cbz	r0, 5b1a <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5b16:	200c      	movs	r0, #12
    5b18:	4770      	bx	lr
    5b1a:	4903      	ldr	r1, [pc, #12]	; (5b28 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5b1c:	2000      	movs	r0, #0
    5b1e:	7708      	strb	r0, [r1, #28]
    5b20:	4770      	bx	lr
    5b22:	0000      	.short	0x0000
    5b24:	200000d0 	.word	0x200000d0
    5b28:	20000d72 	.word	0x20000d72

00005b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5b2c:	480c      	ldr	r0, [pc, #48]	; (5b60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5b2e:	b510      	push	{r4, lr}
    5b30:	7801      	ldrb	r1, [r0, #0]
    5b32:	b149      	cbz	r1, 5b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5b34:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5b38:	7800      	ldrb	r0, [r0, #0]
    5b3a:	2802      	cmp	r0, #2
    5b3c:	d008      	beq.n	5b50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5b3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    5b42:	2027      	movs	r0, #39	; 0x27
    5b44:	f7fe ffb2 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b4c:	f000 b9f8 	b.w	5f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5b50:	6848      	ldr	r0, [r1, #4]
    5b52:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
    5b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5b5a:	f005 bb8d 	b.w	b278 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5b5e:	0000      	.short	0x0000
    5b60:	200000d0 	.word	0x200000d0
    5b64:	4608      	mov	r0, r1
    5b66:	2100      	movs	r1, #0
    5b68:	7041      	strb	r1, [r0, #1]
    5b6a:	211c      	movs	r1, #28
    5b6c:	f800 1b04 	strb.w	r1, [r0], #4
    5b70:	220e      	movs	r2, #14
    5b72:	4901      	ldr	r1, [pc, #4]	; (5b78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    5b74:	f006 bcef 	b.w	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5b78:	20000d80 	.word	0x20000d80
    5b7c:	4a02      	ldr	r2, [pc, #8]	; (5b88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5b7e:	8993      	ldrh	r3, [r2, #12]
    5b80:	4303      	orrs	r3, r0
    5b82:	8193      	strh	r3, [r2, #12]
    5b84:	6952      	ldr	r2, [r2, #20]
    5b86:	4710      	bx	r2
    5b88:	200000d0 	.word	0x200000d0
    5b8c:	4801      	ldr	r0, [pc, #4]	; (5b94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5b8e:	6840      	ldr	r0, [r0, #4]
    5b90:	4770      	bx	lr
    5b92:	0000      	.short	0x0000
    5b94:	20000108 	.word	0x20000108
    5b98:	4801      	ldr	r0, [pc, #4]	; (5ba0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    5b9a:	6840      	ldr	r0, [r0, #4]
    5b9c:	3080      	adds	r0, #128	; 0x80
    5b9e:	4770      	bx	lr
    5ba0:	20000108 	.word	0x20000108
    5ba4:	4a01      	ldr	r2, [pc, #4]	; (5bac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    5ba6:	2100      	movs	r1, #0
    5ba8:	6952      	ldr	r2, [r2, #20]
    5baa:	4710      	bx	r2
    5bac:	200000d0 	.word	0x200000d0
    5bb0:	b570      	push	{r4, r5, r6, lr}
    5bb2:	4605      	mov	r5, r0
    5bb4:	2901      	cmp	r1, #1
    5bb6:	d818      	bhi.n	5bea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5bb8:	4c12      	ldr	r4, [pc, #72]	; (5c04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd8>)
    5bba:	69a1      	ldr	r1, [r4, #24]
    5bbc:	4788      	blx	r1
    5bbe:	b1a0      	cbz	r0, 5bea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5bc0:	7960      	ldrb	r0, [r4, #5]
    5bc2:	b990      	cbnz	r0, 5bea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5bc4:	b9e5      	cbnz	r5, 5c00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd4>
    5bc6:	f104 0010 	add.w	r0, r4, #16
    5bca:	7801      	ldrb	r1, [r0, #0]
    5bcc:	06c8      	lsls	r0, r1, #27
    5bce:	d405      	bmi.n	5bdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5bd0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5bd2:	7800      	ldrb	r0, [r0, #0]
    5bd4:	06c0      	lsls	r0, r0, #27
    5bd6:	d401      	bmi.n	5bdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    5bd8:	2001      	movs	r0, #1
    5bda:	e000      	b.n	5bde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5bdc:	2000      	movs	r0, #0
    5bde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5be0:	b92a      	cbnz	r2, 5bee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    5be2:	8962      	ldrh	r2, [r4, #10]
    5be4:	b11a      	cbz	r2, 5bee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    5be6:	06c9      	lsls	r1, r1, #27
    5be8:	d401      	bmi.n	5bee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xc2>
    5bea:	2001      	movs	r0, #1
    5bec:	bd70      	pop	{r4, r5, r6, pc}
    5bee:	89a1      	ldrh	r1, [r4, #12]
    5bf0:	078a      	lsls	r2, r1, #30
    5bf2:	d503      	bpl.n	5bfc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5bf4:	6a22      	ldr	r2, [r4, #32]
    5bf6:	78d2      	ldrb	r2, [r2, #3]
    5bf8:	2a02      	cmp	r2, #2
    5bfa:	d001      	beq.n	5c00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd4>
    5bfc:	4308      	orrs	r0, r1
    5bfe:	d1f4      	bne.n	5bea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xbe>
    5c00:	2000      	movs	r0, #0
    5c02:	bd70      	pop	{r4, r5, r6, pc}
    5c04:	200000d0 	.word	0x200000d0
    5c08:	b530      	push	{r4, r5, lr}
    5c0a:	4b08      	ldr	r3, [pc, #32]	; (5c2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>)
    5c0c:	88dd      	ldrh	r5, [r3, #6]
    5c0e:	891c      	ldrh	r4, [r3, #8]
    5c10:	b12a      	cbz	r2, 5c1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5c12:	b908      	cbnz	r0, 5c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    5c14:	b905      	cbnz	r5, 5c18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    5c16:	b114      	cbz	r4, 5c1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5c18:	8958      	ldrh	r0, [r3, #10]
    5c1a:	1c40      	adds	r0, r0, #1
    5c1c:	8158      	strh	r0, [r3, #10]
    5c1e:	b111      	cbz	r1, 5c26 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    5c20:	1c6d      	adds	r5, r5, #1
    5c22:	80dd      	strh	r5, [r3, #6]
    5c24:	bd30      	pop	{r4, r5, pc}
    5c26:	1c64      	adds	r4, r4, #1
    5c28:	811c      	strh	r4, [r3, #8]
    5c2a:	bd30      	pop	{r4, r5, pc}
    5c2c:	20000d72 	.word	0x20000d72
    5c30:	b510      	push	{r4, lr}
    5c32:	4c08      	ldr	r4, [pc, #32]	; (5c54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>)
    5c34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5c36:	b138      	cbz	r0, 5c48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>
    5c38:	8962      	ldrh	r2, [r4, #10]
    5c3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5c3c:	1cd2      	adds	r2, r2, #3
    5c3e:	f006 fc8a 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5c44:	6260      	str	r0, [r4, #36]	; 0x24
    5c46:	bd10      	pop	{r4, pc}
    5c48:	f240 4163 	movw	r1, #1123	; 0x463
    5c4c:	2027      	movs	r0, #39	; 0x27
    5c4e:	f7fe ff2d 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c52:	0000      	.short	0x0000
    5c54:	200000d0 	.word	0x200000d0
    5c58:	b510      	push	{r4, lr}
    5c5a:	f7ff ff97 	bl	5b8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5c5e:	4604      	mov	r4, r0
    5c60:	f7ff ff9a 	bl	5b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5c64:	4602      	mov	r2, r0
    5c66:	7d41      	ldrb	r1, [r0, #21]
    5c68:	4816      	ldr	r0, [pc, #88]	; (5cc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x198>)
    5c6a:	2926      	cmp	r1, #38	; 0x26
    5c6c:	d010      	beq.n	5c90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    5c6e:	2927      	cmp	r1, #39	; 0x27
    5c70:	d00e      	beq.n	5c90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    5c72:	7d92      	ldrb	r2, [r2, #22]
    5c74:	2a26      	cmp	r2, #38	; 0x26
    5c76:	d00b      	beq.n	5c90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>
    5c78:	2921      	cmp	r1, #33	; 0x21
    5c7a:	d00d      	beq.n	5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5c7c:	2922      	cmp	r1, #34	; 0x22
    5c7e:	d00b      	beq.n	5c98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5c80:	2a24      	cmp	r2, #36	; 0x24
    5c82:	d00f      	beq.n	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    5c84:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5c88:	2804      	cmp	r0, #4
    5c8a:	d100      	bne.n	5c8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x162>
    5c8c:	2008      	movs	r0, #8
    5c8e:	bd10      	pop	{r4, pc}
    5c90:	6840      	ldr	r0, [r0, #4]
    5c92:	f890 12be 	ldrb.w	r1, [r0, #702]	; 0x2be
    5c96:	e00e      	b.n	5cb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18a>
    5c98:	2a24      	cmp	r2, #36	; 0x24
    5c9a:	d003      	beq.n	5ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    5c9c:	6840      	ldr	r0, [r0, #4]
    5c9e:	f890 0136 	ldrb.w	r0, [r0, #310]	; 0x136
    5ca2:	e005      	b.n	5cb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x184>
    5ca4:	6841      	ldr	r1, [r0, #4]
    5ca6:	f891 0136 	ldrb.w	r0, [r1, #310]	; 0x136
    5caa:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    5cae:	4008      	ands	r0, r1
    5cb0:	f007 fded 	bl	d88e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5cb4:	4601      	mov	r1, r0
    5cb6:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5cbe:	f007 bdfe 	b.w	d8be <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5cc2:	0000      	.short	0x0000
    5cc4:	20000108 	.word	0x20000108
    5cc8:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ccc:	468b      	mov	fp, r1
    5cce:	4607      	mov	r7, r0
    5cd0:	f7ff ff62 	bl	5b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5cd4:	f04f 0900 	mov.w	r9, #0
    5cd8:	4c69      	ldr	r4, [pc, #420]	; (5e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    5cda:	4606      	mov	r6, r0
    5cdc:	f88d 9004 	strb.w	r9, [sp, #4]
    5ce0:	f8cd 9008 	str.w	r9, [sp, #8]
    5ce4:	f8cd 9000 	str.w	r9, [sp]
    5ce8:	7820      	ldrb	r0, [r4, #0]
    5cea:	464d      	mov	r5, r9
    5cec:	2802      	cmp	r0, #2
    5cee:	d004      	beq.n	5cfa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ce>
    5cf0:	f240 41ee 	movw	r1, #1262	; 0x4ee
    5cf4:	2027      	movs	r0, #39	; 0x27
    5cf6:	f7fe fed9 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cfa:	7ba0      	ldrb	r0, [r4, #14]
    5cfc:	0640      	lsls	r0, r0, #25
    5cfe:	d406      	bmi.n	5d0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e2>
    5d00:	2040      	movs	r0, #64	; 0x40
    5d02:	f7ff ff4f 	bl	5ba4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5d06:	89e0      	ldrh	r0, [r4, #14]
    5d08:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5d0c:	81e0      	strh	r0, [r4, #14]
    5d0e:	7ef0      	ldrb	r0, [r6, #27]
    5d10:	b3df      	cbz	r7, 5d8a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25e>
    5d12:	b180      	cbz	r0, 5d36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    5d14:	f005 f90c 	bl	af30 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5d18:	f005 f8e6 	bl	aee8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5d1c:	b958      	cbnz	r0, 5d36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    5d1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d20:	7841      	ldrb	r1, [r0, #1]
    5d22:	b141      	cbz	r1, 5d36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    5d24:	7800      	ldrb	r0, [r0, #0]
    5d26:	7c31      	ldrb	r1, [r6, #16]
    5d28:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5d2c:	4288      	cmp	r0, r1
    5d2e:	d102      	bne.n	5d36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    5d30:	2001      	movs	r0, #1
    5d32:	70a0      	strb	r0, [r4, #2]
    5d34:	e0a0      	b.n	5e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5d36:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d38:	7841      	ldrb	r1, [r0, #1]
    5d3a:	8161      	strh	r1, [r4, #10]
    5d3c:	b121      	cbz	r1, 5d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    5d3e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5d40:	f007 fad4 	bl	d2ec <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5d44:	62a0      	str	r0, [r4, #40]	; 0x28
    5d46:	e000      	b.n	5d4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21e>
    5d48:	62a5      	str	r5, [r4, #40]	; 0x28
    5d4a:	89e0      	ldrh	r0, [r4, #14]
    5d4c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5d50:	81e0      	strh	r0, [r4, #14]
    5d52:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d54:	7bf1      	ldrb	r1, [r6, #15]
    5d56:	7800      	ldrb	r0, [r0, #0]
    5d58:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5d5c:	4288      	cmp	r0, r1
    5d5e:	d007      	beq.n	5d70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    5d60:	a802      	add	r0, sp, #8
    5d62:	f000 f983 	bl	606c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5d66:	89e0      	ldrh	r0, [r4, #14]
    5d68:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5d6c:	81e0      	strh	r0, [r4, #14]
    5d6e:	e001      	b.n	5d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x248>
    5d70:	f04f 0901 	mov.w	r9, #1
    5d74:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5d76:	7c31      	ldrb	r1, [r6, #16]
    5d78:	7800      	ldrb	r0, [r0, #0]
    5d7a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5d7e:	4288      	cmp	r0, r1
    5d80:	d10e      	bne.n	5da0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x274>
    5d82:	a801      	add	r0, sp, #4
    5d84:	f000 f934 	bl	5ff0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c4>
    5d88:	e00a      	b.n	5da0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x274>
    5d8a:	e7ff      	b.n	5d8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x260>
    5d8c:	b108      	cbz	r0, 5d92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x266>
    5d8e:	f005 f8c9 	bl	af24 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5d92:	78e0      	ldrb	r0, [r4, #3]
    5d94:	1c40      	adds	r0, r0, #1
    5d96:	70e0      	strb	r0, [r4, #3]
    5d98:	89e0      	ldrh	r0, [r4, #14]
    5d9a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5d9e:	81e0      	strh	r0, [r4, #14]
    5da0:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 5e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5da4:	7eb0      	ldrb	r0, [r6, #26]
    5da6:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
    5daa:	b188      	cbz	r0, 5dd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a4>
    5dac:	f7ff feee 	bl	5b8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5db0:	4934      	ldr	r1, [pc, #208]	; (5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>)
    5db2:	760d      	strb	r5, [r1, #24]
    5db4:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
    5db8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5dbc:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5dc0:	f007 fd6f 	bl	d8a2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5dc4:	4603      	mov	r3, r0
    5dc6:	22fb      	movs	r2, #251	; 0xfb
    5dc8:	492e      	ldr	r1, [pc, #184]	; (5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>)
    5dca:	4628      	mov	r0, r5
    5dcc:	f004 ffe2 	bl	ad94 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5dd0:	f04f 0800 	mov.w	r8, #0
    5dd4:	f1bb 0f00 	cmp.w	fp, #0
    5dd8:	d104      	bne.n	5de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b8>
    5dda:	78e1      	ldrb	r1, [r4, #3]
    5ddc:	2001      	movs	r0, #1
    5dde:	f7ff fee7 	bl	5bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5de2:	b1b0      	cbz	r0, 5e12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e6>
    5de4:	f005 fc4c 	bl	b680 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5de8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5dec:	b118      	cbz	r0, 5df6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    5dee:	4669      	mov	r1, sp
    5df0:	2000      	movs	r0, #0
    5df2:	f7ff fe25 	bl	5a40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5df6:	89b0      	ldrh	r0, [r6, #12]
    5df8:	464a      	mov	r2, r9
    5dfa:	4639      	mov	r1, r7
    5dfc:	f7ff ff04 	bl	5c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    5e00:	b127      	cbz	r7, 5e0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>
    5e02:	481f      	ldr	r0, [pc, #124]	; (5e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    5e04:	70e5      	strb	r5, [r4, #3]
    5e06:	3038      	adds	r0, #56	; 0x38
    5e08:	f008 fb60 	bl	e4cc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    5e0c:	f04f 0801 	mov.w	r8, #1
    5e10:	e01b      	b.n	5e4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31e>
    5e12:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5e16:	b118      	cbz	r0, 5e20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    5e18:	4669      	mov	r1, sp
    5e1a:	2001      	movs	r0, #1
    5e1c:	f7ff fe10 	bl	5a40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5e20:	2000      	movs	r0, #0
    5e22:	f000 f9ad 	bl	6180 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x654>
    5e26:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5e2a:	b118      	cbz	r0, 5e34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    5e2c:	4669      	mov	r1, sp
    5e2e:	2002      	movs	r0, #2
    5e30:	f7ff fe06 	bl	5a40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5e34:	89b0      	ldrh	r0, [r6, #12]
    5e36:	464a      	mov	r2, r9
    5e38:	4639      	mov	r1, r7
    5e3a:	f7ff fee5 	bl	5c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xdc>
    5e3e:	b127      	cbz	r7, 5e4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31e>
    5e40:	480f      	ldr	r0, [pc, #60]	; (5e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>)
    5e42:	70e5      	strb	r5, [r4, #3]
    5e44:	3038      	adds	r0, #56	; 0x38
    5e46:	f008 fb41 	bl	e4cc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    5e4a:	9802      	ldr	r0, [sp, #8]
    5e4c:	b140      	cbz	r0, 5e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>
    5e4e:	f007 f92d 	bl	d0ac <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    5e52:	f8da 1004 	ldr.w	r1, [sl, #4]
    5e56:	1c40      	adds	r0, r0, #1
    5e58:	7205      	strb	r5, [r0, #8]
    5e5a:	220d      	movs	r2, #13
    5e5c:	f000 fd98 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5e60:	9800      	ldr	r0, [sp, #0]
    5e62:	b130      	cbz	r0, 5e72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x346>
    5e64:	f8da 1004 	ldr.w	r1, [sl, #4]
    5e68:	7205      	strb	r5, [r0, #8]
    5e6a:	2227      	movs	r2, #39	; 0x27
    5e6c:	9800      	ldr	r0, [sp, #0]
    5e6e:	f000 fd8f 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5e72:	f1b8 0f00 	cmp.w	r8, #0
    5e76:	d001      	beq.n	5e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    5e78:	f000 f862 	bl	5f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5e7c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e80:	200000d0 	.word	0x200000d0
    5e84:	20000d28 	.word	0x20000d28
    5e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e8c:	460f      	mov	r7, r1
    5e8e:	4680      	mov	r8, r0
    5e90:	f7ff fe82 	bl	5b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5e94:	4d28      	ldr	r5, [pc, #160]	; (5f38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>)
    5e96:	4604      	mov	r4, r0
    5e98:	7828      	ldrb	r0, [r5, #0]
    5e9a:	2801      	cmp	r0, #1
    5e9c:	d004      	beq.n	5ea8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x37c>
    5e9e:	f240 4172 	movw	r1, #1138	; 0x472
    5ea2:	2027      	movs	r0, #39	; 0x27
    5ea4:	f7fe fe02 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ea8:	7a21      	ldrb	r1, [r4, #8]
    5eaa:	2000      	movs	r0, #0
    5eac:	2601      	movs	r6, #1
    5eae:	b129      	cbz	r1, 5ebc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x390>
    5eb0:	7220      	strb	r0, [r4, #8]
    5eb2:	2100      	movs	r1, #0
    5eb4:	2004      	movs	r0, #4
    5eb6:	f7ff fe61 	bl	5b7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5eba:	72a6      	strb	r6, [r4, #10]
    5ebc:	6a29      	ldr	r1, [r5, #32]
    5ebe:	7808      	ldrb	r0, [r1, #0]
    5ec0:	43c0      	mvns	r0, r0
    5ec2:	0780      	lsls	r0, r0, #30
    5ec4:	d109      	bne.n	5eda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ae>
    5ec6:	7ba0      	ldrb	r0, [r4, #14]
    5ec8:	bb78      	cbnz	r0, 5f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fe>
    5eca:	2002      	movs	r0, #2
    5ecc:	f7ff fe56 	bl	5b7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5ed0:	6a28      	ldr	r0, [r5, #32]
    5ed2:	7800      	ldrb	r0, [r0, #0]
    5ed4:	43c0      	mvns	r0, r0
    5ed6:	0780      	lsls	r0, r0, #30
    5ed8:	d027      	beq.n	5f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fe>
    5eda:	6a28      	ldr	r0, [r5, #32]
    5edc:	7840      	ldrb	r0, [r0, #1]
    5ede:	b110      	cbz	r0, 5ee6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ba>
    5ee0:	2002      	movs	r0, #2
    5ee2:	73a0      	strb	r0, [r4, #14]
    5ee4:	e000      	b.n	5ee8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3bc>
    5ee6:	73a6      	strb	r6, [r4, #14]
    5ee8:	7ee0      	ldrb	r0, [r4, #27]
    5eea:	b190      	cbz	r0, 5f12 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e6>
    5eec:	f7ff fe4e 	bl	5b8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5ef0:	4912      	ldr	r1, [pc, #72]	; (5f3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>)
    5ef2:	7a6d      	ldrb	r5, [r5, #9]
    5ef4:	760e      	strb	r6, [r1, #24]
    5ef6:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
    5efa:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5efe:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5f02:	f007 fcce 	bl	d8a2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5f06:	4603      	mov	r3, r0
    5f08:	462a      	mov	r2, r5
    5f0a:	490c      	ldr	r1, [pc, #48]	; (5f3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>)
    5f0c:	4630      	mov	r0, r6
    5f0e:	f004 ff41 	bl	ad94 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5f12:	ea37 0708 	bics.w	r7, r7, r8
    5f16:	d004      	beq.n	5f22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f6>
    5f18:	2100      	movs	r1, #0
    5f1a:	4608      	mov	r0, r1
    5f1c:	f7ff fe48 	bl	5bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5f20:	b128      	cbz	r0, 5f2e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x402>
    5f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5f26:	f000 b80b 	b.w	5f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5f2a:	2003      	movs	r0, #3
    5f2c:	e7d9      	b.n	5ee2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    5f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5f32:	2000      	movs	r0, #0
    5f34:	f000 b8e8 	b.w	6108 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>
    5f38:	200000d0 	.word	0x200000d0
    5f3c:	20000d28 	.word	0x20000d28
    5f40:	b510      	push	{r4, lr}
    5f42:	f005 f89b 	bl	b07c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5f46:	f004 ffb9 	bl	aebc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5f4a:	4c0d      	ldr	r4, [pc, #52]	; (5f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>)
    5f4c:	89e0      	ldrh	r0, [r4, #14]
    5f4e:	f7ff fe29 	bl	5ba4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5f52:	480c      	ldr	r0, [pc, #48]	; (5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    5f54:	7f00      	ldrb	r0, [r0, #28]
    5f56:	b158      	cbz	r0, 5f70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    5f58:	490a      	ldr	r1, [pc, #40]	; (5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    5f5a:	220e      	movs	r2, #14
    5f5c:	f101 000e 	add.w	r0, r1, #14
    5f60:	f006 faf9 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5f64:	4807      	ldr	r0, [pc, #28]	; (5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    5f66:	2221      	movs	r2, #33	; 0x21
    5f68:	4907      	ldr	r1, [pc, #28]	; (5f88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>)
    5f6a:	301d      	adds	r0, #29
    5f6c:	f000 fd10 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    5f70:	69e2      	ldr	r2, [r4, #28]
    5f72:	7961      	ldrb	r1, [r4, #5]
    5f74:	78a0      	ldrb	r0, [r4, #2]
    5f76:	4790      	blx	r2
    5f78:	2000      	movs	r0, #0
    5f7a:	7020      	strb	r0, [r4, #0]
    5f7c:	bd10      	pop	{r4, pc}
    5f7e:	0000      	.short	0x0000
    5f80:	200000d0 	.word	0x200000d0
    5f84:	20000d72 	.word	0x20000d72
    5f88:	00005b65 	.word	0x00005b65
    5f8c:	4808      	ldr	r0, [pc, #32]	; (5fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x484>)
    5f8e:	b510      	push	{r4, lr}
    5f90:	7800      	ldrb	r0, [r0, #0]
    5f92:	2802      	cmp	r0, #2
    5f94:	d004      	beq.n	5fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x474>
    5f96:	f240 211e 	movw	r1, #542	; 0x21e
    5f9a:	2027      	movs	r0, #39	; 0x27
    5f9c:	f7fe fd86 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fa0:	4904      	ldr	r1, [pc, #16]	; (5fb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x488>)
    5fa2:	2001      	movs	r0, #1
    5fa4:	7308      	strb	r0, [r1, #12]
    5fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5faa:	f7ff bfc9 	b.w	5f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5fae:	0000      	.short	0x0000
    5fb0:	200000d0 	.word	0x200000d0
    5fb4:	20000d72 	.word	0x20000d72
    5fb8:	4b0c      	ldr	r3, [pc, #48]	; (5fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>)
    5fba:	b430      	push	{r4, r5}
    5fbc:	79db      	ldrb	r3, [r3, #7]
    5fbe:	b93a      	cbnz	r2, 5fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    5fc0:	2bff      	cmp	r3, #255	; 0xff
    5fc2:	d105      	bne.n	5fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    5fc4:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5fc8:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5fcc:	42a2      	cmp	r2, r4
    5fce:	d00a      	beq.n	5fe6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ba>
    5fd0:	b129      	cbz	r1, 5fde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b2>
    5fd2:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5fd6:	bc30      	pop	{r4, r5}
    5fd8:	4618      	mov	r0, r3
    5fda:	f005 bb75 	b.w	b6c8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    5fde:	23ff      	movs	r3, #255	; 0xff
    5fe0:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5fe4:	e7f7      	b.n	5fd6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4aa>
    5fe6:	bc30      	pop	{r4, r5}
    5fe8:	4770      	bx	lr
    5fea:	0000      	.short	0x0000
    5fec:	200000d0 	.word	0x200000d0
    5ff0:	b570      	push	{r4, r5, r6, lr}
    5ff2:	4606      	mov	r6, r0
    5ff4:	f7ff fdd0 	bl	5b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ff8:	4a1b      	ldr	r2, [pc, #108]	; (6068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>)
    5ffa:	4604      	mov	r4, r0
    5ffc:	2501      	movs	r5, #1
    5ffe:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6000:	7808      	ldrb	r0, [r1, #0]
    6002:	f000 0003 	and.w	r0, r0, #3
    6006:	2801      	cmp	r0, #1
    6008:	d00c      	beq.n	6024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>
    600a:	2802      	cmp	r0, #2
    600c:	d00a      	beq.n	6024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>
    600e:	2803      	cmp	r0, #3
    6010:	d121      	bne.n	6056 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6012:	7225      	strb	r5, [r4, #8]
    6014:	89d0      	ldrh	r0, [r2, #14]
    6016:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    601a:	81d0      	strh	r0, [r2, #14]
    601c:	2001      	movs	r0, #1
    601e:	f7ff fdad 	bl	5b7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    6022:	e018      	b.n	6056 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6024:	7848      	ldrb	r0, [r1, #1]
    6026:	b1b0      	cbz	r0, 6056 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6028:	89d1      	ldrh	r1, [r2, #14]
    602a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    602e:	81d1      	strh	r1, [r2, #14]
    6030:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6032:	2900      	cmp	r1, #0
    6034:	d009      	beq.n	604a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51e>
    6036:	28fb      	cmp	r0, #251	; 0xfb
    6038:	d808      	bhi.n	604c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x520>
    603a:	7990      	ldrb	r0, [r2, #6]
    603c:	b120      	cbz	r0, 6048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    603e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6042:	2020      	movs	r0, #32
    6044:	f7ff bdae 	b.w	5ba4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    6048:	7035      	strb	r5, [r6, #0]
    604a:	bd70      	pop	{r4, r5, r6, pc}
    604c:	7950      	ldrb	r0, [r2, #5]
    604e:	f040 0010 	orr.w	r0, r0, #16
    6052:	7150      	strb	r0, [r2, #5]
    6054:	bd70      	pop	{r4, r5, r6, pc}
    6056:	7c20      	ldrb	r0, [r4, #16]
    6058:	2801      	cmp	r0, #1
    605a:	d001      	beq.n	6060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x534>
    605c:	7425      	strb	r5, [r4, #16]
    605e:	bd70      	pop	{r4, r5, r6, pc}
    6060:	2000      	movs	r0, #0
    6062:	7420      	strb	r0, [r4, #16]
    6064:	bd70      	pop	{r4, r5, r6, pc}
    6066:	0000      	.short	0x0000
    6068:	200000d0 	.word	0x200000d0
    606c:	b570      	push	{r4, r5, r6, lr}
    606e:	4605      	mov	r5, r0
    6070:	f7ff fd92 	bl	5b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6074:	4604      	mov	r4, r0
    6076:	7b80      	ldrb	r0, [r0, #14]
    6078:	2800      	cmp	r0, #0
    607a:	d02d      	beq.n	60d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ac>
    607c:	2802      	cmp	r0, #2
    607e:	d10c      	bne.n	609a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56e>
    6080:	481b      	ldr	r0, [pc, #108]	; (60f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c4>)
    6082:	4629      	mov	r1, r5
    6084:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6086:	f006 ffa0 	bl	cfca <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    608a:	b330      	cbz	r0, 60da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ae>
    608c:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    6090:	1c40      	adds	r0, r0, #1
    6092:	f141 0100 	adc.w	r1, r1, #0
    6096:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    609a:	2500      	movs	r5, #0
    609c:	73a5      	strb	r5, [r4, #14]
    609e:	7aa0      	ldrb	r0, [r4, #10]
    60a0:	b120      	cbz	r0, 60ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>
    60a2:	72a5      	strb	r5, [r4, #10]
    60a4:	2100      	movs	r1, #0
    60a6:	2010      	movs	r0, #16
    60a8:	f7ff fd68 	bl	5b7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    60ac:	7a60      	ldrb	r0, [r4, #9]
    60ae:	b170      	cbz	r0, 60ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a2>
    60b0:	7265      	strb	r5, [r4, #9]
    60b2:	f7ff fb21 	bl	56f8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    60b6:	b198      	cbz	r0, 60e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    60b8:	2100      	movs	r1, #0
    60ba:	2008      	movs	r0, #8
    60bc:	f7ff fd5e 	bl	5b7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    60c0:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
    60c4:	1c40      	adds	r0, r0, #1
    60c6:	f141 0100 	adc.w	r1, r1, #0
    60ca:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    60ce:	7be0      	ldrb	r0, [r4, #15]
    60d0:	2801      	cmp	r0, #1
    60d2:	d00a      	beq.n	60ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    60d4:	2001      	movs	r0, #1
    60d6:	73e0      	strb	r0, [r4, #15]
    60d8:	bd70      	pop	{r4, r5, r6, pc}
    60da:	f240 31b9 	movw	r1, #953	; 0x3b9
    60de:	e001      	b.n	60e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    60e0:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    60e4:	2027      	movs	r0, #39	; 0x27
    60e6:	f7fe fce1 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60ea:	73e5      	strb	r5, [r4, #15]
    60ec:	bd70      	pop	{r4, r5, r6, pc}
    60ee:	0000      	.short	0x0000
    60f0:	200000d0 	.word	0x200000d0
    60f4:	4803      	ldr	r0, [pc, #12]	; (6104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d8>)
    60f6:	7800      	ldrb	r0, [r0, #0]
    60f8:	2800      	cmp	r0, #0
    60fa:	d001      	beq.n	6100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>
    60fc:	f7ff bf20 	b.w	5f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    6100:	4770      	bx	lr
    6102:	0000      	.short	0x0000
    6104:	200000d0 	.word	0x200000d0
    6108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    610c:	4606      	mov	r6, r0
    610e:	f7ff fd3d 	bl	5b8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6112:	4680      	mov	r8, r0
    6114:	f7ff fd40 	bl	5b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6118:	4c16      	ldr	r4, [pc, #88]	; (6174 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x648>)
    611a:	4605      	mov	r5, r0
    611c:	4632      	mov	r2, r6
    611e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6120:	6260      	str	r0, [r4, #36]	; 0x24
    6122:	2101      	movs	r1, #1
    6124:	4640      	mov	r0, r8
    6126:	f7ff ff47 	bl	5fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48c>
    612a:	7ee8      	ldrb	r0, [r5, #27]
    612c:	2700      	movs	r7, #0
    612e:	b170      	cbz	r0, 614e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x622>
    6130:	4811      	ldr	r0, [pc, #68]	; (6178 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64c>)
    6132:	f005 fa0f 	bl	b554 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6136:	4811      	ldr	r0, [pc, #68]	; (617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x650>)
    6138:	2101      	movs	r1, #1
    613a:	7601      	strb	r1, [r0, #24]
    613c:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    6140:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6144:	490c      	ldr	r1, [pc, #48]	; (6178 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64c>)
    6146:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6148:	f004 fe76 	bl	ae38 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    614c:	e004      	b.n	6158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62c>
    614e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6150:	f005 fa00 	bl	b554 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6154:	f004 feb2 	bl	aebc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6158:	b916      	cbnz	r6, 6160 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x634>
    615a:	4638      	mov	r0, r7
    615c:	f005 f8b0 	bl	b2c0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6160:	2100      	movs	r1, #0
    6162:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    6166:	4608      	mov	r0, r1
    6168:	f005 fa6c 	bl	b644 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    616c:	2002      	movs	r0, #2
    616e:	7020      	strb	r0, [r4, #0]
    6170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6174:	200000d0 	.word	0x200000d0
    6178:	20000c20 	.word	0x20000c20
    617c:	20000d28 	.word	0x20000d28
    6180:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6184:	4604      	mov	r4, r0
    6186:	f7ff fd07 	bl	5b98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    618a:	4605      	mov	r5, r0
    618c:	f7ff fcfe 	bl	5b8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6190:	2700      	movs	r7, #0
    6192:	4606      	mov	r6, r0
    6194:	f8df 9164 	ldr.w	r9, [pc, #356]	; 62fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d0>
    6198:	f88d 7000 	strb.w	r7, [sp]
    619c:	4622      	mov	r2, r4
    619e:	4639      	mov	r1, r7
    61a0:	f7ff ff0a 	bl	5fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48c>
    61a4:	7ba8      	ldrb	r0, [r5, #14]
    61a6:	f04f 0801 	mov.w	r8, #1
    61aa:	f1a9 0420 	sub.w	r4, r9, #32
    61ae:	b140      	cbz	r0, 61c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x696>
    61b0:	2801      	cmp	r0, #1
    61b2:	d020      	beq.n	61f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    61b4:	2802      	cmp	r0, #2
    61b6:	d02f      	beq.n	6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    61b8:	2803      	cmp	r0, #3
    61ba:	d03b      	beq.n	6234 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x708>
    61bc:	f240 21d5 	movw	r1, #725	; 0x2d5
    61c0:	e057      	b.n	6272 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    61c2:	7a20      	ldrb	r0, [r4, #8]
    61c4:	2150      	movs	r1, #80	; 0x50
    61c6:	f8ad 0004 	strh.w	r0, [sp, #4]
    61ca:	5388      	strh	r0, [r1, r6]
    61cc:	4648      	mov	r0, r9
    61ce:	f7ff fabd 	bl	574c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    61d2:	b130      	cbz	r0, 61e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b6>
    61d4:	2080      	movs	r0, #128	; 0x80
    61d6:	6a21      	ldr	r1, [r4, #32]
    61d8:	f7ff fcd0 	bl	5b7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    61dc:	f885 8009 	strb.w	r8, [r5, #9]
    61e0:	e02c      	b.n	623c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    61e2:	466a      	mov	r2, sp
    61e4:	a901      	add	r1, sp, #4
    61e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    61e8:	f007 fb73 	bl	d8d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    61ec:	6220      	str	r0, [r4, #32]
    61ee:	b110      	cbz	r0, 61f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    61f0:	f895 1053 	ldrb.w	r1, [r5, #83]	; 0x53
    61f4:	b111      	cbz	r1, 61fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    61f6:	4842      	ldr	r0, [pc, #264]	; (6300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d4>)
    61f8:	6220      	str	r0, [r4, #32]
    61fa:	e01f      	b.n	623c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    61fc:	f89d 1000 	ldrb.w	r1, [sp]
    6200:	b921      	cbnz	r1, 620c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e0>
    6202:	8007      	strh	r7, [r0, #0]
    6204:	7087      	strb	r7, [r0, #2]
    6206:	2101      	movs	r1, #1
    6208:	f007 fee4 	bl	dfd4 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    620c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6210:	6a20      	ldr	r0, [r4, #32]
    6212:	f007 fe67 	bl	dee4 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    6216:	e011      	b.n	623c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    6218:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    621c:	f8ad 0004 	strh.w	r0, [sp, #4]
    6220:	466a      	mov	r2, sp
    6222:	a901      	add	r1, sp, #4
    6224:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6226:	f007 fb54 	bl	d8d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    622a:	6220      	str	r0, [r4, #32]
    622c:	b930      	cbnz	r0, 623c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    622e:	f240 21bf 	movw	r1, #703	; 0x2bf
    6232:	e01e      	b.n	6272 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    6234:	4648      	mov	r0, r9
    6236:	f7ff fa89 	bl	574c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    623a:	b1c0      	cbz	r0, 626e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    623c:	6a20      	ldr	r0, [r4, #32]
    623e:	2308      	movs	r3, #8
    6240:	7801      	ldrb	r1, [r0, #0]
    6242:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    6246:	7001      	strb	r1, [r0, #0]
    6248:	7bea      	ldrb	r2, [r5, #15]
    624a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    624e:	4311      	orrs	r1, r2
    6250:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    6254:	7001      	strb	r1, [r0, #0]
    6256:	7c2a      	ldrb	r2, [r5, #16]
    6258:	2304      	movs	r3, #4
    625a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    625e:	4311      	orrs	r1, r2
    6260:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    6264:	7001      	strb	r1, [r0, #0]
    6266:	43c9      	mvns	r1, r1
    6268:	0789      	lsls	r1, r1, #30
    626a:	d005      	beq.n	6278 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74c>
    626c:	e007      	b.n	627e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x752>
    626e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
    6272:	2027      	movs	r0, #39	; 0x27
    6274:	f7fe fc1a 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6278:	78c0      	ldrb	r0, [r0, #3]
    627a:	2802      	cmp	r0, #2
    627c:	d00f      	beq.n	629e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x772>
    627e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6280:	f006 ffa1 	bl	d1c6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6284:	b108      	cbz	r0, 628a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x75e>
    6286:	2101      	movs	r1, #1
    6288:	e00a      	b.n	62a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x774>
    628a:	6a20      	ldr	r0, [r4, #32]
    628c:	7800      	ldrb	r0, [r0, #0]
    628e:	43c0      	mvns	r0, r0
    6290:	0780      	lsls	r0, r0, #30
    6292:	d004      	beq.n	629e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x772>
    6294:	f7ff fa18 	bl	56c8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6298:	f080 0101 	eor.w	r1, r0, #1
    629c:	e000      	b.n	62a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x774>
    629e:	2100      	movs	r1, #0
    62a0:	6a20      	ldr	r0, [r4, #32]
    62a2:	7802      	ldrb	r2, [r0, #0]
    62a4:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    62a8:	7001      	strb	r1, [r0, #0]
    62aa:	7ea9      	ldrb	r1, [r5, #26]
    62ac:	b181      	cbz	r1, 62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    62ae:	7841      	ldrb	r1, [r0, #1]
    62b0:	b171      	cbz	r1, 62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    62b2:	4814      	ldr	r0, [pc, #80]	; (6304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d8>)
    62b4:	f005 f94e 	bl	b554 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    62b8:	4811      	ldr	r0, [pc, #68]	; (6300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d4>)
    62ba:	3828      	subs	r0, #40	; 0x28
    62bc:	7607      	strb	r7, [r0, #24]
    62be:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    62c2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    62c6:	480f      	ldr	r0, [pc, #60]	; (6304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7d8>)
    62c8:	6a21      	ldr	r1, [r4, #32]
    62ca:	f004 fdb5 	bl	ae38 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    62ce:	e003      	b.n	62d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>
    62d0:	f005 f940 	bl	b554 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    62d4:	f004 fdf2 	bl	aebc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    62d8:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    62dc:	2101      	movs	r1, #1
    62de:	2000      	movs	r0, #0
    62e0:	f005 f9b0 	bl	b644 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    62e4:	f884 8004 	strb.w	r8, [r4, #4]
    62e8:	6a21      	ldr	r1, [r4, #32]
    62ea:	880a      	ldrh	r2, [r1, #0]
    62ec:	8222      	strh	r2, [r4, #16]
    62ee:	7889      	ldrb	r1, [r1, #2]
    62f0:	74a1      	strb	r1, [r4, #18]
    62f2:	f884 8000 	strb.w	r8, [r4]
    62f6:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    62fa:	0000      	.short	0x0000
    62fc:	200000f0 	.word	0x200000f0
    6300:	20000d50 	.word	0x20000d50
    6304:	20000c20 	.word	0x20000c20
    6308:	00005f8d 	.word	0x00005f8d
    630c:	00005cc9 	.word	0x00005cc9
    6310:	00005e89 	.word	0x00005e89
    6314:	000060f5 	.word	0x000060f5

00006318 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6318:	4800      	ldr	r0, [pc, #0]	; (631c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    631a:	4770      	bx	lr
    631c:	200016e1 	.word	0x200016e1

00006320 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6320:	4904      	ldr	r1, [pc, #16]	; (6334 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    6322:	788a      	ldrb	r2, [r1, #2]
    6324:	4282      	cmp	r2, r0
    6326:	d903      	bls.n	6330 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6328:	4408      	add	r0, r1
    632a:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    632e:	4770      	bx	lr
    6330:	2000      	movs	r0, #0
    6332:	4770      	bx	lr
    6334:	2000150e 	.word	0x2000150e

00006338 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6338:	4904      	ldr	r1, [pc, #16]	; (634c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    633a:	788a      	ldrb	r2, [r1, #2]
    633c:	4282      	cmp	r2, r0
    633e:	d903      	bls.n	6348 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6340:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6344:	3083      	adds	r0, #131	; 0x83
    6346:	4770      	bx	lr
    6348:	2000      	movs	r0, #0
    634a:	4770      	bx	lr
    634c:	2000150e 	.word	0x2000150e

00006350 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6350:	4a05      	ldr	r2, [pc, #20]	; (6368 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6352:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6356:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    635a:	6802      	ldr	r2, [r0, #0]
    635c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6360:	8880      	ldrh	r0, [r0, #4]
    6362:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6366:	4770      	bx	lr
    6368:	2000150e 	.word	0x2000150e

0000636c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    636c:	4904      	ldr	r1, [pc, #16]	; (6380 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    636e:	788a      	ldrb	r2, [r1, #2]
    6370:	4282      	cmp	r2, r0
    6372:	d903      	bls.n	637c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6374:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6378:	1cc0      	adds	r0, r0, #3
    637a:	4770      	bx	lr
    637c:	2000      	movs	r0, #0
    637e:	4770      	bx	lr
    6380:	2000150e 	.word	0x2000150e

00006384 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6384:	b510      	push	{r4, lr}
    6386:	f240 12d3 	movw	r2, #467	; 0x1d3
    638a:	2100      	movs	r1, #0
    638c:	4808      	ldr	r0, [pc, #32]	; (63b0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    638e:	f006 f95c 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6392:	2208      	movs	r2, #8
    6394:	21ff      	movs	r1, #255	; 0xff
    6396:	4807      	ldr	r0, [pc, #28]	; (63b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6398:	f006 f957 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    639c:	4805      	ldr	r0, [pc, #20]	; (63b4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    639e:	2100      	movs	r1, #0
    63a0:	1f00      	subs	r0, r0, #4
    63a2:	7001      	strb	r1, [r0, #0]
    63a4:	7041      	strb	r1, [r0, #1]
    63a6:	f44f 7161 	mov.w	r1, #900	; 0x384
    63aa:	8041      	strh	r1, [r0, #2]
    63ac:	bd10      	pop	{r4, pc}
    63ae:	0000      	.short	0x0000
    63b0:	2000150e 	.word	0x2000150e
    63b4:	20000348 	.word	0x20000348

000063b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    63b8:	4b0b      	ldr	r3, [pc, #44]	; (63e8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    63ba:	b510      	push	{r4, lr}
    63bc:	789c      	ldrb	r4, [r3, #2]
    63be:	4284      	cmp	r4, r0
    63c0:	d90f      	bls.n	63e2 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    63c2:	4418      	add	r0, r3
    63c4:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    63c8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    63cc:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    63d0:	700b      	strb	r3, [r1, #0]
    63d2:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    63d6:	6011      	str	r1, [r2, #0]
    63d8:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    63dc:	8090      	strh	r0, [r2, #4]
    63de:	2001      	movs	r0, #1
    63e0:	bd10      	pop	{r4, pc}
    63e2:	2000      	movs	r0, #0
    63e4:	bd10      	pop	{r4, pc}
    63e6:	0000      	.short	0x0000
    63e8:	2000150e 	.word	0x2000150e

000063ec <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    63ec:	4907      	ldr	r1, [pc, #28]	; (640c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    63ee:	788a      	ldrb	r2, [r1, #2]
    63f0:	4282      	cmp	r2, r0
    63f2:	d909      	bls.n	6408 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    63f4:	4408      	add	r0, r1
    63f6:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    63fa:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    63fe:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6402:	f000 0001 	and.w	r0, r0, #1
    6406:	4770      	bx	lr
    6408:	2000      	movs	r0, #0
    640a:	4770      	bx	lr
    640c:	2000150e 	.word	0x2000150e

00006410 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6410:	4801      	ldr	r0, [pc, #4]	; (6418 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6412:	8840      	ldrh	r0, [r0, #2]
    6414:	4770      	bx	lr
    6416:	0000      	.short	0x0000
    6418:	20000344 	.word	0x20000344

0000641c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    641c:	4905      	ldr	r1, [pc, #20]	; (6434 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    641e:	788a      	ldrb	r2, [r1, #2]
    6420:	4282      	cmp	r2, r0
    6422:	d903      	bls.n	642c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6424:	4408      	add	r0, r1
    6426:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    642a:	b108      	cbz	r0, 6430 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    642c:	2000      	movs	r0, #0
    642e:	4770      	bx	lr
    6430:	2001      	movs	r0, #1
    6432:	4770      	bx	lr
    6434:	2000150e 	.word	0x2000150e

00006438 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6438:	b570      	push	{r4, r5, r6, lr}
    643a:	460d      	mov	r5, r1
    643c:	4606      	mov	r6, r0
    643e:	f000 f8c1 	bl	65c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6442:	4c10      	ldr	r4, [pc, #64]	; (6484 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6444:	2810      	cmp	r0, #16
    6446:	d007      	beq.n	6458 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6448:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    644c:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6450:	07c9      	lsls	r1, r1, #31
    6452:	d001      	beq.n	6458 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6454:	2001      	movs	r0, #1
    6456:	bd70      	pop	{r4, r5, r6, pc}
    6458:	7861      	ldrb	r1, [r4, #1]
    645a:	2908      	cmp	r1, #8
    645c:	d210      	bcs.n	6480 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    645e:	2810      	cmp	r0, #16
    6460:	d008      	beq.n	6474 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6462:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6466:	2101      	movs	r1, #1
    6468:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    646c:	7860      	ldrb	r0, [r4, #1]
    646e:	1c40      	adds	r0, r0, #1
    6470:	7060      	strb	r0, [r4, #1]
    6472:	e7ef      	b.n	6454 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6474:	2201      	movs	r2, #1
    6476:	4629      	mov	r1, r5
    6478:	4630      	mov	r0, r6
    647a:	f000 f887 	bl	658c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    647e:	e7f5      	b.n	646c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6480:	2000      	movs	r0, #0
    6482:	bd70      	pop	{r4, r5, r6, pc}
    6484:	2000150e 	.word	0x2000150e

00006488 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6488:	b570      	push	{r4, r5, r6, lr}
    648a:	4d0b      	ldr	r5, [pc, #44]	; (64b8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    648c:	7828      	ldrb	r0, [r5, #0]
    648e:	1e40      	subs	r0, r0, #1
    6490:	b244      	sxtb	r4, r0
    6492:	e00a      	b.n	64aa <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6494:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6498:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    649c:	07c0      	lsls	r0, r0, #31
    649e:	d002      	beq.n	64a6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    64a0:	b2e0      	uxtb	r0, r4
    64a2:	f000 f8ed 	bl	6680 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    64a6:	1e64      	subs	r4, r4, #1
    64a8:	b264      	sxtb	r4, r4
    64aa:	2c00      	cmp	r4, #0
    64ac:	daf2      	bge.n	6494 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    64ae:	4903      	ldr	r1, [pc, #12]	; (64bc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    64b0:	2000      	movs	r0, #0
    64b2:	7048      	strb	r0, [r1, #1]
    64b4:	bd70      	pop	{r4, r5, r6, pc}
    64b6:	0000      	.short	0x0000
    64b8:	2000150e 	.word	0x2000150e
    64bc:	20000344 	.word	0x20000344

000064c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    64c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64c4:	2400      	movs	r4, #0
    64c6:	4625      	mov	r5, r4
    64c8:	4e18      	ldr	r6, [pc, #96]	; (652c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    64ca:	e029      	b.n	6520 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    64cc:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    64d0:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    64d4:	07c0      	lsls	r0, r0, #31
    64d6:	d021      	beq.n	651c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    64d8:	4628      	mov	r0, r5
    64da:	f000 f843 	bl	6564 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    64de:	4603      	mov	r3, r0
    64e0:	f7ff ff44 	bl	636c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    64e4:	4601      	mov	r1, r0
    64e6:	2000      	movs	r0, #0
    64e8:	2b10      	cmp	r3, #16
    64ea:	d009      	beq.n	6500 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    64ec:	18f2      	adds	r2, r6, r3
    64ee:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    64f2:	f1bc 0f01 	cmp.w	ip, #1
    64f6:	d002      	beq.n	64fe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    64f8:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    64fc:	b102      	cbz	r2, 6500 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    64fe:	2001      	movs	r0, #1
    6500:	1e40      	subs	r0, r0, #1
    6502:	4201      	tst	r1, r0
    6504:	d10a      	bne.n	651c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6506:	480a      	ldr	r0, [pc, #40]	; (6530 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6508:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    650c:	5503      	strb	r3, [r0, r4]
    650e:	4620      	mov	r0, r4
    6510:	1c64      	adds	r4, r4, #1
    6512:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    6516:	b2e4      	uxtb	r4, r4
    6518:	f005 f9b8 	bl	b88c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    651c:	1c6d      	adds	r5, r5, #1
    651e:	b2ed      	uxtb	r5, r5
    6520:	7830      	ldrb	r0, [r6, #0]
    6522:	42a8      	cmp	r0, r5
    6524:	d8d2      	bhi.n	64cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    6526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    652a:	0000      	.short	0x0000
    652c:	2000150e 	.word	0x2000150e
    6530:	20000348 	.word	0x20000348
    6534:	4602      	mov	r2, r0
    6536:	4809      	ldr	r0, [pc, #36]	; (655c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6538:	b510      	push	{r4, lr}
    653a:	7800      	ldrb	r0, [r0, #0]
    653c:	460b      	mov	r3, r1
    653e:	b158      	cbz	r0, 6558 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6540:	4807      	ldr	r0, [pc, #28]	; (6560 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6542:	7881      	ldrb	r1, [r0, #2]
    6544:	b141      	cbz	r1, 6558 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6546:	b10b      	cbz	r3, 654c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6548:	1cc0      	adds	r0, r0, #3
    654a:	e001      	b.n	6550 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    654c:	4804      	ldr	r0, [pc, #16]	; (6560 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    654e:	3083      	adds	r0, #131	; 0x83
    6550:	f004 fb7a 	bl	ac48 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6554:	2001      	movs	r0, #1
    6556:	bd10      	pop	{r4, pc}
    6558:	2000      	movs	r0, #0
    655a:	bd10      	pop	{r4, pc}
    655c:	20000344 	.word	0x20000344
    6560:	2000150e 	.word	0x2000150e
    6564:	4908      	ldr	r1, [pc, #32]	; (6588 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    6566:	b510      	push	{r4, lr}
    6568:	4603      	mov	r3, r0
    656a:	2000      	movs	r0, #0
    656c:	788a      	ldrb	r2, [r1, #2]
    656e:	e006      	b.n	657e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6570:	180c      	adds	r4, r1, r0
    6572:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    6576:	429c      	cmp	r4, r3
    6578:	d004      	beq.n	6584 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    657a:	1c40      	adds	r0, r0, #1
    657c:	b2c0      	uxtb	r0, r0
    657e:	4282      	cmp	r2, r0
    6580:	d8f6      	bhi.n	6570 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    6582:	2010      	movs	r0, #16
    6584:	bd10      	pop	{r4, pc}
    6586:	0000      	.short	0x0000
    6588:	2000150e 	.word	0x2000150e
    658c:	b570      	push	{r4, r5, r6, lr}
    658e:	4b0c      	ldr	r3, [pc, #48]	; (65c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6590:	4604      	mov	r4, r0
    6592:	7818      	ldrb	r0, [r3, #0]
    6594:	1c45      	adds	r5, r0, #1
    6596:	701d      	strb	r5, [r3, #0]
    6598:	2810      	cmp	r0, #16
    659a:	d303      	bcc.n	65a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    659c:	2146      	movs	r1, #70	; 0x46
    659e:	2028      	movs	r0, #40	; 0x28
    65a0:	f7fe fa84 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65a4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    65a8:	680d      	ldr	r5, [r1, #0]
    65aa:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    65ae:	8889      	ldrh	r1, [r1, #4]
    65b0:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    65b4:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    65b8:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    65bc:	bd70      	pop	{r4, r5, r6, pc}
    65be:	0000      	.short	0x0000
    65c0:	2000150e 	.word	0x2000150e
    65c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    65c6:	4c1a      	ldr	r4, [pc, #104]	; (6630 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    65c8:	4603      	mov	r3, r0
    65ca:	2000      	movs	r0, #0
    65cc:	7825      	ldrb	r5, [r4, #0]
    65ce:	e02a      	b.n	6626 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    65d0:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    65d4:	780f      	ldrb	r7, [r1, #0]
    65d6:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    65da:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    65de:	ea87 070c 	eor.w	r7, r7, ip
    65e2:	405e      	eors	r6, r3
    65e4:	443e      	add	r6, r7
    65e6:	784f      	ldrb	r7, [r1, #1]
    65e8:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    65ec:	ea87 070c 	eor.w	r7, r7, ip
    65f0:	443e      	add	r6, r7
    65f2:	788f      	ldrb	r7, [r1, #2]
    65f4:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    65f8:	ea87 070c 	eor.w	r7, r7, ip
    65fc:	443e      	add	r6, r7
    65fe:	78cf      	ldrb	r7, [r1, #3]
    6600:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    6604:	ea87 070c 	eor.w	r7, r7, ip
    6608:	443e      	add	r6, r7
    660a:	790f      	ldrb	r7, [r1, #4]
    660c:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    6610:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    6614:	ea87 070c 	eor.w	r7, r7, ip
    6618:	443e      	add	r6, r7
    661a:	794f      	ldrb	r7, [r1, #5]
    661c:	4057      	eors	r7, r2
    661e:	42f7      	cmn	r7, r6
    6620:	d004      	beq.n	662c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    6622:	1c40      	adds	r0, r0, #1
    6624:	b2c0      	uxtb	r0, r0
    6626:	4285      	cmp	r5, r0
    6628:	d8d2      	bhi.n	65d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    662a:	2010      	movs	r0, #16
    662c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    662e:	0000      	.short	0x0000
    6630:	2000150e 	.word	0x2000150e
    6634:	b570      	push	{r4, r5, r6, lr}
    6636:	4605      	mov	r5, r0
    6638:	f7ff ff94 	bl	6564 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    663c:	2810      	cmp	r0, #16
    663e:	d11c      	bne.n	667a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6640:	4c0e      	ldr	r4, [pc, #56]	; (667c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    6642:	7820      	ldrb	r0, [r4, #0]
    6644:	1e40      	subs	r0, r0, #1
    6646:	b2c0      	uxtb	r0, r0
    6648:	7020      	strb	r0, [r4, #0]
    664a:	42a8      	cmp	r0, r5
    664c:	d015      	beq.n	667a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    664e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6652:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6656:	f502 7080 	add.w	r0, r2, #256	; 0x100
    665a:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    665e:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6662:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6666:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    666a:	7820      	ldrb	r0, [r4, #0]
    666c:	f7ff ff7a 	bl	6564 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6670:	2810      	cmp	r0, #16
    6672:	d002      	beq.n	667a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    6674:	4420      	add	r0, r4
    6676:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    667a:	bd70      	pop	{r4, r5, r6, pc}
    667c:	2000150e 	.word	0x2000150e
    6680:	4905      	ldr	r1, [pc, #20]	; (6698 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    6682:	784a      	ldrb	r2, [r1, #1]
    6684:	1e52      	subs	r2, r2, #1
    6686:	704a      	strb	r2, [r1, #1]
    6688:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    668c:	2200      	movs	r2, #0
    668e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6692:	f7ff bfcf 	b.w	6634 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    6696:	0000      	.short	0x0000
    6698:	2000150e 	.word	0x2000150e

0000669c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    66a0:	4604      	mov	r4, r0
    66a2:	f100 0580 	add.w	r5, r0, #128	; 0x80
    66a6:	f04f 0901 	mov.w	r9, #1
    66aa:	b171      	cbz	r1, 66ca <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    66ac:	f104 079e 	add.w	r7, r4, #158	; 0x9e
    66b0:	1e7e      	subs	r6, r7, #1
    66b2:	2901      	cmp	r1, #1
    66b4:	d020      	beq.n	66f8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5c>
    66b6:	2902      	cmp	r1, #2
    66b8:	d045      	beq.n	6746 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xaa>
    66ba:	2903      	cmp	r1, #3
    66bc:	d11a      	bne.n	66f4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    66be:	4639      	mov	r1, r7
    66c0:	4630      	mov	r0, r6
    66c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    66c6:	f007 bb09 	b.w	dcdc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    66ca:	f44f 723a 	mov.w	r2, #744	; 0x2e8
    66ce:	2100      	movs	r1, #0
    66d0:	f005 ffbb 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    66d4:	f885 901d 	strb.w	r9, [r5, #29]
    66d8:	4820      	ldr	r0, [pc, #128]	; (675c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    66da:	6668      	str	r0, [r5, #100]	; 0x64
    66dc:	2007      	movs	r0, #7
    66de:	66a8      	str	r0, [r5, #104]	; 0x68
    66e0:	f814 0fe4 	ldrb.w	r0, [r4, #228]!
    66e4:	f020 0004 	bic.w	r0, r0, #4
    66e8:	7020      	strb	r0, [r4, #0]
    66ea:	20fe      	movs	r0, #254	; 0xfe
    66ec:	f885 009c 	strb.w	r0, [r5, #156]	; 0x9c
    66f0:	207f      	movs	r0, #127	; 0x7f
    66f2:	7468      	strb	r0, [r5, #17]
    66f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    66f8:	f04f 0800 	mov.w	r8, #0
    66fc:	f8a4 8226 	strh.w	r8, [r4, #550]	; 0x226
    6700:	f884 821b 	strb.w	r8, [r4, #539]	; 0x21b
    6704:	6921      	ldr	r1, [r4, #16]
    6706:	4816      	ldr	r0, [pc, #88]	; (6760 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>)
    6708:	460a      	mov	r2, r1
    670a:	4408      	add	r0, r1
    670c:	fbb0 f0f1 	udiv	r0, r0, r1
    6710:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    6714:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6718:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    671c:	8b63      	ldrh	r3, [r4, #26]
    671e:	4628      	mov	r0, r5
    6720:	f000 f820 	bl	6764 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    6724:	4639      	mov	r1, r7
    6726:	4630      	mov	r0, r6
    6728:	f007 fad8 	bl	dcdc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    672c:	f005 feef 	bl	c50e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6730:	b118      	cbz	r0, 673a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9e>
    6732:	6960      	ldr	r0, [r4, #20]
    6734:	f000 fb82 	bl	6e3c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6738:	b110      	cbz	r0, 6740 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa4>
    673a:	f884 820c 	strb.w	r8, [r4, #524]	; 0x20c
    673e:	e7d9      	b.n	66f4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    6740:	f884 920c 	strb.w	r9, [r4, #524]	; 0x20c
    6744:	e7d6      	b.n	66f4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x58>
    6746:	6901      	ldr	r1, [r0, #16]
    6748:	f8b4 32ca 	ldrh.w	r3, [r4, #714]	; 0x2ca
    674c:	f8d4 22c4 	ldr.w	r2, [r4, #708]	; 0x2c4
    6750:	4628      	mov	r0, r5
    6752:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6756:	f000 b805 	b.w	6764 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>
    675a:	0000      	.short	0x0000
    675c:	3004492f 	.word	0x3004492f
    6760:	01c9c37f 	.word	0x01c9c37f
    6764:	b510      	push	{r4, lr}
    6766:	2400      	movs	r4, #0
    6768:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
    676c:	f830 4f48 	ldrh.w	r4, [r0, #72]!
    6770:	434c      	muls	r4, r1
    6772:	fbb4 f4f2 	udiv	r4, r4, r2
    6776:	f820 4910 	strh.w	r4, [r0], #-16
    677a:	f240 2471 	movw	r4, #625	; 0x271
    677e:	4363      	muls	r3, r4
    6780:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6784:	1e5b      	subs	r3, r3, #1
    6786:	fbb3 f3f2 	udiv	r3, r3, r2
    678a:	81c3      	strh	r3, [r0, #14]
    678c:	4b09      	ldr	r3, [pc, #36]	; (67b4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x118>)
    678e:	fbb3 f3f2 	udiv	r3, r3, r2
    6792:	1c5b      	adds	r3, r3, #1
    6794:	8283      	strh	r3, [r0, #20]
    6796:	8903      	ldrh	r3, [r0, #8]
    6798:	4363      	muls	r3, r4
    679a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    679e:	1e5b      	subs	r3, r3, #1
    67a0:	fbb3 f3f2 	udiv	r3, r3, r2
    67a4:	6043      	str	r3, [r0, #4]
    67a6:	6803      	ldr	r3, [r0, #0]
    67a8:	434b      	muls	r3, r1
    67aa:	fbb3 f1f2 	udiv	r1, r3, r2
    67ae:	6001      	str	r1, [r0, #0]
    67b0:	bd10      	pop	{r4, pc}
    67b2:	0000      	.short	0x0000
    67b4:	02625a00 	.word	0x02625a00

000067b8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    67b8:	b570      	push	{r4, r5, r6, lr}
    67ba:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    67be:	b28b      	uxth	r3, r1
    67c0:	7ac5      	ldrb	r5, [r0, #11]
    67c2:	ea83 0102 	eor.w	r1, r3, r2
    67c6:	2200      	movs	r2, #0
    67c8:	b2cc      	uxtb	r4, r1
    67ca:	0a09      	lsrs	r1, r1, #8
    67cc:	fa94 f4a4 	rbit	r4, r4
    67d0:	fa91 f1a1 	rbit	r1, r1
    67d4:	0e24      	lsrs	r4, r4, #24
    67d6:	0e09      	lsrs	r1, r1, #24
    67d8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    67dc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    67e0:	1c52      	adds	r2, r2, #1
    67e2:	4419      	add	r1, r3
    67e4:	b2d2      	uxtb	r2, r2
    67e6:	b289      	uxth	r1, r1
    67e8:	2a03      	cmp	r2, #3
    67ea:	d3ed      	bcc.n	67c8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    67ec:	4059      	eors	r1, r3
    67ee:	2225      	movs	r2, #37	; 0x25
    67f0:	fbb1 f3f2 	udiv	r3, r1, r2
    67f4:	fb02 1213 	mls	r2, r2, r3, r1
    67f8:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    67fc:	f002 0607 	and.w	r6, r2, #7
    6800:	785b      	ldrb	r3, [r3, #1]
    6802:	2401      	movs	r4, #1
    6804:	fa04 f606 	lsl.w	r6, r4, r6
    6808:	4233      	tst	r3, r6
    680a:	d001      	beq.n	6810 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    680c:	4610      	mov	r0, r2
    680e:	bd70      	pop	{r4, r5, r6, pc}
    6810:	434d      	muls	r5, r1
    6812:	0c29      	lsrs	r1, r5, #16
    6814:	1c49      	adds	r1, r1, #1
    6816:	b2c9      	uxtb	r1, r1
    6818:	2200      	movs	r2, #0
    681a:	1885      	adds	r5, r0, r2
    681c:	79ab      	ldrb	r3, [r5, #6]
    681e:	428b      	cmp	r3, r1
    6820:	d312      	bcc.n	6848 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6822:	f895 5001 	ldrb.w	r5, [r5, #1]
    6826:	2300      	movs	r3, #0
    6828:	fa04 f603 	lsl.w	r6, r4, r3
    682c:	4235      	tst	r5, r6
    682e:	d001      	beq.n	6834 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6830:	1e49      	subs	r1, r1, #1
    6832:	b2c9      	uxtb	r1, r1
    6834:	b121      	cbz	r1, 6840 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6836:	1c5b      	adds	r3, r3, #1
    6838:	b2db      	uxtb	r3, r3
    683a:	2b08      	cmp	r3, #8
    683c:	d3f4      	bcc.n	6828 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    683e:	e005      	b.n	684c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6840:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6844:	b2c0      	uxtb	r0, r0
    6846:	bd70      	pop	{r4, r5, r6, pc}
    6848:	1ac9      	subs	r1, r1, r3
    684a:	b2c9      	uxtb	r1, r1
    684c:	1c52      	adds	r2, r2, #1
    684e:	b2d2      	uxtb	r2, r2
    6850:	2a05      	cmp	r2, #5
    6852:	d3e2      	bcc.n	681a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6854:	21f9      	movs	r1, #249	; 0xf9
    6856:	2046      	movs	r0, #70	; 0x46
    6858:	f7fe f928 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000685c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    685c:	7841      	ldrb	r1, [r0, #1]
    685e:	b141      	cbz	r1, 6872 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    6860:	78c0      	ldrb	r0, [r0, #3]
    6862:	282b      	cmp	r0, #43	; 0x2b
    6864:	d203      	bcs.n	686e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    6866:	4a04      	ldr	r2, [pc, #16]	; (6878 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    6868:	5c10      	ldrb	r0, [r2, r0]
    686a:	4288      	cmp	r0, r1
    686c:	d101      	bne.n	6872 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    686e:	2001      	movs	r0, #1
    6870:	4770      	bx	lr
    6872:	2000      	movs	r0, #0
    6874:	4770      	bx	lr
    6876:	0000      	.short	0x0000
    6878:	00010814 	.word	0x00010814

0000687c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    687c:	b510      	push	{r4, lr}
    687e:	2201      	movs	r2, #1
    6880:	70c1      	strb	r1, [r0, #3]
    6882:	292b      	cmp	r1, #43	; 0x2b
    6884:	d202      	bcs.n	688c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    6886:	4a06      	ldr	r2, [pc, #24]	; (68a0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    6888:	5c52      	ldrb	r2, [r2, r1]
    688a:	e006      	b.n	689a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    688c:	29ff      	cmp	r1, #255	; 0xff
    688e:	d004      	beq.n	689a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    6890:	f44f 618f 	mov.w	r1, #1144	; 0x478
    6894:	202a      	movs	r0, #42	; 0x2a
    6896:	f7fe f909 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    689a:	7042      	strb	r2, [r0, #1]
    689c:	bd10      	pop	{r4, pc}
    689e:	0000      	.short	0x0000
    68a0:	00010814 	.word	0x00010814

000068a4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    68a4:	4904      	ldr	r1, [pc, #16]	; (68b8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    68a6:	7c89      	ldrb	r1, [r1, #18]
    68a8:	0749      	lsls	r1, r1, #29
    68aa:	d400      	bmi.n	68ae <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    68ac:	b108      	cbz	r0, 68b2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    68ae:	2000      	movs	r0, #0
    68b0:	4770      	bx	lr
    68b2:	2001      	movs	r0, #1
    68b4:	4770      	bx	lr
    68b6:	0000      	.short	0x0000
    68b8:	2000144c 	.word	0x2000144c

000068bc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    68bc:	4803      	ldr	r0, [pc, #12]	; (68cc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    68be:	7c80      	ldrb	r0, [r0, #18]
    68c0:	0780      	lsls	r0, r0, #30
    68c2:	d401      	bmi.n	68c8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    68c4:	2001      	movs	r0, #1
    68c6:	4770      	bx	lr
    68c8:	2000      	movs	r0, #0
    68ca:	4770      	bx	lr
    68cc:	2000144c 	.word	0x2000144c

000068d0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    68d0:	4803      	ldr	r0, [pc, #12]	; (68e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    68d2:	7c80      	ldrb	r0, [r0, #18]
    68d4:	07c0      	lsls	r0, r0, #31
    68d6:	d001      	beq.n	68dc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    68d8:	2000      	movs	r0, #0
    68da:	4770      	bx	lr
    68dc:	2001      	movs	r0, #1
    68de:	4770      	bx	lr
    68e0:	2000144c 	.word	0x2000144c
    68e4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    68e8:	4688      	mov	r8, r1
    68ea:	4699      	mov	r9, r3
    68ec:	4615      	mov	r5, r2
    68ee:	4604      	mov	r4, r0
    68f0:	4669      	mov	r1, sp
    68f2:	f007 f831 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    68f6:	bbc8      	cbnz	r0, 696c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    68f8:	9e01      	ldr	r6, [sp, #4]
    68fa:	2700      	movs	r7, #0
    68fc:	3680      	adds	r6, #128	; 0x80
    68fe:	b17d      	cbz	r5, 6920 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    6900:	4620      	mov	r0, r4
    6902:	f7fe fce1 	bl	52c8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6906:	0004      	movs	r4, r0
    6908:	d00d      	beq.n	6926 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    690a:	4629      	mov	r1, r5
    690c:	f006 fc2d 	bl	d16a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6910:	b118      	cbz	r0, 691a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    6912:	4919      	ldr	r1, [pc, #100]	; (6978 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>)
    6914:	8849      	ldrh	r1, [r1, #2]
    6916:	42a9      	cmp	r1, r5
    6918:	d207      	bcs.n	692a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    691a:	2000      	movs	r0, #0
    691c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    6920:	2001      	movs	r0, #1
    6922:	7730      	strb	r0, [r6, #28]
    6924:	e022      	b.n	696c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    6926:	2168      	movs	r1, #104	; 0x68
    6928:	e023      	b.n	6972 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    692a:	4601      	mov	r1, r0
    692c:	aa02      	add	r2, sp, #8
    692e:	4620      	mov	r0, r4
    6930:	f006 fc14 	bl	d15c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6934:	9802      	ldr	r0, [sp, #8]
    6936:	8007      	strh	r7, [r0, #0]
    6938:	7087      	strb	r7, [r0, #2]
    693a:	7f31      	ldrb	r1, [r6, #28]
    693c:	b109      	cbz	r1, 6942 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x72>
    693e:	f04f 0802 	mov.w	r8, #2
    6942:	4641      	mov	r1, r8
    6944:	f007 fb46 	bl	dfd4 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    6948:	9802      	ldr	r0, [sp, #8]
    694a:	462a      	mov	r2, r5
    694c:	4649      	mov	r1, r9
    694e:	1cc0      	adds	r0, r0, #3
    6950:	f005 fe01 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6954:	4620      	mov	r0, r4
    6956:	4629      	mov	r1, r5
    6958:	f006 fbbe 	bl	d0d8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    695c:	b140      	cbz	r0, 6970 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa0>
    695e:	4668      	mov	r0, sp
    6960:	f007 fb93 	bl	e08a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6964:	9801      	ldr	r0, [sp, #4]
    6966:	f8a0 7212 	strh.w	r7, [r0, #530]	; 0x212
    696a:	7737      	strb	r7, [r6, #28]
    696c:	2001      	movs	r0, #1
    696e:	e7d5      	b.n	691c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    6970:	217d      	movs	r1, #125	; 0x7d
    6972:	202b      	movs	r0, #43	; 0x2b
    6974:	f7fe f89a 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6978:	2000144c 	.word	0x2000144c

0000697c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    697c:	2202      	movs	r2, #2
    697e:	4902      	ldr	r1, [pc, #8]	; (6988 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0xc>)
    6980:	4802      	ldr	r0, [pc, #8]	; (698c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x10>)
    6982:	f000 b805 	b.w	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6986:	0000      	.short	0x0000
    6988:	0000e1c9 	.word	0x0000e1c9
    698c:	20001464 	.word	0x20001464

00006990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>:
    6990:	b538      	push	{r3, r4, r5, lr}
    6992:	b318      	cbz	r0, 69dc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x4c>
    6994:	7a03      	ldrb	r3, [r0, #8]
    6996:	f88d 3000 	strb.w	r3, [sp]
    699a:	9b00      	ldr	r3, [sp, #0]
    699c:	9300      	str	r3, [sp, #0]
    699e:	f89d 3000 	ldrb.w	r3, [sp]
    69a2:	2b00      	cmp	r3, #0
    69a4:	d126      	bne.n	69f4 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x64>
    69a6:	6041      	str	r1, [r0, #4]
    69a8:	f100 0108 	add.w	r1, r0, #8
    69ac:	700a      	strb	r2, [r1, #0]
    69ae:	f3ef 8210 	mrs	r2, PRIMASK
    69b2:	b672      	cpsid	i
    69b4:	4b10      	ldr	r3, [pc, #64]	; (69f8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x68>)
    69b6:	6003      	str	r3, [r0, #0]
    69b8:	1f19      	subs	r1, r3, #4
    69ba:	684c      	ldr	r4, [r1, #4]
    69bc:	7a24      	ldrb	r4, [r4, #8]
    69be:	f88d 4000 	strb.w	r4, [sp]
    69c2:	9c00      	ldr	r4, [sp, #0]
    69c4:	9400      	str	r4, [sp, #0]
    69c6:	f89d 5000 	ldrb.w	r5, [sp]
    69ca:	2d01      	cmp	r5, #1
    69cc:	d004      	beq.n	69d8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x48>
    69ce:	680b      	ldr	r3, [r1, #0]
    69d0:	6018      	str	r0, [r3, #0]
    69d2:	6008      	str	r0, [r1, #0]
    69d4:	b13a      	cbz	r2, 69e6 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x56>
    69d6:	e007      	b.n	69e8 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x58>
    69d8:	600b      	str	r3, [r1, #0]
    69da:	e7f9      	b.n	69d0 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x40>
    69dc:	f44f 6192 	mov.w	r1, #1168	; 0x490
    69e0:	2010      	movs	r0, #16
    69e2:	f7fe f863 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69e6:	b662      	cpsie	i
    69e8:	4804      	ldr	r0, [pc, #16]	; (69fc <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA+0x6c>)
    69ea:	7800      	ldrb	r0, [r0, #0]
    69ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    69f0:	f7fd be52 	b.w	4698 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    69f4:	bd38      	pop	{r3, r4, r5, pc}
    69f6:	0000      	.short	0x0000
    69f8:	2000147c 	.word	0x2000147c
    69fc:	20000364 	.word	0x20000364

00006a00 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a04:	4f47      	ldr	r7, [pc, #284]	; (6b24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x124>)
    6a06:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6b28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x128>
    6a0a:	4682      	mov	sl, r0
    6a0c:	2600      	movs	r6, #0
    6a0e:	6878      	ldr	r0, [r7, #4]
    6a10:	7a00      	ldrb	r0, [r0, #8]
    6a12:	f88d 0000 	strb.w	r0, [sp]
    6a16:	9800      	ldr	r0, [sp, #0]
    6a18:	9000      	str	r0, [sp, #0]
    6a1a:	f89d 1000 	ldrb.w	r1, [sp]
    6a1e:	2927      	cmp	r1, #39	; 0x27
    6a20:	d106      	bne.n	6a30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    6a22:	f899 1013 	ldrb.w	r1, [r9, #19]
    6a26:	b119      	cbz	r1, 6a30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>
    6a28:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    6a2c:	2800      	cmp	r0, #0
    6a2e:	d06c      	beq.n	6b0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    6a30:	f88d 6000 	strb.w	r6, [sp]
    6a34:	4668      	mov	r0, sp
    6a36:	f000 f8f3 	bl	6c20 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    6a3a:	f89d 1000 	ldrb.w	r1, [sp]
    6a3e:	2900      	cmp	r1, #0
    6a40:	d1f8      	bne.n	6a34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x34>
    6a42:	2800      	cmp	r0, #0
    6a44:	d061      	beq.n	6b0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    6a46:	4604      	mov	r4, r0
    6a48:	7a00      	ldrb	r0, [r0, #8]
    6a4a:	f88d 0000 	strb.w	r0, [sp]
    6a4e:	9800      	ldr	r0, [sp, #0]
    6a50:	9000      	str	r0, [sp, #0]
    6a52:	f89d 5000 	ldrb.w	r5, [sp]
    6a56:	1ea8      	subs	r0, r5, #2
    6a58:	2826      	cmp	r0, #38	; 0x26
    6a5a:	d25d      	bcs.n	6b18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    6a5c:	e8df f000 	tbb	[pc, r0]
    6a60:	1a5c2213 	.word	0x1a5c2213
    6a64:	3e22225c 	.word	0x3e22225c
    6a68:	22222222 	.word	0x22222222
    6a6c:	5c1a5c22 	.word	0x5c1a5c22
    6a70:	5c1a2222 	.word	0x5c1a2222
    6a74:	225c5c5c 	.word	0x225c5c5c
    6a78:	1a225c5c 	.word	0x1a225c5c
    6a7c:	435c2222 	.word	0x435c2222
    6a80:	2f5c5c1a 	.word	0x2f5c5c1a
    6a84:	4c34      	.short	0x4c34
    6a86:	6862      	ldr	r2, [r4, #4]
    6a88:	bb7a      	cbnz	r2, 6aea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    6a8a:	f240 318a 	movw	r1, #906	; 0x38a
    6a8e:	e040      	b.n	6b12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6a90:	7226      	strb	r6, [r4, #8]
    6a92:	e044      	b.n	6b1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    6a94:	4825      	ldr	r0, [pc, #148]	; (6b2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    6a96:	6803      	ldr	r3, [r0, #0]
    6a98:	b11b      	cbz	r3, 6aa2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    6a9a:	6860      	ldr	r0, [r4, #4]
    6a9c:	462a      	mov	r2, r5
    6a9e:	4651      	mov	r1, sl
    6aa0:	4798      	blx	r3
    6aa2:	e7f5      	b.n	6a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6aa4:	462a      	mov	r2, r5
    6aa6:	4621      	mov	r1, r4
    6aa8:	4650      	mov	r0, sl
    6aaa:	f000 f8e1 	bl	6c70 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x120>
    6aae:	b110      	cbz	r0, 6ab6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    6ab0:	2d0d      	cmp	r5, #13
    6ab2:	d034      	beq.n	6b1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    6ab4:	e7ec      	b.n	6a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6ab6:	2d0d      	cmp	r5, #13
    6ab8:	d031      	beq.n	6b1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    6aba:	7226      	strb	r6, [r4, #8]
    6abc:	e7a7      	b.n	6a0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe>
    6abe:	6862      	ldr	r2, [r4, #4]
    6ac0:	b99a      	cbnz	r2, 6aea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    6ac2:	f240 412b 	movw	r1, #1067	; 0x42b
    6ac6:	e024      	b.n	6b12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6ac8:	f88a 6001 	strb.w	r6, [sl, #1]
    6acc:	2115      	movs	r1, #21
    6ace:	f88a 1000 	strb.w	r1, [sl]
    6ad2:	f8d4 1009 	ldr.w	r1, [r4, #9]
    6ad6:	f8ca 1004 	str.w	r1, [sl, #4]
    6ada:	e7d9      	b.n	6a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6adc:	6862      	ldr	r2, [r4, #4]
    6ade:	b922      	cbnz	r2, 6aea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    6ae0:	f240 413d 	movw	r1, #1085	; 0x43d
    6ae4:	e015      	b.n	6b12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6ae6:	6862      	ldr	r2, [r4, #4]
    6ae8:	b11a      	cbz	r2, 6af2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf2>
    6aea:	4651      	mov	r1, sl
    6aec:	4620      	mov	r0, r4
    6aee:	4790      	blx	r2
    6af0:	e7ce      	b.n	6a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    6af2:	f240 4147 	movw	r1, #1095	; 0x447
    6af6:	e00c      	b.n	6b12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6af8:	480d      	ldr	r0, [pc, #52]	; (6b30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>)
    6afa:	6802      	ldr	r2, [r0, #0]
    6afc:	b122      	cbz	r2, 6b08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    6afe:	6860      	ldr	r0, [r4, #4]
    6b00:	b128      	cbz	r0, 6b0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    6b02:	8800      	ldrh	r0, [r0, #0]
    6b04:	4651      	mov	r1, sl
    6b06:	4790      	blx	r2
    6b08:	2002      	movs	r0, #2
    6b0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b0e:	f44f 618a 	mov.w	r1, #1104	; 0x450
    6b12:	2010      	movs	r0, #16
    6b14:	f7fd ffca 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b18:	f240 416b 	movw	r1, #1131	; 0x46b
    6b1c:	e7f9      	b.n	6b12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x112>
    6b1e:	2004      	movs	r0, #4
    6b20:	e7f3      	b.n	6b0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10a>
    6b22:	0000      	.short	0x0000
    6b24:	20001478 	.word	0x20001478
    6b28:	2000144c 	.word	0x2000144c
    6b2c:	20000110 	.word	0x20000110
    6b30:	20000114 	.word	0x20000114

00006b34 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6b34:	4901      	ldr	r1, [pc, #4]	; (6b3c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    6b36:	7008      	strb	r0, [r1, #0]
    6b38:	f000 b96a 	b.w	6e10 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c0>
    6b3c:	20000364 	.word	0x20000364

00006b40 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6b40:	4902      	ldr	r1, [pc, #8]	; (6b4c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6b42:	4801      	ldr	r0, [pc, #4]	; (6b48 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6b44:	6008      	str	r0, [r1, #0]
    6b46:	4770      	bx	lr
    6b48:	0000e69d 	.word	0x0000e69d
    6b4c:	20000110 	.word	0x20000110

00006b50 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6b50:	4905      	ldr	r1, [pc, #20]	; (6b68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6b52:	4804      	ldr	r0, [pc, #16]	; (6b64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6b54:	6008      	str	r0, [r1, #0]
    6b56:	4906      	ldr	r1, [pc, #24]	; (6b70 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6b58:	4804      	ldr	r0, [pc, #16]	; (6b6c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    6b5a:	6008      	str	r0, [r1, #0]
    6b5c:	4906      	ldr	r1, [pc, #24]	; (6b78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    6b5e:	4805      	ldr	r0, [pc, #20]	; (6b74 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6b60:	6008      	str	r0, [r1, #0]
    6b62:	4770      	bx	lr
    6b64:	0000e69d 	.word	0x0000e69d
    6b68:	20000110 	.word	0x20000110
    6b6c:	0000e0d5 	.word	0x0000e0d5
    6b70:	20000118 	.word	0x20000118
    6b74:	00006b7d 	.word	0x00006b7d
    6b78:	20000114 	.word	0x20000114
    6b7c:	b538      	push	{r3, r4, r5, lr}
    6b7e:	000d      	movs	r5, r1
    6b80:	d014      	beq.n	6bac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x5c>
    6b82:	8028      	strh	r0, [r5, #0]
    6b84:	2100      	movs	r1, #0
    6b86:	7169      	strb	r1, [r5, #5]
    6b88:	f7fe fb88 	bl	529c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6b8c:	4604      	mov	r4, r0
    6b8e:	f006 fac7 	bl	d120 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    6b92:	b170      	cbz	r0, 6bb2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x62>
    6b94:	4601      	mov	r1, r0
    6b96:	466a      	mov	r2, sp
    6b98:	4620      	mov	r0, r4
    6b9a:	f006 fadf 	bl	d15c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6b9e:	8068      	strh	r0, [r5, #2]
    6ba0:	b150      	cbz	r0, 6bb8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    6ba2:	28fb      	cmp	r0, #251	; 0xfb
    6ba4:	d90b      	bls.n	6bbe <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x6e>
    6ba6:	f240 21c2 	movw	r1, #706	; 0x2c2
    6baa:	e033      	b.n	6c14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6bac:	f240 21b1 	movw	r1, #689	; 0x2b1
    6bb0:	e030      	b.n	6c14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6bb2:	f240 21ba 	movw	r1, #698	; 0x2ba
    6bb6:	e02d      	b.n	6c14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6bb8:	f240 21bf 	movw	r1, #703	; 0x2bf
    6bbc:	e02a      	b.n	6c14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6bbe:	9800      	ldr	r0, [sp, #0]
    6bc0:	f007 f9b4 	bl	df2c <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    6bc4:	2801      	cmp	r0, #1
    6bc6:	d004      	beq.n	6bd2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x82>
    6bc8:	2802      	cmp	r0, #2
    6bca:	d002      	beq.n	6bd2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x82>
    6bcc:	f240 21d3 	movw	r1, #723	; 0x2d3
    6bd0:	e020      	b.n	6c14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6bd2:	7128      	strb	r0, [r5, #4]
    6bd4:	68a8      	ldr	r0, [r5, #8]
    6bd6:	b1a8      	cbz	r0, 6c04 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    6bd8:	9900      	ldr	r1, [sp, #0]
    6bda:	886a      	ldrh	r2, [r5, #2]
    6bdc:	1cc9      	adds	r1, r1, #3
    6bde:	f005 fcba 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6be2:	4620      	mov	r0, r4
    6be4:	f006 fa64 	bl	d0b0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    6be8:	b178      	cbz	r0, 6c0a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xba>
    6bea:	4620      	mov	r0, r4
    6bec:	2100      	movs	r1, #0
    6bee:	f006 fb53 	bl	d298 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6bf2:	b168      	cbz	r0, 6c10 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc0>
    6bf4:	4809      	ldr	r0, [pc, #36]	; (6c1c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xcc>)
    6bf6:	7cc1      	ldrb	r1, [r0, #19]
    6bf8:	2900      	cmp	r1, #0
    6bfa:	d002      	beq.n	6c02 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    6bfc:	8a81      	ldrh	r1, [r0, #20]
    6bfe:	1e49      	subs	r1, r1, #1
    6c00:	8281      	strh	r1, [r0, #20]
    6c02:	bd38      	pop	{r3, r4, r5, pc}
    6c04:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    6c08:	e004      	b.n	6c14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6c0a:	f240 21e1 	movw	r1, #737	; 0x2e1
    6c0e:	e001      	b.n	6c14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc4>
    6c10:	f240 21e6 	movw	r1, #742	; 0x2e6
    6c14:	2010      	movs	r0, #16
    6c16:	f7fd ff49 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c1a:	0000      	.short	0x0000
    6c1c:	2000144c 	.word	0x2000144c
    6c20:	b538      	push	{r3, r4, r5, lr}
    6c22:	4602      	mov	r2, r0
    6c24:	4b11      	ldr	r3, [pc, #68]	; (6c6c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>)
    6c26:	2000      	movs	r0, #0
    6c28:	7010      	strb	r0, [r2, #0]
    6c2a:	6858      	ldr	r0, [r3, #4]
    6c2c:	7a01      	ldrb	r1, [r0, #8]
    6c2e:	f88d 1000 	strb.w	r1, [sp]
    6c32:	9900      	ldr	r1, [sp, #0]
    6c34:	9100      	str	r1, [sp, #0]
    6c36:	f89d 5000 	ldrb.w	r5, [sp]
    6c3a:	2401      	movs	r4, #1
    6c3c:	2d01      	cmp	r5, #1
    6c3e:	d006      	beq.n	6c4e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    6c40:	f3ef 8110 	mrs	r1, PRIMASK
    6c44:	b672      	cpsid	i
    6c46:	6805      	ldr	r5, [r0, #0]
    6c48:	605d      	str	r5, [r3, #4]
    6c4a:	b111      	cbz	r1, 6c52 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x102>
    6c4c:	e002      	b.n	6c54 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x104>
    6c4e:	2000      	movs	r0, #0
    6c50:	bd38      	pop	{r3, r4, r5, pc}
    6c52:	b662      	cpsie	i
    6c54:	7a01      	ldrb	r1, [r0, #8]
    6c56:	f88d 1000 	strb.w	r1, [sp]
    6c5a:	9900      	ldr	r1, [sp, #0]
    6c5c:	9100      	str	r1, [sp, #0]
    6c5e:	f89d 3000 	ldrb.w	r3, [sp]
    6c62:	2b00      	cmp	r3, #0
    6c64:	d1f4      	bne.n	6c50 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>
    6c66:	7014      	strb	r4, [r2, #0]
    6c68:	bd38      	pop	{r3, r4, r5, pc}
    6c6a:	0000      	.short	0x0000
    6c6c:	20001478 	.word	0x20001478
    6c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c74:	b086      	sub	sp, #24
    6c76:	000f      	movs	r7, r1
    6c78:	4604      	mov	r4, r0
    6c7a:	4691      	mov	r9, r2
    6c7c:	d013      	beq.n	6ca6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    6c7e:	6878      	ldr	r0, [r7, #4]
    6c80:	b188      	cbz	r0, 6ca6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    6c82:	f100 0580 	add.w	r5, r0, #128	; 0x80
    6c86:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    6c8a:	8806      	ldrh	r6, [r0, #0]
    6c8c:	4610      	mov	r0, r2
    6c8e:	f04f 0800 	mov.w	r8, #0
    6c92:	2a12      	cmp	r2, #18
    6c94:	d078      	beq.n	6d88 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x238>
    6c96:	dc09      	bgt.n	6cac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    6c98:	f04f 0a01 	mov.w	sl, #1
    6c9c:	2803      	cmp	r0, #3
    6c9e:	d00a      	beq.n	6cb6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x166>
    6ca0:	2a0d      	cmp	r2, #13
    6ca2:	d170      	bne.n	6d86 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6ca4:	e01a      	b.n	6cdc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18c>
    6ca6:	f240 210b 	movw	r1, #523	; 0x20b
    6caa:	e0ac      	b.n	6e06 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6cac:	281e      	cmp	r0, #30
    6cae:	d04c      	beq.n	6d4a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1fa>
    6cb0:	2a1f      	cmp	r2, #31
    6cb2:	d17f      	bne.n	6db4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x264>
    6cb4:	e026      	b.n	6d04 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b4>
    6cb6:	2d00      	cmp	r5, #0
    6cb8:	d00f      	beq.n	6cda <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18a>
    6cba:	f884 8001 	strb.w	r8, [r4, #1]
    6cbe:	f884 a000 	strb.w	sl, [r4]
    6cc2:	f884 8004 	strb.w	r8, [r4, #4]
    6cc6:	f8a4 6005 	strh.w	r6, [r4, #5]
    6cca:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
    6cce:	71e0      	strb	r0, [r4, #7]
    6cd0:	f835 0f60 	ldrh.w	r0, [r5, #96]!
    6cd4:	8120      	strh	r0, [r4, #8]
    6cd6:	8868      	ldrh	r0, [r5, #2]
    6cd8:	8160      	strh	r0, [r4, #10]
    6cda:	e075      	b.n	6dc8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    6cdc:	4630      	mov	r0, r6
    6cde:	f7fe faf3 	bl	52c8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6ce2:	b160      	cbz	r0, 6cfe <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ae>
    6ce4:	f884 8001 	strb.w	r8, [r4, #1]
    6ce8:	220d      	movs	r2, #13
    6cea:	7022      	strb	r2, [r4, #0]
    6cec:	80e6      	strh	r6, [r4, #6]
    6cee:	f8a4 a008 	strh.w	sl, [r4, #8]
    6cf2:	4641      	mov	r1, r8
    6cf4:	f884 a004 	strb.w	sl, [r4, #4]
    6cf8:	f006 face 	bl	d298 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6cfc:	e064      	b.n	6dc8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    6cfe:	f240 1153 	movw	r1, #339	; 0x153
    6d02:	e080      	b.n	6e06 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6d04:	f7ff fde4 	bl	68d0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    6d08:	b3e8      	cbz	r0, 6d86 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6d0a:	f887 8008 	strb.w	r8, [r7, #8]
    6d0e:	4630      	mov	r0, r6
    6d10:	f8ad 6000 	strh.w	r6, [sp]
    6d14:	a902      	add	r1, sp, #8
    6d16:	f006 fe1f 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6d1a:	b110      	cbz	r0, 6d22 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1d2>
    6d1c:	f240 1125 	movw	r1, #293	; 0x125
    6d20:	e071      	b.n	6e06 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6d22:	9803      	ldr	r0, [sp, #12]
    6d24:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    6d28:	f88d 1002 	strb.w	r1, [sp, #2]
    6d2c:	7841      	ldrb	r1, [r0, #1]
    6d2e:	f88d 1003 	strb.w	r1, [sp, #3]
    6d32:	8840      	ldrh	r0, [r0, #2]
    6d34:	f8ad 0004 	strh.w	r0, [sp, #4]
    6d38:	2102      	movs	r1, #2
    6d3a:	4668      	mov	r0, sp
    6d3c:	f009 fa2d 	bl	1019a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6d40:	2800      	cmp	r0, #0
    6d42:	d034      	beq.n	6dae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    6d44:	f240 113b 	movw	r1, #315	; 0x13b
    6d48:	e05d      	b.n	6e06 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6d4a:	f7ff fdb7 	bl	68bc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    6d4e:	b1d0      	cbz	r0, 6d86 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6d50:	f887 8008 	strb.w	r8, [r7, #8]
    6d54:	a903      	add	r1, sp, #12
    6d56:	4630      	mov	r0, r6
    6d58:	f009 f883 	bl	fe62 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6d5c:	b110      	cbz	r0, 6d64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x214>
    6d5e:	f44f 71a1 	mov.w	r1, #322	; 0x142
    6d62:	e050      	b.n	6e06 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6d64:	f8ad 6000 	strh.w	r6, [sp]
    6d68:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6d6c:	f8ad 0002 	strh.w	r0, [sp, #2]
    6d70:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6d74:	f8ad 0004 	strh.w	r0, [sp, #4]
    6d78:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6d7c:	f8ad 0006 	strh.w	r0, [sp, #6]
    6d80:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6d84:	e001      	b.n	6d8a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23a>
    6d86:	e015      	b.n	6db4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x264>
    6d88:	e009      	b.n	6d9e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24e>
    6d8a:	f8ad 0008 	strh.w	r0, [sp, #8]
    6d8e:	4668      	mov	r0, sp
    6d90:	f009 f8a0 	bl	fed4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6d94:	2800      	cmp	r0, #0
    6d96:	d00a      	beq.n	6dae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    6d98:	f240 114b 	movw	r1, #331	; 0x14b
    6d9c:	e033      	b.n	6e06 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b6>
    6d9e:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    6da2:	f000 0001 	and.w	r0, r0, #1
    6da6:	f7ff fd7d 	bl	68a4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    6daa:	b130      	cbz	r0, 6dba <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    6dac:	2000      	movs	r0, #0
    6dae:	b006      	add	sp, #24
    6db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6db4:	f1b9 0f0a 	cmp.w	r9, #10
    6db8:	d008      	beq.n	6dcc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x27c>
    6dba:	4814      	ldr	r0, [pc, #80]	; (6e0c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2bc>)
    6dbc:	6803      	ldr	r3, [r0, #0]
    6dbe:	b11b      	cbz	r3, 6dc8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    6dc0:	6878      	ldr	r0, [r7, #4]
    6dc2:	464a      	mov	r2, r9
    6dc4:	4621      	mov	r1, r4
    6dc6:	4798      	blx	r3
    6dc8:	2001      	movs	r0, #1
    6dca:	e7f0      	b.n	6dae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x25e>
    6dcc:	4630      	mov	r0, r6
    6dce:	f7fe fa65 	bl	529c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6dd2:	f006 f8f2 	bl	cfba <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6dd6:	b1a0      	cbz	r0, 6e02 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2b2>
    6dd8:	4630      	mov	r0, r6
    6dda:	f006 fced 	bl	d7b8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6dde:	2100      	movs	r1, #0
    6de0:	4630      	mov	r0, r6
    6de2:	f7fe f8e5 	bl	4fb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6de6:	2d00      	cmp	r5, #0
    6de8:	d0ee      	beq.n	6dc8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    6dea:	f884 8001 	strb.w	r8, [r4, #1]
    6dee:	210a      	movs	r1, #10
    6df0:	7021      	strb	r1, [r4, #0]
    6df2:	f884 8004 	strb.w	r8, [r4, #4]
    6df6:	f8a4 6005 	strh.w	r6, [r4, #5]
    6dfa:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
    6dfe:	71e0      	strb	r0, [r4, #7]
    6e00:	e7e2      	b.n	6dc8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    6e02:	f44f 7113 	mov.w	r1, #588	; 0x24c
    6e06:	2010      	movs	r0, #16
    6e08:	f7fd fe50 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e0c:	20000118 	.word	0x20000118
    6e10:	4809      	ldr	r0, [pc, #36]	; (6e38 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2e8>)
    6e12:	b510      	push	{r4, lr}
    6e14:	2100      	movs	r1, #0
    6e16:	6141      	str	r1, [r0, #20]
    6e18:	6181      	str	r1, [r0, #24]
    6e1a:	61c1      	str	r1, [r0, #28]
    6e1c:	6201      	str	r1, [r0, #32]
    6e1e:	2212      	movs	r2, #18
    6e20:	f005 fc13 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6e24:	4804      	ldr	r0, [pc, #16]	; (6e38 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2e8>)
    6e26:	3018      	adds	r0, #24
    6e28:	1f02      	subs	r2, r0, #4
    6e2a:	1f01      	subs	r1, r0, #4
    6e2c:	2301      	movs	r3, #1
    6e2e:	6050      	str	r0, [r2, #4]
    6e30:	730b      	strb	r3, [r1, #12]
    6e32:	6010      	str	r0, [r2, #0]
    6e34:	bd10      	pop	{r4, pc}
    6e36:	0000      	.short	0x0000
    6e38:	20001464 	.word	0x20001464

00006e3c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    6e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e3e:	f06f 021f 	mvn.w	r2, #31
    6e42:	0c01      	lsrs	r1, r0, #16
    6e44:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    6e48:	251f      	movs	r5, #31
    6e4a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6e4e:	3854      	subs	r0, #84	; 0x54
    6e50:	d00d      	beq.n	6e6e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6e52:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6e56:	3855      	subs	r0, #85	; 0x55
    6e58:	d009      	beq.n	6e6e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6e5a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    6e5e:	38aa      	subs	r0, #170	; 0xaa
    6e60:	d005      	beq.n	6e6e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6e62:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    6e66:	38aa      	subs	r0, #170	; 0xaa
    6e68:	d001      	beq.n	6e6e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6e6a:	2001      	movs	r0, #1
    6e6c:	e000      	b.n	6e70 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    6e6e:	2000      	movs	r0, #0
    6e70:	2200      	movs	r2, #0
    6e72:	4613      	mov	r3, r2
    6e74:	ea4f 0402 	mov.w	r4, r2
    6e78:	ea82 0701 	eor.w	r7, r2, r1
    6e7c:	43ff      	mvns	r7, r7
    6e7e:	431f      	orrs	r7, r3
    6e80:	1c7f      	adds	r7, r7, #1
    6e82:	d00f      	beq.n	6ea4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6e84:	f006 0701 	and.w	r7, r6, #1
    6e88:	0852      	lsrs	r2, r2, #1
    6e8a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    6e8e:	f005 0701 	and.w	r7, r5, #1
    6e92:	085b      	lsrs	r3, r3, #1
    6e94:	0876      	lsrs	r6, r6, #1
    6e96:	086d      	lsrs	r5, r5, #1
    6e98:	1c64      	adds	r4, r4, #1
    6e9a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    6e9e:	2c16      	cmp	r4, #22
    6ea0:	d3ea      	bcc.n	6e78 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ea4:	2000      	movs	r0, #0
    6ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006ea8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    6ea8:	b510      	push	{r4, lr}
    6eaa:	4804      	ldr	r0, [pc, #16]	; (6ebc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    6eac:	f007 fac4 	bl	e438 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    6eb0:	4802      	ldr	r0, [pc, #8]	; (6ebc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    6eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6eb6:	3008      	adds	r0, #8
    6eb8:	f007 babe 	b.w	e438 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    6ebc:	2000011c 	.word	0x2000011c

00006ec0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    6ec0:	4801      	ldr	r0, [pc, #4]	; (6ec8 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    6ec2:	f000 b809 	b.w	6ed8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    6ec6:	0000      	.short	0x0000
    6ec8:	2000011c 	.word	0x2000011c

00006ecc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    6ecc:	4801      	ldr	r0, [pc, #4]	; (6ed4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    6ece:	f000 b803 	b.w	6ed8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    6ed2:	0000      	.short	0x0000
    6ed4:	20000124 	.word	0x20000124
    6ed8:	b510      	push	{r4, lr}
    6eda:	e9d0 2100 	ldrd	r2, r1, [r0]
    6ede:	4b09      	ldr	r3, [pc, #36]	; (6f04 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    6ee0:	4c09      	ldr	r4, [pc, #36]	; (6f08 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    6ee2:	4353      	muls	r3, r2
    6ee4:	4354      	muls	r4, r2
    6ee6:	4051      	eors	r1, r2
    6ee8:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    6eec:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    6ef0:	ea4f 41f1 	mov.w	r1, r1, ror #19
    6ef4:	e9c0 2100 	strd	r2, r1, [r0]
    6ef8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    6efc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6f00:	4618      	mov	r0, r3
    6f02:	bd10      	pop	{r4, pc}
    6f04:	c6ef3760 	.word	0xc6ef3760
    6f08:	9e3779bb 	.word	0x9e3779bb

00006f0c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    6f0c:	b510      	push	{r4, lr}
    6f0e:	6840      	ldr	r0, [r0, #4]
    6f10:	2200      	movs	r2, #0
    6f12:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    6f16:	3080      	adds	r0, #128	; 0x80
    6f18:	1d09      	adds	r1, r1, #4
    6f1a:	07db      	lsls	r3, r3, #31
    6f1c:	d001      	beq.n	6f22 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    6f1e:	2001      	movs	r0, #1
    6f20:	bd10      	pop	{r4, pc}
    6f22:	790c      	ldrb	r4, [r1, #4]
    6f24:	680b      	ldr	r3, [r1, #0]
    6f26:	4909      	ldr	r1, [pc, #36]	; (6f4c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>)
    6f28:	400b      	ands	r3, r1
    6f2a:	f004 0107 	and.w	r1, r4, #7
    6f2e:	6643      	str	r3, [r0, #100]	; 0x64
    6f30:	6681      	str	r1, [r0, #104]	; 0x68
    6f32:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    6f36:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
    6f3a:	1c49      	adds	r1, r1, #1
    6f3c:	f880 1052 	strb.w	r1, [r0, #82]	; 0x52
    6f40:	6841      	ldr	r1, [r0, #4]
    6f42:	f041 0101 	orr.w	r1, r1, #1
    6f46:	6041      	str	r1, [r0, #4]
    6f48:	2000      	movs	r0, #0
    6f4a:	bd10      	pop	{r4, pc}
    6f4c:	3304492f 	.word	0x3304492f

00006f50 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    6f50:	b510      	push	{r4, lr}
    6f52:	1d04      	adds	r4, r0, #4
    6f54:	f003 fe48 	bl	abe8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6f58:	4a03      	ldr	r2, [pc, #12]	; (6f68 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    6f5a:	f001 0107 	and.w	r1, r1, #7
    6f5e:	4010      	ands	r0, r2
    6f60:	6020      	str	r0, [r4, #0]
    6f62:	6061      	str	r1, [r4, #4]
    6f64:	bd10      	pop	{r4, pc}
    6f66:	0000      	.short	0x0000
    6f68:	3304492f 	.word	0x3304492f

00006f6c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    6f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f70:	4605      	mov	r5, r0
    6f72:	7803      	ldrb	r3, [r0, #0]
    6f74:	6840      	ldr	r0, [r0, #4]
    6f76:	1d0f      	adds	r7, r1, #4
    6f78:	f100 0680 	add.w	r6, r0, #128	; 0x80
    6f7c:	f500 74a2 	add.w	r4, r0, #324	; 0x144
    6f80:	4680      	mov	r8, r0
    6f82:	f04f 0900 	mov.w	r9, #0
    6f86:	7d72      	ldrb	r2, [r6, #21]
    6f88:	2107      	movs	r1, #7
    6f8a:	4630      	mov	r0, r6
    6f8c:	f006 fd0e 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6f90:	b300      	cbz	r0, 6fd4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x68>
    6f92:	6838      	ldr	r0, [r7, #0]
    6f94:	4a10      	ldr	r2, [pc, #64]	; (6fd8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x6c>)
    6f96:	7939      	ldrb	r1, [r7, #4]
    6f98:	4010      	ands	r0, r2
    6f9a:	6670      	str	r0, [r6, #100]	; 0x64
    6f9c:	f001 0107 	and.w	r1, r1, #7
    6fa0:	66b1      	str	r1, [r6, #104]	; 0x68
    6fa2:	f886 904e 	strb.w	r9, [r6, #78]	; 0x4e
    6fa6:	f886 9015 	strb.w	r9, [r6, #21]
    6faa:	f8b8 1000 	ldrh.w	r1, [r8]
    6fae:	f8a4 106c 	strh.w	r1, [r4, #108]	; 0x6c
    6fb2:	f884 906a 	strb.w	r9, [r4, #106]	; 0x6a
    6fb6:	6839      	ldr	r1, [r7, #0]
    6fb8:	f8c4 106e 	str.w	r1, [r4, #110]	; 0x6e
    6fbc:	6879      	ldr	r1, [r7, #4]
    6fbe:	f8c4 1072 	str.w	r1, [r4, #114]	; 0x72
    6fc2:	2207      	movs	r2, #7
    6fc4:	f104 0060 	add.w	r0, r4, #96	; 0x60
    6fc8:	6869      	ldr	r1, [r5, #4]
    6fca:	f7ff fce1 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    6fce:	2000      	movs	r0, #0
    6fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6fd4:	2001      	movs	r0, #1
    6fd6:	e7fb      	b.n	6fd0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    6fd8:	3304492f 	.word	0x3304492f

00006fdc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    6fdc:	b570      	push	{r4, r5, r6, lr}
    6fde:	1d0d      	adds	r5, r1, #4
    6fe0:	6844      	ldr	r4, [r0, #4]
    6fe2:	f003 fe01 	bl	abe8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6fe6:	4a06      	ldr	r2, [pc, #24]	; (7000 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    6fe8:	4010      	ands	r0, r2
    6fea:	f001 0207 	and.w	r2, r1, #7
    6fee:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    6ff2:	4001      	ands	r1, r0
    6ff4:	f361 0007 	bfi	r0, r1, #0, #8
    6ff8:	6028      	str	r0, [r5, #0]
    6ffa:	606a      	str	r2, [r5, #4]
    6ffc:	bd70      	pop	{r4, r5, r6, pc}
    6ffe:	0000      	.short	0x0000
    7000:	3304492f 	.word	0x3304492f

00007004 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    7004:	4a04      	ldr	r2, [pc, #16]	; (7018 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    7006:	6812      	ldr	r2, [r2, #0]
    7008:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    700c:	434b      	muls	r3, r1
    700e:	4342      	muls	r2, r0
    7010:	eb03 3022 	add.w	r0, r3, r2, asr #12
    7014:	4770      	bx	lr
    7016:	0000      	.short	0x0000
    7018:	2000012c 	.word	0x2000012c

0000701c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    701c:	b570      	push	{r4, r5, r6, lr}
    701e:	4604      	mov	r4, r0
    7020:	7c00      	ldrb	r0, [r0, #16]
    7022:	b300      	cbz	r0, 7066 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7024:	2802      	cmp	r0, #2
    7026:	d01e      	beq.n	7066 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7028:	f05f 0001 	movs.w	r0, #1
    702c:	f104 0151 	add.w	r1, r4, #81	; 0x51
    7030:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    7034:	460d      	mov	r5, r1
    7036:	b1c0      	cbz	r0, 706a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    7038:	7de0      	ldrb	r0, [r4, #23]
    703a:	b1f0      	cbz	r0, 707a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    703c:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7040:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    7044:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    7048:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    704c:	7c20      	ldrb	r0, [r4, #16]
    704e:	f007 faad 	bl	e5ac <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xe0>
    7052:	7620      	strb	r0, [r4, #24]
    7054:	2008      	movs	r0, #8
    7056:	7660      	strb	r0, [r4, #25]
    7058:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    705c:	4629      	mov	r1, r5
    705e:	f007 fa91 	bl	e584 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb8>
    7062:	b9a8      	cbnz	r0, 7090 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    7064:	e00e      	b.n	7084 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    7066:	2000      	movs	r0, #0
    7068:	e7e0      	b.n	702c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    706a:	2000      	movs	r0, #0
    706c:	f7fe fbba 	bl	57e4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7070:	2800      	cmp	r0, #0
    7072:	d1eb      	bne.n	704c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    7074:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
    7078:	e001      	b.n	707e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    707a:	f240 41bc 	movw	r1, #1212	; 0x4bc
    707e:	202d      	movs	r0, #45	; 0x2d
    7080:	f7fd fd14 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7084:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    7088:	4629      	mov	r1, r5
    708a:	f007 fa84 	bl	e596 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    708e:	b100      	cbz	r0, 7092 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7090:	2001      	movs	r0, #1
    7092:	76a0      	strb	r0, [r4, #26]
    7094:	7e20      	ldrb	r0, [r4, #24]
    7096:	b130      	cbz	r0, 70a6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    7098:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    709c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    70a0:	f006 fc26 	bl	d8f0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    70a4:	7660      	strb	r0, [r4, #25]
    70a6:	f7ff f9b3 	bl	6410 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    70aa:	490c      	ldr	r1, [pc, #48]	; (70dc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    70ac:	fba0 2301 	umull	r2, r3, r0, r1
    70b0:	f104 0048 	add.w	r0, r4, #72	; 0x48
    70b4:	f007 fc44 	bl	e940 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    70b8:	2100      	movs	r1, #0
    70ba:	4620      	mov	r0, r4
    70bc:	f007 fbee 	bl	e89c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    70c0:	2000      	movs	r0, #0
    70c2:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    70c6:	78a0      	ldrb	r0, [r4, #2]
    70c8:	0740      	lsls	r0, r0, #29
    70ca:	d505      	bpl.n	70d8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    70cc:	4620      	mov	r0, r4
    70ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70d2:	2100      	movs	r1, #0
    70d4:	f000 bda8 	b.w	7c28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>
    70d8:	bd70      	pop	{r4, r5, r6, pc}
    70da:	0000      	.short	0x0000
    70dc:	000f4240 	.word	0x000f4240

000070e0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    70e0:	b530      	push	{r4, r5, lr}
    70e2:	460c      	mov	r4, r1
    70e4:	b08d      	sub	sp, #52	; 0x34
    70e6:	4605      	mov	r5, r0
    70e8:	4601      	mov	r1, r0
    70ea:	2224      	movs	r2, #36	; 0x24
    70ec:	a802      	add	r0, sp, #8
    70ee:	f005 fa32 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    70f2:	a80b      	add	r0, sp, #44	; 0x2c
    70f4:	f007 fc81 	bl	e9fa <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    70f8:	7aa0      	ldrb	r0, [r4, #10]
    70fa:	f88d 0018 	strb.w	r0, [sp, #24]
    70fe:	7820      	ldrb	r0, [r4, #0]
    7100:	f88d 0008 	strb.w	r0, [sp, #8]
    7104:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7108:	f8ad 0000 	strh.w	r0, [sp]
    710c:	f89d 0000 	ldrb.w	r0, [sp]
    7110:	f000 0101 	and.w	r1, r0, #1
    7114:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7118:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    711c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7120:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7124:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7128:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    712c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7130:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7134:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7138:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    713c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7140:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7144:	f8ad 000a 	strh.w	r0, [sp, #10]
    7148:	7d20      	ldrb	r0, [r4, #20]
    714a:	2801      	cmp	r0, #1
    714c:	d006      	beq.n	715c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    714e:	2802      	cmp	r0, #2
    7150:	d004      	beq.n	715c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7152:	f240 21e2 	movw	r1, #738	; 0x2e2
    7156:	2006      	movs	r0, #6
    7158:	f7fd fca8 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    715c:	f88d 000c 	strb.w	r0, [sp, #12]
    7160:	7a61      	ldrb	r1, [r4, #9]
    7162:	a80b      	add	r0, sp, #44	; 0x2c
    7164:	f007 fc30 	bl	e9c8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7168:	7d20      	ldrb	r0, [r4, #20]
    716a:	2101      	movs	r1, #1
    716c:	2802      	cmp	r0, #2
    716e:	d102      	bne.n	7176 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7170:	7d60      	ldrb	r0, [r4, #21]
    7172:	1c40      	adds	r0, r0, #1
    7174:	b2c1      	uxtb	r1, r0
    7176:	7ea0      	ldrb	r0, [r4, #26]
    7178:	1c40      	adds	r0, r0, #1
    717a:	b2c2      	uxtb	r2, r0
    717c:	a80b      	add	r0, sp, #44	; 0x2c
    717e:	f007 fbea 	bl	e956 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    7182:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7186:	0700      	lsls	r0, r0, #28
    7188:	d501      	bpl.n	718e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    718a:	2000      	movs	r0, #0
    718c:	e020      	b.n	71d0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    718e:	a80b      	add	r0, sp, #44	; 0x2c
    7190:	f007 fbf3 	bl	e97a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7194:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    7198:	2228      	movs	r2, #40	; 0x28
    719a:	f000 fde9 	bl	7d70 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    719e:	f240 2171 	movw	r1, #625	; 0x271
    71a2:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    71a6:	fbb0 f0f1 	udiv	r0, r0, r1
    71aa:	4348      	muls	r0, r1
    71ac:	f8d4 1002 	ldr.w	r1, [r4, #2]
    71b0:	f240 2371 	movw	r3, #625	; 0x271
    71b4:	0a0a      	lsrs	r2, r1, #8
    71b6:	f240 2171 	movw	r1, #625	; 0x271
    71ba:	434a      	muls	r2, r1
    71bc:	f8d4 1005 	ldr.w	r1, [r4, #5]
    71c0:	0a09      	lsrs	r1, r1, #8
    71c2:	4359      	muls	r1, r3
    71c4:	4290      	cmp	r0, r2
    71c6:	d801      	bhi.n	71cc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    71c8:	9204      	str	r2, [sp, #16]
    71ca:	e004      	b.n	71d6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    71cc:	4288      	cmp	r0, r1
    71ce:	d801      	bhi.n	71d4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    71d0:	9004      	str	r0, [sp, #16]
    71d2:	e000      	b.n	71d6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    71d4:	9104      	str	r1, [sp, #16]
    71d6:	7ca0      	ldrb	r0, [r4, #18]
    71d8:	f88d 0017 	strb.w	r0, [sp, #23]
    71dc:	7e20      	ldrb	r0, [r4, #24]
    71de:	2801      	cmp	r0, #1
    71e0:	d000      	beq.n	71e4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    71e2:	2000      	movs	r0, #0
    71e4:	f88d 0014 	strb.w	r0, [sp, #20]
    71e8:	6b68      	ldr	r0, [r5, #52]	; 0x34
    71ea:	f006 f9ed 	bl	d5c8 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    71ee:	6b68      	ldr	r0, [r5, #52]	; 0x34
    71f0:	f006 fa8e 	bl	d710 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    71f4:	2224      	movs	r2, #36	; 0x24
    71f6:	a902      	add	r1, sp, #8
    71f8:	4628      	mov	r0, r5
    71fa:	f005 f9ac 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    71fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7200:	62a8      	str	r0, [r5, #40]	; 0x28
    7202:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    7206:	85a8      	strh	r0, [r5, #44]	; 0x2c
    7208:	7ae0      	ldrb	r0, [r4, #11]
    720a:	b168      	cbz	r0, 7228 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    720c:	2802      	cmp	r0, #2
    720e:	d00b      	beq.n	7228 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7210:	f05f 0001 	movs.w	r0, #1
    7214:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    7218:	68e0      	ldr	r0, [r4, #12]
    721a:	65a8      	str	r0, [r5, #88]	; 0x58
    721c:	8a20      	ldrh	r0, [r4, #16]
    721e:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    7222:	b00d      	add	sp, #52	; 0x34
    7224:	2000      	movs	r0, #0
    7226:	bd30      	pop	{r4, r5, pc}
    7228:	2000      	movs	r0, #0
    722a:	e7f3      	b.n	7214 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

0000722c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    722c:	4a0a      	ldr	r2, [pc, #40]	; (7258 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    722e:	b510      	push	{r4, lr}
    7230:	2100      	movs	r1, #0
    7232:	7011      	strb	r1, [r2, #0]
    7234:	4c09      	ldr	r4, [pc, #36]	; (725c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    7236:	6060      	str	r0, [r4, #4]
    7238:	f000 f822 	bl	7280 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    723c:	b110      	cbz	r0, 7244 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    723e:	f44f 714b 	mov.w	r1, #812	; 0x32c
    7242:	e004      	b.n	724e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7244:	68a0      	ldr	r0, [r4, #8]
    7246:	2800      	cmp	r0, #0
    7248:	d104      	bne.n	7254 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    724a:	f240 312f 	movw	r1, #815	; 0x32f
    724e:	202d      	movs	r0, #45	; 0x2d
    7250:	f7fd fc2c 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7254:	bd10      	pop	{r4, pc}
    7256:	0000      	.short	0x0000
    7258:	20001488 	.word	0x20001488
    725c:	20000130 	.word	0x20000130

00007260 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7260:	4902      	ldr	r1, [pc, #8]	; (726c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7262:	4801      	ldr	r0, [pc, #4]	; (7268 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7264:	6088      	str	r0, [r1, #8]
    7266:	4770      	bx	lr
    7268:	00007d58 	.word	0x00007d58
    726c:	20000130 	.word	0x20000130

00007270 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7270:	4902      	ldr	r1, [pc, #8]	; (727c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    7272:	6008      	str	r0, [r1, #0]
    7274:	6889      	ldr	r1, [r1, #8]
    7276:	6809      	ldr	r1, [r1, #0]
    7278:	4708      	bx	r1
    727a:	0000      	.short	0x0000
    727c:	20000130 	.word	0x20000130

00007280 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7280:	4808      	ldr	r0, [pc, #32]	; (72a4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7282:	b510      	push	{r4, lr}
    7284:	7800      	ldrb	r0, [r0, #0]
    7286:	b110      	cbz	r0, 728e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7288:	240c      	movs	r4, #12
    728a:	4620      	mov	r0, r4
    728c:	bd10      	pop	{r4, pc}
    728e:	2400      	movs	r4, #0
    7290:	2218      	movs	r2, #24
    7292:	4621      	mov	r1, r4
    7294:	4803      	ldr	r0, [pc, #12]	; (72a4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7296:	f005 f9d8 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    729a:	f003 fec7 	bl	b02c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    729e:	f003 fceb 	bl	ac78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    72a2:	e7f2      	b.n	728a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    72a4:	20001488 	.word	0x20001488

000072a8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    72a8:	4904      	ldr	r1, [pc, #16]	; (72bc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    72aa:	b510      	push	{r4, lr}
    72ac:	7809      	ldrb	r1, [r1, #0]
    72ae:	2901      	cmp	r1, #1
    72b0:	d101      	bne.n	72b6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    72b2:	f000 fb85 	bl	79c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    72b6:	2000      	movs	r0, #0
    72b8:	bd10      	pop	{r4, pc}
    72ba:	0000      	.short	0x0000
    72bc:	20001488 	.word	0x20001488

000072c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    72c0:	4902      	ldr	r1, [pc, #8]	; (72cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    72c2:	4801      	ldr	r0, [pc, #4]	; (72c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    72c4:	6008      	str	r0, [r1, #0]
    72c6:	4770      	bx	lr
    72c8:	00007af1 	.word	0x00007af1
    72cc:	2000013c 	.word	0x2000013c
    72d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72d4:	000f      	movs	r7, r1
    72d6:	4604      	mov	r4, r0
    72d8:	d023      	beq.n	7322 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    72da:	f104 0028 	add.w	r0, r4, #40	; 0x28
    72de:	4605      	mov	r5, r0
    72e0:	f007 fb74 	bl	e9cc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    72e4:	b9b0      	cbnz	r0, 7314 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    72e6:	78a0      	ldrb	r0, [r4, #2]
    72e8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    72ec:	b350      	cbz	r0, 7344 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    72ee:	4628      	mov	r0, r5
    72f0:	f007 fb43 	bl	e97a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    72f4:	4606      	mov	r6, r0
    72f6:	4628      	mov	r0, r5
    72f8:	f007 fb68 	bl	e9cc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    72fc:	1a30      	subs	r0, r6, r0
    72fe:	b2c0      	uxtb	r0, r0
    7300:	f007 fbb9 	bl	ea76 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7304:	4601      	mov	r1, r0
    7306:	4835      	ldr	r0, [pc, #212]	; (73dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    7308:	6842      	ldr	r2, [r0, #4]
    730a:	4411      	add	r1, r2
    730c:	6041      	str	r1, [r0, #4]
    730e:	4628      	mov	r0, r5
    7310:	f007 fb7a 	bl	ea08 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7314:	4628      	mov	r0, r5
    7316:	f007 fb3c 	bl	e992 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    731a:	4601      	mov	r1, r0
    731c:	4620      	mov	r0, r4
    731e:	f007 faf9 	bl	e914 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    7322:	4d2f      	ldr	r5, [pc, #188]	; (73e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    7324:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    7328:	2100      	movs	r1, #0
    732a:	6868      	ldr	r0, [r5, #4]
    732c:	8001      	strh	r1, [r0, #0]
    732e:	f007 fa93 	bl	e858 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7332:	8860      	ldrh	r0, [r4, #2]
    7334:	2813      	cmp	r0, #19
    7336:	d013      	beq.n	7360 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7338:	dc09      	bgt.n	734e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    733a:	2810      	cmp	r0, #16
    733c:	d036      	beq.n	73ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    733e:	2812      	cmp	r0, #18
    7340:	d109      	bne.n	7356 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7342:	e031      	b.n	73a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    7344:	4620      	mov	r0, r4
    7346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    734a:	f000 bb39 	b.w	79c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    734e:	2815      	cmp	r0, #21
    7350:	d00f      	beq.n	7372 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7352:	281d      	cmp	r0, #29
    7354:	d00d      	beq.n	7372 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7356:	f240 6172 	movw	r1, #1650	; 0x672
    735a:	202d      	movs	r0, #45	; 0x2d
    735c:	f7fd fba6 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7360:	2100      	movs	r1, #0
    7362:	6868      	ldr	r0, [r5, #4]
    7364:	f006 fd3b 	bl	ddde <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    7368:	2101      	movs	r1, #1
    736a:	6868      	ldr	r0, [r5, #4]
    736c:	f007 fa74 	bl	e858 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7370:	e020      	b.n	73b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7372:	2101      	movs	r1, #1
    7374:	6868      	ldr	r0, [r5, #4]
    7376:	f006 fd32 	bl	ddde <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    737a:	2101      	movs	r1, #1
    737c:	6868      	ldr	r0, [r5, #4]
    737e:	f007 fa6b 	bl	e858 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7382:	b136      	cbz	r6, 7392 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    7384:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    7388:	6868      	ldr	r0, [r5, #4]
    738a:	f006 fd43 	bl	de14 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    738e:	2101      	movs	r1, #1
    7390:	e006      	b.n	73a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    7392:	f104 0158 	add.w	r1, r4, #88	; 0x58
    7396:	6868      	ldr	r0, [r5, #4]
    7398:	f006 fd3c 	bl	de14 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    739c:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    73a0:	6868      	ldr	r0, [r5, #4]
    73a2:	f006 fd3d 	bl	de20 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    73a6:	e005      	b.n	73b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    73a8:	2106      	movs	r1, #6
    73aa:	e000      	b.n	73ae <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    73ac:	2102      	movs	r1, #2
    73ae:	6868      	ldr	r0, [r5, #4]
    73b0:	f006 fd15 	bl	ddde <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    73b4:	4620      	mov	r0, r4
    73b6:	f000 fcad 	bl	7d14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>
    73ba:	8860      	ldrh	r0, [r4, #2]
    73bc:	281d      	cmp	r0, #29
    73be:	d007      	beq.n	73d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    73c0:	2815      	cmp	r0, #21
    73c2:	d005      	beq.n	73d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x110>
    73c4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    73c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    73ca:	6868      	ldr	r0, [r5, #4]
    73cc:	f006 fcf7 	bl	ddbe <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    73d0:	4639      	mov	r1, r7
    73d2:	4620      	mov	r0, r4
    73d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    73d8:	f000 b9f0 	b.w	77bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    73dc:	20001488 	.word	0x20001488
    73e0:	20000130 	.word	0x20000130
    73e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73e8:	4d2e      	ldr	r5, [pc, #184]	; (74a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    73ea:	4607      	mov	r7, r0
    73ec:	7828      	ldrb	r0, [r5, #0]
    73ee:	2802      	cmp	r0, #2
    73f0:	d005      	beq.n	73fe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    73f2:	7828      	ldrb	r0, [r5, #0]
    73f4:	2803      	cmp	r0, #3
    73f6:	d002      	beq.n	73fe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    73f8:	f640 5129 	movw	r1, #3369	; 0xd29
    73fc:	e028      	b.n	7450 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    73fe:	4c2a      	ldr	r4, [pc, #168]	; (74a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7400:	6820      	ldr	r0, [r4, #0]
    7402:	7b01      	ldrb	r1, [r0, #12]
    7404:	b109      	cbz	r1, 740a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    7406:	f007 fa90 	bl	e92a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    740a:	f8d4 c004 	ldr.w	ip, [r4, #4]
    740e:	f04f 0800 	mov.w	r8, #0
    7412:	f89c 0000 	ldrb.w	r0, [ip]
    7416:	f000 060f 	and.w	r6, r0, #15
    741a:	b33f      	cbz	r7, 746c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    741c:	6821      	ldr	r1, [r4, #0]
    741e:	09c0      	lsrs	r0, r0, #7
    7420:	f101 0351 	add.w	r3, r1, #81	; 0x51
    7424:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    7428:	f10c 0109 	add.w	r1, ip, #9
    742c:	f006 f9c8 	bl	d7c0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7430:	b1e0      	cbz	r0, 746c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7432:	4641      	mov	r1, r8
    7434:	6860      	ldr	r0, [r4, #4]
    7436:	f006 fcb2 	bl	dd9e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    743a:	b1b8      	cbz	r0, 746c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    743c:	782a      	ldrb	r2, [r5, #0]
    743e:	6820      	ldr	r0, [r4, #0]
    7440:	4631      	mov	r1, r6
    7442:	2a02      	cmp	r2, #2
    7444:	d007      	beq.n	7456 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7446:	782a      	ldrb	r2, [r5, #0]
    7448:	2a03      	cmp	r2, #3
    744a:	d004      	beq.n	7456 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    744c:	f640 5102 	movw	r1, #3330	; 0xd02
    7450:	202d      	movs	r0, #45	; 0x2d
    7452:	f7fd fb2b 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7456:	68a2      	ldr	r2, [r4, #8]
    7458:	782b      	ldrb	r3, [r5, #0]
    745a:	6952      	ldr	r2, [r2, #20]
    745c:	f06f 0607 	mvn.w	r6, #7
    7460:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7464:	58d2      	ldr	r2, [r2, r3]
    7466:	4790      	blx	r2
    7468:	4606      	mov	r6, r0
    746a:	e000      	b.n	746e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    746c:	2601      	movs	r6, #1
    746e:	7ba8      	ldrb	r0, [r5, #14]
    7470:	b118      	cbz	r0, 747a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    7472:	f003 fddb 	bl	b02c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7476:	f003 fbff 	bl	ac78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    747a:	2e00      	cmp	r6, #0
    747c:	d00f      	beq.n	749e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    747e:	6820      	ldr	r0, [r4, #0]
    7480:	f007 fb0f 	bl	eaa2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7484:	b130      	cbz	r0, 7494 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    7486:	f003 fdf9 	bl	b07c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    748a:	68a0      	ldr	r0, [r4, #8]
    748c:	6880      	ldr	r0, [r0, #8]
    748e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7492:	4700      	bx	r0
    7494:	6820      	ldr	r0, [r4, #0]
    7496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    749a:	f000 ba91 	b.w	79c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    749e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74a2:	0000      	.short	0x0000
    74a4:	20001488 	.word	0x20001488
    74a8:	20000130 	.word	0x20000130
    74ac:	b510      	push	{r4, lr}
    74ae:	2903      	cmp	r1, #3
    74b0:	d002      	beq.n	74b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    74b2:	2905      	cmp	r1, #5
    74b4:	d10a      	bne.n	74cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    74b6:	e002      	b.n	74be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    74b8:	f000 fb7a 	bl	7bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>
    74bc:	e003      	b.n	74c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    74be:	4904      	ldr	r1, [pc, #16]	; (74d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    74c0:	6809      	ldr	r1, [r1, #0]
    74c2:	b109      	cbz	r1, 74c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    74c4:	4788      	blx	r1
    74c6:	b108      	cbz	r0, 74cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    74c8:	2000      	movs	r0, #0
    74ca:	bd10      	pop	{r4, pc}
    74cc:	2001      	movs	r0, #1
    74ce:	bd10      	pop	{r4, pc}
    74d0:	2000013c 	.word	0x2000013c
    74d4:	4a09      	ldr	r2, [pc, #36]	; (74fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    74d6:	0003      	movs	r3, r0
    74d8:	6810      	ldr	r0, [r2, #0]
    74da:	d001      	beq.n	74e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    74dc:	f000 ba70 	b.w	79c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    74e0:	2900      	cmp	r1, #0
    74e2:	d009      	beq.n	74f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    74e4:	6891      	ldr	r1, [r2, #8]
    74e6:	4a06      	ldr	r2, [pc, #24]	; (7500 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    74e8:	6909      	ldr	r1, [r1, #16]
    74ea:	7812      	ldrb	r2, [r2, #0]
    74ec:	f06f 030f 	mvn.w	r3, #15
    74f0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    74f4:	5889      	ldr	r1, [r1, r2]
    74f6:	4708      	bx	r1
    74f8:	4770      	bx	lr
    74fa:	0000      	.short	0x0000
    74fc:	20000130 	.word	0x20000130
    7500:	20001488 	.word	0x20001488
    7504:	b570      	push	{r4, r5, r6, lr}
    7506:	4604      	mov	r4, r0
    7508:	8840      	ldrh	r0, [r0, #2]
    750a:	2810      	cmp	r0, #16
    750c:	d019      	beq.n	7542 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    750e:	4d10      	ldr	r5, [pc, #64]	; (7550 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7510:	7ba8      	ldrb	r0, [r5, #14]
    7512:	b120      	cbz	r0, 751e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    7514:	f003 fbd0 	bl	acb8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7518:	2040      	movs	r0, #64	; 0x40
    751a:	f003 fd95 	bl	b048 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    751e:	480d      	ldr	r0, [pc, #52]	; (7554 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7520:	6840      	ldr	r0, [r0, #4]
    7522:	f004 f817 	bl	b554 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7526:	78a0      	ldrb	r0, [r4, #2]
    7528:	0740      	lsls	r0, r0, #29
    752a:	d404      	bmi.n	7536 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    752c:	2100      	movs	r1, #0
    752e:	7922      	ldrb	r2, [r4, #4]
    7530:	4608      	mov	r0, r1
    7532:	f004 f887 	bl	b644 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7536:	2000      	movs	r0, #0
    7538:	f003 fec2 	bl	b2c0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    753c:	2002      	movs	r0, #2
    753e:	7028      	strb	r0, [r5, #0]
    7540:	bd70      	pop	{r4, r5, r6, pc}
    7542:	4620      	mov	r0, r4
    7544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7548:	2101      	movs	r1, #1
    754a:	f7ff bec1 	b.w	72d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    754e:	0000      	.short	0x0000
    7550:	20001488 	.word	0x20001488
    7554:	20000130 	.word	0x20000130
    7558:	b510      	push	{r4, lr}
    755a:	4c12      	ldr	r4, [pc, #72]	; (75a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    755c:	6820      	ldr	r0, [r4, #0]
    755e:	f000 f825 	bl	75ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7562:	6820      	ldr	r0, [r4, #0]
    7564:	f007 fa9d 	bl	eaa2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7568:	2800      	cmp	r0, #0
    756a:	6820      	ldr	r0, [r4, #0]
    756c:	d00b      	beq.n	7586 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    756e:	490e      	ldr	r1, [pc, #56]	; (75a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7570:	780a      	ldrb	r2, [r1, #0]
    7572:	2a02      	cmp	r2, #2
    7574:	d00b      	beq.n	758e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7576:	780a      	ldrb	r2, [r1, #0]
    7578:	2a03      	cmp	r2, #3
    757a:	d008      	beq.n	758e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    757c:	f640 4137 	movw	r1, #3127	; 0xc37
    7580:	202d      	movs	r0, #45	; 0x2d
    7582:	f7fd fa93 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    758a:	f000 ba19 	b.w	79c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    758e:	68a2      	ldr	r2, [r4, #8]
    7590:	7809      	ldrb	r1, [r1, #0]
    7592:	68d2      	ldr	r2, [r2, #12]
    7594:	f06f 0307 	mvn.w	r3, #7
    7598:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    759c:	5851      	ldr	r1, [r2, r1]
    759e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    75a2:	4708      	bx	r1
    75a4:	20000130 	.word	0x20000130
    75a8:	20001488 	.word	0x20001488
    75ac:	b510      	push	{r4, lr}
    75ae:	7b01      	ldrb	r1, [r0, #12]
    75b0:	b109      	cbz	r1, 75b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    75b2:	f007 f9ba 	bl	e92a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    75b6:	4805      	ldr	r0, [pc, #20]	; (75cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    75b8:	7b80      	ldrb	r0, [r0, #14]
    75ba:	2800      	cmp	r0, #0
    75bc:	d005      	beq.n	75ca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    75be:	f003 fd35 	bl	b02c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    75c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    75c6:	f003 bb57 	b.w	ac78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    75ca:	bd10      	pop	{r4, pc}
    75cc:	20001488 	.word	0x20001488

000075d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    75d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75d4:	4d5d      	ldr	r5, [pc, #372]	; (774c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    75d6:	4604      	mov	r4, r0
    75d8:	b086      	sub	sp, #24
    75da:	7828      	ldrb	r0, [r5, #0]
    75dc:	2800      	cmp	r0, #0
    75de:	d14e      	bne.n	767e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    75e0:	7820      	ldrb	r0, [r4, #0]
    75e2:	28ff      	cmp	r0, #255	; 0xff
    75e4:	d04b      	beq.n	767e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    75e6:	f04f 0800 	mov.w	r8, #0
    75ea:	f8a5 800c 	strh.w	r8, [r5, #12]
    75ee:	f8c5 8004 	str.w	r8, [r5, #4]
    75f2:	f885 8001 	strb.w	r8, [r5, #1]
    75f6:	f885 8002 	strb.w	r8, [r5, #2]
    75fa:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    75fe:	4b54      	ldr	r3, [pc, #336]	; (7750 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    7600:	4e54      	ldr	r6, [pc, #336]	; (7754 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    7602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7604:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    7608:	68b0      	ldr	r0, [r6, #8]
    760a:	6840      	ldr	r0, [r0, #4]
    760c:	9003      	str	r0, [sp, #12]
    760e:	4668      	mov	r0, sp
    7610:	f003 fe2a 	bl	b268 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7614:	f003 fef8 	bl	b408 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7618:	f004 f968 	bl	b8ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    761c:	f003 fd06 	bl	b02c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7620:	f003 fb2a 	bl	ac78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7624:	484c      	ldr	r0, [pc, #304]	; (7758 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    7626:	f004 f83f 	bl	b6a8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    762a:	484c      	ldr	r0, [pc, #304]	; (775c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    762c:	f004 f846 	bl	b6bc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7630:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7634:	4607      	mov	r7, r0
    7636:	f007 f9e7 	bl	ea08 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    763a:	4638      	mov	r0, r7
    763c:	f007 f9a9 	bl	e992 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7640:	4601      	mov	r1, r0
    7642:	4620      	mov	r0, r4
    7644:	f007 f966 	bl	e914 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    7648:	f994 000e 	ldrsb.w	r0, [r4, #14]
    764c:	f003 ff60 	bl	b510 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7650:	7921      	ldrb	r1, [r4, #4]
    7652:	2000      	movs	r0, #0
    7654:	f003 fd9c 	bl	b190 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7658:	2101      	movs	r1, #1
    765a:	60a8      	str	r0, [r5, #8]
    765c:	b198      	cbz	r0, 7686 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    765e:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7662:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7664:	f006 f823 	bl	d6ae <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7668:	4607      	mov	r7, r0
    766a:	f104 0140 	add.w	r1, r4, #64	; 0x40
    766e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7670:	f006 f820 	bl	d6b4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    7674:	b14f      	cbz	r7, 768a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    7676:	f894 1020 	ldrb.w	r1, [r4, #32]
    767a:	b951      	cbnz	r1, 7692 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    767c:	e005      	b.n	768a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    767e:	200c      	movs	r0, #12
    7680:	b006      	add	sp, #24
    7682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7686:	7029      	strb	r1, [r5, #0]
    7688:	e05e      	b.n	7748 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    768a:	b120      	cbz	r0, 7696 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    768c:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    7690:	b108      	cbz	r0, 7696 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    7692:	2701      	movs	r7, #1
    7694:	e000      	b.n	7698 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    7696:	2700      	movs	r7, #0
    7698:	7ea0      	ldrb	r0, [r4, #26]
    769a:	b920      	cbnz	r0, 76a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    769c:	7e20      	ldrb	r0, [r4, #24]
    769e:	b910      	cbnz	r0, 76a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    76a0:	78a0      	ldrb	r0, [r4, #2]
    76a2:	0740      	lsls	r0, r0, #29
    76a4:	d523      	bpl.n	76ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    76a6:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    76aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    76ae:	4050      	eors	r0, r2
    76b0:	ea70 0101 	orns	r1, r0, r1
    76b4:	d006      	beq.n	76c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    76b6:	f7fb fe13 	bl	32e0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    76ba:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    76be:	1a80      	subs	r0, r0, r2
    76c0:	4199      	sbcs	r1, r3
    76c2:	d200      	bcs.n	76c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6>
    76c4:	b19f      	cbz	r7, 76ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    76c6:	f7fe fea3 	bl	6410 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    76ca:	4925      	ldr	r1, [pc, #148]	; (7760 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>)
    76cc:	fba0 2301 	umull	r2, r3, r0, r1
    76d0:	f104 0048 	add.w	r0, r4, #72	; 0x48
    76d4:	f007 f934 	bl	e940 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf2>
    76d8:	2101      	movs	r1, #1
    76da:	4620      	mov	r0, r4
    76dc:	f007 f8de 	bl	e89c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x4e>
    76e0:	78a0      	ldrb	r0, [r4, #2]
    76e2:	0740      	lsls	r0, r0, #29
    76e4:	d503      	bpl.n	76ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    76e6:	2101      	movs	r1, #1
    76e8:	4620      	mov	r0, r4
    76ea:	f000 fa9d 	bl	7c28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>
    76ee:	f7fe fee7 	bl	64c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    76f2:	6870      	ldr	r0, [r6, #4]
    76f4:	1cc0      	adds	r0, r0, #3
    76f6:	f006 f8ee 	bl	d8d6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    76fa:	73a8      	strb	r0, [r5, #14]
    76fc:	78a0      	ldrb	r0, [r4, #2]
    76fe:	07c0      	lsls	r0, r0, #31
    7700:	d022      	beq.n	7748 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    7702:	f8cd 8010 	str.w	r8, [sp, #16]
    7706:	20ff      	movs	r0, #255	; 0xff
    7708:	f8cd 8014 	str.w	r8, [sp, #20]
    770c:	73e8      	strb	r0, [r5, #15]
    770e:	69e6      	ldr	r6, [r4, #28]
    7710:	f106 070a 	add.w	r7, r6, #10
    7714:	e013      	b.n	773e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    7716:	9c04      	ldr	r4, [sp, #16]
    7718:	42b4      	cmp	r4, r6
    771a:	d010      	beq.n	773e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    771c:	7a72      	ldrb	r2, [r6, #9]
    771e:	7a60      	ldrb	r0, [r4, #9]
    7720:	463b      	mov	r3, r7
    7722:	f104 010a 	add.w	r1, r4, #10
    7726:	f006 f84b 	bl	d7c0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    772a:	b140      	cbz	r0, 773e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    772c:	78a0      	ldrb	r0, [r4, #2]
    772e:	73e8      	strb	r0, [r5, #15]
    7730:	f8d4 0003 	ldr.w	r0, [r4, #3]
    7734:	6128      	str	r0, [r5, #16]
    7736:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    773a:	82a8      	strh	r0, [r5, #20]
    773c:	e004      	b.n	7748 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    773e:	a804      	add	r0, sp, #16
    7740:	f7fd fbee 	bl	4f20 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7744:	2800      	cmp	r0, #0
    7746:	d0e6      	beq.n	7716 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x146>
    7748:	2000      	movs	r0, #0
    774a:	e799      	b.n	7680 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    774c:	20001488 	.word	0x20001488
    7750:	00007d38 	.word	0x00007d38
    7754:	20000130 	.word	0x20000130
    7758:	8e89bed6 	.word	0x8e89bed6
    775c:	00555555 	.word	0x00555555
    7760:	000f4240 	.word	0x000f4240
    7764:	b510      	push	{r4, lr}
    7766:	4604      	mov	r4, r0
    7768:	f7ff ff32 	bl	75d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    776c:	2800      	cmp	r0, #0
    776e:	d108      	bne.n	7782 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    7770:	4804      	ldr	r0, [pc, #16]	; (7784 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    7772:	7800      	ldrb	r0, [r0, #0]
    7774:	2801      	cmp	r0, #1
    7776:	d003      	beq.n	7780 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    7778:	2100      	movs	r1, #0
    777a:	4620      	mov	r0, r4
    777c:	f7ff fda8 	bl	72d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7780:	2000      	movs	r0, #0
    7782:	bd10      	pop	{r4, pc}
    7784:	20001488 	.word	0x20001488
    7788:	480a      	ldr	r0, [pc, #40]	; (77b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    778a:	b510      	push	{r4, lr}
    778c:	490a      	ldr	r1, [pc, #40]	; (77b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    778e:	6804      	ldr	r4, [r0, #0]
    7790:	7808      	ldrb	r0, [r1, #0]
    7792:	2800      	cmp	r0, #0
    7794:	d00d      	beq.n	77b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    7796:	7808      	ldrb	r0, [r1, #0]
    7798:	2802      	cmp	r0, #2
    779a:	d002      	beq.n	77a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    779c:	7808      	ldrb	r0, [r1, #0]
    779e:	2803      	cmp	r0, #3
    77a0:	d102      	bne.n	77a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    77a2:	4620      	mov	r0, r4
    77a4:	f7ff ff02 	bl	75ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    77a8:	4620      	mov	r0, r4
    77aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77ae:	f000 b907 	b.w	79c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    77b2:	bd10      	pop	{r4, pc}
    77b4:	20000130 	.word	0x20000130
    77b8:	20001488 	.word	0x20001488
    77bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77c0:	4604      	mov	r4, r0
    77c2:	4827      	ldr	r0, [pc, #156]	; (7860 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    77c4:	460d      	mov	r5, r1
    77c6:	6840      	ldr	r0, [r0, #4]
    77c8:	f003 fec4 	bl	b554 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    77cc:	4e25      	ldr	r6, [pc, #148]	; (7864 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    77ce:	2004      	movs	r0, #4
    77d0:	7030      	strb	r0, [r6, #0]
    77d2:	b325      	cbz	r5, 781e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    77d4:	8860      	ldrh	r0, [r4, #2]
    77d6:	2810      	cmp	r0, #16
    77d8:	d02a      	beq.n	7830 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    77da:	f104 0028 	add.w	r0, r4, #40	; 0x28
    77de:	4680      	mov	r8, r0
    77e0:	68b5      	ldr	r5, [r6, #8]
    77e2:	f007 f8ca 	bl	e97a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    77e6:	4607      	mov	r7, r0
    77e8:	4640      	mov	r0, r8
    77ea:	f007 f8ef 	bl	e9cc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    77ee:	1a38      	subs	r0, r7, r0
    77f0:	1e40      	subs	r0, r0, #1
    77f2:	b2c0      	uxtb	r0, r0
    77f4:	8861      	ldrh	r1, [r4, #2]
    77f6:	2228      	movs	r2, #40	; 0x28
    77f8:	f000 fada 	bl	7db0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    77fc:	4405      	add	r5, r0
    77fe:	78a0      	ldrb	r0, [r4, #2]
    7800:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7804:	b130      	cbz	r0, 7814 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    7806:	6870      	ldr	r0, [r6, #4]
    7808:	4405      	add	r5, r0
    780a:	f007 f938 	bl	ea7e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    780e:	4428      	add	r0, r5
    7810:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    7814:	7922      	ldrb	r2, [r4, #4]
    7816:	4629      	mov	r1, r5
    7818:	2000      	movs	r0, #0
    781a:	f003 feb1 	bl	b580 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    781e:	8860      	ldrh	r0, [r4, #2]
    7820:	2813      	cmp	r0, #19
    7822:	d013      	beq.n	784c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7824:	dc09      	bgt.n	783a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26a>
    7826:	2810      	cmp	r0, #16
    7828:	d017      	beq.n	785a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    782a:	2812      	cmp	r0, #18
    782c:	d109      	bne.n	7842 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    782e:	e00d      	b.n	784c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7830:	7921      	ldrb	r1, [r4, #4]
    7832:	2000      	movs	r0, #0
    7834:	f003 fc72 	bl	b11c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7838:	e7f1      	b.n	781e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    783a:	2815      	cmp	r0, #21
    783c:	d006      	beq.n	784c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    783e:	281d      	cmp	r0, #29
    7840:	d004      	beq.n	784c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7842:	f640 51b8 	movw	r1, #3512	; 0xdb8
    7846:	202d      	movs	r0, #45	; 0x2d
    7848:	f7fd f930 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    784c:	7922      	ldrb	r2, [r4, #4]
    784e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7852:	2101      	movs	r1, #1
    7854:	2000      	movs	r0, #0
    7856:	f003 bef5 	b.w	b644 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    785e:	0000      	.short	0x0000
    7860:	20000130 	.word	0x20000130
    7864:	20001488 	.word	0x20001488
    7868:	b510      	push	{r4, lr}
    786a:	4604      	mov	r4, r0
    786c:	7800      	ldrb	r0, [r0, #0]
    786e:	460b      	mov	r3, r1
    7870:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    7874:	29ff      	cmp	r1, #255	; 0xff
    7876:	d010      	beq.n	789a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    7878:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    787c:	1e51      	subs	r1, r2, #1
    787e:	4618      	mov	r0, r3
    7880:	f7fe fd9a 	bl	63b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7884:	b130      	cbz	r0, 7894 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>
    7886:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    788a:	f040 0002 	orr.w	r0, r0, #2
    788e:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    7892:	e011      	b.n	78b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    7894:	f241 0102 	movw	r1, #4098	; 0x1002
    7898:	e021      	b.n	78de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30e>
    789a:	4812      	ldr	r0, [pc, #72]	; (78e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x314>)
    789c:	6840      	ldr	r0, [r0, #4]
    789e:	7801      	ldrb	r1, [r0, #0]
    78a0:	f3c1 1180 	ubfx	r1, r1, #6, #1
    78a4:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    78a8:	f8d0 1003 	ldr.w	r1, [r0, #3]
    78ac:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    78b0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    78b4:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    78b8:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    78bc:	287f      	cmp	r0, #127	; 0x7f
    78be:	d00c      	beq.n	78da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30a>
    78c0:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    78c4:	207f      	movs	r0, #127	; 0x7f
    78c6:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    78ca:	4621      	mov	r1, r4
    78cc:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    78d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78d4:	221d      	movs	r2, #29
    78d6:	f7ff b85b 	b.w	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    78da:	f640 616b 	movw	r1, #3691	; 0xe6b
    78de:	202d      	movs	r0, #45	; 0x2d
    78e0:	f7fd f8e4 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78e4:	20000130 	.word	0x20000130
    78e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78ec:	4690      	mov	r8, r2
    78ee:	460e      	mov	r6, r1
    78f0:	4604      	mov	r4, r0
    78f2:	2903      	cmp	r1, #3
    78f4:	d004      	beq.n	7900 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    78f6:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    78fa:	b108      	cbz	r0, 7900 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    78fc:	2001      	movs	r0, #1
    78fe:	e000      	b.n	7902 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    7900:	2000      	movs	r0, #0
    7902:	4681      	mov	r9, r0
    7904:	f003 fbac 	bl	b060 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7908:	4605      	mov	r5, r0
    790a:	2e03      	cmp	r6, #3
    790c:	d003      	beq.n	7916 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    790e:	2701      	movs	r7, #1
    7910:	2e05      	cmp	r6, #5
    7912:	d005      	beq.n	7920 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    7914:	e008      	b.n	7928 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x358>
    7916:	78a0      	ldrb	r0, [r4, #2]
    7918:	2702      	movs	r7, #2
    791a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    791e:	e001      	b.n	7924 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    7920:	78a0      	ldrb	r0, [r4, #2]
    7922:	07c0      	lsls	r0, r0, #31
    7924:	2800      	cmp	r0, #0
    7926:	d042      	beq.n	79ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    7928:	f1b9 0f00 	cmp.w	r9, #0
    792c:	d13e      	bne.n	79ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    792e:	4822      	ldr	r0, [pc, #136]	; (79b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>)
    7930:	7b80      	ldrb	r0, [r0, #14]
    7932:	b140      	cbz	r0, 7946 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    7934:	f005 ffd2 	bl	d8dc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7938:	f888 0000 	strb.w	r0, [r8]
    793c:	28ff      	cmp	r0, #255	; 0xff
    793e:	d002      	beq.n	7946 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    7940:	f7fe fd54 	bl	63ec <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7944:	4305      	orrs	r5, r0
    7946:	4e1d      	ldr	r6, [pc, #116]	; (79bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>)
    7948:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    794c:	f104 0358 	add.w	r3, r4, #88	; 0x58
    7950:	6871      	ldr	r1, [r6, #4]
    7952:	f811 0b03 	ldrb.w	r0, [r1], #3
    7956:	f3c0 1080 	ubfx	r0, r0, #6, #1
    795a:	f005 ff31 	bl	d7c0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    795e:	f898 1000 	ldrb.w	r1, [r8]
    7962:	29ff      	cmp	r1, #255	; 0xff
    7964:	d004      	beq.n	7970 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    7966:	b990      	cbnz	r0, 798e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7968:	7e60      	ldrb	r0, [r4, #25]
    796a:	4288      	cmp	r0, r1
    796c:	d00f      	beq.n	798e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    796e:	e008      	b.n	7982 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7970:	b138      	cbz	r0, 7982 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7972:	6871      	ldr	r1, [r6, #4]
    7974:	f811 0b03 	ldrb.w	r0, [r1], #3
    7978:	f3c0 1080 	ubfx	r0, r0, #6, #1
    797c:	f006 ff75 	bl	e86a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    7980:	b128      	cbz	r0, 798e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7982:	2000      	movs	r0, #0
    7984:	78a1      	ldrb	r1, [r4, #2]
    7986:	0749      	lsls	r1, r1, #29
    7988:	d503      	bpl.n	7992 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    798a:	b990      	cbnz	r0, 79b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    798c:	e00e      	b.n	79ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    798e:	2001      	movs	r0, #1
    7990:	e7f8      	b.n	7984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    7992:	b975      	cbnz	r5, 79b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    7994:	7be0      	ldrb	r0, [r4, #15]
    7996:	b108      	cbz	r0, 799c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    7998:	42b8      	cmp	r0, r7
    799a:	d107      	bne.n	79ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    799c:	6871      	ldr	r1, [r6, #4]
    799e:	f811 0b03 	ldrb.w	r0, [r1], #3
    79a2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    79a6:	f006 ff60 	bl	e86a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    79aa:	b110      	cbz	r0, 79b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    79ac:	2000      	movs	r0, #0
    79ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    79b2:	2001      	movs	r0, #1
    79b4:	e7fb      	b.n	79ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    79b6:	0000      	.short	0x0000
    79b8:	20001488 	.word	0x20001488
    79bc:	20000130 	.word	0x20000130
    79c0:	b570      	push	{r4, r5, r6, lr}
    79c2:	4604      	mov	r4, r0
    79c4:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    79c6:	4d10      	ldr	r5, [pc, #64]	; (7a08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>)
    79c8:	1c40      	adds	r0, r0, #1
    79ca:	8620      	strh	r0, [r4, #48]	; 0x30
    79cc:	7ba8      	ldrb	r0, [r5, #14]
    79ce:	2600      	movs	r6, #0
    79d0:	b120      	cbz	r0, 79dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x40c>
    79d2:	f003 fb2b 	bl	b02c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    79d6:	f003 f94f 	bl	ac78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    79da:	73ae      	strb	r6, [r5, #14]
    79dc:	702e      	strb	r6, [r5, #0]
    79de:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    79e2:	b108      	cbz	r0, 79e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x418>
    79e4:	2101      	movs	r1, #1
    79e6:	e00a      	b.n	79fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    79e8:	7b60      	ldrb	r0, [r4, #13]
    79ea:	b138      	cbz	r0, 79fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    79ec:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    79ee:	4288      	cmp	r0, r1
    79f0:	d804      	bhi.n	79fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    79f2:	2101      	movs	r1, #1
    79f4:	4620      	mov	r0, r4
    79f6:	f007 f866 	bl	eac6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    79fa:	bd70      	pop	{r4, r5, r6, pc}
    79fc:	2100      	movs	r1, #0
    79fe:	4620      	mov	r0, r4
    7a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a04:	f007 b85f 	b.w	eac6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7a08:	20001488 	.word	0x20001488
    7a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a0e:	4604      	mov	r4, r0
    7a10:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
    7a14:	4616      	mov	r6, r2
    7a16:	460d      	mov	r5, r1
    7a18:	f88d 0000 	strb.w	r0, [sp]
    7a1c:	9800      	ldr	r0, [sp, #0]
    7a1e:	9000      	str	r0, [sp, #0]
    7a20:	f89d 0000 	ldrb.w	r0, [sp]
    7a24:	b110      	cbz	r0, 7a2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>
    7a26:	f640 416b 	movw	r1, #3179	; 0xc6b
    7a2a:	e055      	b.n	7ad8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
    7a2c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    7a30:	2700      	movs	r7, #0
    7a32:	8828      	ldrh	r0, [r5, #0]
    7a34:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
    7a38:	2b00      	cmp	r3, #0
    7a3a:	d14a      	bne.n	7ad2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x502>
    7a3c:	6928      	ldr	r0, [r5, #16]
    7a3e:	f005 ff9c 	bl	d97a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7a42:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    7a46:	8b28      	ldrh	r0, [r5, #24]
    7a48:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    7a4c:	8b68      	ldrh	r0, [r5, #26]
    7a4e:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    7a52:	f895 020d 	ldrb.w	r0, [r5, #525]	; 0x20d
    7a56:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    7a5a:	7e20      	ldrb	r0, [r4, #24]
    7a5c:	f104 0151 	add.w	r1, r4, #81	; 0x51
    7a60:	460d      	mov	r5, r1
    7a62:	b120      	cbz	r0, 7a6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    7a64:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    7a68:	f006 fd95 	bl	e596 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    7a6c:	b940      	cbnz	r0, 7a80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    7a6e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    7a72:	b170      	cbz	r0, 7a92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    7a74:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    7a78:	4629      	mov	r1, r5
    7a7a:	f006 fd83 	bl	e584 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb8>
    7a7e:	b140      	cbz	r0, 7a92 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c2>
    7a80:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    7a84:	f8c4 0082 	str.w	r0, [r4, #130]	; 0x82
    7a88:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    7a8c:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
    7a90:	e003      	b.n	7a9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ca>
    7a92:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
    7a96:	f8a4 7086 	strh.w	r7, [r4, #134]	; 0x86
    7a9a:	4814      	ldr	r0, [pc, #80]	; (7aec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>)
    7a9c:	2eff      	cmp	r6, #255	; 0xff
    7a9e:	6840      	ldr	r0, [r0, #4]
    7aa0:	7801      	ldrb	r1, [r0, #0]
    7aa2:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7aa6:	f884 107b 	strb.w	r1, [r4, #123]	; 0x7b
    7aaa:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7aae:	d016      	beq.n	7ade <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    7ab0:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    7ab4:	8880      	ldrh	r0, [r0, #4]
    7ab6:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    7aba:	f104 027c 	add.w	r2, r4, #124	; 0x7c
    7abe:	1e51      	subs	r1, r2, #1
    7ac0:	4630      	mov	r0, r6
    7ac2:	f7fe fc79 	bl	63b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7ac6:	b128      	cbz	r0, 7ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x504>
    7ac8:	f814 0f7b 	ldrb.w	r0, [r4, #123]!
    7acc:	f040 0002 	orr.w	r0, r0, #2
    7ad0:	7020      	strb	r0, [r4, #0]
    7ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ad4:	f640 418c 	movw	r1, #3212	; 0xc8c
    7ad8:	202d      	movs	r0, #45	; 0x2d
    7ada:	f7fc ffe7 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ade:	f844 1f7c 	str.w	r1, [r4, #124]!
    7ae2:	8880      	ldrh	r0, [r0, #4]
    7ae4:	80a0      	strh	r0, [r4, #4]
    7ae6:	60e7      	str	r7, [r4, #12]
    7ae8:	8227      	strh	r7, [r4, #16]
    7aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7aec:	20000130 	.word	0x20000130
    7af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7af2:	4604      	mov	r4, r0
    7af4:	20ff      	movs	r0, #255	; 0xff
    7af6:	f88d 0000 	strb.w	r0, [sp]
    7afa:	2601      	movs	r6, #1
    7afc:	466a      	mov	r2, sp
    7afe:	2105      	movs	r1, #5
    7b00:	4620      	mov	r0, r4
    7b02:	f7ff fef1 	bl	78e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7b06:	b160      	cbz	r0, 7b22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x552>
    7b08:	4d28      	ldr	r5, [pc, #160]	; (7bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>)
    7b0a:	4f27      	ldr	r7, [pc, #156]	; (7ba8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>)
    7b0c:	6869      	ldr	r1, [r5, #4]
    7b0e:	7bfa      	ldrb	r2, [r7, #15]
    7b10:	f107 0310 	add.w	r3, r7, #16
    7b14:	f811 0b03 	ldrb.w	r0, [r1], #3
    7b18:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7b1c:	f005 fe50 	bl	d7c0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7b20:	b110      	cbz	r0, 7b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x558>
    7b22:	2600      	movs	r6, #0
    7b24:	4630      	mov	r0, r6
    7b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b28:	686a      	ldr	r2, [r5, #4]
    7b2a:	69e0      	ldr	r0, [r4, #28]
    7b2c:	7812      	ldrb	r2, [r2, #0]
    7b2e:	f810 1f9d 	ldrb.w	r1, [r0, #157]!
    7b32:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7b36:	4011      	ands	r1, r2
    7b38:	7001      	strb	r1, [r0, #0]
    7b3a:	2201      	movs	r2, #1
    7b3c:	4620      	mov	r0, r4
    7b3e:	69e1      	ldr	r1, [r4, #28]
    7b40:	f000 f8a0 	bl	7c84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>
    7b44:	2300      	movs	r3, #0
    7b46:	f89d 2000 	ldrb.w	r2, [sp]
    7b4a:	4620      	mov	r0, r4
    7b4c:	69e1      	ldr	r1, [r4, #28]
    7b4e:	f7ff ff5d 	bl	7a0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    7b52:	2210      	movs	r2, #16
    7b54:	4621      	mov	r1, r4
    7b56:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    7b5a:	f7fe ff19 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7b5e:	69e0      	ldr	r0, [r4, #28]
    7b60:	2205      	movs	r2, #5
    7b62:	8801      	ldrh	r1, [r0, #0]
    7b64:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    7b68:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    7b6c:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    7b70:	4621      	mov	r1, r4
    7b72:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    7b76:	f7fe ff0b 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    7b7a:	2100      	movs	r1, #0
    7b7c:	69e0      	ldr	r0, [r4, #28]
    7b7e:	7039      	strb	r1, [r7, #0]
    7b80:	460a      	mov	r2, r1
    7b82:	4621      	mov	r1, r4
    7b84:	f000 fa8c 	bl	80a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    7b88:	6868      	ldr	r0, [r5, #4]
    7b8a:	69e1      	ldr	r1, [r4, #28]
    7b8c:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7b90:	f841 2f03 	str.w	r2, [r1, #3]!
    7b94:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7b98:	808a      	strh	r2, [r1, #4]
    7b9a:	7800      	ldrb	r0, [r0, #0]
    7b9c:	69e1      	ldr	r1, [r4, #28]
    7b9e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7ba2:	7088      	strb	r0, [r1, #2]
    7ba4:	e7be      	b.n	7b24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x554>
    7ba6:	0000      	.short	0x0000
    7ba8:	20001488 	.word	0x20001488
    7bac:	20000130 	.word	0x20000130
    7bb0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7bb4:	4604      	mov	r4, r0
    7bb6:	20ff      	movs	r0, #255	; 0xff
    7bb8:	f88d 0000 	strb.w	r0, [sp]
    7bbc:	2501      	movs	r5, #1
    7bbe:	466a      	mov	r2, sp
    7bc0:	2103      	movs	r1, #3
    7bc2:	4620      	mov	r0, r4
    7bc4:	f7ff fe90 	bl	78e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7bc8:	b330      	cbz	r0, 7c18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>
    7bca:	7b20      	ldrb	r0, [r4, #12]
    7bcc:	2700      	movs	r7, #0
    7bce:	b168      	cbz	r0, 7bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61c>
    7bd0:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    7bd4:	f88d 0004 	strb.w	r0, [sp, #4]
    7bd8:	9801      	ldr	r0, [sp, #4]
    7bda:	9001      	str	r0, [sp, #4]
    7bdc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7be0:	b920      	cbnz	r0, 7bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x61c>
    7be2:	f89d 1000 	ldrb.w	r1, [sp]
    7be6:	4620      	mov	r0, r4
    7be8:	f7ff fe3e 	bl	7868 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>
    7bec:	4e0c      	ldr	r6, [pc, #48]	; (7c20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x650>)
    7bee:	2104      	movs	r1, #4
    7bf0:	6870      	ldr	r0, [r6, #4]
    7bf2:	8007      	strh	r7, [r0, #0]
    7bf4:	f006 f8f3 	bl	ddde <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    7bf8:	4620      	mov	r0, r4
    7bfa:	f000 f88b 	bl	7d14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>
    7bfe:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    7c02:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7c04:	6870      	ldr	r0, [r6, #4]
    7c06:	f006 f921 	bl	de4c <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    7c0a:	4906      	ldr	r1, [pc, #24]	; (7c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    7c0c:	2005      	movs	r0, #5
    7c0e:	7008      	strb	r0, [r1, #0]
    7c10:	6870      	ldr	r0, [r6, #4]
    7c12:	f003 fc9f 	bl	b554 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7c16:	e000      	b.n	7c1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64a>
    7c18:	2500      	movs	r5, #0
    7c1a:	4628      	mov	r0, r5
    7c1c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7c20:	20000130 	.word	0x20000130
    7c24:	20001488 	.word	0x20001488
    7c28:	b570      	push	{r4, r5, r6, lr}
    7c2a:	4604      	mov	r4, r0
    7c2c:	460e      	mov	r6, r1
    7c2e:	7e40      	ldrb	r0, [r0, #25]
    7c30:	f7fe fb9c 	bl	636c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7c34:	0005      	movs	r5, r0
    7c36:	d019      	beq.n	7c6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    7c38:	2110      	movs	r1, #16
    7c3a:	f006 f81f 	bl	dc7c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7c3e:	2800      	cmp	r0, #0
    7c40:	d114      	bne.n	7c6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    7c42:	2001      	movs	r0, #1
    7c44:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    7c48:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    7c4c:	4632      	mov	r2, r6
    7c4e:	460c      	mov	r4, r1
    7c50:	4628      	mov	r0, r5
    7c52:	f005 fde5 	bl	d820 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7c56:	4621      	mov	r1, r4
    7c58:	4c05      	ldr	r4, [pc, #20]	; (7c70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>)
    7c5a:	6860      	ldr	r0, [r4, #4]
    7c5c:	f006 f8da 	bl	de14 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    7c60:	6860      	ldr	r0, [r4, #4]
    7c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c66:	2101      	movs	r1, #1
    7c68:	f006 b8da 	b.w	de20 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    7c6c:	bd70      	pop	{r4, r5, r6, pc}
    7c6e:	0000      	.short	0x0000
    7c70:	20000130 	.word	0x20000130
    7c74:	4802      	ldr	r0, [pc, #8]	; (7c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>)
    7c76:	2101      	movs	r1, #1
    7c78:	6800      	ldr	r0, [r0, #0]
    7c7a:	f7ff bb29 	b.w	72d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7c7e:	0000      	.short	0x0000
    7c80:	20000130 	.word	0x20000130
    7c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c88:	4e21      	ldr	r6, [pc, #132]	; (7d10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x740>)
    7c8a:	4680      	mov	r8, r0
    7c8c:	460c      	mov	r4, r1
    7c8e:	6870      	ldr	r0, [r6, #4]
    7c90:	4615      	mov	r5, r2
    7c92:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7c96:	6161      	str	r1, [r4, #20]
    7c98:	6841      	ldr	r1, [r0, #4]
    7c9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    7c9e:	61e1      	str	r1, [r4, #28]
    7ca0:	8940      	ldrh	r0, [r0, #10]
    7ca2:	f005 fe66 	bl	d972 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7ca6:	4607      	mov	r7, r0
    7ca8:	6120      	str	r0, [r4, #16]
    7caa:	6870      	ldr	r0, [r6, #4]
    7cac:	4639      	mov	r1, r7
    7cae:	7d80      	ldrb	r0, [r0, #22]
    7cb0:	f005 ffdb 	bl	dc6a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7cb4:	84a0      	strh	r0, [r4, #36]	; 0x24
    7cb6:	6870      	ldr	r0, [r6, #4]
    7cb8:	4639      	mov	r1, r7
    7cba:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    7cbe:	f005 ffd0 	bl	dc62 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7cc2:	6220      	str	r0, [r4, #32]
    7cc4:	6870      	ldr	r0, [r6, #4]
    7cc6:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7cca:	8321      	strh	r1, [r4, #24]
    7ccc:	8841      	ldrh	r1, [r0, #2]
    7cce:	8361      	strh	r1, [r4, #26]
    7cd0:	6841      	ldr	r1, [r0, #4]
    7cd2:	f8c4 109e 	str.w	r1, [r4, #158]	; 0x9e
    7cd6:	7a01      	ldrb	r1, [r0, #8]
    7cd8:	f884 10a2 	strb.w	r1, [r4, #162]	; 0xa2
    7cdc:	7a41      	ldrb	r1, [r0, #9]
    7cde:	f001 011f 	and.w	r1, r1, #31
    7ce2:	f884 10a9 	strb.w	r1, [r4, #169]	; 0xa9
    7ce6:	7a40      	ldrb	r0, [r0, #9]
    7ce8:	0940      	lsrs	r0, r0, #5
    7cea:	f884 020d 	strb.w	r0, [r4, #525]	; 0x20d
    7cee:	f104 0062 	add.w	r0, r4, #98	; 0x62
    7cf2:	7205      	strb	r5, [r0, #8]
    7cf4:	7245      	strb	r5, [r0, #9]
    7cf6:	21ff      	movs	r1, #255	; 0xff
    7cf8:	7281      	strb	r1, [r0, #10]
    7cfa:	2100      	movs	r1, #0
    7cfc:	3836      	subs	r0, #54	; 0x36
    7cfe:	f006 fb17 	bl	e330 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7d02:	f898 000e 	ldrb.w	r0, [r8, #14]
    7d06:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    7d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d0e:	0000      	.short	0x0000
    7d10:	20000130 	.word	0x20000130
    7d14:	b570      	push	{r4, r5, r6, lr}
    7d16:	4d07      	ldr	r5, [pc, #28]	; (7d34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x764>)
    7d18:	4604      	mov	r4, r0
    7d1a:	f100 0151 	add.w	r1, r0, #81	; 0x51
    7d1e:	6868      	ldr	r0, [r5, #4]
    7d20:	f006 f885 	bl	de2e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    7d24:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    7d28:	6868      	ldr	r0, [r5, #4]
    7d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d2e:	f006 b884 	b.w	de3a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    7d32:	0000      	.short	0x0000
    7d34:	20000130 	.word	0x20000130
    7d38:	00007559 	.word	0x00007559
    7d3c:	000073e5 	.word	0x000073e5
    7d40:	000074d5 	.word	0x000074d5
    7d44:	00000000 	.word	0x00000000
    7d48:	000074ad 	.word	0x000074ad
    7d4c:	00007505 	.word	0x00007505
    7d50:	0000e891 	.word	0x0000e891
    7d54:	0000e897 	.word	0x0000e897
    7d58:	00007765 	.word	0x00007765
    7d5c:	00007789 	.word	0x00007789
    7d60:	00007c75 	.word	0x00007c75
    7d64:	00007d54 	.word	0x00007d54
    7d68:	00007d4c 	.word	0x00007d4c
    7d6c:	00007d48 	.word	0x00007d48

00007d70 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7d70:	b510      	push	{r4, lr}
    7d72:	1e42      	subs	r2, r0, #1
    7d74:	2a02      	cmp	r2, #2
    7d76:	d901      	bls.n	7d7c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7d78:	21ca      	movs	r1, #202	; 0xca
    7d7a:	e009      	b.n	7d90 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    7d7c:	1e40      	subs	r0, r0, #1
    7d7e:	2910      	cmp	r1, #16
    7d80:	d009      	beq.n	7d96 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7d82:	2912      	cmp	r1, #18
    7d84:	d00c      	beq.n	7da0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7d86:	2913      	cmp	r1, #19
    7d88:	d00a      	beq.n	7da0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7d8a:	2915      	cmp	r1, #21
    7d8c:	d005      	beq.n	7d9a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    7d8e:	21d8      	movs	r1, #216	; 0xd8
    7d90:	202f      	movs	r0, #47	; 0x2f
    7d92:	f7fc fe8b 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d96:	4905      	ldr	r1, [pc, #20]	; (7dac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7d98:	e004      	b.n	7da4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7d9a:	4904      	ldr	r1, [pc, #16]	; (7dac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7d9c:	1d89      	adds	r1, r1, #6
    7d9e:	e001      	b.n	7da4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7da0:	4902      	ldr	r1, [pc, #8]	; (7dac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7da2:	1f89      	subs	r1, r1, #6
    7da4:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7da8:	bd10      	pop	{r4, pc}
    7daa:	0000      	.short	0x0000
    7dac:	0000ea96 	.word	0x0000ea96

00007db0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7db0:	1e42      	subs	r2, r0, #1
    7db2:	b510      	push	{r4, lr}
    7db4:	b2d2      	uxtb	r2, r2
    7db6:	2a01      	cmp	r2, #1
    7db8:	d903      	bls.n	7dc2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7dba:	291d      	cmp	r1, #29
    7dbc:	d001      	beq.n	7dc2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7dbe:	21ee      	movs	r1, #238	; 0xee
    7dc0:	e00d      	b.n	7dde <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7dc2:	2913      	cmp	r1, #19
    7dc4:	d013      	beq.n	7dee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7dc6:	dc04      	bgt.n	7dd2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7dc8:	2910      	cmp	r1, #16
    7dca:	d00b      	beq.n	7de4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    7dcc:	2912      	cmp	r1, #18
    7dce:	d104      	bne.n	7dda <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7dd0:	e00d      	b.n	7dee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7dd2:	2915      	cmp	r1, #21
    7dd4:	d008      	beq.n	7de8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7dd6:	291d      	cmp	r1, #29
    7dd8:	d00e      	beq.n	7df8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    7dda:	f44f 7181 	mov.w	r1, #258	; 0x102
    7dde:	202f      	movs	r0, #47	; 0x2f
    7de0:	f7fc fe64 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7de4:	4807      	ldr	r0, [pc, #28]	; (7e04 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7de6:	e004      	b.n	7df2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7de8:	4806      	ldr	r0, [pc, #24]	; (7e04 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7dea:	3008      	adds	r0, #8
    7dec:	e001      	b.n	7df2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7dee:	4805      	ldr	r0, [pc, #20]	; (7e04 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7df0:	1d00      	adds	r0, r0, #4
    7df2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    7df6:	bd10      	pop	{r4, pc}
    7df8:	f240 315a 	movw	r1, #858	; 0x35a
    7dfc:	fb10 f001 	smulbb	r0, r0, r1
    7e00:	bd10      	pop	{r4, pc}
    7e02:	0000      	.short	0x0000
    7e04:	0000ea84 	.word	0x0000ea84

00007e08 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    7e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e0c:	4604      	mov	r4, r0
    7e0e:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    7e12:	4616      	mov	r6, r2
    7e14:	460d      	mov	r5, r1
    7e16:	2800      	cmp	r0, #0
    7e18:	d15e      	bne.n	7ed8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    7e1a:	4621      	mov	r1, r4
    7e1c:	484c      	ldr	r0, [pc, #304]	; (7f50 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x148>)
    7e1e:	f7fb f84f 	bl	2ec0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7e22:	4607      	mov	r7, r0
    7e24:	2820      	cmp	r0, #32
    7e26:	d057      	beq.n	7ed8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    7e28:	2250      	movs	r2, #80	; 0x50
    7e2a:	2100      	movs	r1, #0
    7e2c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    7e30:	f004 fc0b 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7e34:	f884 70c8 	strb.w	r7, [r4, #200]	; 0xc8
    7e38:	2701      	movs	r7, #1
    7e3a:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    7e3e:	f884 70e0 	strb.w	r7, [r4, #224]	; 0xe0
    7e42:	b135      	cbz	r5, 7e52 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    7e44:	f7ff f842 	bl	6ecc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7e48:	f000 0007 	and.w	r0, r0, #7
    7e4c:	1c40      	adds	r0, r0, #1
    7e4e:	f885 023c 	strb.w	r0, [r5, #572]	; 0x23c
    7e52:	4620      	mov	r0, r4
    7e54:	f006 ffd4 	bl	ee00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    7e58:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    7e5c:	2002      	movs	r0, #2
    7e5e:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    7e62:	f884 70f3 	strb.w	r7, [r4, #243]	; 0xf3
    7e66:	2500      	movs	r5, #0
    7e68:	46b8      	mov	r8, r7
    7e6a:	f804 5fe8 	strb.w	r5, [r4, #232]!
    7e6e:	f7fc f995 	bl	419c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    7e72:	4607      	mov	r7, r0
    7e74:	f004 fa0c 	bl	c290 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7e78:	8921      	ldrh	r1, [r4, #8]
    7e7a:	3ce8      	subs	r4, #232	; 0xe8
    7e7c:	4288      	cmp	r0, r1
    7e7e:	d800      	bhi.n	7e82 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    7e80:	4608      	mov	r0, r1
    7e82:	4438      	add	r0, r7
    7e84:	30cc      	adds	r0, #204	; 0xcc
    7e86:	b287      	uxth	r7, r0
    7e88:	4620      	mov	r0, r4
    7e8a:	f006 fc97 	bl	e7bc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7e8e:	b330      	cbz	r0, 7ede <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    7e90:	f008 fc01 	bl	10696 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7e94:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7e98:	b281      	uxth	r1, r0
    7e9a:	4630      	mov	r0, r6
    7e9c:	f004 fa2c 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7ea0:	4430      	add	r0, r6
    7ea2:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    7ea6:	3490      	adds	r4, #144	; 0x90
    7ea8:	f7fb fa1a 	bl	32e0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    7eac:	19c0      	adds	r0, r0, r7
    7eae:	4169      	adcs	r1, r5
    7eb0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    7eb4:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    7eb8:	f824 5c6e 	strh.w	r5, [r4, #-110]
    7ebc:	2001      	movs	r0, #1
    7ebe:	f006 fdda 	bl	ea76 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7ec2:	f500 7088 	add.w	r0, r0, #272	; 0x110
    7ec6:	1a30      	subs	r0, r6, r0
    7ec8:	6460      	str	r0, [r4, #68]	; 0x44
    7eca:	f04f 30ff 	mov.w	r0, #4294967295
    7ece:	0841      	lsrs	r1, r0, #1
    7ed0:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    7ed4:	3c90      	subs	r4, #144	; 0x90
    7ed6:	e023      	b.n	7f20 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    7ed8:	200c      	movs	r0, #12
    7eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ede:	2100      	movs	r1, #0
    7ee0:	4620      	mov	r0, r4
    7ee2:	f006 fedf 	bl	eca4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    7ee6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7f54 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>
    7eea:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    7eee:	2000      	movs	r0, #0
    7ef0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    7ef4:	b139      	cbz	r1, 7f06 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xfe>
    7ef6:	f7fe ffe9 	bl	6ecc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7efa:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    7efe:	fbb0 f2f1 	udiv	r2, r0, r1
    7f02:	fb01 0012 	mls	r0, r1, r2, r0
    7f06:	4407      	add	r7, r0
    7f08:	f7fb f9ea 	bl	32e0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    7f0c:	19c0      	adds	r0, r0, r7
    7f0e:	4169      	adcs	r1, r5
    7f10:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    7f14:	b19e      	cbz	r6, 7f3e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x136>
    7f16:	1980      	adds	r0, r0, r6
    7f18:	eb51 0105 	adcs.w	r1, r1, r5
    7f1c:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    7f20:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    7f24:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    7f28:	f006 ff68 	bl	edfc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    7f2c:	b158      	cbz	r0, 7f46 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13e>
    7f2e:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    7f32:	2100      	movs	r1, #0
    7f34:	4620      	mov	r0, r4
    7f36:	f006 fc71 	bl	e81c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    7f3a:	2000      	movs	r0, #0
    7f3c:	e7cd      	b.n	7eda <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    7f3e:	f04f 30ff 	mov.w	r0, #4294967295
    7f42:	0841      	lsrs	r1, r0, #1
    7f44:	e7ea      	b.n	7f1c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x114>
    7f46:	f240 11e7 	movw	r1, #487	; 0x1e7
    7f4a:	2030      	movs	r0, #48	; 0x30
    7f4c:	f7fc fdae 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f50:	0000ef79 	.word	0x0000ef79
    7f54:	20000140 	.word	0x20000140

00007f58 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    7f58:	4901      	ldr	r1, [pc, #4]	; (7f60 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    7f5a:	8088      	strh	r0, [r1, #4]
    7f5c:	4770      	bx	lr
    7f5e:	0000      	.short	0x0000
    7f60:	20000140 	.word	0x20000140

00007f64 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    7f64:	4805      	ldr	r0, [pc, #20]	; (7f7c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    7f66:	2100      	movs	r1, #0
    7f68:	7001      	strb	r1, [r0, #0]
    7f6a:	2201      	movs	r2, #1
    7f6c:	7082      	strb	r2, [r0, #2]
    7f6e:	7041      	strb	r1, [r0, #1]
    7f70:	f242 7110 	movw	r1, #10000	; 0x2710
    7f74:	8081      	strh	r1, [r0, #4]
    7f76:	f000 b803 	b.w	7f80 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    7f7a:	0000      	.short	0x0000
    7f7c:	20000140 	.word	0x20000140

00007f80 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    7f80:	b51c      	push	{r2, r3, r4, lr}
    7f82:	4909      	ldr	r1, [pc, #36]	; (7fa8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    7f84:	e9d1 0100 	ldrd	r0, r1, [r1]
    7f88:	e9cd 0100 	strd	r0, r1, [sp]
    7f8c:	e002      	b.n	7f94 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    7f8e:	9800      	ldr	r0, [sp, #0]
    7f90:	f006 fdad 	bl	eaee <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    7f94:	4668      	mov	r0, sp
    7f96:	f7fc ffc3 	bl	4f20 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7f9a:	2800      	cmp	r0, #0
    7f9c:	d0f7      	beq.n	7f8e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    7f9e:	f000 f8ab 	bl	80f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    7fa2:	2000      	movs	r0, #0
    7fa4:	bd1c      	pop	{r2, r3, r4, pc}
    7fa6:	0000      	.short	0x0000
    7fa8:	00008718 	.word	0x00008718

00007fac <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    7fac:	4901      	ldr	r1, [pc, #4]	; (7fb4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    7fae:	7008      	strb	r0, [r1, #0]
    7fb0:	4770      	bx	lr
    7fb2:	0000      	.short	0x0000
    7fb4:	20000140 	.word	0x20000140

00007fb8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    7fb8:	4908      	ldr	r1, [pc, #32]	; (7fdc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    7fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7fbe:	fbb1 f1f2 	udiv	r1, r1, r2
    7fc2:	b510      	push	{r4, lr}
    7fc4:	f501 7125 	add.w	r1, r1, #660	; 0x294
    7fc8:	f006 f9cb 	bl	e362 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7fcc:	f640 0148 	movw	r1, #2120	; 0x848
    7fd0:	4288      	cmp	r0, r1
    7fd2:	d300      	bcc.n	7fd6 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    7fd4:	4608      	mov	r0, r1
    7fd6:	b280      	uxth	r0, r0
    7fd8:	bd10      	pop	{r4, pc}
    7fda:	0000      	.short	0x0000
    7fdc:	0001527d 	.word	0x0001527d

00007fe0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fe4:	4c10      	ldr	r4, [pc, #64]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7fe6:	e9d4 5702 	ldrd	r5, r7, [r4, #8]
    7fea:	f003 f9cd 	bl	b388 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7fee:	4606      	mov	r6, r0
    7ff0:	7820      	ldrb	r0, [r4, #0]
    7ff2:	b128      	cbz	r0, 8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
    7ff4:	4632      	mov	r2, r6
    7ff6:	4639      	mov	r1, r7
    7ff8:	4628      	mov	r0, r5
    7ffa:	f005 fcc4 	bl	d986 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7ffe:	4605      	mov	r5, r0
    8000:	68a0      	ldr	r0, [r4, #8]
    8002:	4285      	cmp	r5, r0
    8004:	d005      	beq.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    8006:	6921      	ldr	r1, [r4, #16]
    8008:	1a28      	subs	r0, r5, r0
    800a:	4408      	add	r0, r1
    800c:	6120      	str	r0, [r4, #16]
    800e:	f7fb f899 	bl	3144 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8012:	60a5      	str	r5, [r4, #8]
    8014:	42ae      	cmp	r6, r5
    8016:	d801      	bhi.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    8018:	7860      	ldrb	r0, [r4, #1]
    801a:	b110      	cbz	r0, 8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    801c:	2000      	movs	r0, #0
    801e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8022:	2001      	movs	r0, #1
    8024:	e7fb      	b.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    8026:	0000      	.short	0x0000
    8028:	20000140 	.word	0x20000140

0000802c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    802c:	b510      	push	{r4, lr}
    802e:	4604      	mov	r4, r0
    8030:	2906      	cmp	r1, #6
    8032:	d22e      	bcs.n	8092 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    8034:	e8df f001 	tbb	[pc, r1]
    8038:	14031105 	.word	0x14031105
    803c:	2815      	.short	0x2815
    803e:	2100      	movs	r1, #0
    8040:	e006      	b.n	8050 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    8042:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    8046:	b110      	cbz	r0, 804e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    8048:	4620      	mov	r0, r4
    804a:	f006 fe6a 	bl	ed22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1dc>
    804e:	2101      	movs	r1, #1
    8050:	4620      	mov	r0, r4
    8052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8056:	f000 b8f7 	b.w	8248 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    805a:	2003      	movs	r0, #3
    805c:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    8060:	bd10      	pop	{r4, pc}
    8062:	f003 f997 	bl	b394 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8066:	f8c4 029c 	str.w	r0, [r4, #668]	; 0x29c
    806a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    806e:	f003 fa55 	bl	b51c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8072:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    8076:	1a09      	subs	r1, r1, r0
    8078:	4808      	ldr	r0, [pc, #32]	; (809c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    807a:	6882      	ldr	r2, [r0, #8]
    807c:	440a      	add	r2, r1
    807e:	6082      	str	r2, [r0, #8]
    8080:	68c2      	ldr	r2, [r0, #12]
    8082:	4411      	add	r1, r2
    8084:	60c1      	str	r1, [r0, #12]
    8086:	bd10      	pop	{r4, pc}
    8088:	4620      	mov	r0, r4
    808a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    808e:	f006 be33 	b.w	ecf8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    8092:	f240 7143 	movw	r1, #1859	; 0x743
    8096:	2030      	movs	r0, #48	; 0x30
    8098:	f7fc fd08 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    809c:	20000140 	.word	0x20000140

000080a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    80a0:	b570      	push	{r4, r5, r6, lr}
    80a2:	460c      	mov	r4, r1
    80a4:	4605      	mov	r5, r0
    80a6:	b112      	cbz	r2, 80ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    80a8:	f240 716d 	movw	r1, #1901	; 0x76d
    80ac:	e010      	b.n	80d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    80ae:	f003 f96b 	bl	b388 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    80b2:	4601      	mov	r1, r0
    80b4:	2200      	movs	r2, #0
    80b6:	4620      	mov	r0, r4
    80b8:	f006 ff12 	bl	eee0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x39a>
    80bc:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    80c0:	462a      	mov	r2, r5
    80c2:	4905      	ldr	r1, [pc, #20]	; (80d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    80c4:	f7fa fdb2 	bl	2c2c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    80c8:	2800      	cmp	r0, #0
    80ca:	d104      	bne.n	80d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    80cc:	f240 7156 	movw	r1, #1878	; 0x756
    80d0:	2030      	movs	r0, #48	; 0x30
    80d2:	f7fc fceb 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80d6:	bd70      	pop	{r4, r5, r6, pc}
    80d8:	0000f01b 	.word	0x0000f01b
    80dc:	b510      	push	{r4, lr}
    80de:	280c      	cmp	r0, #12
    80e0:	d304      	bcc.n	80ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    80e2:	f240 3183 	movw	r1, #899	; 0x383
    80e6:	2006      	movs	r0, #6
    80e8:	f7fc fce0 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80ec:	4901      	ldr	r1, [pc, #4]	; (80f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    80ee:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    80f2:	bd10      	pop	{r4, pc}
    80f4:	00008734 	.word	0x00008734
    80f8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    80fc:	4d15      	ldr	r5, [pc, #84]	; (8154 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>)
    80fe:	2001      	movs	r0, #1
    8100:	7068      	strb	r0, [r5, #1]
    8102:	2400      	movs	r4, #0
    8104:	f64f 76ff 	movw	r6, #65535	; 0xffff
    8108:	e00b      	b.n	8122 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x82>
    810a:	2100      	movs	r1, #0
    810c:	f005 f9ad 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8110:	0007      	movs	r7, r0
    8112:	d009      	beq.n	8128 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x88>
    8114:	f897 0294 	ldrb.w	r0, [r7, #660]	; 0x294
    8118:	f7fa fdba 	bl	2c90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    811c:	4638      	mov	r0, r7
    811e:	f006 fed2 	bl	eec6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    8122:	9400      	str	r4, [sp, #0]
    8124:	9401      	str	r4, [sp, #4]
    8126:	e00d      	b.n	8144 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    8128:	f240 111f 	movw	r1, #287	; 0x11f
    812c:	2030      	movs	r0, #48	; 0x30
    812e:	f7fc fcbd 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8132:	9800      	ldr	r0, [sp, #0]
    8134:	b130      	cbz	r0, 8144 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    8136:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
    813a:	b119      	cbz	r1, 8144 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    813c:	8800      	ldrh	r0, [r0, #0]
    813e:	42b0      	cmp	r0, r6
    8140:	d1e3      	bne.n	810a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a>
    8142:	e004      	b.n	814e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae>
    8144:	4668      	mov	r0, sp
    8146:	f7fc feeb 	bl	4f20 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    814a:	2800      	cmp	r0, #0
    814c:	d0f1      	beq.n	8132 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    814e:	706c      	strb	r4, [r5, #1]
    8150:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    8154:	20000140 	.word	0x20000140
    8158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    815c:	4604      	mov	r4, r0
    815e:	4839      	ldr	r0, [pc, #228]	; (8244 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>)
    8160:	461e      	mov	r6, r3
    8162:	4690      	mov	r8, r2
    8164:	7880      	ldrb	r0, [r0, #2]
    8166:	4689      	mov	r9, r1
    8168:	2500      	movs	r5, #0
    816a:	2800      	cmp	r0, #0
    816c:	d063      	beq.n	8236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    816e:	f7fc f8eb 	bl	4348 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8172:	b3e0      	cbz	r0, 81ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    8174:	f8b4 0238 	ldrh.w	r0, [r4, #568]	; 0x238
    8178:	2802      	cmp	r0, #2
    817a:	d35c      	bcc.n	8236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    817c:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    8180:	2802      	cmp	r0, #2
    8182:	d058      	beq.n	8236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    8184:	f894 0262 	ldrb.w	r0, [r4, #610]	; 0x262
    8188:	bb88      	cbnz	r0, 81ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    818a:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    818e:	f7ff ffa5 	bl	80dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8192:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    8196:	b281      	uxth	r1, r0
    8198:	8031      	strh	r1, [r6, #0]
    819a:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    819e:	2700      	movs	r7, #0
    81a0:	2801      	cmp	r0, #1
    81a2:	d00d      	beq.n	81c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x120>
    81a4:	6920      	ldr	r0, [r4, #16]
    81a6:	f004 f8a7 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    81aa:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    81ae:	4442      	add	r2, r8
    81b0:	eba2 0109 	sub.w	r1, r2, r9
    81b4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    81b8:	1a82      	subs	r2, r0, r2
    81ba:	fb01 7502 	mla	r5, r1, r2, r7
    81be:	e035      	b.n	822c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x18c>
    81c0:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
    81c4:	2803      	cmp	r0, #3
    81c6:	d039      	beq.n	823c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19c>
    81c8:	2101      	movs	r1, #1
    81ca:	2000      	movs	r0, #0
    81cc:	f005 fca6 	bl	db1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    81d0:	6a21      	ldr	r1, [r4, #32]
    81d2:	1847      	adds	r7, r0, r1
    81d4:	8831      	ldrh	r1, [r6, #0]
    81d6:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    81da:	f004 f88d 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    81de:	f8d4 2240 	ldr.w	r2, [r4, #576]	; 0x240
    81e2:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
    81e6:	1a82      	subs	r2, r0, r2
    81e8:	fb01 5502 	mla	r5, r1, r2, r5
    81ec:	e000      	b.n	81f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x150>
    81ee:	e022      	b.n	8236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    81f0:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
    81f4:	8831      	ldrh	r1, [r6, #0]
    81f6:	4638      	mov	r0, r7
    81f8:	f004 f87e 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    81fc:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    8200:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    8204:	1a41      	subs	r1, r0, r1
    8206:	440d      	add	r5, r1
    8208:	8831      	ldrh	r1, [r6, #0]
    820a:	6920      	ldr	r0, [r4, #16]
    820c:	f004 f874 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8210:	f8b4 2226 	ldrh.w	r2, [r4, #550]	; 0x226
    8214:	4442      	add	r2, r8
    8216:	eba2 0109 	sub.w	r1, r2, r9
    821a:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    821e:	1a89      	subs	r1, r1, r2
    8220:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    8224:	1a82      	subs	r2, r0, r2
    8226:	1e49      	subs	r1, r1, #1
    8228:	fb01 5502 	mla	r5, r1, r2, r5
    822c:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    8230:	2001      	movs	r0, #1
    8232:	f884 0262 	strb.w	r0, [r4, #610]	; 0x262
    8236:	4628      	mov	r0, r5
    8238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    823c:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    8240:	e7c6      	b.n	81d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8242:	0000      	.short	0x0000
    8244:	20000140 	.word	0x20000140
    8248:	b538      	push	{r3, r4, r5, lr}
    824a:	2500      	movs	r5, #0
    824c:	4604      	mov	r4, r0
    824e:	2901      	cmp	r1, #1
    8250:	d102      	bne.n	8258 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b8>
    8252:	4810      	ldr	r0, [pc, #64]	; (8294 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    8254:	7840      	ldrb	r0, [r0, #1]
    8256:	b170      	cbz	r0, 8276 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d6>
    8258:	2004      	movs	r0, #4
    825a:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    825e:	bf00      	nop
    8260:	f006 fd58 	bl	ed14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    8264:	f8a4 5292 	strh.w	r5, [r4, #658]	; 0x292
    8268:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    826c:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    8270:	f884 5261 	strb.w	r5, [r4, #609]	; 0x261
    8274:	bd38      	pop	{r3, r4, r5, pc}
    8276:	9500      	str	r5, [sp, #0]
    8278:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    827c:	2301      	movs	r3, #1
    827e:	2200      	movs	r2, #0
    8280:	4620      	mov	r0, r4
    8282:	f000 f809 	bl	8298 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    8286:	2800      	cmp	r0, #0
    8288:	d0ea      	beq.n	8260 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    828a:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
    828e:	2030      	movs	r0, #48	; 0x30
    8290:	f7fc fc0c 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8294:	20000140 	.word	0x20000140
    8298:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    829c:	b08b      	sub	sp, #44	; 0x2c
    829e:	4604      	mov	r4, r0
    82a0:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    82a4:	4699      	mov	r9, r3
    82a6:	460f      	mov	r7, r1
    82a8:	9307      	str	r3, [sp, #28]
    82aa:	9005      	str	r0, [sp, #20]
    82ac:	f008 f9f3 	bl	10696 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    82b0:	4605      	mov	r5, r0
    82b2:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    82b6:	f7ff ff11 	bl	80dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    82ba:	4428      	add	r0, r5
    82bc:	f8ad 0004 	strh.w	r0, [sp, #4]
    82c0:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    82c4:	280e      	cmp	r0, #14
    82c6:	d004      	beq.n	82d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    82c8:	2000      	movs	r0, #0
    82ca:	9008      	str	r0, [sp, #32]
    82cc:	980d      	ldr	r0, [sp, #52]	; 0x34
    82ce:	b110      	cbz	r0, 82d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    82d0:	e02e      	b.n	8330 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    82d2:	2001      	movs	r0, #1
    82d4:	e7f9      	b.n	82ca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    82d6:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    82da:	2803      	cmp	r0, #3
    82dc:	d128      	bne.n	8330 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    82de:	9808      	ldr	r0, [sp, #32]
    82e0:	b330      	cbz	r0, 8330 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    82e2:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
    82e6:	42b8      	cmp	r0, r7
    82e8:	d122      	bne.n	8330 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    82ea:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    82ee:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
    82f2:	6920      	ldr	r0, [r4, #16]
    82f4:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
    82f8:	f8b4 0292 	ldrh.w	r0, [r4, #658]	; 0x292
    82fc:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    8300:	4408      	add	r0, r1
    8302:	f8c4 0248 	str.w	r0, [r4, #584]	; 0x248
    8306:	4620      	mov	r0, r4
    8308:	f006 ff9f 	bl	f24a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    830c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
    8310:	6220      	str	r0, [r4, #32]
    8312:	f8b4 02be 	ldrh.w	r0, [r4, #702]	; 0x2be
    8316:	84a0      	strh	r0, [r4, #36]	; 0x24
    8318:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
    831c:	6120      	str	r0, [r4, #16]
    831e:	f8b4 02c8 	ldrh.w	r0, [r4, #712]	; 0x2c8
    8322:	8320      	strh	r0, [r4, #24]
    8324:	f8b4 02ca 	ldrh.w	r0, [r4, #714]	; 0x2ca
    8328:	8360      	strh	r0, [r4, #26]
    832a:	2002      	movs	r0, #2
    832c:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    8330:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    8334:	f504 751a 	add.w	r5, r4, #616	; 0x268
    8338:	1a38      	subs	r0, r7, r0
    833a:	fa0f fa80 	sxth.w	sl, r0
    833e:	f8b4 0290 	ldrh.w	r0, [r4, #656]	; 0x290
    8342:	1a38      	subs	r0, r7, r0
    8344:	fa0f f880 	sxth.w	r8, r0
    8348:	f1b8 0f00 	cmp.w	r8, #0
    834c:	da08      	bge.n	8360 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    834e:	f8d4 0280 	ldr.w	r0, [r4, #640]	; 0x280
    8352:	f8d4 1284 	ldr.w	r1, [r4, #644]	; 0x284
    8356:	46d0      	mov	r8, sl
    8358:	e9c4 01a2 	strd	r0, r1, [r4, #648]	; 0x288
    835c:	2001      	movs	r0, #1
    835e:	9007      	str	r0, [sp, #28]
    8360:	ab01      	add	r3, sp, #4
    8362:	4652      	mov	r2, sl
    8364:	4641      	mov	r1, r8
    8366:	4620      	mov	r0, r4
    8368:	f7ff fef6 	bl	8158 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb8>
    836c:	9004      	str	r0, [sp, #16]
    836e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    8372:	f8df b334 	ldr.w	fp, [pc, #820]	; 86a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8376:	b140      	cbz	r0, 838a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2ea>
    8378:	2801      	cmp	r0, #1
    837a:	d07d      	beq.n	8478 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    837c:	2802      	cmp	r0, #2
    837e:	d051      	beq.n	8424 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x384>
    8380:	2803      	cmp	r0, #3
    8382:	d07a      	beq.n	847a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3da>
    8384:	f240 5146 	movw	r1, #1350	; 0x546
    8388:	e18a      	b.n	86a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    838a:	2101      	movs	r1, #1
    838c:	2000      	movs	r0, #0
    838e:	f005 fbc5 	bl	db1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8392:	4606      	mov	r6, r0
    8394:	6a20      	ldr	r0, [r4, #32]
    8396:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    839a:	4430      	add	r0, r6
    839c:	f003 ffac 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    83a0:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    83a4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    83a8:	6920      	ldr	r0, [r4, #16]
    83aa:	f003 ffa5 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    83ae:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    83b2:	a907      	add	r1, sp, #28
    83b4:	a806      	add	r0, sp, #24
    83b6:	f002 ff4f 	bl	b258 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    83ba:	e9d4 01a2 	ldrd	r0, r1, [r4, #648]	; 0x288
    83be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    83c2:	f7fa ff9f 	bl	3304 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    83c6:	4682      	mov	sl, r0
    83c8:	4620      	mov	r0, r4
    83ca:	f006 fc95 	bl	ecf8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    83ce:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    83d2:	f8d4 8298 	ldr.w	r8, [r4, #664]	; 0x298
    83d6:	f003 f8cd 	bl	b574 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    83da:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    83de:	4401      	add	r1, r0
    83e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    83e4:	fbb1 f0f0 	udiv	r0, r1, r0
    83e8:	6a21      	ldr	r1, [r4, #32]
    83ea:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    83ee:	4431      	add	r1, r6
    83f0:	1a08      	subs	r0, r1, r0
    83f2:	1a81      	subs	r1, r0, r2
    83f4:	4441      	add	r1, r8
    83f6:	3920      	subs	r1, #32
    83f8:	eba1 060a 	sub.w	r6, r1, sl
    83fc:	0050      	lsls	r0, r2, #1
    83fe:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    8400:	3060      	adds	r0, #96	; 0x60
    8402:	4401      	add	r1, r0
    8404:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8408:	f006 fce6 	bl	edd8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    840c:	3022      	adds	r0, #34	; 0x22
    840e:	f8cb 0014 	str.w	r0, [fp, #20]
    8412:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    8416:	1a30      	subs	r0, r6, r0
    8418:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    841c:	d258      	bcs.n	84d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    841e:	f240 41df 	movw	r1, #1247	; 0x4df
    8422:	e13d      	b.n	86a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8424:	6a21      	ldr	r1, [r4, #32]
    8426:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    842a:	4408      	add	r0, r1
    842c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    8430:	f003 ff62 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8434:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    8438:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    843c:	6920      	ldr	r0, [r4, #16]
    843e:	f003 ff5b 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8442:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    8446:	4620      	mov	r0, r4
    8448:	f006 fc56 	bl	ecf8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    844c:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
    8450:	bb10      	cbnz	r0, 8498 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    8452:	f1b9 0f00 	cmp.w	r9, #0
    8456:	d01f      	beq.n	8498 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    8458:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    845c:	4640      	mov	r0, r8
    845e:	f003 f889 	bl	b574 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8462:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8466:	4401      	add	r1, r0
    8468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    846c:	fbb1 f0f0 	udiv	r0, r1, r0
    8470:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    8474:	4408      	add	r0, r1
    8476:	e001      	b.n	847c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3dc>
    8478:	e02b      	b.n	84d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    847a:	e047      	b.n	850c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    847c:	6a22      	ldr	r2, [r4, #32]
    847e:	f8d4 1244 	ldr.w	r1, [r4, #580]	; 0x244
    8482:	4411      	add	r1, r2
    8484:	1a0e      	subs	r6, r1, r0
    8486:	4640      	mov	r0, r8
    8488:	f003 f848 	bl	b51c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    848c:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    8490:	1a08      	subs	r0, r1, r0
    8492:	4406      	add	r6, r0
    8494:	3e20      	subs	r6, #32
    8496:	e006      	b.n	84a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x406>
    8498:	6a21      	ldr	r1, [r4, #32]
    849a:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
    849e:	4408      	add	r0, r1
    84a0:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    84a4:	1a46      	subs	r6, r0, r1
    84a6:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    84aa:	f8d4 1240 	ldr.w	r1, [r4, #576]	; 0x240
    84ae:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    84b2:	fb01 0002 	mla	r0, r1, r2, r0
    84b6:	0040      	lsls	r0, r0, #1
    84b8:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    84ba:	3060      	adds	r0, #96	; 0x60
    84bc:	4401      	add	r1, r0
    84be:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    84c2:	f006 fc89 	bl	edd8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    84c6:	f8cb 0014 	str.w	r0, [fp, #20]
    84ca:	2001      	movs	r0, #1
    84cc:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    84d0:	e061      	b.n	8596 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    84d2:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    84d6:	6920      	ldr	r0, [r4, #16]
    84d8:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    84dc:	1a86      	subs	r6, r0, r2
    84de:	eb01 000a 	add.w	r0, r1, sl
    84e2:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
    84e6:	f8d4 c240 	ldr.w	ip, [r4, #576]	; 0x240
    84ea:	1a40      	subs	r0, r0, r1
    84ec:	f8d4 3250 	ldr.w	r3, [r4, #592]	; 0x250
    84f0:	1e40      	subs	r0, r0, #1
    84f2:	fb0c 3101 	mla	r1, ip, r1, r3
    84f6:	fb00 1002 	mla	r0, r0, r2, r1
    84fa:	0040      	lsls	r0, r0, #1
    84fc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    84fe:	3060      	adds	r0, #96	; 0x60
    8500:	4401      	add	r1, r0
    8502:	fb06 f608 	mul.w	r6, r6, r8
    8506:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    850a:	e040      	b.n	858e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    850c:	6920      	ldr	r0, [r4, #16]
    850e:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8512:	fb00 f008 	mul.w	r0, r0, r8
    8516:	fb08 0611 	mls	r6, r8, r1, r0
    851a:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
    851e:	2826      	cmp	r0, #38	; 0x26
    8520:	d003      	beq.n	852a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    8522:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    8526:	2826      	cmp	r0, #38	; 0x26
    8528:	d109      	bne.n	853e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    852a:	f8b4 02bc 	ldrh.w	r0, [r4, #700]	; 0x2bc
    852e:	1a38      	subs	r0, r7, r0
    8530:	b200      	sxth	r0, r0
    8532:	2800      	cmp	r0, #0
    8534:	db03      	blt.n	853e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8536:	f894 02bf 	ldrb.w	r0, [r4, #703]	; 0x2bf
    853a:	b100      	cbz	r0, 853e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    853c:	9005      	str	r0, [sp, #20]
    853e:	9807      	ldr	r0, [sp, #28]
    8540:	b1d8      	cbz	r0, 857a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    8542:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
    8546:	b9c0      	cbnz	r0, 857a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    8548:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    854c:	2800      	cmp	r0, #0
    854e:	d07d      	beq.n	864c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    8550:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8554:	f003 f80e 	bl	b574 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8558:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    855c:	4401      	add	r1, r0
    855e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8562:	fbb1 f0f0 	udiv	r0, r1, r0
    8566:	1a36      	subs	r6, r6, r0
    8568:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    856c:	f002 ffd6 	bl	b51c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8570:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    8574:	1a08      	subs	r0, r1, r0
    8576:	4406      	add	r6, r0
    8578:	3e20      	subs	r6, #32
    857a:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
    857e:	eb01 000a 	add.w	r0, r1, sl
    8582:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    8586:	4348      	muls	r0, r1
    8588:	0041      	lsls	r1, r0, #1
    858a:	3160      	adds	r1, #96	; 0x60
    858c:	9805      	ldr	r0, [sp, #20]
    858e:	f006 fc23 	bl	edd8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    8592:	f8cb 0014 	str.w	r0, [fp, #20]
    8596:	9804      	ldr	r0, [sp, #16]
    8598:	f8db 2014 	ldr.w	r2, [fp, #20]
    859c:	1a31      	subs	r1, r6, r0
    859e:	f8d4 6254 	ldr.w	r6, [r4, #596]	; 0x254
    85a2:	6920      	ldr	r0, [r4, #16]
    85a4:	1b80      	subs	r0, r0, r6
    85a6:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    85aa:	f8cb 0018 	str.w	r0, [fp, #24]
    85ae:	4282      	cmp	r2, r0
    85b0:	d800      	bhi.n	85b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    85b2:	4610      	mov	r0, r2
    85b4:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
    85b8:	2600      	movs	r6, #0
    85ba:	702e      	strb	r6, [r5, #0]
    85bc:	2064      	movs	r0, #100	; 0x64
    85be:	8128      	strh	r0, [r5, #8]
    85c0:	e9d4 20a2 	ldrd	r2, r0, [r4, #648]	; 0x288
    85c4:	1851      	adds	r1, r2, r1
    85c6:	4170      	adcs	r0, r6
    85c8:	e9c5 1004 	strd	r1, r0, [r5, #16]
    85cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    85d0:	f005 fe98 	bl	e304 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    85d4:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
    85d8:	4408      	add	r0, r1
    85da:	6068      	str	r0, [r5, #4]
    85dc:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    85e0:	e9c4 01a2 	strd	r0, r1, [r4, #648]	; 0x288
    85e4:	f8a4 7290 	strh.w	r7, [r4, #656]	; 0x290
    85e8:	72ae      	strb	r6, [r5, #10]
    85ea:	f8b4 0210 	ldrh.w	r0, [r4, #528]	; 0x210
    85ee:	1bc0      	subs	r0, r0, r7
    85f0:	b200      	sxth	r0, r0
    85f2:	2800      	cmp	r0, #0
    85f4:	dd01      	ble.n	85fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    85f6:	2002      	movs	r0, #2
    85f8:	72a8      	strb	r0, [r5, #10]
    85fa:	9808      	ldr	r0, [sp, #32]
    85fc:	b338      	cbz	r0, 864e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    85fe:	f1b9 0f00 	cmp.w	r9, #0
    8602:	d01c      	beq.n	863e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    8604:	f8b4 1238 	ldrh.w	r1, [r4, #568]	; 0x238
    8608:	b3f1      	cbz	r1, 8688 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5e8>
    860a:	f8b4 023a 	ldrh.w	r0, [r4, #570]	; 0x23a
    860e:	bf00      	nop
    8610:	f8a4 023a 	strh.w	r0, [r4, #570]	; 0x23a
    8614:	f894 223c 	ldrb.w	r2, [r4, #572]	; 0x23c
    8618:	1c40      	adds	r0, r0, #1
    861a:	4342      	muls	r2, r0
    861c:	428a      	cmp	r2, r1
    861e:	d20e      	bcs.n	863e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    8620:	7aa8      	ldrb	r0, [r5, #10]
    8622:	b160      	cbz	r0, 863e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    8624:	72ae      	strb	r6, [r5, #10]
    8626:	f8b4 023a 	ldrh.w	r0, [r4, #570]	; 0x23a
    862a:	1c40      	adds	r0, r0, #1
    862c:	f8a4 023a 	strh.w	r0, [r4, #570]	; 0x23a
    8630:	f7fe fc46 	bl	6ec0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    8634:	f000 0007 	and.w	r0, r0, #7
    8638:	1c40      	adds	r0, r0, #1
    863a:	f884 023c 	strb.w	r0, [r4, #572]	; 0x23c
    863e:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    8642:	4629      	mov	r1, r5
    8644:	f006 fbda 	bl	edfc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    8648:	b340      	cbz	r0, 869c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    864a:	e001      	b.n	8650 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    864c:	e009      	b.n	8662 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    864e:	e00b      	b.n	8668 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    8650:	980d      	ldr	r0, [sp, #52]	; 0x34
    8652:	f080 0001 	eor.w	r0, r0, #1
    8656:	f884 0260 	strb.w	r0, [r4, #608]	; 0x260
    865a:	2000      	movs	r0, #0
    865c:	b00f      	add	sp, #60	; 0x3c
    865e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8662:	f240 5131 	movw	r1, #1329	; 0x531
    8666:	e01b      	b.n	86a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8668:	f1b9 0f00 	cmp.w	r9, #0
    866c:	d1ca      	bne.n	8604 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    866e:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    8672:	2800      	cmp	r0, #0
    8674:	d0e3      	beq.n	863e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    8676:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    867a:	6920      	ldr	r0, [r4, #16]
    867c:	1a41      	subs	r1, r0, r1
    867e:	4628      	mov	r0, r5
    8680:	f005 fa5e 	bl	db40 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8684:	0400      	lsls	r0, r0, #16
    8686:	e000      	b.n	868a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ea>
    8688:	e006      	b.n	8698 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    868a:	0c00      	lsrs	r0, r0, #16
    868c:	d0d7      	beq.n	863e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    868e:	9918      	ldr	r1, [sp, #96]	; 0x60
    8690:	b101      	cbz	r1, 8694 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f4>
    8692:	8008      	strh	r0, [r1, #0]
    8694:	2001      	movs	r0, #1
    8696:	e7e1      	b.n	865c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5bc>
    8698:	2000      	movs	r0, #0
    869a:	e7b9      	b.n	8610 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    869c:	f240 518f 	movw	r1, #1423	; 0x58f
    86a0:	2030      	movs	r0, #48	; 0x30
    86a2:	f7fc fa03 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86a6:	0000      	.short	0x0000
    86a8:	20000140 	.word	0x20000140
    86ac:	b570      	push	{r4, r5, r6, lr}
    86ae:	4604      	mov	r4, r0
    86b0:	f003 fdee 	bl	c290 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    86b4:	2864      	cmp	r0, #100	; 0x64
    86b6:	d901      	bls.n	86bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>
    86b8:	4605      	mov	r5, r0
    86ba:	e000      	b.n	86be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61e>
    86bc:	2564      	movs	r5, #100	; 0x64
    86be:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    86c2:	2128      	movs	r1, #40	; 0x28
    86c4:	f006 faa6 	bl	ec14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    86c8:	4428      	add	r0, r5
    86ca:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    86ce:	f500 7010 	add.w	r0, r0, #576	; 0x240
    86d2:	180e      	adds	r6, r1, r0
    86d4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    86d8:	2128      	movs	r1, #40	; 0x28
    86da:	f006 fa9b 	bl	ec14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    86de:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    86e2:	4620      	mov	r0, r4
    86e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    86e6:	f005 fdac 	bl	e242 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    86ea:	4605      	mov	r5, r0
    86ec:	4632      	mov	r2, r6
    86ee:	4620      	mov	r0, r4
    86f0:	6921      	ldr	r1, [r4, #16]
    86f2:	f005 fda6 	bl	e242 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    86f6:	4907      	ldr	r1, [pc, #28]	; (8714 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x674>)
    86f8:	4285      	cmp	r5, r0
    86fa:	60c8      	str	r0, [r1, #12]
    86fc:	d200      	bcs.n	8700 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x660>
    86fe:	4628      	mov	r0, r5
    8700:	6088      	str	r0, [r1, #8]
    8702:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    8706:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    870a:	6108      	str	r0, [r1, #16]
    870c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8710:	f7fa bd18 	b.w	3144 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8714:	20000140 	.word	0x20000140
    8718:	00000000 	.word	0x00000000
    871c:	00010000 	.word	0x00010000
    8720:	00000000 	.word	0x00000000
    8724:	00010000 	.word	0x00010000
    8728:	00000000 	.word	0x00000000
    872c:	00001e14 	.word	0x00001e14
    8730:	00001130 	.word	0x00001130
    8734:	00fa01f4 	.word	0x00fa01f4
    8738:	00640096 	.word	0x00640096
    873c:	0032004b 	.word	0x0032004b
    8740:	0014001e 	.word	0x0014001e
    8744:	0005000a 	.word	0x0005000a
    8748:	00010002 	.word	0x00010002

0000874c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    874c:	4806      	ldr	r0, [pc, #24]	; (8768 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    874e:	4905      	ldr	r1, [pc, #20]	; (8764 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8750:	6501      	str	r1, [r0, #80]	; 0x50
    8752:	4906      	ldr	r1, [pc, #24]	; (876c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8754:	6541      	str	r1, [r0, #84]	; 0x54
    8756:	4807      	ldr	r0, [pc, #28]	; (8774 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8758:	4905      	ldr	r1, [pc, #20]	; (8770 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    875a:	6501      	str	r1, [r0, #80]	; 0x50
    875c:	4906      	ldr	r1, [pc, #24]	; (8778 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    875e:	6541      	str	r1, [r0, #84]	; 0x54
    8760:	4770      	bx	lr
    8762:	0000      	.short	0x0000
    8764:	00009ae1 	.word	0x00009ae1
    8768:	20000174 	.word	0x20000174
    876c:	00009bc5 	.word	0x00009bc5
    8770:	0000f4f9 	.word	0x0000f4f9
    8774:	20000220 	.word	0x20000220
    8778:	0000f523 	.word	0x0000f523

0000877c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    877c:	481e      	ldr	r0, [pc, #120]	; (87f8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    877e:	491d      	ldr	r1, [pc, #116]	; (87f4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8780:	6081      	str	r1, [r0, #8]
    8782:	491e      	ldr	r1, [pc, #120]	; (87fc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8784:	6041      	str	r1, [r0, #4]
    8786:	491e      	ldr	r1, [pc, #120]	; (8800 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8788:	6001      	str	r1, [r0, #0]
    878a:	491e      	ldr	r1, [pc, #120]	; (8804 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    878c:	6281      	str	r1, [r0, #40]	; 0x28
    878e:	491e      	ldr	r1, [pc, #120]	; (8808 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8790:	62c1      	str	r1, [r0, #44]	; 0x2c
    8792:	491e      	ldr	r1, [pc, #120]	; (880c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8794:	60c1      	str	r1, [r0, #12]
    8796:	491e      	ldr	r1, [pc, #120]	; (8810 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8798:	6181      	str	r1, [r0, #24]
    879a:	491e      	ldr	r1, [pc, #120]	; (8814 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    879c:	6301      	str	r1, [r0, #48]	; 0x30
    879e:	491e      	ldr	r1, [pc, #120]	; (8818 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    87a0:	6201      	str	r1, [r0, #32]
    87a2:	491e      	ldr	r1, [pc, #120]	; (881c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    87a4:	64c1      	str	r1, [r0, #76]	; 0x4c
    87a6:	491e      	ldr	r1, [pc, #120]	; (8820 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    87a8:	6481      	str	r1, [r0, #72]	; 0x48
    87aa:	491e      	ldr	r1, [pc, #120]	; (8824 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    87ac:	6441      	str	r1, [r0, #68]	; 0x44
    87ae:	491e      	ldr	r1, [pc, #120]	; (8828 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    87b0:	6341      	str	r1, [r0, #52]	; 0x34
    87b2:	491e      	ldr	r1, [pc, #120]	; (882c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    87b4:	61c1      	str	r1, [r0, #28]
    87b6:	491e      	ldr	r1, [pc, #120]	; (8830 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    87b8:	6241      	str	r1, [r0, #36]	; 0x24
    87ba:	481f      	ldr	r0, [pc, #124]	; (8838 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    87bc:	491d      	ldr	r1, [pc, #116]	; (8834 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    87be:	6081      	str	r1, [r0, #8]
    87c0:	491e      	ldr	r1, [pc, #120]	; (883c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    87c2:	61c1      	str	r1, [r0, #28]
    87c4:	491e      	ldr	r1, [pc, #120]	; (8840 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    87c6:	6241      	str	r1, [r0, #36]	; 0x24
    87c8:	491e      	ldr	r1, [pc, #120]	; (8844 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    87ca:	62c1      	str	r1, [r0, #44]	; 0x2c
    87cc:	491e      	ldr	r1, [pc, #120]	; (8848 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    87ce:	6101      	str	r1, [r0, #16]
    87d0:	491e      	ldr	r1, [pc, #120]	; (884c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    87d2:	6141      	str	r1, [r0, #20]
    87d4:	491e      	ldr	r1, [pc, #120]	; (8850 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    87d6:	6441      	str	r1, [r0, #68]	; 0x44
    87d8:	491e      	ldr	r1, [pc, #120]	; (8854 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    87da:	6341      	str	r1, [r0, #52]	; 0x34
    87dc:	491e      	ldr	r1, [pc, #120]	; (8858 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    87de:	6181      	str	r1, [r0, #24]
    87e0:	491e      	ldr	r1, [pc, #120]	; (885c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    87e2:	6301      	str	r1, [r0, #48]	; 0x30
    87e4:	491e      	ldr	r1, [pc, #120]	; (8860 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    87e6:	6481      	str	r1, [r0, #72]	; 0x48
    87e8:	491e      	ldr	r1, [pc, #120]	; (8864 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    87ea:	64c1      	str	r1, [r0, #76]	; 0x4c
    87ec:	491e      	ldr	r1, [pc, #120]	; (8868 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    87ee:	6381      	str	r1, [r0, #56]	; 0x38
    87f0:	4770      	bx	lr
    87f2:	0000      	.short	0x0000
    87f4:	00009ec9 	.word	0x00009ec9
    87f8:	20000174 	.word	0x20000174
    87fc:	000098bd 	.word	0x000098bd
    8800:	00009925 	.word	0x00009925
    8804:	0000f3bb 	.word	0x0000f3bb
    8808:	0000f405 	.word	0x0000f405
    880c:	000099e1 	.word	0x000099e1
    8810:	0000f41d 	.word	0x0000f41d
    8814:	00009ff9 	.word	0x00009ff9
    8818:	00009a99 	.word	0x00009a99
    881c:	0000f38d 	.word	0x0000f38d
    8820:	0000f367 	.word	0x0000f367
    8824:	00009e69 	.word	0x00009e69
    8828:	00009e99 	.word	0x00009e99
    882c:	00009f01 	.word	0x00009f01
    8830:	00009aa5 	.word	0x00009aa5
    8834:	0000f6ef 	.word	0x0000f6ef
    8838:	20000220 	.word	0x20000220
    883c:	0000a109 	.word	0x0000a109
    8840:	0000f4f5 	.word	0x0000f4f5
    8844:	0000f58d 	.word	0x0000f58d
    8848:	0000f4cf 	.word	0x0000f4cf
    884c:	0000f64f 	.word	0x0000f64f
    8850:	0000f5fd 	.word	0x0000f5fd
    8854:	0000f62d 	.word	0x0000f62d
    8858:	0000f66d 	.word	0x0000f66d
    885c:	0000f711 	.word	0x0000f711
    8860:	0000f553 	.word	0x0000f553
    8864:	0000f57d 	.word	0x0000f57d
    8868:	0000f64b 	.word	0x0000f64b

0000886c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    886c:	4806      	ldr	r0, [pc, #24]	; (8888 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    886e:	4905      	ldr	r1, [pc, #20]	; (8884 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8870:	6581      	str	r1, [r0, #88]	; 0x58
    8872:	4906      	ldr	r1, [pc, #24]	; (888c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8874:	6601      	str	r1, [r0, #96]	; 0x60
    8876:	4807      	ldr	r0, [pc, #28]	; (8894 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8878:	4905      	ldr	r1, [pc, #20]	; (8890 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    887a:	6581      	str	r1, [r0, #88]	; 0x58
    887c:	4906      	ldr	r1, [pc, #24]	; (8898 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    887e:	65c1      	str	r1, [r0, #92]	; 0x5c
    8880:	4770      	bx	lr
    8882:	0000      	.short	0x0000
    8884:	00009c3d 	.word	0x00009c3d
    8888:	20000174 	.word	0x20000174
    888c:	00009d19 	.word	0x00009d19
    8890:	0000f5b3 	.word	0x0000f5b3
    8894:	20000220 	.word	0x20000220
    8898:	0000f5dd 	.word	0x0000f5dd

0000889c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    889e:	4c7c      	ldr	r4, [pc, #496]	; (8a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    88a0:	2101      	movs	r1, #1
    88a2:	f1a4 0610 	sub.w	r6, r4, #16
    88a6:	7021      	strb	r1, [r4, #0]
    88a8:	2500      	movs	r5, #0
    88aa:	6060      	str	r0, [r4, #4]
    88ac:	8075      	strh	r5, [r6, #2]
    88ae:	7075      	strb	r5, [r6, #1]
    88b0:	7035      	strb	r5, [r6, #0]
    88b2:	f880 121b 	strb.w	r1, [r0, #539]	; 0x21b
    88b6:	8800      	ldrh	r0, [r0, #0]
    88b8:	f7fc fd06 	bl	52c8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    88bc:	b180      	cbz	r0, 88e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    88be:	6860      	ldr	r0, [r4, #4]
    88c0:	8800      	ldrh	r0, [r0, #0]
    88c2:	f7fc ff6b 	bl	579c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    88c6:	6860      	ldr	r0, [r4, #4]
    88c8:	8800      	ldrh	r0, [r0, #0]
    88ca:	f7fc ff0f 	bl	56ec <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    88ce:	6860      	ldr	r0, [r4, #4]
    88d0:	f8b0 1212 	ldrh.w	r1, [r0, #530]	; 0x212
    88d4:	b1c9      	cbz	r1, 890a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    88d6:	3080      	adds	r0, #128	; 0x80
    88d8:	f006 fcfc 	bl	f2d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    88dc:	b118      	cbz	r0, 88e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    88de:	e014      	b.n	890a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    88e0:	f640 41dc 	movw	r1, #3292	; 0xcdc
    88e4:	e06c      	b.n	89c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    88e6:	6860      	ldr	r0, [r4, #4]
    88e8:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    88ec:	f88d 1000 	strb.w	r1, [sp]
    88f0:	9900      	ldr	r1, [sp, #0]
    88f2:	9100      	str	r1, [sp, #0]
    88f4:	f89d 1000 	ldrb.w	r1, [sp]
    88f8:	b139      	cbz	r1, 890a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    88fa:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    88fe:	2301      	movs	r3, #1
    8900:	4619      	mov	r1, r3
    8902:	3080      	adds	r0, #128	; 0x80
    8904:	f005 f852 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8908:	b180      	cbz	r0, 892c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    890a:	6860      	ldr	r0, [r4, #4]
    890c:	3080      	adds	r0, #128	; 0x80
    890e:	f006 fce1 	bl	f2d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8912:	b128      	cbz	r0, 8920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    8914:	6860      	ldr	r0, [r4, #4]
    8916:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    891a:	bf00      	nop
    891c:	f000 fbbc 	bl	9098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fc>
    8920:	6860      	ldr	r0, [r4, #4]
    8922:	f890 121d 	ldrb.w	r1, [r0, #541]	; 0x21d
    8926:	b189      	cbz	r1, 894c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    8928:	80b5      	strh	r5, [r6, #4]
    892a:	e01e      	b.n	896a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    892c:	6860      	ldr	r0, [r4, #4]
    892e:	f8a0 50c8 	strh.w	r5, [r0, #200]	; 0xc8
    8932:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    8936:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    893a:	2100      	movs	r1, #0
    893c:	2002      	movs	r0, #2
    893e:	f000 fe69 	bl	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8942:	6860      	ldr	r0, [r4, #4]
    8944:	f880 521a 	strb.w	r5, [r0, #538]	; 0x21a
    8948:	2002      	movs	r0, #2
    894a:	e7e7      	b.n	891c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    894c:	f890 11c2 	ldrb.w	r1, [r0, #450]	; 0x1c2
    8950:	f88d 1000 	strb.w	r1, [sp]
    8954:	9900      	ldr	r1, [sp, #0]
    8956:	9100      	str	r1, [sp, #0]
    8958:	f89d 1000 	ldrb.w	r1, [sp]
    895c:	b919      	cbnz	r1, 8966 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    895e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    8960:	8b02      	ldrh	r2, [r0, #24]
    8962:	4291      	cmp	r1, r2
    8964:	d800      	bhi.n	8968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    8966:	8b01      	ldrh	r1, [r0, #24]
    8968:	80b1      	strh	r1, [r6, #4]
    896a:	f8b0 1216 	ldrh.w	r1, [r0, #534]	; 0x216
    896e:	1e49      	subs	r1, r1, #1
    8970:	b28f      	uxth	r7, r1
    8972:	f8b0 1218 	ldrh.w	r1, [r0, #536]	; 0x218
    8976:	4439      	add	r1, r7
    8978:	f8a0 1218 	strh.w	r1, [r0, #536]	; 0x218
    897c:	f830 1fc4 	ldrh.w	r1, [r0, #196]!
    8980:	4439      	add	r1, r7
    8982:	8001      	strh	r1, [r0, #0]
    8984:	f001 fbee 	bl	a164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    8988:	b120      	cbz	r0, 8994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    898a:	6860      	ldr	r0, [r4, #4]
    898c:	f850 1fb8 	ldr.w	r1, [r0, #184]!
    8990:	4439      	add	r1, r7
    8992:	6001      	str	r1, [r0, #0]
    8994:	6861      	ldr	r1, [r4, #4]
    8996:	f8b1 0212 	ldrh.w	r0, [r1, #530]	; 0x212
    899a:	2801      	cmp	r0, #1
    899c:	d802      	bhi.n	89a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    899e:	1c40      	adds	r0, r0, #1
    89a0:	f8a1 0212 	strh.w	r0, [r1, #530]	; 0x212
    89a4:	b10f      	cbz	r7, 89aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    89a6:	f881 5224 	strb.w	r5, [r1, #548]	; 0x224
    89aa:	f881 521a 	strb.w	r5, [r1, #538]	; 0x21a
    89ae:	f8b1 2216 	ldrh.w	r2, [r1, #534]	; 0x216
    89b2:	f101 0080 	add.w	r0, r1, #128	; 0x80
    89b6:	f005 f970 	bl	dc9a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    89ba:	b120      	cbz	r0, 89c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    89bc:	f640 5123 	movw	r1, #3363	; 0xd23
    89c0:	2031      	movs	r0, #49	; 0x31
    89c2:	f7fc f873 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89c6:	6860      	ldr	r0, [r4, #4]
    89c8:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    89cc:	290b      	cmp	r1, #11
    89ce:	d001      	beq.n	89d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    89d0:	290c      	cmp	r1, #12
    89d2:	d119      	bne.n	8a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    89d4:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
    89d8:	f8b0 32bc 	ldrh.w	r3, [r0, #700]	; 0x2bc
    89dc:	1ad2      	subs	r2, r2, r3
    89de:	b212      	sxth	r2, r2
    89e0:	2a00      	cmp	r2, #0
    89e2:	db11      	blt.n	8a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    89e4:	f8d0 12be 	ldr.w	r1, [r0, #702]	; 0x2be
    89e8:	f8c0 109e 	str.w	r1, [r0, #158]	; 0x9e
    89ec:	f890 12c2 	ldrb.w	r1, [r0, #706]	; 0x2c2
    89f0:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    89f4:	2103      	movs	r1, #3
    89f6:	f7fd fe51 	bl	669c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    89fa:	6860      	ldr	r0, [r4, #4]
    89fc:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    8a00:	21ff      	movs	r1, #255	; 0xff
    8a02:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    8a06:	e026      	b.n	8a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8a08:	2926      	cmp	r1, #38	; 0x26
    8a0a:	d111      	bne.n	8a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8a0c:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    8a10:	f8b0 22bc 	ldrh.w	r2, [r0, #700]	; 0x2bc
    8a14:	1a89      	subs	r1, r1, r2
    8a16:	b209      	sxth	r1, r1
    8a18:	2900      	cmp	r1, #0
    8a1a:	db09      	blt.n	8a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8a1c:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    8a20:	f000 feb2 	bl	9788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeec>
    8a24:	2800      	cmp	r0, #0
    8a26:	6860      	ldr	r0, [r4, #4]
    8a28:	f880 5134 	strb.w	r5, [r0, #308]	; 0x134
    8a2c:	d029      	beq.n	8a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8a2e:	e012      	b.n	8a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8a30:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8a34:	2926      	cmp	r1, #38	; 0x26
    8a36:	d001      	beq.n	8a3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    8a38:	2928      	cmp	r1, #40	; 0x28
    8a3a:	d10c      	bne.n	8a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8a3c:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    8a40:	f8b0 22bc 	ldrh.w	r2, [r0, #700]	; 0x2bc
    8a44:	1a89      	subs	r1, r1, r2
    8a46:	b209      	sxth	r1, r1
    8a48:	2900      	cmp	r1, #0
    8a4a:	db04      	blt.n	8a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8a4c:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
    8a50:	f000 fe9a 	bl	9788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeec>
    8a54:	b1a8      	cbz	r0, 8a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8a56:	480f      	ldr	r0, [pc, #60]	; (8a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    8a58:	9000      	str	r0, [sp, #0]
    8a5a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    8a5e:	4b0e      	ldr	r3, [pc, #56]	; (8a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8a60:	4a0e      	ldr	r2, [pc, #56]	; (8a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8a62:	f7fc ff27 	bl	58b4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8a66:	6860      	ldr	r0, [r4, #4]
    8a68:	2301      	movs	r3, #1
    8a6a:	2105      	movs	r1, #5
    8a6c:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8a70:	3080      	adds	r0, #128	; 0x80
    8a72:	f004 ff9b 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8a76:	2800      	cmp	r0, #0
    8a78:	d009      	beq.n	8a8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    8a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8a7e:	f7fc bf13 	b.w	58a8 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8a82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8a86:	2100      	movs	r1, #0
    8a88:	4608      	mov	r0, r1
    8a8a:	f000 bbd1 	b.w	9230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x994>
    8a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a90:	2000016c 	.word	0x2000016c
    8a94:	00009231 	.word	0x00009231
    8a98:	00008d55 	.word	0x00008d55
    8a9c:	000096d5 	.word	0x000096d5
    8aa0:	4804      	ldr	r0, [pc, #16]	; (8ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    8aa2:	2100      	movs	r1, #0
    8aa4:	6840      	ldr	r0, [r0, #4]
    8aa6:	f820 1fd0 	strh.w	r1, [r0, #208]!
    8aaa:	7881      	ldrb	r1, [r0, #2]
    8aac:	1c49      	adds	r1, r1, #1
    8aae:	7081      	strb	r1, [r0, #2]
    8ab0:	4770      	bx	lr
    8ab2:	0000      	.short	0x0000
    8ab4:	2000016c 	.word	0x2000016c
    8ab8:	4807      	ldr	r0, [pc, #28]	; (8ad8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    8aba:	b510      	push	{r4, lr}
    8abc:	6841      	ldr	r1, [r0, #4]
    8abe:	f811 0fd2 	ldrb.w	r0, [r1, #210]!
    8ac2:	1e40      	subs	r0, r0, #1
    8ac4:	b240      	sxtb	r0, r0
    8ac6:	7008      	strb	r0, [r1, #0]
    8ac8:	2800      	cmp	r0, #0
    8aca:	da04      	bge.n	8ad6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    8acc:	f240 11f3 	movw	r1, #499	; 0x1f3
    8ad0:	2031      	movs	r0, #49	; 0x31
    8ad2:	f7fb ffeb 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ad6:	bd10      	pop	{r4, pc}
    8ad8:	2000016c 	.word	0x2000016c
    8adc:	491d      	ldr	r1, [pc, #116]	; (8b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    8ade:	b508      	push	{r3, lr}
    8ae0:	6849      	ldr	r1, [r1, #4]
    8ae2:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    8ae6:	b1c0      	cbz	r0, 8b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    8ae8:	2a12      	cmp	r2, #18
    8aea:	d006      	beq.n	8afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    8aec:	2a16      	cmp	r2, #22
    8aee:	d007      	beq.n	8b00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    8af0:	2a17      	cmp	r2, #23
    8af2:	d009      	beq.n	8b08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26c>
    8af4:	2a1d      	cmp	r2, #29
    8af6:	d128      	bne.n	8b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    8af8:	e009      	b.n	8b0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    8afa:	2101      	movs	r1, #1
    8afc:	200b      	movs	r0, #11
    8afe:	e008      	b.n	8b12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    8b00:	4814      	ldr	r0, [pc, #80]	; (8b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    8b02:	f006 fc9c 	bl	f43e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    8b06:	e006      	b.n	8b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    8b08:	f000 fda2 	bl	9650 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb4>
    8b0c:	e003      	b.n	8b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    8b0e:	2101      	movs	r1, #1
    8b10:	2006      	movs	r0, #6
    8b12:	f000 fd7f 	bl	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8b16:	2001      	movs	r0, #1
    8b18:	bd08      	pop	{r3, pc}
    8b1a:	2a23      	cmp	r2, #35	; 0x23
    8b1c:	d004      	beq.n	8b28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    8b1e:	2a2f      	cmp	r2, #47	; 0x2f
    8b20:	d113      	bne.n	8b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    8b22:	2101      	movs	r1, #1
    8b24:	2011      	movs	r0, #17
    8b26:	e7f4      	b.n	8b12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    8b28:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    8b2c:	2802      	cmp	r0, #2
    8b2e:	d00e      	beq.n	8b4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    8b30:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    8b34:	2801      	cmp	r0, #1
    8b36:	d108      	bne.n	8b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    8b38:	f891 0135 	ldrb.w	r0, [r1, #309]	; 0x135
    8b3c:	f88d 0000 	strb.w	r0, [sp]
    8b40:	9800      	ldr	r0, [sp, #0]
    8b42:	9000      	str	r0, [sp, #0]
    8b44:	f89d 0000 	ldrb.w	r0, [sp]
    8b48:	b108      	cbz	r0, 8b4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    8b4a:	2000      	movs	r0, #0
    8b4c:	bd08      	pop	{r3, pc}
    8b4e:	2101      	movs	r1, #1
    8b50:	2017      	movs	r0, #23
    8b52:	e7de      	b.n	8b12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    8b54:	2000016c 	.word	0x2000016c
    8b58:	b538      	push	{r3, r4, r5, lr}
    8b5a:	2800      	cmp	r0, #0
    8b5c:	d172      	bne.n	8c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    8b5e:	4c3a      	ldr	r4, [pc, #232]	; (8c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ac>)
    8b60:	6860      	ldr	r0, [r4, #4]
    8b62:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    8b66:	07ca      	lsls	r2, r1, #31
    8b68:	d002      	beq.n	8b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    8b6a:	2101      	movs	r1, #1
    8b6c:	2009      	movs	r0, #9
    8b6e:	e065      	b.n	8c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8b70:	078a      	lsls	r2, r1, #30
    8b72:	d50a      	bpl.n	8b8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    8b74:	2101      	movs	r1, #1
    8b76:	200c      	movs	r0, #12
    8b78:	f000 fd4c 	bl	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8b7c:	6860      	ldr	r0, [r4, #4]
    8b7e:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    8b82:	f041 0101 	orr.w	r1, r1, #1
    8b86:	7001      	strb	r1, [r0, #0]
    8b88:	e05a      	b.n	8c40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a4>
    8b8a:	074a      	lsls	r2, r1, #29
    8b8c:	d502      	bpl.n	8b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    8b8e:	2101      	movs	r1, #1
    8b90:	2013      	movs	r0, #19
    8b92:	e053      	b.n	8c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8b94:	070a      	lsls	r2, r1, #28
    8b96:	d506      	bpl.n	8ba6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    8b98:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
    8b9c:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    8ba0:	2101      	movs	r1, #1
    8ba2:	2007      	movs	r0, #7
    8ba4:	e04a      	b.n	8c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8ba6:	f011 0f30 	tst.w	r1, #48	; 0x30
    8baa:	d043      	beq.n	8c34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x398>
    8bac:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    8bb0:	f88d 1000 	strb.w	r1, [sp]
    8bb4:	9900      	ldr	r1, [sp, #0]
    8bb6:	9100      	str	r1, [sp, #0]
    8bb8:	f89d 1000 	ldrb.w	r1, [sp]
    8bbc:	bbb9      	cbnz	r1, 8c2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x392>
    8bbe:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    8bc2:	2500      	movs	r5, #0
    8bc4:	f88d 1000 	strb.w	r1, [sp]
    8bc8:	9900      	ldr	r1, [sp, #0]
    8bca:	9100      	str	r1, [sp, #0]
    8bcc:	f89d 1000 	ldrb.w	r1, [sp]
    8bd0:	b1c1      	cbz	r1, 8c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    8bd2:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8bd6:	2926      	cmp	r1, #38	; 0x26
    8bd8:	d02a      	beq.n	8c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    8bda:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8bde:	2926      	cmp	r1, #38	; 0x26
    8be0:	d026      	beq.n	8c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x394>
    8be2:	2300      	movs	r3, #0
    8be4:	f200 22be 	addw	r2, r0, #702	; 0x2be
    8be8:	f500 7195 	add.w	r1, r0, #298	; 0x12a
    8bec:	f005 fb1b 	bl	e226 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8bf0:	6860      	ldr	r0, [r4, #4]
    8bf2:	f850 1f84 	ldr.w	r1, [r0, #132]!
    8bf6:	f021 0120 	bic.w	r1, r1, #32
    8bfa:	f041 0110 	orr.w	r1, r1, #16
    8bfe:	6001      	str	r1, [r0, #0]
    8c00:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    8c04:	6860      	ldr	r0, [r4, #4]
    8c06:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    8c0a:	06c9      	lsls	r1, r1, #27
    8c0c:	d51a      	bpl.n	8c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    8c0e:	f005 fb25 	bl	e25c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8c12:	f000 f925 	bl	8e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    8c16:	6861      	ldr	r1, [r4, #4]
    8c18:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8c1c:	8bc2      	ldrh	r2, [r0, #30]
    8c1e:	f8a1 211e 	strh.w	r2, [r1, #286]	; 0x11e
    8c22:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8c24:	f8a1 0120 	strh.w	r0, [r1, #288]	; 0x120
    8c28:	2101      	movs	r1, #1
    8c2a:	2015      	movs	r0, #21
    8c2c:	e006      	b.n	8c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    8c2e:	e009      	b.n	8c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    8c30:	2301      	movs	r3, #1
    8c32:	e7d7      	b.n	8be4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    8c34:	0648      	lsls	r0, r1, #25
    8c36:	d505      	bpl.n	8c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    8c38:	2101      	movs	r1, #1
    8c3a:	2024      	movs	r0, #36	; 0x24
    8c3c:	f000 fcea 	bl	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8c40:	2001      	movs	r0, #1
    8c42:	bd38      	pop	{r3, r4, r5, pc}
    8c44:	2000      	movs	r0, #0
    8c46:	bd38      	pop	{r3, r4, r5, pc}
    8c48:	2000016c 	.word	0x2000016c
    8c4c:	b570      	push	{r4, r5, r6, lr}
    8c4e:	460d      	mov	r5, r1
    8c50:	4606      	mov	r6, r0
    8c52:	f005 f9a5 	bl	dfa0 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    8c56:	4604      	mov	r4, r0
    8c58:	4630      	mov	r0, r6
    8c5a:	f005 f9a3 	bl	dfa4 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    8c5e:	4629      	mov	r1, r5
    8c60:	f000 f81e 	bl	8ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x404>
    8c64:	b1b8      	cbz	r0, 8c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fa>
    8c66:	4620      	mov	r0, r4
    8c68:	f004 ff4a 	bl	db00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8c6c:	0001      	movs	r1, r0
    8c6e:	d00d      	beq.n	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    8c70:	480a      	ldr	r0, [pc, #40]	; (8c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x400>)
    8c72:	6840      	ldr	r0, [r0, #4]
    8c74:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    8c78:	428a      	cmp	r2, r1
    8c7a:	d007      	beq.n	8c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    8c7c:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    8c80:	2901      	cmp	r1, #1
    8c82:	d005      	beq.n	8c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f4>
    8c84:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8c88:	4220      	tst	r0, r4
    8c8a:	d004      	beq.n	8c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fa>
    8c8c:	2001      	movs	r0, #1
    8c8e:	bd70      	pop	{r4, r5, r6, pc}
    8c90:	f890 0137 	ldrb.w	r0, [r0, #311]	; 0x137
    8c94:	e7f8      	b.n	8c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ec>
    8c96:	2000      	movs	r0, #0
    8c98:	bd70      	pop	{r4, r5, r6, pc}
    8c9a:	0000      	.short	0x0000
    8c9c:	2000016c 	.word	0x2000016c
    8ca0:	b570      	push	{r4, r5, r6, lr}
    8ca2:	460d      	mov	r5, r1
    8ca4:	4604      	mov	r4, r0
    8ca6:	f004 ff2b 	bl	db00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8caa:	b350      	cbz	r0, 8d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    8cac:	4916      	ldr	r1, [pc, #88]	; (8d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46c>)
    8cae:	6849      	ldr	r1, [r1, #4]
    8cb0:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    8cb4:	4282      	cmp	r2, r0
    8cb6:	d024      	beq.n	8d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    8cb8:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
    8cbc:	2b01      	cmp	r3, #1
    8cbe:	d005      	beq.n	8ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>
    8cc0:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    8cc4:	4223      	tst	r3, r4
    8cc6:	d013      	beq.n	8cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>
    8cc8:	b11d      	cbz	r5, 8cd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x436>
    8cca:	e01a      	b.n	8d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    8ccc:	f891 3136 	ldrb.w	r3, [r1, #310]	; 0x136
    8cd0:	e7f8      	b.n	8cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    8cd2:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    8cd6:	4221      	tst	r1, r4
    8cd8:	d113      	bne.n	8d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    8cda:	b15a      	cbz	r2, 8cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
    8cdc:	2a04      	cmp	r2, #4
    8cde:	d00e      	beq.n	8cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    8ce0:	2804      	cmp	r0, #4
    8ce2:	d00c      	beq.n	8cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    8ce4:	2a08      	cmp	r2, #8
    8ce6:	d00a      	beq.n	8cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    8ce8:	2808      	cmp	r0, #8
    8cea:	d008      	beq.n	8cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    8cec:	4282      	cmp	r2, r0
    8cee:	d908      	bls.n	8d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    8cf0:	2000      	movs	r0, #0
    8cf2:	bd70      	pop	{r4, r5, r6, pc}
    8cf4:	f240 1193 	movw	r1, #403	; 0x193
    8cf8:	2006      	movs	r0, #6
    8cfa:	f7fb fed7 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cfe:	4282      	cmp	r2, r0
    8d00:	d3f6      	bcc.n	8cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x454>
    8d02:	2001      	movs	r0, #1
    8d04:	bd70      	pop	{r4, r5, r6, pc}
    8d06:	0000      	.short	0x0000
    8d08:	2000016c 	.word	0x2000016c
    8d0c:	b510      	push	{r4, lr}
    8d0e:	4c10      	ldr	r4, [pc, #64]	; (8d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b4>)
    8d10:	2301      	movs	r3, #1
    8d12:	2100      	movs	r1, #0
    8d14:	6860      	ldr	r0, [r4, #4]
    8d16:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    8d1a:	3080      	adds	r0, #128	; 0x80
    8d1c:	f004 fe46 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d20:	b140      	cbz	r0, 8d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x498>
    8d22:	6860      	ldr	r0, [r4, #4]
    8d24:	2301      	movs	r3, #1
    8d26:	2104      	movs	r1, #4
    8d28:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8d2c:	3080      	adds	r0, #128	; 0x80
    8d2e:	f004 fe3d 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d32:	b108      	cbz	r0, 8d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>
    8d34:	2000      	movs	r0, #0
    8d36:	bd10      	pop	{r4, pc}
    8d38:	6860      	ldr	r0, [r4, #4]
    8d3a:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
    8d3e:	2800      	cmp	r0, #0
    8d40:	d0f9      	beq.n	8d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    8d42:	2100      	movs	r1, #0
    8d44:	2012      	movs	r0, #18
    8d46:	f000 fc65 	bl	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8d4a:	2001      	movs	r0, #1
    8d4c:	bd10      	pop	{r4, pc}
    8d4e:	0000      	.short	0x0000
    8d50:	2000016c 	.word	0x2000016c
    8d54:	490d      	ldr	r1, [pc, #52]	; (8d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f0>)
    8d56:	4602      	mov	r2, r0
    8d58:	7848      	ldrb	r0, [r1, #1]
    8d5a:	b9a0      	cbnz	r0, 8d86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    8d5c:	f101 0010 	add.w	r0, r1, #16
    8d60:	6840      	ldr	r0, [r0, #4]
    8d62:	b142      	cbz	r2, 8d76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4da>
    8d64:	7889      	ldrb	r1, [r1, #2]
    8d66:	0709      	lsls	r1, r1, #28
    8d68:	d503      	bpl.n	8d72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d6>
    8d6a:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
    8d6e:	2808      	cmp	r0, #8
    8d70:	d009      	beq.n	8d86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    8d72:	2001      	movs	r0, #1
    8d74:	4770      	bx	lr
    8d76:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    8d7a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8d7c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    8d7e:	428a      	cmp	r2, r1
    8d80:	d801      	bhi.n	8d86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4ea>
    8d82:	f7ff b92d 	b.w	7fe0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    8d86:	2000      	movs	r0, #0
    8d88:	4770      	bx	lr
    8d8a:	0000      	.short	0x0000
    8d8c:	2000015c 	.word	0x2000015c
    8d90:	b538      	push	{r3, r4, r5, lr}
    8d92:	4c32      	ldr	r4, [pc, #200]	; (8e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c0>)
    8d94:	4605      	mov	r5, r0
    8d96:	6860      	ldr	r0, [r4, #4]
    8d98:	3080      	adds	r0, #128	; 0x80
    8d9a:	f006 fa9b 	bl	f2d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8d9e:	2800      	cmp	r0, #0
    8da0:	d15b      	bne.n	8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8da2:	2d00      	cmp	r5, #0
    8da4:	d159      	bne.n	8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8da6:	6860      	ldr	r0, [r4, #4]
    8da8:	2301      	movs	r3, #1
    8daa:	4619      	mov	r1, r3
    8dac:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    8db0:	3080      	adds	r0, #128	; 0x80
    8db2:	f004 fdfb 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8db6:	2800      	cmp	r0, #0
    8db8:	d14f      	bne.n	8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8dba:	6860      	ldr	r0, [r4, #4]
    8dbc:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    8dc0:	f88d 1000 	strb.w	r1, [sp]
    8dc4:	9900      	ldr	r1, [sp, #0]
    8dc6:	9100      	str	r1, [sp, #0]
    8dc8:	f89d 2000 	ldrb.w	r2, [sp]
    8dcc:	2100      	movs	r1, #0
    8dce:	b142      	cbz	r2, 8de2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x546>
    8dd0:	f8a0 10c8 	strh.w	r1, [r0, #200]	; 0xc8
    8dd4:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    8dd8:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    8ddc:	2100      	movs	r1, #0
    8dde:	2002      	movs	r0, #2
    8de0:	e030      	b.n	8e44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    8de2:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8de6:	2301      	movs	r3, #1
    8de8:	2104      	movs	r1, #4
    8dea:	3080      	adds	r0, #128	; 0x80
    8dec:	f004 fdde 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8df0:	4605      	mov	r5, r0
    8df2:	f7ff feb1 	bl	8b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    8df6:	2800      	cmp	r0, #0
    8df8:	d12f      	bne.n	8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8dfa:	4628      	mov	r0, r5
    8dfc:	f7ff fe6e 	bl	8adc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    8e00:	2800      	cmp	r0, #0
    8e02:	d12a      	bne.n	8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8e04:	f7ff ff82 	bl	8d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x470>
    8e08:	2800      	cmp	r0, #0
    8e0a:	d126      	bne.n	8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8e0c:	6860      	ldr	r0, [r4, #4]
    8e0e:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8e12:	290a      	cmp	r1, #10
    8e14:	d01a      	beq.n	8e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    8e16:	2d00      	cmp	r5, #0
    8e18:	d11f      	bne.n	8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8e1a:	f000 fb27 	bl	946c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd0>
    8e1e:	2800      	cmp	r0, #0
    8e20:	d11b      	bne.n	8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8e22:	6860      	ldr	r0, [r4, #4]
    8e24:	2301      	movs	r3, #1
    8e26:	2100      	movs	r1, #0
    8e28:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    8e2c:	3080      	adds	r0, #128	; 0x80
    8e2e:	f004 fdbd 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e32:	2800      	cmp	r0, #0
    8e34:	d011      	beq.n	8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8e36:	6860      	ldr	r0, [r4, #4]
    8e38:	f890 02b4 	ldrb.w	r0, [r0, #692]	; 0x2b4
    8e3c:	2800      	cmp	r0, #0
    8e3e:	d00c      	beq.n	8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    8e40:	2100      	movs	r1, #0
    8e42:	20ff      	movs	r0, #255	; 0xff
    8e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e48:	f000 bbe4 	b.w	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    8e4c:	f890 1119 	ldrb.w	r1, [r0, #281]	; 0x119
    8e50:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    8e54:	2100      	movs	r1, #0
    8e56:	2007      	movs	r0, #7
    8e58:	e7f4      	b.n	8e44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5a8>
    8e5a:	bd38      	pop	{r3, r4, r5, pc}
    8e5c:	2000016c 	.word	0x2000016c
    8e60:	4808      	ldr	r0, [pc, #32]	; (8e84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e8>)
    8e62:	6843      	ldr	r3, [r0, #4]
    8e64:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    8e68:	2801      	cmp	r0, #1
    8e6a:	d006      	beq.n	8e7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5de>
    8e6c:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
    8e70:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    8e74:	8818      	ldrh	r0, [r3, #0]
    8e76:	f005 b9ae 	b.w	e1d6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8e7a:	2002      	movs	r0, #2
    8e7c:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    8e80:	4770      	bx	lr
    8e82:	0000      	.short	0x0000
    8e84:	2000016c 	.word	0x2000016c
    8e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e8a:	4d2b      	ldr	r5, [pc, #172]	; (8f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    8e8c:	0006      	movs	r6, r0
    8e8e:	f105 0410 	add.w	r4, r5, #16
    8e92:	d133      	bne.n	8efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8e94:	f000 f8b6 	bl	9004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x768>
    8e98:	f000 f852 	bl	8f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
    8e9c:	0006      	movs	r6, r0
    8e9e:	d12d      	bne.n	8efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8ea0:	8869      	ldrh	r1, [r5, #2]
    8ea2:	0748      	lsls	r0, r1, #29
    8ea4:	d506      	bpl.n	8eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x618>
    8ea6:	6860      	ldr	r0, [r4, #4]
    8ea8:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
    8eac:	2807      	cmp	r0, #7
    8eae:	d101      	bne.n	8eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x618>
    8eb0:	2001      	movs	r0, #1
    8eb2:	7028      	strb	r0, [r5, #0]
    8eb4:	0788      	lsls	r0, r1, #30
    8eb6:	d516      	bpl.n	8ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    8eb8:	68a8      	ldr	r0, [r5, #8]
    8eba:	78c0      	ldrb	r0, [r0, #3]
    8ebc:	282b      	cmp	r0, #43	; 0x2b
    8ebe:	d207      	bcs.n	8ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    8ec0:	491e      	ldr	r1, [pc, #120]	; (8f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
    8ec2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    8ec6:	b119      	cbz	r1, 8ed0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    8ec8:	481b      	ldr	r0, [pc, #108]	; (8f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    8eca:	3010      	adds	r0, #16
    8ecc:	4788      	blx	r1
    8ece:	e00a      	b.n	8ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    8ed0:	28ff      	cmp	r0, #255	; 0xff
    8ed2:	d004      	beq.n	8ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x642>
    8ed4:	f640 01c1 	movw	r1, #2241	; 0x8c1
    8ed8:	2031      	movs	r0, #49	; 0x31
    8eda:	f7fb fde7 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ede:	4816      	ldr	r0, [pc, #88]	; (8f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    8ee0:	3010      	adds	r0, #16
    8ee2:	f006 faeb 	bl	f4bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x206>
    8ee6:	78a8      	ldrb	r0, [r5, #2]
    8ee8:	06c0      	lsls	r0, r0, #27
    8eea:	d507      	bpl.n	8efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8eec:	6860      	ldr	r0, [r4, #4]
    8eee:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    8ef2:	290b      	cmp	r1, #11
    8ef4:	d102      	bne.n	8efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x660>
    8ef6:	210c      	movs	r1, #12
    8ef8:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    8efc:	7868      	ldrb	r0, [r5, #1]
    8efe:	0700      	lsls	r0, r0, #28
    8f00:	d518      	bpl.n	8f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    8f02:	6860      	ldr	r0, [r4, #4]
    8f04:	2301      	movs	r3, #1
    8f06:	2105      	movs	r1, #5
    8f08:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8f0c:	3080      	adds	r0, #128	; 0x80
    8f0e:	f004 fd4d 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f12:	b108      	cbz	r0, 8f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67c>
    8f14:	2608      	movs	r6, #8
    8f16:	e00d      	b.n	8f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    8f18:	2500      	movs	r5, #0
    8f1a:	4669      	mov	r1, sp
    8f1c:	4628      	mov	r0, r5
    8f1e:	9500      	str	r5, [sp, #0]
    8f20:	f7fc fd8e 	bl	5a40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8f24:	9800      	ldr	r0, [sp, #0]
    8f26:	b128      	cbz	r0, 8f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    8f28:	7205      	strb	r5, [r0, #8]
    8f2a:	2227      	movs	r2, #39	; 0x27
    8f2c:	6861      	ldr	r1, [r4, #4]
    8f2e:	9800      	ldr	r0, [sp, #0]
    8f30:	f7fd fd2e 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    8f34:	4630      	mov	r0, r6
    8f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f38:	2000015c 	.word	0x2000015c
    8f3c:	20000220 	.word	0x20000220
    8f40:	b570      	push	{r4, r5, r6, lr}
    8f42:	4d2e      	ldr	r5, [pc, #184]	; (8ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8f44:	2000      	movs	r0, #0
    8f46:	78a9      	ldrb	r1, [r5, #2]
    8f48:	07c9      	lsls	r1, r1, #31
    8f4a:	d017      	beq.n	8f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e0>
    8f4c:	68e8      	ldr	r0, [r5, #12]
    8f4e:	f105 0410 	add.w	r4, r5, #16
    8f52:	2301      	movs	r3, #1
    8f54:	78c6      	ldrb	r6, [r0, #3]
    8f56:	6860      	ldr	r0, [r4, #4]
    8f58:	2105      	movs	r1, #5
    8f5a:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    8f5e:	3080      	adds	r0, #128	; 0x80
    8f60:	f004 fd24 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f64:	b158      	cbz	r0, 8f7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    8f66:	1eb6      	subs	r6, r6, #2
    8f68:	2e0a      	cmp	r6, #10
    8f6a:	d206      	bcs.n	8f7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    8f6c:	e8df f006 	tbb	[pc, r6]
    8f70:	05050707 	.word	0x05050707
    8f74:	05050707 	.word	0x05050707
    8f78:	0707      	.short	0x0707
    8f7a:	2008      	movs	r0, #8
    8f7c:	bd70      	pop	{r4, r5, r6, pc}
    8f7e:	68e8      	ldr	r0, [r5, #12]
    8f80:	f7fd fc6c 	bl	685c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    8f84:	b138      	cbz	r0, 8f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fa>
    8f86:	68e8      	ldr	r0, [r5, #12]
    8f88:	78c5      	ldrb	r5, [r0, #3]
    8f8a:	b155      	cbz	r5, 8fa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8f8c:	2d01      	cmp	r5, #1
    8f8e:	d008      	beq.n	8fa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8f90:	2d16      	cmp	r5, #22
    8f92:	d11a      	bne.n	8fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8f94:	e005      	b.n	8fa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    8f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f9a:	4818      	ldr	r0, [pc, #96]	; (8ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8f9c:	3010      	adds	r0, #16
    8f9e:	f000 bd87 	b.w	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    8fa2:	6860      	ldr	r0, [r4, #4]
    8fa4:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    8fa8:	f004 fd58 	bl	da5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8fac:	b168      	cbz	r0, 8fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8fae:	6860      	ldr	r0, [r4, #4]
    8fb0:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    8fb4:	2921      	cmp	r1, #33	; 0x21
    8fb6:	d008      	beq.n	8fca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    8fb8:	2922      	cmp	r1, #34	; 0x22
    8fba:	d003      	beq.n	8fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    8fbc:	2d16      	cmp	r5, #22
    8fbe:	d00e      	beq.n	8fde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    8fc0:	2002      	movs	r0, #2
    8fc2:	bd70      	pop	{r4, r5, r6, pc}
    8fc4:	212e      	movs	r1, #46	; 0x2e
    8fc6:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8fca:	2d2b      	cmp	r5, #43	; 0x2b
    8fcc:	d209      	bcs.n	8fe2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    8fce:	480c      	ldr	r0, [pc, #48]	; (9000 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x764>)
    8fd0:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    8fd4:	b129      	cbz	r1, 8fe2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    8fd6:	4809      	ldr	r0, [pc, #36]	; (8ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8fd8:	3010      	adds	r0, #16
    8fda:	4788      	blx	r1
    8fdc:	e005      	b.n	8fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x74e>
    8fde:	2020      	movs	r0, #32
    8fe0:	bd70      	pop	{r4, r5, r6, pc}
    8fe2:	4806      	ldr	r0, [pc, #24]	; (8ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>)
    8fe4:	3010      	adds	r0, #16
    8fe6:	f000 fd63 	bl	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    8fea:	6862      	ldr	r2, [r4, #4]
    8fec:	e9f2 133e 	ldrd	r1, r3, [r2, #248]!	; 0xf8
    8ff0:	1c49      	adds	r1, r1, #1
    8ff2:	f143 0300 	adc.w	r3, r3, #0
    8ff6:	e9c2 1300 	strd	r1, r3, [r2]
    8ffa:	bd70      	pop	{r4, r5, r6, pc}
    8ffc:	2000015c 	.word	0x2000015c
    9000:	20000174 	.word	0x20000174
    9004:	b570      	push	{r4, r5, r6, lr}
    9006:	4e23      	ldr	r6, [pc, #140]	; (9094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f8>)
    9008:	78b0      	ldrb	r0, [r6, #2]
    900a:	0700      	lsls	r0, r0, #28
    900c:	d540      	bpl.n	9090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f4>
    900e:	f106 0410 	add.w	r4, r6, #16
    9012:	6860      	ldr	r0, [r4, #4]
    9014:	3080      	adds	r0, #128	; 0x80
    9016:	f006 f95d 	bl	f2d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    901a:	b148      	cbz	r0, 9030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x794>
    901c:	6860      	ldr	r0, [r4, #4]
    901e:	21fe      	movs	r1, #254	; 0xfe
    9020:	2500      	movs	r5, #0
    9022:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    9026:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    902a:	291b      	cmp	r1, #27
    902c:	d10c      	bne.n	9048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ac>
    902e:	e004      	b.n	903a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x79e>
    9030:	f640 01cd 	movw	r1, #2253	; 0x8cd
    9034:	2031      	movs	r0, #49	; 0x31
    9036:	f7fb fd39 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    903a:	f880 50d3 	strb.w	r5, [r0, #211]	; 0xd3
    903e:	f7ff fd3b 	bl	8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9042:	6860      	ldr	r0, [r4, #4]
    9044:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    9048:	6860      	ldr	r0, [r4, #4]
    904a:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    904e:	2921      	cmp	r1, #33	; 0x21
    9050:	d002      	beq.n	9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7bc>
    9052:	2930      	cmp	r1, #48	; 0x30
    9054:	d113      	bne.n	907e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    9056:	e00b      	b.n	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d4>
    9058:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    905c:	f004 fcfe 	bl	da5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9060:	b108      	cbz	r0, 9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ca>
    9062:	202e      	movs	r0, #46	; 0x2e
    9064:	e000      	b.n	9068 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7cc>
    9066:	2022      	movs	r0, #34	; 0x22
    9068:	6861      	ldr	r1, [r4, #4]
    906a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    906e:	e006      	b.n	907e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    9070:	2101      	movs	r1, #1
    9072:	f880 12b5 	strb.w	r1, [r0, #693]	; 0x2b5
    9076:	f880 5095 	strb.w	r5, [r0, #149]	; 0x95
    907a:	f880 50ce 	strb.w	r5, [r0, #206]	; 0xce
    907e:	6860      	ldr	r0, [r4, #4]
    9080:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
    9084:	2908      	cmp	r1, #8
    9086:	d103      	bne.n	9090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f4>
    9088:	2102      	movs	r1, #2
    908a:	7031      	strb	r1, [r6, #0]
    908c:	f880 111c 	strb.w	r1, [r0, #284]	; 0x11c
    9090:	bd70      	pop	{r4, r5, r6, pc}
    9092:	0000      	.short	0x0000
    9094:	2000015c 	.word	0x2000015c
    9098:	b538      	push	{r3, r4, r5, lr}
    909a:	4605      	mov	r5, r0
    909c:	4668      	mov	r0, sp
    909e:	f7fc fb67 	bl	5770 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    90a2:	b308      	cbz	r0, 90e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84c>
    90a4:	2222      	movs	r2, #34	; 0x22
    90a6:	2100      	movs	r1, #0
    90a8:	9800      	ldr	r0, [sp, #0]
    90aa:	f003 face 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    90ae:	2103      	movs	r1, #3
    90b0:	9800      	ldr	r0, [sp, #0]
    90b2:	f004 ff8f 	bl	dfd4 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    90b6:	9800      	ldr	r0, [sp, #0]
    90b8:	7801      	ldrb	r1, [r0, #0]
    90ba:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    90be:	7001      	strb	r1, [r0, #0]
    90c0:	4629      	mov	r1, r5
    90c2:	f7fd fbdb 	bl	687c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    90c6:	4c59      	ldr	r4, [pc, #356]	; (922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    90c8:	2d11      	cmp	r5, #17
    90ca:	d02d      	beq.n	9128 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88c>
    90cc:	dc0f      	bgt.n	90ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x852>
    90ce:	f1a5 0502 	sub.w	r5, r5, #2
    90d2:	2d0d      	cmp	r5, #13
    90d4:	d21f      	bcs.n	9116 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87a>
    90d6:	e8df f005 	tbb	[pc, r5]
    90da:	1e21      	.short	0x1e21
    90dc:	219e9e51 	.word	0x219e9e51
    90e0:	9e1e5e1e 	.word	0x9e1e5e1e
    90e4:	008c343a 	.word	0x008c343a
    90e8:	f640 314c 	movw	r1, #2892	; 0xb4c
    90ec:	e099      	b.n	9222 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x986>
    90ee:	2d17      	cmp	r5, #23
    90f0:	d070      	beq.n	91d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    90f2:	dc08      	bgt.n	9106 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    90f4:	f1a5 0512 	sub.w	r5, r5, #18
    90f8:	2d05      	cmp	r5, #5
    90fa:	d20c      	bcs.n	9116 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87a>
    90fc:	e8df f005 	tbb	[pc, r5]
    9100:	50508b8b 	.word	0x50508b8b
    9104:	0033      	.short	0x0033
    9106:	2d23      	cmp	r5, #35	; 0x23
    9108:	d077      	beq.n	91fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    910a:	2d24      	cmp	r5, #36	; 0x24
    910c:	d075      	beq.n	91fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    910e:	2d25      	cmp	r5, #37	; 0x25
    9110:	d073      	beq.n	91fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    9112:	2dff      	cmp	r5, #255	; 0xff
    9114:	d077      	beq.n	9206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    9116:	f640 31e3 	movw	r1, #3043	; 0xbe3
    911a:	e082      	b.n	9222 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x986>
    911c:	6860      	ldr	r0, [r4, #4]
    911e:	9900      	ldr	r1, [sp, #0]
    9120:	f890 011e 	ldrb.w	r0, [r0, #286]	; 0x11e
    9124:	7108      	strb	r0, [r1, #4]
    9126:	e076      	b.n	9216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    9128:	6860      	ldr	r0, [r4, #4]
    912a:	f890 111b 	ldrb.w	r1, [r0, #283]	; 0x11b
    912e:	9800      	ldr	r0, [sp, #0]
    9130:	f004 ff3c 	bl	dfac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    9134:	6860      	ldr	r0, [r4, #4]
    9136:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
    913a:	9800      	ldr	r0, [sp, #0]
    913c:	f004 ff3a 	bl	dfb4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    9140:	e069      	b.n	9216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    9142:	6861      	ldr	r1, [r4, #4]
    9144:	9800      	ldr	r0, [sp, #0]
    9146:	f891 111a 	ldrb.w	r1, [r1, #282]	; 0x11a
    914a:	7101      	strb	r1, [r0, #4]
    914c:	e063      	b.n	9216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    914e:	9800      	ldr	r0, [sp, #0]
    9150:	210c      	movs	r1, #12
    9152:	7101      	strb	r1, [r0, #4]
    9154:	2159      	movs	r1, #89	; 0x59
    9156:	7141      	strb	r1, [r0, #5]
    9158:	2100      	movs	r1, #0
    915a:	7181      	strb	r1, [r0, #6]
    915c:	21fa      	movs	r1, #250	; 0xfa
    915e:	71c1      	strb	r1, [r0, #7]
    9160:	2111      	movs	r1, #17
    9162:	7201      	strb	r1, [r0, #8]
    9164:	e057      	b.n	9216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    9166:	9800      	ldr	r0, [sp, #0]
    9168:	f8d4 1004 	ldr.w	r1, [r4, #4]
    916c:	f891 1136 	ldrb.w	r1, [r1, #310]	; 0x136
    9170:	7101      	strb	r1, [r0, #4]
    9172:	6861      	ldr	r1, [r4, #4]
    9174:	f891 1137 	ldrb.w	r1, [r1, #311]	; 0x137
    9178:	7141      	strb	r1, [r0, #5]
    917a:	e04c      	b.n	9216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    917c:	6861      	ldr	r1, [r4, #4]
    917e:	9800      	ldr	r0, [sp, #0]
    9180:	f501 710c 	add.w	r1, r1, #560	; 0x230
    9184:	f004 fecd 	bl	df22 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    9188:	6861      	ldr	r1, [r4, #4]
    918a:	9800      	ldr	r0, [sp, #0]
    918c:	f501 718a 	add.w	r1, r1, #276	; 0x114
    9190:	f004 fec4 	bl	df1c <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    9194:	e03f      	b.n	9216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    9196:	4825      	ldr	r0, [pc, #148]	; (922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    9198:	9900      	ldr	r1, [sp, #0]
    919a:	f7fd ff1f 	bl	6fdc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    919e:	e03a      	b.n	9216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    91a0:	6860      	ldr	r0, [r4, #4]
    91a2:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    91a6:	9800      	ldr	r0, [sp, #0]
    91a8:	f004 ff1c 	bl	dfe4 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    91ac:	6860      	ldr	r0, [r4, #4]
    91ae:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    91b2:	9800      	ldr	r0, [sp, #0]
    91b4:	f004 ff1a 	bl	dfec <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    91b8:	6860      	ldr	r0, [r4, #4]
    91ba:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    91be:	9800      	ldr	r0, [sp, #0]
    91c0:	f004 ff18 	bl	dff4 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    91c4:	6860      	ldr	r0, [r4, #4]
    91c6:	f8b0 111e 	ldrh.w	r1, [r0, #286]	; 0x11e
    91ca:	9800      	ldr	r0, [sp, #0]
    91cc:	f004 ff16 	bl	dffc <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    91d0:	e021      	b.n	9216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    91d2:	e7ff      	b.n	91d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x938>
    91d4:	6861      	ldr	r1, [r4, #4]
    91d6:	f891 0134 	ldrb.w	r0, [r1, #308]	; 0x134
    91da:	2801      	cmp	r0, #1
    91dc:	9800      	ldr	r0, [sp, #0]
    91de:	d0c5      	beq.n	916c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d0>
    91e0:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    91e4:	7101      	strb	r1, [r0, #4]
    91e6:	6861      	ldr	r1, [r4, #4]
    91e8:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    91ec:	e7c4      	b.n	9178 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8dc>
    91ee:	e004      	b.n	91fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    91f0:	e009      	b.n	9206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    91f2:	9800      	ldr	r0, [sp, #0]
    91f4:	f7fd feac 	bl	6f50 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    91f8:	e00d      	b.n	9216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    91fa:	4a0c      	ldr	r2, [pc, #48]	; (922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>)
    91fc:	4628      	mov	r0, r5
    91fe:	9900      	ldr	r1, [sp, #0]
    9200:	f006 fab3 	bl	f76a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    9204:	e007      	b.n	9216 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97a>
    9206:	6860      	ldr	r0, [r4, #4]
    9208:	f890 22b7 	ldrb.w	r2, [r0, #695]	; 0x2b7
    920c:	f8d0 12b8 	ldr.w	r1, [r0, #696]	; 0x2b8
    9210:	9800      	ldr	r0, [sp, #0]
    9212:	f004 fed1 	bl	dfb8 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    9216:	f7fc fa85 	bl	5724 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    921a:	2800      	cmp	r0, #0
    921c:	d104      	bne.n	9228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98c>
    921e:	f640 31e7 	movw	r1, #3047	; 0xbe7
    9222:	2031      	movs	r0, #49	; 0x31
    9224:	f7fb fc42 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9228:	bd38      	pop	{r3, r4, r5, pc}
    922a:	0000      	.short	0x0000
    922c:	2000016c 	.word	0x2000016c
    9230:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9234:	4e8c      	ldr	r6, [pc, #560]	; (9468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbcc>)
    9236:	468a      	mov	sl, r1
    9238:	6870      	ldr	r0, [r6, #4]
    923a:	8800      	ldrh	r0, [r0, #0]
    923c:	f7fc f844 	bl	52c8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9240:	0007      	movs	r7, r0
    9242:	d00c      	beq.n	925e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c2>
    9244:	f1a6 0510 	sub.w	r5, r6, #16
    9248:	f04f 0400 	mov.w	r4, #0
    924c:	8868      	ldrh	r0, [r5, #2]
    924e:	05c0      	lsls	r0, r0, #23
    9250:	d50a      	bpl.n	9268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9cc>
    9252:	6870      	ldr	r0, [r6, #4]
    9254:	f8a0 40c4 	strh.w	r4, [r0, #196]	; 0xc4
    9258:	f880 4224 	strb.w	r4, [r0, #548]	; 0x224
    925c:	e009      	b.n	9272 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d6>
    925e:	f640 61d2 	movw	r1, #3794	; 0xed2
    9262:	2031      	movs	r0, #49	; 0x31
    9264:	f7fb fc22 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9268:	6871      	ldr	r1, [r6, #4]
    926a:	f831 0fc4 	ldrh.w	r0, [r1, #196]!
    926e:	1c40      	adds	r0, r0, #1
    9270:	8008      	strh	r0, [r1, #0]
    9272:	f000 ff77 	bl	a164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    9276:	f04f 0901 	mov.w	r9, #1
    927a:	b338      	cbz	r0, 92cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    927c:	8868      	ldrh	r0, [r5, #2]
    927e:	0500      	lsls	r0, r0, #20
    9280:	d506      	bpl.n	9290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    9282:	6870      	ldr	r0, [r6, #4]
    9284:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
    9288:	b111      	cbz	r1, 9290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f4>
    928a:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8
    928e:	e01d      	b.n	92cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    9290:	6871      	ldr	r1, [r6, #4]
    9292:	f8d1 00b8 	ldr.w	r0, [r1, #184]	; 0xb8
    9296:	1c40      	adds	r0, r0, #1
    9298:	f8c1 00b8 	str.w	r0, [r1, #184]	; 0xb8
    929c:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    92a0:	4282      	cmp	r2, r0
    92a2:	d301      	bcc.n	92a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0c>
    92a4:	1a13      	subs	r3, r2, r0
    92a6:	e000      	b.n	92aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    92a8:	2300      	movs	r3, #0
    92aa:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    92ae:	f10c 0c05 	add.w	ip, ip, #5
    92b2:	4563      	cmp	r3, ip
    92b4:	d801      	bhi.n	92ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    92b6:	f881 90c2 	strb.w	r9, [r1, #194]	; 0xc2
    92ba:	4290      	cmp	r0, r2
    92bc:	d306      	bcc.n	92cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    92be:	f501 70a9 	add.w	r0, r1, #338	; 0x152
    92c2:	220e      	movs	r2, #14
    92c4:	f8c1 40b8 	str.w	r4, [r1, #184]	; 0xb8
    92c8:	f7fd fb62 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    92cc:	8868      	ldrh	r0, [r5, #2]
    92ce:	f04f 0b02 	mov.w	fp, #2
    92d2:	f410 7f40 	tst.w	r0, #768	; 0x300
    92d6:	d00e      	beq.n	92f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    92d8:	6870      	ldr	r0, [r6, #4]
    92da:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    92de:	b111      	cbz	r1, 92e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4a>
    92e0:	2903      	cmp	r1, #3
    92e2:	d108      	bne.n	92f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    92e4:	e002      	b.n	92ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa50>
    92e6:	f880 9099 	strb.w	r9, [r0, #153]	; 0x99
    92ea:	e001      	b.n	92f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa54>
    92ec:	f880 b099 	strb.w	fp, [r0, #153]	; 0x99
    92f0:	2101      	movs	r1, #1
    92f2:	f7fe fe9b 	bl	802c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    92f6:	6870      	ldr	r0, [r6, #4]
    92f8:	46b0      	mov	r8, r6
    92fa:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    92fe:	2901      	cmp	r1, #1
    9300:	d104      	bne.n	930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa70>
    9302:	8869      	ldrh	r1, [r5, #2]
    9304:	0549      	lsls	r1, r1, #21
    9306:	d501      	bpl.n	930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa70>
    9308:	f880 b099 	strb.w	fp, [r0, #153]	; 0x99
    930c:	9900      	ldr	r1, [sp, #0]
    930e:	2900      	cmp	r1, #0
    9310:	d179      	bne.n	9406 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
    9312:	78a9      	ldrb	r1, [r5, #2]
    9314:	0649      	lsls	r1, r1, #25
    9316:	d502      	bpl.n	931e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    9318:	f8a0 4238 	strh.w	r4, [r0, #568]	; 0x238
    931c:	e004      	b.n	9328 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa8c>
    931e:	f8b0 1238 	ldrh.w	r1, [r0, #568]	; 0x238
    9322:	1c49      	adds	r1, r1, #1
    9324:	f8a0 1238 	strh.w	r1, [r0, #568]	; 0x238
    9328:	4650      	mov	r0, sl
    932a:	f7ff fdad 	bl	8e88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ec>
    932e:	ea40 000a 	orr.w	r0, r0, sl
    9332:	4682      	mov	sl, r0
    9334:	f7ff fd2c 	bl	8d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f4>
    9338:	f8d8 6004 	ldr.w	r6, [r8, #4]
    933c:	f8b6 0218 	ldrh.w	r0, [r6, #536]	; 0x218
    9340:	1c40      	adds	r0, r0, #1
    9342:	f8a6 0218 	strh.w	r0, [r6, #536]	; 0x218
    9346:	f896 021c 	ldrb.w	r0, [r6, #540]	; 0x21c
    934a:	b128      	cbz	r0, 9358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xabc>
    934c:	f7fc fbd8 	bl	5b00 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    9350:	b1b0      	cbz	r0, 9380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    9352:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    9356:	e013      	b.n	9380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    9358:	f7fc fa8c 	bl	5874 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    935c:	b108      	cbz	r0, 9362 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac6>
    935e:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    9362:	f7fc fa81 	bl	5868 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9366:	b158      	cbz	r0, 9380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    9368:	f896 0224 	ldrb.w	r0, [r6, #548]	; 0x224
    936c:	1c40      	adds	r0, r0, #1
    936e:	b2c0      	uxtb	r0, r0
    9370:	f886 0224 	strb.w	r0, [r6, #548]	; 0x224
    9374:	2802      	cmp	r0, #2
    9376:	d903      	bls.n	9380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae4>
    9378:	f8a6 4218 	strh.w	r4, [r6, #536]	; 0x218
    937c:	f886 4224 	strb.w	r4, [r6, #548]	; 0x224
    9380:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9384:	4646      	mov	r6, r8
    9386:	2301      	movs	r3, #1
    9388:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    938c:	2100      	movs	r1, #0
    938e:	3080      	adds	r0, #128	; 0x80
    9390:	f004 fb0c 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9394:	b920      	cbnz	r0, 93a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb04>
    9396:	6870      	ldr	r0, [r6, #4]
    9398:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    939c:	280c      	cmp	r0, #12
    939e:	d160      	bne.n	9462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    93a0:	6870      	ldr	r0, [r6, #4]
    93a2:	2301      	movs	r3, #1
    93a4:	2100      	movs	r1, #0
    93a6:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    93aa:	3080      	adds	r0, #128	; 0x80
    93ac:	f004 fafe 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93b0:	b350      	cbz	r0, 9408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    93b2:	6870      	ldr	r0, [r6, #4]
    93b4:	2301      	movs	r3, #1
    93b6:	2100      	movs	r1, #0
    93b8:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    93bc:	3080      	adds	r0, #128	; 0x80
    93be:	f004 faf5 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93c2:	b308      	cbz	r0, 9408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    93c4:	6870      	ldr	r0, [r6, #4]
    93c6:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    93ca:	2902      	cmp	r1, #2
    93cc:	d149      	bne.n	9462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    93ce:	f890 0224 	ldrb.w	r0, [r0, #548]	; 0x224
    93d2:	b9c8      	cbnz	r0, 9408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    93d4:	4638      	mov	r0, r7
    93d6:	f003 fdf0 	bl	cfba <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    93da:	b1a8      	cbz	r0, 9408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    93dc:	6870      	ldr	r0, [r6, #4]
    93de:	3080      	adds	r0, #128	; 0x80
    93e0:	f005 ff78 	bl	f2d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    93e4:	b980      	cbnz	r0, 9408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    93e6:	6871      	ldr	r1, [r6, #4]
    93e8:	f8b1 0212 	ldrh.w	r0, [r1, #530]	; 0x212
    93ec:	2801      	cmp	r0, #1
    93ee:	d938      	bls.n	9462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    93f0:	f881 921a 	strb.w	r9, [r1, #538]	; 0x21a
    93f4:	f8b1 00c6 	ldrh.w	r0, [r1, #198]	; 0xc6
    93f8:	f8b1 20c4 	ldrh.w	r2, [r1, #196]	; 0xc4
    93fc:	1e83      	subs	r3, r0, #2
    93fe:	429a      	cmp	r2, r3
    9400:	db03      	blt.n	940a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6e>
    9402:	2001      	movs	r0, #1
    9404:	e004      	b.n	9410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb74>
    9406:	e01d      	b.n	9444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba8>
    9408:	e02b      	b.n	9462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc6>
    940a:	1a80      	subs	r0, r0, r2
    940c:	1e40      	subs	r0, r0, #1
    940e:	b280      	uxth	r0, r0
    9410:	f8b1 2218 	ldrh.w	r2, [r1, #536]	; 0x218
    9414:	88ab      	ldrh	r3, [r5, #4]
    9416:	429a      	cmp	r2, r3
    9418:	d301      	bcc.n	941e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb82>
    941a:	2201      	movs	r2, #1
    941c:	e002      	b.n	9424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    941e:	1a9a      	subs	r2, r3, r2
    9420:	1c52      	adds	r2, r2, #1
    9422:	b292      	uxth	r2, r2
    9424:	4290      	cmp	r0, r2
    9426:	d900      	bls.n	942a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8e>
    9428:	4610      	mov	r0, r2
    942a:	2801      	cmp	r0, #1
    942c:	d102      	bne.n	9434 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb98>
    942e:	bf00      	nop
    9430:	f881 421a 	strb.w	r4, [r1, #538]	; 0x21a
    9434:	6871      	ldr	r1, [r6, #4]
    9436:	f8b1 208c 	ldrh.w	r2, [r1, #140]	; 0x8c
    943a:	4410      	add	r0, r2
    943c:	f8a1 0214 	strh.w	r0, [r1, #532]	; 0x214
    9440:	f000 ff64 	bl	a30c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a70>
    9444:	78a8      	ldrb	r0, [r5, #2]
    9446:	4652      	mov	r2, sl
    9448:	f3c0 1180 	ubfx	r1, r0, #6, #1
    944c:	9800      	ldr	r0, [sp, #0]
    944e:	f000 fe9d 	bl	a18c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    9452:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9456:	f880 421b 	strb.w	r4, [r0, #539]	; 0x21b
    945a:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    945e:	f7fc b94b 	b.w	56f8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9462:	2001      	movs	r0, #1
    9464:	6871      	ldr	r1, [r6, #4]
    9466:	e7e3      	b.n	9430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb94>
    9468:	2000016c 	.word	0x2000016c
    946c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    946e:	4c68      	ldr	r4, [pc, #416]	; (9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd74>)
    9470:	2301      	movs	r3, #1
    9472:	2100      	movs	r1, #0
    9474:	6860      	ldr	r0, [r4, #4]
    9476:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    947a:	3080      	adds	r0, #128	; 0x80
    947c:	f004 fa96 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9480:	2800      	cmp	r0, #0
    9482:	d07a      	beq.n	957a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcde>
    9484:	6860      	ldr	r0, [r4, #4]
    9486:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    948a:	2500      	movs	r5, #0
    948c:	b139      	cbz	r1, 949e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc02>
    948e:	2100      	movs	r1, #0
    9490:	200e      	movs	r0, #14
    9492:	f000 f8bf 	bl	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9496:	6860      	ldr	r0, [r4, #4]
    9498:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    949c:	e0b5      	b.n	960a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    949e:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    94a2:	b119      	cbz	r1, 94ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc10>
    94a4:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    94a8:	0789      	lsls	r1, r1, #30
    94aa:	d016      	beq.n	94da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    94ac:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    94b0:	f88d 1004 	strb.w	r1, [sp, #4]
    94b4:	9901      	ldr	r1, [sp, #4]
    94b6:	9101      	str	r1, [sp, #4]
    94b8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    94bc:	b141      	cbz	r1, 94d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc34>
    94be:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    94c2:	f88d 1000 	strb.w	r1, [sp]
    94c6:	9900      	ldr	r1, [sp, #0]
    94c8:	9100      	str	r1, [sp, #0]
    94ca:	f89d 1000 	ldrb.w	r1, [sp]
    94ce:	b189      	cbz	r1, 94f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc58>
    94d0:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    94d4:	2901      	cmp	r1, #1
    94d6:	d030      	beq.n	953a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9e>
    94d8:	e040      	b.n	955c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc0>
    94da:	2100      	movs	r1, #0
    94dc:	200c      	movs	r0, #12
    94de:	f000 f899 	bl	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    94e2:	6860      	ldr	r0, [r4, #4]
    94e4:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    94e8:	f041 0101 	orr.w	r1, r1, #1
    94ec:	7001      	strb	r1, [r0, #0]
    94ee:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    94f2:	e08a      	b.n	960a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    94f4:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    94f8:	2926      	cmp	r1, #38	; 0x26
    94fa:	d01c      	beq.n	9536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9a>
    94fc:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
    9500:	2926      	cmp	r1, #38	; 0x26
    9502:	d018      	beq.n	9536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc9a>
    9504:	f05f 0300 	movs.w	r3, #0
    9508:	f200 22be 	addw	r2, r0, #702	; 0x2be
    950c:	f500 7195 	add.w	r1, r0, #298	; 0x12a
    9510:	f004 fe89 	bl	e226 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9514:	6860      	ldr	r0, [r4, #4]
    9516:	f880 512a 	strb.w	r5, [r0, #298]	; 0x12a
    951a:	2100      	movs	r1, #0
    951c:	2014      	movs	r0, #20
    951e:	f000 f879 	bl	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9522:	6861      	ldr	r1, [r4, #4]
    9524:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    9528:	8bc2      	ldrh	r2, [r0, #30]
    952a:	f8a1 211e 	strh.w	r2, [r1, #286]	; 0x11e
    952e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9530:	f8a1 0120 	strh.w	r0, [r1, #288]	; 0x120
    9534:	e069      	b.n	960a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    9536:	2301      	movs	r3, #1
    9538:	e7e6      	b.n	9508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6c>
    953a:	f890 1135 	ldrb.w	r1, [r0, #309]	; 0x135
    953e:	f88d 1000 	strb.w	r1, [sp]
    9542:	9900      	ldr	r1, [sp, #0]
    9544:	9100      	str	r1, [sp, #0]
    9546:	f89d 1000 	ldrb.w	r1, [sp]
    954a:	b939      	cbnz	r1, 955c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc0>
    954c:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9550:	2301      	movs	r3, #1
    9552:	210b      	movs	r1, #11
    9554:	3080      	adds	r0, #128	; 0x80
    9556:	f004 fa29 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    955a:	b178      	cbz	r0, 957c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    955c:	6860      	ldr	r0, [r4, #4]
    955e:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    9562:	f88d 1000 	strb.w	r1, [sp]
    9566:	9900      	ldr	r1, [sp, #0]
    9568:	9100      	str	r1, [sp, #0]
    956a:	f89d 1000 	ldrb.w	r1, [sp]
    956e:	b3b9      	cbz	r1, 95e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd44>
    9570:	2100      	movs	r1, #0
    9572:	2023      	movs	r0, #35	; 0x23
    9574:	f000 f84e 	bl	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9578:	e047      	b.n	960a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6e>
    957a:	e030      	b.n	95de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    957c:	6860      	ldr	r0, [r4, #4]
    957e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9582:	f005 feaf 	bl	f2e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9586:	4605      	mov	r5, r0
    9588:	6860      	ldr	r0, [r4, #4]
    958a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    958e:	f005 fea9 	bl	f2e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9592:	4606      	mov	r6, r0
    9594:	6860      	ldr	r0, [r4, #4]
    9596:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
    959a:	4628      	mov	r0, r5
    959c:	f005 fead 	bl	f2fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    95a0:	b150      	cbz	r0, 95b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    95a2:	6860      	ldr	r0, [r4, #4]
    95a4:	f890 1137 	ldrb.w	r1, [r0, #311]	; 0x137
    95a8:	4630      	mov	r0, r6
    95aa:	f005 fea6 	bl	f2fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    95ae:	b118      	cbz	r0, 95b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    95b0:	2000      	movs	r0, #0
    95b2:	f000 f93f 	bl	9834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    95b6:	e011      	b.n	95dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    95b8:	6860      	ldr	r0, [r4, #4]
    95ba:	2301      	movs	r3, #1
    95bc:	2103      	movs	r1, #3
    95be:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    95c2:	3080      	adds	r0, #128	; 0x80
    95c4:	f004 f9f2 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95c8:	b940      	cbnz	r0, 95dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    95ca:	6860      	ldr	r0, [r4, #4]
    95cc:	2301      	movs	r3, #1
    95ce:	2102      	movs	r1, #2
    95d0:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    95d4:	3080      	adds	r0, #128	; 0x80
    95d6:	f004 f9e9 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95da:	b110      	cbz	r0, 95e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd46>
    95dc:	2000      	movs	r0, #0
    95de:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    95e0:	e002      	b.n	95e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    95e2:	2100      	movs	r1, #0
    95e4:	2016      	movs	r0, #22
    95e6:	e7c5      	b.n	9574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
    95e8:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    95ec:	f88d 0000 	strb.w	r0, [sp]
    95f0:	9800      	ldr	r0, [sp, #0]
    95f2:	9000      	str	r0, [sp, #0]
    95f4:	f89d 0000 	ldrb.w	r0, [sp]
    95f8:	2800      	cmp	r0, #0
    95fa:	d0f0      	beq.n	95de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    95fc:	2100      	movs	r1, #0
    95fe:	2025      	movs	r0, #37	; 0x25
    9600:	f000 f808 	bl	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    9604:	6860      	ldr	r0, [r4, #4]
    9606:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    960a:	2001      	movs	r0, #1
    960c:	e7e7      	b.n	95de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd42>
    960e:	0000      	.short	0x0000
    9610:	2000016c 	.word	0x2000016c
    9614:	b570      	push	{r4, r5, r6, lr}
    9616:	4c0d      	ldr	r4, [pc, #52]	; (964c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb0>)
    9618:	4606      	mov	r6, r0
    961a:	460d      	mov	r5, r1
    961c:	6860      	ldr	r0, [r4, #4]
    961e:	3080      	adds	r0, #128	; 0x80
    9620:	f005 fe58 	bl	f2d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9624:	b120      	cbz	r0, 9630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd94>
    9626:	f640 31ec 	movw	r1, #3052	; 0xbec
    962a:	2031      	movs	r0, #49	; 0x31
    962c:	f7fb fa3e 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9630:	6862      	ldr	r2, [r4, #4]
    9632:	2000      	movs	r0, #0
    9634:	2d01      	cmp	r5, #1
    9636:	f882 611c 	strb.w	r6, [r2, #284]	; 0x11c
    963a:	d004      	beq.n	9646 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdaa>
    963c:	f822 0fca 	strh.w	r0, [r2, #202]!
    9640:	2001      	movs	r0, #1
    9642:	7110      	strb	r0, [r2, #4]
    9644:	bd70      	pop	{r4, r5, r6, pc}
    9646:	f8a2 00d0 	strh.w	r0, [r2, #208]	; 0xd0
    964a:	bd70      	pop	{r4, r5, r6, pc}
    964c:	2000016c 	.word	0x2000016c
    9650:	b538      	push	{r3, r4, r5, lr}
    9652:	4c1f      	ldr	r4, [pc, #124]	; (96d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe34>)
    9654:	2500      	movs	r5, #0
    9656:	6860      	ldr	r0, [r4, #4]
    9658:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    965c:	2901      	cmp	r1, #1
    965e:	d00c      	beq.n	967a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdde>
    9660:	2902      	cmp	r1, #2
    9662:	d133      	bne.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe30>
    9664:	f890 10d4 	ldrb.w	r1, [r0, #212]	; 0xd4
    9668:	2900      	cmp	r1, #0
    966a:	f04f 0106 	mov.w	r1, #6
    966e:	d01a      	beq.n	96a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    9670:	f880 111e 	strb.w	r1, [r0, #286]	; 0x11e
    9674:	2101      	movs	r1, #1
    9676:	2002      	movs	r0, #2
    9678:	e023      	b.n	96c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    967a:	f890 1205 	ldrb.w	r1, [r0, #517]	; 0x205
    967e:	f88d 1000 	strb.w	r1, [sp]
    9682:	9900      	ldr	r1, [sp, #0]
    9684:	9100      	str	r1, [sp, #0]
    9686:	f89d 1000 	ldrb.w	r1, [sp]
    968a:	2900      	cmp	r1, #0
    968c:	d11e      	bne.n	96cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe30>
    968e:	f500 7380 	add.w	r3, r0, #256	; 0x100
    9692:	f500 710a 	add.w	r1, r0, #552	; 0x228
    9696:	2200      	movs	r2, #0
    9698:	f200 20a1 	addw	r0, r0, #673	; 0x2a1
    969c:	f004 f93e 	bl	d91c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    96a0:	2101      	movs	r1, #1
    96a2:	2005      	movs	r0, #5
    96a4:	e00d      	b.n	96c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    96a6:	2003      	movs	r0, #3
    96a8:	f000 fd24 	bl	a0f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1858>
    96ac:	6860      	ldr	r0, [r4, #4]
    96ae:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    96b2:	0880      	lsrs	r0, r0, #2
    96b4:	f010 0f01 	tst.w	r0, #1
    96b8:	d001      	beq.n	96be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe22>
    96ba:	2011      	movs	r0, #17
    96bc:	e000      	b.n	96c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    96be:	200d      	movs	r0, #13
    96c0:	2101      	movs	r1, #1
    96c2:	f7ff ffa7 	bl	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    96c6:	6860      	ldr	r0, [r4, #4]
    96c8:	f880 52a0 	strb.w	r5, [r0, #672]	; 0x2a0
    96cc:	bd38      	pop	{r3, r4, r5, pc}
    96ce:	0000      	.short	0x0000
    96d0:	2000016c 	.word	0x2000016c
    96d4:	b570      	push	{r4, r5, r6, lr}
    96d6:	4b2b      	ldr	r3, [pc, #172]	; (9784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee8>)
    96d8:	4602      	mov	r2, r0
    96da:	8858      	ldrh	r0, [r3, #2]
    96dc:	4310      	orrs	r0, r2
    96de:	8058      	strh	r0, [r3, #2]
    96e0:	f103 0010 	add.w	r0, r3, #16
    96e4:	2a40      	cmp	r2, #64	; 0x40
    96e6:	6840      	ldr	r0, [r0, #4]
    96e8:	d00d      	beq.n	9706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6a>
    96ea:	0796      	lsls	r6, r2, #30
    96ec:	f04f 0500 	mov.w	r5, #0
    96f0:	f04f 0401 	mov.w	r4, #1
    96f4:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    96f8:	d50c      	bpl.n	9714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe78>
    96fa:	b14e      	cbz	r6, 9710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe74>
    96fc:	f640 613f 	movw	r1, #3647	; 0xe3f
    9700:	2031      	movs	r0, #49	; 0x31
    9702:	f7fb f9d3 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    970a:	2104      	movs	r1, #4
    970c:	f7fe bc8e 	b.w	802c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9710:	6099      	str	r1, [r3, #8]
    9712:	e01c      	b.n	974e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    9714:	b1c6      	cbz	r6, 9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9716:	60d9      	str	r1, [r3, #12]
    9718:	78c9      	ldrb	r1, [r1, #3]
    971a:	2906      	cmp	r1, #6
    971c:	d002      	beq.n	9724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>
    971e:	290b      	cmp	r1, #11
    9720:	d112      	bne.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9722:	e009      	b.n	9738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe9c>
    9724:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    9728:	2919      	cmp	r1, #25
    972a:	d10d      	bne.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    972c:	2100      	movs	r1, #0
    972e:	e9c0 113c 	strd	r1, r1, [r0, #240]	; 0xf0
    9732:	f880 409a 	strb.w	r4, [r0, #154]	; 0x9a
    9736:	e007      	b.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9738:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    973c:	2913      	cmp	r1, #19
    973e:	d103      	bne.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9740:	f880 509a 	strb.w	r5, [r0, #154]	; 0x9a
    9744:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
    9748:	0791      	lsls	r1, r2, #30
    974a:	d516      	bpl.n	977a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    974c:	6899      	ldr	r1, [r3, #8]
    974e:	78c9      	ldrb	r1, [r1, #3]
    9750:	2905      	cmp	r1, #5
    9752:	d002      	beq.n	975a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebe>
    9754:	290b      	cmp	r1, #11
    9756:	d110      	bne.n	977a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9758:	e009      	b.n	976e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    975a:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    975e:	2917      	cmp	r1, #23
    9760:	d10b      	bne.n	977a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9762:	2100      	movs	r1, #0
    9764:	e9e0 113e 	strd	r1, r1, [r0, #248]!	; 0xf8
    9768:	f800 4c5d 	strb.w	r4, [r0, #-93]
    976c:	e005      	b.n	977a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    976e:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    9772:	2912      	cmp	r1, #18
    9774:	d101      	bne.n	977a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    9776:	f880 509b 	strb.w	r5, [r0, #155]	; 0x9b
    977a:	0690      	lsls	r0, r2, #26
    977c:	d501      	bpl.n	9782 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee6>
    977e:	2008      	movs	r0, #8
    9780:	7058      	strb	r0, [r3, #1]
    9782:	bd70      	pop	{r4, r5, r6, pc}
    9784:	2000015c 	.word	0x2000015c
    9788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    978c:	4c28      	ldr	r4, [pc, #160]	; (9830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf94>)
    978e:	2701      	movs	r7, #1
    9790:	6860      	ldr	r0, [r4, #4]
    9792:	f890 12be 	ldrb.w	r1, [r0, #702]	; 0x2be
    9796:	b109      	cbz	r1, 979c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf00>
    9798:	2601      	movs	r6, #1
    979a:	e000      	b.n	979e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf02>
    979c:	2600      	movs	r6, #0
    979e:	f890 22bf 	ldrb.w	r2, [r0, #703]	; 0x2bf
    97a2:	b10a      	cbz	r2, 97a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0c>
    97a4:	2501      	movs	r5, #1
    97a6:	e000      	b.n	97aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    97a8:	2500      	movs	r5, #0
    97aa:	b90e      	cbnz	r6, 97b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
    97ac:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    97b0:	b90d      	cbnz	r5, 97b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1a>
    97b2:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    97b6:	f100 0362 	add.w	r3, r0, #98	; 0x62
    97ba:	7219      	strb	r1, [r3, #8]
    97bc:	725a      	strb	r2, [r3, #9]
    97be:	22ff      	movs	r2, #255	; 0xff
    97c0:	729a      	strb	r2, [r3, #10]
    97c2:	f006 f882 	bl	f8ca <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    97c6:	6860      	ldr	r0, [r4, #4]
    97c8:	f890 0134 	ldrb.w	r0, [r0, #308]	; 0x134
    97cc:	2801      	cmp	r0, #1
    97ce:	d001      	beq.n	97d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    97d0:	b906      	cbnz	r6, 97d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    97d2:	b115      	cbz	r5, 97da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3e>
    97d4:	2000      	movs	r0, #0
    97d6:	f000 f82d 	bl	9834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    97da:	6860      	ldr	r0, [r4, #4]
    97dc:	302c      	adds	r0, #44	; 0x2c
    97de:	f004 fd91 	bl	e304 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    97e2:	4606      	mov	r6, r0
    97e4:	2105      	movs	r1, #5
    97e6:	6860      	ldr	r0, [r4, #4]
    97e8:	f7fe fc20 	bl	802c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    97ec:	6860      	ldr	r0, [r4, #4]
    97ee:	302c      	adds	r0, #44	; 0x2c
    97f0:	f004 fd88 	bl	e304 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    97f4:	4605      	mov	r5, r0
    97f6:	42ae      	cmp	r6, r5
    97f8:	d20a      	bcs.n	9810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf74>
    97fa:	f7f8 fcd5 	bl	21a8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    97fe:	4601      	mov	r1, r0
    9800:	1ba8      	subs	r0, r5, r6
    9802:	2865      	cmp	r0, #101	; 0x65
    9804:	d200      	bcs.n	9808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>
    9806:	2065      	movs	r0, #101	; 0x65
    9808:	f7f8 fbf0 	bl	1fec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    980c:	b100      	cbz	r0, 9810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf74>
    980e:	2700      	movs	r7, #0
    9810:	6860      	ldr	r0, [r4, #4]
    9812:	f004 fd23 	bl	e25c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9816:	b138      	cbz	r0, 9828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>
    9818:	6863      	ldr	r3, [r4, #4]
    981a:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
    981e:	8818      	ldrh	r0, [r3, #0]
    9820:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    9824:	f004 fcd7 	bl	e1d6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9828:	4638      	mov	r0, r7
    982a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    982e:	0000      	.short	0x0000
    9830:	2000016c 	.word	0x2000016c
    9834:	b510      	push	{r4, lr}
    9836:	4c0f      	ldr	r4, [pc, #60]	; (9874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    9838:	6861      	ldr	r1, [r4, #4]
    983a:	880a      	ldrh	r2, [r1, #0]
    983c:	f8a1 21a0 	strh.w	r2, [r1, #416]	; 0x1a0
    9840:	f881 019e 	strb.w	r0, [r1, #414]	; 0x19e
    9844:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9848:	f005 fd4c 	bl	f2e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    984c:	6861      	ldr	r1, [r4, #4]
    984e:	f881 01a2 	strb.w	r0, [r1, #418]	; 0x1a2
    9852:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    9856:	f005 fd45 	bl	f2e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    985a:	6861      	ldr	r1, [r4, #4]
    985c:	2213      	movs	r2, #19
    985e:	f881 01a3 	strb.w	r0, [r1, #419]	; 0x1a3
    9862:	f501 70ca 	add.w	r0, r1, #404	; 0x194
    9866:	f7fd f893 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    986a:	6861      	ldr	r1, [r4, #4]
    986c:	2000      	movs	r0, #0
    986e:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    9872:	bd10      	pop	{r4, pc}
    9874:	2000016c 	.word	0x2000016c
    9878:	b570      	push	{r4, r5, r6, lr}
    987a:	4d0f      	ldr	r5, [pc, #60]	; (98b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101c>)
    987c:	686c      	ldr	r4, [r5, #4]
    987e:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
    9882:	2922      	cmp	r1, #34	; 0x22
    9884:	d002      	beq.n	988c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    9886:	292e      	cmp	r1, #46	; 0x2e
    9888:	d003      	beq.n	9892 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff6>
    988a:	e011      	b.n	98b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1014>
    988c:	f7ff ffd2 	bl	9834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9890:	e008      	b.n	98a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1008>
    9892:	f894 2096 	ldrb.w	r2, [r4, #150]	; 0x96
    9896:	f104 0080 	add.w	r0, r4, #128	; 0x80
    989a:	2301      	movs	r3, #1
    989c:	210b      	movs	r1, #11
    989e:	f004 f885 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98a2:	b138      	cbz	r0, 98b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1018>
    98a4:	6869      	ldr	r1, [r5, #4]
    98a6:	2000      	movs	r0, #0
    98a8:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    98ac:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    98b0:	2000      	movs	r0, #0
    98b2:	bd70      	pop	{r4, r5, r6, pc}
    98b4:	202a      	movs	r0, #42	; 0x2a
    98b6:	e7e9      	b.n	988c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    98b8:	2000016c 	.word	0x2000016c
    98bc:	b570      	push	{r4, r5, r6, lr}
    98be:	4604      	mov	r4, r0
    98c0:	6840      	ldr	r0, [r0, #4]
    98c2:	2301      	movs	r3, #1
    98c4:	2100      	movs	r1, #0
    98c6:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    98ca:	3080      	adds	r0, #128	; 0x80
    98cc:	f004 f86e 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98d0:	b1b8      	cbz	r0, 9902 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1066>
    98d2:	4d13      	ldr	r5, [pc, #76]	; (9920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    98d4:	68e8      	ldr	r0, [r5, #12]
    98d6:	f004 facf 	bl	de78 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    98da:	6861      	ldr	r1, [r4, #4]
    98dc:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    98e0:	6861      	ldr	r1, [r4, #4]
    98e2:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    98e6:	f005 fd16 	bl	f316 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    98ea:	b160      	cbz	r0, 9906 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x106a>
    98ec:	6861      	ldr	r1, [r4, #4]
    98ee:	2028      	movs	r0, #40	; 0x28
    98f0:	220a      	movs	r2, #10
    98f2:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    98f6:	6861      	ldr	r1, [r4, #4]
    98f8:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    98fc:	f7fd f848 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9900:	e00b      	b.n	991a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    9902:	2001      	movs	r0, #1
    9904:	bd70      	pop	{r4, r5, r6, pc}
    9906:	6861      	ldr	r1, [r4, #4]
    9908:	68e8      	ldr	r0, [r5, #12]
    990a:	f201 21be 	addw	r1, r1, #702	; 0x2be
    990e:	f004 faae 	bl	de6e <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    9912:	6861      	ldr	r1, [r4, #4]
    9914:	200b      	movs	r0, #11
    9916:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    991a:	2000      	movs	r0, #0
    991c:	bd70      	pop	{r4, r5, r6, pc}
    991e:	0000      	.short	0x0000
    9920:	2000015c 	.word	0x2000015c
    9924:	b570      	push	{r4, r5, r6, lr}
    9926:	4604      	mov	r4, r0
    9928:	6840      	ldr	r0, [r0, #4]
    992a:	2301      	movs	r3, #1
    992c:	2100      	movs	r1, #0
    992e:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9932:	3080      	adds	r0, #128	; 0x80
    9934:	f004 f83a 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9938:	b1e0      	cbz	r0, 9974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10d8>
    993a:	4d28      	ldr	r5, [pc, #160]	; (99dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1140>)
    993c:	2100      	movs	r1, #0
    993e:	68e8      	ldr	r0, [r5, #12]
    9940:	f004 fa9d 	bl	de7e <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    9944:	b1c0      	cbz	r0, 9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10dc>
    9946:	68e8      	ldr	r0, [r5, #12]
    9948:	6861      	ldr	r1, [r4, #4]
    994a:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    994e:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    9952:	6861      	ldr	r1, [r4, #4]
    9954:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    9958:	f005 fcdd 	bl	f316 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    995c:	b188      	cbz	r0, 9982 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e6>
    995e:	6861      	ldr	r1, [r4, #4]
    9960:	2028      	movs	r0, #40	; 0x28
    9962:	220a      	movs	r2, #10
    9964:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9968:	6861      	ldr	r1, [r4, #4]
    996a:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    996e:	f7fd f80f 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9972:	e030      	b.n	99d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113a>
    9974:	2001      	movs	r0, #1
    9976:	bd70      	pop	{r4, r5, r6, pc}
    9978:	4620      	mov	r0, r4
    997a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    997e:	f000 b897 	b.w	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    9982:	68e8      	ldr	r0, [r5, #12]
    9984:	f004 faa5 	bl	ded2 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    9988:	f003 fff3 	bl	d972 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    998c:	4606      	mov	r6, r0
    998e:	6860      	ldr	r0, [r4, #4]
    9990:	4631      	mov	r1, r6
    9992:	f8c0 62c4 	str.w	r6, [r0, #708]	; 0x2c4
    9996:	68e8      	ldr	r0, [r5, #12]
    9998:	7900      	ldrb	r0, [r0, #4]
    999a:	f004 f966 	bl	dc6a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    999e:	6861      	ldr	r1, [r4, #4]
    99a0:	f8a1 02be 	strh.w	r0, [r1, #702]	; 0x2be
    99a4:	68e8      	ldr	r0, [r5, #12]
    99a6:	4631      	mov	r1, r6
    99a8:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    99ac:	f004 f959 	bl	dc62 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    99b0:	6861      	ldr	r1, [r4, #4]
    99b2:	f8c1 02c0 	str.w	r0, [r1, #704]	; 0x2c0
    99b6:	68e8      	ldr	r0, [r5, #12]
    99b8:	f004 fa8e 	bl	ded8 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    99bc:	6861      	ldr	r1, [r4, #4]
    99be:	f8a1 02c8 	strh.w	r0, [r1, #712]	; 0x2c8
    99c2:	68e8      	ldr	r0, [r5, #12]
    99c4:	f004 fa8b 	bl	dede <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    99c8:	6861      	ldr	r1, [r4, #4]
    99ca:	f8a1 02ca 	strh.w	r0, [r1, #714]	; 0x2ca
    99ce:	6861      	ldr	r1, [r4, #4]
    99d0:	200e      	movs	r0, #14
    99d2:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    99d6:	2000      	movs	r0, #0
    99d8:	bd70      	pop	{r4, r5, r6, pc}
    99da:	0000      	.short	0x0000
    99dc:	2000015c 	.word	0x2000015c
    99e0:	b538      	push	{r3, r4, r5, lr}
    99e2:	4604      	mov	r4, r0
    99e4:	6840      	ldr	r0, [r0, #4]
    99e6:	2301      	movs	r3, #1
    99e8:	2100      	movs	r1, #0
    99ea:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    99ee:	3080      	adds	r0, #128	; 0x80
    99f0:	f003 ffdc 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99f4:	b970      	cbnz	r0, 9a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    99f6:	6860      	ldr	r0, [r4, #4]
    99f8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    99fc:	2a14      	cmp	r2, #20
    99fe:	d009      	beq.n	9a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9a00:	2301      	movs	r3, #1
    9a02:	2105      	movs	r1, #5
    9a04:	3080      	adds	r0, #128	; 0x80
    9a06:	f003 ffd1 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a0a:	b108      	cbz	r0, 9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    9a0c:	2008      	movs	r0, #8
    9a0e:	bd38      	pop	{r3, r4, r5, pc}
    9a10:	2001      	movs	r0, #1
    9a12:	bd38      	pop	{r3, r4, r5, pc}
    9a14:	6860      	ldr	r0, [r4, #4]
    9a16:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    9a1a:	b908      	cbnz	r0, 9a20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    9a1c:	f7ff f840 	bl	8aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9a20:	4d1b      	ldr	r5, [pc, #108]	; (9a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f4>)
    9a22:	6861      	ldr	r1, [r4, #4]
    9a24:	f501 710a 	add.w	r1, r1, #552	; 0x228
    9a28:	68e8      	ldr	r0, [r5, #12]
    9a2a:	f004 fa71 	bl	df10 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    9a2e:	6861      	ldr	r1, [r4, #4]
    9a30:	68e8      	ldr	r0, [r5, #12]
    9a32:	f501 7188 	add.w	r1, r1, #272	; 0x110
    9a36:	f004 fa62 	bl	defe <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    9a3a:	6860      	ldr	r0, [r4, #4]
    9a3c:	f890 12d4 	ldrb.w	r1, [r0, #724]	; 0x2d4
    9a40:	f88d 1000 	strb.w	r1, [sp]
    9a44:	9900      	ldr	r1, [sp, #0]
    9a46:	9100      	str	r1, [sp, #0]
    9a48:	f89d 1000 	ldrb.w	r1, [sp]
    9a4c:	b121      	cbz	r1, 9a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    9a4e:	f240 3117 	movw	r1, #791	; 0x317
    9a52:	2031      	movs	r0, #49	; 0x31
    9a54:	f7fb f82a 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a58:	8801      	ldrh	r1, [r0, #0]
    9a5a:	f8a0 12d6 	strh.w	r1, [r0, #726]	; 0x2d6
    9a5e:	6861      	ldr	r1, [r4, #4]
    9a60:	68e8      	ldr	r0, [r5, #12]
    9a62:	f501 7136 	add.w	r1, r1, #728	; 0x2d8
    9a66:	f004 fa4e 	bl	df06 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    9a6a:	6861      	ldr	r1, [r4, #4]
    9a6c:	68e8      	ldr	r0, [r5, #12]
    9a6e:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
    9a72:	f004 fa41 	bl	def8 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    9a76:	6860      	ldr	r0, [r4, #4]
    9a78:	2209      	movs	r2, #9
    9a7a:	4906      	ldr	r1, [pc, #24]	; (9a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f8>)
    9a7c:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
    9a80:	f7fc ff86 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9a84:	6861      	ldr	r1, [r4, #4]
    9a86:	2016      	movs	r0, #22
    9a88:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    9a8c:	2000      	movs	r0, #0
    9a8e:	bd38      	pop	{r3, r4, r5, pc}
    9a90:	2000015c 	.word	0x2000015c
    9a94:	0000f32f 	.word	0x0000f32f
    9a98:	4901      	ldr	r1, [pc, #4]	; (9aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>)
    9a9a:	68c9      	ldr	r1, [r1, #12]
    9a9c:	f7fd ba36 	b.w	6f0c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    9aa0:	2000015c 	.word	0x2000015c
    9aa4:	4901      	ldr	r1, [pc, #4]	; (9aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>)
    9aa6:	68c9      	ldr	r1, [r1, #12]
    9aa8:	f7fd ba60 	b.w	6f6c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    9aac:	2000015c 	.word	0x2000015c
    9ab0:	b510      	push	{r4, lr}
    9ab2:	6842      	ldr	r2, [r0, #4]
    9ab4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
    9ab8:	070b      	lsls	r3, r1, #28
    9aba:	d501      	bpl.n	9ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1224>
    9abc:	2001      	movs	r0, #1
    9abe:	bd10      	pop	{r4, pc}
    9ac0:	f041 0108 	orr.w	r1, r1, #8
    9ac4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    9ac8:	4904      	ldr	r1, [pc, #16]	; (9adc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1240>)
    9aca:	6840      	ldr	r0, [r0, #4]
    9acc:	68c9      	ldr	r1, [r1, #12]
    9ace:	78c9      	ldrb	r1, [r1, #3]
    9ad0:	f880 1118 	strb.w	r1, [r0, #280]	; 0x118
    9ad4:	f7fe ffe4 	bl	8aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9ad8:	2000      	movs	r0, #0
    9ada:	bd10      	pop	{r4, pc}
    9adc:	2000015c 	.word	0x2000015c
    9ae0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9ae4:	4605      	mov	r5, r0
    9ae6:	6840      	ldr	r0, [r0, #4]
    9ae8:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    9aec:	f010 0f30 	tst.w	r0, #48	; 0x30
    9af0:	d002      	beq.n	9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125c>
    9af2:	2001      	movs	r0, #1
    9af4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9af8:	4c31      	ldr	r4, [pc, #196]	; (9bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1324>)
    9afa:	68e0      	ldr	r0, [r4, #12]
    9afc:	f004 fa22 	bl	df44 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    9b00:	b330      	cbz	r0, 9b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b4>
    9b02:	68e0      	ldr	r0, [r4, #12]
    9b04:	f004 fa18 	bl	df38 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    9b08:	4680      	mov	r8, r0
    9b0a:	68e0      	ldr	r0, [r4, #12]
    9b0c:	f004 fa18 	bl	df40 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    9b10:	4607      	mov	r7, r0
    9b12:	68e0      	ldr	r0, [r4, #12]
    9b14:	f004 fa0e 	bl	df34 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    9b18:	4606      	mov	r6, r0
    9b1a:	68e0      	ldr	r0, [r4, #12]
    9b1c:	f004 fa0e 	bl	df3c <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    9b20:	4601      	mov	r1, r0
    9b22:	f8cd 8000 	str.w	r8, [sp]
    9b26:	6868      	ldr	r0, [r5, #4]
    9b28:	463b      	mov	r3, r7
    9b2a:	4632      	mov	r2, r6
    9b2c:	302c      	adds	r0, #44	; 0x2c
    9b2e:	f004 fc23 	bl	e378 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9b32:	78a0      	ldrb	r0, [r4, #2]
    9b34:	0781      	lsls	r1, r0, #30
    9b36:	f04f 0001 	mov.w	r0, #1
    9b3a:	d503      	bpl.n	9b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a8>
    9b3c:	68a1      	ldr	r1, [r4, #8]
    9b3e:	78c9      	ldrb	r1, [r1, #3]
    9b40:	2914      	cmp	r1, #20
    9b42:	d00a      	beq.n	9b5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12be>
    9b44:	6869      	ldr	r1, [r5, #4]
    9b46:	f891 1095 	ldrb.w	r1, [r1, #149]	; 0x95
    9b4a:	291e      	cmp	r1, #30
    9b4c:	d005      	beq.n	9b5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12be>
    9b4e:	e007      	b.n	9b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    9b50:	4628      	mov	r0, r5
    9b52:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9b56:	f7ff bfab 	b.w	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    9b5a:	6869      	ldr	r1, [r5, #4]
    9b5c:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9b60:	6868      	ldr	r0, [r5, #4]
    9b62:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    9b66:	2901      	cmp	r1, #1
    9b68:	d011      	beq.n	9b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f2>
    9b6a:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    9b6e:	f88d 1004 	strb.w	r1, [sp, #4]
    9b72:	9901      	ldr	r1, [sp, #4]
    9b74:	9101      	str	r1, [sp, #4]
    9b76:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9b7a:	b941      	cbnz	r1, 9b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f2>
    9b7c:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    9b80:	f88d 1000 	strb.w	r1, [sp]
    9b84:	9900      	ldr	r1, [sp, #0]
    9b86:	9100      	str	r1, [sp, #0]
    9b88:	f89d 1000 	ldrb.w	r1, [sp]
    9b8c:	b141      	cbz	r1, 9ba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1304>
    9b8e:	f850 1f84 	ldr.w	r1, [r0, #132]!
    9b92:	f041 0110 	orr.w	r1, r1, #16
    9b96:	6001      	str	r1, [r0, #0]
    9b98:	f7fe ff82 	bl	8aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9b9c:	2000      	movs	r0, #0
    9b9e:	e7a9      	b.n	9af4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1258>
    9ba0:	f850 1f84 	ldr.w	r1, [r0, #132]!
    9ba4:	f041 0120 	orr.w	r1, r1, #32
    9ba8:	6001      	str	r1, [r0, #0]
    9baa:	4805      	ldr	r0, [pc, #20]	; (9bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1324>)
    9bac:	3010      	adds	r0, #16
    9bae:	6843      	ldr	r3, [r0, #4]
    9bb0:	f503 72b9 	add.w	r2, r3, #370	; 0x172
    9bb4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    9bb8:	8818      	ldrh	r0, [r3, #0]
    9bba:	f004 fbe4 	bl	e386 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9bbe:	e7eb      	b.n	9b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12fc>
    9bc0:	2000015c 	.word	0x2000015c
    9bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9bc8:	4604      	mov	r4, r0
    9bca:	6840      	ldr	r0, [r0, #4]
    9bcc:	2301      	movs	r3, #1
    9bce:	210a      	movs	r1, #10
    9bd0:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    9bd4:	3080      	adds	r0, #128	; 0x80
    9bd6:	f003 fee9 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9bda:	b350      	cbz	r0, 9c32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1396>
    9bdc:	4d16      	ldr	r5, [pc, #88]	; (9c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x139c>)
    9bde:	68e8      	ldr	r0, [r5, #12]
    9be0:	f004 f9b0 	bl	df44 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    9be4:	b1c8      	cbz	r0, 9c1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137e>
    9be6:	68e8      	ldr	r0, [r5, #12]
    9be8:	f004 f9a6 	bl	df38 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    9bec:	4607      	mov	r7, r0
    9bee:	68e8      	ldr	r0, [r5, #12]
    9bf0:	f004 f9a6 	bl	df40 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    9bf4:	4680      	mov	r8, r0
    9bf6:	68e8      	ldr	r0, [r5, #12]
    9bf8:	f004 f99c 	bl	df34 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    9bfc:	4606      	mov	r6, r0
    9bfe:	68e8      	ldr	r0, [r5, #12]
    9c00:	f004 f99c 	bl	df3c <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    9c04:	4601      	mov	r1, r0
    9c06:	9700      	str	r7, [sp, #0]
    9c08:	6860      	ldr	r0, [r4, #4]
    9c0a:	4643      	mov	r3, r8
    9c0c:	4632      	mov	r2, r6
    9c0e:	302c      	adds	r0, #44	; 0x2c
    9c10:	f004 fbb2 	bl	e378 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9c14:	6860      	ldr	r0, [r4, #4]
    9c16:	f004 fb21 	bl	e25c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9c1a:	6861      	ldr	r1, [r4, #4]
    9c1c:	2000      	movs	r0, #0
    9c1e:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    9c22:	6861      	ldr	r1, [r4, #4]
    9c24:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    9c28:	f7ff f91a 	bl	8e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    9c2c:	2000      	movs	r0, #0
    9c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9c32:	2001      	movs	r0, #1
    9c34:	e7fb      	b.n	9c2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1392>
    9c36:	0000      	.short	0x0000
    9c38:	2000015c 	.word	0x2000015c
    9c3c:	b538      	push	{r3, r4, r5, lr}
    9c3e:	4604      	mov	r4, r0
    9c40:	6840      	ldr	r0, [r0, #4]
    9c42:	2301      	movs	r3, #1
    9c44:	210b      	movs	r1, #11
    9c46:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9c4a:	3080      	adds	r0, #128	; 0x80
    9c4c:	f003 feae 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c50:	bb60      	cbnz	r0, 9cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1410>
    9c52:	6860      	ldr	r0, [r4, #4]
    9c54:	2301      	movs	r3, #1
    9c56:	2100      	movs	r1, #0
    9c58:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    9c5c:	3080      	adds	r0, #128	; 0x80
    9c5e:	f003 fea5 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c62:	b308      	cbz	r0, 9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x140c>
    9c64:	6860      	ldr	r0, [r4, #4]
    9c66:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    9c6a:	2826      	cmp	r0, #38	; 0x26
    9c6c:	d01e      	beq.n	9cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1410>
    9c6e:	4d29      	ldr	r5, [pc, #164]	; (9d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1478>)
    9c70:	68e8      	ldr	r0, [r5, #12]
    9c72:	f004 f979 	bl	df68 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    9c76:	b1d8      	cbz	r0, 9cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1414>
    9c78:	68e8      	ldr	r0, [r5, #12]
    9c7a:	6862      	ldr	r2, [r4, #4]
    9c7c:	7941      	ldrb	r1, [r0, #5]
    9c7e:	f001 0107 	and.w	r1, r1, #7
    9c82:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    9c86:	7900      	ldrb	r0, [r0, #4]
    9c88:	f000 0107 	and.w	r1, r0, #7
    9c8c:	6860      	ldr	r0, [r4, #4]
    9c8e:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    9c92:	6860      	ldr	r0, [r4, #4]
    9c94:	f890 2135 	ldrb.w	r2, [r0, #309]	; 0x135
    9c98:	f88d 2000 	strb.w	r2, [sp]
    9c9c:	9a00      	ldr	r2, [sp, #0]
    9c9e:	9200      	str	r2, [sp, #0]
    9ca0:	f89d 2000 	ldrb.w	r2, [sp]
    9ca4:	bb72      	cbnz	r2, 9d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    9ca6:	e008      	b.n	9cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x141e>
    9ca8:	2001      	movs	r0, #1
    9caa:	bd38      	pop	{r3, r4, r5, pc}
    9cac:	2020      	movs	r0, #32
    9cae:	bd38      	pop	{r3, r4, r5, pc}
    9cb0:	4620      	mov	r0, r4
    9cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9cb6:	f7ff befb 	b.w	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    9cba:	f890 2134 	ldrb.w	r2, [r0, #308]	; 0x134
    9cbe:	2a01      	cmp	r2, #1
    9cc0:	d020      	beq.n	9d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    9cc2:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    9cc6:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    9cca:	7855      	ldrb	r5, [r2, #1]
    9ccc:	428d      	cmp	r5, r1
    9cce:	d106      	bne.n	9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1442>
    9cd0:	7811      	ldrb	r1, [r2, #0]
    9cd2:	4299      	cmp	r1, r3
    9cd4:	d103      	bne.n	9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1442>
    9cd6:	2102      	movs	r1, #2
    9cd8:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    9cdc:	e012      	b.n	9d04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1468>
    9cde:	480d      	ldr	r0, [pc, #52]	; (9d14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1478>)
    9ce0:	3010      	adds	r0, #16
    9ce2:	6841      	ldr	r1, [r0, #4]
    9ce4:	f501 70c8 	add.w	r0, r1, #400	; 0x190
    9ce8:	880a      	ldrh	r2, [r1, #0]
    9cea:	f820 2b02 	strh.w	r2, [r0], #2
    9cee:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    9cf2:	f800 2b01 	strb.w	r2, [r0], #1
    9cf6:	f891 2063 	ldrb.w	r2, [r1, #99]	; 0x63
    9cfa:	f800 290d 	strb.w	r2, [r0], #-13
    9cfe:	221f      	movs	r2, #31
    9d00:	f7fc fe46 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9d04:	6861      	ldr	r1, [r4, #4]
    9d06:	2023      	movs	r0, #35	; 0x23
    9d08:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    9d0c:	f7fe fec8 	bl	8aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    9d10:	2000      	movs	r0, #0
    9d12:	bd38      	pop	{r3, r4, r5, pc}
    9d14:	2000015c 	.word	0x2000015c
    9d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d1c:	6845      	ldr	r5, [r0, #4]
    9d1e:	4604      	mov	r4, r0
    9d20:	f895 0095 	ldrb.w	r0, [r5, #149]	; 0x95
    9d24:	2822      	cmp	r0, #34	; 0x22
    9d26:	d008      	beq.n	9d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149e>
    9d28:	f05f 0600 	movs.w	r6, #0
    9d2c:	f895 0096 	ldrb.w	r0, [r5, #150]	; 0x96
    9d30:	2824      	cmp	r0, #36	; 0x24
    9d32:	d004      	beq.n	9d3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    9d34:	b38e      	cbz	r6, 9d9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    9d36:	3595      	adds	r5, #149	; 0x95
    9d38:	e002      	b.n	9d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a4>
    9d3a:	2601      	movs	r6, #1
    9d3c:	e7f6      	b.n	9d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1490>
    9d3e:	3596      	adds	r5, #150	; 0x96
    9d40:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>
    9d44:	f8d8 000c 	ldr.w	r0, [r8, #12]
    9d48:	f004 f91a 	bl	df80 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    9d4c:	2700      	movs	r7, #0
    9d4e:	b340      	cbz	r0, 9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1506>
    9d50:	4631      	mov	r1, r6
    9d52:	f8d8 000c 	ldr.w	r0, [r8, #12]
    9d56:	f7fe ff79 	bl	8c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    9d5a:	b310      	cbz	r0, 9da2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1506>
    9d5c:	466a      	mov	r2, sp
    9d5e:	4646      	mov	r6, r8
    9d60:	6860      	ldr	r0, [r4, #4]
    9d62:	f8d8 100c 	ldr.w	r1, [r8, #12]
    9d66:	f003 ff36 	bl	dbd6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9d6a:	b3c0      	cbz	r0, 9dde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    9d6c:	68f0      	ldr	r0, [r6, #12]
    9d6e:	f004 f905 	bl	df7c <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    9d72:	6861      	ldr	r1, [r4, #4]
    9d74:	f8a1 02bc 	strh.w	r0, [r1, #700]	; 0x2bc
    9d78:	6861      	ldr	r1, [r4, #4]
    9d7a:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
    9d7e:	f005 faca 	bl	f316 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9d82:	b368      	cbz	r0, 9de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1544>
    9d84:	6861      	ldr	r1, [r4, #4]
    9d86:	2028      	movs	r0, #40	; 0x28
    9d88:	220a      	movs	r2, #10
    9d8a:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    9d8e:	6861      	ldr	r1, [r4, #4]
    9d90:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    9d94:	f7fc fdfc 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9d98:	e058      	b.n	9e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    9d9a:	e7ff      	b.n	9d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1500>
    9d9c:	2002      	movs	r0, #2
    9d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9da2:	6860      	ldr	r0, [r4, #4]
    9da4:	f04f 0900 	mov.w	r9, #0
    9da8:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    9dac:	2901      	cmp	r1, #1
    9dae:	d018      	beq.n	9de2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
    9db0:	f880 7134 	strb.w	r7, [r0, #308]	; 0x134
    9db4:	b30e      	cbz	r6, 9dfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155e>
    9db6:	f8d8 000c 	ldr.w	r0, [r8, #12]
    9dba:	6861      	ldr	r1, [r4, #4]
    9dbc:	2201      	movs	r2, #1
    9dbe:	78c0      	ldrb	r0, [r0, #3]
    9dc0:	f881 0119 	strb.w	r0, [r1, #281]	; 0x119
    9dc4:	4082      	lsls	r2, r0
    9dc6:	6861      	ldr	r1, [r4, #4]
    9dc8:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9dcc:	b168      	cbz	r0, 9dea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154e>
    9dce:	200a      	movs	r0, #10
    9dd0:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    9dd4:	6860      	ldr	r0, [r4, #4]
    9dd6:	f890 00ce 	ldrb.w	r0, [r0, #206]	; 0xce
    9dda:	b9a8      	cbnz	r0, 9e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156c>
    9ddc:	e008      	b.n	9df0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>
    9dde:	e015      	b.n	9e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1570>
    9de0:	e028      	b.n	9e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1598>
    9de2:	201e      	movs	r0, #30
    9de4:	f7ff fd26 	bl	9834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9de8:	e7e4      	b.n	9db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1518>
    9dea:	f240 4163 	movw	r1, #1123	; 0x463
    9dee:	e001      	b.n	9df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
    9df0:	f240 416b 	movw	r1, #1131	; 0x46b
    9df4:	2031      	movs	r0, #49	; 0x31
    9df6:	f7fa fe59 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9dfa:	702f      	strb	r7, [r5, #0]
    9dfc:	f7fe fe5c 	bl	8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9e00:	4620      	mov	r0, r4
    9e02:	f7ff fe55 	bl	9ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1214>
    9e06:	4681      	mov	r9, r0
    9e08:	4648      	mov	r0, r9
    9e0a:	e7c8      	b.n	9d9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    9e0c:	6860      	ldr	r0, [r4, #4]
    9e0e:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    9e12:	2901      	cmp	r1, #1
    9e14:	d009      	beq.n	9e2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158e>
    9e16:	f880 7134 	strb.w	r7, [r0, #308]	; 0x134
    9e1a:	6860      	ldr	r0, [r4, #4]
    9e1c:	f100 0196 	add.w	r1, r0, #150	; 0x96
    9e20:	42a9      	cmp	r1, r5
    9e22:	d113      	bne.n	9e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    9e24:	f880 7096 	strb.w	r7, [r0, #150]	; 0x96
    9e28:	e010      	b.n	9e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    9e2a:	2000      	movs	r0, #0
    9e2c:	f7ff fd02 	bl	9834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9e30:	702f      	strb	r7, [r5, #0]
    9e32:	e7f2      	b.n	9e1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157e>
    9e34:	6861      	ldr	r1, [r4, #4]
    9e36:	f89d 0000 	ldrb.w	r0, [sp]
    9e3a:	f881 02be 	strb.w	r0, [r1, #702]	; 0x2be
    9e3e:	6861      	ldr	r1, [r4, #4]
    9e40:	f89d 0001 	ldrb.w	r0, [sp, #1]
    9e44:	f881 02bf 	strb.w	r0, [r1, #703]	; 0x2bf
    9e48:	2026      	movs	r0, #38	; 0x26
    9e4a:	7028      	strb	r0, [r5, #0]
    9e4c:	6860      	ldr	r0, [r4, #4]
    9e4e:	f100 0196 	add.w	r1, r0, #150	; 0x96
    9e52:	42a9      	cmp	r1, r5
    9e54:	d102      	bne.n	9e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    9e56:	f7fe fe2f 	bl	8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9e5a:	e001      	b.n	9e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    9e5c:	f880 70ce 	strb.w	r7, [r0, #206]	; 0xce
    9e60:	2000      	movs	r0, #0
    9e62:	e79c      	b.n	9d9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    9e64:	2000015c 	.word	0x2000015c
    9e68:	b570      	push	{r4, r5, r6, lr}
    9e6a:	6840      	ldr	r0, [r0, #4]
    9e6c:	4d09      	ldr	r5, [pc, #36]	; (9e94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
    9e6e:	f810 1fe4 	ldrb.w	r1, [r0, #228]!
    9e72:	f041 0104 	orr.w	r1, r1, #4
    9e76:	7001      	strb	r1, [r0, #0]
    9e78:	68e8      	ldr	r0, [r5, #12]
    9e7a:	f004 f895 	bl	dfa8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    9e7e:	4604      	mov	r4, r0
    9e80:	68e8      	ldr	r0, [r5, #12]
    9e82:	f004 f895 	bl	dfb0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    9e86:	4601      	mov	r1, r0
    9e88:	4620      	mov	r0, r4
    9e8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9e8e:	f000 b91b 	b.w	a0c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    9e92:	0000      	.short	0x0000
    9e94:	2000015c 	.word	0x2000015c
    9e98:	480a      	ldr	r0, [pc, #40]	; (9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1628>)
    9e9a:	68c0      	ldr	r0, [r0, #12]
    9e9c:	7901      	ldrb	r1, [r0, #4]
    9e9e:	4809      	ldr	r0, [pc, #36]	; (9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1628>)
    9ea0:	3010      	adds	r0, #16
    9ea2:	6840      	ldr	r0, [r0, #4]
    9ea4:	f890 0095 	ldrb.w	r0, [r0, #149]	; 0x95
    9ea8:	2822      	cmp	r0, #34	; 0x22
    9eaa:	d007      	beq.n	9ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1620>
    9eac:	282e      	cmp	r0, #46	; 0x2e
    9eae:	d005      	beq.n	9ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1620>
    9eb0:	2829      	cmp	r0, #41	; 0x29
    9eb2:	d005      	beq.n	9ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1624>
    9eb4:	f05f 00fe 	movs.w	r0, #254	; 0xfe
    9eb8:	f000 b906 	b.w	a0c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    9ebc:	2016      	movs	r0, #22
    9ebe:	e7fb      	b.n	9eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    9ec0:	2023      	movs	r0, #35	; 0x23
    9ec2:	e7f9      	b.n	9eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    9ec4:	2000015c 	.word	0x2000015c
    9ec8:	b510      	push	{r4, lr}
    9eca:	4604      	mov	r4, r0
    9ecc:	6840      	ldr	r0, [r0, #4]
    9ece:	2301      	movs	r3, #1
    9ed0:	4619      	mov	r1, r3
    9ed2:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    9ed6:	3080      	adds	r0, #128	; 0x80
    9ed8:	f003 fd68 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9edc:	b108      	cbz	r0, 9ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    9ede:	2000      	movs	r0, #0
    9ee0:	bd10      	pop	{r4, pc}
    9ee2:	4806      	ldr	r0, [pc, #24]	; (9efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1660>)
    9ee4:	68c0      	ldr	r0, [r0, #12]
    9ee6:	f004 f88d 	bl	e004 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    9eea:	6861      	ldr	r1, [r4, #4]
    9eec:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    9ef0:	6861      	ldr	r1, [r4, #4]
    9ef2:	2007      	movs	r0, #7
    9ef4:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    9ef8:	e7f1      	b.n	9ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1642>
    9efa:	0000      	.short	0x0000
    9efc:	2000015c 	.word	0x2000015c
    9f00:	b570      	push	{r4, r5, r6, lr}
    9f02:	4604      	mov	r4, r0
    9f04:	483a      	ldr	r0, [pc, #232]	; (9ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    9f06:	6861      	ldr	r1, [r4, #4]
    9f08:	2500      	movs	r5, #0
    9f0a:	68c0      	ldr	r0, [r0, #12]
    9f0c:	7902      	ldrb	r2, [r0, #4]
    9f0e:	f891 0095 	ldrb.w	r0, [r1, #149]	; 0x95
    9f12:	2a16      	cmp	r2, #22
    9f14:	d034      	beq.n	9f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    9f16:	dc06      	bgt.n	9f26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x168a>
    9f18:	2a0e      	cmp	r2, #14
    9f1a:	d009      	beq.n	9f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
    9f1c:	2a12      	cmp	r2, #18
    9f1e:	d01b      	beq.n	9f58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    9f20:	2a14      	cmp	r2, #20
    9f22:	d162      	bne.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9f24:	e01f      	b.n	9f66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ca>
    9f26:	2a17      	cmp	r2, #23
    9f28:	d043      	beq.n	9fb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1716>
    9f2a:	2a23      	cmp	r2, #35	; 0x23
    9f2c:	d15d      	bne.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9f2e:	e055      	b.n	9fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1740>
    9f30:	2804      	cmp	r0, #4
    9f32:	d15a      	bne.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9f34:	4620      	mov	r0, r4
    9f36:	f005 fa0b 	bl	f350 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    9f3a:	482d      	ldr	r0, [pc, #180]	; (9ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    9f3c:	2207      	movs	r2, #7
    9f3e:	3010      	adds	r0, #16
    9f40:	6841      	ldr	r1, [r0, #4]
    9f42:	8808      	ldrh	r0, [r1, #0]
    9f44:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    9f48:	201a      	movs	r0, #26
    9f4a:	f881 01ae 	strb.w	r0, [r1, #430]	; 0x1ae
    9f4e:	f501 70d2 	add.w	r0, r1, #420	; 0x1a4
    9f52:	f7fc fd1d 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    9f56:	e048      	b.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9f58:	2810      	cmp	r0, #16
    9f5a:	d146      	bne.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9f5c:	4620      	mov	r0, r4
    9f5e:	f005 fa15 	bl	f38c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xd6>
    9f62:	4605      	mov	r5, r0
    9f64:	e041      	b.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9f66:	281e      	cmp	r0, #30
    9f68:	d13f      	bne.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9f6a:	4620      	mov	r0, r4
    9f6c:	f005 f9f0 	bl	f350 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    9f70:	6860      	ldr	r0, [r4, #4]
    9f72:	2105      	movs	r1, #5
    9f74:	30e4      	adds	r0, #228	; 0xe4
    9f76:	f005 f95e 	bl	f236 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9f7a:	f7fe ff71 	bl	8e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c4>
    9f7e:	e034      	b.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9f80:	2822      	cmp	r0, #34	; 0x22
    9f82:	d001      	beq.n	9f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ec>
    9f84:	282e      	cmp	r0, #46	; 0x2e
    9f86:	d130      	bne.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9f88:	4620      	mov	r0, r4
    9f8a:	f005 f9e1 	bl	f350 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x9a>
    9f8e:	6860      	ldr	r0, [r4, #4]
    9f90:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    9f94:	2923      	cmp	r1, #35	; 0x23
    9f96:	d028      	beq.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9f98:	2108      	movs	r1, #8
    9f9a:	30e4      	adds	r0, #228	; 0xe4
    9f9c:	f005 f94b 	bl	f236 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9fa0:	6860      	ldr	r0, [r4, #4]
    9fa2:	210b      	movs	r1, #11
    9fa4:	30e4      	adds	r0, #228	; 0xe4
    9fa6:	f005 f946 	bl	f236 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6f0>
    9faa:	201a      	movs	r0, #26
    9fac:	f7ff fc42 	bl	9834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9fb0:	e01b      	b.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9fb2:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
    9fb6:	2824      	cmp	r0, #36	; 0x24
    9fb8:	d117      	bne.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9fba:	2600      	movs	r6, #0
    9fbc:	f881 6096 	strb.w	r6, [r1, #150]	; 0x96
    9fc0:	f7fe fd7a 	bl	8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9fc4:	6860      	ldr	r0, [r4, #4]
    9fc6:	f890 0134 	ldrb.w	r0, [r0, #308]	; 0x134
    9fca:	2801      	cmp	r0, #1
    9fcc:	d102      	bne.n	9fd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1738>
    9fce:	2000      	movs	r0, #0
    9fd0:	f7ff fc30 	bl	9834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf98>
    9fd4:	6860      	ldr	r0, [r4, #4]
    9fd6:	f880 6134 	strb.w	r6, [r0, #308]	; 0x134
    9fda:	e006      	b.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9fdc:	2829      	cmp	r0, #41	; 0x29
    9fde:	d104      	bne.n	9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9fe0:	4804      	ldr	r0, [pc, #16]	; (9ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1758>)
    9fe2:	6801      	ldr	r1, [r0, #0]
    9fe4:	b109      	cbz	r1, 9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    9fe6:	4620      	mov	r0, r4
    9fe8:	4788      	blx	r1
    9fea:	4628      	mov	r0, r5
    9fec:	bd70      	pop	{r4, r5, r6, pc}
    9fee:	0000      	.short	0x0000
    9ff0:	2000015c 	.word	0x2000015c
    9ff4:	200002d0 	.word	0x200002d0
    9ff8:	b570      	push	{r4, r5, r6, lr}
    9ffa:	4604      	mov	r4, r0
    9ffc:	6840      	ldr	r0, [r0, #4]
    9ffe:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
    a002:	0789      	lsls	r1, r1, #30
    a004:	d507      	bpl.n	a016 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177a>
    a006:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    a00a:	2301      	movs	r3, #1
    a00c:	2108      	movs	r1, #8
    a00e:	3080      	adds	r0, #128	; 0x80
    a010:	f003 fccc 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a014:	b308      	cbz	r0, a05a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17be>
    a016:	6860      	ldr	r0, [r4, #4]
    a018:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
    a01c:	0780      	lsls	r0, r0, #30
    a01e:	d416      	bmi.n	a04e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    a020:	4d28      	ldr	r5, [pc, #160]	; (a0c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    a022:	68e8      	ldr	r0, [r5, #12]
    a024:	f003 fff0 	bl	e008 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    a028:	6861      	ldr	r1, [r4, #4]
    a02a:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
    a02e:	68e8      	ldr	r0, [r5, #12]
    a030:	6862      	ldr	r2, [r4, #4]
    a032:	f830 1f05 	ldrh.w	r1, [r0, #5]!
    a036:	f8a2 10e0 	strh.w	r1, [r2, #224]	; 0xe0
    a03a:	6861      	ldr	r1, [r4, #4]
    a03c:	8840      	ldrh	r0, [r0, #2]
    a03e:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    a042:	6860      	ldr	r0, [r4, #4]
    a044:	f810 1fd5 	ldrb.w	r1, [r0, #213]!
    a048:	f041 0102 	orr.w	r1, r1, #2
    a04c:	7001      	strb	r1, [r0, #0]
    a04e:	6860      	ldr	r0, [r4, #4]
    a050:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    a054:	07c9      	lsls	r1, r1, #31
    a056:	d002      	beq.n	a05e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c2>
    a058:	e015      	b.n	a086 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ea>
    a05a:	2001      	movs	r0, #1
    a05c:	bd70      	pop	{r4, r5, r6, pc}
    a05e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
    a062:	078a      	lsls	r2, r1, #30
    a064:	d504      	bpl.n	a070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d4>
    a066:	f240 3155 	movw	r1, #853	; 0x355
    a06a:	2031      	movs	r0, #49	; 0x31
    a06c:	f7fa fd1e 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a070:	f041 0102 	orr.w	r1, r1, #2
    a074:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    a078:	f7fe fd12 	bl	8aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    a07c:	6860      	ldr	r0, [r4, #4]
    a07e:	f890 00d5 	ldrb.w	r0, [r0, #213]	; 0xd5
    a082:	07c0      	lsls	r0, r0, #31
    a084:	d005      	beq.n	a092 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f6>
    a086:	6861      	ldr	r1, [r4, #4]
    a088:	2203      	movs	r2, #3
    a08a:	f101 00d6 	add.w	r0, r1, #214	; 0xd6
    a08e:	f7fc fc7f 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a092:	6861      	ldr	r1, [r4, #4]
    a094:	2000      	movs	r0, #0
    a096:	f891 2095 	ldrb.w	r2, [r1, #149]	; 0x95
    a09a:	2a06      	cmp	r2, #6
    a09c:	d104      	bne.n	a0a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x180c>
    a09e:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    a0a2:	6861      	ldr	r1, [r4, #4]
    a0a4:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    a0a8:	6861      	ldr	r1, [r4, #4]
    a0aa:	f891 213a 	ldrb.w	r2, [r1, #314]	; 0x13a
    a0ae:	b13a      	cbz	r2, a0c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>
    a0b0:	f881 013a 	strb.w	r0, [r1, #314]	; 0x13a
    a0b4:	6861      	ldr	r1, [r4, #4]
    a0b6:	f891 2095 	ldrb.w	r2, [r1, #149]	; 0x95
    a0ba:	b90a      	cbnz	r2, a0c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1824>
    a0bc:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    a0c0:	2000      	movs	r0, #0
    a0c2:	bd70      	pop	{r4, r5, r6, pc}
    a0c4:	2000015c 	.word	0x2000015c
    a0c8:	4603      	mov	r3, r0
    a0ca:	2000      	movs	r0, #0
    a0cc:	2b16      	cmp	r3, #22
    a0ce:	d00b      	beq.n	a0e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    a0d0:	2b23      	cmp	r3, #35	; 0x23
    a0d2:	d003      	beq.n	a0dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1840>
    a0d4:	2b24      	cmp	r3, #36	; 0x24
    a0d6:	d001      	beq.n	a0dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1840>
    a0d8:	2b25      	cmp	r3, #37	; 0x25
    a0da:	d108      	bne.n	a0ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    a0dc:	4a04      	ldr	r2, [pc, #16]	; (a0f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>)
    a0de:	6812      	ldr	r2, [r2, #0]
    a0e0:	2a00      	cmp	r2, #0
    a0e2:	d004      	beq.n	a0ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1852>
    a0e4:	4618      	mov	r0, r3
    a0e6:	4710      	bx	r2
    a0e8:	4608      	mov	r0, r1
    a0ea:	f7ff bbc5 	b.w	9878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    a0ee:	4770      	bx	lr
    a0f0:	200002cc 	.word	0x200002cc
    a0f4:	4a03      	ldr	r2, [pc, #12]	; (a104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>)
    a0f6:	6852      	ldr	r2, [r2, #4]
    a0f8:	f882 011b 	strb.w	r0, [r2, #283]	; 0x11b
    a0fc:	f882 111a 	strb.w	r1, [r2, #282]	; 0x11a
    a100:	4770      	bx	lr
    a102:	0000      	.short	0x0000
    a104:	2000016c 	.word	0x2000016c
    a108:	4915      	ldr	r1, [pc, #84]	; (a160 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c4>)
    a10a:	b510      	push	{r4, lr}
    a10c:	6889      	ldr	r1, [r1, #8]
    a10e:	790a      	ldrb	r2, [r1, #4]
    a110:	6841      	ldr	r1, [r0, #4]
    a112:	f891 3095 	ldrb.w	r3, [r1, #149]	; 0x95
    a116:	2b0a      	cmp	r3, #10
    a118:	d10a      	bne.n	a130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>
    a11a:	f891 3119 	ldrb.w	r3, [r1, #281]	; 0x119
    a11e:	4293      	cmp	r3, r2
    a120:	d106      	bne.n	a130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1894>
    a122:	2200      	movs	r2, #0
    a124:	f881 2095 	strb.w	r2, [r1, #149]	; 0x95
    a128:	6840      	ldr	r0, [r0, #4]
    a12a:	f880 20ce 	strb.w	r2, [r0, #206]	; 0xce
    a12e:	bd10      	pop	{r4, pc}
    a130:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
    a134:	071c      	lsls	r4, r3, #28
    a136:	d507      	bpl.n	a148 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ac>
    a138:	f023 0008 	bic.w	r0, r3, #8
    a13c:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    a140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a144:	f7fe bcb8 	b.w	8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    a148:	2aff      	cmp	r2, #255	; 0xff
    a14a:	d004      	beq.n	a156 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ba>
    a14c:	f240 719c 	movw	r1, #1948	; 0x79c
    a150:	2031      	movs	r0, #49	; 0x31
    a152:	f7fa fcab 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a15a:	f005 b9af 	b.w	f4bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x206>
    a15e:	0000      	.short	0x0000
    a160:	2000015c 	.word	0x2000015c
    a164:	4808      	ldr	r0, [pc, #32]	; (a188 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ec>)
    a166:	b510      	push	{r4, lr}
    a168:	6840      	ldr	r0, [r0, #4]
    a16a:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
    a16e:	b941      	cbnz	r1, a182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e6>
    a170:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    a174:	2301      	movs	r3, #1
    a176:	2106      	movs	r1, #6
    a178:	3080      	adds	r0, #128	; 0x80
    a17a:	f003 fc17 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a17e:	2800      	cmp	r0, #0
    a180:	d000      	beq.n	a184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e8>
    a182:	2001      	movs	r0, #1
    a184:	bd10      	pop	{r4, pc}
    a186:	0000      	.short	0x0000
    a188:	2000016c 	.word	0x2000016c
    a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a18e:	4c5e      	ldr	r4, [pc, #376]	; (a308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    a190:	4607      	mov	r7, r0
    a192:	4615      	mov	r5, r2
    a194:	6860      	ldr	r0, [r4, #4]
    a196:	2200      	movs	r2, #0
    a198:	b111      	cbz	r1, a1a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1904>
    a19a:	f8a0 2226 	strh.w	r2, [r0, #550]	; 0x226
    a19e:	e006      	b.n	a1ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1912>
    a1a0:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    a1a4:	f8b0 2216 	ldrh.w	r2, [r0, #534]	; 0x216
    a1a8:	4411      	add	r1, r2
    a1aa:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    a1ae:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    a1b2:	f88d 1000 	strb.w	r1, [sp]
    a1b6:	9900      	ldr	r1, [sp, #0]
    a1b8:	9100      	str	r1, [sp, #0]
    a1ba:	f89d 1000 	ldrb.w	r1, [sp]
    a1be:	b939      	cbnz	r1, a1d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1934>
    a1c0:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    a1c4:	2301      	movs	r3, #1
    a1c6:	4619      	mov	r1, r3
    a1c8:	3080      	adds	r0, #128	; 0x80
    a1ca:	f003 fbef 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1ce:	b130      	cbz	r0, a1de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1942>
    a1d0:	6860      	ldr	r0, [r4, #4]
    a1d2:	f830 1fc8 	ldrh.w	r1, [r0, #200]!
    a1d6:	f8b0 214e 	ldrh.w	r2, [r0, #334]	; 0x14e
    a1da:	4411      	add	r1, r2
    a1dc:	8001      	strh	r1, [r0, #0]
    a1de:	6861      	ldr	r1, [r4, #4]
    a1e0:	f891 00ce 	ldrb.w	r0, [r1, #206]	; 0xce
    a1e4:	b130      	cbz	r0, a1f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1958>
    a1e6:	f8b1 20ca 	ldrh.w	r2, [r1, #202]	; 0xca
    a1ea:	f8b1 3216 	ldrh.w	r3, [r1, #534]	; 0x216
    a1ee:	441a      	add	r2, r3
    a1f0:	f8a1 20ca 	strh.w	r2, [r1, #202]	; 0xca
    a1f4:	f991 20d2 	ldrsb.w	r2, [r1, #210]	; 0xd2
    a1f8:	2a00      	cmp	r2, #0
    a1fa:	dd06      	ble.n	a20a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196e>
    a1fc:	f8b1 30d0 	ldrh.w	r3, [r1, #208]	; 0xd0
    a200:	f8b1 6216 	ldrh.w	r6, [r1, #534]	; 0x216
    a204:	4433      	add	r3, r6
    a206:	f8a1 30d0 	strh.w	r3, [r1, #208]	; 0xd0
    a20a:	263d      	movs	r6, #61	; 0x3d
    a20c:	b117      	cbz	r7, a214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    a20e:	f881 60b5 	strb.w	r6, [r1, #181]	; 0xb5
    a212:	e016      	b.n	a242 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    a214:	4b3c      	ldr	r3, [pc, #240]	; (a308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    a216:	3b10      	subs	r3, #16
    a218:	781b      	ldrb	r3, [r3, #0]
    a21a:	2b02      	cmp	r3, #2
    a21c:	d00b      	beq.n	a236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199a>
    a21e:	2b01      	cmp	r3, #1
    a220:	d015      	beq.n	a24e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b2>
    a222:	b36d      	cbz	r5, a280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e4>
    a224:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    a228:	220a      	movs	r2, #10
    a22a:	f7fc fbb1 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a22e:	06e8      	lsls	r0, r5, #27
    a230:	d510      	bpl.n	a254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b8>
    a232:	201e      	movs	r0, #30
    a234:	e01b      	b.n	a26e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d2>
    a236:	f891 011e 	ldrb.w	r0, [r1, #286]	; 0x11e
    a23a:	2806      	cmp	r0, #6
    a23c:	d048      	beq.n	a2d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    a23e:	2016      	movs	r0, #22
    a240:	e046      	b.n	a2d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    a242:	f101 00ac 	add.w	r0, r1, #172	; 0xac
    a246:	220a      	movs	r2, #10
    a248:	f7fc fba2 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    a24c:	e049      	b.n	a2e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    a24e:	f891 0098 	ldrb.w	r0, [r1, #152]	; 0x98
    a252:	e03d      	b.n	a2d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    a254:	0728      	lsls	r0, r5, #28
    a256:	d503      	bpl.n	a260 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    a258:	6860      	ldr	r0, [r4, #4]
    a25a:	f880 60b5 	strb.w	r6, [r0, #181]	; 0xb5
    a25e:	e040      	b.n	a2e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    a260:	06a8      	lsls	r0, r5, #26
    a262:	d501      	bpl.n	a268 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19cc>
    a264:	2023      	movs	r0, #35	; 0x23
    a266:	e002      	b.n	a26e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d2>
    a268:	07a8      	lsls	r0, r5, #30
    a26a:	d004      	beq.n	a276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19da>
    a26c:	202a      	movs	r0, #42	; 0x2a
    a26e:	6861      	ldr	r1, [r4, #4]
    a270:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    a274:	e035      	b.n	a2e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    a276:	f640 51e9 	movw	r1, #3561	; 0xde9
    a27a:	2031      	movs	r0, #49	; 0x31
    a27c:	f7fa fc16 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a280:	b128      	cbz	r0, a28e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f2>
    a282:	f8b1 00ca 	ldrh.w	r0, [r1, #202]	; 0xca
    a286:	f8b1 30cc 	ldrh.w	r3, [r1, #204]	; 0xcc
    a28a:	4298      	cmp	r0, r3
    a28c:	d216      	bcs.n	a2bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a20>
    a28e:	2a00      	cmp	r2, #0
    a290:	dd05      	ble.n	a29e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a02>
    a292:	f8b1 00d0 	ldrh.w	r0, [r1, #208]	; 0xd0
    a296:	f8b1 20cc 	ldrh.w	r2, [r1, #204]	; 0xcc
    a29a:	4290      	cmp	r0, r2
    a29c:	d20e      	bcs.n	a2bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a20>
    a29e:	f8b1 20c8 	ldrh.w	r2, [r1, #200]	; 0xc8
    a2a2:	f8b1 00c6 	ldrh.w	r0, [r1, #198]	; 0xc6
    a2a6:	4282      	cmp	r2, r0
    a2a8:	d30a      	bcc.n	a2c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    a2aa:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
    a2ae:	f88d 2000 	strb.w	r2, [sp]
    a2b2:	9a00      	ldr	r2, [sp, #0]
    a2b4:	9200      	str	r2, [sp, #0]
    a2b6:	f89d 2000 	ldrb.w	r2, [sp]
    a2ba:	b10a      	cbz	r2, a2c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    a2bc:	2022      	movs	r0, #34	; 0x22
    a2be:	e007      	b.n	a2d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    a2c0:	f891 2099 	ldrb.w	r2, [r1, #153]	; 0x99
    a2c4:	b13a      	cbz	r2, a2d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3a>
    a2c6:	f8b1 20c4 	ldrh.w	r2, [r1, #196]	; 0xc4
    a2ca:	4282      	cmp	r2, r0
    a2cc:	d309      	bcc.n	a2e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    a2ce:	2008      	movs	r0, #8
    a2d0:	f881 00b5 	strb.w	r0, [r1, #181]	; 0xb5
    a2d4:	e7b5      	b.n	a242 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    a2d6:	f8b1 00c4 	ldrh.w	r0, [r1, #196]	; 0xc4
    a2da:	2806      	cmp	r0, #6
    a2dc:	d301      	bcc.n	a2e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a46>
    a2de:	203e      	movs	r0, #62	; 0x3e
    a2e0:	e7f6      	b.n	a2d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a34>
    a2e2:	6860      	ldr	r0, [r4, #4]
    a2e4:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    a2e8:	f88d 1000 	strb.w	r1, [sp]
    a2ec:	9900      	ldr	r1, [sp, #0]
    a2ee:	9100      	str	r1, [sp, #0]
    a2f0:	f89d 1000 	ldrb.w	r1, [sp]
    a2f4:	b119      	cbz	r1, a2fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a62>
    a2f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a2fa:	f004 bfdc 	b.w	f2b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    a2fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a302:	2100      	movs	r1, #0
    a304:	f7fd be92 	b.w	802c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a308:	2000016c 	.word	0x2000016c
    a30c:	b570      	push	{r4, r5, r6, lr}
    a30e:	4d2e      	ldr	r5, [pc, #184]	; (a3c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b2c>)
    a310:	6868      	ldr	r0, [r5, #4]
    a312:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    a316:	b151      	cbz	r1, a32e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    a318:	2901      	cmp	r1, #1
    a31a:	d008      	beq.n	a32e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    a31c:	2902      	cmp	r1, #2
    a31e:	d009      	beq.n	a334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    a320:	2903      	cmp	r1, #3
    a322:	d007      	beq.n	a334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    a324:	f640 4159 	movw	r1, #3161	; 0xc59
    a328:	2031      	movs	r0, #49	; 0x31
    a32a:	f7fa fbbf 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a32e:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    a332:	e037      	b.n	a3a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b08>
    a334:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
    a338:	2908      	cmp	r1, #8
    a33a:	d036      	beq.n	a3aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0e>
    a33c:	f8b0 20c4 	ldrh.w	r2, [r0, #196]	; 0xc4
    a340:	f8b0 10c6 	ldrh.w	r1, [r0, #198]	; 0xc6
    a344:	2400      	movs	r4, #0
    a346:	1c93      	adds	r3, r2, #2
    a348:	4299      	cmp	r1, r3
    a34a:	d306      	bcc.n	a35a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abe>
    a34c:	1a89      	subs	r1, r1, r2
    a34e:	1e89      	subs	r1, r1, #2
    a350:	040c      	lsls	r4, r1, #16
    a352:	0c24      	lsrs	r4, r4, #16
    a354:	d001      	beq.n	a35a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1abe>
    a356:	1e64      	subs	r4, r4, #1
    a358:	b2a4      	uxth	r4, r4
    a35a:	f890 10c2 	ldrb.w	r1, [r0, #194]	; 0xc2
    a35e:	b139      	cbz	r1, a370 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ad4>
    a360:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    a364:	2301      	movs	r3, #1
    a366:	2109      	movs	r1, #9
    a368:	3080      	adds	r0, #128	; 0x80
    a36a:	f003 fb1f 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a36e:	b340      	cbz	r0, a3c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b26>
    a370:	f7ff fef8 	bl	a164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c8>
    a374:	b178      	cbz	r0, a396 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afa>
    a376:	686a      	ldr	r2, [r5, #4]
    a378:	2000      	movs	r0, #0
    a37a:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
    a37e:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
    a382:	1c93      	adds	r3, r2, #2
    a384:	4299      	cmp	r1, r3
    a386:	d303      	bcc.n	a390 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    a388:	1a88      	subs	r0, r1, r2
    a38a:	1e80      	subs	r0, r0, #2
    a38c:	d000      	beq.n	a390 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af4>
    a38e:	1e40      	subs	r0, r0, #1
    a390:	42a0      	cmp	r0, r4
    a392:	d200      	bcs.n	a396 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afa>
    a394:	b284      	uxth	r4, r0
    a396:	b10c      	cbz	r4, a39c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b00>
    a398:	1e64      	subs	r4, r4, #1
    a39a:	b2a4      	uxth	r4, r4
    a39c:	6868      	ldr	r0, [r5, #4]
    a39e:	f8b0 1214 	ldrh.w	r1, [r0, #532]	; 0x214
    a3a2:	4421      	add	r1, r4
    a3a4:	f8a0 1210 	strh.w	r1, [r0, #528]	; 0x210
    a3a8:	bd70      	pop	{r4, r5, r6, pc}
    a3aa:	f8b0 10c4 	ldrh.w	r1, [r0, #196]	; 0xc4
    a3ae:	2903      	cmp	r1, #3
    a3b0:	d3bd      	bcc.n	a32e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a92>
    a3b2:	f830 1f8c 	ldrh.w	r1, [r0, #140]!
    a3b6:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    a3b8:	4411      	add	r1, r2
    a3ba:	1c49      	adds	r1, r1, #1
    a3bc:	f8a0 1184 	strh.w	r1, [r0, #388]	; 0x184
    a3c0:	bd70      	pop	{r4, r5, r6, pc}
    a3c2:	2400      	movs	r4, #0
    a3c4:	e7ea      	b.n	a39c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b00>
    a3c6:	0000      	.short	0x0000
    a3c8:	2000016c 	.word	0x2000016c

0000a3cc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a3cc:	4903      	ldr	r1, [pc, #12]	; (a3dc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a3ce:	884a      	ldrh	r2, [r1, #2]
    a3d0:	8002      	strh	r2, [r0, #0]
    a3d2:	7809      	ldrb	r1, [r1, #0]
    a3d4:	7081      	strb	r1, [r0, #2]
    a3d6:	2000      	movs	r0, #0
    a3d8:	4770      	bx	lr
    a3da:	0000      	.short	0x0000
    a3dc:	2000144c 	.word	0x2000144c

0000a3e0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a3e0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a3e2:	460c      	mov	r4, r1
    a3e4:	4605      	mov	r5, r0
    a3e6:	8800      	ldrh	r0, [r0, #0]
    a3e8:	4669      	mov	r1, sp
    a3ea:	f003 fab5 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a3ee:	2200      	movs	r2, #0
    a3f0:	b128      	cbz	r0, a3fe <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    a3f2:	f8c4 2002 	str.w	r2, [r4, #2]
    a3f6:	71a2      	strb	r2, [r4, #6]
    a3f8:	8022      	strh	r2, [r4, #0]
    a3fa:	2002      	movs	r0, #2
    a3fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a3fe:	9901      	ldr	r1, [sp, #4]
    a400:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    a404:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    a408:	f8d1 001e 	ldr.w	r0, [r1, #30]
    a40c:	f8c4 0002 	str.w	r0, [r4, #2]
    a410:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
    a414:	71a0      	strb	r0, [r4, #6]
    a416:	8828      	ldrh	r0, [r5, #0]
    a418:	8020      	strh	r0, [r4, #0]
    a41a:	f891 006c 	ldrb.w	r0, [r1, #108]	; 0x6c
    a41e:	f88d 0008 	strb.w	r0, [sp, #8]
    a422:	9802      	ldr	r0, [sp, #8]
    a424:	9002      	str	r0, [sp, #8]
    a426:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a42a:	2800      	cmp	r0, #0
    a42c:	d1ea      	bne.n	a404 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    a42e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000a430 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    a430:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    a432:	460d      	mov	r5, r1
    a434:	4606      	mov	r6, r0
    a436:	8800      	ldrh	r0, [r0, #0]
    a438:	4669      	mov	r1, sp
    a43a:	f003 fa8d 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a43e:	2800      	cmp	r0, #0
    a440:	d11a      	bne.n	a478 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    a442:	f8dd 4004 	ldr.w	r4, [sp, #4]
    a446:	2700      	movs	r7, #0
    a448:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    a44c:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    a450:	f005 ff2a 	bl	102a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    a454:	70a8      	strb	r0, [r5, #2]
    a456:	7860      	ldrb	r0, [r4, #1]
    a458:	f005 ff26 	bl	102a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    a45c:	70e8      	strb	r0, [r5, #3]
    a45e:	78a0      	ldrb	r0, [r4, #2]
    a460:	f88d 0008 	strb.w	r0, [sp, #8]
    a464:	9802      	ldr	r0, [sp, #8]
    a466:	9002      	str	r0, [sp, #8]
    a468:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a46c:	3c6a      	subs	r4, #106	; 0x6a
    a46e:	2800      	cmp	r0, #0
    a470:	d1ea      	bne.n	a448 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    a472:	8830      	ldrh	r0, [r6, #0]
    a474:	8028      	strh	r0, [r5, #0]
    a476:	2000      	movs	r0, #0
    a478:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000a47c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a47c:	4903      	ldr	r1, [pc, #12]	; (a48c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    a47e:	888a      	ldrh	r2, [r1, #4]
    a480:	8002      	strh	r2, [r0, #0]
    a482:	88c9      	ldrh	r1, [r1, #6]
    a484:	8041      	strh	r1, [r0, #2]
    a486:	2000      	movs	r0, #0
    a488:	4770      	bx	lr
    a48a:	0000      	.short	0x0000
    a48c:	200002dc 	.word	0x200002dc

0000a490 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a490:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a492:	2400      	movs	r4, #0
    a494:	a902      	add	r1, sp, #8
    a496:	f88d 4004 	strb.w	r4, [sp, #4]
    a49a:	f88d 4008 	strb.w	r4, [sp, #8]
    a49e:	9100      	str	r1, [sp, #0]
    a4a0:	7882      	ldrb	r2, [r0, #2]
    a4a2:	7841      	ldrb	r1, [r0, #1]
    a4a4:	7800      	ldrb	r0, [r0, #0]
    a4a6:	ab01      	add	r3, sp, #4
    a4a8:	f006 f871 	bl	1058e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    a4ac:	2800      	cmp	r0, #0
    a4ae:	d112      	bne.n	a4d6 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    a4b0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a4b4:	f005 ffac 	bl	10410 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    a4b8:	b170      	cbz	r0, a4d8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    a4ba:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a4be:	f005 ffa7 	bl	10410 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    a4c2:	b148      	cbz	r0, a4d8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    a4c4:	4805      	ldr	r0, [pc, #20]	; (a4dc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    a4c6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a4ca:	7381      	strb	r1, [r0, #14]
    a4cc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a4d0:	73c1      	strb	r1, [r0, #15]
    a4d2:	8204      	strh	r4, [r0, #16]
    a4d4:	2000      	movs	r0, #0
    a4d6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a4d8:	2011      	movs	r0, #17
    a4da:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a4dc:	2000144c 	.word	0x2000144c

0000a4e0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    a4e0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a4e4:	460f      	mov	r7, r1
    a4e6:	4605      	mov	r5, r0
    a4e8:	7806      	ldrb	r6, [r0, #0]
    a4ea:	f005 ff44 	bl	10376 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    a4ee:	2800      	cmp	r0, #0
    a4f0:	d10a      	bne.n	a508 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a4f2:	4628      	mov	r0, r5
    a4f4:	f005 ff19 	bl	1032a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    a4f8:	2800      	cmp	r0, #0
    a4fa:	d105      	bne.n	a508 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a4fc:	2001      	movs	r0, #1
    a4fe:	f7fa fcc5 	bl	4e8c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    a502:	4286      	cmp	r6, r0
    a504:	d302      	bcc.n	a50c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    a506:	2007      	movs	r0, #7
    a508:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a50c:	2101      	movs	r1, #1
    a50e:	4630      	mov	r0, r6
    a510:	f002 ffab 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a514:	0004      	movs	r4, r0
    a516:	d004      	beq.n	a522 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    a518:	f004 fb12 	bl	eb40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a51c:	b168      	cbz	r0, a53a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    a51e:	200c      	movs	r0, #12
    a520:	e7f2      	b.n	a508 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a522:	2101      	movs	r1, #1
    a524:	4630      	mov	r0, r6
    a526:	f002 ff96 	bl	d456 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a52a:	0004      	movs	r4, r0
    a52c:	d013      	beq.n	a556 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    a52e:	4817      	ldr	r0, [pc, #92]	; (a58c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    a530:	f990 1000 	ldrsb.w	r1, [r0]
    a534:	4620      	mov	r0, r4
    a536:	f004 f877 	bl	e628 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a53a:	4620      	mov	r0, r4
    a53c:	f004 f948 	bl	e7d0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    a540:	7038      	strb	r0, [r7, #0]
    a542:	74e8      	strb	r0, [r5, #19]
    a544:	4629      	mov	r1, r5
    a546:	4620      	mov	r0, r4
    a548:	f7fc fdca 	bl	70e0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    a54c:	4606      	mov	r6, r0
    a54e:	7e68      	ldrb	r0, [r5, #25]
    a550:	b1d0      	cbz	r0, a588 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    a552:	b12e      	cbz	r6, a560 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    a554:	e018      	b.n	a588 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    a556:	f241 3162 	movw	r1, #4962	; 0x1362
    a55a:	2039      	movs	r0, #57	; 0x39
    a55c:	f7fa faa6 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a560:	2200      	movs	r2, #0
    a562:	4668      	mov	r0, sp
    a564:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a566:	f003 f832 	bl	d5ce <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a56a:	2200      	movs	r2, #0
    a56c:	2101      	movs	r1, #1
    a56e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a570:	f003 f8a3 	bl	d6ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a574:	2204      	movs	r2, #4
    a576:	4668      	mov	r0, sp
    a578:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a57a:	f003 f828 	bl	d5ce <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    a57e:	2200      	movs	r2, #0
    a580:	4611      	mov	r1, r2
    a582:	6b60      	ldr	r0, [r4, #52]	; 0x34
    a584:	f003 f899 	bl	d6ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    a588:	4630      	mov	r0, r6
    a58a:	e7bd      	b.n	a508 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    a58c:	200002d4 	.word	0x200002d4

0000a590 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    a590:	7801      	ldrb	r1, [r0, #0]
    a592:	b171      	cbz	r1, a5b2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a594:	7841      	ldrb	r1, [r0, #1]
    a596:	b161      	cbz	r1, a5b2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a598:	8841      	ldrh	r1, [r0, #2]
    a59a:	291b      	cmp	r1, #27
    a59c:	d309      	bcc.n	a5b2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a59e:	8881      	ldrh	r1, [r0, #4]
    a5a0:	291b      	cmp	r1, #27
    a5a2:	d306      	bcc.n	a5b2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    a5a4:	4904      	ldr	r1, [pc, #16]	; (a5b8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    a5a6:	6802      	ldr	r2, [r0, #0]
    a5a8:	600a      	str	r2, [r1, #0]
    a5aa:	8880      	ldrh	r0, [r0, #4]
    a5ac:	8088      	strh	r0, [r1, #4]
    a5ae:	2000      	movs	r0, #0
    a5b0:	4770      	bx	lr
    a5b2:	2012      	movs	r0, #18
    a5b4:	4770      	bx	lr
    a5b6:	0000      	.short	0x0000
    a5b8:	2000144c 	.word	0x2000144c

0000a5bc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    a5bc:	6800      	ldr	r0, [r0, #0]
    a5be:	f240 41e2 	movw	r1, #1250	; 0x4e2
    a5c2:	4288      	cmp	r0, r1
    a5c4:	d303      	bcc.n	a5ce <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    a5c6:	4903      	ldr	r1, [pc, #12]	; (a5d4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    a5c8:	6088      	str	r0, [r1, #8]
    a5ca:	2000      	movs	r0, #0
    a5cc:	4770      	bx	lr
    a5ce:	2012      	movs	r0, #18
    a5d0:	4770      	bx	lr
    a5d2:	0000      	.short	0x0000
    a5d4:	2000144c 	.word	0x2000144c

0000a5d8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    a5d8:	4a03      	ldr	r2, [pc, #12]	; (a5e8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    a5da:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    a5de:	6001      	str	r1, [r0, #0]
    a5e0:	6042      	str	r2, [r0, #4]
    a5e2:	2000      	movs	r0, #0
    a5e4:	4770      	bx	lr
    a5e6:	0000      	.short	0x0000
    a5e8:	0000aabc 	.word	0x0000aabc

0000a5ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    a5ec:	b510      	push	{r4, lr}
    a5ee:	2005      	movs	r0, #5
    a5f0:	f000 faee 	bl	abd0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    a5f4:	f7fe f8aa 	bl	874c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    a5f8:	4902      	ldr	r1, [pc, #8]	; (a604 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    a5fa:	4801      	ldr	r0, [pc, #4]	; (a600 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    a5fc:	6048      	str	r0, [r1, #4]
    a5fe:	bd10      	pop	{r4, pc}
    a600:	0000a635 	.word	0x0000a635
    a604:	200002d4 	.word	0x200002d4
    a608:	b51c      	push	{r2, r3, r4, lr}
    a60a:	4909      	ldr	r1, [pc, #36]	; (a630 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    a60c:	e9d1 0100 	ldrd	r0, r1, [r1]
    a610:	e9cd 0100 	strd	r0, r1, [sp]
    a614:	e005      	b.n	a622 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    a616:	9800      	ldr	r0, [sp, #0]
    a618:	f004 fa92 	bl	eb40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a61c:	b108      	cbz	r0, a622 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    a61e:	2001      	movs	r0, #1
    a620:	bd1c      	pop	{r2, r3, r4, pc}
    a622:	4668      	mov	r0, sp
    a624:	f7fa fc7c 	bl	4f20 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a628:	2800      	cmp	r0, #0
    a62a:	d0f4      	beq.n	a616 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    a62c:	2000      	movs	r0, #0
    a62e:	bd1c      	pop	{r2, r3, r4, pc}
    a630:	0000aabc 	.word	0x0000aabc
    a634:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    a638:	4613      	mov	r3, r2
    a63a:	4a33      	ldr	r2, [pc, #204]	; (a708 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>)
    a63c:	460f      	mov	r7, r1
    a63e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    a642:	8814      	ldrh	r4, [r2, #0]
    a644:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    a648:	428c      	cmp	r4, r1
    a64a:	d200      	bcs.n	a64e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
    a64c:	4621      	mov	r1, r4
    a64e:	4688      	mov	r8, r1
    a650:	8891      	ldrh	r1, [r2, #4]
    a652:	42b1      	cmp	r1, r6
    a654:	d200      	bcs.n	a658 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6c>
    a656:	460e      	mov	r6, r1
    a658:	8851      	ldrh	r1, [r2, #2]
    a65a:	f640 0448 	movw	r4, #2120	; 0x848
    a65e:	42a1      	cmp	r1, r4
    a660:	d300      	bcc.n	a664 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x78>
    a662:	4621      	mov	r1, r4
    a664:	88d5      	ldrh	r5, [r2, #6]
    a666:	42a5      	cmp	r5, r4
    a668:	d300      	bcc.n	a66c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>
    a66a:	4625      	mov	r5, r4
    a66c:	42a1      	cmp	r1, r4
    a66e:	d200      	bcs.n	a672 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
    a670:	460c      	mov	r4, r1
    a672:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a676:	2e1b      	cmp	r6, #27
    a678:	d001      	beq.n	a67e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x92>
    a67a:	4295      	cmp	r5, r2
    a67c:	d104      	bne.n	a688 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    a67e:	f1b8 0f1b 	cmp.w	r8, #27
    a682:	d03e      	beq.n	a702 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a684:	4294      	cmp	r4, r2
    a686:	d03c      	beq.n	a702 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a688:	466a      	mov	r2, sp
    a68a:	4619      	mov	r1, r3
    a68c:	f005 fee3 	bl	10456 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    a690:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a694:	4641      	mov	r1, r8
    a696:	4540      	cmp	r0, r8
    a698:	d900      	bls.n	a69c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    a69a:	4608      	mov	r0, r1
    a69c:	80f8      	strh	r0, [r7, #6]
    a69e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a6a2:	42a1      	cmp	r1, r4
    a6a4:	d800      	bhi.n	a6a8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>
    a6a6:	460c      	mov	r4, r1
    a6a8:	813c      	strh	r4, [r7, #8]
    a6aa:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a6ae:	42b1      	cmp	r1, r6
    a6b0:	d800      	bhi.n	a6b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc8>
    a6b2:	460e      	mov	r6, r1
    a6b4:	807e      	strh	r6, [r7, #2]
    a6b6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a6ba:	42a9      	cmp	r1, r5
    a6bc:	d800      	bhi.n	a6c0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd4>
    a6be:	460d      	mov	r5, r1
    a6c0:	80bd      	strh	r5, [r7, #4]
    a6c2:	21ff      	movs	r1, #255	; 0xff
    a6c4:	7039      	strb	r1, [r7, #0]
    a6c6:	381b      	subs	r0, #27
    a6c8:	28e0      	cmp	r0, #224	; 0xe0
    a6ca:	d902      	bls.n	a6d2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe6>
    a6cc:	f640 51a2 	movw	r1, #3490	; 0xda2
    a6d0:	e014      	b.n	a6fc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a6d2:	3e1b      	subs	r6, #27
    a6d4:	2ee0      	cmp	r6, #224	; 0xe0
    a6d6:	d902      	bls.n	a6de <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf2>
    a6d8:	f640 51a4 	movw	r1, #3492	; 0xda4
    a6dc:	e00e      	b.n	a6fc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a6de:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a6e2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a6e6:	4284      	cmp	r4, r0
    a6e8:	d902      	bls.n	a6f0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x104>
    a6ea:	f640 51a6 	movw	r1, #3494	; 0xda6
    a6ee:	e005      	b.n	a6fc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    a6f0:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    a6f4:	4285      	cmp	r5, r0
    a6f6:	d904      	bls.n	a702 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    a6f8:	f640 51a8 	movw	r1, #3496	; 0xda8
    a6fc:	2039      	movs	r0, #57	; 0x39
    a6fe:	f7fa f9d5 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a702:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    a706:	0000      	.short	0x0000
    a708:	200002dc 	.word	0x200002dc
    a70c:	b510      	push	{r4, lr}
    a70e:	480d      	ldr	r0, [pc, #52]	; (a744 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x158>)
    a710:	2100      	movs	r1, #0
    a712:	4b0d      	ldr	r3, [pc, #52]	; (a748 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>)
    a714:	74c1      	strb	r1, [r0, #19]
    a716:	8281      	strh	r1, [r0, #20]
    a718:	221b      	movs	r2, #27
    a71a:	801a      	strh	r2, [r3, #0]
    a71c:	f44f 74a4 	mov.w	r4, #328	; 0x148
    a720:	805c      	strh	r4, [r3, #2]
    a722:	809a      	strh	r2, [r3, #4]
    a724:	80dc      	strh	r4, [r3, #6]
    a726:	7381      	strb	r1, [r0, #14]
    a728:	73c1      	strb	r1, [r0, #15]
    a72a:	2303      	movs	r3, #3
    a72c:	7003      	strb	r3, [r0, #0]
    a72e:	2302      	movs	r3, #2
    a730:	7043      	strb	r3, [r0, #1]
    a732:	8042      	strh	r2, [r0, #2]
    a734:	8082      	strh	r2, [r0, #4]
    a736:	f640 62a6 	movw	r2, #3750	; 0xea6
    a73a:	6082      	str	r2, [r0, #8]
    a73c:	7481      	strb	r1, [r0, #18]
    a73e:	7301      	strb	r1, [r0, #12]
    a740:	bd10      	pop	{r4, pc}
    a742:	0000      	.short	0x0000
    a744:	2000144c 	.word	0x2000144c
    a748:	200002dc 	.word	0x200002dc
    a74c:	b510      	push	{r4, lr}
    a74e:	2101      	movs	r1, #1
    a750:	2000      	movs	r0, #0
    a752:	f002 fe8a 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    a756:	0004      	movs	r4, r0
    a758:	d10a      	bne.n	a770 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x184>
    a75a:	2101      	movs	r1, #1
    a75c:	f002 fe7b 	bl	d456 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    a760:	0004      	movs	r4, r0
    a762:	d007      	beq.n	a774 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x188>
    a764:	4806      	ldr	r0, [pc, #24]	; (a780 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x194>)
    a766:	f990 1000 	ldrsb.w	r1, [r0]
    a76a:	4620      	mov	r0, r4
    a76c:	f003 ff5c 	bl	e628 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    a770:	4620      	mov	r0, r4
    a772:	bd10      	pop	{r4, pc}
    a774:	f240 2167 	movw	r1, #615	; 0x267
    a778:	2039      	movs	r0, #57	; 0x39
    a77a:	f7fa f997 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a77e:	0000      	.short	0x0000
    a780:	200002d4 	.word	0x200002d4

0000a784 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a788:	b087      	sub	sp, #28
    a78a:	460c      	mov	r4, r1
    a78c:	4680      	mov	r8, r0
    a78e:	4605      	mov	r5, r0
    a790:	f004 f821 	bl	e7d6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a794:	b198      	cbz	r0, a7be <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a796:	4628      	mov	r0, r5
    a798:	f004 f810 	bl	e7bc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a79c:	b130      	cbz	r0, a7ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    a79e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a7a2:	2012      	movs	r0, #18
    a7a4:	2900      	cmp	r1, #0
    a7a6:	d00b      	beq.n	a7c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a7a8:	2980      	cmp	r1, #128	; 0x80
    a7aa:	d809      	bhi.n	a7c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a7ac:	4628      	mov	r0, r5
    a7ae:	f003 fff4 	bl	e79a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a7b2:	b140      	cbz	r0, a7c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a7b4:	4640      	mov	r0, r8
    a7b6:	f003 ff01 	bl	e5bc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a7ba:	b130      	cbz	r0, a7ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    a7bc:	e009      	b.n	a7d2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    a7be:	2042      	movs	r0, #66	; 0x42
    a7c0:	b007      	add	sp, #28
    a7c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a7c6:	200c      	movs	r0, #12
    a7c8:	e7fa      	b.n	a7c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a7ca:	4640      	mov	r0, r8
    a7cc:	f003 fff0 	bl	e7b0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a7d0:	b3c8      	cbz	r0, a846 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    a7d2:	4640      	mov	r0, r8
    a7d4:	f004 f9b4 	bl	eb40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a7d8:	2800      	cmp	r0, #0
    a7da:	d1f4      	bne.n	a7c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a7dc:	4640      	mov	r0, r8
    a7de:	f003 ff08 	bl	e5f2 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a7e2:	2800      	cmp	r0, #0
    a7e4:	d1ef      	bne.n	a7c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    a7e6:	4640      	mov	r0, r8
    a7e8:	f7fc fc18 	bl	701c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a7ec:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a7f0:	f242 7110 	movw	r1, #10000	; 0x2710
    a7f4:	fb00 f901 	mul.w	r9, r0, r1
    a7f8:	78e1      	ldrb	r1, [r4, #3]
    a7fa:	4640      	mov	r0, r8
    a7fc:	f003 ffc4 	bl	e788 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a800:	4640      	mov	r0, r8
    a802:	f003 ffd7 	bl	e7b4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a806:	b308      	cbz	r0, a84c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    a808:	2100      	movs	r1, #0
    a80a:	a801      	add	r0, sp, #4
    a80c:	f7fa fba8 	bl	4f60 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a810:	0004      	movs	r4, r0
    a812:	d07b      	beq.n	a90c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    a814:	2100      	movs	r1, #0
    a816:	f7fb ff41 	bl	669c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a81a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a81e:	8020      	strh	r0, [r4, #0]
    a820:	4621      	mov	r1, r4
    a822:	4640      	mov	r0, r8
    a824:	f003 ffee 	bl	e804 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a828:	f000 f9de 	bl	abe8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a82c:	0940      	lsrs	r0, r0, #5
    a82e:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    a832:	07c0      	lsls	r0, r0, #31
    a834:	4d41      	ldr	r5, [pc, #260]	; (a93c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    a836:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a83a:	d011      	beq.n	a860 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    a83c:	8869      	ldrh	r1, [r5, #2]
    a83e:	88aa      	ldrh	r2, [r5, #4]
    a840:	84c1      	strh	r1, [r0, #38]	; 0x26
    a842:	8502      	strh	r2, [r0, #40]	; 0x28
    a844:	e00f      	b.n	a866 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    a846:	e7ff      	b.n	a848 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    a848:	2012      	movs	r0, #18
    a84a:	e7b9      	b.n	a7c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a84c:	464a      	mov	r2, r9
    a84e:	2100      	movs	r1, #0
    a850:	4640      	mov	r0, r8
    a852:	f7fd fad9 	bl	7e08 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a856:	2800      	cmp	r0, #0
    a858:	d0b2      	beq.n	a7c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a85a:	f241 51b5 	movw	r1, #5557	; 0x15b5
    a85e:	e05f      	b.n	a920 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a860:	221b      	movs	r2, #27
    a862:	84c2      	strh	r2, [r0, #38]	; 0x26
    a864:	8502      	strh	r2, [r0, #40]	; 0x28
    a866:	f000 f9bf 	bl	abe8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a86a:	0788      	lsls	r0, r1, #30
    a86c:	f04f 0601 	mov.w	r6, #1
    a870:	d505      	bpl.n	a87e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    a872:	f88d 6008 	strb.w	r6, [sp, #8]
    a876:	a802      	add	r0, sp, #8
    a878:	9403      	str	r4, [sp, #12]
    a87a:	f004 ffcd 	bl	f818 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    a87e:	68a8      	ldr	r0, [r5, #8]
    a880:	62e0      	str	r0, [r4, #44]	; 0x2c
    a882:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a886:	4640      	mov	r0, r8
    a888:	f003 ff9c 	bl	e7c4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a88c:	b910      	cbnz	r0, a894 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    a88e:	4640      	mov	r0, r8
    a890:	f003 ffb6 	bl	e800 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a894:	6127      	str	r7, [r4, #16]
    a896:	8821      	ldrh	r1, [r4, #0]
    a898:	f8ad 1008 	strh.w	r1, [sp, #8]
    a89c:	7ba9      	ldrb	r1, [r5, #14]
    a89e:	f88d 100a 	strb.w	r1, [sp, #10]
    a8a2:	7be9      	ldrb	r1, [r5, #15]
    a8a4:	f88d 100b 	strb.w	r1, [sp, #11]
    a8a8:	8a29      	ldrh	r1, [r5, #16]
    a8aa:	f8ad 100c 	strh.w	r1, [sp, #12]
    a8ae:	a905      	add	r1, sp, #20
    a8b0:	9100      	str	r1, [sp, #0]
    a8b2:	4630      	mov	r0, r6
    a8b4:	ab04      	add	r3, sp, #16
    a8b6:	aa02      	add	r2, sp, #8
    a8b8:	4621      	mov	r1, r4
    a8ba:	f005 fe02 	bl	104c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    a8be:	b140      	cbz	r0, a8d2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    a8c0:	2100      	movs	r1, #0
    a8c2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a8c6:	f7fa fb73 	bl	4fb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a8ca:	b1f0      	cbz	r0, a90a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    a8cc:	f241 6117 	movw	r1, #5655	; 0x1617
    a8d0:	e026      	b.n	a920 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a8d2:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a8d6:	f88d 0018 	strb.w	r0, [sp, #24]
    a8da:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a8de:	f88d 0019 	strb.w	r0, [sp, #25]
    a8e2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a8e6:	f8ad 001a 	strh.w	r0, [sp, #26]
    a8ea:	a906      	add	r1, sp, #24
    a8ec:	4620      	mov	r0, r4
    a8ee:	f003 f903 	bl	daf8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a8f2:	7868      	ldrb	r0, [r5, #1]
    a8f4:	9000      	str	r0, [sp, #0]
    a8f6:	782b      	ldrb	r3, [r5, #0]
    a8f8:	88aa      	ldrh	r2, [r5, #4]
    a8fa:	8869      	ldrh	r1, [r5, #2]
    a8fc:	8820      	ldrh	r0, [r4, #0]
    a8fe:	f7fa fc0d 	bl	511c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a902:	b128      	cbz	r0, a910 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    a904:	f241 6122 	movw	r1, #5666	; 0x1622
    a908:	e00a      	b.n	a920 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    a90a:	e7ff      	b.n	a90c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    a90c:	2009      	movs	r0, #9
    a90e:	e757      	b.n	a7c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a910:	464a      	mov	r2, r9
    a912:	4621      	mov	r1, r4
    a914:	4640      	mov	r0, r8
    a916:	f7fd fa77 	bl	7e08 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a91a:	b120      	cbz	r0, a926 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    a91c:	f241 6124 	movw	r1, #5668	; 0x1624
    a920:	2039      	movs	r0, #57	; 0x39
    a922:	f7fa f8c3 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a926:	4806      	ldr	r0, [pc, #24]	; (a940 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    a928:	6843      	ldr	r3, [r0, #4]
    a92a:	b123      	cbz	r3, a936 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    a92c:	2200      	movs	r2, #0
    a92e:	f504 7195 	add.w	r1, r4, #298	; 0x12a
    a932:	4620      	mov	r0, r4
    a934:	4798      	blx	r3
    a936:	2000      	movs	r0, #0
    a938:	e742      	b.n	a7c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    a93a:	0000      	.short	0x0000
    a93c:	2000144c 	.word	0x2000144c
    a940:	200002d4 	.word	0x200002d4
    a944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a948:	b088      	sub	sp, #32
    a94a:	4604      	mov	r4, r0
    a94c:	8800      	ldrh	r0, [r0, #0]
    a94e:	a906      	add	r1, sp, #24
    a950:	f003 f802 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a954:	2800      	cmp	r0, #0
    a956:	d147      	bne.n	a9e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a958:	9807      	ldr	r0, [sp, #28]
    a95a:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    a95e:	f88d 1008 	strb.w	r1, [sp, #8]
    a962:	9902      	ldr	r1, [sp, #8]
    a964:	9102      	str	r1, [sp, #8]
    a966:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a96a:	3080      	adds	r0, #128	; 0x80
    a96c:	b101      	cbz	r1, a970 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a96e:	2101      	movs	r1, #1
    a970:	f88d 100c 	strb.w	r1, [sp, #12]
    a974:	7901      	ldrb	r1, [r0, #4]
    a976:	f04f 0800 	mov.w	r8, #0
    a97a:	0689      	lsls	r1, r1, #26
    a97c:	d502      	bpl.n	a984 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    a97e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a982:	b149      	cbz	r1, a998 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    a984:	f05f 0100 	movs.w	r1, #0
    a988:	f88d 1004 	strb.w	r1, [sp, #4]
    a98c:	2105      	movs	r1, #5
    a98e:	3064      	adds	r0, #100	; 0x64
    a990:	f004 ffce 	bl	f930 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
    a994:	b110      	cbz	r0, a99c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    a996:	e004      	b.n	a9a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    a998:	2101      	movs	r1, #1
    a99a:	e7f5      	b.n	a988 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    a99c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a9a0:	b308      	cbz	r0, a9e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    a9a2:	8921      	ldrh	r1, [r4, #8]
    a9a4:	88e0      	ldrh	r0, [r4, #6]
    a9a6:	f005 fd48 	bl	1043a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a9aa:	2800      	cmp	r0, #0
    a9ac:	d11c      	bne.n	a9e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a9ae:	88a1      	ldrh	r1, [r4, #4]
    a9b0:	8860      	ldrh	r0, [r4, #2]
    a9b2:	f005 fd42 	bl	1043a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    a9b6:	2800      	cmp	r0, #0
    a9b8:	d116      	bne.n	a9e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a9ba:	8921      	ldrh	r1, [r4, #8]
    a9bc:	88e0      	ldrh	r0, [r4, #6]
    a9be:	f005 fd32 	bl	10426 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    a9c2:	2800      	cmp	r0, #0
    a9c4:	d110      	bne.n	a9e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a9c6:	88a1      	ldrh	r1, [r4, #4]
    a9c8:	8860      	ldrh	r0, [r4, #2]
    a9ca:	f005 fd2c 	bl	10426 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    a9ce:	0006      	movs	r6, r0
    a9d0:	d10a      	bne.n	a9e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    a9d2:	9807      	ldr	r0, [sp, #28]
    a9d4:	f500 7595 	add.w	r5, r0, #298	; 0x12a
    a9d8:	27ff      	movs	r7, #255	; 0xff
    a9da:	706f      	strb	r7, [r5, #1]
    a9dc:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a9e0:	b129      	cbz	r1, a9ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    a9e2:	263a      	movs	r6, #58	; 0x3a
    a9e4:	e02e      	b.n	aa44 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    a9e6:	201a      	movs	r0, #26
    a9e8:	b008      	add	sp, #32
    a9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9ee:	4641      	mov	r1, r8
    a9f0:	aa03      	add	r2, sp, #12
    a9f2:	f005 fd30 	bl	10456 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    a9f6:	8861      	ldrh	r1, [r4, #2]
    a9f8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a9fc:	4281      	cmp	r1, r0
    a9fe:	d200      	bcs.n	aa02 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    aa00:	4608      	mov	r0, r1
    aa02:	80e8      	strh	r0, [r5, #6]
    aa04:	88a1      	ldrh	r1, [r4, #4]
    aa06:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    aa0a:	4281      	cmp	r1, r0
    aa0c:	d200      	bcs.n	aa10 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    aa0e:	4608      	mov	r0, r1
    aa10:	8128      	strh	r0, [r5, #8]
    aa12:	88e2      	ldrh	r2, [r4, #6]
    aa14:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    aa18:	428a      	cmp	r2, r1
    aa1a:	d200      	bcs.n	aa1e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    aa1c:	4611      	mov	r1, r2
    aa1e:	8069      	strh	r1, [r5, #2]
    aa20:	8922      	ldrh	r2, [r4, #8]
    aa22:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    aa26:	428a      	cmp	r2, r1
    aa28:	d200      	bcs.n	aa2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    aa2a:	4611      	mov	r1, r2
    aa2c:	f640 0248 	movw	r2, #2120	; 0x848
    aa30:	80a9      	strh	r1, [r5, #4]
    aa32:	4291      	cmp	r1, r2
    aa34:	d300      	bcc.n	aa38 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    aa36:	4611      	mov	r1, r2
    aa38:	80a9      	strh	r1, [r5, #4]
    aa3a:	4290      	cmp	r0, r2
    aa3c:	d200      	bcs.n	aa40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    aa3e:	4602      	mov	r2, r0
    aa40:	812a      	strh	r2, [r5, #8]
    aa42:	702f      	strb	r7, [r5, #0]
    aa44:	f885 8001 	strb.w	r8, [r5, #1]
    aa48:	4630      	mov	r0, r6
    aa4a:	e7cd      	b.n	a9e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    aa4c:	b51c      	push	{r2, r3, r4, lr}
    aa4e:	490c      	ldr	r1, [pc, #48]	; (aa80 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    aa50:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    aa54:	e9cd 0100 	strd	r0, r1, [sp]
    aa58:	e00a      	b.n	aa70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    aa5a:	9c00      	ldr	r4, [sp, #0]
    aa5c:	4620      	mov	r0, r4
    aa5e:	f004 f86f 	bl	eb40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    aa62:	b128      	cbz	r0, aa70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    aa64:	4620      	mov	r0, r4
    aa66:	f003 fef2 	bl	e84e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    aa6a:	b108      	cbz	r0, aa70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    aa6c:	2001      	movs	r0, #1
    aa6e:	bd1c      	pop	{r2, r3, r4, pc}
    aa70:	4668      	mov	r0, sp
    aa72:	f7fa fa55 	bl	4f20 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    aa76:	2800      	cmp	r0, #0
    aa78:	d0ef      	beq.n	aa5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    aa7a:	2000      	movs	r0, #0
    aa7c:	bd1c      	pop	{r2, r3, r4, pc}
    aa7e:	0000      	.short	0x0000
    aa80:	0000aabc 	.word	0x0000aabc
    aa84:	b510      	push	{r4, lr}
    aa86:	4604      	mov	r4, r0
    aa88:	88c1      	ldrh	r1, [r0, #6]
    aa8a:	8880      	ldrh	r0, [r0, #4]
    aa8c:	f005 fcd5 	bl	1043a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    aa90:	2800      	cmp	r0, #0
    aa92:	d10f      	bne.n	aab4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    aa94:	8861      	ldrh	r1, [r4, #2]
    aa96:	8820      	ldrh	r0, [r4, #0]
    aa98:	f005 fccf 	bl	1043a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    aa9c:	2800      	cmp	r0, #0
    aa9e:	d109      	bne.n	aab4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    aaa0:	4805      	ldr	r0, [pc, #20]	; (aab8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x334>)
    aaa2:	88a1      	ldrh	r1, [r4, #4]
    aaa4:	8081      	strh	r1, [r0, #4]
    aaa6:	8821      	ldrh	r1, [r4, #0]
    aaa8:	8001      	strh	r1, [r0, #0]
    aaaa:	88e1      	ldrh	r1, [r4, #6]
    aaac:	80c1      	strh	r1, [r0, #6]
    aaae:	8861      	ldrh	r1, [r4, #2]
    aab0:	8041      	strh	r1, [r0, #2]
    aab2:	2000      	movs	r0, #0
    aab4:	bd10      	pop	{r4, pc}
    aab6:	0000      	.short	0x0000
    aab8:	200002dc 	.word	0x200002dc
    aabc:	00000000 	.word	0x00000000
    aac0:	00010000 	.word	0x00010000
    aac4:	00000000 	.word	0x00000000
    aac8:	00010000 	.word	0x00010000
    aacc:	0c11fa0c 	.word	0x0c11fa0c
    aad0:	11fa0059 	.word	0x11fa0059
    aad4:	00000000 	.word	0x00000000
    aad8:	00010000 	.word	0x00010000
    aadc:	00000000 	.word	0x00000000
    aae0:	00010000 	.word	0x00010000

0000aae4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    aae4:	b510      	push	{r4, lr}
    aae6:	f7fc f825 	bl	6b34 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    aaea:	4805      	ldr	r0, [pc, #20]	; (ab00 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    aaec:	6840      	ldr	r0, [r0, #4]
    aaee:	f005 fdab 	bl	10648 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    aaf2:	f005 fb50 	bl	10196 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    aaf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aafa:	f7fc b9d5 	b.w	6ea8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    aafe:	0000      	.short	0x0000
    ab00:	200002e4 	.word	0x200002e4

0000ab04 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    ab04:	b510      	push	{r4, lr}
    ab06:	4c05      	ldr	r4, [pc, #20]	; (ab1c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    ab08:	68a0      	ldr	r0, [r4, #8]
    ab0a:	f005 fd9d 	bl	10648 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    ab0e:	68e0      	ldr	r0, [r4, #12]
    ab10:	f005 fd9a 	bl	10648 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    ab14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab18:	f005 bba2 	b.w	10260 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    ab1c:	200002e4 	.word	0x200002e4

0000ab20 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    ab20:	b510      	push	{r4, lr}
    ab22:	4905      	ldr	r1, [pc, #20]	; (ab38 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    ab24:	4805      	ldr	r0, [pc, #20]	; (ab3c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    ab26:	f005 fd82 	bl	1062e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    ab2a:	4804      	ldr	r0, [pc, #16]	; (ab3c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    ab2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab30:	4903      	ldr	r1, [pc, #12]	; (ab40 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    ab32:	1d00      	adds	r0, r0, #4
    ab34:	f005 bd7b 	b.w	1062e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    ab38:	200002f4 	.word	0x200002f4
    ab3c:	200002e8 	.word	0x200002e8
    ab40:	200002fc 	.word	0x200002fc

0000ab44 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    ab44:	b510      	push	{r4, lr}
    ab46:	4908      	ldr	r1, [pc, #32]	; (ab68 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    ab48:	4808      	ldr	r0, [pc, #32]	; (ab6c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ab4a:	f005 fd70 	bl	1062e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    ab4e:	4807      	ldr	r0, [pc, #28]	; (ab6c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ab50:	4907      	ldr	r1, [pc, #28]	; (ab70 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    ab52:	1d00      	adds	r0, r0, #4
    ab54:	f005 fd6b 	bl	1062e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    ab58:	4804      	ldr	r0, [pc, #16]	; (ab6c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    ab5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab5e:	4905      	ldr	r1, [pc, #20]	; (ab74 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    ab60:	3008      	adds	r0, #8
    ab62:	f005 bd64 	b.w	1062e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    ab66:	0000      	.short	0x0000
    ab68:	2000030c 	.word	0x2000030c
    ab6c:	200002e8 	.word	0x200002e8
    ab70:	20000314 	.word	0x20000314
    ab74:	20000304 	.word	0x20000304

0000ab78 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    ab78:	4801      	ldr	r0, [pc, #4]	; (ab80 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    ab7a:	7800      	ldrb	r0, [r0, #0]
    ab7c:	4770      	bx	lr
    ab7e:	0000      	.short	0x0000
    ab80:	200002e4 	.word	0x200002e4
    ab84:	b510      	push	{r4, lr}
    ab86:	f7fc fb6b 	bl	7260 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    ab8a:	f7fd f9eb 	bl	7f64 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    ab8e:	4803      	ldr	r0, [pc, #12]	; (ab9c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    ab90:	f7fc fb4c 	bl	722c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    ab94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab98:	f7fb bfd2 	b.w	6b40 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    ab9c:	200016f1 	.word	0x200016f1
    aba0:	4909      	ldr	r1, [pc, #36]	; (abc8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    aba2:	b510      	push	{r4, lr}
    aba4:	2001      	movs	r0, #1
    aba6:	7008      	strb	r0, [r1, #0]
    aba8:	f7fc fb8a 	bl	72c0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    abac:	f7fd fde6 	bl	877c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    abb0:	f002 fe04 	bl	d7bc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    abb4:	4805      	ldr	r0, [pc, #20]	; (abcc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    abb6:	f7fa fe63 	bl	5880 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    abba:	2000      	movs	r0, #0
    abbc:	f002 fc32 	bl	d424 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    abc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    abc4:	f7fb bfc4 	b.w	6b50 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    abc8:	200002e4 	.word	0x200002e4
    abcc:	200016f1 	.word	0x200016f1

0000abd0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    abd0:	4a04      	ldr	r2, [pc, #16]	; (abe4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    abd2:	08c1      	lsrs	r1, r0, #3
    abd4:	f000 0307 	and.w	r3, r0, #7
    abd8:	2001      	movs	r0, #1
    abda:	4098      	lsls	r0, r3
    abdc:	5c53      	ldrb	r3, [r2, r1]
    abde:	4303      	orrs	r3, r0
    abe0:	5453      	strb	r3, [r2, r1]
    abe2:	4770      	bx	lr
    abe4:	20000020 	.word	0x20000020

0000abe8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    abe8:	4901      	ldr	r1, [pc, #4]	; (abf0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    abea:	e9d1 0100 	ldrd	r0, r1, [r1]
    abee:	4770      	bx	lr
    abf0:	20000020 	.word	0x20000020

0000abf4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    abf4:	4806      	ldr	r0, [pc, #24]	; (ac10 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    abf6:	8801      	ldrh	r1, [r0, #0]
    abf8:	7900      	ldrb	r0, [r0, #4]
    abfa:	0602      	lsls	r2, r0, #24
    abfc:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    ac00:	f000 0001 	and.w	r0, r0, #1
    ac04:	1800      	adds	r0, r0, r0
    ac06:	b2c0      	uxtb	r0, r0
    ac08:	f040 0001 	orr.w	r0, r0, #1
    ac0c:	4770      	bx	lr
    ac0e:	0000      	.short	0x0000
    ac10:	20000020 	.word	0x20000020

0000ac14 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    ac14:	b510      	push	{r4, lr}
    ac16:	f7f9 fb73 	bl	4300 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    ac1a:	2200      	movs	r2, #0
    ac1c:	4b08      	ldr	r3, [pc, #32]	; (ac40 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    ac1e:	4611      	mov	r1, r2
    ac20:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    ac24:	4284      	cmp	r4, r0
    ac26:	d303      	bcc.n	ac30 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    ac28:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    ac2c:	7882      	ldrb	r2, [r0, #2]
    ac2e:	e003      	b.n	ac38 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    ac30:	1c49      	adds	r1, r1, #1
    ac32:	b2c9      	uxtb	r1, r1
    ac34:	290c      	cmp	r1, #12
    ac36:	d3f3      	bcc.n	ac20 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    ac38:	4802      	ldr	r0, [pc, #8]	; (ac44 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    ac3a:	7002      	strb	r2, [r0, #0]
    ac3c:	bd10      	pop	{r4, pc}
    ac3e:	0000      	.short	0x0000
    ac40:	0001069a 	.word	0x0001069a
    ac44:	20000365 	.word	0x20000365

0000ac48 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    ac48:	b570      	push	{r4, r5, r6, lr}
    ac4a:	4605      	mov	r5, r0
    ac4c:	4616      	mov	r6, r2
    ac4e:	460c      	mov	r4, r1
    ac50:	2002      	movs	r0, #2
    ac52:	f000 f9b7 	bl	afc4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ac56:	4906      	ldr	r1, [pc, #24]	; (ac70 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    ac58:	2001      	movs	r0, #1
    ac5a:	1ef6      	subs	r6, r6, #3
    ac5c:	7008      	strb	r0, [r1, #0]
    ac5e:	4805      	ldr	r0, [pc, #20]	; (ac74 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ac60:	6006      	str	r6, [r0, #0]
    ac62:	4804      	ldr	r0, [pc, #16]	; (ac74 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    ac64:	3808      	subs	r0, #8
    ac66:	6005      	str	r5, [r0, #0]
    ac68:	1f00      	subs	r0, r0, #4
    ac6a:	6004      	str	r4, [r0, #0]
    ac6c:	bd70      	pop	{r4, r5, r6, pc}
    ac6e:	0000      	.short	0x0000
    ac70:	20000366 	.word	0x20000366
    ac74:	4000f510 	.word	0x4000f510

0000ac78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    ac78:	b510      	push	{r4, lr}
    ac7a:	4c0c      	ldr	r4, [pc, #48]	; (acac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    ac7c:	7820      	ldrb	r0, [r4, #0]
    ac7e:	b180      	cbz	r0, aca2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    ac80:	490b      	ldr	r1, [pc, #44]	; (acb0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    ac82:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ac86:	6008      	str	r0, [r1, #0]
    ac88:	f000 f86a 	bl	ad60 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    ac8c:	2100      	movs	r1, #0
    ac8e:	b120      	cbz	r0, ac9a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    ac90:	2001      	movs	r0, #1
    ac92:	7060      	strb	r0, [r4, #1]
    ac94:	4807      	ldr	r0, [pc, #28]	; (acb4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    ac96:	6800      	ldr	r0, [r0, #0]
    ac98:	e001      	b.n	ac9e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    ac9a:	7061      	strb	r1, [r4, #1]
    ac9c:	2010      	movs	r0, #16
    ac9e:	70a0      	strb	r0, [r4, #2]
    aca0:	7021      	strb	r1, [r4, #0]
    aca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aca6:	2000      	movs	r0, #0
    aca8:	f000 b98c 	b.w	afc4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    acac:	20000366 	.word	0x20000366
    acb0:	4001f508 	.word	0x4001f508
    acb4:	4000f400 	.word	0x4000f400

0000acb8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    acb8:	b510      	push	{r4, lr}
    acba:	2002      	movs	r0, #2
    acbc:	f000 f982 	bl	afc4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    acc0:	4904      	ldr	r1, [pc, #16]	; (acd4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    acc2:	2001      	movs	r0, #1
    acc4:	7008      	strb	r0, [r1, #0]
    acc6:	f000 f859 	bl	ad7c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    acca:	4903      	ldr	r1, [pc, #12]	; (acd8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    accc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    acd0:	6008      	str	r0, [r1, #0]
    acd2:	bd10      	pop	{r4, pc}
    acd4:	20000366 	.word	0x20000366
    acd8:	4001f504 	.word	0x4001f504

0000acdc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    acdc:	4803      	ldr	r0, [pc, #12]	; (acec <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    acde:	2100      	movs	r1, #0
    ace0:	7001      	strb	r1, [r0, #0]
    ace2:	7041      	strb	r1, [r0, #1]
    ace4:	2110      	movs	r1, #16
    ace6:	7081      	strb	r1, [r0, #2]
    ace8:	4770      	bx	lr
    acea:	0000      	.short	0x0000
    acec:	20000366 	.word	0x20000366

0000acf0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    acf0:	4807      	ldr	r0, [pc, #28]	; (ad10 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    acf2:	b510      	push	{r4, lr}
    acf4:	7801      	ldrb	r1, [r0, #0]
    acf6:	b141      	cbz	r1, ad0a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    acf8:	f000 f832 	bl	ad60 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    acfc:	b118      	cbz	r0, ad06 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    acfe:	4805      	ldr	r0, [pc, #20]	; (ad14 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    ad00:	6800      	ldr	r0, [r0, #0]
    ad02:	b2c0      	uxtb	r0, r0
    ad04:	bd10      	pop	{r4, pc}
    ad06:	2010      	movs	r0, #16
    ad08:	bd10      	pop	{r4, pc}
    ad0a:	7880      	ldrb	r0, [r0, #2]
    ad0c:	bd10      	pop	{r4, pc}
    ad0e:	0000      	.short	0x0000
    ad10:	20000366 	.word	0x20000366
    ad14:	4000f400 	.word	0x4000f400

0000ad18 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    ad18:	4808      	ldr	r0, [pc, #32]	; (ad3c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    ad1a:	b510      	push	{r4, lr}
    ad1c:	7801      	ldrb	r1, [r0, #0]
    ad1e:	b159      	cbz	r1, ad38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    ad20:	4807      	ldr	r0, [pc, #28]	; (ad40 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    ad22:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    ad26:	b128      	cbz	r0, ad34 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    ad28:	f000 f80c 	bl	ad44 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    ad2c:	2800      	cmp	r0, #0
    ad2e:	d000      	beq.n	ad32 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    ad30:	2001      	movs	r0, #1
    ad32:	bd10      	pop	{r4, pc}
    ad34:	2002      	movs	r0, #2
    ad36:	bd10      	pop	{r4, pc}
    ad38:	7840      	ldrb	r0, [r0, #1]
    ad3a:	bd10      	pop	{r4, pc}
    ad3c:	20000366 	.word	0x20000366
    ad40:	4000f000 	.word	0x4000f000
    ad44:	4805      	ldr	r0, [pc, #20]	; (ad5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    ad46:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    ad4a:	b111      	cbz	r1, ad52 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    ad4c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    ad50:	b108      	cbz	r0, ad56 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    ad52:	2000      	movs	r0, #0
    ad54:	4770      	bx	lr
    ad56:	2001      	movs	r0, #1
    ad58:	4770      	bx	lr
    ad5a:	0000      	.short	0x0000
    ad5c:	4000f000 	.word	0x4000f000
    ad60:	4805      	ldr	r0, [pc, #20]	; (ad78 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    ad62:	b510      	push	{r4, lr}
    ad64:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    ad68:	b120      	cbz	r0, ad74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    ad6a:	f7ff ffeb 	bl	ad44 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    ad6e:	b108      	cbz	r0, ad74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    ad70:	2001      	movs	r0, #1
    ad72:	bd10      	pop	{r4, pc}
    ad74:	2000      	movs	r0, #0
    ad76:	bd10      	pop	{r4, pc}
    ad78:	4000f000 	.word	0x4000f000
    ad7c:	4804      	ldr	r0, [pc, #16]	; (ad90 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    ad7e:	2100      	movs	r1, #0
    ad80:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    ad84:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    ad88:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    ad8c:	4770      	bx	lr
    ad8e:	0000      	.short	0x0000
    ad90:	4000f000 	.word	0x4000f000

0000ad94 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad98:	4604      	mov	r4, r0
    ad9a:	461e      	mov	r6, r3
    ad9c:	4690      	mov	r8, r2
    ad9e:	460f      	mov	r7, r1
    ada0:	2001      	movs	r0, #1
    ada2:	f000 f90f 	bl	afc4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    ada6:	4d1e      	ldr	r5, [pc, #120]	; (ae20 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    ada8:	481e      	ldr	r0, [pc, #120]	; (ae24 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    adaa:	f004 0103 	and.w	r1, r4, #3
    adae:	712e      	strb	r6, [r5, #4]
    adb0:	6800      	ldr	r0, [r0, #0]
    adb2:	0432      	lsls	r2, r6, #16
    adb4:	f361 0007 	bfi	r0, r1, #0, #8
    adb8:	f366 200f 	bfi	r0, r6, #8, #8
    adbc:	0c00      	lsrs	r0, r0, #16
    adbe:	4e1a      	ldr	r6, [pc, #104]	; (ae28 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    adc0:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    adc4:	4308      	orrs	r0, r1
    adc6:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    adca:	4818      	ldr	r0, [pc, #96]	; (ae2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    adcc:	6007      	str	r7, [r0, #0]
    adce:	f001 fb82 	bl	c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    add2:	b938      	cbnz	r0, ade4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    add4:	4815      	ldr	r0, [pc, #84]	; (ae2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    add6:	3010      	adds	r0, #16
    add8:	6801      	ldr	r1, [r0, #0]
    adda:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    adde:	ea41 0108 	orr.w	r1, r1, r8
    ade2:	6001      	str	r1, [r0, #0]
    ade4:	f000 f8e4 	bl	afb0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    ade8:	b10c      	cbz	r4, adee <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    adea:	2c04      	cmp	r4, #4
    adec:	d107      	bne.n	adfe <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    adee:	4811      	ldr	r0, [pc, #68]	; (ae34 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    adf0:	490d      	ldr	r1, [pc, #52]	; (ae28 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    adf2:	4a0f      	ldr	r2, [pc, #60]	; (ae30 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    adf4:	1d09      	adds	r1, r1, #4
    adf6:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    adfa:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    adfe:	2001      	movs	r0, #1
    ae00:	7068      	strb	r0, [r5, #1]
    ae02:	70ec      	strb	r4, [r5, #3]
    ae04:	b11c      	cbz	r4, ae0e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    ae06:	2c01      	cmp	r4, #1
    ae08:	d001      	beq.n	ae0e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    ae0a:	2c02      	cmp	r4, #2
    ae0c:	d106      	bne.n	ae1c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    ae0e:	7028      	strb	r0, [r5, #0]
    ae10:	2100      	movs	r1, #0
    ae12:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    ae16:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    ae1a:	6030      	str	r0, [r6, #0]
    ae1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae20:	20000369 	.word	0x20000369
    ae24:	0000afc0 	.word	0x0000afc0
    ae28:	4000f000 	.word	0x4000f000
    ae2c:	4000f508 	.word	0x4000f508
    ae30:	4000f100 	.word	0x4000f100
    ae34:	4001f088 	.word	0x4001f088

0000ae38 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    ae38:	b570      	push	{r4, r5, r6, lr}
    ae3a:	4a1c      	ldr	r2, [pc, #112]	; (aeac <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    ae3c:	7853      	ldrb	r3, [r2, #1]
    ae3e:	b1a3      	cbz	r3, ae6a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    ae40:	4b1b      	ldr	r3, [pc, #108]	; (aeb0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    ae42:	6019      	str	r1, [r3, #0]
    ae44:	1d19      	adds	r1, r3, #4
    ae46:	6008      	str	r0, [r1, #0]
    ae48:	2501      	movs	r5, #1
    ae4a:	7095      	strb	r5, [r2, #2]
    ae4c:	4610      	mov	r0, r2
    ae4e:	78d6      	ldrb	r6, [r2, #3]
    ae50:	4b18      	ldr	r3, [pc, #96]	; (aeb4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    ae52:	7800      	ldrb	r0, [r0, #0]
    ae54:	4c18      	ldr	r4, [pc, #96]	; (aeb8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    ae56:	2100      	movs	r1, #0
    ae58:	b156      	cbz	r6, ae70 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    ae5a:	2e04      	cmp	r6, #4
    ae5c:	d01b      	beq.n	ae96 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    ae5e:	b308      	cbz	r0, aea4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    ae60:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    ae64:	0668      	lsls	r0, r5, #25
    ae66:	6018      	str	r0, [r3, #0]
    ae68:	bd70      	pop	{r4, r5, r6, pc}
    ae6a:	f44f 71c2 	mov.w	r1, #388	; 0x184
    ae6e:	e01a      	b.n	aea6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    ae70:	b178      	cbz	r0, ae92 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    ae72:	4620      	mov	r0, r4
    ae74:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    ae78:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    ae7c:	601e      	str	r6, [r3, #0]
    ae7e:	1271      	asrs	r1, r6, #9
    ae80:	f005 fc40 	bl	10704 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    ae84:	2800      	cmp	r0, #0
    ae86:	d0ef      	beq.n	ae68 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    ae88:	6065      	str	r5, [r4, #4]
    ae8a:	480a      	ldr	r0, [pc, #40]	; (aeb4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    ae8c:	1d00      	adds	r0, r0, #4
    ae8e:	6006      	str	r6, [r0, #0]
    ae90:	bd70      	pop	{r4, r5, r6, pc}
    ae92:	21b3      	movs	r1, #179	; 0xb3
    ae94:	e007      	b.n	aea6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    ae96:	7015      	strb	r5, [r2, #0]
    ae98:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    ae9c:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    aea0:	6025      	str	r5, [r4, #0]
    aea2:	bd70      	pop	{r4, r5, r6, pc}
    aea4:	21c6      	movs	r1, #198	; 0xc6
    aea6:	203c      	movs	r0, #60	; 0x3c
    aea8:	f7f9 fe00 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aeac:	20000369 	.word	0x20000369
    aeb0:	4000f50c 	.word	0x4000f50c
    aeb4:	4001f504 	.word	0x4001f504
    aeb8:	4000f000 	.word	0x4000f000

0000aebc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    aebc:	b570      	push	{r4, r5, r6, lr}
    aebe:	4d05      	ldr	r5, [pc, #20]	; (aed4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    aec0:	2400      	movs	r4, #0
    aec2:	7828      	ldrb	r0, [r5, #0]
    aec4:	b110      	cbz	r0, aecc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    aec6:	f000 f873 	bl	afb0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    aeca:	702c      	strb	r4, [r5, #0]
    aecc:	706c      	strb	r4, [r5, #1]
    aece:	70ac      	strb	r4, [r5, #2]
    aed0:	bd70      	pop	{r4, r5, r6, pc}
    aed2:	0000      	.short	0x0000
    aed4:	20000369 	.word	0x20000369

0000aed8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    aed8:	4802      	ldr	r0, [pc, #8]	; (aee4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    aeda:	2100      	movs	r1, #0
    aedc:	7001      	strb	r1, [r0, #0]
    aede:	7041      	strb	r1, [r0, #1]
    aee0:	7081      	strb	r1, [r0, #2]
    aee2:	4770      	bx	lr
    aee4:	20000369 	.word	0x20000369

0000aee8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    aee8:	480b      	ldr	r0, [pc, #44]	; (af18 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    aeea:	b510      	push	{r4, lr}
    aeec:	7800      	ldrb	r0, [r0, #0]
    aeee:	b158      	cbz	r0, af08 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    aef0:	f44f 7182 	mov.w	r1, #260	; 0x104
    aef4:	4809      	ldr	r0, [pc, #36]	; (af1c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    aef6:	f005 fc05 	bl	10704 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    aefa:	b140      	cbz	r0, af0e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    aefc:	4808      	ldr	r0, [pc, #32]	; (af20 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    aefe:	6800      	ldr	r0, [r0, #0]
    af00:	2800      	cmp	r0, #0
    af02:	d000      	beq.n	af06 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    af04:	2001      	movs	r0, #1
    af06:	bd10      	pop	{r4, pc}
    af08:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    af0c:	e001      	b.n	af12 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    af0e:	f240 11eb 	movw	r1, #491	; 0x1eb
    af12:	203c      	movs	r0, #60	; 0x3c
    af14:	f7f9 fdca 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af18:	20000369 	.word	0x20000369
    af1c:	4000f000 	.word	0x4000f000
    af20:	4000f400 	.word	0x4000f400

0000af24 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    af24:	4801      	ldr	r0, [pc, #4]	; (af2c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    af26:	2101      	movs	r1, #1
    af28:	6081      	str	r1, [r0, #8]
    af2a:	4770      	bx	lr
    af2c:	4000f000 	.word	0x4000f000

0000af30 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    af30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af34:	481b      	ldr	r0, [pc, #108]	; (afa4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    af36:	7800      	ldrb	r0, [r0, #0]
    af38:	b1d8      	cbz	r0, af72 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    af3a:	f8df 806c 	ldr.w	r8, [pc, #108]	; afa8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    af3e:	f44f 7682 	mov.w	r6, #260	; 0x104
    af42:	4631      	mov	r1, r6
    af44:	4640      	mov	r0, r8
    af46:	f005 fbdd 	bl	10704 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    af4a:	2800      	cmp	r0, #0
    af4c:	d128      	bne.n	afa0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    af4e:	2002      	movs	r0, #2
    af50:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    af54:	4c15      	ldr	r4, [pc, #84]	; (afac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    af56:	6820      	ldr	r0, [r4, #0]
    af58:	43c0      	mvns	r0, r0
    af5a:	f340 1500 	sbfx	r5, r0, #4, #1
    af5e:	6820      	ldr	r0, [r4, #0]
    af60:	f040 0010 	orr.w	r0, r0, #16
    af64:	6020      	str	r0, [r4, #0]
    af66:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    af6a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    af6e:	1c6d      	adds	r5, r5, #1
    af70:	e008      	b.n	af84 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    af72:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
    af76:	203c      	movs	r0, #60	; 0x3c
    af78:	f7f9 fd98 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af7c:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    af80:	f7f9 fbf0 	bl	4764 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    af84:	4631      	mov	r1, r6
    af86:	4640      	mov	r0, r8
    af88:	f005 fbbc 	bl	10704 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    af8c:	2800      	cmp	r0, #0
    af8e:	d0f5      	beq.n	af7c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    af90:	b91d      	cbnz	r5, af9a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    af92:	6820      	ldr	r0, [r4, #0]
    af94:	f020 0010 	bic.w	r0, r0, #16
    af98:	6020      	str	r0, [r4, #0]
    af9a:	2002      	movs	r0, #2
    af9c:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    afa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    afa4:	20000369 	.word	0x20000369
    afa8:	4000f000 	.word	0x4000f000
    afac:	e000ed10 	.word	0xe000ed10
    afb0:	4902      	ldr	r1, [pc, #8]	; (afbc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    afb2:	4801      	ldr	r0, [pc, #4]	; (afb8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    afb4:	6008      	str	r0, [r1, #0]
    afb6:	4770      	bx	lr
    afb8:	02020000 	.word	0x02020000
    afbc:	4001f508 	.word	0x4001f508
    afc0:	00010000 	.word	0x00010000

0000afc4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    afc4:	b510      	push	{r4, lr}
    afc6:	4604      	mov	r4, r0
    afc8:	f000 f820 	bl	b00c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    afcc:	2c00      	cmp	r4, #0
    afce:	d00e      	beq.n	afee <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    afd0:	4a0b      	ldr	r2, [pc, #44]	; (b000 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    afd2:	480b      	ldr	r0, [pc, #44]	; (b000 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    afd4:	490b      	ldr	r1, [pc, #44]	; (b004 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    afd6:	3214      	adds	r2, #20
    afd8:	2c01      	cmp	r4, #1
    afda:	d005      	beq.n	afe8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    afdc:	2c02      	cmp	r4, #2
    afde:	d007      	beq.n	aff0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    afe0:	2182      	movs	r1, #130	; 0x82
    afe2:	203d      	movs	r0, #61	; 0x3d
    afe4:	f7f9 fd62 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afe8:	2302      	movs	r3, #2
    afea:	6003      	str	r3, [r0, #0]
    afec:	6011      	str	r1, [r2, #0]
    afee:	bd10      	pop	{r4, pc}
    aff0:	2303      	movs	r3, #3
    aff2:	6003      	str	r3, [r0, #0]
    aff4:	6011      	str	r1, [r2, #0]
    aff6:	4904      	ldr	r1, [pc, #16]	; (b008 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    aff8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    affc:	6008      	str	r0, [r1, #0]
    affe:	bd10      	pop	{r4, pc}
    b000:	4000f500 	.word	0x4000f500
    b004:	200017f3 	.word	0x200017f3
    b008:	4001f504 	.word	0x4001f504
    b00c:	4805      	ldr	r0, [pc, #20]	; (b024 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b00e:	b510      	push	{r4, lr}
    b010:	2100      	movs	r1, #0
    b012:	6001      	str	r1, [r0, #0]
    b014:	6001      	str	r1, [r0, #0]
    b016:	f7ff ff51 	bl	aebc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    b01a:	4903      	ldr	r1, [pc, #12]	; (b028 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b01c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b020:	6008      	str	r0, [r1, #0]
    b022:	bd10      	pop	{r4, pc}
    b024:	4000f500 	.word	0x4000f500
    b028:	4001f508 	.word	0x4001f508

0000b02c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b02c:	4805      	ldr	r0, [pc, #20]	; (b044 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b02e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b032:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b036:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b03a:	2100      	movs	r1, #0
    b03c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b040:	4770      	bx	lr
    b042:	0000      	.short	0x0000
    b044:	40001000 	.word	0x40001000

0000b048 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b048:	4904      	ldr	r1, [pc, #16]	; (b05c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b04a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b04e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b052:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b056:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b05a:	4770      	bx	lr
    b05c:	40001000 	.word	0x40001000

0000b060 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b060:	4801      	ldr	r0, [pc, #4]	; (b068 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b062:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b066:	4770      	bx	lr
    b068:	200014b0 	.word	0x200014b0

0000b06c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    b06c:	4902      	ldr	r1, [pc, #8]	; (b078 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    b06e:	5c08      	ldrb	r0, [r1, r0]
    b070:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    b074:	4770      	bx	lr
    b076:	0000      	.short	0x0000
    b078:	0000bd92 	.word	0x0000bd92

0000b07c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b07e:	4c24      	ldr	r4, [pc, #144]	; (b110 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b080:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b084:	f010 0f10 	tst.w	r0, #16
    b088:	d001      	beq.n	b08e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b08a:	2701      	movs	r7, #1
    b08c:	e000      	b.n	b090 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b08e:	2700      	movs	r7, #0
    b090:	2010      	movs	r0, #16
    b092:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b096:	2002      	movs	r0, #2
    b098:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b09c:	481d      	ldr	r0, [pc, #116]	; (b114 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b09e:	2500      	movs	r5, #0
    b0a0:	491d      	ldr	r1, [pc, #116]	; (b118 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b0a2:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b0a6:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    b0aa:	6008      	str	r0, [r1, #0]
    b0ac:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b0b0:	f44f 7688 	mov.w	r6, #272	; 0x110
    b0b4:	f010 0fff 	tst.w	r0, #255	; 0xff
    b0b8:	d019      	beq.n	b0ee <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    b0ba:	20ff      	movs	r0, #255	; 0xff
    b0bc:	f88d 0000 	strb.w	r0, [sp]
    b0c0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b0c4:	2001      	movs	r0, #1
    b0c6:	6120      	str	r0, [r4, #16]
    b0c8:	e005      	b.n	b0d6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b0ca:	bf00      	nop
    b0cc:	f89d 0000 	ldrb.w	r0, [sp]
    b0d0:	1e40      	subs	r0, r0, #1
    b0d2:	f88d 0000 	strb.w	r0, [sp]
    b0d6:	f89d 0000 	ldrb.w	r0, [sp]
    b0da:	b128      	cbz	r0, b0e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    b0dc:	4631      	mov	r1, r6
    b0de:	4620      	mov	r0, r4
    b0e0:	f005 fb3f 	bl	10762 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b0e4:	2800      	cmp	r0, #0
    b0e6:	d0f1      	beq.n	b0cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    b0e8:	f89d 0000 	ldrb.w	r0, [sp]
    b0ec:	b158      	cbz	r0, b106 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    b0ee:	f000 fc45 	bl	b97c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    b0f2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b0f6:	f000 fdcd 	bl	bc94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b0fa:	2f00      	cmp	r7, #0
    b0fc:	d002      	beq.n	b104 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    b0fe:	2010      	movs	r0, #16
    b100:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b106:	f640 018f 	movw	r1, #2191	; 0x88f
    b10a:	203e      	movs	r0, #62	; 0x3e
    b10c:	f7f9 fcce 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b110:	40001000 	.word	0x40001000
    b114:	200014b0 	.word	0x200014b0
    b118:	4001f508 	.word	0x4001f508

0000b11c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b120:	4d18      	ldr	r5, [pc, #96]	; (b184 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    b122:	4607      	mov	r7, r0
    b124:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b128:	07c2      	lsls	r2, r0, #31
    b12a:	d00f      	beq.n	b14c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    b12c:	4c16      	ldr	r4, [pc, #88]	; (b188 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    b12e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    b132:	f042 0201 	orr.w	r2, r2, #1
    b136:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    b13a:	f040 0002 	orr.w	r0, r0, #2
    b13e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b142:	2601      	movs	r6, #1
    b144:	b13f      	cbz	r7, b156 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    b146:	2f01      	cmp	r7, #1
    b148:	d00b      	beq.n	b162 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    b14a:	e010      	b.n	b16e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    b14c:	f240 717c 	movw	r1, #1916	; 0x77c
    b150:	203e      	movs	r0, #62	; 0x3e
    b152:	f7f9 fcab 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b156:	4608      	mov	r0, r1
    b158:	f000 fdf6 	bl	bd48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b15c:	726e      	strb	r6, [r5, #9]
    b15e:	6026      	str	r6, [r4, #0]
    b160:	e005      	b.n	b16e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    b162:	4608      	mov	r0, r1
    b164:	f000 fdd6 	bl	bd14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b168:	2002      	movs	r0, #2
    b16a:	7268      	strb	r0, [r5, #9]
    b16c:	6066      	str	r6, [r4, #4]
    b16e:	4807      	ldr	r0, [pc, #28]	; (b18c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    b170:	64c6      	str	r6, [r0, #76]	; 0x4c
    b172:	4806      	ldr	r0, [pc, #24]	; (b18c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    b174:	300c      	adds	r0, #12
    b176:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b17a:	4638      	mov	r0, r7
    b17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b180:	f000 bd5a 	b.w	bc38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b184:	200014b0 	.word	0x200014b0
    b188:	40001000 	.word	0x40001000
    b18c:	40008000 	.word	0x40008000

0000b190 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b194:	4c2c      	ldr	r4, [pc, #176]	; (b248 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    b196:	0006      	movs	r6, r0
    b198:	4d2c      	ldr	r5, [pc, #176]	; (b24c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    b19a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b19e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b250 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    b1a2:	f040 0002 	orr.w	r0, r0, #2
    b1a6:	4689      	mov	r9, r1
    b1a8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b1ac:	f04f 0700 	mov.w	r7, #0
    b1b0:	d002      	beq.n	b1b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    b1b2:	2e01      	cmp	r6, #1
    b1b4:	d020      	beq.n	b1f8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    b1b6:	e036      	b.n	b226 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    b1b8:	4608      	mov	r0, r1
    b1ba:	f000 fdc5 	bl	bd48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b1be:	2001      	movs	r0, #1
    b1c0:	7260      	strb	r0, [r4, #9]
    b1c2:	79e0      	ldrb	r0, [r4, #7]
    b1c4:	2801      	cmp	r0, #1
    b1c6:	d105      	bne.n	b1d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    b1c8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    b1cc:	f040 0008 	orr.w	r0, r0, #8
    b1d0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b1d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b1d6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b1da:	62a0      	str	r0, [r4, #40]	; 0x28
    b1dc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b1e0:	f8c8 0000 	str.w	r0, [r8]
    b1e4:	491b      	ldr	r1, [pc, #108]	; (b254 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    b1e6:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    b1ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b1ee:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    b1f2:	fbb0 f7f1 	udiv	r7, r0, r1
    b1f6:	e016      	b.n	b226 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    b1f8:	4608      	mov	r0, r1
    b1fa:	f000 fd8b 	bl	bd14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b1fe:	2002      	movs	r0, #2
    b200:	7260      	strb	r0, [r4, #9]
    b202:	79e0      	ldrb	r0, [r4, #7]
    b204:	2801      	cmp	r0, #1
    b206:	d105      	bne.n	b214 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b208:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    b20c:	f040 0004 	orr.w	r0, r0, #4
    b210:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b214:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b216:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b21a:	62a0      	str	r0, [r4, #40]	; 0x28
    b21c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b220:	f8c8 0000 	str.w	r0, [r8]
    b224:	2729      	movs	r7, #41	; 0x29
    b226:	f000 fc15 	bl	ba54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    b22a:	f001 f828 	bl	c27e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    b22e:	b120      	cbz	r0, b23a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    b230:	f7ff ff24 	bl	b07c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b234:	2000      	movs	r0, #0
    b236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b23a:	2100      	movs	r1, #0
    b23c:	4630      	mov	r0, r6
    b23e:	f000 fcfb 	bl	bc38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b242:	4638      	mov	r0, r7
    b244:	e7f7      	b.n	b236 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    b246:	0000      	.short	0x0000
    b248:	200014b0 	.word	0x200014b0
    b24c:	40001000 	.word	0x40001000
    b250:	4001f504 	.word	0x4001f504
    b254:	0000bd8c 	.word	0x0000bd8c

0000b258 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    b258:	4a02      	ldr	r2, [pc, #8]	; (b264 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    b25a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    b25c:	6003      	str	r3, [r0, #0]
    b25e:	6b50      	ldr	r0, [r2, #52]	; 0x34
    b260:	6008      	str	r0, [r1, #0]
    b262:	4770      	bx	lr
    b264:	200014b0 	.word	0x200014b0

0000b268 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b268:	b510      	push	{r4, lr}
    b26a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b26c:	4901      	ldr	r1, [pc, #4]	; (b274 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b26e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b272:	bd10      	pop	{r4, pc}
    b274:	200014a0 	.word	0x200014a0

0000b278 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    b278:	490f      	ldr	r1, [pc, #60]	; (b2b8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    b27a:	b510      	push	{r4, lr}
    b27c:	69ca      	ldr	r2, [r1, #28]
    b27e:	4282      	cmp	r2, r0
    b280:	d302      	bcc.n	b288 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    b282:	f640 111f 	movw	r1, #2335	; 0x91f
    b286:	e00b      	b.n	b2a0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    b288:	2201      	movs	r2, #1
    b28a:	730a      	strb	r2, [r1, #12]
    b28c:	6108      	str	r0, [r1, #16]
    b28e:	490b      	ldr	r1, [pc, #44]	; (b2bc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    b290:	644a      	str	r2, [r1, #68]	; 0x44
    b292:	1d0a      	adds	r2, r1, #4
    b294:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    b298:	4283      	cmp	r3, r0
    b29a:	d304      	bcc.n	b2a6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    b29c:	f640 1128 	movw	r1, #2344	; 0x928
    b2a0:	203e      	movs	r0, #62	; 0x3e
    b2a2:	f7f9 fc03 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2a6:	2300      	movs	r3, #0
    b2a8:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    b2ac:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2b4:	f000 bc94 	b.w	bbe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b2b8:	200014b0 	.word	0x200014b0
    b2bc:	40008000 	.word	0x40008000

0000b2c0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b2c0:	b570      	push	{r4, r5, r6, lr}
    b2c2:	4c0f      	ldr	r4, [pc, #60]	; (b300 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    b2c4:	4603      	mov	r3, r0
    b2c6:	2002      	movs	r0, #2
    b2c8:	7320      	strb	r0, [r4, #12]
    b2ca:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    b2ce:	2096      	movs	r0, #150	; 0x96
    b2d0:	f894 1020 	ldrb.w	r1, [r4, #32]
    b2d4:	7d22      	ldrb	r2, [r4, #20]
    b2d6:	2d01      	cmp	r5, #1
    b2d8:	d00e      	beq.n	b2f8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    b2da:	f000 fd93 	bl	be04 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b2de:	6120      	str	r0, [r4, #16]
    b2e0:	4808      	ldr	r0, [pc, #32]	; (b304 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b2e2:	2100      	movs	r1, #0
    b2e4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b2e8:	6921      	ldr	r1, [r4, #16]
    b2ea:	69e0      	ldr	r0, [r4, #28]
    b2ec:	4408      	add	r0, r1
    b2ee:	4905      	ldr	r1, [pc, #20]	; (b304 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b2f0:	1d09      	adds	r1, r1, #4
    b2f2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b2f6:	bd70      	pop	{r4, r5, r6, pc}
    b2f8:	f000 fda2 	bl	be40 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b2fc:	e7ef      	b.n	b2de <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    b2fe:	0000      	.short	0x0000
    b300:	200014b0 	.word	0x200014b0
    b304:	40008000 	.word	0x40008000

0000b308 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    b308:	b510      	push	{r4, lr}
    b30a:	f001 f900 	bl	c50e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b30e:	2800      	cmp	r0, #0
    b310:	d006      	beq.n	b320 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    b312:	4804      	ldr	r0, [pc, #16]	; (b324 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    b314:	6801      	ldr	r1, [r0, #0]
    b316:	f021 0101 	bic.w	r1, r1, #1
    b31a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    b31e:	6001      	str	r1, [r0, #0]
    b320:	bd10      	pop	{r4, pc}
    b322:	0000      	.short	0x0000
    b324:	40001774 	.word	0x40001774

0000b328 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b32c:	2238      	movs	r2, #56	; 0x38
    b32e:	2100      	movs	r1, #0
    b330:	4813      	ldr	r0, [pc, #76]	; (b380 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b332:	f001 f98a 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b336:	f000 fcad 	bl	bc94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    b33a:	f001 f8a1 	bl	c480 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b33e:	4d11      	ldr	r5, [pc, #68]	; (b384 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b340:	4e10      	ldr	r6, [pc, #64]	; (b384 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b342:	2400      	movs	r4, #0
    b344:	4f0f      	ldr	r7, [pc, #60]	; (b384 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b346:	3508      	adds	r5, #8
    b348:	3610      	adds	r6, #16
    b34a:	b928      	cbnz	r0, b358 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b34c:	f001 f8af 	bl	c4ae <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b350:	b910      	cbnz	r0, b358 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b352:	f001 f8b6 	bl	c4c2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b356:	b108      	cbz	r0, b35c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b358:	2224      	movs	r2, #36	; 0x24
    b35a:	e006      	b.n	b36a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b35c:	f001 f8f1 	bl	c542 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b360:	b910      	cbnz	r0, b368 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b362:	f001 f8e4 	bl	c52e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b366:	b140      	cbz	r0, b37a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b368:	2240      	movs	r2, #64	; 0x40
    b36a:	21ff      	movs	r1, #255	; 0xff
    b36c:	4638      	mov	r0, r7
    b36e:	f001 f96c 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b372:	602c      	str	r4, [r5, #0]
    b374:	6034      	str	r4, [r6, #0]
    b376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b37a:	2238      	movs	r2, #56	; 0x38
    b37c:	e7f5      	b.n	b36a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b37e:	0000      	.short	0x0000
    b380:	200014b0 	.word	0x200014b0
    b384:	40000e00 	.word	0x40000e00

0000b388 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b388:	4801      	ldr	r0, [pc, #4]	; (b390 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    b38a:	69c0      	ldr	r0, [r0, #28]
    b38c:	4770      	bx	lr
    b38e:	0000      	.short	0x0000
    b390:	200014b0 	.word	0x200014b0

0000b394 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    b394:	4801      	ldr	r0, [pc, #4]	; (b39c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    b396:	6980      	ldr	r0, [r0, #24]
    b398:	4770      	bx	lr
    b39a:	0000      	.short	0x0000
    b39c:	200014b0 	.word	0x200014b0

0000b3a0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b3a0:	b510      	push	{r4, lr}
    b3a2:	f000 fc2b 	bl	bbfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    b3a6:	f7ff fe69 	bl	b07c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b3aa:	f7f9 fa31 	bl	4810 <mpsl_fem_disable>
    b3ae:	b130      	cbz	r0, b3be <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    b3b0:	1c40      	adds	r0, r0, #1
    b3b2:	d004      	beq.n	b3be <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    b3b4:	f240 516d 	movw	r1, #1389	; 0x56d
    b3b8:	203e      	movs	r0, #62	; 0x3e
    b3ba:	f7f9 fb77 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3be:	480f      	ldr	r0, [pc, #60]	; (b3fc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    b3c0:	4a0f      	ldr	r2, [pc, #60]	; (b400 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    b3c2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b3c4:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    b3c8:	6011      	str	r1, [r2, #0]
    b3ca:	2400      	movs	r4, #0
    b3cc:	6284      	str	r4, [r0, #40]	; 0x28
    b3ce:	7304      	strb	r4, [r0, #12]
    b3d0:	61c4      	str	r4, [r0, #28]
    b3d2:	6184      	str	r4, [r0, #24]
    b3d4:	f000 fc12 	bl	bbfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>
    b3d8:	480a      	ldr	r0, [pc, #40]	; (b404 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    b3da:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b3de:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b3e2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b3e6:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b3ea:	2001      	movs	r0, #1
    b3ec:	f005 f9a8 	bl	10740 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3f4:	2001      	movs	r0, #1
    b3f6:	f005 b996 	b.w	10726 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b3fa:	0000      	.short	0x0000
    b3fc:	200014b0 	.word	0x200014b0
    b400:	4001f508 	.word	0x4001f508
    b404:	40008000 	.word	0x40008000

0000b408 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b408:	b570      	push	{r4, r5, r6, lr}
    b40a:	2001      	movs	r0, #1
    b40c:	f005 f998 	bl	10740 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b410:	4c37      	ldr	r4, [pc, #220]	; (b4f0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    b412:	2000      	movs	r0, #0
    b414:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b418:	2001      	movs	r0, #1
    b41a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b41e:	f001 f866 	bl	c4ee <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b422:	4d34      	ldr	r5, [pc, #208]	; (b4f4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b424:	b118      	cbz	r0, b42e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    b426:	6828      	ldr	r0, [r5, #0]
    b428:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b42c:	6028      	str	r0, [r5, #0]
    b42e:	f001 f852 	bl	c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b432:	b128      	cbz	r0, b440 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    b434:	6828      	ldr	r0, [r5, #0]
    b436:	4930      	ldr	r1, [pc, #192]	; (b4f8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b438:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b43c:	4308      	orrs	r0, r1
    b43e:	6028      	str	r0, [r5, #0]
    b440:	f001 f865 	bl	c50e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b444:	b138      	cbz	r0, b456 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    b446:	482b      	ldr	r0, [pc, #172]	; (b4f4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b448:	1d00      	adds	r0, r0, #4
    b44a:	6801      	ldr	r1, [r0, #0]
    b44c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b450:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b454:	6001      	str	r1, [r0, #0]
    b456:	4927      	ldr	r1, [pc, #156]	; (b4f4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b458:	4828      	ldr	r0, [pc, #160]	; (b4fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b45a:	313c      	adds	r1, #60	; 0x3c
    b45c:	6008      	str	r0, [r1, #0]
    b45e:	f7f9 fa0d 	bl	487c <mpsl_fem_device_config_254_apply_get>
    b462:	b140      	cbz	r0, b476 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    b464:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b468:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b46c:	1c41      	adds	r1, r0, #1
    b46e:	d002      	beq.n	b476 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    b470:	4920      	ldr	r1, [pc, #128]	; (b4f4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b472:	3110      	adds	r1, #16
    b474:	6008      	str	r0, [r1, #0]
    b476:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b47a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b47c:	1c41      	adds	r1, r0, #1
    b47e:	d004      	beq.n	b48a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    b480:	491f      	ldr	r1, [pc, #124]	; (b500 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b482:	680a      	ldr	r2, [r1, #0]
    b484:	f360 4217 	bfi	r2, r0, #16, #8
    b488:	600a      	str	r2, [r1, #0]
    b48a:	f240 1103 	movw	r1, #259	; 0x103
    b48e:	f240 605b 	movw	r0, #1627	; 0x65b
    b492:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    b496:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    b49a:	2001      	movs	r0, #1
    b49c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    b4a0:	f000 f842 	bl	b528 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b4a4:	f240 2001 	movw	r0, #513	; 0x201
    b4a8:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    b4ac:	2002      	movs	r0, #2
    b4ae:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b4b2:	4914      	ldr	r1, [pc, #80]	; (b504 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b4b4:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b4b8:	6008      	str	r0, [r1, #0]
    b4ba:	4913      	ldr	r1, [pc, #76]	; (b508 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b4bc:	2000      	movs	r0, #0
    b4be:	4d13      	ldr	r5, [pc, #76]	; (b50c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b4c0:	8608      	strh	r0, [r1, #48]	; 0x30
    b4c2:	3110      	adds	r1, #16
    b4c4:	61c8      	str	r0, [r1, #28]
    b4c6:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    b4ca:	7028      	strb	r0, [r5, #0]
    b4cc:	2001      	movs	r0, #1
    b4ce:	f005 f92a 	bl	10726 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b4d2:	2010      	movs	r0, #16
    b4d4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b4d8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b4dc:	2002      	movs	r0, #2
    b4de:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    b4e2:	6868      	ldr	r0, [r5, #4]
    b4e4:	2800      	cmp	r0, #0
    b4e6:	d002      	beq.n	b4ee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    b4e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b4ec:	4700      	bx	r0
    b4ee:	bd70      	pop	{r4, r5, r6, pc}
    b4f0:	40001000 	.word	0x40001000
    b4f4:	4000173c 	.word	0x4000173c
    b4f8:	80000096 	.word	0x80000096
    b4fc:	8900002c 	.word	0x8900002c
    b500:	4000158c 	.word	0x4000158c
    b504:	4001f504 	.word	0x4001f504
    b508:	200014a0 	.word	0x200014a0
    b50c:	2000031c 	.word	0x2000031c

0000b510 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b510:	4901      	ldr	r1, [pc, #4]	; (b518 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b512:	7548      	strb	r0, [r1, #21]
    b514:	4770      	bx	lr
    b516:	0000      	.short	0x0000
    b518:	200014b0 	.word	0x200014b0

0000b51c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    b51c:	4901      	ldr	r1, [pc, #4]	; (b524 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    b51e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b522:	4770      	bx	lr
    b524:	0000bde0 	.word	0x0000bde0

0000b528 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    b528:	4908      	ldr	r1, [pc, #32]	; (b54c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    b52a:	b510      	push	{r4, lr}
    b52c:	7508      	strb	r0, [r1, #20]
    b52e:	4908      	ldr	r1, [pc, #32]	; (b550 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    b530:	2801      	cmp	r0, #1
    b532:	d006      	beq.n	b542 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    b534:	2802      	cmp	r0, #2
    b536:	d006      	beq.n	b546 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    b538:	f640 5169 	movw	r1, #3433	; 0xd69
    b53c:	203e      	movs	r0, #62	; 0x3e
    b53e:	f7f9 fab5 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b542:	2003      	movs	r0, #3
    b544:	e000      	b.n	b548 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    b546:	2004      	movs	r0, #4
    b548:	6008      	str	r0, [r1, #0]
    b54a:	bd10      	pop	{r4, pc}
    b54c:	200014b0 	.word	0x200014b0
    b550:	40001510 	.word	0x40001510

0000b554 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b554:	4905      	ldr	r1, [pc, #20]	; (b56c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b556:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    b55a:	4805      	ldr	r0, [pc, #20]	; (b570 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    b55c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    b560:	f041 0101 	orr.w	r1, r1, #1
    b564:	7001      	strb	r1, [r0, #0]
    b566:	f000 ba3b 	b.w	b9e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b56a:	0000      	.short	0x0000
    b56c:	40001000 	.word	0x40001000
    b570:	200014b0 	.word	0x200014b0

0000b574 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    b574:	4901      	ldr	r1, [pc, #4]	; (b57c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    b576:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b57a:	4770      	bx	lr
    b57c:	0000bdec 	.word	0x0000bdec

0000b580 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b584:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b628 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>
    b588:	4d28      	ldr	r5, [pc, #160]	; (b62c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xac>)
    b58a:	460f      	mov	r7, r1
    b58c:	0006      	movs	r6, r0
    b58e:	4614      	mov	r4, r2
    b590:	f04f 0801 	mov.w	r8, #1
    b594:	d004      	beq.n	b5a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x20>
    b596:	2e01      	cmp	r6, #1
    b598:	d010      	beq.n	b5bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3c>
    b59a:	f640 0124 	movw	r1, #2084	; 0x824
    b59e:	e039      	b.n	b614 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x94>
    b5a0:	4610      	mov	r0, r2
    b5a2:	f000 fbd1 	bl	bd48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b5a6:	4822      	ldr	r0, [pc, #136]	; (b630 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb0>)
    b5a8:	f885 8009 	strb.w	r8, [r5, #9]
    b5ac:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    b5b0:	4638      	mov	r0, r7
    b5b2:	f000 fb77 	bl	bca4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    b5b6:	4604      	mov	r4, r0
    b5b8:	4648      	mov	r0, r9
    b5ba:	e00c      	b.n	b5d6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x56>
    b5bc:	4610      	mov	r0, r2
    b5be:	f000 fba9 	bl	bd14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    b5c2:	2002      	movs	r0, #2
    b5c4:	7268      	strb	r0, [r5, #9]
    b5c6:	f649 71ba 	movw	r1, #40890	; 0x9fba
    b5ca:	4638      	mov	r0, r7
    b5cc:	f000 fb6a 	bl	bca4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>
    b5d0:	4604      	mov	r4, r0
    b5d2:	4815      	ldr	r0, [pc, #84]	; (b628 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xa8>)
    b5d4:	1d00      	adds	r0, r0, #4
    b5d6:	f000 fb23 	bl	bc20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    b5da:	4f16      	ldr	r7, [pc, #88]	; (b634 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    b5dc:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
    b5e0:	4916      	ldr	r1, [pc, #88]	; (b63c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>)
    b5e2:	4815      	ldr	r0, [pc, #84]	; (b638 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>)
    b5e4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b5e8:	2010      	movs	r0, #16
    b5ea:	f8c9 0304 	str.w	r0, [r9, #772]	; 0x304
    b5ee:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    b5f0:	4913      	ldr	r1, [pc, #76]	; (b640 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc0>)
    b5f2:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    b5f6:	62a8      	str	r0, [r5, #40]	; 0x28
    b5f8:	0138      	lsls	r0, r7, #4
    b5fa:	6008      	str	r0, [r1, #0]
    b5fc:	f000 fa2a 	bl	ba54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    b600:	f8c7 804c 	str.w	r8, [r7, #76]	; 0x4c
    b604:	480b      	ldr	r0, [pc, #44]	; (b634 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb4>)
    b606:	300c      	adds	r0, #12
    b608:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b60c:	42a0      	cmp	r0, r4
    b60e:	d304      	bcc.n	b61a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x9a>
    b610:	f640 013a 	movw	r1, #2106	; 0x83a
    b614:	203e      	movs	r0, #62	; 0x3e
    b616:	f7f9 fa49 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b61a:	4621      	mov	r1, r4
    b61c:	4630      	mov	r0, r6
    b61e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b622:	f000 bb09 	b.w	bc38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    b626:	0000      	.short	0x0000
    b628:	40001000 	.word	0x40001000
    b62c:	200014b0 	.word	0x200014b0
    b630:	0000bd8c 	.word	0x0000bd8c
    b634:	40008000 	.word	0x40008000
    b638:	40008140 	.word	0x40008140
    b63c:	4001f098 	.word	0x4001f098
    b640:	4001f504 	.word	0x4001f504

0000b644 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b644:	4b0d      	ldr	r3, [pc, #52]	; (b67c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    b646:	b510      	push	{r4, lr}
    b648:	71d8      	strb	r0, [r3, #7]
    b64a:	729a      	strb	r2, [r3, #10]
    b64c:	b151      	cbz	r1, b664 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    b64e:	2002      	movs	r0, #2
    b650:	7218      	strb	r0, [r3, #8]
    b652:	2801      	cmp	r0, #1
    b654:	d008      	beq.n	b668 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    b656:	2802      	cmp	r0, #2
    b658:	d00f      	beq.n	b67a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b65a:	f640 2145 	movw	r1, #2629	; 0xa45
    b65e:	203e      	movs	r0, #62	; 0x3e
    b660:	f7f9 fa24 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b664:	2001      	movs	r0, #1
    b666:	e7f3      	b.n	b650 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    b668:	7a58      	ldrb	r0, [r3, #9]
    b66a:	2802      	cmp	r0, #2
    b66c:	d105      	bne.n	b67a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b66e:	f000 f97b 	bl	b968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    b672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b676:	f000 baa9 	b.w	bbcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    b67a:	bd10      	pop	{r4, pc}
    b67c:	200014b0 	.word	0x200014b0

0000b680 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    b680:	4902      	ldr	r1, [pc, #8]	; (b68c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    b682:	2000      	movs	r0, #0
    b684:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b688:	4770      	bx	lr
    b68a:	0000      	.short	0x0000
    b68c:	40008000 	.word	0x40008000

0000b690 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b690:	4904      	ldr	r1, [pc, #16]	; (b6a4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    b692:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    b696:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    b69a:	4249      	negs	r1, r1
    b69c:	7001      	strb	r1, [r0, #0]
    b69e:	2001      	movs	r0, #1
    b6a0:	4770      	bx	lr
    b6a2:	0000      	.short	0x0000
    b6a4:	40001000 	.word	0x40001000

0000b6a8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b6a8:	4903      	ldr	r1, [pc, #12]	; (b6b8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    b6aa:	0e02      	lsrs	r2, r0, #24
    b6ac:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    b6b0:	0200      	lsls	r0, r0, #8
    b6b2:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    b6b6:	4770      	bx	lr
    b6b8:	40001000 	.word	0x40001000

0000b6bc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b6bc:	4901      	ldr	r1, [pc, #4]	; (b6c4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    b6be:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b6c2:	4770      	bx	lr
    b6c4:	40001000 	.word	0x40001000

0000b6c8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    b6c8:	b510      	push	{r4, lr}
    b6ca:	2200      	movs	r2, #0
    b6cc:	2901      	cmp	r1, #1
    b6ce:	d006      	beq.n	b6de <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    b6d0:	2902      	cmp	r1, #2
    b6d2:	d002      	beq.n	b6da <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    b6d4:	f240 21d9 	movw	r1, #729	; 0x2d9
    b6d8:	e014      	b.n	b704 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    b6da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b6de:	490b      	ldr	r1, [pc, #44]	; (b70c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    b6e0:	430a      	orrs	r2, r1
    b6e2:	490b      	ldr	r1, [pc, #44]	; (b710 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    b6e4:	600a      	str	r2, [r1, #0]
    b6e6:	490b      	ldr	r1, [pc, #44]	; (b714 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    b6e8:	4308      	orrs	r0, r1
    b6ea:	4909      	ldr	r1, [pc, #36]	; (b710 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    b6ec:	1d09      	adds	r1, r1, #4
    b6ee:	6008      	str	r0, [r1, #0]
    b6f0:	4809      	ldr	r0, [pc, #36]	; (b718 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    b6f2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b6f6:	b2c0      	uxtb	r0, r0
    b6f8:	2803      	cmp	r0, #3
    b6fa:	d001      	beq.n	b700 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    b6fc:	280b      	cmp	r0, #11
    b6fe:	d104      	bne.n	b70a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    b700:	f240 21f1 	movw	r1, #753	; 0x2f1
    b704:	203e      	movs	r0, #62	; 0x3e
    b706:	f7f9 f9d1 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b70a:	bd10      	pop	{r4, pc}
    b70c:	00100108 	.word	0x00100108
    b710:	40001514 	.word	0x40001514
    b714:	02030000 	.word	0x02030000
    b718:	40001000 	.word	0x40001000

0000b71c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b71c:	4901      	ldr	r1, [pc, #4]	; (b724 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b71e:	7588      	strb	r0, [r1, #22]
    b720:	4770      	bx	lr
    b722:	0000      	.short	0x0000
    b724:	200014b0 	.word	0x200014b0

0000b728 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b72c:	4852      	ldr	r0, [pc, #328]	; (b878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b72e:	f04f 0a01 	mov.w	sl, #1
    b732:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    b736:	4850      	ldr	r0, [pc, #320]	; (b878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b738:	300c      	adds	r0, #12
    b73a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    b73e:	f000 fd9c 	bl	c27a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    b742:	4c4e      	ldr	r4, [pc, #312]	; (b87c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b744:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    b748:	f000 f918 	bl	b97c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    b74c:	494c      	ldr	r1, [pc, #304]	; (b880 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    b74e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b750:	6008      	str	r0, [r1, #0]
    b752:	f8df 9130 	ldr.w	r9, [pc, #304]	; b884 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    b756:	2000      	movs	r0, #0
    b758:	62a0      	str	r0, [r4, #40]	; 0x28
    b75a:	f8d9 2200 	ldr.w	r2, [r9, #512]	; 0x200
    b75e:	f240 131d 	movw	r3, #285	; 0x11d
    b762:	439a      	bics	r2, r3
    b764:	f8c9 2200 	str.w	r2, [r9, #512]	; 0x200
    b768:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b76c:	f000 f986 	bl	ba7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    b770:	4605      	mov	r5, r0
    b772:	4841      	ldr	r0, [pc, #260]	; (b878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b774:	3008      	adds	r0, #8
    b776:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b77a:	4e3f      	ldr	r6, [pc, #252]	; (b878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    b77c:	61e0      	str	r0, [r4, #28]
    b77e:	1d36      	adds	r6, r6, #4
    b780:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    b784:	61a0      	str	r0, [r4, #24]
    b786:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b78a:	7d21      	ldrb	r1, [r4, #20]
    b78c:	f884 1020 	strb.w	r1, [r4, #32]
    b790:	7a61      	ldrb	r1, [r4, #9]
    b792:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b796:	46a0      	mov	r8, r4
    b798:	2400      	movs	r4, #0
    b79a:	4639      	mov	r1, r7
    b79c:	4628      	mov	r0, r5
    b79e:	f000 f9e1 	bl	bb64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    b7a2:	b910      	cbnz	r0, b7aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    b7a4:	f8c9 a010 	str.w	sl, [r9, #16]
    b7a8:	2401      	movs	r4, #1
    b7aa:	4f34      	ldr	r7, [pc, #208]	; (b87c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b7ac:	07e8      	lsls	r0, r5, #31
    b7ae:	f1a7 0710 	sub.w	r7, r7, #16
    b7b2:	d002      	beq.n	b7ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    b7b4:	6838      	ldr	r0, [r7, #0]
    b7b6:	4780      	blx	r0
    b7b8:	e032      	b.n	b820 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    b7ba:	07a8      	lsls	r0, r5, #30
    b7bc:	d527      	bpl.n	b80e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    b7be:	0768      	lsls	r0, r5, #29
    b7c0:	d41f      	bmi.n	b802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b7c2:	f000 fea4 	bl	c50e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b7c6:	b9e0      	cbnz	r0, b802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b7c8:	f000 fe91 	bl	c4ee <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b7cc:	b9c8      	cbnz	r0, b802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b7ce:	482e      	ldr	r0, [pc, #184]	; (b888 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b7d0:	6800      	ldr	r0, [r0, #0]
    b7d2:	f3c0 6c00 	ubfx	ip, r0, #24, #1
    b7d6:	f3c0 5142 	ubfx	r1, r0, #21, #3
    b7da:	f000 030f 	and.w	r3, r0, #15
    b7de:	f3c0 1203 	ubfx	r2, r0, #4, #4
    b7e2:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b7e6:	f1bc 0f00 	cmp.w	ip, #0
    b7ea:	d00a      	beq.n	b802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b7ec:	b10b      	cbz	r3, b7f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    b7ee:	b102      	cbz	r2, b7f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xca>
    b7f0:	b938      	cbnz	r0, b802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b7f2:	4825      	ldr	r0, [pc, #148]	; (b888 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b7f4:	1d00      	adds	r0, r0, #4
    b7f6:	6800      	ldr	r0, [r0, #0]
    b7f8:	b118      	cbz	r0, b802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b7fa:	2903      	cmp	r1, #3
    b7fc:	d201      	bcs.n	b802 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    b7fe:	f045 0504 	orr.w	r5, r5, #4
    b802:	f345 0080 	sbfx	r0, r5, #2, #1
    b806:	4621      	mov	r1, r4
    b808:	1c40      	adds	r0, r0, #1
    b80a:	687a      	ldr	r2, [r7, #4]
    b80c:	e007      	b.n	b81e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    b80e:	f015 0f28 	tst.w	r5, #40	; 0x28
    b812:	d005      	beq.n	b820 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf8>
    b814:	f345 1140 	sbfx	r1, r5, #5, #1
    b818:	68ba      	ldr	r2, [r7, #8]
    b81a:	4620      	mov	r0, r4
    b81c:	1c49      	adds	r1, r1, #1
    b81e:	4790      	blx	r2
    b820:	06e8      	lsls	r0, r5, #27
    b822:	d501      	bpl.n	b828 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    b824:	68f8      	ldr	r0, [r7, #12]
    b826:	4780      	blx	r0
    b828:	f898 1009 	ldrb.w	r1, [r8, #9]
    b82c:	4640      	mov	r0, r8
    b82e:	2902      	cmp	r1, #2
    b830:	d120      	bne.n	b874 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    b832:	7b01      	ldrb	r1, [r0, #12]
    b834:	2900      	cmp	r1, #0
    b836:	d01d      	beq.n	b874 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    b838:	2902      	cmp	r1, #2
    b83a:	d004      	beq.n	b846 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x11e>
    b83c:	2901      	cmp	r1, #1
    b83e:	d009      	beq.n	b854 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12c>
    b840:	f640 4148 	movw	r1, #3144	; 0xc48
    b844:	e00d      	b.n	b862 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    b846:	69c1      	ldr	r1, [r0, #28]
    b848:	f8d8 0010 	ldr.w	r0, [r8, #16]
    b84c:	4408      	add	r0, r1
    b84e:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b852:	e00b      	b.n	b86c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    b854:	6901      	ldr	r1, [r0, #16]
    b856:	f8d8 001c 	ldr.w	r0, [r8, #28]
    b85a:	4281      	cmp	r1, r0
    b85c:	d804      	bhi.n	b868 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    b85e:	f640 4149 	movw	r1, #3145	; 0xc49
    b862:	203e      	movs	r0, #62	; 0x3e
    b864:	f7f9 f922 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b868:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    b86c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b870:	f000 b9b6 	b.w	bbe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b878:	40008000 	.word	0x40008000
    b87c:	200014b0 	.word	0x200014b0
    b880:	4001f508 	.word	0x4001f508
    b884:	40001000 	.word	0x40001000
    b888:	40001450 	.word	0x40001450

0000b88c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b88c:	b570      	push	{r4, r5, r6, lr}
    b88e:	4b16      	ldr	r3, [pc, #88]	; (b8e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    b890:	888c      	ldrh	r4, [r1, #4]
    b892:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    b896:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    b89a:	780c      	ldrb	r4, [r1, #0]
    b89c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b8a0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b8a4:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    b8a8:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    b8ac:	2401      	movs	r4, #1
    b8ae:	4084      	lsls	r4, r0
    b8b0:	b2c9      	uxtb	r1, r1
    b8b2:	b2e5      	uxtb	r5, r4
    b8b4:	4329      	orrs	r1, r5
    b8b6:	b132      	cbz	r2, b8c6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b8b8:	2a01      	cmp	r2, #1
    b8ba:	d00a      	beq.n	b8d2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    b8bc:	f240 51d4 	movw	r1, #1492	; 0x5d4
    b8c0:	203e      	movs	r0, #62	; 0x3e
    b8c2:	f7f9 f8f3 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8c6:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b8ca:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b8ce:	43a0      	bics	r0, r4
    b8d0:	e004      	b.n	b8dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    b8d2:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b8d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b8da:	4328      	orrs	r0, r5
    b8dc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b8e0:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b8e4:	bd70      	pop	{r4, r5, r6, pc}
    b8e6:	0000      	.short	0x0000
    b8e8:	40001000 	.word	0x40001000

0000b8ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    b8ec:	4901      	ldr	r1, [pc, #4]	; (b8f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    b8ee:	2001      	movs	r0, #1
    b8f0:	7008      	strb	r0, [r1, #0]
    b8f2:	4770      	bx	lr
    b8f4:	2000031c 	.word	0x2000031c
    b8f8:	480b      	ldr	r0, [pc, #44]	; (b928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    b8fa:	7d81      	ldrb	r1, [r0, #22]
    b8fc:	480b      	ldr	r0, [pc, #44]	; (b92c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    b8fe:	5c40      	ldrb	r0, [r0, r1]
    b900:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    b904:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    b908:	d204      	bcs.n	b914 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    b90a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    b90e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b912:	e001      	b.n	b918 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    b914:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    b918:	4a05      	ldr	r2, [pc, #20]	; (b930 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    b91a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    b91e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    b922:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    b926:	4770      	bx	lr
    b928:	200014b0 	.word	0x200014b0
    b92c:	0000bd92 	.word	0x0000bd92
    b930:	40001000 	.word	0x40001000
    b934:	b508      	push	{r3, lr}
    b936:	490b      	ldr	r1, [pc, #44]	; (b964 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    b938:	466b      	mov	r3, sp
    b93a:	f991 2015 	ldrsb.w	r2, [r1, #21]
    b93e:	7d89      	ldrb	r1, [r1, #22]
    b940:	f000 faca 	bl	bed8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    b944:	f99d 0000 	ldrsb.w	r0, [sp]
    b948:	f000 fa9a 	bl	be80 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b94c:	f10d 0001 	add.w	r0, sp, #1
    b950:	f7f8 ff82 	bl	4858 <mpsl_fem_pa_gain_set>
    b954:	2800      	cmp	r0, #0
    b956:	d004      	beq.n	b962 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    b958:	f240 6115 	movw	r1, #1557	; 0x615
    b95c:	203e      	movs	r0, #62	; 0x3e
    b95e:	f7f9 f8a5 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b962:	bd08      	pop	{r3, pc}
    b964:	200014b0 	.word	0x200014b0
    b968:	4803      	ldr	r0, [pc, #12]	; (b978 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    b96a:	7a01      	ldrb	r1, [r0, #8]
    b96c:	2901      	cmp	r1, #1
    b96e:	d102      	bne.n	b976 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    b970:	7a80      	ldrb	r0, [r0, #10]
    b972:	f7ff bfdf 	b.w	b934 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    b976:	4770      	bx	lr
    b978:	200014b0 	.word	0x200014b0
    b97c:	480d      	ldr	r0, [pc, #52]	; (b9b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    b97e:	b510      	push	{r4, lr}
    b980:	7a40      	ldrb	r0, [r0, #9]
    b982:	2801      	cmp	r0, #1
    b984:	d00c      	beq.n	b9a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    b986:	2802      	cmp	r0, #2
    b988:	d113      	bne.n	b9b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b98a:	f7f8 ff47 	bl	481c <mpsl_fem_lna_configuration_clear>
    b98e:	2800      	cmp	r0, #0
    b990:	d00f      	beq.n	b9b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b992:	1c40      	adds	r0, r0, #1
    b994:	d00d      	beq.n	b9b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b996:	f640 01a6 	movw	r1, #2214	; 0x8a6
    b99a:	203e      	movs	r0, #62	; 0x3e
    b99c:	f7f9 f886 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b9a0:	f7f8 ff4e 	bl	4840 <mpsl_fem_pa_configuration_clear>
    b9a4:	2800      	cmp	r0, #0
    b9a6:	d004      	beq.n	b9b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b9a8:	1c40      	adds	r0, r0, #1
    b9aa:	d002      	beq.n	b9b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b9ac:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    b9b0:	e7f3      	b.n	b99a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    b9b2:	bd10      	pop	{r4, pc}
    b9b4:	200014b0 	.word	0x200014b0
    b9b8:	4808      	ldr	r0, [pc, #32]	; (b9dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    b9ba:	2100      	movs	r1, #0
    b9bc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b9c0:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b9c4:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b9c8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b9cc:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b9d0:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b9d4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b9d8:	4770      	bx	lr
    b9da:	0000      	.short	0x0000
    b9dc:	40001000 	.word	0x40001000
    b9e0:	4818      	ldr	r0, [pc, #96]	; (ba44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    b9e2:	b510      	push	{r4, lr}
    b9e4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b9e8:	07c1      	lsls	r1, r0, #31
    b9ea:	d029      	beq.n	ba40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    b9ec:	0781      	lsls	r1, r0, #30
    b9ee:	d514      	bpl.n	ba1a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    b9f0:	4815      	ldr	r0, [pc, #84]	; (ba48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    b9f2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b9f6:	f041 0101 	orr.w	r1, r1, #1
    b9fa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b9fe:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    ba02:	b2c0      	uxtb	r0, r0
    ba04:	280b      	cmp	r0, #11
    ba06:	d005      	beq.n	ba14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    ba08:	280a      	cmp	r0, #10
    ba0a:	d003      	beq.n	ba14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    ba0c:	2803      	cmp	r0, #3
    ba0e:	d001      	beq.n	ba14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    ba10:	2802      	cmp	r0, #2
    ba12:	d115      	bne.n	ba40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    ba14:	f240 613e 	movw	r1, #1598	; 0x63e
    ba18:	e00f      	b.n	ba3a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    ba1a:	0740      	lsls	r0, r0, #29
    ba1c:	d510      	bpl.n	ba40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    ba1e:	480a      	ldr	r0, [pc, #40]	; (ba48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    ba20:	490a      	ldr	r1, [pc, #40]	; (ba4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    ba22:	3008      	adds	r0, #8
    ba24:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ba28:	f44f 71a0 	mov.w	r1, #320	; 0x140
    ba2c:	4808      	ldr	r0, [pc, #32]	; (ba50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    ba2e:	f004 fe9d 	bl	1076c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    ba32:	2800      	cmp	r0, #0
    ba34:	d004      	beq.n	ba40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    ba36:	f240 6146 	movw	r1, #1606	; 0x646
    ba3a:	203e      	movs	r0, #62	; 0x3e
    ba3c:	f7f9 f836 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba40:	bd10      	pop	{r4, pc}
    ba42:	0000      	.short	0x0000
    ba44:	200014b0 	.word	0x200014b0
    ba48:	40001000 	.word	0x40001000
    ba4c:	4001f098 	.word	0x4001f098
    ba50:	40008000 	.word	0x40008000
    ba54:	4808      	ldr	r0, [pc, #32]	; (ba78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    ba56:	4601      	mov	r1, r0
    ba58:	79c2      	ldrb	r2, [r0, #7]
    ba5a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    ba5e:	b112      	cbz	r2, ba66 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    ba60:	2a01      	cmp	r2, #1
    ba62:	d003      	beq.n	ba6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    ba64:	e006      	b.n	ba74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    ba66:	f041 0102 	orr.w	r1, r1, #2
    ba6a:	e001      	b.n	ba70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    ba6c:	f041 0104 	orr.w	r1, r1, #4
    ba70:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    ba74:	f7ff bfb4 	b.w	b9e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    ba78:	200014b0 	.word	0x200014b0
    ba7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba80:	4d34      	ldr	r5, [pc, #208]	; (bb54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    ba82:	2400      	movs	r4, #0
    ba84:	7b28      	ldrb	r0, [r5, #12]
    ba86:	b138      	cbz	r0, ba98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    ba88:	f44f 71a2 	mov.w	r1, #324	; 0x144
    ba8c:	4832      	ldr	r0, [pc, #200]	; (bb58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    ba8e:	f004 fe6d 	bl	1076c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    ba92:	b108      	cbz	r0, ba98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    ba94:	2601      	movs	r6, #1
    ba96:	e000      	b.n	ba9a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    ba98:	2600      	movs	r6, #0
    ba9a:	7a68      	ldrb	r0, [r5, #9]
    ba9c:	4f2f      	ldr	r7, [pc, #188]	; (bb5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    ba9e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    baa2:	2801      	cmp	r0, #1
    baa4:	d002      	beq.n	baac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    baa6:	2802      	cmp	r0, #2
    baa8:	d006      	beq.n	bab8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    baaa:	e016      	b.n	bada <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    baac:	4638      	mov	r0, r7
    baae:	f004 fe58 	bl	10762 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bab2:	b190      	cbz	r0, bada <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    bab4:	2408      	movs	r4, #8
    bab6:	e010      	b.n	bada <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    bab8:	4638      	mov	r0, r7
    baba:	f004 fe52 	bl	10762 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    babe:	b100      	cbz	r0, bac2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    bac0:	2402      	movs	r4, #2
    bac2:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    bac6:	43c0      	mvns	r0, r0
    bac8:	f340 0000 	sbfx	r0, r0, #0, #1
    bacc:	1c40      	adds	r0, r0, #1
    bace:	d101      	bne.n	bad4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    bad0:	f044 0404 	orr.w	r4, r4, #4
    bad4:	b10e      	cbz	r6, bada <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    bad6:	f044 0401 	orr.w	r4, r4, #1
    bada:	f014 0f0b 	tst.w	r4, #11
    bade:	d107      	bne.n	baf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    bae0:	f44f 7188 	mov.w	r1, #272	; 0x110
    bae4:	4638      	mov	r0, r7
    bae6:	f004 fe3c 	bl	10762 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    baea:	b108      	cbz	r0, baf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    baec:	f044 0410 	orr.w	r4, r4, #16
    baf0:	481b      	ldr	r0, [pc, #108]	; (bb60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    baf2:	7800      	ldrb	r0, [r0, #0]
    baf4:	b1f8      	cbz	r0, bb36 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    baf6:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    bafa:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    bafe:	d007      	beq.n	bb10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bb00:	f44f 718a 	mov.w	r1, #276	; 0x114
    bb04:	4638      	mov	r0, r7
    bb06:	f004 fe2c 	bl	10762 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bb0a:	b108      	cbz	r0, bb10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bb0c:	2001      	movs	r0, #1
    bb0e:	e000      	b.n	bb12 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    bb10:	2000      	movs	r0, #0
    bb12:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    bb16:	b13e      	cbz	r6, bb28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    bb18:	f44f 718c 	mov.w	r1, #280	; 0x118
    bb1c:	4638      	mov	r0, r7
    bb1e:	f004 fe20 	bl	10762 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    bb22:	b108      	cbz	r0, bb28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    bb24:	2001      	movs	r0, #1
    bb26:	e000      	b.n	bb2a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    bb28:	2000      	movs	r0, #0
    bb2a:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    bb2e:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    bb32:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    bb36:	f7ff ff3f 	bl	b9b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    bb3a:	06e0      	lsls	r0, r4, #27
    bb3c:	d506      	bpl.n	bb4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    bb3e:	0720      	lsls	r0, r4, #28
    bb40:	d404      	bmi.n	bb4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    bb42:	7a68      	ldrb	r0, [r5, #9]
    bb44:	2801      	cmp	r0, #1
    bb46:	d101      	bne.n	bb4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    bb48:	f044 0420 	orr.w	r4, r4, #32
    bb4c:	4620      	mov	r0, r4
    bb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb52:	0000      	.short	0x0000
    bb54:	200014b0 	.word	0x200014b0
    bb58:	40008000 	.word	0x40008000
    bb5c:	40001000 	.word	0x40001000
    bb60:	2000031c 	.word	0x2000031c
    bb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb68:	4c17      	ldr	r4, [pc, #92]	; (bbc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>)
    bb6a:	460d      	mov	r5, r1
    bb6c:	7a21      	ldrb	r1, [r4, #8]
    bb6e:	b129      	cbz	r1, bb7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    bb70:	f010 0f11 	tst.w	r0, #17
    bb74:	d007      	beq.n	bb86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    bb76:	f7ff fa81 	bl	b07c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bb7a:	e023      	b.n	bbc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    bb7c:	f000 f88a 	bl	bc94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    bb80:	2000      	movs	r0, #0
    bb82:	7320      	strb	r0, [r4, #12]
    bb84:	e01e      	b.n	bbc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    bb86:	2901      	cmp	r1, #1
    bb88:	d001      	beq.n	bb8e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    bb8a:	2601      	movs	r6, #1
    bb8c:	e000      	b.n	bb90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    bb8e:	2600      	movs	r6, #0
    bb90:	79e0      	ldrb	r0, [r4, #7]
    bb92:	2801      	cmp	r0, #1
    bb94:	d00e      	beq.n	bbb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    bb96:	2700      	movs	r7, #0
    bb98:	f000 f87c 	bl	bc94 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    bb9c:	2196      	movs	r1, #150	; 0x96
    bb9e:	4630      	mov	r0, r6
    bba0:	f000 f88e 	bl	bcc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d4>
    bba4:	4601      	mov	r1, r0
    bba6:	b14f      	cbz	r7, bbbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    bba8:	353b      	adds	r5, #59	; 0x3b
    bbaa:	428d      	cmp	r5, r1
    bbac:	d904      	bls.n	bbb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    bbae:	2000      	movs	r0, #0
    bbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbb4:	2701      	movs	r7, #1
    bbb6:	e7ef      	b.n	bb98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    bbb8:	2001      	movs	r0, #1
    bbba:	71e0      	strb	r0, [r4, #7]
    bbbc:	7aa2      	ldrb	r2, [r4, #10]
    bbbe:	4630      	mov	r0, r6
    bbc0:	f7ff fcde 	bl	b580 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    bbc4:	2001      	movs	r0, #1
    bbc6:	e7f3      	b.n	bbb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    bbc8:	200014b0 	.word	0x200014b0
    bbcc:	4803      	ldr	r0, [pc, #12]	; (bbdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    bbce:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    bbd2:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    bbd6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bbda:	4770      	bx	lr
    bbdc:	40001000 	.word	0x40001000
    bbe0:	4804      	ldr	r0, [pc, #16]	; (bbf4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    bbe2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    bbe4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    bbe8:	6281      	str	r1, [r0, #40]	; 0x28
    bbea:	4903      	ldr	r1, [pc, #12]	; (bbf8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    bbec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    bbf0:	6008      	str	r0, [r1, #0]
    bbf2:	4770      	bx	lr
    bbf4:	200014b0 	.word	0x200014b0
    bbf8:	4001f504 	.word	0x4001f504
    bbfc:	4a07      	ldr	r2, [pc, #28]	; (bc1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    bbfe:	2000      	movs	r0, #0
    bc00:	3208      	adds	r2, #8
    bc02:	4906      	ldr	r1, [pc, #24]	; (bc1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    bc04:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bc08:	1d0a      	adds	r2, r1, #4
    bc0a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bc0e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bc12:	4902      	ldr	r1, [pc, #8]	; (bc1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>)
    bc14:	310c      	adds	r1, #12
    bc16:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bc1a:	4770      	bx	lr
    bc1c:	40008000 	.word	0x40008000
    bc20:	4903      	ldr	r1, [pc, #12]	; (bc30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x344>)
    bc22:	79c9      	ldrb	r1, [r1, #7]
    bc24:	2900      	cmp	r1, #0
    bc26:	d102      	bne.n	bc2e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    bc28:	4902      	ldr	r1, [pc, #8]	; (bc34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x348>)
    bc2a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    bc2e:	4770      	bx	lr
    bc30:	200014b0 	.word	0x200014b0
    bc34:	4001f098 	.word	0x4001f098
    bc38:	b510      	push	{r4, lr}
    bc3a:	4a14      	ldr	r2, [pc, #80]	; (bc8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    bc3c:	b120      	cbz	r0, bc48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    bc3e:	2801      	cmp	r0, #1
    bc40:	d011      	beq.n	bc66 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37a>
    bc42:	f44f 61ec 	mov.w	r1, #1888	; 0x760
    bc46:	e01c      	b.n	bc82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    bc48:	f101 0028 	add.w	r0, r1, #40	; 0x28
    bc4c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    bc50:	490f      	ldr	r1, [pc, #60]	; (bc90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    bc52:	480e      	ldr	r0, [pc, #56]	; (bc8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    bc54:	f7f8 fdfa 	bl	484c <mpsl_fem_pa_configuration_set>
    bc58:	2800      	cmp	r0, #0
    bc5a:	d015      	beq.n	bc88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    bc5c:	1c40      	adds	r0, r0, #1
    bc5e:	d013      	beq.n	bc88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    bc60:	f240 714f 	movw	r1, #1871	; 0x74f
    bc64:	e00d      	b.n	bc82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x396>
    bc66:	f101 0029 	add.w	r0, r1, #41	; 0x29
    bc6a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    bc6e:	4908      	ldr	r1, [pc, #32]	; (bc90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    bc70:	4806      	ldr	r0, [pc, #24]	; (bc8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>)
    bc72:	f7f8 fdd9 	bl	4828 <mpsl_fem_lna_configuration_set>
    bc76:	2800      	cmp	r0, #0
    bc78:	d006      	beq.n	bc88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    bc7a:	1c40      	adds	r0, r0, #1
    bc7c:	d004      	beq.n	bc88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>
    bc7e:	f240 715c 	movw	r1, #1884	; 0x75c
    bc82:	203e      	movs	r0, #62	; 0x3e
    bc84:	f7f8 ff12 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc88:	bd10      	pop	{r4, pc}
    bc8a:	0000      	.short	0x0000
    bc8c:	20000324 	.word	0x20000324
    bc90:	0000bdbc 	.word	0x0000bdbc
    bc94:	4802      	ldr	r0, [pc, #8]	; (bca0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    bc96:	2100      	movs	r1, #0
    bc98:	71c1      	strb	r1, [r0, #7]
    bc9a:	7201      	strb	r1, [r0, #8]
    bc9c:	7241      	strb	r1, [r0, #9]
    bc9e:	4770      	bx	lr
    bca0:	200014b0 	.word	0x200014b0
    bca4:	4a05      	ldr	r2, [pc, #20]	; (bcbc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d0>)
    bca6:	79d2      	ldrb	r2, [r2, #7]
    bca8:	2a01      	cmp	r2, #1
    bcaa:	d006      	beq.n	bcba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ce>
    bcac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bcb0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    bcb4:	fbb1 f1f2 	udiv	r1, r1, r2
    bcb8:	1a40      	subs	r0, r0, r1
    bcba:	4770      	bx	lr
    bcbc:	200014b0 	.word	0x200014b0
    bcc0:	b570      	push	{r4, r5, r6, lr}
    bcc2:	4c13      	ldr	r4, [pc, #76]	; (bd10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x424>)
    bcc4:	4603      	mov	r3, r0
    bcc6:	460d      	mov	r5, r1
    bcc8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    bccc:	2000      	movs	r0, #0
    bcce:	b15a      	cbz	r2, bce8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fc>
    bcd0:	4621      	mov	r1, r4
    bcd2:	f891 1020 	ldrb.w	r1, [r1, #32]
    bcd6:	b163      	cbz	r3, bcf2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    bcd8:	2b01      	cmp	r3, #1
    bcda:	d111      	bne.n	bd00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>
    bcdc:	2a01      	cmp	r2, #1
    bcde:	4628      	mov	r0, r5
    bce0:	d012      	beq.n	bd08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    bce2:	f004 fd48 	bl	10776 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    bce6:	e009      	b.n	bcfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    bce8:	f640 0153 	movw	r1, #2131	; 0x853
    bcec:	203e      	movs	r0, #62	; 0x3e
    bcee:	f7f8 fedd 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcf2:	2a01      	cmp	r2, #1
    bcf4:	4628      	mov	r0, r5
    bcf6:	d004      	beq.n	bd02 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x416>
    bcf8:	f004 fd4b 	bl	10792 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    bcfc:	69e1      	ldr	r1, [r4, #28]
    bcfe:	4408      	add	r0, r1
    bd00:	bd70      	pop	{r4, r5, r6, pc}
    bd02:	f000 f8d1 	bl	bea8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    bd06:	e7f9      	b.n	bcfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    bd08:	f000 f8c0 	bl	be8c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    bd0c:	e7f6      	b.n	bcfc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x410>
    bd0e:	0000      	.short	0x0000
    bd10:	200014b0 	.word	0x200014b0
    bd14:	b510      	push	{r4, lr}
    bd16:	f7ff fc07 	bl	b528 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bd1a:	f7ff fded 	bl	b8f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bd1e:	f7ff fe23 	bl	b968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    bd22:	f7ff ff53 	bl	bbcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e0>
    bd26:	f000 fbf2 	bl	c50e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bd2a:	2800      	cmp	r0, #0
    bd2c:	d108      	bne.n	bd40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    bd2e:	f000 fbde 	bl	c4ee <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bd32:	2800      	cmp	r0, #0
    bd34:	d104      	bne.n	bd40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    bd36:	4803      	ldr	r0, [pc, #12]	; (bd44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x458>)
    bd38:	6801      	ldr	r1, [r0, #0]
    bd3a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    bd3e:	6001      	str	r1, [r0, #0]
    bd40:	bd10      	pop	{r4, pc}
    bd42:	0000      	.short	0x0000
    bd44:	40001568 	.word	0x40001568
    bd48:	b510      	push	{r4, lr}
    bd4a:	4604      	mov	r4, r0
    bd4c:	f7ff fbec 	bl	b528 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bd50:	f7ff fdd2 	bl	b8f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bd54:	4620      	mov	r0, r4
    bd56:	f7ff fded 	bl	b934 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    bd5a:	f000 fbd8 	bl	c50e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bd5e:	2800      	cmp	r0, #0
    bd60:	d00d      	beq.n	bd7e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x492>
    bd62:	4a09      	ldr	r2, [pc, #36]	; (bd88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49c>)
    bd64:	6811      	ldr	r1, [r2, #0]
    bd66:	0650      	lsls	r0, r2, #25
    bd68:	2c02      	cmp	r4, #2
    bd6a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    bd6e:	d007      	beq.n	bd80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    bd70:	f3c0 2006 	ubfx	r0, r0, #8, #7
    bd74:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bd78:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bd7c:	6010      	str	r0, [r2, #0]
    bd7e:	bd10      	pop	{r4, pc}
    bd80:	f3c0 6006 	ubfx	r0, r0, #24, #7
    bd84:	e7f6      	b.n	bd74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    bd86:	0000      	.short	0x0000
    bd88:	40001588 	.word	0x40001588
    bd8c:	a62c0000 	.word	0xa62c0000
    bd90:	0604a1e0 	.word	0x0604a1e0
    bd94:	0e0c0a08 	.word	0x0e0c0a08
    bd98:	16141210 	.word	0x16141210
    bd9c:	201e1c18 	.word	0x201e1c18
    bda0:	28262422 	.word	0x28262422
    bda4:	302e2c2a 	.word	0x302e2c2a
    bda8:	38363432 	.word	0x38363432
    bdac:	403e3c3a 	.word	0x403e3c3a
    bdb0:	48464442 	.word	0x48464442
    bdb4:	024e4c4a 	.word	0x024e4c4a
    bdb8:	0000501a 	.word	0x0000501a
    bdbc:	00000001 	.word	0x00000001
    bdc0:	40001110 	.word	0x40001110
	...
    bdd8:	00001e14 	.word	0x00001e14
    bddc:	00001130 	.word	0x00001130
    bde0:	00000000 	.word	0x00000000
    bde4:	00000028 	.word	0x00000028
    bde8:	00000018 	.word	0x00000018
    bdec:	00000000 	.word	0x00000000
    bdf0:	00001e14 	.word	0x00001e14
    bdf4:	00001130 	.word	0x00001130
    bdf8:	00000000 	.word	0x00000000
    bdfc:	00001770 	.word	0x00001770
    be00:	00000fa0 	.word	0x00000fa0

0000be04 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    be04:	b570      	push	{r4, r5, r6, lr}
    be06:	4605      	mov	r5, r0
    be08:	4614      	mov	r4, r2
    be0a:	4608      	mov	r0, r1
    be0c:	f7ff fbb2 	bl	b574 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    be10:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    be14:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    be18:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    be1c:	4807      	ldr	r0, [pc, #28]	; (be3c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    be1e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    be22:	4408      	add	r0, r1
    be24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    be28:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    be2c:	fbb0 f5f1 	udiv	r5, r0, r1
    be30:	4620      	mov	r0, r4
    be32:	f7ff fb73 	bl	b51c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    be36:	4428      	add	r0, r5
    be38:	1d40      	adds	r0, r0, #5
    be3a:	bd70      	pop	{r4, r5, r6, pc}
    be3c:	0000becc 	.word	0x0000becc

0000be40 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    be40:	b570      	push	{r4, r5, r6, lr}
    be42:	4d0e      	ldr	r5, [pc, #56]	; (be7c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    be44:	461c      	mov	r4, r3
    be46:	3d08      	subs	r5, #8
    be48:	4b0c      	ldr	r3, [pc, #48]	; (be7c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    be4a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    be4e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    be52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    be56:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    be5a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    be5e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    be62:	4418      	add	r0, r3
    be64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    be68:	fbb0 f5f1 	udiv	r5, r0, r1
    be6c:	4610      	mov	r0, r2
    be6e:	f7ff fb55 	bl	b51c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    be72:	4428      	add	r0, r5
    be74:	4420      	add	r0, r4
    be76:	1d40      	adds	r0, r0, #5
    be78:	bd70      	pop	{r4, r5, r6, pc}
    be7a:	0000      	.short	0x0000
    be7c:	0000becc 	.word	0x0000becc

0000be80 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    be80:	4901      	ldr	r1, [pc, #4]	; (be88 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    be82:	b2c0      	uxtb	r0, r0
    be84:	6008      	str	r0, [r1, #0]
    be86:	4770      	bx	lr
    be88:	4000150c 	.word	0x4000150c

0000be8c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    be8c:	4a05      	ldr	r2, [pc, #20]	; (bea4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    be8e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    be92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    be96:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    be9a:	fbb1 f1f2 	udiv	r1, r1, r2
    be9e:	4408      	add	r0, r1
    bea0:	1e80      	subs	r0, r0, #2
    bea2:	4770      	bx	lr
    bea4:	0000bec4 	.word	0x0000bec4

0000bea8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    bea8:	4a05      	ldr	r2, [pc, #20]	; (bec0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    beaa:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    beae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    beb2:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    beb6:	fbb1 f1f2 	udiv	r1, r1, r2
    beba:	4408      	add	r0, r1
    bebc:	4770      	bx	lr
    bebe:	0000      	.short	0x0000
    bec0:	0000bec4 	.word	0x0000bec4
    bec4:	05dc0000 	.word	0x05dc0000
    bec8:	000003e8 	.word	0x000003e8
    becc:	00000000 	.word	0x00000000
    bed0:	00001e14 	.word	0x00001e14
    bed4:	00001130 	.word	0x00001130

0000bed8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    bed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bedc:	461e      	mov	r6, r3
    bede:	4617      	mov	r7, r2
    bee0:	460c      	mov	r4, r1
    bee2:	4605      	mov	r5, r0
    bee4:	f7f4 ffac 	bl	e40 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    bee8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bf90 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    beec:	4680      	mov	r8, r0
    beee:	f899 0000 	ldrb.w	r0, [r9]
    bef2:	42a8      	cmp	r0, r5
    bef4:	d110      	bne.n	bf18 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    bef6:	f899 1001 	ldrb.w	r1, [r9, #1]
    befa:	4648      	mov	r0, r9
    befc:	42a1      	cmp	r1, r4
    befe:	d10b      	bne.n	bf18 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    bf00:	f990 1002 	ldrsb.w	r1, [r0, #2]
    bf04:	42b9      	cmp	r1, r7
    bf06:	d107      	bne.n	bf18 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    bf08:	78c2      	ldrb	r2, [r0, #3]
    bf0a:	4542      	cmp	r2, r8
    bf0c:	d104      	bne.n	bf18 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    bf0e:	8881      	ldrh	r1, [r0, #4]
    bf10:	8031      	strh	r1, [r6, #0]
    bf12:	7980      	ldrb	r0, [r0, #6]
    bf14:	70b0      	strb	r0, [r6, #2]
    bf16:	e036      	b.n	bf86 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xae>
    bf18:	463a      	mov	r2, r7
    bf1a:	4621      	mov	r1, r4
    bf1c:	2d01      	cmp	r5, #1
    bf1e:	d009      	beq.n	bf34 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    bf20:	2d02      	cmp	r5, #2
    bf22:	d009      	beq.n	bf38 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    bf24:	2d04      	cmp	r5, #4
    bf26:	d009      	beq.n	bf3c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    bf28:	2d08      	cmp	r5, #8
    bf2a:	d009      	beq.n	bf40 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    bf2c:	f240 415a 	movw	r1, #1114	; 0x45a
    bf30:	2006      	movs	r0, #6
    bf32:	e00c      	b.n	bf4e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    bf34:	2000      	movs	r0, #0
    bf36:	e004      	b.n	bf42 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    bf38:	2001      	movs	r0, #1
    bf3a:	e002      	b.n	bf42 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    bf3c:	2003      	movs	r0, #3
    bf3e:	e000      	b.n	bf42 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    bf40:	2002      	movs	r0, #2
    bf42:	466b      	mov	r3, sp
    bf44:	f7f4 ffcc 	bl	ee0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    bf48:	b118      	cbz	r0, bf52 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    bf4a:	213d      	movs	r1, #61	; 0x3d
    bf4c:	2075      	movs	r0, #117	; 0x75
    bf4e:	f7f8 fdad 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf52:	4620      	mov	r0, r4
    bf54:	f7ff f88a 	bl	b06c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    bf58:	4602      	mov	r2, r0
    bf5a:	4631      	mov	r1, r6
    bf5c:	f99d 0000 	ldrsb.w	r0, [sp]
    bf60:	f7f8 fc86 	bl	4870 <mpsl_fem_tx_power_split>
    bf64:	4601      	mov	r1, r0
    bf66:	f889 1007 	strb.w	r1, [r9, #7]
    bf6a:	8831      	ldrh	r1, [r6, #0]
    bf6c:	f8a9 1004 	strh.w	r1, [r9, #4]
    bf70:	78b1      	ldrb	r1, [r6, #2]
    bf72:	f889 1006 	strb.w	r1, [r9, #6]
    bf76:	f889 5000 	strb.w	r5, [r9]
    bf7a:	f889 4001 	strb.w	r4, [r9, #1]
    bf7e:	f889 7002 	strb.w	r7, [r9, #2]
    bf82:	f889 8003 	strb.w	r8, [r9, #3]
    bf86:	f999 0007 	ldrsb.w	r0, [r9, #7]
    bf8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bf8e:	0000      	.short	0x0000
    bf90:	2000036e 	.word	0x2000036e

0000bf94 <__udivmoddi4>:
    bf94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf98:	4686      	mov	lr, r0
    bf9a:	468c      	mov	ip, r1
    bf9c:	4608      	mov	r0, r1
    bf9e:	9e08      	ldr	r6, [sp, #32]
    bfa0:	4615      	mov	r5, r2
    bfa2:	4674      	mov	r4, lr
    bfa4:	4619      	mov	r1, r3
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	f040 80c2 	bne.w	c130 <__udivmoddi4+0x19c>
    bfac:	4285      	cmp	r5, r0
    bfae:	fab2 f282 	clz	r2, r2
    bfb2:	d945      	bls.n	c040 <__udivmoddi4+0xac>
    bfb4:	b14a      	cbz	r2, bfca <__udivmoddi4+0x36>
    bfb6:	f1c2 0320 	rsb	r3, r2, #32
    bfba:	fa00 fc02 	lsl.w	ip, r0, r2
    bfbe:	fa2e f303 	lsr.w	r3, lr, r3
    bfc2:	4095      	lsls	r5, r2
    bfc4:	ea43 0c0c 	orr.w	ip, r3, ip
    bfc8:	4094      	lsls	r4, r2
    bfca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    bfce:	b2a8      	uxth	r0, r5
    bfd0:	fbbc f8fe 	udiv	r8, ip, lr
    bfd4:	0c23      	lsrs	r3, r4, #16
    bfd6:	fb0e cc18 	mls	ip, lr, r8, ip
    bfda:	fb08 f900 	mul.w	r9, r8, r0
    bfde:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    bfe2:	4599      	cmp	r9, r3
    bfe4:	d928      	bls.n	c038 <__udivmoddi4+0xa4>
    bfe6:	18eb      	adds	r3, r5, r3
    bfe8:	f108 37ff 	add.w	r7, r8, #4294967295
    bfec:	d204      	bcs.n	bff8 <__udivmoddi4+0x64>
    bfee:	4599      	cmp	r9, r3
    bff0:	d902      	bls.n	bff8 <__udivmoddi4+0x64>
    bff2:	f1a8 0702 	sub.w	r7, r8, #2
    bff6:	442b      	add	r3, r5
    bff8:	eba3 0309 	sub.w	r3, r3, r9
    bffc:	b2a4      	uxth	r4, r4
    bffe:	fbb3 fcfe 	udiv	ip, r3, lr
    c002:	fb0e 331c 	mls	r3, lr, ip, r3
    c006:	fb0c f000 	mul.w	r0, ip, r0
    c00a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c00e:	42a0      	cmp	r0, r4
    c010:	d914      	bls.n	c03c <__udivmoddi4+0xa8>
    c012:	192c      	adds	r4, r5, r4
    c014:	f10c 33ff 	add.w	r3, ip, #4294967295
    c018:	d204      	bcs.n	c024 <__udivmoddi4+0x90>
    c01a:	42a0      	cmp	r0, r4
    c01c:	d902      	bls.n	c024 <__udivmoddi4+0x90>
    c01e:	f1ac 0302 	sub.w	r3, ip, #2
    c022:	442c      	add	r4, r5
    c024:	1a24      	subs	r4, r4, r0
    c026:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c02a:	b11e      	cbz	r6, c034 <__udivmoddi4+0xa0>
    c02c:	40d4      	lsrs	r4, r2
    c02e:	2300      	movs	r3, #0
    c030:	6034      	str	r4, [r6, #0]
    c032:	6073      	str	r3, [r6, #4]
    c034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c038:	4647      	mov	r7, r8
    c03a:	e7dd      	b.n	bff8 <__udivmoddi4+0x64>
    c03c:	4663      	mov	r3, ip
    c03e:	e7f1      	b.n	c024 <__udivmoddi4+0x90>
    c040:	bb92      	cbnz	r2, c0a8 <__udivmoddi4+0x114>
    c042:	1b43      	subs	r3, r0, r5
    c044:	2101      	movs	r1, #1
    c046:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c04a:	b2af      	uxth	r7, r5
    c04c:	fbb3 fcfe 	udiv	ip, r3, lr
    c050:	0c20      	lsrs	r0, r4, #16
    c052:	fb0e 331c 	mls	r3, lr, ip, r3
    c056:	fb0c f807 	mul.w	r8, ip, r7
    c05a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c05e:	4598      	cmp	r8, r3
    c060:	d962      	bls.n	c128 <__udivmoddi4+0x194>
    c062:	18eb      	adds	r3, r5, r3
    c064:	f10c 30ff 	add.w	r0, ip, #4294967295
    c068:	d204      	bcs.n	c074 <__udivmoddi4+0xe0>
    c06a:	4598      	cmp	r8, r3
    c06c:	d902      	bls.n	c074 <__udivmoddi4+0xe0>
    c06e:	f1ac 0002 	sub.w	r0, ip, #2
    c072:	442b      	add	r3, r5
    c074:	eba3 0308 	sub.w	r3, r3, r8
    c078:	b2a4      	uxth	r4, r4
    c07a:	fbb3 fcfe 	udiv	ip, r3, lr
    c07e:	fb0e 331c 	mls	r3, lr, ip, r3
    c082:	fb0c f707 	mul.w	r7, ip, r7
    c086:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c08a:	42a7      	cmp	r7, r4
    c08c:	d94e      	bls.n	c12c <__udivmoddi4+0x198>
    c08e:	192c      	adds	r4, r5, r4
    c090:	f10c 33ff 	add.w	r3, ip, #4294967295
    c094:	d204      	bcs.n	c0a0 <__udivmoddi4+0x10c>
    c096:	42a7      	cmp	r7, r4
    c098:	d902      	bls.n	c0a0 <__udivmoddi4+0x10c>
    c09a:	f1ac 0302 	sub.w	r3, ip, #2
    c09e:	442c      	add	r4, r5
    c0a0:	1be4      	subs	r4, r4, r7
    c0a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c0a6:	e7c0      	b.n	c02a <__udivmoddi4+0x96>
    c0a8:	f1c2 0320 	rsb	r3, r2, #32
    c0ac:	fa20 f103 	lsr.w	r1, r0, r3
    c0b0:	4095      	lsls	r5, r2
    c0b2:	4090      	lsls	r0, r2
    c0b4:	fa2e f303 	lsr.w	r3, lr, r3
    c0b8:	4303      	orrs	r3, r0
    c0ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c0be:	b2af      	uxth	r7, r5
    c0c0:	fbb1 fcfe 	udiv	ip, r1, lr
    c0c4:	fb0e 101c 	mls	r0, lr, ip, r1
    c0c8:	0c19      	lsrs	r1, r3, #16
    c0ca:	fb0c f807 	mul.w	r8, ip, r7
    c0ce:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c0d2:	4588      	cmp	r8, r1
    c0d4:	fa04 f402 	lsl.w	r4, r4, r2
    c0d8:	d922      	bls.n	c120 <__udivmoddi4+0x18c>
    c0da:	1869      	adds	r1, r5, r1
    c0dc:	f10c 30ff 	add.w	r0, ip, #4294967295
    c0e0:	d204      	bcs.n	c0ec <__udivmoddi4+0x158>
    c0e2:	4588      	cmp	r8, r1
    c0e4:	d902      	bls.n	c0ec <__udivmoddi4+0x158>
    c0e6:	f1ac 0002 	sub.w	r0, ip, #2
    c0ea:	4429      	add	r1, r5
    c0ec:	eba1 0108 	sub.w	r1, r1, r8
    c0f0:	b29b      	uxth	r3, r3
    c0f2:	fbb1 fcfe 	udiv	ip, r1, lr
    c0f6:	fb0e 111c 	mls	r1, lr, ip, r1
    c0fa:	fb0c f707 	mul.w	r7, ip, r7
    c0fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c102:	429f      	cmp	r7, r3
    c104:	d90e      	bls.n	c124 <__udivmoddi4+0x190>
    c106:	18eb      	adds	r3, r5, r3
    c108:	f10c 31ff 	add.w	r1, ip, #4294967295
    c10c:	d204      	bcs.n	c118 <__udivmoddi4+0x184>
    c10e:	429f      	cmp	r7, r3
    c110:	d902      	bls.n	c118 <__udivmoddi4+0x184>
    c112:	f1ac 0102 	sub.w	r1, ip, #2
    c116:	442b      	add	r3, r5
    c118:	1bdb      	subs	r3, r3, r7
    c11a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c11e:	e792      	b.n	c046 <__udivmoddi4+0xb2>
    c120:	4660      	mov	r0, ip
    c122:	e7e3      	b.n	c0ec <__udivmoddi4+0x158>
    c124:	4661      	mov	r1, ip
    c126:	e7f7      	b.n	c118 <__udivmoddi4+0x184>
    c128:	4660      	mov	r0, ip
    c12a:	e7a3      	b.n	c074 <__udivmoddi4+0xe0>
    c12c:	4663      	mov	r3, ip
    c12e:	e7b7      	b.n	c0a0 <__udivmoddi4+0x10c>
    c130:	4283      	cmp	r3, r0
    c132:	d906      	bls.n	c142 <__udivmoddi4+0x1ae>
    c134:	b916      	cbnz	r6, c13c <__udivmoddi4+0x1a8>
    c136:	2100      	movs	r1, #0
    c138:	4608      	mov	r0, r1
    c13a:	e77b      	b.n	c034 <__udivmoddi4+0xa0>
    c13c:	e9c6 e000 	strd	lr, r0, [r6]
    c140:	e7f9      	b.n	c136 <__udivmoddi4+0x1a2>
    c142:	fab3 f783 	clz	r7, r3
    c146:	b98f      	cbnz	r7, c16c <__udivmoddi4+0x1d8>
    c148:	4283      	cmp	r3, r0
    c14a:	d301      	bcc.n	c150 <__udivmoddi4+0x1bc>
    c14c:	4572      	cmp	r2, lr
    c14e:	d808      	bhi.n	c162 <__udivmoddi4+0x1ce>
    c150:	ebbe 0402 	subs.w	r4, lr, r2
    c154:	eb60 0303 	sbc.w	r3, r0, r3
    c158:	2001      	movs	r0, #1
    c15a:	469c      	mov	ip, r3
    c15c:	b91e      	cbnz	r6, c166 <__udivmoddi4+0x1d2>
    c15e:	2100      	movs	r1, #0
    c160:	e768      	b.n	c034 <__udivmoddi4+0xa0>
    c162:	4638      	mov	r0, r7
    c164:	e7fa      	b.n	c15c <__udivmoddi4+0x1c8>
    c166:	e9c6 4c00 	strd	r4, ip, [r6]
    c16a:	e7f8      	b.n	c15e <__udivmoddi4+0x1ca>
    c16c:	f1c7 0c20 	rsb	ip, r7, #32
    c170:	40bb      	lsls	r3, r7
    c172:	fa22 f40c 	lsr.w	r4, r2, ip
    c176:	431c      	orrs	r4, r3
    c178:	fa2e f10c 	lsr.w	r1, lr, ip
    c17c:	fa20 f30c 	lsr.w	r3, r0, ip
    c180:	40b8      	lsls	r0, r7
    c182:	4301      	orrs	r1, r0
    c184:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c188:	fa0e f507 	lsl.w	r5, lr, r7
    c18c:	fbb3 f8f9 	udiv	r8, r3, r9
    c190:	fa1f fe84 	uxth.w	lr, r4
    c194:	fb09 3018 	mls	r0, r9, r8, r3
    c198:	0c0b      	lsrs	r3, r1, #16
    c19a:	fb08 fa0e 	mul.w	sl, r8, lr
    c19e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c1a2:	459a      	cmp	sl, r3
    c1a4:	fa02 f207 	lsl.w	r2, r2, r7
    c1a8:	d940      	bls.n	c22c <__udivmoddi4+0x298>
    c1aa:	18e3      	adds	r3, r4, r3
    c1ac:	f108 30ff 	add.w	r0, r8, #4294967295
    c1b0:	d204      	bcs.n	c1bc <__udivmoddi4+0x228>
    c1b2:	459a      	cmp	sl, r3
    c1b4:	d902      	bls.n	c1bc <__udivmoddi4+0x228>
    c1b6:	f1a8 0002 	sub.w	r0, r8, #2
    c1ba:	4423      	add	r3, r4
    c1bc:	eba3 030a 	sub.w	r3, r3, sl
    c1c0:	b289      	uxth	r1, r1
    c1c2:	fbb3 f8f9 	udiv	r8, r3, r9
    c1c6:	fb09 3318 	mls	r3, r9, r8, r3
    c1ca:	fb08 fe0e 	mul.w	lr, r8, lr
    c1ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c1d2:	458e      	cmp	lr, r1
    c1d4:	d92c      	bls.n	c230 <__udivmoddi4+0x29c>
    c1d6:	1861      	adds	r1, r4, r1
    c1d8:	f108 33ff 	add.w	r3, r8, #4294967295
    c1dc:	d204      	bcs.n	c1e8 <__udivmoddi4+0x254>
    c1de:	458e      	cmp	lr, r1
    c1e0:	d902      	bls.n	c1e8 <__udivmoddi4+0x254>
    c1e2:	f1a8 0302 	sub.w	r3, r8, #2
    c1e6:	4421      	add	r1, r4
    c1e8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c1ec:	fba0 9802 	umull	r9, r8, r0, r2
    c1f0:	eba1 010e 	sub.w	r1, r1, lr
    c1f4:	4541      	cmp	r1, r8
    c1f6:	46ce      	mov	lr, r9
    c1f8:	4643      	mov	r3, r8
    c1fa:	d302      	bcc.n	c202 <__udivmoddi4+0x26e>
    c1fc:	d106      	bne.n	c20c <__udivmoddi4+0x278>
    c1fe:	454d      	cmp	r5, r9
    c200:	d204      	bcs.n	c20c <__udivmoddi4+0x278>
    c202:	ebb9 0e02 	subs.w	lr, r9, r2
    c206:	eb68 0304 	sbc.w	r3, r8, r4
    c20a:	3801      	subs	r0, #1
    c20c:	2e00      	cmp	r6, #0
    c20e:	d0a6      	beq.n	c15e <__udivmoddi4+0x1ca>
    c210:	ebb5 020e 	subs.w	r2, r5, lr
    c214:	eb61 0103 	sbc.w	r1, r1, r3
    c218:	fa01 fc0c 	lsl.w	ip, r1, ip
    c21c:	fa22 f307 	lsr.w	r3, r2, r7
    c220:	ea4c 0303 	orr.w	r3, ip, r3
    c224:	40f9      	lsrs	r1, r7
    c226:	e9c6 3100 	strd	r3, r1, [r6]
    c22a:	e798      	b.n	c15e <__udivmoddi4+0x1ca>
    c22c:	4640      	mov	r0, r8
    c22e:	e7c5      	b.n	c1bc <__udivmoddi4+0x228>
    c230:	4643      	mov	r3, r8
    c232:	e7d9      	b.n	c1e8 <__udivmoddi4+0x254>
    c234:	2804      	cmp	r0, #4
    c236:	d202      	bcs.n	c23e <__udivmoddi4+0x2aa>
    c238:	f04f 0028 	mov.w	r0, #40	; 0x28
    c23c:	4770      	bx	lr
    c23e:	d102      	bne.n	c246 <__udivmoddi4+0x2b2>
    c240:	f04f 0010 	mov.w	r0, #16
    c244:	4770      	bx	lr
    c246:	f04f 0000 	mov.w	r0, #0
    c24a:	4770      	bx	lr
    c24c:	2100      	movs	r1, #0
    c24e:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    c252:	f800 1f24 	strb.w	r1, [r0, #36]!
    c256:	7041      	strb	r1, [r0, #1]
    c258:	4770      	bx	lr

0000c25a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c25a:	b570      	push	{r4, r5, r6, lr}
    c25c:	f7f4 fe60 	bl	f20 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c260:	4605      	mov	r5, r0
    c262:	2400      	movs	r4, #0
    c264:	e006      	b.n	c274 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c266:	4620      	mov	r0, r4
    c268:	f7f4 fe60 	bl	f2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c26c:	f7ff ffee 	bl	c24c <__udivmoddi4+0x2b8>
    c270:	1c64      	adds	r4, r4, #1
    c272:	b2e4      	uxtb	r4, r4
    c274:	42ac      	cmp	r4, r5
    c276:	d3f6      	bcc.n	c266 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c278:	bd70      	pop	{r4, r5, r6, pc}

0000c27a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    c27a:	f7f7 ba1b 	b.w	36b4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

0000c27e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    c27e:	b510      	push	{r4, lr}
    c280:	2000      	movs	r0, #0
    c282:	f7f7 fd3d 	bl	3d00 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    c286:	6800      	ldr	r0, [r0, #0]
    c288:	2800      	cmp	r0, #0
    c28a:	bf18      	it	ne
    c28c:	2001      	movne	r0, #1
    c28e:	bd10      	pop	{r4, pc}

0000c290 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    c290:	b510      	push	{r4, lr}
    c292:	f7f7 fdb5 	bl	3e00 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    c296:	f7f7 f887 	bl	33a8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    c29a:	f000 f802 	bl	c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    c29e:	b280      	uxth	r0, r0
    c2a0:	bd10      	pop	{r4, pc}

0000c2a2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c2a2:	0a41      	lsrs	r1, r0, #9
    c2a4:	f643 5209 	movw	r2, #15625	; 0x3d09
    c2a8:	4351      	muls	r1, r2
    c2aa:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c2ae:	fb10 f002 	smulbb	r0, r0, r2
    c2b2:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c2b6:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c2ba:	4770      	bx	lr
    c2bc:	2800      	cmp	r0, #0
    c2be:	db09      	blt.n	c2d4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    c2c0:	f000 021f 	and.w	r2, r0, #31
    c2c4:	2101      	movs	r1, #1
    c2c6:	4091      	lsls	r1, r2
    c2c8:	0940      	lsrs	r0, r0, #5
    c2ca:	0080      	lsls	r0, r0, #2
    c2cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c2d0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c2d4:	4770      	bx	lr
    c2d6:	2800      	cmp	r0, #0
    c2d8:	db0d      	blt.n	c2f6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    c2da:	f000 021f 	and.w	r2, r0, #31
    c2de:	2101      	movs	r1, #1
    c2e0:	4091      	lsls	r1, r2
    c2e2:	0940      	lsrs	r0, r0, #5
    c2e4:	0080      	lsls	r0, r0, #2
    c2e6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c2ea:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c2ee:	f3bf 8f4f 	dsb	sy
    c2f2:	f3bf 8f6f 	isb	sy
    c2f6:	4770      	bx	lr

0000c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c2f8:	b570      	push	{r4, r5, r6, lr}
    c2fa:	4602      	mov	r2, r0
    c2fc:	2000      	movs	r0, #0
    c2fe:	2900      	cmp	r1, #0
    c300:	d01d      	beq.n	c33e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c302:	fba2 0101 	umull	r0, r1, r2, r1
    c306:	0a40      	lsrs	r0, r0, #9
    c308:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c30c:	0a49      	lsrs	r1, r1, #9
    c30e:	1c40      	adds	r0, r0, #1
    c310:	f141 0100 	adc.w	r1, r1, #0
    c314:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c318:	1883      	adds	r3, r0, r2
    c31a:	f141 0100 	adc.w	r1, r1, #0
    c31e:	1c5b      	adds	r3, r3, #1
    c320:	f141 0400 	adc.w	r4, r1, #0
    c324:	2100      	movs	r1, #0
    c326:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c32a:	41a1      	sbcs	r1, r4
    c32c:	d203      	bcs.n	c336 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c32e:	2172      	movs	r1, #114	; 0x72
    c330:	206d      	movs	r0, #109	; 0x6d
    c332:	f7f8 f8dd 	bl	44f0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c336:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c33a:	fbb0 f0f2 	udiv	r0, r0, r2
    c33e:	bd70      	pop	{r4, r5, r6, pc}
    c340:	5840      	ldr	r0, [r0, r1]
    c342:	2800      	cmp	r0, #0
    c344:	d000      	beq.n	c348 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c346:	2001      	movs	r0, #1
    c348:	4770      	bx	lr
    c34a:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c34e:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c352:	f002 0201 	and.w	r2, r2, #1
    c356:	03c0      	lsls	r0, r0, #15
    c358:	d503      	bpl.n	c362 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c35a:	428a      	cmp	r2, r1
    c35c:	d101      	bne.n	c362 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c35e:	2001      	movs	r0, #1
    c360:	4770      	bx	lr
    c362:	2000      	movs	r0, #0
    c364:	4770      	bx	lr

0000c366 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c366:	b510      	push	{r4, lr}
    c368:	2101      	movs	r1, #1
    c36a:	0788      	lsls	r0, r1, #30
    c36c:	f7f8 f86a 	bl	4444 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c370:	2800      	cmp	r0, #0
    c372:	d000      	beq.n	c376 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c374:	2001      	movs	r0, #1
    c376:	bd10      	pop	{r4, pc}

0000c378 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c378:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c37c:	2101      	movs	r1, #1
    c37e:	6001      	str	r1, [r0, #0]
    c380:	4770      	bx	lr

0000c382 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c382:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c386:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c38a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c38e:	f002 0203 	and.w	r2, r2, #3
    c392:	03c9      	lsls	r1, r1, #15
    c394:	d503      	bpl.n	c39e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c396:	4282      	cmp	r2, r0
    c398:	d101      	bne.n	c39e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c39a:	2001      	movs	r0, #1
    c39c:	4770      	bx	lr
    c39e:	2000      	movs	r0, #0
    c3a0:	4770      	bx	lr

0000c3a2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c3a2:	b510      	push	{r4, lr}
    c3a4:	2100      	movs	r1, #0
    c3a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3aa:	f7f8 f84b 	bl	4444 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c3ae:	2800      	cmp	r0, #0
    c3b0:	d000      	beq.n	c3b4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c3b2:	2001      	movs	r0, #1
    c3b4:	bd10      	pop	{r4, pc}
    c3b6:	2800      	cmp	r0, #0
    c3b8:	db09      	blt.n	c3ce <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c3ba:	f000 021f 	and.w	r2, r0, #31
    c3be:	2101      	movs	r1, #1
    c3c0:	4091      	lsls	r1, r2
    c3c2:	0940      	lsrs	r0, r0, #5
    c3c4:	0080      	lsls	r0, r0, #2
    c3c6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c3ca:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c3ce:	4770      	bx	lr
    c3d0:	2800      	cmp	r0, #0
    c3d2:	db0d      	blt.n	c3f0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c3d4:	f000 021f 	and.w	r2, r0, #31
    c3d8:	2101      	movs	r1, #1
    c3da:	4091      	lsls	r1, r2
    c3dc:	0940      	lsrs	r0, r0, #5
    c3de:	0080      	lsls	r0, r0, #2
    c3e0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c3e4:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c3e8:	f3bf 8f4f 	dsb	sy
    c3ec:	f3bf 8f6f 	isb	sy
    c3f0:	4770      	bx	lr
    c3f2:	1000      	.short	0x1000
    c3f4:	00fa0002 	.word	0x00fa0002
    c3f8:	edb80000 	.word	0xedb80000
    c3fc:	0ef2aa4d 	.word	0x0ef2aa4d
    c400:	b5ea3202 	.word	0xb5ea3202
    c404:	d1502fde 	.word	0xd1502fde
    c408:	d2b55ab7 	.word	0xd2b55ab7
    c40c:	41c7      	.short	0x41c7
    c40e:	2800      	cmp	r0, #0
    c410:	db09      	blt.n	c426 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c412:	f000 021f 	and.w	r2, r0, #31
    c416:	2101      	movs	r1, #1
    c418:	4091      	lsls	r1, r2
    c41a:	0940      	lsrs	r0, r0, #5
    c41c:	0080      	lsls	r0, r0, #2
    c41e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c422:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c426:	4770      	bx	lr

0000c428 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c428:	f3ef 8110 	mrs	r1, PRIMASK
    c42c:	b672      	cpsid	i
    c42e:	7802      	ldrb	r2, [r0, #0]
    c430:	2a01      	cmp	r2, #1
    c432:	d001      	beq.n	c438 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c434:	2201      	movs	r2, #1
    c436:	e000      	b.n	c43a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c438:	2200      	movs	r2, #0
    c43a:	2301      	movs	r3, #1
    c43c:	7003      	strb	r3, [r0, #0]
    c43e:	b901      	cbnz	r1, c442 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c440:	b662      	cpsie	i
    c442:	b10a      	cbz	r2, c448 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c444:	2000      	movs	r0, #0
    c446:	4770      	bx	lr
    c448:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c44c:	4770      	bx	lr

0000c44e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c44e:	2100      	movs	r1, #0
    c450:	7001      	strb	r1, [r0, #0]
    c452:	4608      	mov	r0, r1
    c454:	4770      	bx	lr

0000c456 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c456:	f3ef 8110 	mrs	r1, PRIMASK
    c45a:	b672      	cpsid	i
    c45c:	2200      	movs	r2, #0
    c45e:	7002      	strb	r2, [r0, #0]
    c460:	b901      	cbnz	r1, c464 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c462:	b662      	cpsie	i
    c464:	2000      	movs	r0, #0
    c466:	4770      	bx	lr

0000c468 <mpsl_low_priority_process>:
    c468:	f7f8 b942 	b.w	46f0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c46c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c46c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c470:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c474:	280f      	cmp	r0, #15
    c476:	d001      	beq.n	c47c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c478:	2000      	movs	r0, #0
    c47a:	4770      	bx	lr
    c47c:	2001      	movs	r0, #1
    c47e:	4770      	bx	lr

0000c480 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c480:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c484:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c488:	280a      	cmp	r0, #10
    c48a:	d001      	beq.n	c490 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c48c:	2000      	movs	r0, #0
    c48e:	4770      	bx	lr
    c490:	2001      	movs	r0, #1
    c492:	4770      	bx	lr

0000c494 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c494:	b500      	push	{lr}
    c496:	f7ff fff3 	bl	c480 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c49a:	b120      	cbz	r0, c4a6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c49c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4a0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c4a4:	b108      	cbz	r0, c4aa <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c4a6:	2000      	movs	r0, #0
    c4a8:	bd00      	pop	{pc}
    c4aa:	2001      	movs	r0, #1
    c4ac:	bd00      	pop	{pc}

0000c4ae <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c4ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4b2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4b6:	280e      	cmp	r0, #14
    c4b8:	d001      	beq.n	c4be <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c4ba:	2000      	movs	r0, #0
    c4bc:	4770      	bx	lr
    c4be:	2001      	movs	r0, #1
    c4c0:	4770      	bx	lr

0000c4c2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c4c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4c6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4ca:	2810      	cmp	r0, #16
    c4cc:	d001      	beq.n	c4d2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c4ce:	2000      	movs	r0, #0
    c4d0:	4770      	bx	lr
    c4d2:	2001      	movs	r0, #1
    c4d4:	4770      	bx	lr

0000c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c4d6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4da:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4de:	2806      	cmp	r0, #6
    c4e0:	d003      	beq.n	c4ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c4e2:	1c40      	adds	r0, r0, #1
    c4e4:	d001      	beq.n	c4ea <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c4e6:	2000      	movs	r0, #0
    c4e8:	4770      	bx	lr
    c4ea:	2001      	movs	r0, #1
    c4ec:	4770      	bx	lr

0000c4ee <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c4ee:	b500      	push	{lr}
    c4f0:	f7ff fff1 	bl	c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c4f4:	b148      	cbz	r0, c50a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c4f6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4fa:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c4fe:	2806      	cmp	r0, #6
    c500:	d303      	bcc.n	c50a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c502:	1c40      	adds	r0, r0, #1
    c504:	d001      	beq.n	c50a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c506:	2001      	movs	r0, #1
    c508:	bd00      	pop	{pc}
    c50a:	2000      	movs	r0, #0
    c50c:	bd00      	pop	{pc}

0000c50e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c50e:	b500      	push	{lr}
    c510:	f7ff ffe1 	bl	c4d6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c514:	b138      	cbz	r0, c526 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c516:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c51a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c51e:	2806      	cmp	r0, #6
    c520:	d303      	bcc.n	c52a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c522:	1c40      	adds	r0, r0, #1
    c524:	d001      	beq.n	c52a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c526:	2000      	movs	r0, #0
    c528:	bd00      	pop	{pc}
    c52a:	2001      	movs	r0, #1
    c52c:	bd00      	pop	{pc}

0000c52e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c52e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c532:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c536:	280d      	cmp	r0, #13
    c538:	d001      	beq.n	c53e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c53a:	2000      	movs	r0, #0
    c53c:	4770      	bx	lr
    c53e:	2001      	movs	r0, #1
    c540:	4770      	bx	lr

0000c542 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c542:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c546:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c54a:	2808      	cmp	r0, #8
    c54c:	d001      	beq.n	c552 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c54e:	2000      	movs	r0, #0
    c550:	4770      	bx	lr
    c552:	2001      	movs	r0, #1
    c554:	4770      	bx	lr

0000c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c556:	b4f0      	push	{r4, r5, r6, r7}
    c558:	ea80 0c01 	eor.w	ip, r0, r1
    c55c:	4603      	mov	r3, r0
    c55e:	f01c 0f03 	tst.w	ip, #3
    c562:	d13c      	bne.n	c5de <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c564:	f013 0f03 	tst.w	r3, #3
    c568:	d00b      	beq.n	c582 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c56a:	2a00      	cmp	r2, #0
    c56c:	bf04      	itt	eq
    c56e:	bcf0      	popeq	{r4, r5, r6, r7}
    c570:	4770      	bxeq	lr
    c572:	f811 cb01 	ldrb.w	ip, [r1], #1
    c576:	f803 cb01 	strb.w	ip, [r3], #1
    c57a:	1e52      	subs	r2, r2, #1
    c57c:	f013 0f03 	tst.w	r3, #3
    c580:	d1f3      	bne.n	c56a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c582:	2a03      	cmp	r2, #3
    c584:	d94f      	bls.n	c626 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c586:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c58a:	d24c      	bcs.n	c626 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c58c:	f1c2 0c00 	rsb	ip, r2, #0
    c590:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c594:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c598:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c59c:	f1cc 0c00 	rsb	ip, ip, #0
    c5a0:	f1bc 0f00 	cmp.w	ip, #0
    c5a4:	dd1b      	ble.n	c5de <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c5a6:	1f0d      	subs	r5, r1, #4
    c5a8:	1f1c      	subs	r4, r3, #4
    c5aa:	f01c 0f01 	tst.w	ip, #1
    c5ae:	d003      	beq.n	c5b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c5b0:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c5b4:	f844 6f04 	str.w	r6, [r4, #4]!
    c5b8:	ea5f 066c 	movs.w	r6, ip, asr #1
    c5bc:	d007      	beq.n	c5ce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c5be:	686f      	ldr	r7, [r5, #4]
    c5c0:	6067      	str	r7, [r4, #4]
    c5c2:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c5c6:	f844 7f08 	str.w	r7, [r4, #8]!
    c5ca:	1e76      	subs	r6, r6, #1
    c5cc:	d1f7      	bne.n	c5be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c5ce:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c5d2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c5d6:	f1cc 0c00 	rsb	ip, ip, #0
    c5da:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c5de:	2a00      	cmp	r2, #0
    c5e0:	bf04      	itt	eq
    c5e2:	bcf0      	popeq	{r4, r5, r6, r7}
    c5e4:	4770      	bxeq	lr
    c5e6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c5ea:	d226      	bcs.n	c63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c5ec:	2a00      	cmp	r2, #0
    c5ee:	bfdc      	itt	le
    c5f0:	bcf0      	pople	{r4, r5, r6, r7}
    c5f2:	4770      	bxle	lr
    c5f4:	1e49      	subs	r1, r1, #1
    c5f6:	1e5b      	subs	r3, r3, #1
    c5f8:	f012 0f01 	tst.w	r2, #1
    c5fc:	d003      	beq.n	c606 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c5fe:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c602:	f803 cf01 	strb.w	ip, [r3, #1]!
    c606:	1052      	asrs	r2, r2, #1
    c608:	bf04      	itt	eq
    c60a:	bcf0      	popeq	{r4, r5, r6, r7}
    c60c:	4770      	bxeq	lr
    c60e:	f891 c001 	ldrb.w	ip, [r1, #1]
    c612:	f883 c001 	strb.w	ip, [r3, #1]
    c616:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c61a:	f803 cf02 	strb.w	ip, [r3, #2]!
    c61e:	1e52      	subs	r2, r2, #1
    c620:	d1f5      	bne.n	c60e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c622:	bcf0      	pop	{r4, r5, r6, r7}
    c624:	4770      	bx	lr
    c626:	2a04      	cmp	r2, #4
    c628:	d3d9      	bcc.n	c5de <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c62a:	f851 cb04 	ldr.w	ip, [r1], #4
    c62e:	1f12      	subs	r2, r2, #4
    c630:	f843 cb04 	str.w	ip, [r3], #4
    c634:	2a04      	cmp	r2, #4
    c636:	d2f8      	bcs.n	c62a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c638:	e7d1      	b.n	c5de <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c63a:	f811 cb01 	ldrb.w	ip, [r1], #1
    c63e:	f803 cb01 	strb.w	ip, [r3], #1
    c642:	1e52      	subs	r2, r2, #1
    c644:	d1f9      	bne.n	c63a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c646:	bcf0      	pop	{r4, r5, r6, r7}
    c648:	4770      	bx	lr

0000c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c64a:	b470      	push	{r4, r5, r6}
    c64c:	4603      	mov	r3, r0
    c64e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c652:	f010 0f03 	tst.w	r0, #3
    c656:	d009      	beq.n	c66c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c658:	2a00      	cmp	r2, #0
    c65a:	bf04      	itt	eq
    c65c:	bc70      	popeq	{r4, r5, r6}
    c65e:	4770      	bxeq	lr
    c660:	f803 cb01 	strb.w	ip, [r3], #1
    c664:	1e52      	subs	r2, r2, #1
    c666:	f013 0f03 	tst.w	r3, #3
    c66a:	d1f5      	bne.n	c658 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c66c:	b2c9      	uxtb	r1, r1
    c66e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c672:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c676:	2a03      	cmp	r2, #3
    c678:	d939      	bls.n	c6ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c67a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c67e:	d236      	bcs.n	c6ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c680:	4251      	negs	r1, r2
    c682:	17cc      	asrs	r4, r1, #31
    c684:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c688:	1089      	asrs	r1, r1, #2
    c68a:	424e      	negs	r6, r1
    c68c:	2e00      	cmp	r6, #0
    c68e:	dd11      	ble.n	c6b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c690:	1f19      	subs	r1, r3, #4
    c692:	f016 0f01 	tst.w	r6, #1
    c696:	bf18      	it	ne
    c698:	f841 5f04 	strne.w	r5, [r1, #4]!
    c69c:	1074      	asrs	r4, r6, #1
    c69e:	d004      	beq.n	c6aa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c6a0:	604d      	str	r5, [r1, #4]
    c6a2:	f841 5f08 	str.w	r5, [r1, #8]!
    c6a6:	1e64      	subs	r4, r4, #1
    c6a8:	d1fa      	bne.n	c6a0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c6aa:	4271      	negs	r1, r6
    c6ac:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c6b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c6b4:	2a00      	cmp	r2, #0
    c6b6:	bf04      	itt	eq
    c6b8:	bc70      	popeq	{r4, r5, r6}
    c6ba:	4770      	bxeq	lr
    c6bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c6c0:	d21d      	bcs.n	c6fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c6c2:	2a00      	cmp	r2, #0
    c6c4:	bfdc      	itt	le
    c6c6:	bc70      	pople	{r4, r5, r6}
    c6c8:	4770      	bxle	lr
    c6ca:	1e59      	subs	r1, r3, #1
    c6cc:	f012 0f01 	tst.w	r2, #1
    c6d0:	bf18      	it	ne
    c6d2:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c6d6:	1052      	asrs	r2, r2, #1
    c6d8:	bf04      	itt	eq
    c6da:	bc70      	popeq	{r4, r5, r6}
    c6dc:	4770      	bxeq	lr
    c6de:	f881 c001 	strb.w	ip, [r1, #1]
    c6e2:	f801 cf02 	strb.w	ip, [r1, #2]!
    c6e6:	1e52      	subs	r2, r2, #1
    c6e8:	d1f9      	bne.n	c6de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c6ea:	bc70      	pop	{r4, r5, r6}
    c6ec:	4770      	bx	lr
    c6ee:	2a04      	cmp	r2, #4
    c6f0:	d3e0      	bcc.n	c6b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c6f2:	1f12      	subs	r2, r2, #4
    c6f4:	f843 5b04 	str.w	r5, [r3], #4
    c6f8:	2a04      	cmp	r2, #4
    c6fa:	d2fa      	bcs.n	c6f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c6fc:	e7da      	b.n	c6b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c6fe:	f803 cb01 	strb.w	ip, [r3], #1
    c702:	1e52      	subs	r2, r2, #1
    c704:	d1fb      	bne.n	c6fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c706:	bc70      	pop	{r4, r5, r6}
    c708:	4770      	bx	lr
    c70a:	f04f 30ff 	mov.w	r0, #4294967295
    c70e:	4770      	bx	lr
    c710:	2000      	movs	r0, #0
    c712:	4770      	bx	lr
    c714:	2000      	movs	r0, #0
    c716:	4770      	bx	lr
    c718:	f04f 30ff 	mov.w	r0, #4294967295
    c71c:	4770      	bx	lr
    c71e:	4770      	bx	lr
    c720:	4770      	bx	lr
    c722:	2000      	movs	r0, #0
    c724:	4770      	bx	lr
    c726:	2100      	movs	r1, #0
    c728:	7001      	strb	r1, [r0, #0]
    c72a:	4770      	bx	lr
    c72c:	f04f 30ff 	mov.w	r0, #4294967295
    c730:	4770      	bx	lr
    c732:	f04f 30ff 	mov.w	r0, #4294967295
    c736:	4770      	bx	lr
    c738:	2100      	movs	r1, #0
    c73a:	7001      	strb	r1, [r0, #0]
    c73c:	4770      	bx	lr
    c73e:	f04f 30ff 	mov.w	r0, #4294967295
    c742:	4770      	bx	lr
    c744:	f04f 30ff 	mov.w	r0, #4294967295
    c748:	4770      	bx	lr
    c74a:	7800      	ldrb	r0, [r0, #0]
    c74c:	2800      	cmp	r0, #0
    c74e:	d001      	beq.n	c754 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    c750:	f06f 0015 	mvn.w	r0, #21
    c754:	4770      	bx	lr
    c756:	2000      	movs	r0, #0
    c758:	4770      	bx	lr
    c75a:	2200      	movs	r2, #0
    c75c:	f000 b802 	b.w	c764 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000c760 <mpsl_fem_init>:
    c760:	f7f4 bb74 	b.w	e4c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000c764 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    c764:	b570      	push	{r4, r5, r6, lr}
    c766:	4614      	mov	r4, r2
    c768:	460d      	mov	r5, r1
    c76a:	1b00      	subs	r0, r0, r4
    c76c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    c770:	4288      	cmp	r0, r1
    c772:	da01      	bge.n	c778 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    c774:	4608      	mov	r0, r1
    c776:	e002      	b.n	c77e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c778:	287f      	cmp	r0, #127	; 0x7f
    c77a:	dd00      	ble.n	c77e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    c77c:	207f      	movs	r0, #127	; 0x7f
    c77e:	b240      	sxtb	r0, r0
    c780:	f7f4 fb98 	bl	eb4 <mpsl_tx_power_radio_supported_power_adjust>
    c784:	7028      	strb	r0, [r5, #0]
    c786:	706c      	strb	r4, [r5, #1]
    c788:	2100      	movs	r1, #0
    c78a:	4420      	add	r0, r4
    c78c:	70a9      	strb	r1, [r5, #2]
    c78e:	b240      	sxtb	r0, r0
    c790:	bd70      	pop	{r4, r5, r6, pc}
    c792:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c796:	460c      	mov	r4, r1
    c798:	4681      	mov	r9, r0
    c79a:	7849      	ldrb	r1, [r1, #1]
    c79c:	f100 0003 	add.w	r0, r0, #3
    c7a0:	f88d 1000 	strb.w	r1, [sp]
    c7a4:	f020 0003 	bic.w	r0, r0, #3
    c7a8:	78a1      	ldrb	r1, [r4, #2]
    c7aa:	0016      	movs	r6, r2
    c7ac:	4605      	mov	r5, r0
    c7ae:	f88d 1001 	strb.w	r1, [sp, #1]
    c7b2:	d000      	beq.n	c7b6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x52>
    c7b4:	2000      	movs	r0, #0
    c7b6:	4669      	mov	r1, sp
    c7b8:	f7f8 fb76 	bl	4ea8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c7bc:	4428      	add	r0, r5
    c7be:	78a1      	ldrb	r1, [r4, #2]
    c7c0:	4605      	mov	r5, r0
    c7c2:	b131      	cbz	r1, c7d2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    c7c4:	8a63      	ldrh	r3, [r4, #18]
    c7c6:	78e2      	ldrb	r2, [r4, #3]
    c7c8:	b106      	cbz	r6, c7cc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x68>
    c7ca:	2000      	movs	r0, #0
    c7cc:	f7f8 fdd4 	bl	5378 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c7d0:	4405      	add	r5, r0
    c7d2:	7820      	ldrb	r0, [r4, #0]
    c7d4:	7861      	ldrb	r1, [r4, #1]
    c7d6:	46b2      	mov	sl, r6
    c7d8:	2600      	movs	r6, #0
    c7da:	4408      	add	r0, r1
    c7dc:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c7e0:	4637      	mov	r7, r6
    c7e2:	e008      	b.n	c7f6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x92>
    c7e4:	7a23      	ldrb	r3, [r4, #8]
    c7e6:	79e2      	ldrb	r2, [r4, #7]
    c7e8:	79a1      	ldrb	r1, [r4, #6]
    c7ea:	7960      	ldrb	r0, [r4, #5]
    c7ec:	f000 fe51 	bl	d492 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c7f0:	1c7f      	adds	r7, r7, #1
    c7f2:	4406      	add	r6, r0
    c7f4:	b2ff      	uxtb	r7, r7
    c7f6:	4547      	cmp	r7, r8
    c7f8:	d3f4      	bcc.n	c7e4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x80>
    c7fa:	1ced      	adds	r5, r5, #3
    c7fc:	f025 0003 	bic.w	r0, r5, #3
    c800:	4604      	mov	r4, r0
    c802:	f1ba 0f00 	cmp.w	sl, #0
    c806:	d000      	beq.n	c80a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa6>
    c808:	2000      	movs	r0, #0
    c80a:	4632      	mov	r2, r6
    c80c:	4641      	mov	r1, r8
    c80e:	f7f8 fcff 	bl	5210 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c812:	4420      	add	r0, r4
    c814:	1dc0      	adds	r0, r0, #7
    c816:	f020 0007 	bic.w	r0, r0, #7
    c81a:	eba0 0009 	sub.w	r0, r0, r9
    c81e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c822 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c822:	b50e      	push	{r1, r2, r3, lr}
    c824:	4601      	mov	r1, r0
    c826:	4668      	mov	r0, sp
    c828:	f000 f818 	bl	c85c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c82c:	4668      	mov	r0, sp
    c82e:	f001 fc38 	bl	e0a2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c832:	bd0e      	pop	{r1, r2, r3, pc}
    c834:	b570      	push	{r4, r5, r6, lr}
    c836:	460c      	mov	r4, r1
    c838:	4605      	mov	r5, r0
    c83a:	f7f8 fab7 	bl	4dac <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c83e:	2800      	cmp	r0, #0
    c840:	d002      	beq.n	c848 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    c842:	2d3e      	cmp	r5, #62	; 0x3e
    c844:	d001      	beq.n	c84a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    c846:	2001      	movs	r0, #1
    c848:	bd70      	pop	{r4, r5, r6, pc}
    c84a:	2c12      	cmp	r4, #18
    c84c:	d004      	beq.n	c858 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    c84e:	4620      	mov	r0, r4
    c850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c854:	f7f8 babc 	b.w	4dd0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c858:	2000      	movs	r0, #0
    c85a:	bd70      	pop	{r4, r5, r6, pc}

0000c85c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c85c:	880a      	ldrh	r2, [r1, #0]
    c85e:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c862:	8002      	strh	r2, [r0, #0]
    c864:	884a      	ldrh	r2, [r1, #2]
    c866:	8042      	strh	r2, [r0, #2]
    c868:	784a      	ldrb	r2, [r1, #1]
    c86a:	0993      	lsrs	r3, r2, #6
    c86c:	2200      	movs	r2, #0
    c86e:	7142      	strb	r2, [r0, #5]
    c870:	784b      	ldrb	r3, [r1, #1]
    c872:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c876:	b11b      	cbz	r3, c880 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c878:	2b01      	cmp	r3, #1
    c87a:	d005      	beq.n	c888 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c87c:	2b02      	cmp	r3, #2
    c87e:	d005      	beq.n	c88c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c880:	7102      	strb	r2, [r0, #4]
    c882:	1d09      	adds	r1, r1, #4
    c884:	6081      	str	r1, [r0, #8]
    c886:	4770      	bx	lr
    c888:	2201      	movs	r2, #1
    c88a:	e7f9      	b.n	c880 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c88c:	2202      	movs	r2, #2
    c88e:	e7f7      	b.n	c880 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c890 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c890:	b510      	push	{r4, lr}
    c892:	460c      	mov	r4, r1
    c894:	7809      	ldrb	r1, [r1, #0]
    c896:	7001      	strb	r1, [r0, #0]
    c898:	7841      	ldrb	r1, [r0, #1]
    c89a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c89e:	7041      	strb	r1, [r0, #1]
    c8a0:	8822      	ldrh	r2, [r4, #0]
    c8a2:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c8a6:	4311      	orrs	r1, r2
    c8a8:	7041      	strb	r1, [r0, #1]
    c8aa:	78a2      	ldrb	r2, [r4, #2]
    c8ac:	7082      	strb	r2, [r0, #2]
    c8ae:	8862      	ldrh	r2, [r4, #2]
    c8b0:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    c8b4:	0a12      	lsrs	r2, r2, #8
    c8b6:	70c2      	strb	r2, [r0, #3]
    c8b8:	7041      	strb	r1, [r0, #1]
    c8ba:	7922      	ldrb	r2, [r4, #4]
    c8bc:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c8c0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    c8c4:	7041      	strb	r1, [r0, #1]
    c8c6:	7962      	ldrb	r2, [r4, #5]
    c8c8:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c8cc:	7041      	strb	r1, [r0, #1]
    c8ce:	68a1      	ldr	r1, [r4, #8]
    c8d0:	1d02      	adds	r2, r0, #4
    c8d2:	4291      	cmp	r1, r2
    c8d4:	d006      	beq.n	c8e4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    c8d6:	8862      	ldrh	r2, [r4, #2]
    c8d8:	2afb      	cmp	r2, #251	; 0xfb
    c8da:	d300      	bcc.n	c8de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    c8dc:	22fb      	movs	r2, #251	; 0xfb
    c8de:	1d00      	adds	r0, r0, #4
    c8e0:	f7ff fe39 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c8e4:	78a0      	ldrb	r0, [r4, #2]
    c8e6:	1d00      	adds	r0, r0, #4
    c8e8:	b2c0      	uxtb	r0, r0
    c8ea:	bd10      	pop	{r4, pc}

0000c8ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8f0:	4604      	mov	r4, r0
    c8f2:	f891 c000 	ldrb.w	ip, [r1]
    c8f6:	2000      	movs	r0, #0
    c8f8:	2513      	movs	r5, #19
    c8fa:	260c      	movs	r6, #12
    c8fc:	2705      	movs	r7, #5
    c8fe:	223e      	movs	r2, #62	; 0x3e
    c900:	23ff      	movs	r3, #255	; 0xff
    c902:	f1bc 0f1d 	cmp.w	ip, #29
    c906:	d27d      	bcs.n	ca04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x118>
    c908:	e8df f00c 	tbb	[pc, ip]
    c90c:	28260f7c 	.word	0x28260f7c
    c910:	a492882e 	.word	0xa492882e
    c914:	ded3d1be 	.word	0xded3d1be
    c918:	7cf4f5f7 	.word	0x7cf4f5f7
    c91c:	f2f3547c 	.word	0xf2f3547c
    c920:	eeeff0f1 	.word	0xeeeff0f1
    c924:	eaebeced 	.word	0xeaebeced
    c928:	00e9      	.short	0x00e9
    c92a:	7026      	strb	r6, [r4, #0]
    c92c:	7908      	ldrb	r0, [r1, #4]
    c92e:	70a0      	strb	r0, [r4, #2]
    c930:	7948      	ldrb	r0, [r1, #5]
    c932:	70e0      	strb	r0, [r4, #3]
    c934:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c938:	0a00      	lsrs	r0, r0, #8
    c93a:	7120      	strb	r0, [r4, #4]
    c93c:	79c8      	ldrb	r0, [r1, #7]
    c93e:	7160      	strb	r0, [r4, #5]
    c940:	7a08      	ldrb	r0, [r1, #8]
    c942:	71a0      	strb	r0, [r4, #6]
    c944:	8908      	ldrh	r0, [r1, #8]
    c946:	0a00      	lsrs	r0, r0, #8
    c948:	71e0      	strb	r0, [r4, #7]
    c94a:	7a88      	ldrb	r0, [r1, #10]
    c94c:	7220      	strb	r0, [r4, #8]
    c94e:	8948      	ldrh	r0, [r1, #10]
    c950:	0a00      	lsrs	r0, r0, #8
    c952:	7260      	strb	r0, [r4, #9]
    c954:	2008      	movs	r0, #8
    c956:	e190      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c958:	2010      	movs	r0, #16
    c95a:	e000      	b.n	c95e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x72>
    c95c:	201a      	movs	r0, #26
    c95e:	7020      	strb	r0, [r4, #0]
    c960:	7908      	ldrb	r0, [r1, #4]
    c962:	70a0      	strb	r0, [r4, #2]
    c964:	2001      	movs	r0, #1
    c966:	e188      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c968:	7022      	strb	r2, [r4, #0]
    c96a:	2001      	movs	r0, #1
    c96c:	70a0      	strb	r0, [r4, #2]
    c96e:	7908      	ldrb	r0, [r1, #4]
    c970:	70e0      	strb	r0, [r4, #3]
    c972:	7988      	ldrb	r0, [r1, #6]
    c974:	7120      	strb	r0, [r4, #4]
    c976:	88c8      	ldrh	r0, [r1, #6]
    c978:	0a00      	lsrs	r0, r0, #8
    c97a:	7160      	strb	r0, [r4, #5]
    c97c:	7a08      	ldrb	r0, [r1, #8]
    c97e:	71a0      	strb	r0, [r4, #6]
    c980:	7a48      	ldrb	r0, [r1, #9]
    c982:	71e0      	strb	r0, [r4, #7]
    c984:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c988:	60a0      	str	r0, [r4, #8]
    c98a:	89c8      	ldrh	r0, [r1, #14]
    c98c:	81a0      	strh	r0, [r4, #12]
    c98e:	7c08      	ldrb	r0, [r1, #16]
    c990:	73a0      	strb	r0, [r4, #14]
    c992:	8a08      	ldrh	r0, [r1, #16]
    c994:	0a00      	lsrs	r0, r0, #8
    c996:	73e0      	strb	r0, [r4, #15]
    c998:	7c88      	ldrb	r0, [r1, #18]
    c99a:	7420      	strb	r0, [r4, #16]
    c99c:	8a48      	ldrh	r0, [r1, #18]
    c99e:	0a00      	lsrs	r0, r0, #8
    c9a0:	7460      	strb	r0, [r4, #17]
    c9a2:	7d08      	ldrb	r0, [r1, #20]
    c9a4:	74a0      	strb	r0, [r4, #18]
    c9a6:	8a88      	ldrh	r0, [r1, #20]
    c9a8:	0a00      	lsrs	r0, r0, #8
    c9aa:	74e0      	strb	r0, [r4, #19]
    c9ac:	7d88      	ldrb	r0, [r1, #22]
    c9ae:	7520      	strb	r0, [r4, #20]
    c9b0:	4628      	mov	r0, r5
    c9b2:	e162      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    c9b4:	7022      	strb	r2, [r4, #0]
    c9b6:	200a      	movs	r0, #10
    c9b8:	70a0      	strb	r0, [r4, #2]
    c9ba:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c9be:	70e0      	strb	r0, [r4, #3]
    c9c0:	7888      	ldrb	r0, [r1, #2]
    c9c2:	7120      	strb	r0, [r4, #4]
    c9c4:	8848      	ldrh	r0, [r1, #2]
    c9c6:	0a00      	lsrs	r0, r0, #8
    c9c8:	7160      	strb	r0, [r4, #5]
    c9ca:	7908      	ldrb	r0, [r1, #4]
    c9cc:	71a0      	strb	r0, [r4, #6]
    c9ce:	7948      	ldrb	r0, [r1, #5]
    c9d0:	71e0      	strb	r0, [r4, #7]
    c9d2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c9d6:	60a0      	str	r0, [r4, #8]
    c9d8:	8948      	ldrh	r0, [r1, #10]
    c9da:	81a0      	strh	r0, [r4, #12]
    c9dc:	68c8      	ldr	r0, [r1, #12]
    c9de:	f8c4 000e 	str.w	r0, [r4, #14]
    c9e2:	8a08      	ldrh	r0, [r1, #16]
    c9e4:	8260      	strh	r0, [r4, #18]
    c9e6:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c9ea:	6160      	str	r0, [r4, #20]
    c9ec:	8ac8      	ldrh	r0, [r1, #22]
    c9ee:	8320      	strh	r0, [r4, #24]
    c9f0:	7e08      	ldrb	r0, [r1, #24]
    c9f2:	76a0      	strb	r0, [r4, #26]
    c9f4:	8b08      	ldrh	r0, [r1, #24]
    c9f6:	0a00      	lsrs	r0, r0, #8
    c9f8:	76e0      	strb	r0, [r4, #27]
    c9fa:	7e88      	ldrb	r0, [r1, #26]
    c9fc:	7720      	strb	r0, [r4, #28]
    c9fe:	8b48      	ldrh	r0, [r1, #26]
    ca00:	0a00      	lsrs	r0, r0, #8
    ca02:	e000      	b.n	ca06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11a>
    ca04:	e09a      	b.n	cb3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    ca06:	7760      	strb	r0, [r4, #29]
    ca08:	7f08      	ldrb	r0, [r1, #28]
    ca0a:	77a0      	strb	r0, [r4, #30]
    ca0c:	8b88      	ldrh	r0, [r1, #28]
    ca0e:	0a00      	lsrs	r0, r0, #8
    ca10:	77e0      	strb	r0, [r4, #31]
    ca12:	7f88      	ldrb	r0, [r1, #30]
    ca14:	f884 0020 	strb.w	r0, [r4, #32]
    ca18:	201f      	movs	r0, #31
    ca1a:	e12e      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    ca1c:	7022      	strb	r2, [r4, #0]
    ca1e:	2014      	movs	r0, #20
    ca20:	70a0      	strb	r0, [r4, #2]
    ca22:	7908      	ldrb	r0, [r1, #4]
    ca24:	70e0      	strb	r0, [r4, #3]
    ca26:	8888      	ldrh	r0, [r1, #4]
    ca28:	0a00      	lsrs	r0, r0, #8
    ca2a:	7120      	strb	r0, [r4, #4]
    ca2c:	7988      	ldrb	r0, [r1, #6]
    ca2e:	e0c2      	b.n	cbb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    ca30:	7022      	strb	r2, [r4, #0]
    ca32:	2004      	movs	r0, #4
    ca34:	70a0      	strb	r0, [r4, #2]
    ca36:	7908      	ldrb	r0, [r1, #4]
    ca38:	70e0      	strb	r0, [r4, #3]
    ca3a:	7988      	ldrb	r0, [r1, #6]
    ca3c:	7120      	strb	r0, [r4, #4]
    ca3e:	88c8      	ldrh	r0, [r1, #6]
    ca40:	0a00      	lsrs	r0, r0, #8
    ca42:	7160      	strb	r0, [r4, #5]
    ca44:	6888      	ldr	r0, [r1, #8]
    ca46:	f8c4 0006 	str.w	r0, [r4, #6]
    ca4a:	68c8      	ldr	r0, [r1, #12]
    ca4c:	f8c4 000a 	str.w	r0, [r4, #10]
    ca50:	200c      	movs	r0, #12
    ca52:	e112      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    ca54:	7022      	strb	r2, [r4, #0]
    ca56:	2003      	movs	r0, #3
    ca58:	70a0      	strb	r0, [r4, #2]
    ca5a:	7908      	ldrb	r0, [r1, #4]
    ca5c:	70e0      	strb	r0, [r4, #3]
    ca5e:	7988      	ldrb	r0, [r1, #6]
    ca60:	7120      	strb	r0, [r4, #4]
    ca62:	88c8      	ldrh	r0, [r1, #6]
    ca64:	0a00      	lsrs	r0, r0, #8
    ca66:	7160      	strb	r0, [r4, #5]
    ca68:	7a08      	ldrb	r0, [r1, #8]
    ca6a:	71a0      	strb	r0, [r4, #6]
    ca6c:	8908      	ldrh	r0, [r1, #8]
    ca6e:	0a00      	lsrs	r0, r0, #8
    ca70:	71e0      	strb	r0, [r4, #7]
    ca72:	7a88      	ldrb	r0, [r1, #10]
    ca74:	7220      	strb	r0, [r4, #8]
    ca76:	8948      	ldrh	r0, [r1, #10]
    ca78:	0a00      	lsrs	r0, r0, #8
    ca7a:	7260      	strb	r0, [r4, #9]
    ca7c:	7b08      	ldrb	r0, [r1, #12]
    ca7e:	72a0      	strb	r0, [r4, #10]
    ca80:	8988      	ldrh	r0, [r1, #12]
    ca82:	0a00      	lsrs	r0, r0, #8
    ca84:	72e0      	strb	r0, [r4, #11]
    ca86:	e0d2      	b.n	cc2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    ca88:	7022      	strb	r2, [r4, #0]
    ca8a:	70a7      	strb	r7, [r4, #2]
    ca8c:	7908      	ldrb	r0, [r1, #4]
    ca8e:	70e0      	strb	r0, [r4, #3]
    ca90:	8888      	ldrh	r0, [r1, #4]
    ca92:	0a00      	lsrs	r0, r0, #8
    ca94:	7120      	strb	r0, [r4, #4]
    ca96:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ca9a:	f8c4 0005 	str.w	r0, [r4, #5]
    ca9e:	f8d1 000a 	ldr.w	r0, [r1, #10]
    caa2:	f8c4 0009 	str.w	r0, [r4, #9]
    caa6:	89c8      	ldrh	r0, [r1, #14]
    caa8:	f8a4 000d 	strh.w	r0, [r4, #13]
    caac:	e0e4      	b.n	cc78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38c>
    caae:	2011      	movs	r0, #17
    cab0:	e047      	b.n	cb42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x256>
    cab2:	7027      	strb	r7, [r4, #0]
    cab4:	7908      	ldrb	r0, [r1, #4]
    cab6:	70a0      	strb	r0, [r4, #2]
    cab8:	7948      	ldrb	r0, [r1, #5]
    caba:	70e0      	strb	r0, [r4, #3]
    cabc:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cac0:	0a00      	lsrs	r0, r0, #8
    cac2:	7120      	strb	r0, [r4, #4]
    cac4:	79c8      	ldrb	r0, [r1, #7]
    cac6:	e076      	b.n	cbb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    cac8:	2008      	movs	r0, #8
    caca:	7020      	strb	r0, [r4, #0]
    cacc:	7908      	ldrb	r0, [r1, #4]
    cace:	70a0      	strb	r0, [r4, #2]
    cad0:	7988      	ldrb	r0, [r1, #6]
    cad2:	70e0      	strb	r0, [r4, #3]
    cad4:	88c8      	ldrh	r0, [r1, #6]
    cad6:	0a00      	lsrs	r0, r0, #8
    cad8:	7120      	strb	r0, [r4, #4]
    cada:	7a08      	ldrb	r0, [r1, #8]
    cadc:	e06b      	b.n	cbb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ca>
    cade:	e0b6      	b.n	cc4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x362>
    cae0:	e08a      	b.n	cbf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    cae2:	e06b      	b.n	cbbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d0>
    cae4:	e096      	b.n	cc14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x328>
    cae6:	e0a4      	b.n	cc32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x346>
    cae8:	e05d      	b.n	cba6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    caea:	e045      	b.n	cb78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28c>
    caec:	e041      	b.n	cb72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    caee:	e030      	b.n	cb52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x266>
    caf0:	e011      	b.n	cb16 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22a>
    caf2:	e00d      	b.n	cb10 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x224>
    caf4:	e024      	b.n	cb40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x254>
    caf6:	e01b      	b.n	cb30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    caf8:	e7ff      	b.n	cafa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20e>
    cafa:	2030      	movs	r0, #48	; 0x30
    cafc:	7020      	strb	r0, [r4, #0]
    cafe:	7908      	ldrb	r0, [r1, #4]
    cb00:	70a0      	strb	r0, [r4, #2]
    cb02:	7988      	ldrb	r0, [r1, #6]
    cb04:	70e0      	strb	r0, [r4, #3]
    cb06:	88c8      	ldrh	r0, [r1, #6]
    cb08:	0a00      	lsrs	r0, r0, #8
    cb0a:	7120      	strb	r0, [r4, #4]
    cb0c:	2003      	movs	r0, #3
    cb0e:	e0b4      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb10:	7022      	strb	r2, [r4, #0]
    cb12:	2007      	movs	r0, #7
    cb14:	e054      	b.n	cbc0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d4>
    cb16:	7022      	strb	r2, [r4, #0]
    cb18:	70a6      	strb	r6, [r4, #2]
    cb1a:	7908      	ldrb	r0, [r1, #4]
    cb1c:	70e0      	strb	r0, [r4, #3]
    cb1e:	7988      	ldrb	r0, [r1, #6]
    cb20:	7120      	strb	r0, [r4, #4]
    cb22:	88c8      	ldrh	r0, [r1, #6]
    cb24:	0a00      	lsrs	r0, r0, #8
    cb26:	7160      	strb	r0, [r4, #5]
    cb28:	7a08      	ldrb	r0, [r1, #8]
    cb2a:	71a0      	strb	r0, [r4, #6]
    cb2c:	7a48      	ldrb	r0, [r1, #9]
    cb2e:	e01d      	b.n	cb6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x280>
    cb30:	4620      	mov	r0, r4
    cb32:	1d09      	adds	r1, r1, #4
    cb34:	f7f8 f90c 	bl	4d50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb0>
    cb38:	2800      	cmp	r0, #0
    cb3a:	d109      	bne.n	cb50 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x264>
    cb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb40:	2057      	movs	r0, #87	; 0x57
    cb42:	7020      	strb	r0, [r4, #0]
    cb44:	7908      	ldrb	r0, [r1, #4]
    cb46:	70a0      	strb	r0, [r4, #2]
    cb48:	8888      	ldrh	r0, [r1, #4]
    cb4a:	0a00      	lsrs	r0, r0, #8
    cb4c:	70e0      	strb	r0, [r4, #3]
    cb4e:	2002      	movs	r0, #2
    cb50:	e093      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb52:	7022      	strb	r2, [r4, #0]
    cb54:	2012      	movs	r0, #18
    cb56:	70a0      	strb	r0, [r4, #2]
    cb58:	7908      	ldrb	r0, [r1, #4]
    cb5a:	70e0      	strb	r0, [r4, #3]
    cb5c:	7948      	ldrb	r0, [r1, #5]
    cb5e:	7120      	strb	r0, [r4, #4]
    cb60:	7988      	ldrb	r0, [r1, #6]
    cb62:	7160      	strb	r0, [r4, #5]
    cb64:	88c8      	ldrh	r0, [r1, #6]
    cb66:	0a00      	lsrs	r0, r0, #8
    cb68:	71a0      	strb	r0, [r4, #6]
    cb6a:	7a08      	ldrb	r0, [r1, #8]
    cb6c:	71e0      	strb	r0, [r4, #7]
    cb6e:	2006      	movs	r0, #6
    cb70:	e083      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cb72:	7022      	strb	r2, [r4, #0]
    cb74:	2020      	movs	r0, #32
    cb76:	e041      	b.n	cbfc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x310>
    cb78:	7022      	strb	r2, [r4, #0]
    cb7a:	2021      	movs	r0, #33	; 0x21
    cb7c:	70a0      	strb	r0, [r4, #2]
    cb7e:	7908      	ldrb	r0, [r1, #4]
    cb80:	70e0      	strb	r0, [r4, #3]
    cb82:	7948      	ldrb	r0, [r1, #5]
    cb84:	7120      	strb	r0, [r4, #4]
    cb86:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cb8a:	0a00      	lsrs	r0, r0, #8
    cb8c:	7160      	strb	r0, [r4, #5]
    cb8e:	79c8      	ldrb	r0, [r1, #7]
    cb90:	71a0      	strb	r0, [r4, #6]
    cb92:	7a08      	ldrb	r0, [r1, #8]
    cb94:	71e0      	strb	r0, [r4, #7]
    cb96:	7a48      	ldrb	r0, [r1, #9]
    cb98:	7220      	strb	r0, [r4, #8]
    cb9a:	7a88      	ldrb	r0, [r1, #10]
    cb9c:	7260      	strb	r0, [r4, #9]
    cb9e:	7ac8      	ldrb	r0, [r1, #11]
    cba0:	72a0      	strb	r0, [r4, #10]
    cba2:	2009      	movs	r0, #9
    cba4:	e069      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cba6:	7023      	strb	r3, [r4, #0]
    cba8:	20a1      	movs	r0, #161	; 0xa1
    cbaa:	70a0      	strb	r0, [r4, #2]
    cbac:	7908      	ldrb	r0, [r1, #4]
    cbae:	70e0      	strb	r0, [r4, #3]
    cbb0:	7948      	ldrb	r0, [r1, #5]
    cbb2:	7120      	strb	r0, [r4, #4]
    cbb4:	2000      	movs	r0, #0
    cbb6:	7160      	strb	r0, [r4, #5]
    cbb8:	2004      	movs	r0, #4
    cbba:	e05e      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cbbc:	7023      	strb	r3, [r4, #0]
    cbbe:	20a2      	movs	r0, #162	; 0xa2
    cbc0:	70a0      	strb	r0, [r4, #2]
    cbc2:	7908      	ldrb	r0, [r1, #4]
    cbc4:	70e0      	strb	r0, [r4, #3]
    cbc6:	8888      	ldrh	r0, [r1, #4]
    cbc8:	0a00      	lsrs	r0, r0, #8
    cbca:	7120      	strb	r0, [r4, #4]
    cbcc:	7988      	ldrb	r0, [r1, #6]
    cbce:	7160      	strb	r0, [r4, #5]
    cbd0:	88c8      	ldrh	r0, [r1, #6]
    cbd2:	0a00      	lsrs	r0, r0, #8
    cbd4:	71a0      	strb	r0, [r4, #6]
    cbd6:	7a08      	ldrb	r0, [r1, #8]
    cbd8:	71e0      	strb	r0, [r4, #7]
    cbda:	8908      	ldrh	r0, [r1, #8]
    cbdc:	0a00      	lsrs	r0, r0, #8
    cbde:	7220      	strb	r0, [r4, #8]
    cbe0:	7a88      	ldrb	r0, [r1, #10]
    cbe2:	7260      	strb	r0, [r4, #9]
    cbe4:	8948      	ldrh	r0, [r1, #10]
    cbe6:	0a00      	lsrs	r0, r0, #8
    cbe8:	72a0      	strb	r0, [r4, #10]
    cbea:	7b08      	ldrb	r0, [r1, #12]
    cbec:	72e0      	strb	r0, [r4, #11]
    cbee:	8988      	ldrh	r0, [r1, #12]
    cbf0:	0a00      	lsrs	r0, r0, #8
    cbf2:	7320      	strb	r0, [r4, #12]
    cbf4:	200b      	movs	r0, #11
    cbf6:	e040      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cbf8:	7023      	strb	r3, [r4, #0]
    cbfa:	20a3      	movs	r0, #163	; 0xa3
    cbfc:	70a0      	strb	r0, [r4, #2]
    cbfe:	7908      	ldrb	r0, [r1, #4]
    cc00:	70e0      	strb	r0, [r4, #3]
    cc02:	8888      	ldrh	r0, [r1, #4]
    cc04:	0a00      	lsrs	r0, r0, #8
    cc06:	7120      	strb	r0, [r4, #4]
    cc08:	7988      	ldrb	r0, [r1, #6]
    cc0a:	7160      	strb	r0, [r4, #5]
    cc0c:	79c8      	ldrb	r0, [r1, #7]
    cc0e:	71a0      	strb	r0, [r4, #6]
    cc10:	2005      	movs	r0, #5
    cc12:	e032      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cc14:	7022      	strb	r2, [r4, #0]
    cc16:	70a5      	strb	r5, [r4, #2]
    cc18:	7908      	ldrb	r0, [r1, #4]
    cc1a:	70e0      	strb	r0, [r4, #3]
    cc1c:	7948      	ldrb	r0, [r1, #5]
    cc1e:	7120      	strb	r0, [r4, #4]
    cc20:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cc24:	f8c4 0005 	str.w	r0, [r4, #5]
    cc28:	8948      	ldrh	r0, [r1, #10]
    cc2a:	f8a4 0009 	strh.w	r0, [r4, #9]
    cc2e:	200a      	movs	r0, #10
    cc30:	e023      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cc32:	7023      	strb	r3, [r4, #0]
    cc34:	20a4      	movs	r0, #164	; 0xa4
    cc36:	70a0      	strb	r0, [r4, #2]
    cc38:	7908      	ldrb	r0, [r1, #4]
    cc3a:	70e0      	strb	r0, [r4, #3]
    cc3c:	8888      	ldrh	r0, [r1, #4]
    cc3e:	0a00      	lsrs	r0, r0, #8
    cc40:	7120      	strb	r0, [r4, #4]
    cc42:	7988      	ldrb	r0, [r1, #6]
    cc44:	7160      	strb	r0, [r4, #5]
    cc46:	79c8      	ldrb	r0, [r1, #7]
    cc48:	71a0      	strb	r0, [r4, #6]
    cc4a:	2007      	movs	r0, #7
    cc4c:	e015      	b.n	cc7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38e>
    cc4e:	7023      	strb	r3, [r4, #0]
    cc50:	2080      	movs	r0, #128	; 0x80
    cc52:	70a0      	strb	r0, [r4, #2]
    cc54:	888a      	ldrh	r2, [r1, #4]
    cc56:	f8a4 2003 	strh.w	r2, [r4, #3]
    cc5a:	88ca      	ldrh	r2, [r1, #6]
    cc5c:	f8a4 2005 	strh.w	r2, [r4, #5]
    cc60:	7a0a      	ldrb	r2, [r1, #8]
    cc62:	71e2      	strb	r2, [r4, #7]
    cc64:	894a      	ldrh	r2, [r1, #10]
    cc66:	8122      	strh	r2, [r4, #8]
    cc68:	898a      	ldrh	r2, [r1, #12]
    cc6a:	8162      	strh	r2, [r4, #10]
    cc6c:	89ca      	ldrh	r2, [r1, #14]
    cc6e:	81a2      	strh	r2, [r4, #12]
    cc70:	7c09      	ldrb	r1, [r1, #16]
    cc72:	f001 0101 	and.w	r1, r1, #1
    cc76:	73a1      	strb	r1, [r4, #14]
    cc78:	200d      	movs	r0, #13
    cc7a:	7060      	strb	r0, [r4, #1]
    cc7c:	1c80      	adds	r0, r0, #2
    cc7e:	e75d      	b.n	cb3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>

0000cc80 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    cc80:	223e      	movs	r2, #62	; 0x3e
    cc82:	7002      	strb	r2, [r0, #0]
    cc84:	2201      	movs	r2, #1
    cc86:	7082      	strb	r2, [r0, #2]
    cc88:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cc8c:	70c2      	strb	r2, [r0, #3]
    cc8e:	788a      	ldrb	r2, [r1, #2]
    cc90:	7102      	strb	r2, [r0, #4]
    cc92:	884a      	ldrh	r2, [r1, #2]
    cc94:	0a12      	lsrs	r2, r2, #8
    cc96:	7142      	strb	r2, [r0, #5]
    cc98:	790a      	ldrb	r2, [r1, #4]
    cc9a:	7182      	strb	r2, [r0, #6]
    cc9c:	794a      	ldrb	r2, [r1, #5]
    cc9e:	71c2      	strb	r2, [r0, #7]
    cca0:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cca4:	6082      	str	r2, [r0, #8]
    cca6:	894a      	ldrh	r2, [r1, #10]
    cca8:	8182      	strh	r2, [r0, #12]
    ccaa:	7e0a      	ldrb	r2, [r1, #24]
    ccac:	7382      	strb	r2, [r0, #14]
    ccae:	8b0a      	ldrh	r2, [r1, #24]
    ccb0:	0a12      	lsrs	r2, r2, #8
    ccb2:	73c2      	strb	r2, [r0, #15]
    ccb4:	7e8a      	ldrb	r2, [r1, #26]
    ccb6:	7402      	strb	r2, [r0, #16]
    ccb8:	8b4a      	ldrh	r2, [r1, #26]
    ccba:	0a12      	lsrs	r2, r2, #8
    ccbc:	7442      	strb	r2, [r0, #17]
    ccbe:	7f0a      	ldrb	r2, [r1, #28]
    ccc0:	7482      	strb	r2, [r0, #18]
    ccc2:	8b8a      	ldrh	r2, [r1, #28]
    ccc4:	0a12      	lsrs	r2, r2, #8
    ccc6:	74c2      	strb	r2, [r0, #19]
    ccc8:	7f89      	ldrb	r1, [r1, #30]
    ccca:	7501      	strb	r1, [r0, #20]
    cccc:	2113      	movs	r1, #19
    ccce:	7041      	strb	r1, [r0, #1]
    ccd0:	4608      	mov	r0, r1
    ccd2:	4770      	bx	lr
    ccd4:	094a      	lsrs	r2, r1, #5
    ccd6:	f001 011f 	and.w	r1, r1, #31
    ccda:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    ccde:	40c8      	lsrs	r0, r1
    cce0:	f000 0001 	and.w	r0, r0, #1
    cce4:	4770      	bx	lr

0000cce6 <sdc_hci_data_put>:
    cce6:	b510      	push	{r4, lr}
    cce8:	f06f 0415 	mvn.w	r4, #21
    ccec:	b120      	cbz	r0, ccf8 <sdc_hci_data_put+0x12>
    ccee:	f7ff fd98 	bl	c822 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    ccf2:	b108      	cbz	r0, ccf8 <sdc_hci_data_put+0x12>
    ccf4:	2000      	movs	r0, #0
    ccf6:	bd10      	pop	{r4, pc}
    ccf8:	4620      	mov	r0, r4
    ccfa:	bd10      	pop	{r4, pc}

0000ccfc <sdc_hci_get>:
    ccfc:	b510      	push	{r4, lr}
    ccfe:	460c      	mov	r4, r1
    cd00:	b130      	cbz	r0, cd10 <sdc_hci_get+0x14>
    cd02:	b12c      	cbz	r4, cd10 <sdc_hci_get+0x14>
    cd04:	f7f7 ffcc 	bl	4ca0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cd08:	b128      	cbz	r0, cd16 <sdc_hci_get+0x1a>
    cd0a:	7020      	strb	r0, [r4, #0]
    cd0c:	2000      	movs	r0, #0
    cd0e:	bd10      	pop	{r4, pc}
    cd10:	f06f 0015 	mvn.w	r0, #21
    cd14:	bd10      	pop	{r4, pc}
    cd16:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cd1a:	bd10      	pop	{r4, pc}

0000cd1c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cd1c:	f003 b9b1 	b.w	10082 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cd20 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cd20:	f003 b9fd 	b.w	1011e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cd24 <sdc_hci_cmd_cb_set_event_mask>:
    cd24:	b510      	push	{r4, lr}
    cd26:	f7f8 f863 	bl	4df0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cd2a:	2000      	movs	r0, #0
    cd2c:	bd10      	pop	{r4, pc}

0000cd2e <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cd2e:	b510      	push	{r4, lr}
    cd30:	f7f8 f86e 	bl	4e10 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cd34:	2000      	movs	r0, #0
    cd36:	bd10      	pop	{r4, pc}

0000cd38 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cd38:	f003 ba0d 	b.w	10156 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cd3c <sdc_hci_cmd_vs_conn_event_extend>:
    cd3c:	b508      	push	{r3, lr}
    cd3e:	7800      	ldrb	r0, [r0, #0]
    cd40:	f88d 0000 	strb.w	r0, [sp]
    cd44:	4668      	mov	r0, sp
    cd46:	f003 f8bd 	bl	fec4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    cd4a:	bd08      	pop	{r3, pc}

0000cd4c <sdc_hci_cmd_vs_conn_update>:
    cd4c:	2001      	movs	r0, #1
    cd4e:	4770      	bx	lr

0000cd50 <sdc_hci_cmd_vs_event_length_set>:
    cd50:	f7fd bc34 	b.w	a5bc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000cd54 <sdc_hci_cmd_vs_llpm_mode_set>:
    cd54:	2001      	movs	r0, #1
    cd56:	4770      	bx	lr

0000cd58 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    cd58:	7881      	ldrb	r1, [r0, #2]
    cd5a:	8800      	ldrh	r0, [r0, #0]
    cd5c:	f003 b865 	b.w	fe2a <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000cd60 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    cd60:	7800      	ldrb	r0, [r0, #0]
    cd62:	b100      	cbz	r0, cd66 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    cd64:	2001      	movs	r0, #1
    cd66:	f003 b85b 	b.w	fe20 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000cd6a <sdc_hci_cmd_vs_set_adv_randomness>:
    cd6a:	f003 b888 	b.w	fe7e <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000cd6e <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    cd6e:	b510      	push	{r4, lr}
    cd70:	4604      	mov	r4, r0
    cd72:	f7f7 fc31 	bl	45d8 <mpsl_temperature_get>
    cd76:	17c1      	asrs	r1, r0, #31
    cd78:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    cd7c:	1080      	asrs	r0, r0, #2
    cd7e:	287f      	cmp	r0, #127	; 0x7f
    cd80:	dd01      	ble.n	cd86 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    cd82:	207f      	movs	r0, #127	; 0x7f
    cd84:	e004      	b.n	cd90 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cd86:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    cd8a:	4288      	cmp	r0, r1
    cd8c:	da00      	bge.n	cd90 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cd8e:	4608      	mov	r0, r1
    cd90:	7020      	strb	r0, [r4, #0]
    cd92:	2000      	movs	r0, #0
    cd94:	bd10      	pop	{r4, pc}

0000cd96 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    cd96:	b570      	push	{r4, r5, r6, lr}
    cd98:	4605      	mov	r5, r0
    cd9a:	2210      	movs	r2, #16
    cd9c:	2100      	movs	r1, #0
    cd9e:	f7ff fc54 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cda2:	2210      	movs	r2, #16
    cda4:	2100      	movs	r1, #0
    cda6:	f105 0010 	add.w	r0, r5, #16
    cdaa:	f7ff fc4e 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cdae:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    cdb2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    cdb6:	1c40      	adds	r0, r0, #1
    cdb8:	d10b      	bne.n	cdd2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cdba:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cdbe:	1c40      	adds	r0, r0, #1
    cdc0:	d107      	bne.n	cdd2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cdc2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cdc6:	1c40      	adds	r0, r0, #1
    cdc8:	d103      	bne.n	cdd2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cdca:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    cdce:	1c40      	adds	r0, r0, #1
    cdd0:	d00b      	beq.n	cdea <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    cdd2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cdd6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cdda:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    cdde:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    cde2:	612a      	str	r2, [r5, #16]
    cde4:	6168      	str	r0, [r5, #20]
    cde6:	61a9      	str	r1, [r5, #24]
    cde8:	61eb      	str	r3, [r5, #28]
    cdea:	2000      	movs	r0, #0
    cdec:	f7f8 fd26 	bl	583c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cdf0:	b918      	cbnz	r0, cdfa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    cdf2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cdf6:	07c0      	lsls	r0, r0, #31
    cdf8:	d118      	bne.n	ce2c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cdfa:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    cdfe:	1c40      	adds	r0, r0, #1
    ce00:	d10b      	bne.n	ce1a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    ce02:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    ce06:	1c40      	adds	r0, r0, #1
    ce08:	d107      	bne.n	ce1a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    ce0a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ce0e:	1c40      	adds	r0, r0, #1
    ce10:	d103      	bne.n	ce1a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    ce12:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    ce16:	1c40      	adds	r0, r0, #1
    ce18:	d008      	beq.n	ce2c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    ce1a:	f854 0f90 	ldr.w	r0, [r4, #144]!
    ce1e:	6861      	ldr	r1, [r4, #4]
    ce20:	68a2      	ldr	r2, [r4, #8]
    ce22:	68e3      	ldr	r3, [r4, #12]
    ce24:	6028      	str	r0, [r5, #0]
    ce26:	6069      	str	r1, [r5, #4]
    ce28:	60aa      	str	r2, [r5, #8]
    ce2a:	60eb      	str	r3, [r5, #12]
    ce2c:	2000      	movs	r0, #0
    ce2e:	bd70      	pop	{r4, r5, r6, pc}

0000ce30 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    ce30:	b538      	push	{r3, r4, r5, lr}
    ce32:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    ce36:	4604      	mov	r4, r0
    ce38:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ce3c:	1c40      	adds	r0, r0, #1
    ce3e:	d105      	bne.n	ce4c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    ce40:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    ce44:	43c0      	mvns	r0, r0
    ce46:	0400      	lsls	r0, r0, #16
    ce48:	0c00      	lsrs	r0, r0, #16
    ce4a:	d03e      	beq.n	ceca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    ce4c:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    ce50:	07c0      	lsls	r0, r0, #31
    ce52:	d03a      	beq.n	ceca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    ce54:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ce58:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    ce5c:	f8ad 1000 	strh.w	r1, [sp]
    ce60:	f8c4 0001 	str.w	r0, [r4, #1]
    ce64:	f8bd 0000 	ldrh.w	r0, [sp]
    ce68:	f8a4 0005 	strh.w	r0, [r4, #5]
    ce6c:	79a0      	ldrb	r0, [r4, #6]
    ce6e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    ce72:	71a0      	strb	r0, [r4, #6]
    ce74:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    ce78:	1c40      	adds	r0, r0, #1
    ce7a:	d00f      	beq.n	ce9c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ce7c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    ce80:	1c40      	adds	r0, r0, #1
    ce82:	d00b      	beq.n	ce9c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ce84:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    ce88:	1c40      	adds	r0, r0, #1
    ce8a:	d007      	beq.n	ce9c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ce8c:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    ce90:	1c40      	adds	r0, r0, #1
    ce92:	d003      	beq.n	ce9c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    ce94:	2000      	movs	r0, #0
    ce96:	f7f8 fcd1 	bl	583c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    ce9a:	b140      	cbz	r0, ceae <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    ce9c:	2210      	movs	r2, #16
    ce9e:	2100      	movs	r1, #0
    cea0:	1de0      	adds	r0, r4, #7
    cea2:	f7ff fbd2 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cea6:	2001      	movs	r0, #1
    cea8:	7020      	strb	r0, [r4, #0]
    ceaa:	2000      	movs	r0, #0
    ceac:	bd38      	pop	{r3, r4, r5, pc}
    ceae:	f855 2f90 	ldr.w	r2, [r5, #144]!
    ceb2:	6869      	ldr	r1, [r5, #4]
    ceb4:	68a8      	ldr	r0, [r5, #8]
    ceb6:	68eb      	ldr	r3, [r5, #12]
    ceb8:	f8c4 2007 	str.w	r2, [r4, #7]
    cebc:	f8c4 100b 	str.w	r1, [r4, #11]
    cec0:	f8c4 000f 	str.w	r0, [r4, #15]
    cec4:	f8c4 3013 	str.w	r3, [r4, #19]
    cec8:	e7ed      	b.n	cea6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    ceca:	2000      	movs	r0, #0
    cecc:	e7ec      	b.n	cea8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000cece <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    cece:	f002 bfeb 	b.w	fea8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000ced2 <sdc_hci_cmd_ip_read_bd_addr>:
    ced2:	f003 b8e7 	b.w	100a4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000ced6 <sdc_hci_cmd_ip_read_local_version_information>:
    ced6:	f7fd bb7f 	b.w	a5d8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000ceda <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    ceda:	f002 bd87 	b.w	f9ec <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cede <sdc_hci_cmd_le_clear_filter_accept_list>:
    cede:	f002 bd9c 	b.w	fa1a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000cee2 <sdc_hci_cmd_le_encrypt>:
    cee2:	f002 bda4 	b.w	fa2e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000cee6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    cee6:	8802      	ldrh	r2, [r0, #0]
    cee8:	800a      	strh	r2, [r1, #0]
    ceea:	f002 bda9 	b.w	fa40 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000ceee <sdc_hci_cmd_le_long_term_key_request_reply>:
    ceee:	8802      	ldrh	r2, [r0, #0]
    cef0:	800a      	strh	r2, [r1, #0]
    cef2:	f002 bdbe 	b.w	fa72 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000cef6 <sdc_hci_cmd_le_rand>:
    cef6:	f002 bde6 	b.w	fac6 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000cefa <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    cefa:	f002 bdea 	b.w	fad2 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000cefe <sdc_hci_cmd_le_read_buffer_size>:
    cefe:	f7fd ba65 	b.w	a3cc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000cf02 <sdc_hci_cmd_le_read_channel_map>:
    cf02:	f7fd ba6d 	b.w	a3e0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000cf06 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    cf06:	f002 be1b 	b.w	fb40 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000cf0a <sdc_hci_cmd_le_read_max_data_length>:
    cf0a:	f002 bdeb 	b.w	fae4 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000cf0e <sdc_hci_cmd_le_read_phy>:
    cf0e:	f7fd ba8f 	b.w	a430 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000cf12 <sdc_hci_cmd_le_read_remote_features>:
    cf12:	f002 bdf0 	b.w	faf6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000cf16 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    cf16:	f7fd bab1 	b.w	a47c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000cf1a <sdc_hci_cmd_le_read_transmit_power>:
    cf1a:	f002 be08 	b.w	fb2e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000cf1e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    cf1e:	f002 be13 	b.w	fb48 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cf22 <sdc_hci_cmd_le_set_adv_data>:
    cf22:	f002 be26 	b.w	fb72 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000cf26 <sdc_hci_cmd_le_set_adv_enable>:
    cf26:	f002 be39 	b.w	fb9c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000cf2a <sdc_hci_cmd_le_set_adv_params>:
    cf2a:	f002 be6a 	b.w	fc02 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000cf2e <sdc_hci_cmd_le_set_data_length>:
    cf2e:	f002 befd 	b.w	fd2c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000cf32 <sdc_hci_cmd_le_set_data_related_address_changes>:
    cf32:	f002 bf1b 	b.w	fd6c <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000cf36 <sdc_hci_cmd_le_set_default_phy>:
    cf36:	f7fd baab 	b.w	a490 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000cf3a <sdc_hci_cmd_le_set_event_mask>:
    cf3a:	b510      	push	{r4, lr}
    cf3c:	f7f7 ff50 	bl	4de0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cf40:	2000      	movs	r0, #0
    cf42:	bd10      	pop	{r4, pc}

0000cf44 <sdc_hci_cmd_le_set_phy>:
    cf44:	f002 bf1f 	b.w	fd86 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cf48 <sdc_hci_cmd_le_set_random_address>:
    cf48:	f002 bf36 	b.w	fdb8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000cf4c <sdc_hci_cmd_le_set_scan_response_data>:
    cf4c:	f002 bf42 	b.w	fdd4 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000cf50 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cf50:	f002 bf55 	b.w	fdfe <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000cf54 <sdc_hci_cmd_lc_disconnect>:
    cf54:	f002 bcfc 	b.w	f950 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000cf58 <sdc_hci_cmd_lc_read_remote_version_information>:
    cf58:	f003 b8b0 	b.w	100bc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    cf5c:	b570      	push	{r4, r5, r6, lr}
    cf5e:	880b      	ldrh	r3, [r1, #0]
    cf60:	7cc4      	ldrb	r4, [r0, #19]
    cf62:	f100 0518 	add.w	r5, r0, #24
    cf66:	f3c3 060e 	ubfx	r6, r3, #0, #15
    cf6a:	8802      	ldrh	r2, [r0, #0]
    cf6c:	4435      	add	r5, r6
    cf6e:	1d64      	adds	r4, r4, #5
    cf70:	882d      	ldrh	r5, [r5, #0]
    cf72:	4422      	add	r2, r4
    cf74:	b292      	uxth	r2, r2
    cf76:	4425      	add	r5, r4
    cf78:	1e54      	subs	r4, r2, #1
    cf7a:	442c      	add	r4, r5
    cf7c:	fb94 f4f2 	sdiv	r4, r4, r2
    cf80:	fb02 6204 	mla	r2, r2, r4, r6
    cf84:	8840      	ldrh	r0, [r0, #2]
    cf86:	b292      	uxth	r2, r2
    cf88:	4290      	cmp	r0, r2
    cf8a:	d903      	bls.n	cf94 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    cf8c:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    cf90:	4310      	orrs	r0, r2
    cf92:	e002      	b.n	cf9a <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    cf94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cf98:	4398      	bics	r0, r3
    cf9a:	8008      	strh	r0, [r1, #0]
    cf9c:	bd70      	pop	{r4, r5, r6, pc}
    cf9e:	0442      	lsls	r2, r0, #17
    cfa0:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    cfa4:	d107      	bne.n	cfb6 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    cfa6:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    cfaa:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    cfae:	4288      	cmp	r0, r1
    cfb0:	d001      	beq.n	cfb6 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    cfb2:	2001      	movs	r0, #1
    cfb4:	4770      	bx	lr
    cfb6:	2000      	movs	r0, #0
    cfb8:	4770      	bx	lr

0000cfba <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    cfba:	8881      	ldrh	r1, [r0, #4]
    cfbc:	88c0      	ldrh	r0, [r0, #6]
    cfbe:	4288      	cmp	r0, r1
    cfc0:	d101      	bne.n	cfc6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    cfc2:	2001      	movs	r0, #1
    cfc4:	4770      	bx	lr
    cfc6:	2000      	movs	r0, #0
    cfc8:	4770      	bx	lr

0000cfca <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    cfca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfce:	460f      	mov	r7, r1
    cfd0:	4604      	mov	r4, r0
    cfd2:	f100 0118 	add.w	r1, r0, #24
    cfd6:	8880      	ldrh	r0, [r0, #4]
    cfd8:	2600      	movs	r6, #0
    cfda:	f3c0 000e 	ubfx	r0, r0, #0, #15
    cfde:	1845      	adds	r5, r0, r1
    cfe0:	603e      	str	r6, [r7, #0]
    cfe2:	89e0      	ldrh	r0, [r4, #14]
    cfe4:	2800      	cmp	r0, #0
    cfe6:	d016      	beq.n	d016 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    cfe8:	8961      	ldrh	r1, [r4, #10]
    cfea:	4408      	add	r0, r1
    cfec:	b280      	uxth	r0, r0
    cfee:	8160      	strh	r0, [r4, #10]
    cff0:	8829      	ldrh	r1, [r5, #0]
    cff2:	4288      	cmp	r0, r1
    cff4:	d905      	bls.n	d002 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    cff6:	f44f 71a9 	mov.w	r1, #338	; 0x152
    cffa:	f04f 0014 	mov.w	r0, #20
    cffe:	f7f7 fd55 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d002:	d106      	bne.n	d012 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d004:	f104 0104 	add.w	r1, r4, #4
    d008:	4620      	mov	r0, r4
    d00a:	f7ff ffa7 	bl	cf5c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d00e:	8166      	strh	r6, [r4, #10]
    d010:	603d      	str	r5, [r7, #0]
    d012:	81e6      	strh	r6, [r4, #14]
    d014:	2001      	movs	r0, #1
    d016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d01a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d01e:	4604      	mov	r4, r0
    d020:	f100 0318 	add.w	r3, r0, #24
    d024:	88c0      	ldrh	r0, [r0, #6]
    d026:	460e      	mov	r6, r1
    d028:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d02c:	8a20      	ldrh	r0, [r4, #16]
    d02e:	19d9      	adds	r1, r3, r7
    d030:	b108      	cbz	r0, d036 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d032:	42b0      	cmp	r0, r6
    d034:	d202      	bcs.n	d03c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d036:	2000      	movs	r0, #0
    d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d03c:	89a0      	ldrh	r0, [r4, #12]
    d03e:	2500      	movs	r5, #0
    d040:	b140      	cbz	r0, d054 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d042:	f8b1 c000 	ldrh.w	ip, [r1]
    d046:	4560      	cmp	r0, ip
    d048:	d006      	beq.n	d058 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d04a:	f240 2105 	movw	r1, #517	; 0x205
    d04e:	2014      	movs	r0, #20
    d050:	f7f7 fd2c 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d054:	800d      	strh	r5, [r1, #0]
    d056:	e00e      	b.n	d076 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d058:	f894 c013 	ldrb.w	ip, [r4, #19]
    d05c:	4418      	add	r0, r3
    d05e:	f10c 0c05 	add.w	ip, ip, #5
    d062:	44bc      	add	ip, r7
    d064:	4460      	add	r0, ip
    d066:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d06a:	f820 cc03 	strh.w	ip, [r0, #-3]
    d06e:	f894 c016 	ldrb.w	ip, [r4, #22]
    d072:	f800 cc01 	strb.w	ip, [r0, #-1]
    d076:	89a0      	ldrh	r0, [r4, #12]
    d078:	4430      	add	r0, r6
    d07a:	81a0      	strh	r0, [r4, #12]
    d07c:	8808      	ldrh	r0, [r1, #0]
    d07e:	4430      	add	r0, r6
    d080:	8008      	strh	r0, [r1, #0]
    d082:	b12a      	cbz	r2, d090 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d084:	1da1      	adds	r1, r4, #6
    d086:	4620      	mov	r0, r4
    d088:	f7ff ff68 	bl	cf5c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d08c:	81a5      	strh	r5, [r4, #12]
    d08e:	e00a      	b.n	d0a6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d090:	7ce0      	ldrb	r0, [r4, #19]
    d092:	89a1      	ldrh	r1, [r4, #12]
    d094:	1d40      	adds	r0, r0, #5
    d096:	4438      	add	r0, r7
    d098:	4419      	add	r1, r3
    d09a:	4408      	add	r0, r1
    d09c:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d0a0:	82a1      	strh	r1, [r4, #20]
    d0a2:	7880      	ldrb	r0, [r0, #2]
    d0a4:	75a0      	strb	r0, [r4, #22]
    d0a6:	8225      	strh	r5, [r4, #16]
    d0a8:	2001      	movs	r0, #1
    d0aa:	e7c5      	b.n	d038 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d0ac <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d0ac:	1c80      	adds	r0, r0, #2
    d0ae:	4770      	bx	lr

0000d0b0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d0b0:	b510      	push	{r4, lr}
    d0b2:	4604      	mov	r4, r0
    d0b4:	88c0      	ldrh	r0, [r0, #6]
    d0b6:	88a1      	ldrh	r1, [r4, #4]
    d0b8:	4281      	cmp	r1, r0
    d0ba:	d003      	beq.n	d0c4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d0bc:	8960      	ldrh	r0, [r4, #10]
    d0be:	b908      	cbnz	r0, d0c4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d0c0:	89e0      	ldrh	r0, [r4, #14]
    d0c2:	b108      	cbz	r0, d0c8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d0c4:	2000      	movs	r0, #0
    d0c6:	bd10      	pop	{r4, pc}
    d0c8:	1d21      	adds	r1, r4, #4
    d0ca:	4620      	mov	r0, r4
    d0cc:	f7ff ff46 	bl	cf5c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d0d0:	2000      	movs	r0, #0
    d0d2:	81e0      	strh	r0, [r4, #14]
    d0d4:	2001      	movs	r0, #1
    d0d6:	bd10      	pop	{r4, pc}

0000d0d8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d0d8:	b510      	push	{r4, lr}
    d0da:	4604      	mov	r4, r0
    d0dc:	f100 0218 	add.w	r2, r0, #24
    d0e0:	88c0      	ldrh	r0, [r0, #6]
    d0e2:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d0e6:	4402      	add	r2, r0
    d0e8:	8820      	ldrh	r0, [r4, #0]
    d0ea:	2845      	cmp	r0, #69	; 0x45
    d0ec:	d200      	bcs.n	d0f0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d0ee:	2045      	movs	r0, #69	; 0x45
    d0f0:	4288      	cmp	r0, r1
    d0f2:	d204      	bcs.n	d0fe <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d0f4:	f240 1105 	movw	r1, #261	; 0x105
    d0f8:	2014      	movs	r0, #20
    d0fa:	f7f7 fcd7 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0fe:	7ca0      	ldrb	r0, [r4, #18]
    d100:	2800      	cmp	r0, #0
    d102:	d003      	beq.n	d10c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d104:	8810      	ldrh	r0, [r2, #0]
    d106:	4288      	cmp	r0, r1
    d108:	d201      	bcs.n	d10e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d10a:	2000      	movs	r0, #0
    d10c:	bd10      	pop	{r4, pc}
    d10e:	8011      	strh	r1, [r2, #0]
    d110:	1da1      	adds	r1, r4, #6
    d112:	4620      	mov	r0, r4
    d114:	f7ff ff22 	bl	cf5c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d118:	2000      	movs	r0, #0
    d11a:	74a0      	strb	r0, [r4, #18]
    d11c:	2001      	movs	r0, #1
    d11e:	bd10      	pop	{r4, pc}

0000d120 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d120:	b510      	push	{r4, lr}
    d122:	88c4      	ldrh	r4, [r0, #6]
    d124:	8883      	ldrh	r3, [r0, #4]
    d126:	4601      	mov	r1, r0
    d128:	f100 0218 	add.w	r2, r0, #24
    d12c:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d130:	4410      	add	r0, r2
    d132:	42a3      	cmp	r3, r4
    d134:	d002      	beq.n	d13c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d136:	8949      	ldrh	r1, [r1, #10]
    d138:	2900      	cmp	r1, #0
    d13a:	d000      	beq.n	d13e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d13c:	2000      	movs	r0, #0
    d13e:	bd10      	pop	{r4, pc}

0000d140 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d140:	8803      	ldrh	r3, [r0, #0]
    d142:	2b45      	cmp	r3, #69	; 0x45
    d144:	d200      	bcs.n	d148 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d146:	2345      	movs	r3, #69	; 0x45
    d148:	8013      	strh	r3, [r2, #0]
    d14a:	88c2      	ldrh	r2, [r0, #6]
    d14c:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d150:	f100 0218 	add.w	r2, r0, #24
    d154:	441a      	add	r2, r3
    d156:	600a      	str	r2, [r1, #0]
    d158:	8980      	ldrh	r0, [r0, #12]
    d15a:	4770      	bx	lr

0000d15c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d15c:	7cc0      	ldrb	r0, [r0, #19]
    d15e:	1d40      	adds	r0, r0, #5
    d160:	4408      	add	r0, r1
    d162:	1ec0      	subs	r0, r0, #3
    d164:	6010      	str	r0, [r2, #0]
    d166:	8808      	ldrh	r0, [r1, #0]
    d168:	4770      	bx	lr

0000d16a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d16e:	460e      	mov	r6, r1
    d170:	88c1      	ldrh	r1, [r0, #6]
    d172:	8902      	ldrh	r2, [r0, #8]
    d174:	4604      	mov	r4, r0
    d176:	f100 0818 	add.w	r8, r0, #24
    d17a:	8800      	ldrh	r0, [r0, #0]
    d17c:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d180:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d184:	2845      	cmp	r0, #69	; 0x45
    d186:	d200      	bcs.n	d18a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d188:	2045      	movs	r0, #69	; 0x45
    d18a:	42b0      	cmp	r0, r6
    d18c:	d203      	bcs.n	d196 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d18e:	21c7      	movs	r1, #199	; 0xc7
    d190:	2014      	movs	r0, #20
    d192:	f7f7 fc8b 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d196:	4610      	mov	r0, r2
    d198:	f7ff ff01 	bl	cf9e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d19c:	b110      	cbz	r0, d1a4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d19e:	2000      	movs	r0, #0
    d1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d1a4:	42af      	cmp	r7, r5
    d1a6:	d908      	bls.n	d1ba <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d1a8:	7ce1      	ldrb	r1, [r4, #19]
    d1aa:	1b78      	subs	r0, r7, r5
    d1ac:	1a40      	subs	r0, r0, r1
    d1ae:	1f40      	subs	r0, r0, #5
    d1b0:	4286      	cmp	r6, r0
    d1b2:	dd02      	ble.n	d1ba <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d1b4:	2000      	movs	r0, #0
    d1b6:	74a0      	strb	r0, [r4, #18]
    d1b8:	e7f1      	b.n	d19e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d1ba:	eb08 0005 	add.w	r0, r8, r5
    d1be:	2101      	movs	r1, #1
    d1c0:	8006      	strh	r6, [r0, #0]
    d1c2:	74a1      	strb	r1, [r4, #18]
    d1c4:	e7ec      	b.n	d1a0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d1c6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d1c6:	b538      	push	{r3, r4, r5, lr}
    d1c8:	88c4      	ldrh	r4, [r0, #6]
    d1ca:	8881      	ldrh	r1, [r0, #4]
    d1cc:	f100 0218 	add.w	r2, r0, #24
    d1d0:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d1d4:	441a      	add	r2, r3
    d1d6:	42a1      	cmp	r1, r4
    d1d8:	d010      	beq.n	d1fc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d1da:	8943      	ldrh	r3, [r0, #10]
    d1dc:	89c5      	ldrh	r5, [r0, #14]
    d1de:	8812      	ldrh	r2, [r2, #0]
    d1e0:	442b      	add	r3, r5
    d1e2:	4293      	cmp	r3, r2
    d1e4:	d308      	bcc.n	d1f8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d1e6:	f8ad 1000 	strh.w	r1, [sp]
    d1ea:	4669      	mov	r1, sp
    d1ec:	f7ff feb6 	bl	cf5c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d1f0:	f8bd 0000 	ldrh.w	r0, [sp]
    d1f4:	42a0      	cmp	r0, r4
    d1f6:	d001      	beq.n	d1fc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d1f8:	2001      	movs	r0, #1
    d1fa:	bd38      	pop	{r3, r4, r5, pc}
    d1fc:	2000      	movs	r0, #0
    d1fe:	bd38      	pop	{r3, r4, r5, pc}

0000d200 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d200:	b570      	push	{r4, r5, r6, lr}
    d202:	88c6      	ldrh	r6, [r0, #6]
    d204:	8885      	ldrh	r5, [r0, #4]
    d206:	4603      	mov	r3, r0
    d208:	f100 0418 	add.w	r4, r0, #24
    d20c:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d210:	4420      	add	r0, r4
    d212:	42b5      	cmp	r5, r6
    d214:	d102      	bne.n	d21c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d216:	2000      	movs	r0, #0
    d218:	81d8      	strh	r0, [r3, #14]
    d21a:	bd70      	pop	{r4, r5, r6, pc}
    d21c:	8804      	ldrh	r4, [r0, #0]
    d21e:	895d      	ldrh	r5, [r3, #10]
    d220:	7cde      	ldrb	r6, [r3, #19]
    d222:	1b64      	subs	r4, r4, r5
    d224:	4435      	add	r5, r6
    d226:	4428      	add	r0, r5
    d228:	880d      	ldrh	r5, [r1, #0]
    d22a:	b2a4      	uxth	r4, r4
    d22c:	1c80      	adds	r0, r0, #2
    d22e:	42a5      	cmp	r5, r4
    d230:	d900      	bls.n	d234 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d232:	800c      	strh	r4, [r1, #0]
    d234:	895c      	ldrh	r4, [r3, #10]
    d236:	b124      	cbz	r4, d242 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d238:	2400      	movs	r4, #0
    d23a:	7014      	strb	r4, [r2, #0]
    d23c:	8809      	ldrh	r1, [r1, #0]
    d23e:	81d9      	strh	r1, [r3, #14]
    d240:	bd70      	pop	{r4, r5, r6, pc}
    d242:	2401      	movs	r4, #1
    d244:	e7f9      	b.n	d23a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d246 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d24a:	461d      	mov	r5, r3
    d24c:	4616      	mov	r6, r2
    d24e:	9f06      	ldr	r7, [sp, #24]
    d250:	460b      	mov	r3, r1
    d252:	4604      	mov	r4, r0
    d254:	463a      	mov	r2, r7
    d256:	4629      	mov	r1, r5
    d258:	4630      	mov	r0, r6
    d25a:	f000 f839 	bl	d2d0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d25e:	4283      	cmp	r3, r0
    d260:	d201      	bcs.n	d266 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d262:	219f      	movs	r1, #159	; 0x9f
    d264:	e012      	b.n	d28c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d266:	07a0      	lsls	r0, r4, #30
    d268:	d001      	beq.n	d26e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d26a:	21a0      	movs	r1, #160	; 0xa0
    d26c:	e00e      	b.n	d28c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d26e:	2218      	movs	r2, #24
    d270:	2100      	movs	r1, #0
    d272:	4620      	mov	r0, r4
    d274:	f7ff f9e9 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d278:	19a8      	adds	r0, r5, r6
    d27a:	1d40      	adds	r0, r0, #5
    d27c:	4378      	muls	r0, r7
    d27e:	b280      	uxth	r0, r0
    d280:	74e5      	strb	r5, [r4, #19]
    d282:	8060      	strh	r0, [r4, #2]
    d284:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d288:	d903      	bls.n	d292 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d28a:	21a5      	movs	r1, #165	; 0xa5
    d28c:	2014      	movs	r0, #20
    d28e:	f7f7 fc0d 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d292:	8026      	strh	r6, [r4, #0]
    d294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d298 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d298:	b570      	push	{r4, r5, r6, lr}
    d29a:	460b      	mov	r3, r1
    d29c:	4604      	mov	r4, r0
    d29e:	f100 0118 	add.w	r1, r0, #24
    d2a2:	8902      	ldrh	r2, [r0, #8]
    d2a4:	8880      	ldrh	r0, [r0, #4]
    d2a6:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d2aa:	440d      	add	r5, r1
    d2ac:	4282      	cmp	r2, r0
    d2ae:	d101      	bne.n	d2b4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d2b0:	2000      	movs	r0, #0
    d2b2:	bd70      	pop	{r4, r5, r6, pc}
    d2b4:	b123      	cbz	r3, d2c0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d2b6:	7ce2      	ldrb	r2, [r4, #19]
    d2b8:	1ca9      	adds	r1, r5, #2
    d2ba:	4618      	mov	r0, r3
    d2bc:	f7ff f94b 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d2c0:	882d      	ldrh	r5, [r5, #0]
    d2c2:	f104 0108 	add.w	r1, r4, #8
    d2c6:	4620      	mov	r0, r4
    d2c8:	f7ff fe48 	bl	cf5c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d2cc:	4628      	mov	r0, r5
    d2ce:	bd70      	pop	{r4, r5, r6, pc}

0000d2d0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d2d0:	4401      	add	r1, r0
    d2d2:	1d49      	adds	r1, r1, #5
    d2d4:	4351      	muls	r1, r2
    d2d6:	b28a      	uxth	r2, r1
    d2d8:	2100      	movs	r1, #0
    d2da:	2845      	cmp	r0, #69	; 0x45
    d2dc:	d202      	bcs.n	d2e4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d2de:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d2e2:	b281      	uxth	r1, r0
    d2e4:	3218      	adds	r2, #24
    d2e6:	1850      	adds	r0, r2, r1
    d2e8:	b280      	uxth	r0, r0
    d2ea:	4770      	bx	lr

0000d2ec <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d2f0:	4688      	mov	r8, r1
    d2f2:	88c1      	ldrh	r1, [r0, #6]
    d2f4:	4604      	mov	r4, r0
    d2f6:	8900      	ldrh	r0, [r0, #8]
    d2f8:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d2fc:	f104 0518 	add.w	r5, r4, #24
    d300:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d304:	eb05 0906 	add.w	r9, r5, r6
    d308:	f7ff fe49 	bl	cf9e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d30c:	2200      	movs	r2, #0
    d30e:	b998      	cbnz	r0, d338 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d310:	8820      	ldrh	r0, [r4, #0]
    d312:	2845      	cmp	r0, #69	; 0x45
    d314:	d200      	bcs.n	d318 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d316:	2045      	movs	r0, #69	; 0x45
    d318:	42b7      	cmp	r7, r6
    d31a:	d906      	bls.n	d32a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d31c:	7ce3      	ldrb	r3, [r4, #19]
    d31e:	1bb9      	subs	r1, r7, r6
    d320:	1ac9      	subs	r1, r1, r3
    d322:	1f49      	subs	r1, r1, #5
    d324:	4281      	cmp	r1, r0
    d326:	da00      	bge.n	d32a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d328:	4608      	mov	r0, r1
    d32a:	89a1      	ldrh	r1, [r4, #12]
    d32c:	b111      	cbz	r1, d334 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d32e:	f8b9 3000 	ldrh.w	r3, [r9]
    d332:	1ac0      	subs	r0, r0, r3
    d334:	4540      	cmp	r0, r8
    d336:	da03      	bge.n	d340 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d338:	8222      	strh	r2, [r4, #16]
    d33a:	2000      	movs	r0, #0
    d33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d340:	7ce0      	ldrb	r0, [r4, #19]
    d342:	4429      	add	r1, r5
    d344:	1d40      	adds	r0, r0, #5
    d346:	4430      	add	r0, r6
    d348:	4408      	add	r0, r1
    d34a:	f8a4 8010 	strh.w	r8, [r4, #16]
    d34e:	1ec0      	subs	r0, r0, #3
    d350:	e7f4      	b.n	d33c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d352 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d352:	2100      	movs	r1, #0
    d354:	8181      	strh	r1, [r0, #12]
    d356:	8201      	strh	r1, [r0, #16]
    d358:	4770      	bx	lr

0000d35a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d35a:	b570      	push	{r4, r5, r6, lr}
    d35c:	2300      	movs	r3, #0
    d35e:	f1a1 0208 	sub.w	r2, r1, #8
    d362:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d366:	42a2      	cmp	r2, r4
    d368:	d304      	bcc.n	d374 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d36a:	f240 11cd 	movw	r1, #461	; 0x1cd
    d36e:	2015      	movs	r0, #21
    d370:	f7f7 fb9c 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d374:	6802      	ldr	r2, [r0, #0]
    d376:	b90a      	cbnz	r2, d37c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d378:	e01e      	b.n	d3b8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d37a:	4610      	mov	r0, r2
    d37c:	6802      	ldr	r2, [r0, #0]
    d37e:	8893      	ldrh	r3, [r2, #4]
    d380:	428b      	cmp	r3, r1
    d382:	d002      	beq.n	d38a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d384:	6813      	ldr	r3, [r2, #0]
    d386:	2b00      	cmp	r3, #0
    d388:	d1f7      	bne.n	d37a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d38a:	8894      	ldrh	r4, [r2, #4]
    d38c:	4613      	mov	r3, r2
    d38e:	428c      	cmp	r4, r1
    d390:	d101      	bne.n	d396 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d392:	6811      	ldr	r1, [r2, #0]
    d394:	e00d      	b.n	d3b2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d396:	f101 0508 	add.w	r5, r1, #8
    d39a:	b2ae      	uxth	r6, r5
    d39c:	2500      	movs	r5, #0
    d39e:	42b4      	cmp	r4, r6
    d3a0:	d309      	bcc.n	d3b6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d3a2:	1a64      	subs	r4, r4, r1
    d3a4:	4411      	add	r1, r2
    d3a6:	600d      	str	r5, [r1, #0]
    d3a8:	808c      	strh	r4, [r1, #4]
    d3aa:	6802      	ldr	r2, [r0, #0]
    d3ac:	6812      	ldr	r2, [r2, #0]
    d3ae:	6002      	str	r2, [r0, #0]
    d3b0:	600a      	str	r2, [r1, #0]
    d3b2:	6001      	str	r1, [r0, #0]
    d3b4:	e000      	b.n	d3b8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d3b6:	2300      	movs	r3, #0
    d3b8:	4618      	mov	r0, r3
    d3ba:	bd70      	pop	{r4, r5, r6, pc}

0000d3bc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d3bc:	b510      	push	{r4, lr}
    d3be:	000c      	movs	r4, r1
    d3c0:	d004      	beq.n	d3cc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d3c2:	2c08      	cmp	r4, #8
    d3c4:	d207      	bcs.n	d3d6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d3c6:	f240 1195 	movw	r1, #405	; 0x195
    d3ca:	e00a      	b.n	d3e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d3cc:	b108      	cbz	r0, d3d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d3ce:	2100      	movs	r1, #0
    d3d0:	6001      	str	r1, [r0, #0]
    d3d2:	2000      	movs	r0, #0
    d3d4:	bd10      	pop	{r4, pc}
    d3d6:	b158      	cbz	r0, d3f0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d3d8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d3dc:	d304      	bcc.n	d3e8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d3de:	f240 11a7 	movw	r1, #423	; 0x1a7
    d3e2:	2015      	movs	r0, #21
    d3e4:	f7f7 fb62 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3e8:	b2a1      	uxth	r1, r4
    d3ea:	6800      	ldr	r0, [r0, #0]
    d3ec:	f000 f814 	bl	d418 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d3f0:	1d20      	adds	r0, r4, #4
    d3f2:	bd10      	pop	{r4, pc}

0000d3f4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d3f4:	2100      	movs	r1, #0
    d3f6:	6802      	ldr	r2, [r0, #0]
    d3f8:	e003      	b.n	d402 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d3fa:	8893      	ldrh	r3, [r2, #4]
    d3fc:	6812      	ldr	r2, [r2, #0]
    d3fe:	4419      	add	r1, r3
    d400:	b289      	uxth	r1, r1
    d402:	2a00      	cmp	r2, #0
    d404:	d1f9      	bne.n	d3fa <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d406:	f000 b807 	b.w	d418 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d40a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d40a:	2300      	movs	r3, #0
    d40c:	600b      	str	r3, [r1, #0]
    d40e:	808a      	strh	r2, [r1, #4]
    d410:	6802      	ldr	r2, [r0, #0]
    d412:	600a      	str	r2, [r1, #0]
    d414:	6001      	str	r1, [r0, #0]
    d416:	4770      	bx	lr
    d418:	2300      	movs	r3, #0
    d41a:	6043      	str	r3, [r0, #4]
    d41c:	1d02      	adds	r2, r0, #4
    d41e:	8101      	strh	r1, [r0, #8]
    d420:	6002      	str	r2, [r0, #0]
    d422:	4770      	bx	lr

0000d424 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d424:	b51c      	push	{r2, r3, r4, lr}
    d426:	4604      	mov	r4, r0
    d428:	2000      	movs	r0, #0
    d42a:	9001      	str	r0, [sp, #4]
    d42c:	9000      	str	r0, [sp, #0]
    d42e:	f88d 4006 	strb.w	r4, [sp, #6]
    d432:	e00a      	b.n	d44a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d434:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d438:	4621      	mov	r1, r4
    d43a:	f7f7 fdb9 	bl	4fb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d43e:	b120      	cbz	r0, d44a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d440:	f240 21a5 	movw	r1, #677	; 0x2a5
    d444:	2017      	movs	r0, #23
    d446:	f7f7 fb31 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d44a:	4668      	mov	r0, sp
    d44c:	f7f7 fd68 	bl	4f20 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d450:	2800      	cmp	r0, #0
    d452:	d0ef      	beq.n	d434 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d454:	bd1c      	pop	{r2, r3, r4, pc}

0000d456 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d456:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d45a:	3aff      	subs	r2, #255	; 0xff
    d45c:	d001      	beq.n	d462 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d45e:	2902      	cmp	r1, #2
    d460:	d301      	bcc.n	d466 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d462:	2000      	movs	r0, #0
    d464:	4770      	bx	lr
    d466:	f7f7 bdd5 	b.w	5014 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d46a:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d46e:	3aff      	subs	r2, #255	; 0xff
    d470:	d001      	beq.n	d476 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d472:	2902      	cmp	r1, #2
    d474:	d301      	bcc.n	d47a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d476:	2000      	movs	r0, #0
    d478:	4770      	bx	lr
    d47a:	f7f7 bdf3 	b.w	5064 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    d47e:	b510      	push	{r4, lr}
    d480:	4604      	mov	r4, r0
    d482:	f7f7 fe3b 	bl	50fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    d486:	42a0      	cmp	r0, r4
    d488:	d901      	bls.n	d48e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    d48a:	2001      	movs	r0, #1
    d48c:	bd10      	pop	{r4, pc}
    d48e:	2000      	movs	r0, #0
    d490:	bd10      	pop	{r4, pc}

0000d492 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d492:	b570      	push	{r4, r5, r6, lr}
    d494:	460e      	mov	r6, r1
    d496:	461d      	mov	r5, r3
    d498:	4611      	mov	r1, r2
    d49a:	f000 f813 	bl	d4c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d49e:	4604      	mov	r4, r0
    d4a0:	4629      	mov	r1, r5
    d4a2:	4630      	mov	r0, r6
    d4a4:	f000 f804 	bl	d4b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d4a8:	4420      	add	r0, r4
    d4aa:	1d00      	adds	r0, r0, #4
    d4ac:	b280      	uxth	r0, r0
    d4ae:	bd70      	pop	{r4, r5, r6, pc}
    d4b0:	b510      	push	{r4, lr}
    d4b2:	460a      	mov	r2, r1
    d4b4:	2109      	movs	r1, #9
    d4b6:	f7ff ff0b 	bl	d2d0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d4ba:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d4be:	1cc0      	adds	r0, r0, #3
    d4c0:	4008      	ands	r0, r1
    d4c2:	bd10      	pop	{r4, pc}
    d4c4:	b510      	push	{r4, lr}
    d4c6:	460a      	mov	r2, r1
    d4c8:	210a      	movs	r1, #10
    d4ca:	f7ff ff01 	bl	d2d0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d4ce:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d4d2:	1cc0      	adds	r0, r0, #3
    d4d4:	4008      	ands	r0, r1
    d4d6:	bd10      	pop	{r4, pc}
    d4d8:	b109      	cbz	r1, d4de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d4da:	2100      	movs	r1, #0
    d4dc:	e000      	b.n	d4e0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d4de:	2102      	movs	r1, #2
    d4e0:	1843      	adds	r3, r0, r1
    d4e2:	7d1a      	ldrb	r2, [r3, #20]
    d4e4:	2a02      	cmp	r2, #2
    d4e6:	d008      	beq.n	d4fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d4e8:	7d5b      	ldrb	r3, [r3, #21]
    d4ea:	2b02      	cmp	r3, #2
    d4ec:	d009      	beq.n	d502 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d4ee:	2a03      	cmp	r2, #3
    d4f0:	d003      	beq.n	d4fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d4f2:	2b03      	cmp	r3, #3
    d4f4:	d005      	beq.n	d502 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d4f6:	2000      	movs	r0, #0
    d4f8:	4770      	bx	lr
    d4fa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d4fe:	8b00      	ldrh	r0, [r0, #24]
    d500:	4770      	bx	lr
    d502:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d506:	8b40      	ldrh	r0, [r0, #26]
    d508:	4770      	bx	lr
    d50a:	b109      	cbz	r1, d510 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d50c:	2100      	movs	r1, #0
    d50e:	e000      	b.n	d512 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d510:	2102      	movs	r1, #2
    d512:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d516:	8b01      	ldrh	r1, [r0, #24]
    d518:	b911      	cbnz	r1, d520 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d51a:	8b40      	ldrh	r0, [r0, #26]
    d51c:	2800      	cmp	r0, #0
    d51e:	d000      	beq.n	d522 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d520:	2001      	movs	r0, #1
    d522:	4770      	bx	lr
    d524:	b538      	push	{r3, r4, r5, lr}
    d526:	7883      	ldrb	r3, [r0, #2]
    d528:	f88d 3000 	strb.w	r3, [sp]
    d52c:	9b00      	ldr	r3, [sp, #0]
    d52e:	9300      	str	r3, [sp, #0]
    d530:	f89d 3000 	ldrb.w	r3, [sp]
    d534:	b95b      	cbnz	r3, d54e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d536:	2400      	movs	r4, #0
    d538:	b10a      	cbz	r2, d53e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d53a:	2300      	movs	r3, #0
    d53c:	e000      	b.n	d540 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d53e:	2302      	movs	r3, #2
    d540:	18c2      	adds	r2, r0, r3
    d542:	7d15      	ldrb	r5, [r2, #20]
    d544:	2d02      	cmp	r5, #2
    d546:	d004      	beq.n	d552 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d548:	7d52      	ldrb	r2, [r2, #21]
    d54a:	2a02      	cmp	r2, #2
    d54c:	d004      	beq.n	d558 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d54e:	2000      	movs	r0, #0
    d550:	bd38      	pop	{r3, r4, r5, pc}
    d552:	461a      	mov	r2, r3
    d554:	1c5b      	adds	r3, r3, #1
    d556:	e000      	b.n	d55a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d558:	1c5a      	adds	r2, r3, #1
    d55a:	b179      	cbz	r1, d57c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d55c:	18c5      	adds	r5, r0, r3
    d55e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d562:	752c      	strb	r4, [r5, #20]
    d564:	831c      	strh	r4, [r3, #24]
    d566:	2303      	movs	r3, #3
    d568:	1884      	adds	r4, r0, r2
    d56a:	7523      	strb	r3, [r4, #20]
    d56c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d570:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d574:	685b      	ldr	r3, [r3, #4]
    d576:	600b      	str	r3, [r1, #0]
    d578:	8b00      	ldrh	r0, [r0, #24]
    d57a:	8088      	strh	r0, [r1, #4]
    d57c:	2001      	movs	r0, #1
    d57e:	bd38      	pop	{r3, r4, r5, pc}
    d580:	b510      	push	{r4, lr}
    d582:	b109      	cbz	r1, d588 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d584:	2100      	movs	r1, #0
    d586:	e000      	b.n	d58a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d588:	2102      	movs	r1, #2
    d58a:	1843      	adds	r3, r0, r1
    d58c:	7d1c      	ldrb	r4, [r3, #20]
    d58e:	4294      	cmp	r4, r2
    d590:	d103      	bne.n	d59a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d592:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d596:	8b00      	ldrh	r0, [r0, #24]
    d598:	bd10      	pop	{r4, pc}
    d59a:	7d5b      	ldrb	r3, [r3, #21]
    d59c:	4293      	cmp	r3, r2
    d59e:	d103      	bne.n	d5a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d5a0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d5a4:	8b40      	ldrh	r0, [r0, #26]
    d5a6:	bd10      	pop	{r4, pc}
    d5a8:	2000      	movs	r0, #0
    d5aa:	bd10      	pop	{r4, pc}
    d5ac:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d5b0:	d201      	bcs.n	d5b6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d5b2:	0841      	lsrs	r1, r0, #1
    d5b4:	e000      	b.n	d5b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d5b6:	21ff      	movs	r1, #255	; 0xff
    d5b8:	1a40      	subs	r0, r0, r1
    d5ba:	f240 6172 	movw	r1, #1650	; 0x672
    d5be:	4288      	cmp	r0, r1
    d5c0:	db00      	blt.n	d5c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d5c2:	4608      	mov	r0, r1
    d5c4:	b280      	uxth	r0, r0
    d5c6:	4770      	bx	lr

0000d5c8 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d5c8:	2101      	movs	r1, #1
    d5ca:	f7ff bf85 	b.w	d4d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d5ce <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5d2:	4606      	mov	r6, r0
    d5d4:	f342 0780 	sbfx	r7, r2, #2, #1
    d5d8:	7848      	ldrb	r0, [r1, #1]
    d5da:	460c      	mov	r4, r1
    d5dc:	f022 0504 	bic.w	r5, r2, #4
    d5e0:	1c7f      	adds	r7, r7, #1
    d5e2:	b100      	cbz	r0, d5e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d5e4:	b90d      	cbnz	r5, d5ea <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d5e6:	4328      	orrs	r0, r5
    d5e8:	d104      	bne.n	d5f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d5ea:	b145      	cbz	r5, d5fe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d5ec:	2100      	movs	r1, #0
    d5ee:	4620      	mov	r0, r4
    d5f0:	f7f7 fe82 	bl	52f8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d5f4:	20ff      	movs	r0, #255	; 0xff
    d5f6:	70a0      	strb	r0, [r4, #2]
    d5f8:	b11f      	cbz	r7, d602 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d5fa:	2000      	movs	r0, #0
    d5fc:	e002      	b.n	d604 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d5fe:	2101      	movs	r1, #1
    d600:	e7f5      	b.n	d5ee <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d602:	2002      	movs	r0, #2
    d604:	1821      	adds	r1, r4, r0
    d606:	7d09      	ldrb	r1, [r1, #20]
    d608:	2903      	cmp	r1, #3
    d60a:	d102      	bne.n	d612 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d60c:	2d02      	cmp	r5, #2
    d60e:	d000      	beq.n	d612 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d610:	1c40      	adds	r0, r0, #1
    d612:	1822      	adds	r2, r4, r0
    d614:	2101      	movs	r1, #1
    d616:	7511      	strb	r1, [r2, #20]
    d618:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d61c:	2200      	movs	r2, #0
    d61e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d622:	830a      	strh	r2, [r1, #24]
    d624:	6840      	ldr	r0, [r0, #4]
    d626:	70a2      	strb	r2, [r4, #2]
    d628:	4631      	mov	r1, r6
    d62a:	f362 010f 	bfi	r1, r2, #0, #16
    d62e:	e9c6 0100 	strd	r0, r1, [r6]
    d632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d636 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d63a:	461e      	mov	r6, r3
    d63c:	4613      	mov	r3, r2
    d63e:	4604      	mov	r4, r0
    d640:	b109      	cbz	r1, d646 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d642:	2000      	movs	r0, #0
    d644:	e000      	b.n	d648 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d646:	2002      	movs	r0, #2
    d648:	21ff      	movs	r1, #255	; 0xff
    d64a:	70a1      	strb	r1, [r4, #2]
    d64c:	1821      	adds	r1, r4, r0
    d64e:	7d0a      	ldrb	r2, [r1, #20]
    d650:	2a01      	cmp	r2, #1
    d652:	d003      	beq.n	d65c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d654:	7d49      	ldrb	r1, [r1, #21]
    d656:	2901      	cmp	r1, #1
    d658:	d10c      	bne.n	d674 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d65a:	1c40      	adds	r0, r0, #1
    d65c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d660:	2700      	movs	r7, #0
    d662:	8b29      	ldrh	r1, [r5, #24]
    d664:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d668:	198a      	adds	r2, r1, r6
    d66a:	4562      	cmp	r2, ip
    d66c:	d905      	bls.n	d67a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d66e:	4420      	add	r0, r4
    d670:	832f      	strh	r7, [r5, #24]
    d672:	7507      	strb	r7, [r0, #20]
    d674:	2000      	movs	r0, #0
    d676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d67a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d67e:	4632      	mov	r2, r6
    d680:	6840      	ldr	r0, [r0, #4]
    d682:	4408      	add	r0, r1
    d684:	4619      	mov	r1, r3
    d686:	f7fe ff66 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d68a:	8b28      	ldrh	r0, [r5, #24]
    d68c:	4430      	add	r0, r6
    d68e:	8328      	strh	r0, [r5, #24]
    d690:	70a7      	strb	r7, [r4, #2]
    d692:	2001      	movs	r0, #1
    d694:	e7ef      	b.n	d676 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d696 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    d696:	2202      	movs	r2, #2
    d698:	2100      	movs	r1, #0
    d69a:	f7ff bf71 	b.w	d580 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d69e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d69e:	b510      	push	{r4, lr}
    d6a0:	2101      	movs	r1, #1
    d6a2:	f7ff ff32 	bl	d50a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d6a6:	2800      	cmp	r0, #0
    d6a8:	d000      	beq.n	d6ac <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d6aa:	2001      	movs	r0, #1
    d6ac:	bd10      	pop	{r4, pc}

0000d6ae <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d6ae:	2201      	movs	r2, #1
    d6b0:	f7ff bf38 	b.w	d524 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d6b4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d6b4:	2200      	movs	r2, #0
    d6b6:	f7ff bf35 	b.w	d524 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d6ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d6ba:	b570      	push	{r4, r5, r6, lr}
    d6bc:	b109      	cbz	r1, d6c2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d6be:	2300      	movs	r3, #0
    d6c0:	e000      	b.n	d6c4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d6c2:	2302      	movs	r3, #2
    d6c4:	21ff      	movs	r1, #255	; 0xff
    d6c6:	7081      	strb	r1, [r0, #2]
    d6c8:	18c1      	adds	r1, r0, r3
    d6ca:	2402      	movs	r4, #2
    d6cc:	7d0d      	ldrb	r5, [r1, #20]
    d6ce:	2d01      	cmp	r5, #1
    d6d0:	d007      	beq.n	d6e2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d6d2:	7d4d      	ldrb	r5, [r1, #21]
    d6d4:	2d01      	cmp	r5, #1
    d6d6:	d009      	beq.n	d6ec <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d6d8:	f44f 718b 	mov.w	r1, #278	; 0x116
    d6dc:	2009      	movs	r0, #9
    d6de:	f7f7 f9e5 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d6e6:	831a      	strh	r2, [r3, #24]
    d6e8:	750c      	strb	r4, [r1, #20]
    d6ea:	e003      	b.n	d6f4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d6ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d6f0:	835a      	strh	r2, [r3, #26]
    d6f2:	754c      	strb	r4, [r1, #21]
    d6f4:	2100      	movs	r1, #0
    d6f6:	7081      	strb	r1, [r0, #2]
    d6f8:	bd70      	pop	{r4, r5, r6, pc}

0000d6fa <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d6fa:	2101      	movs	r1, #1
    d6fc:	7001      	strb	r1, [r0, #0]
    d6fe:	4770      	bx	lr

0000d700 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d700:	2201      	movs	r2, #1
    d702:	4611      	mov	r1, r2
    d704:	f7ff bf3c 	b.w	d580 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d708 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d708:	2201      	movs	r2, #1
    d70a:	2100      	movs	r1, #0
    d70c:	f7ff bf38 	b.w	d580 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d710 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d710:	2100      	movs	r1, #0
    d712:	f7ff bee1 	b.w	d4d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d716:	2800      	cmp	r0, #0
    d718:	db09      	blt.n	d72e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d71a:	f000 021f 	and.w	r2, r0, #31
    d71e:	2101      	movs	r1, #1
    d720:	4091      	lsls	r1, r2
    d722:	0940      	lsrs	r0, r0, #5
    d724:	0080      	lsls	r0, r0, #2
    d726:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d72a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d72e:	4770      	bx	lr
    d730:	2800      	cmp	r0, #0
    d732:	db0d      	blt.n	d750 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    d734:	f000 021f 	and.w	r2, r0, #31
    d738:	2101      	movs	r1, #1
    d73a:	4091      	lsls	r1, r2
    d73c:	0940      	lsrs	r0, r0, #5
    d73e:	0080      	lsls	r0, r0, #2
    d740:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d744:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d748:	f3bf 8f4f 	dsb	sy
    d74c:	f3bf 8f6f 	isb	sy
    d750:	4770      	bx	lr
    d752:	b510      	push	{r4, lr}
    d754:	200e      	movs	r0, #14
    d756:	f7ff ffeb 	bl	d730 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d75a:	200e      	movs	r0, #14
    d75c:	f7ff ffdb 	bl	d716 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d760:	200f      	movs	r0, #15
    d762:	f7ff ffe5 	bl	d730 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d76a:	200f      	movs	r0, #15
    d76c:	f7ff bfd3 	b.w	d716 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d770:	2800      	cmp	r0, #0
    d772:	db09      	blt.n	d788 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    d774:	f000 021f 	and.w	r2, r0, #31
    d778:	2101      	movs	r1, #1
    d77a:	4091      	lsls	r1, r2
    d77c:	0940      	lsrs	r0, r0, #5
    d77e:	0080      	lsls	r0, r0, #2
    d780:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d784:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d788:	4770      	bx	lr
    d78a:	5840      	ldr	r0, [r0, r1]
    d78c:	2800      	cmp	r0, #0
    d78e:	d000      	beq.n	d792 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    d790:	2001      	movs	r0, #1
    d792:	4770      	bx	lr

0000d794 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d794:	b510      	push	{r4, lr}
    d796:	4604      	mov	r4, r0
    d798:	4620      	mov	r0, r4
    d79a:	f7f7 feb7 	bl	550c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    d79e:	2811      	cmp	r0, #17
    d7a0:	d0fa      	beq.n	d798 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d7a2:	bd10      	pop	{r4, pc}

0000d7a4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d7a4:	b510      	push	{r4, lr}
    d7a6:	f7ff fff5 	bl	d794 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d7aa:	2800      	cmp	r0, #0
    d7ac:	d003      	beq.n	d7b6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d7ae:	21a0      	movs	r1, #160	; 0xa0
    d7b0:	201d      	movs	r0, #29
    d7b2:	f7f7 f97b 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7b6:	bd10      	pop	{r4, pc}

0000d7b8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d7b8:	f7f8 b806 	b.w	57c8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d7bc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d7bc:	f7f7 bff4 	b.w	57a8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d7c0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d7c0:	b510      	push	{r4, lr}
    d7c2:	4050      	eors	r0, r2
    d7c4:	780a      	ldrb	r2, [r1, #0]
    d7c6:	781c      	ldrb	r4, [r3, #0]
    d7c8:	4062      	eors	r2, r4
    d7ca:	4410      	add	r0, r2
    d7cc:	784a      	ldrb	r2, [r1, #1]
    d7ce:	785c      	ldrb	r4, [r3, #1]
    d7d0:	4062      	eors	r2, r4
    d7d2:	4410      	add	r0, r2
    d7d4:	788a      	ldrb	r2, [r1, #2]
    d7d6:	789c      	ldrb	r4, [r3, #2]
    d7d8:	4062      	eors	r2, r4
    d7da:	4410      	add	r0, r2
    d7dc:	78ca      	ldrb	r2, [r1, #3]
    d7de:	78dc      	ldrb	r4, [r3, #3]
    d7e0:	4062      	eors	r2, r4
    d7e2:	4410      	add	r0, r2
    d7e4:	790a      	ldrb	r2, [r1, #4]
    d7e6:	791c      	ldrb	r4, [r3, #4]
    d7e8:	7949      	ldrb	r1, [r1, #5]
    d7ea:	4062      	eors	r2, r4
    d7ec:	4410      	add	r0, r2
    d7ee:	795a      	ldrb	r2, [r3, #5]
    d7f0:	4051      	eors	r1, r2
    d7f2:	42c1      	cmn	r1, r0
    d7f4:	d101      	bne.n	d7fa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d7f6:	2001      	movs	r0, #1
    d7f8:	bd10      	pop	{r4, pc}
    d7fa:	2000      	movs	r0, #0
    d7fc:	bd10      	pop	{r4, pc}

0000d7fe <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d7fe:	b510      	push	{r4, lr}
    d800:	2900      	cmp	r1, #0
    d802:	4604      	mov	r4, r0
    d804:	f04f 0106 	mov.w	r1, #6
    d808:	d002      	beq.n	d810 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d80a:	f7f7 f9ef 	bl	4bec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d80e:	e001      	b.n	d814 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d810:	f7f7 f9fa 	bl	4c08 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d814:	7960      	ldrb	r0, [r4, #5]
    d816:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d81a:	7160      	strb	r0, [r4, #5]
    d81c:	bd10      	pop	{r4, pc}

0000d81e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d81e:	4770      	bx	lr

0000d820 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d820:	b530      	push	{r4, r5, lr}
    d822:	460c      	mov	r4, r1
    d824:	4605      	mov	r5, r0
    d826:	b08d      	sub	sp, #52	; 0x34
    d828:	f04f 0103 	mov.w	r1, #3
    d82c:	f104 0003 	add.w	r0, r4, #3
    d830:	b112      	cbz	r2, d838 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d832:	f7f7 f9db 	bl	4bec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d836:	e001      	b.n	d83c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d838:	f7f7 f9e6 	bl	4c08 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d83c:	7960      	ldrb	r0, [r4, #5]
    d83e:	220d      	movs	r2, #13
    d840:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d844:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d848:	7160      	strb	r0, [r4, #5]
    d84a:	2100      	movs	r1, #0
    d84c:	a804      	add	r0, sp, #16
    d84e:	f7fe fefc 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d852:	78e0      	ldrb	r0, [r4, #3]
    d854:	f88d 001f 	strb.w	r0, [sp, #31]
    d858:	7920      	ldrb	r0, [r4, #4]
    d85a:	f88d 001e 	strb.w	r0, [sp, #30]
    d85e:	7960      	ldrb	r0, [r4, #5]
    d860:	f88d 001d 	strb.w	r0, [sp, #29]
    d864:	2210      	movs	r2, #16
    d866:	4629      	mov	r1, r5
    d868:	4668      	mov	r0, sp
    d86a:	f7fe fe74 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d86e:	4668      	mov	r0, sp
    d870:	f7ff ff98 	bl	d7a4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d874:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d878:	7020      	strb	r0, [r4, #0]
    d87a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d87e:	7060      	strb	r0, [r4, #1]
    d880:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d884:	70a0      	strb	r0, [r4, #2]
    d886:	b00d      	add	sp, #52	; 0x34
    d888:	bd30      	pop	{r4, r5, pc}

0000d88a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d88a:	f7f8 bb59 	b.w	5f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    d88e:	07c1      	lsls	r1, r0, #31
    d890:	d001      	beq.n	d896 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d892:	2001      	movs	r0, #1
    d894:	4770      	bx	lr
    d896:	0780      	lsls	r0, r0, #30
    d898:	d501      	bpl.n	d89e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d89a:	2002      	movs	r0, #2
    d89c:	4770      	bx	lr
    d89e:	2000      	movs	r0, #0
    d8a0:	4770      	bx	lr
    d8a2:	b510      	push	{r4, lr}
    d8a4:	2801      	cmp	r0, #1
    d8a6:	d008      	beq.n	d8ba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d8a8:	2802      	cmp	r0, #2
    d8aa:	d004      	beq.n	d8b6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d8ac:	f240 411a 	movw	r1, #1050	; 0x41a
    d8b0:	2006      	movs	r0, #6
    d8b2:	f7f7 f8fb 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8b6:	2001      	movs	r0, #1
    d8b8:	bd10      	pop	{r4, pc}
    d8ba:	2000      	movs	r0, #0
    d8bc:	bd10      	pop	{r4, pc}
    d8be:	2900      	cmp	r1, #0
    d8c0:	d004      	beq.n	d8cc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d8c2:	2801      	cmp	r0, #1
    d8c4:	d003      	beq.n	d8ce <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d8c6:	2901      	cmp	r1, #1
    d8c8:	d001      	beq.n	d8ce <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d8ca:	2002      	movs	r0, #2
    d8cc:	4770      	bx	lr
    d8ce:	2001      	movs	r0, #1
    d8d0:	4770      	bx	lr
    d8d2:	f7ff bc95 	b.w	d200 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d8d6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d8d6:	2101      	movs	r1, #1
    d8d8:	f7f8 be2c 	b.w	6534 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d8dc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d8dc:	b510      	push	{r4, lr}
    d8de:	f002 feff 	bl	106e0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d8e2:	b118      	cbz	r0, d8ec <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8e8:	f7fd ba02 	b.w	acf0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d8ec:	20ff      	movs	r0, #255	; 0xff
    d8ee:	bd10      	pop	{r4, pc}

0000d8f0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d8f0:	b510      	push	{r4, lr}
    d8f2:	f7f8 fe67 	bl	65c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d8f6:	2810      	cmp	r0, #16
    d8f8:	d003      	beq.n	d902 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d8fa:	f7f8 fe33 	bl	6564 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d8fe:	2810      	cmp	r0, #16
    d900:	d100      	bne.n	d904 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d902:	2008      	movs	r0, #8
    d904:	bd10      	pop	{r4, pc}

0000d906 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d906:	b510      	push	{r4, lr}
    d908:	f7f8 fe5c 	bl	65c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d90c:	2810      	cmp	r0, #16
    d90e:	d003      	beq.n	d918 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d910:	f7f8 feb6 	bl	6680 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    d914:	2001      	movs	r0, #1
    d916:	bd10      	pop	{r4, pc}
    d918:	2000      	movs	r0, #0
    d91a:	bd10      	pop	{r4, pc}

0000d91c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d91c:	b570      	push	{r4, r5, r6, lr}
    d91e:	460e      	mov	r6, r1
    d920:	b08c      	sub	sp, #48	; 0x30
    d922:	4614      	mov	r4, r2
    d924:	4601      	mov	r1, r0
    d926:	461d      	mov	r5, r3
    d928:	2210      	movs	r2, #16
    d92a:	4668      	mov	r0, sp
    d92c:	f000 f938 	bl	dba0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d930:	2210      	movs	r2, #16
    d932:	4631      	mov	r1, r6
    d934:	a804      	add	r0, sp, #16
    d936:	f000 f933 	bl	dba0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d93a:	4668      	mov	r0, sp
    d93c:	f7ff ff32 	bl	d7a4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d940:	a908      	add	r1, sp, #32
    d942:	f04f 0210 	mov.w	r2, #16
    d946:	4628      	mov	r0, r5
    d948:	b11c      	cbz	r4, d952 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d94a:	f000 f929 	bl	dba0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d94e:	b00c      	add	sp, #48	; 0x30
    d950:	bd70      	pop	{r4, r5, r6, pc}
    d952:	f7fe fe00 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d956:	e7fa      	b.n	d94e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d958:	b510      	push	{r4, lr}
    d95a:	460c      	mov	r4, r1
    d95c:	2100      	movs	r1, #0
    d95e:	f7ff fd84 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d962:	6060      	str	r0, [r4, #4]
    d964:	b118      	cbz	r0, d96e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d966:	2001      	movs	r0, #1
    d968:	7020      	strb	r0, [r4, #0]
    d96a:	2000      	movs	r0, #0
    d96c:	bd10      	pop	{r4, pc}
    d96e:	2002      	movs	r0, #2
    d970:	bd10      	pop	{r4, pc}

0000d972 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d972:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d976:	4348      	muls	r0, r1
    d978:	4770      	bx	lr

0000d97a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d97a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d97e:	fbb0 f0f1 	udiv	r0, r0, r1
    d982:	b280      	uxth	r0, r0
    d984:	4770      	bx	lr

0000d986 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d986:	b570      	push	{r4, r5, r6, lr}
    d988:	4604      	mov	r4, r0
    d98a:	4290      	cmp	r0, r2
    d98c:	d20b      	bcs.n	d9a6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d98e:	1b10      	subs	r0, r2, r4
    d990:	2865      	cmp	r0, #101	; 0x65
    d992:	d200      	bcs.n	d996 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d994:	2065      	movs	r0, #101	; 0x65
    d996:	1825      	adds	r5, r4, r0
    d998:	428d      	cmp	r5, r1
    d99a:	d803      	bhi.n	d9a4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d99c:	2103      	movs	r1, #3
    d99e:	f7f4 fb25 	bl	1fec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d9a2:	b108      	cbz	r0, d9a8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d9a4:	4620      	mov	r0, r4
    d9a6:	bd70      	pop	{r4, r5, r6, pc}
    d9a8:	4628      	mov	r0, r5
    d9aa:	bd70      	pop	{r4, r5, r6, pc}

0000d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d9ac:	b510      	push	{r4, lr}
    d9ae:	f1a2 0311 	sub.w	r3, r2, #17
    d9b2:	290d      	cmp	r1, #13
    d9b4:	d24d      	bcs.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9b6:	e8df f001 	tbb	[pc, r1]
    d9ba:	0907      	.short	0x0907
    d9bc:	1d1a150e 	.word	0x1d1a150e
    d9c0:	4e2c2921 	.word	0x4e2c2921
    d9c4:	0048362f 	.word	0x0048362f
    d9c8:	b3f2      	cbz	r2, da48 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    d9ca:	e042      	b.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9cc:	2a07      	cmp	r2, #7
    d9ce:	d03e      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9d0:	2a08      	cmp	r2, #8
    d9d2:	d03c      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9d4:	e03d      	b.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9d6:	2a0c      	cmp	r2, #12
    d9d8:	d039      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9da:	2a0d      	cmp	r2, #13
    d9dc:	d037      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9de:	2a0b      	cmp	r2, #11
    d9e0:	d035      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9e2:	e036      	b.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9e4:	2a0e      	cmp	r2, #14
    d9e6:	d032      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9e8:	2a0f      	cmp	r2, #15
    d9ea:	d030      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9ec:	e031      	b.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9ee:	2b0c      	cmp	r3, #12
    d9f0:	d92d      	bls.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9f2:	e02e      	b.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9f4:	3a12      	subs	r2, #18
    d9f6:	2a0b      	cmp	r2, #11
    d9f8:	d929      	bls.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9fa:	e02a      	b.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9fc:	2b03      	cmp	r3, #3
    d9fe:	d926      	bls.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da00:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
    da04:	b1f8      	cbz	r0, da46 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    da06:	2a1d      	cmp	r2, #29
    da08:	d921      	bls.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da0a:	e022      	b.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    da0c:	2a04      	cmp	r2, #4
    da0e:	d01e      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da10:	e01f      	b.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    da12:	2a06      	cmp	r2, #6
    da14:	d01b      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da16:	e01c      	b.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    da18:	2a1e      	cmp	r2, #30
    da1a:	d018      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da1c:	2a1f      	cmp	r2, #31
    da1e:	d016      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da20:	2a20      	cmp	r2, #32
    da22:	d014      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da24:	e015      	b.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    da26:	2a21      	cmp	r2, #33	; 0x21
    da28:	d011      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da2a:	2a22      	cmp	r2, #34	; 0x22
    da2c:	d00f      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da2e:	2a23      	cmp	r2, #35	; 0x23
    da30:	d00d      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da32:	2a24      	cmp	r2, #36	; 0x24
    da34:	d00b      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da36:	2a25      	cmp	r2, #37	; 0x25
    da38:	d009      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da3a:	2a26      	cmp	r2, #38	; 0x26
    da3c:	d007      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da3e:	2a27      	cmp	r2, #39	; 0x27
    da40:	d005      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da42:	2a2e      	cmp	r2, #46	; 0x2e
    da44:	d003      	beq.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da46:	e004      	b.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    da48:	e001      	b.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    da4a:	2a29      	cmp	r2, #41	; 0x29
    da4c:	d101      	bne.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    da4e:	2001      	movs	r0, #1
    da50:	bd10      	pop	{r4, pc}
    da52:	2000      	movs	r0, #0
    da54:	bd10      	pop	{r4, pc}
    da56:	2a10      	cmp	r2, #16
    da58:	d1fb      	bne.n	da52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    da5a:	e7f8      	b.n	da4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000da5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    da5c:	280c      	cmp	r0, #12
    da5e:	d019      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da60:	280d      	cmp	r0, #13
    da62:	d017      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da64:	280b      	cmp	r0, #11
    da66:	d015      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da68:	280e      	cmp	r0, #14
    da6a:	d013      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da6c:	280f      	cmp	r0, #15
    da6e:	d011      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da70:	2821      	cmp	r0, #33	; 0x21
    da72:	d00f      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da74:	2822      	cmp	r0, #34	; 0x22
    da76:	d00d      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da78:	2823      	cmp	r0, #35	; 0x23
    da7a:	d00b      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da7c:	2824      	cmp	r0, #36	; 0x24
    da7e:	d009      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da80:	2825      	cmp	r0, #37	; 0x25
    da82:	d007      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da84:	2826      	cmp	r0, #38	; 0x26
    da86:	d005      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da88:	2827      	cmp	r0, #39	; 0x27
    da8a:	d003      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da8c:	282e      	cmp	r0, #46	; 0x2e
    da8e:	d001      	beq.n	da94 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da90:	2000      	movs	r0, #0
    da92:	4770      	bx	lr
    da94:	2001      	movs	r0, #1
    da96:	4770      	bx	lr

0000da98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    da98:	f011 0f0c 	tst.w	r1, #12
    da9c:	d018      	beq.n	dad0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    da9e:	074a      	lsls	r2, r1, #29
    daa0:	f44f 7116 	mov.w	r1, #600	; 0x258
    daa4:	2a00      	cmp	r2, #0
    daa6:	da02      	bge.n	daae <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    daa8:	f04f 0210 	mov.w	r2, #16
    daac:	e001      	b.n	dab2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    daae:	f04f 0240 	mov.w	r2, #64	; 0x40
    dab2:	da01      	bge.n	dab8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    dab4:	f04f 0196 	mov.w	r1, #150	; 0x96
    dab8:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dabc:	eba0 0301 	sub.w	r3, r0, r1
    dac0:	4288      	cmp	r0, r1
    dac2:	d903      	bls.n	dacc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dac4:	fb93 f0f2 	sdiv	r0, r3, r2
    dac8:	b280      	uxth	r0, r0
    daca:	4770      	bx	lr
    dacc:	2000      	movs	r0, #0
    dace:	4770      	bx	lr
    dad0:	2902      	cmp	r1, #2
    dad2:	d008      	beq.n	dae6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dad4:	2870      	cmp	r0, #112	; 0x70
    dad6:	d9f9      	bls.n	dacc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dad8:	3870      	subs	r0, #112	; 0x70
    dada:	17c1      	asrs	r1, r0, #31
    dadc:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dae0:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    dae4:	4770      	bx	lr
    dae6:	283c      	cmp	r0, #60	; 0x3c
    dae8:	d9f0      	bls.n	dacc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    daea:	383c      	subs	r0, #60	; 0x3c
    daec:	17c1      	asrs	r1, r0, #31
    daee:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    daf2:	f3c0 008f 	ubfx	r0, r0, #2, #16
    daf6:	4770      	bx	lr

0000daf8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    daf8:	6809      	ldr	r1, [r1, #0]
    dafa:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dafe:	4770      	bx	lr

0000db00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    db00:	07c1      	lsls	r1, r0, #31
    db02:	d001      	beq.n	db08 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    db04:	2001      	movs	r0, #1
    db06:	4770      	bx	lr
    db08:	0781      	lsls	r1, r0, #30
    db0a:	d501      	bpl.n	db10 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    db0c:	2002      	movs	r0, #2
    db0e:	4770      	bx	lr
    db10:	0740      	lsls	r0, r0, #29
    db12:	d501      	bpl.n	db18 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    db14:	2008      	movs	r0, #8
    db16:	4770      	bx	lr
    db18:	2000      	movs	r0, #0
    db1a:	4770      	bx	lr

0000db1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    db1c:	b510      	push	{r4, lr}
    db1e:	f640 12c4 	movw	r2, #2500	; 0x9c4
    db22:	2901      	cmp	r1, #1
    db24:	d006      	beq.n	db34 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    db26:	2902      	cmp	r1, #2
    db28:	d005      	beq.n	db36 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    db2a:	f240 31af 	movw	r1, #943	; 0x3af
    db2e:	2029      	movs	r0, #41	; 0x29
    db30:	f7f6 ffbc 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db34:	b108      	cbz	r0, db3a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    db36:	4610      	mov	r0, r2
    db38:	bd10      	pop	{r4, pc}
    db3a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    db3e:	bd10      	pop	{r4, pc}

0000db40 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    db40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db44:	4607      	mov	r7, r0
    db46:	460e      	mov	r6, r1
    db48:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    db4c:	f7f4 fe0c 	bl	2768 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    db50:	b198      	cbz	r0, db7a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    db52:	b31e      	cbz	r6, db9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    db54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    db58:	1b40      	subs	r0, r0, r5
    db5a:	2300      	movs	r3, #0
    db5c:	eb61 0104 	sbc.w	r1, r1, r4
    db60:	461a      	mov	r2, r3
    db62:	1a1b      	subs	r3, r3, r0
    db64:	418a      	sbcs	r2, r1
    db66:	da19      	bge.n	db9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    db68:	1c42      	adds	r2, r0, #1
    db6a:	f171 0100 	sbcs.w	r1, r1, #0
    db6e:	db07      	blt.n	db80 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    db70:	f240 2129 	movw	r1, #553	; 0x229
    db74:	2029      	movs	r0, #41	; 0x29
    db76:	f7f6 ff99 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db7a:	f240 211f 	movw	r1, #543	; 0x21f
    db7e:	e7f9      	b.n	db74 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    db80:	4430      	add	r0, r6
    db82:	1e40      	subs	r0, r0, #1
    db84:	fbb0 f1f6 	udiv	r1, r0, r6
    db88:	fb01 f006 	mul.w	r0, r1, r6
    db8c:	1828      	adds	r0, r5, r0
    db8e:	f144 0400 	adc.w	r4, r4, #0
    db92:	e9c7 0404 	strd	r0, r4, [r7, #16]
    db96:	4608      	mov	r0, r1
    db98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db9c:	2000      	movs	r0, #0
    db9e:	e7fb      	b.n	db98 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000dba0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dba0:	b530      	push	{r4, r5, lr}
    dba2:	4613      	mov	r3, r2
    dba4:	e006      	b.n	dbb4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dba6:	18cc      	adds	r4, r1, r3
    dba8:	1ad5      	subs	r5, r2, r3
    dbaa:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dbae:	1e5b      	subs	r3, r3, #1
    dbb0:	5544      	strb	r4, [r0, r5]
    dbb2:	b2db      	uxtb	r3, r3
    dbb4:	2b00      	cmp	r3, #0
    dbb6:	d1f6      	bne.n	dba6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dbb8:	bd30      	pop	{r4, r5, pc}

0000dbba <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dbba:	2300      	movs	r3, #0
    dbbc:	6383      	str	r3, [r0, #56]	; 0x38
    dbbe:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    dbc2:	f240 2371 	movw	r3, #625	; 0x271
    dbc6:	435a      	muls	r2, r3
    dbc8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    dbcc:	1e52      	subs	r2, r2, #1
    dbce:	fbb2 f1f1 	udiv	r1, r2, r1
    dbd2:	63c1      	str	r1, [r0, #60]	; 0x3c
    dbd4:	4770      	bx	lr

0000dbd6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    dbd6:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    dbda:	4607      	mov	r7, r0
    dbdc:	4690      	mov	r8, r2
    dbde:	468b      	mov	fp, r1
    dbe0:	2601      	movs	r6, #1
    dbe2:	4608      	mov	r0, r1
    dbe4:	f000 f9dc 	bl	dfa0 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    dbe8:	4682      	mov	sl, r0
    dbea:	4658      	mov	r0, fp
    dbec:	f000 f9da 	bl	dfa4 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    dbf0:	4681      	mov	r9, r0
    dbf2:	f7ff ff85 	bl	db00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    dbf6:	4604      	mov	r4, r0
    dbf8:	4650      	mov	r0, sl
    dbfa:	f7ff ff81 	bl	db00 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    dbfe:	4605      	mov	r5, r0
    dc00:	ea54 0005 	orrs.w	r0, r4, r5
    dc04:	d100      	bne.n	dc08 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    dc06:	2600      	movs	r6, #0
    dc08:	f7fc fff4 	bl	abf4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    dc0c:	ea10 0f09 	tst.w	r0, r9
    dc10:	d100      	bne.n	dc14 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    dc12:	2400      	movs	r4, #0
    dc14:	f7fc ffee 	bl	abf4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    dc18:	ea10 0f0a 	tst.w	r0, sl
    dc1c:	d100      	bne.n	dc20 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    dc1e:	2500      	movs	r5, #0
    dc20:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    dc24:	42a0      	cmp	r0, r4
    dc26:	d100      	bne.n	dc2a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    dc28:	2400      	movs	r4, #0
    dc2a:	f888 4000 	strb.w	r4, [r8]
    dc2e:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    dc32:	42a8      	cmp	r0, r5
    dc34:	d100      	bne.n	dc38 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    dc36:	2500      	movs	r5, #0
    dc38:	f888 5001 	strb.w	r5, [r8, #1]
    dc3c:	b974      	cbnz	r4, dc5c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dc3e:	b96d      	cbnz	r5, dc5c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dc40:	4658      	mov	r0, fp
    dc42:	f000 f99b 	bl	df7c <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    dc46:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
    dc4a:	1a40      	subs	r0, r0, r1
    dc4c:	b200      	sxth	r0, r0
    dc4e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    dc52:	4288      	cmp	r0, r1
    dc54:	dc01      	bgt.n	dc5a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    dc56:	2800      	cmp	r0, #0
    dc58:	dc00      	bgt.n	dc5c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dc5a:	2600      	movs	r6, #0
    dc5c:	4630      	mov	r0, r6
    dc5e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000dc62 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dc62:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc66:	4348      	muls	r0, r1
    dc68:	4770      	bx	lr

0000dc6a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dc6a:	f240 2171 	movw	r1, #625	; 0x271
    dc6e:	fb10 f001 	smulbb	r0, r0, r1
    dc72:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dc76:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    dc7a:	4770      	bx	lr

0000dc7c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dc7c:	b510      	push	{r4, lr}
    dc7e:	2300      	movs	r3, #0
    dc80:	461a      	mov	r2, r3
    dc82:	e003      	b.n	dc8c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dc84:	5c84      	ldrb	r4, [r0, r2]
    dc86:	4323      	orrs	r3, r4
    dc88:	1c52      	adds	r2, r2, #1
    dc8a:	b2d2      	uxtb	r2, r2
    dc8c:	428a      	cmp	r2, r1
    dc8e:	d3f9      	bcc.n	dc84 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dc90:	b10b      	cbz	r3, dc96 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dc92:	2000      	movs	r0, #0
    dc94:	bd10      	pop	{r4, pc}
    dc96:	2001      	movs	r0, #1
    dc98:	bd10      	pop	{r4, pc}

0000dc9a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dc9a:	b510      	push	{r4, lr}
    dc9c:	4604      	mov	r4, r0
    dc9e:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    dca2:	b108      	cbz	r0, dca8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dca4:	2825      	cmp	r0, #37	; 0x25
    dca6:	d901      	bls.n	dcac <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dca8:	2012      	movs	r0, #18
    dcaa:	bd10      	pop	{r4, pc}
    dcac:	b12a      	cbz	r2, dcba <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    dcae:	7f60      	ldrb	r0, [r4, #29]
    dcb0:	b128      	cbz	r0, dcbe <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    dcb2:	2801      	cmp	r0, #1
    dcb4:	d009      	beq.n	dcca <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    dcb6:	201f      	movs	r0, #31
    dcb8:	bd10      	pop	{r4, pc}
    dcba:	2000      	movs	r0, #0
    dcbc:	bd10      	pop	{r4, pc}
    dcbe:	4620      	mov	r0, r4
    dcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dcc4:	4611      	mov	r1, r2
    dcc6:	f000 b827 	b.w	dd18 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    dcca:	89a2      	ldrh	r2, [r4, #12]
    dccc:	6949      	ldr	r1, [r1, #20]
    dcce:	f104 001d 	add.w	r0, r4, #29
    dcd2:	f7f8 fd71 	bl	67b8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    dcd6:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    dcda:	e7ee      	b.n	dcba <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000dcdc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dcdc:	b570      	push	{r4, r5, r6, lr}
    dcde:	4604      	mov	r4, r0
    dce0:	1c40      	adds	r0, r0, #1
    dce2:	4288      	cmp	r0, r1
    dce4:	d004      	beq.n	dcf0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    dce6:	6808      	ldr	r0, [r1, #0]
    dce8:	f8c4 0001 	str.w	r0, [r4, #1]
    dcec:	7908      	ldrb	r0, [r1, #4]
    dcee:	7160      	strb	r0, [r4, #5]
    dcf0:	7960      	ldrb	r0, [r4, #5]
    dcf2:	f000 001f 	and.w	r0, r0, #31
    dcf6:	7160      	strb	r0, [r4, #5]
    dcf8:	2000      	movs	r0, #0
    dcfa:	72e0      	strb	r0, [r4, #11]
    dcfc:	4605      	mov	r5, r0
    dcfe:	1966      	adds	r6, r4, r5
    dd00:	7870      	ldrb	r0, [r6, #1]
    dd02:	f000 fba6 	bl	e452 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dd06:	71b0      	strb	r0, [r6, #6]
    dd08:	7ae1      	ldrb	r1, [r4, #11]
    dd0a:	1c6d      	adds	r5, r5, #1
    dd0c:	4408      	add	r0, r1
    dd0e:	b2ed      	uxtb	r5, r5
    dd10:	72e0      	strb	r0, [r4, #11]
    dd12:	2d05      	cmp	r5, #5
    dd14:	d3f3      	bcc.n	dcfe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    dd16:	bd70      	pop	{r4, r5, r6, pc}
    dd18:	b570      	push	{r4, r5, r6, lr}
    dd1a:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
    dd1e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    dd22:	2401      	movs	r4, #1
    dd24:	fb03 2101 	mla	r1, r3, r1, r2
    dd28:	2225      	movs	r2, #37	; 0x25
    dd2a:	fbb1 f3f2 	udiv	r3, r1, r2
    dd2e:	fb02 1113 	mls	r1, r2, r3, r1
    dd32:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    dd36:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    dd3a:	f001 0307 	and.w	r3, r1, #7
    dd3e:	7f92      	ldrb	r2, [r2, #30]
    dd40:	fa04 f303 	lsl.w	r3, r4, r3
    dd44:	421a      	tst	r2, r3
    dd46:	d003      	beq.n	dd50 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x74>
    dd48:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    dd4c:	2000      	movs	r0, #0
    dd4e:	bd70      	pop	{r4, r5, r6, pc}
    dd50:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    dd54:	fbb1 f3f2 	udiv	r3, r1, r2
    dd58:	fb02 1113 	mls	r1, r2, r3, r1
    dd5c:	1c49      	adds	r1, r1, #1
    dd5e:	b2c9      	uxtb	r1, r1
    dd60:	2300      	movs	r3, #0
    dd62:	18c5      	adds	r5, r0, r3
    dd64:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
    dd68:	428a      	cmp	r2, r1
    dd6a:	d310      	bcc.n	dd8e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb2>
    dd6c:	7fad      	ldrb	r5, [r5, #30]
    dd6e:	2200      	movs	r2, #0
    dd70:	fa04 f602 	lsl.w	r6, r4, r2
    dd74:	4235      	tst	r5, r6
    dd76:	d001      	beq.n	dd7c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xa0>
    dd78:	1e49      	subs	r1, r1, #1
    dd7a:	b2c9      	uxtb	r1, r1
    dd7c:	b121      	cbz	r1, dd88 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xac>
    dd7e:	1c52      	adds	r2, r2, #1
    dd80:	b2d2      	uxtb	r2, r2
    dd82:	2a08      	cmp	r2, #8
    dd84:	d3f4      	bcc.n	dd70 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x94>
    dd86:	e004      	b.n	dd92 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    dd88:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    dd8c:	e7dc      	b.n	dd48 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    dd8e:	1a89      	subs	r1, r1, r2
    dd90:	b2c9      	uxtb	r1, r1
    dd92:	1c5b      	adds	r3, r3, #1
    dd94:	b2db      	uxtb	r3, r3
    dd96:	2b05      	cmp	r3, #5
    dd98:	d3e3      	bcc.n	dd62 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x86>
    dd9a:	201f      	movs	r0, #31
    dd9c:	bd70      	pop	{r4, r5, r6, pc}

0000dd9e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    dd9e:	7802      	ldrb	r2, [r0, #0]
    dda0:	f002 020f 	and.w	r2, r2, #15
    dda4:	2a03      	cmp	r2, #3
    dda6:	d003      	beq.n	ddb0 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    dda8:	2a05      	cmp	r2, #5
    ddaa:	d104      	bne.n	ddb6 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    ddac:	f000 b92e 	b.w	e00c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    ddb0:	7840      	ldrb	r0, [r0, #1]
    ddb2:	280c      	cmp	r0, #12
    ddb4:	d001      	beq.n	ddba <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    ddb6:	2000      	movs	r0, #0
    ddb8:	4770      	bx	lr
    ddba:	2001      	movs	r0, #1
    ddbc:	4770      	bx	lr

0000ddbe <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    ddbe:	b570      	push	{r4, r5, r6, lr}
    ddc0:	4614      	mov	r4, r2
    ddc2:	4605      	mov	r5, r0
    ddc4:	2a1f      	cmp	r2, #31
    ddc6:	d903      	bls.n	ddd0 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    ddc8:	21f1      	movs	r1, #241	; 0xf1
    ddca:	202a      	movs	r0, #42	; 0x2a
    ddcc:	f7f6 fe6e 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddd0:	f105 0009 	add.w	r0, r5, #9
    ddd4:	f7fe fbbf 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ddd8:	1da4      	adds	r4, r4, #6
    ddda:	706c      	strb	r4, [r5, #1]
    dddc:	bd70      	pop	{r4, r5, r6, pc}

0000ddde <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    ddde:	b510      	push	{r4, lr}
    dde0:	7802      	ldrb	r2, [r0, #0]
    dde2:	f001 030f 	and.w	r3, r1, #15
    dde6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ddea:	431a      	orrs	r2, r3
    ddec:	7002      	strb	r2, [r0, #0]
    ddee:	2907      	cmp	r1, #7
    ddf0:	d20c      	bcs.n	de0c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    ddf2:	e8df f001 	tbb	[pc, r1]
    ddf6:	0604      	.short	0x0604
    ddf8:	08040604 	.word	0x08040604
    ddfc:	0004      	.short	0x0004
    ddfe:	2106      	movs	r1, #6
    de00:	e002      	b.n	de08 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    de02:	210c      	movs	r1, #12
    de04:	e000      	b.n	de08 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    de06:	2122      	movs	r1, #34	; 0x22
    de08:	7041      	strb	r1, [r0, #1]
    de0a:	bd10      	pop	{r4, pc}
    de0c:	21ab      	movs	r1, #171	; 0xab
    de0e:	202a      	movs	r0, #42	; 0x2a
    de10:	f7f6 fe4c 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000de14 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    de14:	680a      	ldr	r2, [r1, #0]
    de16:	f840 2f09 	str.w	r2, [r0, #9]!
    de1a:	8889      	ldrh	r1, [r1, #4]
    de1c:	8081      	strh	r1, [r0, #4]
    de1e:	4770      	bx	lr

0000de20 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    de20:	7802      	ldrb	r2, [r0, #0]
    de22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    de26:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    de2a:	7002      	strb	r2, [r0, #0]
    de2c:	4770      	bx	lr

0000de2e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    de2e:	680a      	ldr	r2, [r1, #0]
    de30:	f840 2f03 	str.w	r2, [r0, #3]!
    de34:	8889      	ldrh	r1, [r1, #4]
    de36:	8081      	strh	r1, [r0, #4]
    de38:	4770      	bx	lr

0000de3a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    de3a:	7802      	ldrb	r2, [r0, #0]
    de3c:	2340      	movs	r3, #64	; 0x40
    de3e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    de42:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    de46:	430a      	orrs	r2, r1
    de48:	7002      	strb	r2, [r0, #0]
    de4a:	4770      	bx	lr

0000de4c <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    de4c:	b570      	push	{r4, r5, r6, lr}
    de4e:	4614      	mov	r4, r2
    de50:	4605      	mov	r5, r0
    de52:	2a1f      	cmp	r2, #31
    de54:	d904      	bls.n	de60 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    de56:	f240 1113 	movw	r1, #275	; 0x113
    de5a:	202a      	movs	r0, #42	; 0x2a
    de5c:	f7f6 fe26 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de60:	f105 0009 	add.w	r0, r5, #9
    de64:	f7fe fb77 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    de68:	1da4      	adds	r4, r4, #6
    de6a:	706c      	strb	r4, [r5, #1]
    de6c:	bd70      	pop	{r4, r5, r6, pc}

0000de6e <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    de6e:	6842      	ldr	r2, [r0, #4]
    de70:	600a      	str	r2, [r1, #0]
    de72:	7a00      	ldrb	r0, [r0, #8]
    de74:	7108      	strb	r0, [r1, #4]
    de76:	4770      	bx	lr

0000de78 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    de78:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    de7c:	4770      	bx	lr

0000de7e <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    de7e:	b570      	push	{r4, r5, r6, lr}
    de80:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    de84:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    de88:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    de8c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    de90:	88c0      	ldrh	r0, [r0, #6]
    de92:	b131      	cbz	r1, dea2 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    de94:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    de98:	d903      	bls.n	dea2 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    de9a:	f640 5107 	movw	r1, #3335	; 0xd07
    de9e:	428a      	cmp	r2, r1
    dea0:	d90b      	bls.n	deba <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    dea2:	1f91      	subs	r1, r2, #6
    dea4:	f640 467a 	movw	r6, #3194	; 0xc7a
    dea8:	42b1      	cmp	r1, r6
    deaa:	d810      	bhi.n	dece <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    deac:	b17b      	cbz	r3, dece <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    deae:	2b08      	cmp	r3, #8
    deb0:	d80d      	bhi.n	dece <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    deb2:	4293      	cmp	r3, r2
    deb4:	d20b      	bcs.n	dece <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    deb6:	4295      	cmp	r5, r2
    deb8:	d809      	bhi.n	dece <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    deba:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    debe:	d206      	bcs.n	dece <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dec0:	f640 4176 	movw	r1, #3190	; 0xc76
    dec4:	380a      	subs	r0, #10
    dec6:	4288      	cmp	r0, r1
    dec8:	d801      	bhi.n	dece <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    deca:	2001      	movs	r0, #1
    decc:	bd70      	pop	{r4, r5, r6, pc}
    dece:	2000      	movs	r0, #0
    ded0:	bd70      	pop	{r4, r5, r6, pc}

0000ded2 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    ded2:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    ded6:	4770      	bx	lr

0000ded8 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    ded8:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    dedc:	4770      	bx	lr

0000dede <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    dede:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    dee2:	4770      	bx	lr

0000dee4 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    dee4:	b510      	push	{r4, lr}
    dee6:	29fb      	cmp	r1, #251	; 0xfb
    dee8:	d904      	bls.n	def4 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    deea:	f240 61ac 	movw	r1, #1708	; 0x6ac
    deee:	202a      	movs	r0, #42	; 0x2a
    def0:	f7f6 fddc 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    def4:	7041      	strb	r1, [r0, #1]
    def6:	bd10      	pop	{r4, pc}

0000def8 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    def8:	8980      	ldrh	r0, [r0, #12]
    defa:	8008      	strh	r0, [r1, #0]
    defc:	4770      	bx	lr

0000defe <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    defe:	f8d0 0016 	ldr.w	r0, [r0, #22]
    df02:	6008      	str	r0, [r1, #0]
    df04:	4770      	bx	lr

0000df06 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    df06:	6842      	ldr	r2, [r0, #4]
    df08:	600a      	str	r2, [r1, #0]
    df0a:	6880      	ldr	r0, [r0, #8]
    df0c:	6048      	str	r0, [r1, #4]
    df0e:	4770      	bx	lr

0000df10 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    df10:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    df14:	600a      	str	r2, [r1, #0]
    df16:	6840      	ldr	r0, [r0, #4]
    df18:	6048      	str	r0, [r1, #4]
    df1a:	4770      	bx	lr

0000df1c <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    df1c:	6809      	ldr	r1, [r1, #0]
    df1e:	60c1      	str	r1, [r0, #12]
    df20:	4770      	bx	lr

0000df22 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    df22:	680a      	ldr	r2, [r1, #0]
    df24:	6042      	str	r2, [r0, #4]
    df26:	6849      	ldr	r1, [r1, #4]
    df28:	6081      	str	r1, [r0, #8]
    df2a:	4770      	bx	lr

0000df2c <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    df2c:	7800      	ldrb	r0, [r0, #0]
    df2e:	f000 0003 	and.w	r0, r0, #3
    df32:	4770      	bx	lr

0000df34 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    df34:	8880      	ldrh	r0, [r0, #4]
    df36:	4770      	bx	lr

0000df38 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    df38:	88c0      	ldrh	r0, [r0, #6]
    df3a:	4770      	bx	lr

0000df3c <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    df3c:	8900      	ldrh	r0, [r0, #8]
    df3e:	4770      	bx	lr

0000df40 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    df40:	8940      	ldrh	r0, [r0, #10]
    df42:	4770      	bx	lr

0000df44 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    df44:	8901      	ldrh	r1, [r0, #8]
    df46:	291b      	cmp	r1, #27
    df48:	d30c      	bcc.n	df64 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    df4a:	8941      	ldrh	r1, [r0, #10]
    df4c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    df50:	4291      	cmp	r1, r2
    df52:	d307      	bcc.n	df64 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    df54:	8881      	ldrh	r1, [r0, #4]
    df56:	291b      	cmp	r1, #27
    df58:	d304      	bcc.n	df64 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    df5a:	88c0      	ldrh	r0, [r0, #6]
    df5c:	4290      	cmp	r0, r2
    df5e:	d301      	bcc.n	df64 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    df60:	2001      	movs	r0, #1
    df62:	4770      	bx	lr
    df64:	2000      	movs	r0, #0
    df66:	4770      	bx	lr

0000df68 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    df68:	7901      	ldrb	r1, [r0, #4]
    df6a:	0749      	lsls	r1, r1, #29
    df6c:	d004      	beq.n	df78 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    df6e:	7940      	ldrb	r0, [r0, #5]
    df70:	0740      	lsls	r0, r0, #29
    df72:	d001      	beq.n	df78 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    df74:	2001      	movs	r0, #1
    df76:	4770      	bx	lr
    df78:	2000      	movs	r0, #0
    df7a:	4770      	bx	lr

0000df7c <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    df7c:	88c0      	ldrh	r0, [r0, #6]
    df7e:	4770      	bx	lr

0000df80 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    df80:	7901      	ldrb	r1, [r0, #4]
    df82:	7940      	ldrb	r0, [r0, #5]
    df84:	f001 0107 	and.w	r1, r1, #7
    df88:	1e4a      	subs	r2, r1, #1
    df8a:	f000 0007 	and.w	r0, r0, #7
    df8e:	4011      	ands	r1, r2
    df90:	1e42      	subs	r2, r0, #1
    df92:	4010      	ands	r0, r2
    df94:	4301      	orrs	r1, r0
    df96:	d001      	beq.n	df9c <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    df98:	2000      	movs	r0, #0
    df9a:	4770      	bx	lr
    df9c:	2001      	movs	r0, #1
    df9e:	4770      	bx	lr

0000dfa0 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    dfa0:	7900      	ldrb	r0, [r0, #4]
    dfa2:	4770      	bx	lr

0000dfa4 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    dfa4:	7940      	ldrb	r0, [r0, #5]
    dfa6:	4770      	bx	lr

0000dfa8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    dfa8:	7900      	ldrb	r0, [r0, #4]
    dfaa:	4770      	bx	lr

0000dfac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    dfac:	7101      	strb	r1, [r0, #4]
    dfae:	4770      	bx	lr

0000dfb0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    dfb0:	7940      	ldrb	r0, [r0, #5]
    dfb2:	4770      	bx	lr

0000dfb4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    dfb4:	7141      	strb	r1, [r0, #5]
    dfb6:	4770      	bx	lr

0000dfb8 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    dfb8:	b510      	push	{r4, lr}
    dfba:	2a1b      	cmp	r2, #27
    dfbc:	d904      	bls.n	dfc8 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    dfbe:	f240 4182 	movw	r1, #1154	; 0x482
    dfc2:	202a      	movs	r0, #42	; 0x2a
    dfc4:	f7f6 fd72 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfc8:	7042      	strb	r2, [r0, #1]
    dfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfce:	1cc0      	adds	r0, r0, #3
    dfd0:	f7fe bac1 	b.w	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000dfd4 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    dfd4:	7802      	ldrb	r2, [r0, #0]
    dfd6:	f001 0103 	and.w	r1, r1, #3
    dfda:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    dfde:	430a      	orrs	r2, r1
    dfe0:	7002      	strb	r2, [r0, #0]
    dfe2:	4770      	bx	lr

0000dfe4 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    dfe4:	7101      	strb	r1, [r0, #4]
    dfe6:	0a09      	lsrs	r1, r1, #8
    dfe8:	7141      	strb	r1, [r0, #5]
    dfea:	4770      	bx	lr

0000dfec <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    dfec:	7181      	strb	r1, [r0, #6]
    dfee:	0a09      	lsrs	r1, r1, #8
    dff0:	71c1      	strb	r1, [r0, #7]
    dff2:	4770      	bx	lr

0000dff4 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    dff4:	7201      	strb	r1, [r0, #8]
    dff6:	0a09      	lsrs	r1, r1, #8
    dff8:	7241      	strb	r1, [r0, #9]
    dffa:	4770      	bx	lr

0000dffc <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    dffc:	7281      	strb	r1, [r0, #10]
    dffe:	0a09      	lsrs	r1, r1, #8
    e000:	72c1      	strb	r1, [r0, #11]
    e002:	4770      	bx	lr

0000e004 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e004:	7900      	ldrb	r0, [r0, #4]
    e006:	4770      	bx	lr

0000e008 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e008:	7900      	ldrb	r0, [r0, #4]
    e00a:	4770      	bx	lr
    e00c:	b570      	push	{r4, r5, r6, lr}
    e00e:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e012:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e016:	f012 0fff 	tst.w	r2, #255	; 0xff
    e01a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e01e:	d108      	bne.n	e032 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e020:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e024:	b92c      	cbnz	r4, e032 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e026:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e02a:	b914      	cbnz	r4, e032 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e02c:	0e12      	lsrs	r2, r2, #24
    e02e:	d100      	bne.n	e032 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e030:	b34b      	cbz	r3, e086 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e032:	7846      	ldrb	r6, [r0, #1]
    e034:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e038:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    e03c:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    e040:	7d83      	ldrb	r3, [r0, #22]
    e042:	2e22      	cmp	r6, #34	; 0x22
    e044:	d11f      	bne.n	e086 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e046:	b131      	cbz	r1, e056 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e048:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e04c:	d903      	bls.n	e056 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e04e:	f640 5107 	movw	r1, #3335	; 0xd07
    e052:	428a      	cmp	r2, r1
    e054:	d90b      	bls.n	e06e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    e056:	1f91      	subs	r1, r2, #6
    e058:	f640 467a 	movw	r6, #3194	; 0xc7a
    e05c:	42b1      	cmp	r1, r6
    e05e:	d812      	bhi.n	e086 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e060:	b18b      	cbz	r3, e086 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e062:	2b08      	cmp	r3, #8
    e064:	d80f      	bhi.n	e086 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e066:	4293      	cmp	r3, r2
    e068:	d20d      	bcs.n	e086 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e06a:	4295      	cmp	r5, r2
    e06c:	d80b      	bhi.n	e086 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e06e:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e072:	d208      	bcs.n	e086 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e074:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e078:	f640 4176 	movw	r1, #3190	; 0xc76
    e07c:	380a      	subs	r0, #10
    e07e:	4288      	cmp	r0, r1
    e080:	d801      	bhi.n	e086 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e082:	2001      	movs	r0, #1
    e084:	bd70      	pop	{r4, r5, r6, pc}
    e086:	2000      	movs	r0, #0
    e088:	bd70      	pop	{r4, r5, r6, pc}

0000e08a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e08a:	6841      	ldr	r1, [r0, #4]
    e08c:	2200      	movs	r2, #0
    e08e:	f891 321a 	ldrb.w	r3, [r1, #538]	; 0x21a
    e092:	2b00      	cmp	r3, #0
    e094:	d004      	beq.n	e0a0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e096:	f881 221a 	strb.w	r2, [r1, #538]	; 0x21a
    e09a:	6840      	ldr	r0, [r0, #4]
    e09c:	f000 bd53 	b.w	eb46 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e0a0:	4770      	bx	lr

0000e0a2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e0a2:	b510      	push	{r4, lr}
    e0a4:	7901      	ldrb	r1, [r0, #4]
    e0a6:	b119      	cbz	r1, e0b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e0a8:	2901      	cmp	r1, #1
    e0aa:	d006      	beq.n	e0ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e0ac:	2000      	movs	r0, #0
    e0ae:	bd10      	pop	{r4, pc}
    e0b0:	8842      	ldrh	r2, [r0, #2]
    e0b2:	6883      	ldr	r3, [r0, #8]
    e0b4:	8800      	ldrh	r0, [r0, #0]
    e0b6:	2102      	movs	r1, #2
    e0b8:	e003      	b.n	e0c2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e0ba:	8842      	ldrh	r2, [r0, #2]
    e0bc:	6883      	ldr	r3, [r0, #8]
    e0be:	8800      	ldrh	r0, [r0, #0]
    e0c0:	2101      	movs	r1, #1
    e0c2:	f7f8 fc0f 	bl	68e4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e0c6:	b908      	cbnz	r0, e0cc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e0c8:	f7f8 fc58 	bl	697c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e0cc:	2001      	movs	r0, #1
    e0ce:	bd10      	pop	{r4, pc}

0000e0d0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e0d0:	f7f8 be9e 	b.w	6e10 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c0>
    e0d4:	b570      	push	{r4, r5, r6, lr}
    e0d6:	b180      	cbz	r0, e0fa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2a>
    e0d8:	4604      	mov	r4, r0
    e0da:	2300      	movs	r3, #0
    e0dc:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    e0e0:	2a12      	cmp	r2, #18
    e0e2:	d047      	beq.n	e174 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xa4>
    e0e4:	dc0c      	bgt.n	e100 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x30>
    e0e6:	f1a2 0207 	sub.w	r2, r2, #7
    e0ea:	2a08      	cmp	r2, #8
    e0ec:	d210      	bcs.n	e110 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    e0ee:	e8df f002 	tbb	[pc, r2]
    e0f2:	1435      	.short	0x1435
    e0f4:	212a0f0f 	.word	0x212a0f0f
    e0f8:	3b0f      	.short	0x3b0f
    e0fa:	f240 11d1 	movw	r1, #465	; 0x1d1
    e0fe:	e009      	b.n	e114 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    e100:	2a13      	cmp	r2, #19
    e102:	d058      	beq.n	e1b6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe6>
    e104:	2a1c      	cmp	r2, #28
    e106:	d04f      	beq.n	e1a8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xd8>
    e108:	2a1e      	cmp	r2, #30
    e10a:	d03e      	beq.n	e18a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xba>
    e10c:	2a1f      	cmp	r2, #31
    e10e:	d047      	beq.n	e1a0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xd0>
    e110:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    e114:	2010      	movs	r0, #16
    e116:	f7f6 fcc9 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e11a:	704b      	strb	r3, [r1, #1]
    e11c:	2207      	movs	r2, #7
    e11e:	700a      	strb	r2, [r1, #0]
    e120:	84e3      	strh	r3, [r4, #38]	; 0x26
    e122:	f850 2f80 	ldr.w	r2, [r0, #128]!
    e126:	604a      	str	r2, [r1, #4]
    e128:	6842      	ldr	r2, [r0, #4]
    e12a:	608a      	str	r2, [r1, #8]
    e12c:	8900      	ldrh	r0, [r0, #8]
    e12e:	8188      	strh	r0, [r1, #12]
    e130:	710b      	strb	r3, [r1, #4]
    e132:	bd70      	pop	{r4, r5, r6, pc}
    e134:	704b      	strb	r3, [r1, #1]
    e136:	220c      	movs	r2, #12
    e138:	700a      	strb	r2, [r1, #0]
    e13a:	f890 00c2 	ldrb.w	r0, [r0, #194]	; 0xc2
    e13e:	7108      	strb	r0, [r1, #4]
    e140:	8820      	ldrh	r0, [r4, #0]
    e142:	80c8      	strh	r0, [r1, #6]
    e144:	bd70      	pop	{r4, r5, r6, pc}
    e146:	704b      	strb	r3, [r1, #1]
    e148:	220b      	movs	r2, #11
    e14a:	700a      	strb	r2, [r1, #0]
    e14c:	f810 2fc2 	ldrb.w	r2, [r0, #194]!
    e150:	710a      	strb	r2, [r1, #4]
    e152:	8822      	ldrh	r2, [r4, #0]
    e154:	80ca      	strh	r2, [r1, #6]
    e156:	7900      	ldrb	r0, [r0, #4]
    e158:	7208      	strb	r0, [r1, #8]
    e15a:	bd70      	pop	{r4, r5, r6, pc}
    e15c:	704b      	strb	r3, [r1, #1]
    e15e:	2206      	movs	r2, #6
    e160:	700a      	strb	r2, [r1, #0]
    e162:	f850 2f6a 	ldr.w	r2, [r0, #106]!
    e166:	e00a      	b.n	e17e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xae>
    e168:	704b      	strb	r3, [r1, #1]
    e16a:	200e      	movs	r0, #14
    e16c:	7008      	strb	r0, [r1, #0]
    e16e:	8820      	ldrh	r0, [r4, #0]
    e170:	8088      	strh	r0, [r1, #4]
    e172:	bd70      	pop	{r4, r5, r6, pc}
    e174:	704b      	strb	r3, [r1, #1]
    e176:	2212      	movs	r2, #18
    e178:	700a      	strb	r2, [r1, #0]
    e17a:	f850 2f22 	ldr.w	r2, [r0, #34]!
    e17e:	604a      	str	r2, [r1, #4]
    e180:	6842      	ldr	r2, [r0, #4]
    e182:	608a      	str	r2, [r1, #8]
    e184:	6880      	ldr	r0, [r0, #8]
    e186:	60c8      	str	r0, [r1, #12]
    e188:	bd70      	pop	{r4, r5, r6, pc}
    e18a:	704b      	strb	r3, [r1, #1]
    e18c:	221a      	movs	r2, #26
    e18e:	700a      	strb	r2, [r1, #0]
    e190:	6b82      	ldr	r2, [r0, #56]	; 0x38
    e192:	604a      	str	r2, [r1, #4]
    e194:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    e196:	608a      	str	r2, [r1, #8]
    e198:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e19c:	8188      	strh	r0, [r1, #12]
    e19e:	bd70      	pop	{r4, r5, r6, pc}
    e1a0:	221b      	movs	r2, #27
    e1a2:	700a      	strb	r2, [r1, #0]
    e1a4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    e1a6:	e004      	b.n	e1b2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0xe2>
    e1a8:	704b      	strb	r3, [r1, #1]
    e1aa:	2218      	movs	r2, #24
    e1ac:	700a      	strb	r2, [r1, #0]
    e1ae:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e1b2:	6048      	str	r0, [r1, #4]
    e1b4:	bd70      	pop	{r4, r5, r6, pc}
    e1b6:	704b      	strb	r3, [r1, #1]
    e1b8:	2213      	movs	r2, #19
    e1ba:	700a      	strb	r2, [r1, #0]
    e1bc:	f850 2f5a 	ldr.w	r2, [r0, #90]!
    e1c0:	604a      	str	r2, [r1, #4]
    e1c2:	8880      	ldrh	r0, [r0, #4]
    e1c4:	8108      	strh	r0, [r1, #8]
    e1c6:	bd70      	pop	{r4, r5, r6, pc}
    e1c8:	2000      	movs	r0, #0
    e1ca:	7048      	strb	r0, [r1, #1]
    e1cc:	2003      	movs	r0, #3
    e1ce:	7008      	strb	r0, [r1, #0]
    e1d0:	2001      	movs	r0, #1
    e1d2:	7108      	strb	r0, [r1, #4]
    e1d4:	4770      	bx	lr

0000e1d6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e1d6:	b4f0      	push	{r4, r5, r6, r7}
    e1d8:	8150      	strh	r0, [r2, #10]
    e1da:	890d      	ldrh	r5, [r1, #8]
    e1dc:	4614      	mov	r4, r2
    e1de:	8195      	strh	r5, [r2, #12]
    e1e0:	898a      	ldrh	r2, [r1, #12]
    e1e2:	81e2      	strh	r2, [r4, #14]
    e1e4:	8948      	ldrh	r0, [r1, #10]
    e1e6:	8220      	strh	r0, [r4, #16]
    e1e8:	89ce      	ldrh	r6, [r1, #14]
    e1ea:	8266      	strh	r6, [r4, #18]
    e1ec:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
    e1ee:	42b7      	cmp	r7, r6
    e1f0:	d108      	bne.n	e204 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e1f2:	8d4e      	ldrh	r6, [r1, #42]	; 0x2a
    e1f4:	4286      	cmp	r6, r0
    e1f6:	d105      	bne.n	e204 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e1f8:	8e0e      	ldrh	r6, [r1, #48]	; 0x30
    e1fa:	4296      	cmp	r6, r2
    e1fc:	d102      	bne.n	e204 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    e1fe:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    e200:	42aa      	cmp	r2, r5
    e202:	d001      	beq.n	e208 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e204:	2201      	movs	r2, #1
    e206:	e000      	b.n	e20a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    e208:	2200      	movs	r2, #0
    e20a:	7522      	strb	r2, [r4, #20]
    e20c:	8548      	strh	r0, [r1, #42]	; 0x2a
    e20e:	8a60      	ldrh	r0, [r4, #18]
    e210:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e212:	89a0      	ldrh	r0, [r4, #12]
    e214:	8588      	strh	r0, [r1, #44]	; 0x2c
    e216:	89e0      	ldrh	r0, [r4, #14]
    e218:	8608      	strh	r0, [r1, #48]	; 0x30
    e21a:	4620      	mov	r0, r4
    e21c:	bcf0      	pop	{r4, r5, r6, r7}
    e21e:	2212      	movs	r2, #18
    e220:	4619      	mov	r1, r3
    e222:	f7f8 bbb5 	b.w	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>

0000e226 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e226:	b510      	push	{r4, lr}
    e228:	888c      	ldrh	r4, [r1, #4]
    e22a:	890a      	ldrh	r2, [r1, #8]
    e22c:	884b      	ldrh	r3, [r1, #2]
    e22e:	88c9      	ldrh	r1, [r1, #6]
    e230:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e234:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e238:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e23c:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e240:	bd10      	pop	{r4, pc}

0000e242 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e242:	b570      	push	{r4, r5, r6, lr}
    e244:	4615      	mov	r5, r2
    e246:	460c      	mov	r4, r1
    e248:	f000 f8cc 	bl	e3e4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    e24c:	3096      	adds	r0, #150	; 0x96
    e24e:	4428      	add	r0, r5
    e250:	42a0      	cmp	r0, r4
    e252:	d801      	bhi.n	e258 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e254:	1a20      	subs	r0, r4, r0
    e256:	bd70      	pop	{r4, r5, r6, pc}
    e258:	2000      	movs	r0, #0
    e25a:	bd70      	pop	{r4, r5, r6, pc}

0000e25c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e260:	4604      	mov	r4, r0
    e262:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e264:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e266:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e26a:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e26e:	4285      	cmp	r5, r0
    e270:	d300      	bcc.n	e274 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e272:	4605      	mov	r5, r0
    e274:	4620      	mov	r0, r4
    e276:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e27a:	f000 f8a3 	bl	e3c4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    e27e:	4601      	mov	r1, r0
    e280:	86e5      	strh	r5, [r4, #54]	; 0x36
    e282:	8761      	strh	r1, [r4, #58]	; 0x3a
    e284:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e286:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e28a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e28c:	4680      	mov	r8, r0
    e28e:	42aa      	cmp	r2, r5
    e290:	d200      	bcs.n	e294 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e292:	462a      	mov	r2, r5
    e294:	428b      	cmp	r3, r1
    e296:	d200      	bcs.n	e29a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e298:	460b      	mov	r3, r1
    e29a:	8202      	strh	r2, [r0, #16]
    e29c:	f8a8 3012 	strh.w	r3, [r8, #18]
    e2a0:	42bd      	cmp	r5, r7
    e2a2:	d101      	bne.n	e2a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e2a4:	42b1      	cmp	r1, r6
    e2a6:	d001      	beq.n	e2ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e2a8:	2001      	movs	r0, #1
    e2aa:	e000      	b.n	e2ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e2ac:	2000      	movs	r0, #0
    e2ae:	4681      	mov	r9, r0
    e2b0:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e2b4:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e2b8:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e2ba:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e2bc:	4285      	cmp	r5, r0
    e2be:	d300      	bcc.n	e2c2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e2c0:	4605      	mov	r5, r0
    e2c2:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e2c6:	4620      	mov	r0, r4
    e2c8:	f000 f884 	bl	e3d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    e2cc:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e2d0:	2902      	cmp	r1, #2
    e2d2:	d108      	bne.n	e2e6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e2d4:	42af      	cmp	r7, r5
    e2d6:	d200      	bcs.n	e2da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e2d8:	463d      	mov	r5, r7
    e2da:	4286      	cmp	r6, r0
    e2dc:	d200      	bcs.n	e2e0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e2de:	4630      	mov	r0, r6
    e2e0:	2100      	movs	r1, #0
    e2e2:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e2e6:	f8a8 5008 	strh.w	r5, [r8, #8]
    e2ea:	f8a8 000c 	strh.w	r0, [r8, #12]
    e2ee:	42bd      	cmp	r5, r7
    e2f0:	d101      	bne.n	e2f6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e2f2:	42b0      	cmp	r0, r6
    e2f4:	d001      	beq.n	e2fa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e2f6:	2001      	movs	r0, #1
    e2f8:	e000      	b.n	e2fc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e2fa:	2000      	movs	r0, #0
    e2fc:	ea40 0009 	orr.w	r0, r0, r9
    e300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e304 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e304:	6840      	ldr	r0, [r0, #4]
    e306:	4770      	bx	lr

0000e308 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e30c:	4616      	mov	r6, r2
    e30e:	460f      	mov	r7, r1
    e310:	4604      	mov	r4, r0
    e312:	f000 f867 	bl	e3e4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    e316:	4605      	mov	r5, r0
    e318:	463a      	mov	r2, r7
    e31a:	6921      	ldr	r1, [r4, #16]
    e31c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e31e:	f000 f84c 	bl	e3ba <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e322:	19a9      	adds	r1, r5, r6
    e324:	4281      	cmp	r1, r0
    e326:	d300      	bcc.n	e32a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e328:	4608      	mov	r0, r1
    e32a:	6320      	str	r0, [r4, #48]	; 0x30
    e32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e330 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e330:	221b      	movs	r2, #27
    e332:	8402      	strh	r2, [r0, #32]
    e334:	8382      	strh	r2, [r0, #28]
    e336:	82c2      	strh	r2, [r0, #22]
    e338:	8282      	strh	r2, [r0, #20]
    e33a:	8142      	strh	r2, [r0, #10]
    e33c:	8202      	strh	r2, [r0, #16]
    e33e:	8102      	strh	r2, [r0, #8]
    e340:	8542      	strh	r2, [r0, #42]	; 0x2a
    e342:	8582      	strh	r2, [r0, #44]	; 0x2c
    e344:	8482      	strh	r2, [r0, #36]	; 0x24
    e346:	2900      	cmp	r1, #0
    e348:	d10a      	bne.n	e360 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e34a:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e34e:	8441      	strh	r1, [r0, #34]	; 0x22
    e350:	83c1      	strh	r1, [r0, #30]
    e352:	8341      	strh	r1, [r0, #26]
    e354:	8301      	strh	r1, [r0, #24]
    e356:	81c1      	strh	r1, [r0, #14]
    e358:	8241      	strh	r1, [r0, #18]
    e35a:	8181      	strh	r1, [r0, #12]
    e35c:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e35e:	8601      	strh	r1, [r0, #48]	; 0x30
    e360:	4770      	bx	lr

0000e362 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e362:	6800      	ldr	r0, [r0, #0]
    e364:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e368:	4290      	cmp	r0, r2
    e36a:	d903      	bls.n	e374 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e36c:	1a40      	subs	r0, r0, r1
    e36e:	389c      	subs	r0, #156	; 0x9c
    e370:	0840      	lsrs	r0, r0, #1
    e372:	4770      	bx	lr
    e374:	2000      	movs	r0, #0
    e376:	4770      	bx	lr

0000e378 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e378:	b510      	push	{r4, lr}
    e37a:	9c02      	ldr	r4, [sp, #8]
    e37c:	8281      	strh	r1, [r0, #20]
    e37e:	82c2      	strh	r2, [r0, #22]
    e380:	8303      	strh	r3, [r0, #24]
    e382:	8344      	strh	r4, [r0, #26]
    e384:	bd10      	pop	{r4, pc}

0000e386 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e386:	b430      	push	{r4, r5}
    e388:	8150      	strh	r0, [r2, #10]
    e38a:	8a88      	ldrh	r0, [r1, #20]
    e38c:	8190      	strh	r0, [r2, #12]
    e38e:	8ac8      	ldrh	r0, [r1, #22]
    e390:	81d0      	strh	r0, [r2, #14]
    e392:	8b08      	ldrh	r0, [r1, #24]
    e394:	8210      	strh	r0, [r2, #16]
    e396:	8b48      	ldrh	r0, [r1, #26]
    e398:	4614      	mov	r4, r2
    e39a:	8250      	strh	r0, [r2, #18]
    e39c:	4620      	mov	r0, r4
    e39e:	bc30      	pop	{r4, r5}
    e3a0:	221e      	movs	r2, #30
    e3a2:	4619      	mov	r1, r3
    e3a4:	f7f8 baf4 	b.w	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e3a8:	2902      	cmp	r1, #2
    e3aa:	d003      	beq.n	e3b4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2e>
    e3ac:	00c0      	lsls	r0, r0, #3
    e3ae:	3070      	adds	r0, #112	; 0x70
    e3b0:	b280      	uxth	r0, r0
    e3b2:	4770      	bx	lr
    e3b4:	0080      	lsls	r0, r0, #2
    e3b6:	303c      	adds	r0, #60	; 0x3c
    e3b8:	e7fa      	b.n	e3b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e3ba:	4288      	cmp	r0, r1
    e3bc:	d300      	bcc.n	e3c0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    e3be:	4608      	mov	r0, r1
    e3c0:	1a80      	subs	r0, r0, r2
    e3c2:	4770      	bx	lr
    e3c4:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e3c8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e3cc:	4281      	cmp	r1, r0
    e3ce:	d200      	bcs.n	e3d2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4c>
    e3d0:	4608      	mov	r0, r1
    e3d2:	4770      	bx	lr
    e3d4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e3d8:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e3dc:	4281      	cmp	r1, r0
    e3de:	d200      	bcs.n	e3e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>
    e3e0:	4608      	mov	r0, r1
    e3e2:	4770      	bx	lr
    e3e4:	2196      	movs	r1, #150	; 0x96
    e3e6:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e3ea:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e3ee:	f000 b800 	b.w	e3f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x6c>
    e3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3f6:	460d      	mov	r5, r1
    e3f8:	4606      	mov	r6, r0
    e3fa:	4698      	mov	r8, r3
    e3fc:	4617      	mov	r7, r2
    e3fe:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e400:	4611      	mov	r1, r2
    e402:	f7ff ffd1 	bl	e3a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    e406:	4604      	mov	r4, r0
    e408:	4639      	mov	r1, r7
    e40a:	4630      	mov	r0, r6
    e40c:	f7ff ffe2 	bl	e3d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    e410:	42a0      	cmp	r0, r4
    e412:	d200      	bcs.n	e416 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x90>
    e414:	4604      	mov	r4, r0
    e416:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e418:	4641      	mov	r1, r8
    e41a:	f7ff ffc5 	bl	e3a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x22>
    e41e:	4607      	mov	r7, r0
    e420:	4641      	mov	r1, r8
    e422:	4630      	mov	r0, r6
    e424:	f7ff ffce 	bl	e3c4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3e>
    e428:	42b8      	cmp	r0, r7
    e42a:	d300      	bcc.n	e42e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    e42c:	4638      	mov	r0, r7
    e42e:	4420      	add	r0, r4
    e430:	4428      	add	r0, r5
    e432:	1d80      	adds	r0, r0, #6
    e434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e438:	b510      	push	{r4, lr}
    e43a:	4604      	mov	r4, r0
    e43c:	2108      	movs	r1, #8
    e43e:	4620      	mov	r0, r4
    e440:	f7f6 fbe2 	bl	4c08 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e444:	6820      	ldr	r0, [r4, #0]
    e446:	2800      	cmp	r0, #0
    e448:	d102      	bne.n	e450 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xca>
    e44a:	6860      	ldr	r0, [r4, #4]
    e44c:	2800      	cmp	r0, #0
    e44e:	d0f5      	beq.n	e43c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    e450:	bd10      	pop	{r4, pc}

0000e452 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e452:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e456:	2255      	movs	r2, #85	; 0x55
    e458:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e45c:	4408      	add	r0, r1
    e45e:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e462:	2233      	movs	r2, #51	; 0x33
    e464:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e468:	4408      	add	r0, r1
    e46a:	f000 010f 	and.w	r1, r0, #15
    e46e:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e472:	4770      	bx	lr

0000e474 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e474:	b510      	push	{r4, lr}
    e476:	6844      	ldr	r4, [r0, #4]
    e478:	7803      	ldrb	r3, [r0, #0]
    e47a:	2100      	movs	r1, #0
    e47c:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
    e480:	3480      	adds	r4, #128	; 0x80
    e482:	4620      	mov	r0, r4
    e484:	f7ff fa92 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e488:	b110      	cbz	r0, e490 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e48a:	2004      	movs	r0, #4
    e48c:	7560      	strb	r0, [r4, #21]
    e48e:	bd10      	pop	{r4, pc}
    e490:	2188      	movs	r1, #136	; 0x88
    e492:	201c      	movs	r0, #28
    e494:	f7f6 fb0a 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e498 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e498:	b510      	push	{r4, lr}
    e49a:	6841      	ldr	r1, [r0, #4]
    e49c:	f891 2084 	ldrb.w	r2, [r1, #132]	; 0x84
    e4a0:	07d2      	lsls	r2, r2, #31
    e4a2:	d00b      	beq.n	e4bc <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e4a4:	f811 2fd2 	ldrb.w	r2, [r1, #210]!
    e4a8:	1e52      	subs	r2, r2, #1
    e4aa:	b252      	sxtb	r2, r2
    e4ac:	700a      	strb	r2, [r1, #0]
    e4ae:	6840      	ldr	r0, [r0, #4]
    e4b0:	2a00      	cmp	r2, #0
    e4b2:	da05      	bge.n	e4c0 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e4b4:	2197      	movs	r1, #151	; 0x97
    e4b6:	201c      	movs	r0, #28
    e4b8:	f7f6 faf8 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4bc:	2195      	movs	r1, #149	; 0x95
    e4be:	e7fa      	b.n	e4b6 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e4c0:	f850 1f84 	ldr.w	r1, [r0, #132]!
    e4c4:	f021 0101 	bic.w	r1, r1, #1
    e4c8:	6001      	str	r1, [r0, #0]
    e4ca:	bd10      	pop	{r4, pc}

0000e4cc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    e4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4ce:	6841      	ldr	r1, [r0, #4]
    e4d0:	4606      	mov	r6, r0
    e4d2:	460c      	mov	r4, r1
    e4d4:	3180      	adds	r1, #128	; 0x80
    e4d6:	460d      	mov	r5, r1
    e4d8:	4620      	mov	r0, r4
    e4da:	f000 f820 	bl	e51e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x52>
    e4de:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    e4e2:	2901      	cmp	r1, #1
    e4e4:	d11a      	bne.n	e51c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e4e6:	2800      	cmp	r0, #0
    e4e8:	d018      	beq.n	e51c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e4ea:	6870      	ldr	r0, [r6, #4]
    e4ec:	4601      	mov	r1, r0
    e4ee:	f890 214c 	ldrb.w	r2, [r0, #332]	; 0x14c
    e4f2:	f88d 2000 	strb.w	r2, [sp]
    e4f6:	9a00      	ldr	r2, [sp, #0]
    e4f8:	9200      	str	r2, [sp, #0]
    e4fa:	f89d 2000 	ldrb.w	r2, [sp]
    e4fe:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    e502:	2a00      	cmp	r2, #0
    e504:	d10a      	bne.n	e51c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>
    e506:	8822      	ldrh	r2, [r4, #0]
    e508:	8142      	strh	r2, [r0, #10]
    e50a:	7c6a      	ldrb	r2, [r5, #17]
    e50c:	7302      	strb	r2, [r0, #12]
    e50e:	7caa      	ldrb	r2, [r5, #18]
    e510:	7342      	strb	r2, [r0, #13]
    e512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e516:	221c      	movs	r2, #28
    e518:	f7f8 ba3a 	b.w	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e51e:	b538      	push	{r3, r4, r5, lr}
    e520:	4605      	mov	r5, r0
    e522:	460c      	mov	r4, r1
    e524:	4668      	mov	r0, sp
    e526:	f7fd f8b3 	bl	b690 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e52a:	b338      	cbz	r0, e57c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xb0>
    e52c:	f99d 1000 	ldrsb.w	r1, [sp]
    e530:	7461      	strb	r1, [r4, #17]
    e532:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    e536:	74a0      	strb	r0, [r4, #18]
    e538:	6820      	ldr	r0, [r4, #0]
    e53a:	f7f8 fd63 	bl	7004 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    e53e:	6020      	str	r0, [r4, #0]
    e540:	f99d 2000 	ldrsb.w	r2, [sp]
    e544:	f994 1013 	ldrsb.w	r1, [r4, #19]
    e548:	2000      	movs	r0, #0
    e54a:	1a51      	subs	r1, r2, r1
    e54c:	d500      	bpl.n	e550 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x84>
    e54e:	4249      	negs	r1, r1
    e550:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    e554:	428b      	cmp	r3, r1
    e556:	dc10      	bgt.n	e57a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e558:	2bff      	cmp	r3, #255	; 0xff
    e55a:	d00e      	beq.n	e57a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e55c:	7d21      	ldrb	r1, [r4, #20]
    e55e:	1c49      	adds	r1, r1, #1
    e560:	b2c9      	uxtb	r1, r1
    e562:	7521      	strb	r1, [r4, #20]
    e564:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    e568:	4299      	cmp	r1, r3
    e56a:	d802      	bhi.n	e572 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xa6>
    e56c:	7ce1      	ldrb	r1, [r4, #19]
    e56e:	297f      	cmp	r1, #127	; 0x7f
    e570:	d103      	bne.n	e57a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xae>
    e572:	74e2      	strb	r2, [r4, #19]
    e574:	2000      	movs	r0, #0
    e576:	7520      	strb	r0, [r4, #20]
    e578:	2001      	movs	r0, #1
    e57a:	bd38      	pop	{r3, r4, r5, pc}
    e57c:	207f      	movs	r0, #127	; 0x7f
    e57e:	7460      	strb	r0, [r4, #17]
    e580:	2000      	movs	r0, #0
    e582:	bd38      	pop	{r3, r4, r5, pc}
    e584:	2801      	cmp	r0, #1
    e586:	d102      	bne.n	e58e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xc2>
    e588:	7948      	ldrb	r0, [r1, #5]
    e58a:	0980      	lsrs	r0, r0, #6
    e58c:	d001      	beq.n	e592 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xc6>
    e58e:	2000      	movs	r0, #0
    e590:	4770      	bx	lr
    e592:	2001      	movs	r0, #1
    e594:	4770      	bx	lr
    e596:	2801      	cmp	r0, #1
    e598:	d106      	bne.n	e5a8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xdc>
    e59a:	7948      	ldrb	r0, [r1, #5]
    e59c:	2101      	movs	r1, #1
    e59e:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e5a2:	d101      	bne.n	e5a8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xdc>
    e5a4:	2001      	movs	r0, #1
    e5a6:	4770      	bx	lr
    e5a8:	2000      	movs	r0, #0
    e5aa:	4770      	bx	lr
    e5ac:	2802      	cmp	r0, #2
    e5ae:	d003      	beq.n	e5b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xec>
    e5b0:	2803      	cmp	r0, #3
    e5b2:	d001      	beq.n	e5b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xec>
    e5b4:	2000      	movs	r0, #0
    e5b6:	4770      	bx	lr
    e5b8:	2001      	movs	r0, #1
    e5ba:	4770      	bx	lr

0000e5bc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e5bc:	b510      	push	{r4, lr}
    e5be:	4604      	mov	r4, r0
    e5c0:	7c00      	ldrb	r0, [r0, #16]
    e5c2:	f7ff fff3 	bl	e5ac <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xe0>
    e5c6:	b148      	cbz	r0, e5dc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e5c8:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    e5cc:	f104 0158 	add.w	r1, r4, #88	; 0x58
    e5d0:	f7ff f98e 	bl	d8f0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e5d4:	2808      	cmp	r0, #8
    e5d6:	d001      	beq.n	e5dc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e5d8:	2001      	movs	r0, #1
    e5da:	bd10      	pop	{r4, pc}
    e5dc:	7c20      	ldrb	r0, [r4, #16]
    e5de:	b118      	cbz	r0, e5e8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e5e0:	2802      	cmp	r0, #2
    e5e2:	d001      	beq.n	e5e8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e5e4:	7de0      	ldrb	r0, [r4, #23]
    e5e6:	bd10      	pop	{r4, pc}
    e5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e5ec:	2000      	movs	r0, #0
    e5ee:	f7f7 b925 	b.w	583c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e5f2 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e5f2:	b508      	push	{r3, lr}
    e5f4:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e5f8:	f88d 1000 	strb.w	r1, [sp]
    e5fc:	9900      	ldr	r1, [sp, #0]
    e5fe:	9100      	str	r1, [sp, #0]
    e600:	f89d 1000 	ldrb.w	r1, [sp]
    e604:	b109      	cbz	r1, e60a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    e606:	2001      	movs	r0, #1
    e608:	bd08      	pop	{r3, pc}
    e60a:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    e60e:	f88d 0000 	strb.w	r0, [sp]
    e612:	9800      	ldr	r0, [sp, #0]
    e614:	9000      	str	r0, [sp, #0]
    e616:	f89d 0000 	ldrb.w	r0, [sp]
    e61a:	2000      	movs	r0, #0
    e61c:	bd08      	pop	{r3, pc}

0000e61e <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e61e:	20ff      	movs	r0, #255	; 0xff
    e620:	7008      	strb	r0, [r1, #0]
    e622:	6b48      	ldr	r0, [r1, #52]	; 0x34
    e624:	f7ff b869 	b.w	d6fa <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e628 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e628:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e62a:	460d      	mov	r5, r1
    e62c:	4604      	mov	r4, r0
    e62e:	f44f 728c 	mov.w	r2, #280	; 0x118
    e632:	2100      	movs	r1, #0
    e634:	f7fe f809 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e638:	20ff      	movs	r0, #255	; 0xff
    e63a:	7020      	strb	r0, [r4, #0]
    e63c:	207f      	movs	r0, #127	; 0x7f
    e63e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e642:	2013      	movs	r0, #19
    e644:	8060      	strh	r0, [r4, #2]
    e646:	f242 7010 	movw	r0, #10000	; 0x2710
    e64a:	8460      	strh	r0, [r4, #34]	; 0x22
    e64c:	f7f6 fee4 	bl	5418 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e650:	4601      	mov	r1, r0
    e652:	6360      	str	r0, [r4, #52]	; 0x34
    e654:	2200      	movs	r2, #0
    e656:	4668      	mov	r0, sp
    e658:	f7fe ffb9 	bl	d5ce <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e65c:	2200      	movs	r2, #0
    e65e:	2101      	movs	r1, #1
    e660:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e662:	f7ff f82a 	bl	d6ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e666:	2204      	movs	r2, #4
    e668:	4668      	mov	r0, sp
    e66a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e66c:	f7fe ffaf 	bl	d5ce <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e670:	2200      	movs	r2, #0
    e672:	4611      	mov	r1, r2
    e674:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e676:	f7ff f820 	bl	d6ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e67a:	73a5      	strb	r5, [r4, #14]
    e67c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e680:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e684:	f000 b9b9 	b.w	e9fa <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e688 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e688:	7880      	ldrb	r0, [r0, #2]
    e68a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e68e:	b108      	cbz	r0, e694 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e690:	2000      	movs	r0, #0
    e692:	4770      	bx	lr
    e694:	201f      	movs	r0, #31
    e696:	4770      	bx	lr

0000e698 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e698:	f7f9 b992 	b.w	79c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>

0000e69c <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI>:
    e69c:	b510      	push	{r4, lr}
    e69e:	2300      	movs	r3, #0
    e6a0:	2a05      	cmp	r2, #5
    e6a2:	d013      	beq.n	e6cc <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x30>
    e6a4:	2a10      	cmp	r2, #16
    e6a6:	d018      	beq.n	e6da <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3e>
    e6a8:	2a14      	cmp	r2, #20
    e6aa:	d038      	beq.n	e71e <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x82>
    e6ac:	2a1d      	cmp	r2, #29
    e6ae:	d002      	beq.n	e6b6 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x1a>
    e6b0:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    e6b4:	e056      	b.n	e764 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    e6b6:	704b      	strb	r3, [r1, #1]
    e6b8:	2219      	movs	r2, #25
    e6ba:	700a      	strb	r2, [r1, #0]
    e6bc:	f850 2fbd 	ldr.w	r2, [r0, #189]!
    e6c0:	604a      	str	r2, [r1, #4]
    e6c2:	6842      	ldr	r2, [r0, #4]
    e6c4:	608a      	str	r2, [r1, #8]
    e6c6:	7a00      	ldrb	r0, [r0, #8]
    e6c8:	7308      	strb	r0, [r1, #12]
    e6ca:	bd10      	pop	{r4, pc}
    e6cc:	704b      	strb	r3, [r1, #1]
    e6ce:	2205      	movs	r2, #5
    e6d0:	700a      	strb	r2, [r1, #0]
    e6d2:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
    e6d6:	6048      	str	r0, [r1, #4]
    e6d8:	bd10      	pop	{r4, pc}
    e6da:	460c      	mov	r4, r1
    e6dc:	704b      	strb	r3, [r1, #1]
    e6de:	2111      	movs	r1, #17
    e6e0:	7021      	strb	r1, [r4, #0]
    e6e2:	f100 0176 	add.w	r1, r0, #118	; 0x76
    e6e6:	2220      	movs	r2, #32
    e6e8:	1d20      	adds	r0, r4, #4
    e6ea:	f7fd ff34 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e6ee:	2001      	movs	r0, #1
    e6f0:	7220      	strb	r0, [r4, #8]
    e6f2:	7920      	ldrb	r0, [r4, #4]
    e6f4:	2800      	cmp	r0, #0
    e6f6:	d0ef      	beq.n	e6d8 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e6f8:	88e4      	ldrh	r4, [r4, #6]
    e6fa:	2100      	movs	r1, #0
    e6fc:	4620      	mov	r0, r4
    e6fe:	f7fe feb4 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e702:	2800      	cmp	r0, #0
    e704:	d0e8      	beq.n	e6d8 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e706:	8800      	ldrh	r0, [r0, #0]
    e708:	f7ff f856 	bl	d7b8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e70c:	2100      	movs	r1, #0
    e70e:	4620      	mov	r0, r4
    e710:	f7f6 fc4e 	bl	4fb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e714:	2800      	cmp	r0, #0
    e716:	d0df      	beq.n	e6d8 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e718:	f240 216a 	movw	r1, #618	; 0x26a
    e71c:	e022      	b.n	e764 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0xc8>
    e71e:	704b      	strb	r3, [r1, #1]
    e720:	2214      	movs	r2, #20
    e722:	700a      	strb	r2, [r1, #0]
    e724:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    e728:	604a      	str	r2, [r1, #4]
    e72a:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    e72e:	810a      	strh	r2, [r1, #8]
    e730:	790a      	ldrb	r2, [r1, #4]
    e732:	2a00      	cmp	r2, #0
    e734:	d0d0      	beq.n	e6d8 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e736:	7880      	ldrb	r0, [r0, #2]
    e738:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e73c:	2800      	cmp	r0, #0
    e73e:	d1cb      	bne.n	e6d8 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e740:	88cc      	ldrh	r4, [r1, #6]
    e742:	2100      	movs	r1, #0
    e744:	4620      	mov	r0, r4
    e746:	f7fe fe90 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e74a:	2800      	cmp	r0, #0
    e74c:	d0c4      	beq.n	e6d8 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e74e:	8800      	ldrh	r0, [r0, #0]
    e750:	f7ff f832 	bl	d7b8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e754:	2100      	movs	r1, #0
    e756:	4620      	mov	r0, r4
    e758:	f7f6 fc2a 	bl	4fb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e75c:	2800      	cmp	r0, #0
    e75e:	d0bb      	beq.n	e6d8 <sym_73OZ6PE62EKDTT5E6DG3KMBVHOCSVKUK4QPTCXI+0x3c>
    e760:	f240 219a 	movw	r1, #666	; 0x29a
    e764:	202d      	movs	r0, #45	; 0x2d
    e766:	f7f6 f9a1 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e76a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e76a:	6880      	ldr	r0, [r0, #8]
    e76c:	4770      	bx	lr

0000e76e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e76e:	2001      	movs	r0, #1
    e770:	4770      	bx	lr

0000e772 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e772:	b510      	push	{r4, lr}
    e774:	4604      	mov	r4, r0
    e776:	3028      	adds	r0, #40	; 0x28
    e778:	f000 f8ff 	bl	e97a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e77c:	8861      	ldrh	r1, [r4, #2]
    e77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e782:	2228      	movs	r2, #40	; 0x28
    e784:	f7f9 baf4 	b.w	7d70 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e788 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e788:	2200      	movs	r2, #0
    e78a:	8602      	strh	r2, [r0, #48]	; 0x30
    e78c:	8843      	ldrh	r3, [r0, #2]
    e78e:	2b1d      	cmp	r3, #29
    e790:	d001      	beq.n	e796 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e792:	7341      	strb	r1, [r0, #13]
    e794:	4770      	bx	lr
    e796:	7342      	strb	r2, [r0, #13]
    e798:	4770      	bx	lr

0000e79a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e79a:	b510      	push	{r4, lr}
    e79c:	2400      	movs	r4, #0
    e79e:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e7a0:	f7fe ff79 	bl	d696 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    e7a4:	b100      	cbz	r0, e7a8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    e7a6:	2001      	movs	r0, #1
    e7a8:	4384      	bics	r4, r0
    e7aa:	f084 0001 	eor.w	r0, r4, #1
    e7ae:	bd10      	pop	{r4, pc}

0000e7b0 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e7b0:	2000      	movs	r0, #0
    e7b2:	4770      	bx	lr

0000e7b4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e7b4:	7880      	ldrb	r0, [r0, #2]
    e7b6:	f000 0001 	and.w	r0, r0, #1
    e7ba:	4770      	bx	lr

0000e7bc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e7bc:	7880      	ldrb	r0, [r0, #2]
    e7be:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e7c2:	4770      	bx	lr

0000e7c4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e7c4:	2001      	movs	r0, #1
    e7c6:	4770      	bx	lr

0000e7c8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e7c8:	7880      	ldrb	r0, [r0, #2]
    e7ca:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e7ce:	4770      	bx	lr

0000e7d0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e7d0:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e7d4:	4770      	bx	lr

0000e7d6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e7d6:	7800      	ldrb	r0, [r0, #0]
    e7d8:	28ff      	cmp	r0, #255	; 0xff
    e7da:	d001      	beq.n	e7e0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e7dc:	2001      	movs	r0, #1
    e7de:	4770      	bx	lr
    e7e0:	2000      	movs	r0, #0
    e7e2:	4770      	bx	lr

0000e7e4 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    e7e4:	f800 1f20 	strb.w	r1, [r0, #32]!
    e7e8:	7042      	strb	r2, [r0, #1]
    e7ea:	4770      	bx	lr

0000e7ec <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e7ec:	680a      	ldr	r2, [r1, #0]
    e7ee:	f840 2f11 	str.w	r2, [r0, #17]!
    e7f2:	8889      	ldrh	r1, [r1, #4]
    e7f4:	8081      	strh	r1, [r0, #4]
    e7f6:	2101      	movs	r1, #1
    e7f8:	7181      	strb	r1, [r0, #6]
    e7fa:	4770      	bx	lr

0000e7fc <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e7fc:	7b00      	ldrb	r0, [r0, #12]
    e7fe:	4770      	bx	lr

0000e800 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e800:	2001      	movs	r0, #1
    e802:	4770      	bx	lr

0000e804 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e804:	61c1      	str	r1, [r0, #28]
    e806:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e80a:	724a      	strb	r2, [r1, #9]
    e80c:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    e810:	f8c1 200a 	str.w	r2, [r1, #10]
    e814:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    e818:	81c8      	strh	r0, [r1, #14]
    e81a:	4770      	bx	lr

0000e81c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e81c:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    e820:	4770      	bx	lr

0000e822 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e822:	b510      	push	{r4, lr}
    e824:	4604      	mov	r4, r0
    e826:	7880      	ldrb	r0, [r0, #2]
    e828:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e82c:	b158      	cbz	r0, e846 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    e82e:	233c      	movs	r3, #60	; 0x3c
    e830:	22ff      	movs	r2, #255	; 0xff
    e832:	4620      	mov	r0, r4
    e834:	69e1      	ldr	r1, [r4, #28]
    e836:	f7f9 f8e9 	bl	7a0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    e83a:	2210      	movs	r2, #16
    e83c:	4621      	mov	r1, r4
    e83e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    e842:	f7f8 f8a5 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    e846:	2001      	movs	r0, #1
    e848:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    e84c:	bd10      	pop	{r4, pc}

0000e84e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e84e:	7bc0      	ldrb	r0, [r0, #15]
    e850:	2800      	cmp	r0, #0
    e852:	d000      	beq.n	e856 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e854:	2001      	movs	r0, #1
    e856:	4770      	bx	lr
    e858:	7802      	ldrb	r2, [r0, #0]
    e85a:	2320      	movs	r3, #32
    e85c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e860:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e864:	430a      	orrs	r2, r1
    e866:	7002      	strb	r2, [r0, #0]
    e868:	4770      	bx	lr
    e86a:	b510      	push	{r4, lr}
    e86c:	f7ff f840 	bl	d8f0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e870:	4604      	mov	r4, r0
    e872:	f7f7 fdd3 	bl	641c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e876:	b138      	cbz	r0, e888 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e878:	4620      	mov	r0, r4
    e87a:	f7f7 fd77 	bl	636c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e87e:	b118      	cbz	r0, e888 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    e880:	2110      	movs	r1, #16
    e882:	f7ff f9fb 	bl	dc7c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e886:	b108      	cbz	r0, e88c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    e888:	2000      	movs	r0, #0
    e88a:	bd10      	pop	{r4, pc}
    e88c:	2001      	movs	r0, #1
    e88e:	bd10      	pop	{r4, pc}
    e890:	2101      	movs	r1, #1
    e892:	f7f8 bd1d 	b.w	72d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e896:	2101      	movs	r1, #1
    e898:	f7f8 bd1a 	b.w	72d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8a0:	4604      	mov	r4, r0
    e8a2:	460f      	mov	r7, r1
    e8a4:	7e40      	ldrb	r0, [r0, #25]
    e8a6:	f7f7 fd47 	bl	6338 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e8aa:	4606      	mov	r6, r0
    e8ac:	7e20      	ldrb	r0, [r4, #24]
    e8ae:	f104 0551 	add.w	r5, r4, #81	; 0x51
    e8b2:	b120      	cbz	r0, e8be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    e8b4:	b11e      	cbz	r6, e8be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x70>
    e8b6:	7e60      	ldrb	r0, [r4, #25]
    e8b8:	f7f7 fd32 	bl	6320 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e8bc:	b1a0      	cbz	r0, e8e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x9a>
    e8be:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    e8c2:	2800      	cmp	r0, #0
    e8c4:	d024      	beq.n	e910 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e8c6:	7ea0      	ldrb	r0, [r4, #26]
    e8c8:	2800      	cmp	r0, #0
    e8ca:	d021      	beq.n	e910 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e8cc:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    e8d0:	4629      	mov	r1, r5
    e8d2:	f7ff fe60 	bl	e596 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xca>
    e8d6:	b1a8      	cbz	r0, e904 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb6>
    e8d8:	f7f7 fd1e 	bl	6318 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e8dc:	463a      	mov	r2, r7
    e8de:	4629      	mov	r1, r5
    e8e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e8e4:	f7fe bf9c 	b.w	d820 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e8e8:	2001      	movs	r0, #1
    e8ea:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    e8ee:	463a      	mov	r2, r7
    e8f0:	4629      	mov	r1, r5
    e8f2:	4630      	mov	r0, r6
    e8f4:	f7fe ff94 	bl	d820 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e8f8:	7e61      	ldrb	r1, [r4, #25]
    e8fa:	4628      	mov	r0, r5
    e8fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e900:	f7f7 bd26 	b.w	6350 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e904:	4639      	mov	r1, r7
    e906:	4628      	mov	r0, r5
    e908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e90c:	f7fe bf77 	b.w	d7fe <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e914:	b510      	push	{r4, lr}
    e916:	4604      	mov	r4, r0
    e918:	4608      	mov	r0, r1
    e91a:	f7fc feff 	bl	b71c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e91e:	7921      	ldrb	r1, [r4, #4]
    e920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e924:	2025      	movs	r0, #37	; 0x25
    e926:	f7fc becf 	b.w	b6c8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    e92a:	b510      	push	{r4, lr}
    e92c:	4604      	mov	r4, r0
    e92e:	302e      	adds	r0, #46	; 0x2e
    e930:	f7fc feae 	bl	b690 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e934:	2800      	cmp	r0, #0
    e936:	d102      	bne.n	e93e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf0>
    e938:	207f      	movs	r0, #127	; 0x7f
    e93a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e93e:	bd10      	pop	{r4, pc}
    e940:	b570      	push	{r4, r5, r6, lr}
    e942:	4614      	mov	r4, r2
    e944:	461d      	mov	r5, r3
    e946:	4606      	mov	r6, r0
    e948:	f7f4 fcca 	bl	32e0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e94c:	1900      	adds	r0, r0, r4
    e94e:	4169      	adcs	r1, r5
    e950:	e9c6 0100 	strd	r0, r1, [r6]
    e954:	bd70      	pop	{r4, r5, r6, pc}

0000e956 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e956:	b570      	push	{r4, r5, r6, lr}
    e958:	7001      	strb	r1, [r0, #0]
    e95a:	7042      	strb	r2, [r0, #1]
    e95c:	4614      	mov	r4, r2
    e95e:	460d      	mov	r5, r1
    e960:	7880      	ldrb	r0, [r0, #2]
    e962:	f000 f87f 	bl	ea64 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e966:	fb10 f005 	smulbb	r0, r0, r5
    e96a:	4360      	muls	r0, r4
    e96c:	28ff      	cmp	r0, #255	; 0xff
    e96e:	d303      	bcc.n	e978 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e970:	215c      	movs	r1, #92	; 0x5c
    e972:	202e      	movs	r0, #46	; 0x2e
    e974:	f7f6 f89a 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e978:	bd70      	pop	{r4, r5, r6, pc}

0000e97a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e97a:	b510      	push	{r4, lr}
    e97c:	4604      	mov	r4, r0
    e97e:	7880      	ldrb	r0, [r0, #2]
    e980:	f000 f870 	bl	ea64 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e984:	7861      	ldrb	r1, [r4, #1]
    e986:	7822      	ldrb	r2, [r4, #0]
    e988:	fb11 f102 	smulbb	r1, r1, r2
    e98c:	4348      	muls	r0, r1
    e98e:	b2c0      	uxtb	r0, r0
    e990:	bd10      	pop	{r4, pc}

0000e992 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e992:	b510      	push	{r4, lr}
    e994:	4604      	mov	r4, r0
    e996:	f000 f84d 	bl	ea34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e99a:	7961      	ldrb	r1, [r4, #5]
    e99c:	1c49      	adds	r1, r1, #1
    e99e:	b2c9      	uxtb	r1, r1
    e9a0:	7161      	strb	r1, [r4, #5]
    e9a2:	7862      	ldrb	r2, [r4, #1]
    e9a4:	4291      	cmp	r1, r2
    e9a6:	d10b      	bne.n	e9c0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e9a8:	2200      	movs	r2, #0
    e9aa:	7162      	strb	r2, [r4, #5]
    e9ac:	78e1      	ldrb	r1, [r4, #3]
    e9ae:	4301      	orrs	r1, r0
    e9b0:	70e1      	strb	r1, [r4, #3]
    e9b2:	78a3      	ldrb	r3, [r4, #2]
    e9b4:	4299      	cmp	r1, r3
    e9b6:	d103      	bne.n	e9c0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e9b8:	70e2      	strb	r2, [r4, #3]
    e9ba:	7921      	ldrb	r1, [r4, #4]
    e9bc:	1c49      	adds	r1, r1, #1
    e9be:	7121      	strb	r1, [r4, #4]
    e9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e9c4:	f000 b825 	b.w	ea12 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e9c8 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e9c8:	7081      	strb	r1, [r0, #2]
    e9ca:	4770      	bx	lr

0000e9cc <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e9cc:	b570      	push	{r4, r5, r6, lr}
    e9ce:	4604      	mov	r4, r0
    e9d0:	7880      	ldrb	r0, [r0, #2]
    e9d2:	f000 f847 	bl	ea64 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e9d6:	7861      	ldrb	r1, [r4, #1]
    e9d8:	fb11 f500 	smulbb	r5, r1, r0
    e9dc:	78e0      	ldrb	r0, [r4, #3]
    e9de:	f000 f841 	bl	ea64 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e9e2:	7861      	ldrb	r1, [r4, #1]
    e9e4:	7962      	ldrb	r2, [r4, #5]
    e9e6:	fb10 2001 	smlabb	r0, r0, r1, r2
    e9ea:	7821      	ldrb	r1, [r4, #0]
    e9ec:	7922      	ldrb	r2, [r4, #4]
    e9ee:	1a89      	subs	r1, r1, r2
    e9f0:	fb11 f105 	smulbb	r1, r1, r5
    e9f4:	1a08      	subs	r0, r1, r0
    e9f6:	b2c0      	uxtb	r0, r0
    e9f8:	bd70      	pop	{r4, r5, r6, pc}

0000e9fa <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e9fa:	2100      	movs	r1, #0
    e9fc:	6001      	str	r1, [r0, #0]
    e9fe:	8081      	strh	r1, [r0, #4]
    ea00:	2101      	movs	r1, #1
    ea02:	7041      	strb	r1, [r0, #1]
    ea04:	7001      	strb	r1, [r0, #0]
    ea06:	4770      	bx	lr

0000ea08 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    ea08:	2100      	movs	r1, #0
    ea0a:	70c1      	strb	r1, [r0, #3]
    ea0c:	7141      	strb	r1, [r0, #5]
    ea0e:	7101      	strb	r1, [r0, #4]
    ea10:	4770      	bx	lr
    ea12:	b510      	push	{r4, lr}
    ea14:	2801      	cmp	r0, #1
    ea16:	d007      	beq.n	ea28 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    ea18:	2802      	cmp	r0, #2
    ea1a:	d007      	beq.n	ea2c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    ea1c:	2804      	cmp	r0, #4
    ea1e:	d007      	beq.n	ea30 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    ea20:	2139      	movs	r1, #57	; 0x39
    ea22:	202e      	movs	r0, #46	; 0x2e
    ea24:	f7f6 f842 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea28:	2025      	movs	r0, #37	; 0x25
    ea2a:	bd10      	pop	{r4, pc}
    ea2c:	2026      	movs	r0, #38	; 0x26
    ea2e:	bd10      	pop	{r4, pc}
    ea30:	2027      	movs	r0, #39	; 0x27
    ea32:	bd10      	pop	{r4, pc}
    ea34:	4601      	mov	r1, r0
    ea36:	2000      	movs	r0, #0
    ea38:	788a      	ldrb	r2, [r1, #2]
    ea3a:	07d3      	lsls	r3, r2, #31
    ea3c:	d002      	beq.n	ea44 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    ea3e:	78cb      	ldrb	r3, [r1, #3]
    ea40:	07db      	lsls	r3, r3, #31
    ea42:	d006      	beq.n	ea52 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    ea44:	0793      	lsls	r3, r2, #30
    ea46:	d506      	bpl.n	ea56 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ea48:	78cb      	ldrb	r3, [r1, #3]
    ea4a:	079b      	lsls	r3, r3, #30
    ea4c:	d403      	bmi.n	ea56 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ea4e:	2002      	movs	r0, #2
    ea50:	4770      	bx	lr
    ea52:	2001      	movs	r0, #1
    ea54:	4770      	bx	lr
    ea56:	0752      	lsls	r2, r2, #29
    ea58:	d5fc      	bpl.n	ea54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ea5a:	78c9      	ldrb	r1, [r1, #3]
    ea5c:	0749      	lsls	r1, r1, #29
    ea5e:	d4f9      	bmi.n	ea54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ea60:	2004      	movs	r0, #4
    ea62:	4770      	bx	lr
    ea64:	f3c0 0180 	ubfx	r1, r0, #2, #1
    ea68:	f3c0 0240 	ubfx	r2, r0, #1, #1
    ea6c:	4411      	add	r1, r2
    ea6e:	f000 0001 	and.w	r0, r0, #1
    ea72:	4408      	add	r0, r1
    ea74:	4770      	bx	lr

0000ea76 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    ea76:	f240 315a 	movw	r1, #858	; 0x35a
    ea7a:	4348      	muls	r0, r1
    ea7c:	4770      	bx	lr

0000ea7e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    ea7e:	f240 20ef 	movw	r0, #751	; 0x2ef
    ea82:	4770      	bx	lr
    ea84:	041c020e 	.word	0x041c020e
    ea88:	0c600630 	.word	0x0c600630
    ea8c:	06b4035a 	.word	0x06b4035a
    ea90:	0bf505c5 	.word	0x0bf505c5
    ea94:	01a31225 	.word	0x01a31225
    ea98:	05bf03b1 	.word	0x05bf03b1
    ea9c:	064902ef 	.word	0x064902ef
    eaa0:	09a3      	.short	0x09a3

0000eaa2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    eaa2:	b510      	push	{r4, lr}
    eaa4:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    eaa8:	b109      	cbz	r1, eaae <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    eaaa:	2000      	movs	r0, #0
    eaac:	bd10      	pop	{r4, pc}
    eaae:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    eab2:	b131      	cbz	r1, eac2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    eab4:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    eab8:	428a      	cmp	r2, r1
    eaba:	d902      	bls.n	eac2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    eabc:	f7ff feb1 	bl	e822 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    eac0:	e7f3      	b.n	eaaa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    eac2:	2001      	movs	r0, #1
    eac4:	bd10      	pop	{r4, pc}

0000eac6 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    eac6:	b510      	push	{r4, lr}
    eac8:	b131      	cbz	r1, ead8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    eaca:	2901      	cmp	r1, #1
    eacc:	d008      	beq.n	eae0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    eace:	f240 717d 	movw	r1, #1917	; 0x77d
    ead2:	2030      	movs	r0, #48	; 0x30
    ead4:	f7f5 ffea 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ead8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eadc:	f000 b9b7 	b.w	ee4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x308>
    eae0:	2100      	movs	r1, #0
    eae2:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    eae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eaea:	f000 b913 	b.w	ed14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>

0000eaee <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    eaee:	b510      	push	{r4, lr}
    eaf0:	4604      	mov	r4, r0
    eaf2:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    eaf6:	2800      	cmp	r0, #0
    eaf8:	d019      	beq.n	eb2e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    eafa:	2001      	movs	r0, #1
    eafc:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    eb00:	4601      	mov	r1, r0
    eb02:	4620      	mov	r0, r4
    eb04:	f7ff fe8a 	bl	e81c <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    eb08:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    eb0c:	b170      	cbz	r0, eb2c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    eb0e:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    eb12:	f7f3 ff59 	bl	29c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    eb16:	7820      	ldrb	r0, [r4, #0]
    eb18:	f7f4 f8ba 	bl	2c90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    eb1c:	f814 09c8 	ldrb.w	r0, [r4], #-200
    eb20:	f7f4 f894 	bl	2c4c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eb24:	b120      	cbz	r0, eb30 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    eb26:	2000      	movs	r0, #0
    eb28:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    eb2c:	2000      	movs	r0, #0
    eb2e:	bd10      	pop	{r4, pc}
    eb30:	f44f 7101 	mov.w	r1, #516	; 0x204
    eb34:	2030      	movs	r0, #48	; 0x30
    eb36:	f7f5 ffb9 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eb3a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    eb3a:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    eb3e:	4770      	bx	lr

0000eb40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    eb40:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    eb44:	4770      	bx	lr

0000eb46 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    eb46:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eb48:	4604      	mov	r4, r0
    eb4a:	f890 021b 	ldrb.w	r0, [r0, #539]	; 0x21b
    eb4e:	2800      	cmp	r0, #0
    eb50:	d15f      	bne.n	ec12 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb52:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    eb56:	2803      	cmp	r0, #3
    eb58:	d15b      	bne.n	ec12 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb5a:	f7f4 fbc1 	bl	32e0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    eb5e:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    eb62:	f8d4 2284 	ldr.w	r2, [r4, #644]	; 0x284
    eb66:	1ac0      	subs	r0, r0, r3
    eb68:	eb61 0102 	sbc.w	r1, r1, r2
    eb6c:	2300      	movs	r3, #0
    eb6e:	461a      	mov	r2, r3
    eb70:	1a1b      	subs	r3, r3, r0
    eb72:	418a      	sbcs	r2, r1
    eb74:	da4d      	bge.n	ec12 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eb76:	1c42      	adds	r2, r0, #1
    eb78:	f171 0100 	sbcs.w	r1, r1, #0
    eb7c:	db02      	blt.n	eb84 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    eb7e:	f240 51c3 	movw	r1, #1475	; 0x5c3
    eb82:	e036      	b.n	ebf2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    eb84:	6921      	ldr	r1, [r4, #16]
    eb86:	b111      	cbz	r1, eb8e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    eb88:	fbb0 f0f1 	udiv	r0, r0, r1
    eb8c:	e000      	b.n	eb90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    eb8e:	2000      	movs	r0, #0
    eb90:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    eb94:	1c40      	adds	r0, r0, #1
    eb96:	4408      	add	r0, r1
    eb98:	f8a4 025c 	strh.w	r0, [r4, #604]	; 0x25c
    eb9c:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    eba0:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    eba4:	1a08      	subs	r0, r1, r0
    eba6:	b200      	sxth	r0, r0
    eba8:	2800      	cmp	r0, #0
    ebaa:	dd32      	ble.n	ec12 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ebac:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    ebb0:	f7f3 ff0a 	bl	29c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ebb4:	2800      	cmp	r0, #0
    ebb6:	d02c      	beq.n	ec12 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ebb8:	20ff      	movs	r0, #255	; 0xff
    ebba:	f884 0261 	strb.w	r0, [r4, #609]	; 0x261
    ebbe:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
    ebc2:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
    ebc6:	ae01      	add	r6, sp, #4
    ebc8:	1a40      	subs	r0, r0, r1
    ebca:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    ebce:	1e40      	subs	r0, r0, #1
    ebd0:	4408      	add	r0, r1
    ebd2:	b285      	uxth	r5, r0
    ebd4:	e017      	b.n	ec06 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    ebd6:	9600      	str	r6, [sp, #0]
    ebd8:	f8b4 125c 	ldrh.w	r1, [r4, #604]	; 0x25c
    ebdc:	2300      	movs	r3, #0
    ebde:	2201      	movs	r2, #1
    ebe0:	4620      	mov	r0, r4
    ebe2:	f7f9 fb59 	bl	8298 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    ebe6:	2800      	cmp	r0, #0
    ebe8:	d013      	beq.n	ec12 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ebea:	2801      	cmp	r0, #1
    ebec:	d004      	beq.n	ebf8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    ebee:	f240 51fc 	movw	r1, #1532	; 0x5fc
    ebf2:	2030      	movs	r0, #48	; 0x30
    ebf4:	f7f5 ff5a 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebf8:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    ebfc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ec00:	4408      	add	r0, r1
    ec02:	f8a4 025c 	strh.w	r0, [r4, #604]	; 0x25c
    ec06:	f8b4 025c 	ldrh.w	r0, [r4, #604]	; 0x25c
    ec0a:	1a28      	subs	r0, r5, r0
    ec0c:	b200      	sxth	r0, r0
    ec0e:	2800      	cmp	r0, #0
    ec10:	dae1      	bge.n	ebd6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    ec12:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ec14:	2000      	movs	r0, #0
    ec16:	4770      	bx	lr
    ec18:	b570      	push	{r4, r5, r6, lr}
    ec1a:	4604      	mov	r4, r0
    ec1c:	f000 f8f0 	bl	ee00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    ec20:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    ec24:	2000      	movs	r0, #0
    ec26:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    ec2a:	4601      	mov	r1, r0
    ec2c:	2501      	movs	r5, #1
    ec2e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    ec32:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    ec36:	4606      	mov	r6, r0
    ec38:	f7fe ff82 	bl	db40 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ec3c:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    ec40:	1c40      	adds	r0, r0, #1
    ec42:	280a      	cmp	r0, #10
    ec44:	d201      	bcs.n	ec4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x104>
    ec46:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    ec4a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ec4e:	b138      	cbz	r0, ec60 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    ec50:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    ec54:	1c40      	adds	r0, r0, #1
    ec56:	280a      	cmp	r0, #10
    ec58:	d302      	bcc.n	ec60 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    ec5a:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    ec5e:	e002      	b.n	ec66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
    ec60:	2002      	movs	r0, #2
    ec62:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    ec66:	4620      	mov	r0, r4
    ec68:	f000 f822 	bl	ecb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    ec6c:	b120      	cbz	r0, ec78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x132>
    ec6e:	4620      	mov	r0, r4
    ec70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec74:	f000 b80d 	b.w	ec92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    ec78:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    ec7c:	4631      	mov	r1, r6
    ec7e:	f000 f8bd 	bl	edfc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    ec82:	2800      	cmp	r0, #0
    ec84:	d104      	bne.n	ec90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14a>
    ec86:	f240 6191 	movw	r1, #1681	; 0x691
    ec8a:	2030      	movs	r0, #48	; 0x30
    ec8c:	f7f5 ff0e 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec90:	bd70      	pop	{r4, r5, r6, pc}
    ec92:	b510      	push	{r4, lr}
    ec94:	4604      	mov	r4, r0
    ec96:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ec9a:	f7f3 ffd7 	bl	2c4c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ec9e:	2000      	movs	r0, #0
    eca0:	7620      	strb	r0, [r4, #24]
    eca2:	bd10      	pop	{r4, pc}
    eca4:	b510      	push	{r4, lr}
    eca6:	f7ff fd64 	bl	e772 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    ecaa:	f500 7088 	add.w	r0, r0, #272	; 0x110
    ecae:	bd10      	pop	{r4, pc}
    ecb0:	b570      	push	{r4, r5, r6, lr}
    ecb2:	4605      	mov	r5, r0
    ecb4:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    ecb8:	b108      	cbz	r0, ecbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x178>
    ecba:	2001      	movs	r0, #1
    ecbc:	bd70      	pop	{r4, r5, r6, pc}
    ecbe:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    ecc2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ecc6:	4050      	eors	r0, r2
    ecc8:	ea70 0101 	orns	r1, r0, r1
    eccc:	d012      	beq.n	ecf4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    ecce:	2400      	movs	r4, #0
    ecd0:	4621      	mov	r1, r4
    ecd2:	4628      	mov	r0, r5
    ecd4:	f7ff ffe6 	bl	eca4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    ecd8:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    ecdc:	1840      	adds	r0, r0, r1
    ecde:	4154      	adcs	r4, r2
    ece0:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    ece4:	3df8      	subs	r5, #248	; 0xf8
    ece6:	1a10      	subs	r0, r2, r0
    ece8:	41a1      	sbcs	r1, r4
    ecea:	d503      	bpl.n	ecf4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    ecec:	4628      	mov	r0, r5
    ecee:	f7ff fd98 	bl	e822 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ecf2:	e7e2      	b.n	ecba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x174>
    ecf4:	2000      	movs	r0, #0
    ecf6:	bd70      	pop	{r4, r5, r6, pc}
    ecf8:	b510      	push	{r4, lr}
    ecfa:	4604      	mov	r4, r0
    ecfc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    ed00:	f000 f9ef 	bl	f0e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59c>
    ed04:	4602      	mov	r2, r0
    ed06:	4620      	mov	r0, r4
    ed08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed0c:	f240 111b 	movw	r1, #283	; 0x11b
    ed10:	f7ff bafa 	b.w	e308 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ed14:	b510      	push	{r4, lr}
    ed16:	f7fc fb43 	bl	b3a0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ed1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed1e:	f7f4 b8f7 	b.w	2f10 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ed22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ed26:	4604      	mov	r4, r0
    ed28:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    ed2c:	2800      	cmp	r0, #0
    ed2e:	d051      	beq.n	edd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    ed30:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    ed34:	2803      	cmp	r0, #3
    ed36:	d14d      	bne.n	edd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    ed38:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    ed3c:	f001 fcab 	bl	10696 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    ed40:	4605      	mov	r5, r0
    ed42:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    ed46:	f7f9 f9c9 	bl	80dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    ed4a:	4428      	add	r0, r5
    ed4c:	b286      	uxth	r6, r0
    ed4e:	f894 020d 	ldrb.w	r0, [r4, #525]	; 0x20d
    ed52:	f7f9 f9c3 	bl	80dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    ed56:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    ed5a:	fa1f f880 	uxth.w	r8, r0
    ed5e:	4648      	mov	r0, r9
    ed60:	f7fc fbdc 	bl	b51c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ed64:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
    ed68:	1a0d      	subs	r5, r1, r0
    ed6a:	4648      	mov	r0, r9
    ed6c:	f7fc fc02 	bl	b574 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ed70:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    ed74:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    ed78:	fbb0 f0fa 	udiv	r0, r0, sl
    ed7c:	1a2d      	subs	r5, r5, r0
    ed7e:	4648      	mov	r0, r9
    ed80:	f7fc fbcc 	bl	b51c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ed84:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
    ed88:	1a0f      	subs	r7, r1, r0
    ed8a:	4648      	mov	r0, r9
    ed8c:	f7fc fbf2 	bl	b574 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ed90:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ed94:	4401      	add	r1, r0
    ed96:	fbb1 f0fa 	udiv	r0, r1, sl
    ed9a:	1a39      	subs	r1, r7, r0
    ed9c:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    eda0:	4370      	muls	r0, r6
    eda2:	fbb0 f2f8 	udiv	r2, r0, r8
    eda6:	2029      	movs	r0, #41	; 0x29
    eda8:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    edac:	3260      	adds	r2, #96	; 0x60
    edae:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    edb2:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    edb6:	42a9      	cmp	r1, r5
    edb8:	d801      	bhi.n	edbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x278>
    edba:	4285      	cmp	r5, r0
    edbc:	d901      	bls.n	edc2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x27c>
    edbe:	f7f5 faa5 	bl	430c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    edc2:	4631      	mov	r1, r6
    edc4:	6920      	ldr	r0, [r4, #16]
    edc6:	f7fd fa97 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    edca:	2100      	movs	r1, #0
    edcc:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    edd0:	f884 1262 	strb.w	r1, [r4, #610]	; 0x262
    edd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    edd8:	b570      	push	{r4, r5, r6, lr}
    edda:	460c      	mov	r4, r1
    eddc:	4605      	mov	r5, r0
    edde:	f7fc fbc9 	bl	b574 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ede2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ede6:	4408      	add	r0, r1
    ede8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    edec:	fbb0 f6f1 	udiv	r6, r0, r1
    edf0:	4628      	mov	r0, r5
    edf2:	f7fc fb93 	bl	b51c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    edf6:	4430      	add	r0, r6
    edf8:	4420      	add	r0, r4
    edfa:	bd70      	pop	{r4, r5, r6, pc}
    edfc:	f7f3 bac2 	b.w	2384 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ee00:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ee02:	4604      	mov	r4, r0
    ee04:	f7ff fcde 	bl	e7c4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ee08:	b1f8      	cbz	r0, ee4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    ee0a:	4620      	mov	r0, r4
    ee0c:	f7ff fcd2 	bl	e7b4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ee10:	b918      	cbnz	r0, ee1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d4>
    ee12:	4620      	mov	r0, r4
    ee14:	f7ff fcd8 	bl	e7c8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ee18:	b140      	cbz	r0, ee2c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e6>
    ee1a:	2462      	movs	r4, #98	; 0x62
    ee1c:	4668      	mov	r0, sp
    ee1e:	f7f5 fd21 	bl	4864 <mpsl_fem_pa_is_configured>
    ee22:	f89d 0000 	ldrb.w	r0, [sp]
    ee26:	b118      	cbz	r0, ee30 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    ee28:	2501      	movs	r5, #1
    ee2a:	e002      	b.n	ee32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ec>
    ee2c:	245b      	movs	r4, #91	; 0x5b
    ee2e:	e7f5      	b.n	ee1c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    ee30:	2500      	movs	r5, #0
    ee32:	a801      	add	r0, sp, #4
    ee34:	f7f5 fcfe 	bl	4834 <mpsl_fem_lna_is_configured>
    ee38:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ee3c:	b100      	cbz	r0, ee40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fa>
    ee3e:	2001      	movs	r0, #1
    ee40:	4305      	orrs	r5, r0
    ee42:	d000      	beq.n	ee46 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    ee44:	340a      	adds	r4, #10
    ee46:	4620      	mov	r0, r4
    ee48:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee4a:	2084      	movs	r0, #132	; 0x84
    ee4c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee4e:	b570      	push	{r4, r5, r6, lr}
    ee50:	4604      	mov	r4, r0
    ee52:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    ee54:	2500      	movs	r5, #0
    ee56:	b130      	cbz	r0, ee66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    ee58:	f7f8 f832 	bl	6ec0 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    ee5c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    ee5e:	fbb0 f2f1 	udiv	r2, r0, r1
    ee62:	fb01 0512 	mls	r5, r1, r2, r0
    ee66:	4620      	mov	r0, r4
    ee68:	f7ff fc7f 	bl	e76a <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ee6c:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    ee70:	4428      	add	r0, r5
    ee72:	34e8      	adds	r4, #232	; 0xe8
    ee74:	2500      	movs	r5, #0
    ee76:	1882      	adds	r2, r0, r2
    ee78:	eb45 0001 	adc.w	r0, r5, r1
    ee7c:	e9c4 2004 	strd	r2, r0, [r4, #16]
    ee80:	f804 5b0b 	strb.w	r5, [r4], #11
    ee84:	2001      	movs	r0, #1
    ee86:	f804 0901 	strb.w	r0, [r4], #-1
    ee8a:	2002      	movs	r0, #2
    ee8c:	f804 09f2 	strb.w	r0, [r4], #-242
    ee90:	4620      	mov	r0, r4
    ee92:	f7ff ffb5 	bl	ee00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    ee96:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    ee9a:	4620      	mov	r0, r4
    ee9c:	f7ff ff08 	bl	ecb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    eea0:	b930      	cbnz	r0, eeb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x36a>
    eea2:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    eea6:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    eeaa:	f7ff ffa7 	bl	edfc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    eeae:	b128      	cbz	r0, eebc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x376>
    eeb0:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    eeb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eeb8:	f7ff bf2c 	b.w	ed14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    eebc:	f240 61d7 	movw	r1, #1751	; 0x6d7
    eec0:	2030      	movs	r0, #48	; 0x30
    eec2:	f7f5 fdf3 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eec6:	b510      	push	{r4, lr}
    eec8:	4604      	mov	r4, r0
    eeca:	2000      	movs	r0, #0
    eecc:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    eed0:	f894 0294 	ldrb.w	r0, [r4, #660]	; 0x294
    eed4:	f7f3 feba 	bl	2c4c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eed8:	2020      	movs	r0, #32
    eeda:	f884 0294 	strb.w	r0, [r4, #660]	; 0x294
    eede:	bd10      	pop	{r4, pc}
    eee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eee4:	4604      	mov	r4, r0
    eee6:	2500      	movs	r5, #0
    eee8:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
    eeec:	e9d4 673e 	ldrd	r6, r7, [r4, #248]	; 0xf8
    eef0:	4689      	mov	r9, r1
    eef2:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    eef6:	f04f 0801 	mov.w	r8, #1
    eefa:	f880 80e1 	strb.w	r8, [r0, #225]	; 0xe1
    eefe:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    ef02:	4641      	mov	r1, r8
    ef04:	34c8      	adds	r4, #200	; 0xc8
    ef06:	f7f7 fbc9 	bl	669c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ef0a:	6860      	ldr	r0, [r4, #4]
    ef0c:	f8c0 6280 	str.w	r6, [r0, #640]	; 0x280
    ef10:	f8c0 7284 	str.w	r7, [r0, #644]	; 0x284
    ef14:	6861      	ldr	r1, [r4, #4]
    ef16:	7820      	ldrb	r0, [r4, #0]
    ef18:	f881 0294 	strb.w	r0, [r1, #660]	; 0x294
    ef1c:	6861      	ldr	r1, [r4, #4]
    ef1e:	f8c1 9298 	str.w	r9, [r1, #664]	; 0x298
    ef22:	6860      	ldr	r0, [r4, #4]
    ef24:	e9c0 67a2 	strd	r6, r7, [r0, #648]	; 0x288
    ef28:	6864      	ldr	r4, [r4, #4]
    ef2a:	f884 524c 	strb.w	r5, [r4, #588]	; 0x24c
    ef2e:	2300      	movs	r3, #0
    ef30:	f8a4 5290 	strh.w	r5, [r4, #656]	; 0x290
    ef34:	461a      	mov	r2, r3
    ef36:	4619      	mov	r1, r3
    ef38:	4620      	mov	r0, r4
    ef3a:	9500      	str	r5, [sp, #0]
    ef3c:	f7f9 f9ac 	bl	8298 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    ef40:	b120      	cbz	r0, ef4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    ef42:	f44f 7106 	mov.w	r1, #536	; 0x218
    ef46:	2030      	movs	r0, #48	; 0x30
    ef48:	f7f5 fdb0 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef4c:	f8c4 5248 	str.w	r5, [r4, #584]	; 0x248
    ef50:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    ef54:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
    ef58:	f8a4 525e 	strh.w	r5, [r4, #606]	; 0x25e
    ef5c:	f8a4 525c 	strh.w	r5, [r4, #604]	; 0x25c
    ef60:	348c      	adds	r4, #140	; 0x8c
    ef62:	f884 51d5 	strb.w	r5, [r4, #469]	; 0x1d5
    ef66:	8820      	ldrh	r0, [r4, #0]
    ef68:	1e40      	subs	r0, r0, #1
    ef6a:	8020      	strh	r0, [r4, #0]
    ef6c:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
    ef70:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ef74:	f7ff bece 	b.w	ed14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    ef78:	b570      	push	{r4, r5, r6, lr}
    ef7a:	b140      	cbz	r0, ef8e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x448>
    ef7c:	2909      	cmp	r1, #9
    ef7e:	d249      	bcs.n	f014 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ce>
    ef80:	e8df f001 	tbb	[pc, r1]
    ef84:	3c3c1507 	.word	0x3c3c1507
    ef88:	402a4838 	.word	0x402a4838
    ef8c:	0044      	.short	0x0044
    ef8e:	21ca      	movs	r1, #202	; 0xca
    ef90:	e03d      	b.n	f00e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    ef92:	4604      	mov	r4, r0
    ef94:	f7f8 f96c 	bl	7270 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    ef98:	b110      	cbz	r0, efa0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    ef9a:	f44f 711d 	mov.w	r1, #628	; 0x274
    ef9e:	e036      	b.n	f00e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    efa0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    efa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    efa8:	38ff      	subs	r0, #255	; 0xff
    efaa:	f7f4 b8cb 	b.w	3144 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    efae:	4605      	mov	r5, r0
    efb0:	f7ff fc04 	bl	e7bc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    efb4:	b9b0      	cbnz	r0, efe4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49e>
    efb6:	2100      	movs	r1, #0
    efb8:	4628      	mov	r0, r5
    efba:	f7ff fe73 	bl	eca4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    efbe:	4604      	mov	r4, r0
    efc0:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    efc4:	42a0      	cmp	r0, r4
    efc6:	d20b      	bcs.n	efe0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    efc8:	1a20      	subs	r0, r4, r0
    efca:	2103      	movs	r1, #3
    efcc:	f7f3 f80e 	bl	1fec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    efd0:	b130      	cbz	r0, efe0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    efd2:	4628      	mov	r0, r5
    efd4:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    efd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    efdc:	f7ff bb5c 	b.w	e698 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    efe0:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    efe4:	4628      	mov	r0, r5
    efe6:	f7f8 f95f 	bl	72a8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    efea:	2800      	cmp	r0, #0
    efec:	d014      	beq.n	f018 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d2>
    efee:	f240 21a7 	movw	r1, #679	; 0x2a7
    eff2:	e00c      	b.n	f00e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    eff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eff8:	f7fc bb96 	b.w	b728 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    effc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f000:	f7ff be0a 	b.w	ec18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    f004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f008:	f7ff be43 	b.w	ec92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    f00c:	21ea      	movs	r1, #234	; 0xea
    f00e:	2030      	movs	r0, #48	; 0x30
    f010:	f7f5 fd4c 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f014:	21ee      	movs	r1, #238	; 0xee
    f016:	e7fa      	b.n	f00e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f018:	bd70      	pop	{r4, r5, r6, pc}
    f01a:	b510      	push	{r4, lr}
    f01c:	0004      	movs	r4, r0
    f01e:	d008      	beq.n	f032 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ec>
    f020:	2909      	cmp	r1, #9
    f022:	d25c      	bcs.n	f0de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x598>
    f024:	e8df f001 	tbb	[pc, r1]
    f028:	40403807 	.word	0x40403807
    f02c:	4c455b3c 	.word	0x4c455b3c
    f030:	0057      	.short	0x0057
    f032:	2196      	movs	r1, #150	; 0x96
    f034:	e050      	b.n	f0d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f036:	2100      	movs	r1, #0
    f038:	f8c4 129c 	str.w	r1, [r4, #668]	; 0x29c
    f03c:	f894 1260 	ldrb.w	r1, [r4, #608]	; 0x260
    f040:	4620      	mov	r0, r4
    f042:	b189      	cbz	r1, f068 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x522>
    f044:	f8b0 225e 	ldrh.w	r2, [r0, #606]	; 0x25e
    f048:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
    f04c:	428a      	cmp	r2, r1
    f04e:	d106      	bne.n	f05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x518>
    f050:	f8b0 2214 	ldrh.w	r2, [r0, #532]	; 0x214
    f054:	1a51      	subs	r1, r2, r1
    f056:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    f05a:	4611      	mov	r1, r2
    f05c:	e00d      	b.n	f07a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    f05e:	1a51      	subs	r1, r2, r1
    f060:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    f064:	b291      	uxth	r1, r2
    f066:	e008      	b.n	f07a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    f068:	f8b0 125c 	ldrh.w	r1, [r0, #604]	; 0x25c
    f06c:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
    f070:	1a89      	subs	r1, r1, r2
    f072:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    f076:	f8b0 125c 	ldrh.w	r1, [r0, #604]	; 0x25c
    f07a:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
    f07e:	e9d0 129e 	ldrd	r1, r2, [r0, #632]	; 0x278
    f082:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f086:	f8c0 2284 	str.w	r2, [r0, #644]	; 0x284
    f08a:	f7f9 fc07 	bl	889c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f08e:	4620      	mov	r0, r4
    f090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f094:	f7f9 bb0a 	b.w	86ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    f098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f09c:	f000 b909 	b.w	f2b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0a4:	f7fc bb40 	b.w	b728 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f0a8:	4620      	mov	r0, r4
    f0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0ae:	f000 b825 	b.w	f0fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    f0b2:	2001      	movs	r0, #1
    f0b4:	f7f2 ff8a 	bl	1fcc <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0bc:	f7fe bbe5 	b.w	d88a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f0c0:	f894 024c 	ldrb.w	r0, [r4, #588]	; 0x24c
    f0c4:	2804      	cmp	r0, #4
    f0c6:	d001      	beq.n	f0cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x586>
    f0c8:	21b8      	movs	r1, #184	; 0xb8
    f0ca:	e005      	b.n	f0d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f0cc:	4620      	mov	r0, r4
    f0ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0d2:	f7ff bef8 	b.w	eec6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f0d6:	21be      	movs	r1, #190	; 0xbe
    f0d8:	2030      	movs	r0, #48	; 0x30
    f0da:	f7f5 fce7 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0de:	21c2      	movs	r1, #194	; 0xc2
    f0e0:	e7fa      	b.n	f0d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f0e2:	b510      	push	{r4, lr}
    f0e4:	f7fc fa46 	bl	b574 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f0e8:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f0ec:	4408      	add	r0, r1
    f0ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f0f2:	fbb0 f0f1 	udiv	r0, r0, r1
    f0f6:	f200 1079 	addw	r0, r0, #377	; 0x179
    f0fa:	bd10      	pop	{r4, pc}
    f0fc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f0fe:	4604      	mov	r4, r0
    f100:	f7f4 f8ee 	bl	32e0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f104:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    f108:	f8d4 2284 	ldr.w	r2, [r4, #644]	; 0x284
    f10c:	1ac0      	subs	r0, r0, r3
    f10e:	eb61 0102 	sbc.w	r1, r1, r2
    f112:	2200      	movs	r2, #0
    f114:	4613      	mov	r3, r2
    f116:	1a12      	subs	r2, r2, r0
    f118:	418b      	sbcs	r3, r1
    f11a:	db02      	blt.n	f122 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5dc>
    f11c:	f240 610c 	movw	r1, #1548	; 0x60c
    f120:	e052      	b.n	f1c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x682>
    f122:	1c42      	adds	r2, r0, #1
    f124:	f171 0100 	sbcs.w	r1, r1, #0
    f128:	db02      	blt.n	f130 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ea>
    f12a:	f240 610d 	movw	r1, #1549	; 0x60d
    f12e:	e04b      	b.n	f1c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x682>
    f130:	6922      	ldr	r2, [r4, #16]
    f132:	2100      	movs	r1, #0
    f134:	b10a      	cbz	r2, f13a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5f4>
    f136:	fbb0 f1f2 	udiv	r1, r0, r2
    f13a:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    f13e:	280e      	cmp	r0, #14
    f140:	d00c      	beq.n	f15c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x616>
    f142:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    f146:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    f14a:	1843      	adds	r3, r0, r1
    f14c:	1ad3      	subs	r3, r2, r3
    f14e:	b21b      	sxth	r3, r3
    f150:	2b00      	cmp	r3, #0
    f152:	db06      	blt.n	f162 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x61c>
    f154:	1c52      	adds	r2, r2, #1
    f156:	f8a4 225e 	strh.w	r2, [r4, #606]	; 0x25e
    f15a:	e006      	b.n	f16a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x624>
    f15c:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f160:	e012      	b.n	f188 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x642>
    f162:	1c49      	adds	r1, r1, #1
    f164:	4408      	add	r0, r1
    f166:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f16a:	f894 0261 	ldrb.w	r0, [r4, #609]	; 0x261
    f16e:	f88d 0000 	strb.w	r0, [sp]
    f172:	9800      	ldr	r0, [sp, #0]
    f174:	9000      	str	r0, [sp, #0]
    f176:	f89d 0000 	ldrb.w	r0, [sp]
    f17a:	b940      	cbnz	r0, f18e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x648>
    f17c:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f180:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
    f184:	4288      	cmp	r0, r1
    f186:	d102      	bne.n	f18e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x648>
    f188:	1c40      	adds	r0, r0, #1
    f18a:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f18e:	f8b4 0292 	ldrh.w	r0, [r4, #658]	; 0x292
    f192:	1c40      	adds	r0, r0, #1
    f194:	f8a4 0292 	strh.w	r0, [r4, #658]	; 0x292
    f198:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
    f19c:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
    f1a0:	1a40      	subs	r0, r0, r1
    f1a2:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
    f1a6:	1e40      	subs	r0, r0, #1
    f1a8:	4408      	add	r0, r1
    f1aa:	b285      	uxth	r5, r0
    f1ac:	e026      	b.n	f1fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6b6>
    f1ae:	a801      	add	r0, sp, #4
    f1b0:	2300      	movs	r3, #0
    f1b2:	9000      	str	r0, [sp, #0]
    f1b4:	461a      	mov	r2, r3
    f1b6:	4620      	mov	r0, r4
    f1b8:	f7f9 f86e 	bl	8298 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f1bc:	2800      	cmp	r0, #0
    f1be:	d039      	beq.n	f234 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ee>
    f1c0:	2801      	cmp	r0, #1
    f1c2:	d004      	beq.n	f1ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x688>
    f1c4:	f240 614c 	movw	r1, #1612	; 0x64c
    f1c8:	2030      	movs	r0, #48	; 0x30
    f1ca:	f7f5 fc6f 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1ce:	f8b4 025e 	ldrh.w	r0, [r4, #606]	; 0x25e
    f1d2:	f8b4 1210 	ldrh.w	r1, [r4, #528]	; 0x210
    f1d6:	1a42      	subs	r2, r0, r1
    f1d8:	b212      	sxth	r2, r2
    f1da:	2a00      	cmp	r2, #0
    f1dc:	da09      	bge.n	f1f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ac>
    f1de:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f1e2:	4402      	add	r2, r0
    f1e4:	1aaa      	subs	r2, r5, r2
    f1e6:	b212      	sxth	r2, r2
    f1e8:	2a00      	cmp	r2, #0
    f1ea:	da02      	bge.n	f1f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ac>
    f1ec:	f8a4 125e 	strh.w	r1, [r4, #606]	; 0x25e
    f1f0:	e004      	b.n	f1fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6b6>
    f1f2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f1f6:	4408      	add	r0, r1
    f1f8:	f8a4 025e 	strh.w	r0, [r4, #606]	; 0x25e
    f1fc:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
    f200:	1a68      	subs	r0, r5, r1
    f202:	b200      	sxth	r0, r0
    f204:	2800      	cmp	r0, #0
    f206:	dad2      	bge.n	f1ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x668>
    f208:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
    f20c:	b180      	cbz	r0, f230 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ea>
    f20e:	2008      	movs	r0, #8
    f210:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    f214:	220a      	movs	r2, #10
    f216:	4621      	mov	r1, r4
    f218:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    f21c:	f7f7 fbb8 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f220:	4620      	mov	r0, r4
    f222:	f000 f848 	bl	f2b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    f226:	4620      	mov	r0, r4
    f228:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    f22c:	f7ff be4b 	b.w	eec6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f230:	203e      	movs	r0, #62	; 0x3e
    f232:	e7ed      	b.n	f210 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6ca>
    f234:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f236:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f23a:	f001 0307 	and.w	r3, r1, #7
    f23e:	7802      	ldrb	r2, [r0, #0]
    f240:	2101      	movs	r1, #1
    f242:	4099      	lsls	r1, r3
    f244:	438a      	bics	r2, r1
    f246:	7002      	strb	r2, [r0, #0]
    f248:	4770      	bx	lr

0000f24a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    f24a:	b510      	push	{r4, lr}
    f24c:	4604      	mov	r4, r0
    f24e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
    f252:	6921      	ldr	r1, [r4, #16]
    f254:	4288      	cmp	r0, r1
    f256:	d109      	bne.n	f26c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f258:	f8b4 12c8 	ldrh.w	r1, [r4, #712]	; 0x2c8
    f25c:	8b22      	ldrh	r2, [r4, #24]
    f25e:	4291      	cmp	r1, r2
    f260:	d104      	bne.n	f26c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f262:	f8b4 12ca 	ldrh.w	r1, [r4, #714]	; 0x2ca
    f266:	8b62      	ldrh	r2, [r4, #26]
    f268:	4291      	cmp	r1, r2
    f26a:	d014      	beq.n	f296 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    f26c:	8821      	ldrh	r1, [r4, #0]
    f26e:	f8a4 11c6 	strh.w	r1, [r4, #454]	; 0x1c6
    f272:	f7fe fb82 	bl	d97a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f276:	f8a4 01c8 	strh.w	r0, [r4, #456]	; 0x1c8
    f27a:	f8b4 02c8 	ldrh.w	r0, [r4, #712]	; 0x2c8
    f27e:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    f282:	f8b4 02ca 	ldrh.w	r0, [r4, #714]	; 0x2ca
    f286:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    f28a:	2208      	movs	r2, #8
    f28c:	4621      	mov	r1, r4
    f28e:	f504 70dd 	add.w	r0, r4, #442	; 0x1ba
    f292:	f7f7 fb7d 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f296:	2102      	movs	r1, #2
    f298:	4620      	mov	r0, r4
    f29a:	f7f7 f9ff 	bl	669c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f29e:	2000      	movs	r0, #0
    f2a0:	f804 0f96 	strb.w	r0, [r4, #150]!
    f2a4:	2003      	movs	r0, #3
    f2a6:	70e0      	strb	r0, [r4, #3]
    f2a8:	bd10      	pop	{r4, pc}

0000f2aa <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f2aa:	f7f5 bf85 	b.w	51b8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f2ae <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f2ae:	2000      	movs	r0, #0
    f2b0:	4770      	bx	lr

0000f2b2 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f2b2:	f7f6 bc3b 	b.w	5b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f2b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f2b6:	2100      	movs	r1, #0
    f2b8:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    f2bc:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f2c0:	f880 1099 	strb.w	r1, [r0, #153]	; 0x99
    f2c4:	f890 121b 	ldrb.w	r1, [r0, #539]	; 0x21b
    f2c8:	b109      	cbz	r1, f2ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f2ca:	2102      	movs	r1, #2
    f2cc:	e000      	b.n	f2d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f2ce:	2103      	movs	r1, #3
    f2d0:	f7f8 beac 	b.w	802c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f2d4:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    f2d8:	28fe      	cmp	r0, #254	; 0xfe
    f2da:	d001      	beq.n	f2e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f2dc:	2001      	movs	r0, #1
    f2de:	4770      	bx	lr
    f2e0:	2000      	movs	r0, #0
    f2e2:	4770      	bx	lr
    f2e4:	b510      	push	{r4, lr}
    f2e6:	2801      	cmp	r0, #1
    f2e8:	d006      	beq.n	f2f8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f2ea:	2802      	cmp	r0, #2
    f2ec:	d004      	beq.n	f2f8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f2ee:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    f2f2:	2006      	movs	r0, #6
    f2f4:	f7f5 fbda 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2f8:	bd10      	pop	{r4, pc}
    f2fa:	2801      	cmp	r0, #1
    f2fc:	d002      	beq.n	f304 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f2fe:	2802      	cmp	r0, #2
    f300:	d105      	bne.n	f30e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f302:	e002      	b.n	f30a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f304:	2901      	cmp	r1, #1
    f306:	d004      	beq.n	f312 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f308:	e001      	b.n	f30e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f30a:	2902      	cmp	r1, #2
    f30c:	d001      	beq.n	f312 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f30e:	2000      	movs	r0, #0
    f310:	4770      	bx	lr
    f312:	2001      	movs	r0, #1
    f314:	4770      	bx	lr
    f316:	1a40      	subs	r0, r0, r1
    f318:	b200      	sxth	r0, r0
    f31a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f31e:	4288      	cmp	r0, r1
    f320:	dc01      	bgt.n	f326 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f322:	2800      	cmp	r0, #0
    f324:	dc01      	bgt.n	f32a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f326:	2001      	movs	r0, #1
    f328:	4770      	bx	lr
    f32a:	2000      	movs	r0, #0
    f32c:	4770      	bx	lr
    f32e:	2200      	movs	r2, #0
    f330:	704a      	strb	r2, [r1, #1]
    f332:	2208      	movs	r2, #8
    f334:	700a      	strb	r2, [r1, #0]
    f336:	f5a0 7233 	sub.w	r2, r0, #716	; 0x2cc
    f33a:	8812      	ldrh	r2, [r2, #0]
    f33c:	808a      	strh	r2, [r1, #4]
    f33e:	68c2      	ldr	r2, [r0, #12]
    f340:	f8c1 2006 	str.w	r2, [r1, #6]
    f344:	6902      	ldr	r2, [r0, #16]
    f346:	f8c1 200a 	str.w	r2, [r1, #10]
    f34a:	8a80      	ldrh	r0, [r0, #20]
    f34c:	81c8      	strh	r0, [r1, #14]
    f34e:	4770      	bx	lr
    f350:	6842      	ldr	r2, [r0, #4]
    f352:	2100      	movs	r1, #0
    f354:	f882 1095 	strb.w	r1, [r2, #149]	; 0x95
    f358:	6842      	ldr	r2, [r0, #4]
    f35a:	f882 10ce 	strb.w	r1, [r2, #206]	; 0xce
    f35e:	6840      	ldr	r0, [r0, #4]
    f360:	f8a0 10ca 	strh.w	r1, [r0, #202]	; 0xca
    f364:	4770      	bx	lr
    f366:	b510      	push	{r4, lr}
    f368:	4604      	mov	r4, r0
    f36a:	6840      	ldr	r0, [r0, #4]
    f36c:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f370:	0740      	lsls	r0, r0, #29
    f372:	d501      	bpl.n	f378 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xc2>
    f374:	2001      	movs	r0, #1
    f376:	bd10      	pop	{r4, pc}
    f378:	f7f9 fb92 	bl	8aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f37c:	6860      	ldr	r0, [r4, #4]
    f37e:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f382:	f041 0104 	orr.w	r1, r1, #4
    f386:	6001      	str	r1, [r0, #0]
    f388:	2000      	movs	r0, #0
    f38a:	bd10      	pop	{r4, pc}
    f38c:	b510      	push	{r4, lr}
    f38e:	4604      	mov	r4, r0
    f390:	6840      	ldr	r0, [r0, #4]
    f392:	2301      	movs	r3, #1
    f394:	2109      	movs	r1, #9
    f396:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f39a:	3080      	adds	r0, #128	; 0x80
    f39c:	f7fe fb06 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f3a0:	2800      	cmp	r0, #0
    f3a2:	d009      	beq.n	f3b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x102>
    f3a4:	6861      	ldr	r1, [r4, #4]
    f3a6:	2000      	movs	r0, #0
    f3a8:	f881 00c2 	strb.w	r0, [r1, #194]	; 0xc2
    f3ac:	6861      	ldr	r1, [r4, #4]
    f3ae:	f881 00ce 	strb.w	r0, [r1, #206]	; 0xce
    f3b2:	6861      	ldr	r1, [r4, #4]
    f3b4:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f3b8:	bd10      	pop	{r4, pc}
    f3ba:	b510      	push	{r4, lr}
    f3bc:	4604      	mov	r4, r0
    f3be:	6840      	ldr	r0, [r0, #4]
    f3c0:	2301      	movs	r3, #1
    f3c2:	2100      	movs	r1, #0
    f3c4:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    f3c8:	3080      	adds	r0, #128	; 0x80
    f3ca:	f7fe faef 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f3ce:	2800      	cmp	r0, #0
    f3d0:	6860      	ldr	r0, [r4, #4]
    f3d2:	d00b      	beq.n	f3ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f3d4:	f890 009b 	ldrb.w	r0, [r0, #155]	; 0x9b
    f3d8:	2800      	cmp	r0, #0
    f3da:	d006      	beq.n	f3ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x134>
    f3dc:	f7f9 fb60 	bl	8aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f3e0:	6861      	ldr	r1, [r4, #4]
    f3e2:	2012      	movs	r0, #18
    f3e4:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f3e8:	2000      	movs	r0, #0
    f3ea:	bd10      	pop	{r4, pc}
    f3ec:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
    f3f0:	2301      	movs	r3, #1
    f3f2:	2105      	movs	r1, #5
    f3f4:	3080      	adds	r0, #128	; 0x80
    f3f6:	f7fe fad9 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f3fa:	b108      	cbz	r0, f400 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x14a>
    f3fc:	2008      	movs	r0, #8
    f3fe:	bd10      	pop	{r4, pc}
    f400:	2001      	movs	r0, #1
    f402:	bd10      	pop	{r4, pc}
    f404:	6840      	ldr	r0, [r0, #4]
    f406:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f40a:	2913      	cmp	r1, #19
    f40c:	d001      	beq.n	f412 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x15c>
    f40e:	2002      	movs	r0, #2
    f410:	4770      	bx	lr
    f412:	2114      	movs	r1, #20
    f414:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f418:	2000      	movs	r0, #0
    f41a:	4770      	bx	lr
    f41c:	b510      	push	{r4, lr}
    f41e:	4604      	mov	r4, r0
    f420:	6840      	ldr	r0, [r0, #4]
    f422:	f890 0096 	ldrb.w	r0, [r0, #150]	; 0x96
    f426:	2819      	cmp	r0, #25
    f428:	d001      	beq.n	f42e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x178>
    f42a:	2002      	movs	r0, #2
    f42c:	bd10      	pop	{r4, pc}
    f42e:	f7f9 fb43 	bl	8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f432:	6861      	ldr	r1, [r4, #4]
    f434:	201d      	movs	r0, #29
    f436:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f43a:	2000      	movs	r0, #0
    f43c:	bd10      	pop	{r4, pc}
    f43e:	b510      	push	{r4, lr}
    f440:	6843      	ldr	r3, [r0, #4]
    f442:	4604      	mov	r4, r0
    f444:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
    f448:	2808      	cmp	r0, #8
    f44a:	d20d      	bcs.n	f468 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1b2>
    f44c:	f500 720c 	add.w	r2, r0, #560	; 0x230
    f450:	f1c0 0008 	rsb	r0, r0, #8
    f454:	b2c1      	uxtb	r1, r0
    f456:	1898      	adds	r0, r3, r2
    f458:	f7f5 fbc8 	bl	4bec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f45c:	6861      	ldr	r1, [r4, #4]
    f45e:	f891 2122 	ldrb.w	r2, [r1, #290]	; 0x122
    f462:	4410      	add	r0, r2
    f464:	f881 0122 	strb.w	r0, [r1, #290]	; 0x122
    f468:	6862      	ldr	r2, [r4, #4]
    f46a:	f892 1122 	ldrb.w	r1, [r2, #290]	; 0x122
    f46e:	3908      	subs	r1, #8
    f470:	2904      	cmp	r1, #4
    f472:	d20d      	bcs.n	f490 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1da>
    f474:	f501 708a 	add.w	r0, r1, #276	; 0x114
    f478:	f1c1 0104 	rsb	r1, r1, #4
    f47c:	b2c9      	uxtb	r1, r1
    f47e:	4410      	add	r0, r2
    f480:	f7f5 fbb4 	bl	4bec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f484:	6861      	ldr	r1, [r4, #4]
    f486:	f891 2122 	ldrb.w	r2, [r1, #290]	; 0x122
    f48a:	4410      	add	r0, r2
    f48c:	f881 0122 	strb.w	r0, [r1, #290]	; 0x122
    f490:	6860      	ldr	r0, [r4, #4]
    f492:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    f496:	290c      	cmp	r1, #12
    f498:	d30f      	bcc.n	f4ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x204>
    f49a:	d005      	beq.n	f4a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1f2>
    f49c:	f640 1135 	movw	r1, #2357	; 0x935
    f4a0:	f04f 0031 	mov.w	r0, #49	; 0x31
    f4a4:	f7f5 fb02 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4a8:	2100      	movs	r1, #0
    f4aa:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
    f4ae:	2101      	movs	r1, #1
    f4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4b4:	2004      	movs	r0, #4
    f4b6:	f7fa b8ad 	b.w	9614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd78>
    f4ba:	bd10      	pop	{r4, pc}
    f4bc:	6842      	ldr	r2, [r0, #4]
    f4be:	2130      	movs	r1, #48	; 0x30
    f4c0:	f882 1095 	strb.w	r1, [r2, #149]	; 0x95
    f4c4:	6840      	ldr	r0, [r0, #4]
    f4c6:	2100      	movs	r1, #0
    f4c8:	f880 12b4 	strb.w	r1, [r0, #692]	; 0x2b4
    f4cc:	4770      	bx	lr
    f4ce:	b510      	push	{r4, lr}
    f4d0:	6841      	ldr	r1, [r0, #4]
    f4d2:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    f4d6:	2a16      	cmp	r2, #22
    f4d8:	d004      	beq.n	f4e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x22e>
    f4da:	f240 71cc 	movw	r1, #1996	; 0x7cc
    f4de:	2031      	movs	r0, #49	; 0x31
    f4e0:	f7f5 fae4 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4e4:	2201      	movs	r2, #1
    f4e6:	f881 20d3 	strb.w	r2, [r1, #211]	; 0xd3
    f4ea:	6840      	ldr	r0, [r0, #4]
    f4ec:	2117      	movs	r1, #23
    f4ee:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f4f2:	bd10      	pop	{r4, pc}
    f4f4:	f7fe bfd0 	b.w	e498 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f4f8:	b510      	push	{r4, lr}
    f4fa:	4604      	mov	r4, r0
    f4fc:	6840      	ldr	r0, [r0, #4]
    f4fe:	2301      	movs	r3, #1
    f500:	2100      	movs	r1, #0
    f502:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f506:	3080      	adds	r0, #128	; 0x80
    f508:	f7fe fa50 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f50c:	b120      	cbz	r0, f518 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x262>
    f50e:	6861      	ldr	r1, [r4, #4]
    f510:	201e      	movs	r0, #30
    f512:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f516:	bd10      	pop	{r4, pc}
    f518:	f640 0148 	movw	r1, #2120	; 0x848
    f51c:	2031      	movs	r0, #49	; 0x31
    f51e:	f7f5 fac5 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f522:	b510      	push	{r4, lr}
    f524:	6841      	ldr	r1, [r0, #4]
    f526:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    f52a:	06c2      	lsls	r2, r0, #27
    f52c:	d402      	bmi.n	f534 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x27e>
    f52e:	f640 014f 	movw	r1, #2127	; 0x84f
    f532:	e003      	b.n	f53c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x286>
    f534:	0682      	lsls	r2, r0, #26
    f536:	d504      	bpl.n	f542 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x28c>
    f538:	f44f 6105 	mov.w	r1, #2128	; 0x850
    f53c:	2031      	movs	r0, #49	; 0x31
    f53e:	f7f5 fab5 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f542:	f020 0010 	bic.w	r0, r0, #16
    f546:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    f54a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f54e:	f7f9 bab3 	b.w	8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f552:	b510      	push	{r4, lr}
    f554:	4604      	mov	r4, r0
    f556:	6840      	ldr	r0, [r0, #4]
    f558:	2301      	movs	r3, #1
    f55a:	2100      	movs	r1, #0
    f55c:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f560:	3080      	adds	r0, #128	; 0x80
    f562:	f7fe fa23 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f566:	b120      	cbz	r0, f572 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2bc>
    f568:	6861      	ldr	r1, [r4, #4]
    f56a:	2010      	movs	r0, #16
    f56c:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f570:	bd10      	pop	{r4, pc}
    f572:	f640 013b 	movw	r1, #2107	; 0x83b
    f576:	2031      	movs	r0, #49	; 0x31
    f578:	f7f5 fa98 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f57c:	6840      	ldr	r0, [r0, #4]
    f57e:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f582:	f021 0104 	bic.w	r1, r1, #4
    f586:	6001      	str	r1, [r0, #0]
    f588:	f7f9 ba96 	b.w	8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f58c:	b510      	push	{r4, lr}
    f58e:	6841      	ldr	r1, [r0, #4]
    f590:	f891 2096 	ldrb.w	r2, [r1, #150]	; 0x96
    f594:	2a12      	cmp	r2, #18
    f596:	d004      	beq.n	f5a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2ec>
    f598:	f240 71c4 	movw	r1, #1988	; 0x7c4
    f59c:	2031      	movs	r0, #49	; 0x31
    f59e:	f7f5 fa85 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5a2:	2201      	movs	r2, #1
    f5a4:	f881 20d3 	strb.w	r2, [r1, #211]	; 0xd3
    f5a8:	6840      	ldr	r0, [r0, #4]
    f5aa:	2113      	movs	r1, #19
    f5ac:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f5b0:	bd10      	pop	{r4, pc}
    f5b2:	b510      	push	{r4, lr}
    f5b4:	4604      	mov	r4, r0
    f5b6:	6840      	ldr	r0, [r0, #4]
    f5b8:	2301      	movs	r3, #1
    f5ba:	2100      	movs	r1, #0
    f5bc:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f5c0:	3080      	adds	r0, #128	; 0x80
    f5c2:	f7fe f9f3 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f5c6:	b120      	cbz	r0, f5d2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f5c8:	6861      	ldr	r1, [r4, #4]
    f5ca:	2021      	movs	r0, #33	; 0x21
    f5cc:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f5d0:	bd10      	pop	{r4, pc}
    f5d2:	f640 015a 	movw	r1, #2138	; 0x85a
    f5d6:	2031      	movs	r0, #49	; 0x31
    f5d8:	f7f5 fa68 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5dc:	b510      	push	{r4, lr}
    f5de:	6841      	ldr	r1, [r0, #4]
    f5e0:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
    f5e4:	2823      	cmp	r0, #35	; 0x23
    f5e6:	d005      	beq.n	f5f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f5e8:	b120      	cbz	r0, f5f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f5ea:	f640 0161 	movw	r1, #2145	; 0x861
    f5ee:	2031      	movs	r0, #49	; 0x31
    f5f0:	f7f5 fa5c 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5f4:	2024      	movs	r0, #36	; 0x24
    f5f6:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
    f5fa:	bd10      	pop	{r4, pc}
    f5fc:	b510      	push	{r4, lr}
    f5fe:	6840      	ldr	r0, [r0, #4]
    f600:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f604:	292f      	cmp	r1, #47	; 0x2f
    f606:	d006      	beq.n	f616 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x360>
    f608:	2917      	cmp	r1, #23
    f60a:	d00b      	beq.n	f624 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x36e>
    f60c:	f240 71ee 	movw	r1, #2030	; 0x7ee
    f610:	2031      	movs	r0, #49	; 0x31
    f612:	f7f5 fa4b 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f616:	2100      	movs	r1, #0
    f618:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f620:	f7f9 ba4a 	b.w	8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f624:	211b      	movs	r1, #27
    f626:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f62a:	bd10      	pop	{r4, pc}
    f62c:	b510      	push	{r4, lr}
    f62e:	6840      	ldr	r0, [r0, #4]
    f630:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f634:	2917      	cmp	r1, #23
    f636:	d004      	beq.n	f642 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x38c>
    f638:	f240 71d9 	movw	r1, #2009	; 0x7d9
    f63c:	2031      	movs	r0, #49	; 0x31
    f63e:	f7f5 fa35 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f642:	211b      	movs	r1, #27
    f644:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f648:	bd10      	pop	{r4, pc}
    f64a:	f7fe bf13 	b.w	e474 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f64e:	b510      	push	{r4, lr}
    f650:	6840      	ldr	r0, [r0, #4]
    f652:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f656:	2917      	cmp	r1, #23
    f658:	d004      	beq.n	f664 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ae>
    f65a:	f240 71d3 	movw	r1, #2003	; 0x7d3
    f65e:	2031      	movs	r0, #49	; 0x31
    f660:	f7f5 fa24 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f664:	2119      	movs	r1, #25
    f666:	f880 1096 	strb.w	r1, [r0, #150]	; 0x96
    f66a:	bd10      	pop	{r4, pc}
    f66c:	b538      	push	{r3, r4, r5, lr}
    f66e:	4604      	mov	r4, r0
    f670:	6840      	ldr	r0, [r0, #4]
    f672:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    f676:	291d      	cmp	r1, #29
    f678:	d002      	beq.n	f680 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ca>
    f67a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    f67e:	e00f      	b.n	f6a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ea>
    f680:	2500      	movs	r5, #0
    f682:	f880 50d3 	strb.w	r5, [r0, #211]	; 0xd3
    f686:	6860      	ldr	r0, [r4, #4]
    f688:	f890 1205 	ldrb.w	r1, [r0, #517]	; 0x205
    f68c:	f88d 1000 	strb.w	r1, [sp]
    f690:	9900      	ldr	r1, [sp, #0]
    f692:	9100      	str	r1, [sp, #0]
    f694:	f89d 2000 	ldrb.w	r2, [sp]
    f698:	2101      	movs	r1, #1
    f69a:	b122      	cbz	r2, f6a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3f0>
    f69c:	f640 0103 	movw	r1, #2051	; 0x803
    f6a0:	2031      	movs	r0, #49	; 0x31
    f6a2:	f7f5 fa03 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6a6:	f890 20d4 	ldrb.w	r2, [r0, #212]	; 0xd4
    f6aa:	b162      	cbz	r2, f6c6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x410>
    f6ac:	f880 50d4 	strb.w	r5, [r0, #212]	; 0xd4
    f6b0:	6860      	ldr	r0, [r4, #4]
    f6b2:	220c      	movs	r2, #12
    f6b4:	8801      	ldrh	r1, [r0, #0]
    f6b6:	f8a0 1208 	strh.w	r1, [r0, #520]	; 0x208
    f6ba:	6860      	ldr	r0, [r4, #4]
    f6bc:	f880 5206 	strb.w	r5, [r0, #518]	; 0x206
    f6c0:	6861      	ldr	r1, [r4, #4]
    f6c2:	4608      	mov	r0, r1
    f6c4:	e00b      	b.n	f6de <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x428>
    f6c6:	8802      	ldrh	r2, [r0, #0]
    f6c8:	f8a0 2208 	strh.w	r2, [r0, #520]	; 0x208
    f6cc:	6860      	ldr	r0, [r4, #4]
    f6ce:	220b      	movs	r2, #11
    f6d0:	f880 5206 	strb.w	r5, [r0, #518]	; 0x206
    f6d4:	6860      	ldr	r0, [r4, #4]
    f6d6:	f880 120a 	strb.w	r1, [r0, #522]	; 0x20a
    f6da:	6861      	ldr	r1, [r4, #4]
    f6dc:	4608      	mov	r0, r1
    f6de:	f200 10fd 	addw	r0, r0, #509	; 0x1fd
    f6e2:	f7f7 f955 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
    f6e6:	6860      	ldr	r0, [r4, #4]
    f6e8:	f880 5096 	strb.w	r5, [r0, #150]	; 0x96
    f6ec:	bd38      	pop	{r3, r4, r5, pc}
    f6ee:	b510      	push	{r4, lr}
    f6f0:	4604      	mov	r4, r0
    f6f2:	6840      	ldr	r0, [r0, #4]
    f6f4:	2301      	movs	r3, #1
    f6f6:	4619      	mov	r1, r3
    f6f8:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
    f6fc:	3080      	adds	r0, #128	; 0x80
    f6fe:	f7fe f955 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f702:	2800      	cmp	r0, #0
    f704:	d103      	bne.n	f70e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x458>
    f706:	6861      	ldr	r1, [r4, #4]
    f708:	2008      	movs	r0, #8
    f70a:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
    f70e:	bd10      	pop	{r4, pc}
    f710:	b510      	push	{r4, lr}
    f712:	4604      	mov	r4, r0
    f714:	6840      	ldr	r0, [r0, #4]
    f716:	f890 10d5 	ldrb.w	r1, [r0, #213]	; 0xd5
    f71a:	0789      	lsls	r1, r1, #30
    f71c:	d411      	bmi.n	f742 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x48c>
    f71e:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    f722:	2301      	movs	r3, #1
    f724:	2100      	movs	r1, #0
    f726:	3080      	adds	r0, #128	; 0x80
    f728:	f7fe f940 	bl	d9ac <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f72c:	b120      	cbz	r0, f738 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x482>
    f72e:	6861      	ldr	r1, [r4, #4]
    f730:	2006      	movs	r0, #6
    f732:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
    f736:	e00a      	b.n	f74e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x498>
    f738:	f640 0127 	movw	r1, #2087	; 0x827
    f73c:	2031      	movs	r0, #49	; 0x31
    f73e:	f7f5 f9b5 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f742:	2100      	movs	r1, #0
    f744:	f880 10ce 	strb.w	r1, [r0, #206]	; 0xce
    f748:	6860      	ldr	r0, [r4, #4]
    f74a:	f880 113a 	strb.w	r1, [r0, #314]	; 0x13a
    f74e:	6860      	ldr	r0, [r4, #4]
    f750:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f754:	0780      	lsls	r0, r0, #30
    f756:	d507      	bpl.n	f768 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4b2>
    f758:	f7f9 f9ae 	bl	8ab8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f75c:	6860      	ldr	r0, [r4, #4]
    f75e:	f850 1f84 	ldr.w	r1, [r0, #132]!
    f762:	f021 0102 	bic.w	r1, r1, #2
    f766:	6001      	str	r1, [r0, #0]
    f768:	bd10      	pop	{r4, pc}

0000f76a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f76e:	6856      	ldr	r6, [r2, #4]
    f770:	460c      	mov	r4, r1
    f772:	f506 7594 	add.w	r5, r6, #296	; 0x128
    f776:	f106 0780 	add.w	r7, r6, #128	; 0x80
    f77a:	2823      	cmp	r0, #35	; 0x23
    f77c:	d008      	beq.n	f790 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f77e:	2824      	cmp	r0, #36	; 0x24
    f780:	d015      	beq.n	f7ae <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x44>
    f782:	2825      	cmp	r0, #37	; 0x25
    f784:	d02a      	beq.n	f7dc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f786:	f44f 718a 	mov.w	r1, #276	; 0x114
    f78a:	2078      	movs	r0, #120	; 0x78
    f78c:	f7f5 f98e 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f790:	7e68      	ldrb	r0, [r5, #25]
    f792:	f000 f8b5 	bl	f900 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f796:	7e69      	ldrb	r1, [r5, #25]
    f798:	7121      	strb	r1, [r4, #4]
    f79a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f79e:	7ea9      	ldrb	r1, [r5, #26]
    f7a0:	4430      	add	r0, r6
    f7a2:	7161      	strb	r1, [r4, #5]
    f7a4:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f7a8:	71a0      	strb	r0, [r4, #6]
    f7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f7ae:	7d68      	ldrb	r0, [r5, #21]
    f7b0:	f000 f8a6 	bl	f900 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f7b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f7b8:	4430      	add	r0, r6
    f7ba:	7d79      	ldrb	r1, [r7, #21]
    f7bc:	306f      	adds	r0, #111	; 0x6f
    f7be:	2929      	cmp	r1, #41	; 0x29
    f7c0:	d00a      	beq.n	f7d8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f7c2:	7881      	ldrb	r1, [r0, #2]
    f7c4:	7802      	ldrb	r2, [r0, #0]
    f7c6:	7122      	strb	r2, [r4, #4]
    f7c8:	7daa      	ldrb	r2, [r5, #22]
    f7ca:	7162      	strb	r2, [r4, #5]
    f7cc:	7840      	ldrb	r0, [r0, #1]
    f7ce:	71a0      	strb	r0, [r4, #6]
    f7d0:	71e1      	strb	r1, [r4, #7]
    f7d2:	2000      	movs	r0, #0
    f7d4:	7528      	strb	r0, [r5, #20]
    f7d6:	e7e8      	b.n	f7aa <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x40>
    f7d8:	21ff      	movs	r1, #255	; 0xff
    f7da:	e7f3      	b.n	f7c4 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f7dc:	7d68      	ldrb	r0, [r5, #21]
    f7de:	f000 f88f 	bl	f900 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f7e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f7e6:	4430      	add	r0, r6
    f7e8:	7d69      	ldrb	r1, [r5, #21]
    f7ea:	7121      	strb	r1, [r4, #4]
    f7ec:	f810 1f6f 	ldrb.w	r1, [r0, #111]!
    f7f0:	7161      	strb	r1, [r4, #5]
    f7f2:	7da9      	ldrb	r1, [r5, #22]
    f7f4:	71a1      	strb	r1, [r4, #6]
    f7f6:	7840      	ldrb	r0, [r0, #1]
    f7f8:	71e0      	strb	r0, [r4, #7]
    f7fa:	e7d6      	b.n	f7aa <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x40>

0000f7fc <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f7fc:	b510      	push	{r4, lr}
    f7fe:	2801      	cmp	r0, #1
    f800:	d006      	beq.n	f810 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f802:	2802      	cmp	r0, #2
    f804:	d006      	beq.n	f814 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f806:	f240 2176 	movw	r1, #630	; 0x276
    f80a:	2078      	movs	r0, #120	; 0x78
    f80c:	f7f5 f94e 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f810:	2000      	movs	r0, #0
    f812:	bd10      	pop	{r4, pc}
    f814:	2001      	movs	r0, #1
    f816:	bd10      	pop	{r4, pc}

0000f818 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    f818:	b570      	push	{r4, r5, r6, lr}
    f81a:	6844      	ldr	r4, [r0, #4]
    f81c:	220f      	movs	r2, #15
    f81e:	f504 7594 	add.w	r5, r4, #296	; 0x128
    f822:	2100      	movs	r1, #0
    f824:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    f828:	f7fc ff0f 	bl	c64a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f82c:	2100      	movs	r1, #0
    f82e:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
    f832:	61a9      	str	r1, [r5, #24]
    f834:	4608      	mov	r0, r1
    f836:	217f      	movs	r1, #127	; 0x7f
    f838:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f83c:	4422      	add	r2, r4
    f83e:	1c40      	adds	r0, r0, #1
    f840:	b2c0      	uxtb	r0, r0
    f842:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    f846:	2802      	cmp	r0, #2
    f848:	d3f6      	bcc.n	f838 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x20>
    f84a:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    f84e:	4620      	mov	r0, r4
    f850:	f000 f814 	bl	f87c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    f854:	2000      	movs	r0, #0
    f856:	21ff      	movs	r1, #255	; 0xff
    f858:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f85c:	4422      	add	r2, r4
    f85e:	1c40      	adds	r0, r0, #1
    f860:	f802 1f71 	strb.w	r1, [r2, #113]!
    f864:	b2c0      	uxtb	r0, r0
    f866:	7191      	strb	r1, [r2, #6]
    f868:	2802      	cmp	r0, #2
    f86a:	d3f5      	bcc.n	f858 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x40>
    f86c:	bd70      	pop	{r4, r5, r6, pc}

0000f86e <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>:
    f86e:	207f      	movs	r0, #127	; 0x7f
    f870:	f000 b857 	b.w	f922 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>

0000f874 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>:
    f874:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f878:	f000 b853 	b.w	f922 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>

0000f87c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f880:	460d      	mov	r5, r1
    f882:	4606      	mov	r6, r0
    f884:	f7ff fff3 	bl	f86e <sym_54DHANNB5K66OT2I32HH4FUSWNFM6Y6UROTVO5I>
    f888:	4607      	mov	r7, r0
    f88a:	f7ff fff3 	bl	f874 <sym_ORQBLZC6MUX3FYLO7MAZX3V753VQRLBWB2XQIYI>
    f88e:	2400      	movs	r4, #0
    f890:	4285      	cmp	r5, r0
    f892:	d100      	bne.n	f896 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f894:	2401      	movs	r4, #1
    f896:	42bd      	cmp	r5, r7
    f898:	d101      	bne.n	f89e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f89a:	f044 0402 	orr.w	r4, r4, #2
    f89e:	f000 f823 	bl	f8e8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1e>
    f8a2:	2200      	movs	r2, #0
    f8a4:	4601      	mov	r1, r0
    f8a6:	2301      	movs	r3, #1
    f8a8:	fa03 f002 	lsl.w	r0, r3, r2
    f8ac:	4208      	tst	r0, r1
    f8ae:	d006      	beq.n	f8be <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x42>
    f8b0:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    f8b4:	4430      	add	r0, r6
    f8b6:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f8ba:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f8be:	1c52      	adds	r2, r2, #1
    f8c0:	b2d2      	uxtb	r2, r2
    f8c2:	2a02      	cmp	r2, #2
    f8c4:	d3f0      	bcc.n	f8a8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f8ca <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f8ca:	b510      	push	{r4, lr}
    f8cc:	4604      	mov	r4, r0
    f8ce:	4608      	mov	r0, r1
    f8d0:	f7ff ff94 	bl	f7fc <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f8d4:	2802      	cmp	r0, #2
    f8d6:	d206      	bcs.n	f8e6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f8d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f8dc:	4420      	add	r0, r4
    f8de:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f8e2:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f8e6:	bd10      	pop	{r4, pc}
    f8e8:	b510      	push	{r4, lr}
    f8ea:	f7fb f97d 	bl	abe8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f8ee:	0a00      	lsrs	r0, r0, #8
    f8f0:	2201      	movs	r2, #1
    f8f2:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f8f6:	07c0      	lsls	r0, r0, #31
    f8f8:	d000      	beq.n	f8fc <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x32>
    f8fa:	2203      	movs	r2, #3
    f8fc:	4610      	mov	r0, r2
    f8fe:	bd10      	pop	{r4, pc}
    f900:	4601      	mov	r1, r0
    f902:	b510      	push	{r4, lr}
    f904:	2000      	movs	r0, #0
    f906:	2301      	movs	r3, #1
    f908:	fa03 f200 	lsl.w	r2, r3, r0
    f90c:	420a      	tst	r2, r1
    f90e:	d107      	bne.n	f920 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x56>
    f910:	1c40      	adds	r0, r0, #1
    f912:	b2c0      	uxtb	r0, r0
    f914:	2802      	cmp	r0, #2
    f916:	d3f7      	bcc.n	f908 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f918:	2149      	movs	r1, #73	; 0x49
    f91a:	2078      	movs	r0, #120	; 0x78
    f91c:	f7f5 f8c6 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f920:	bd10      	pop	{r4, pc}
    f922:	b508      	push	{r3, lr}
    f924:	f640 1288 	movw	r2, #2440	; 0x988
    f928:	4669      	mov	r1, sp
    f92a:	f7f4 ffa1 	bl	4870 <mpsl_fem_tx_power_split>
    f92e:	bd08      	pop	{r3, pc}
    f930:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f934:	f001 0107 	and.w	r1, r1, #7
    f938:	7800      	ldrb	r0, [r0, #0]
    f93a:	40c8      	lsrs	r0, r1
    f93c:	f000 0001 	and.w	r0, r0, #1
    f940:	4770      	bx	lr
    f942:	b118      	cbz	r0, f94c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x82>
    f944:	2802      	cmp	r0, #2
    f946:	d001      	beq.n	f94c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x82>
    f948:	2001      	movs	r0, #1
    f94a:	4770      	bx	lr
    f94c:	2000      	movs	r0, #0
    f94e:	4770      	bx	lr

0000f950 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f950:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f952:	7881      	ldrb	r1, [r0, #2]
    f954:	2500      	movs	r5, #0
    f956:	4604      	mov	r4, r0
    f958:	291a      	cmp	r1, #26
    f95a:	d024      	beq.n	f9a6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f95c:	dc0e      	bgt.n	f97c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f95e:	2916      	cmp	r1, #22
    f960:	d22b      	bcs.n	f9ba <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f962:	e8df f001 	tbb	[pc, r1]
    f966:	2a2a      	.short	0x2a2a
    f968:	202a2a2a 	.word	0x202a2a2a
    f96c:	2a2a2a2a 	.word	0x2a2a2a2a
    f970:	2a2a2a2a 	.word	0x2a2a2a2a
    f974:	2a2a2a2a 	.word	0x2a2a2a2a
    f978:	2020202a 	.word	0x2020202a
    f97c:	292a      	cmp	r1, #42	; 0x2a
    f97e:	d01c      	beq.n	f9ba <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f980:	dc0b      	bgt.n	f99a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f982:	f1a1 011e 	sub.w	r1, r1, #30
    f986:	290c      	cmp	r1, #12
    f988:	d217      	bcs.n	f9ba <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f98a:	e8df f001 	tbb	[pc, r1]
    f98e:	1616      	.short	0x1616
    f990:	16161616 	.word	0x16161616
    f994:	16161616 	.word	0x16161616
    f998:	0c16      	.short	0x0c16
    f99a:	393a      	subs	r1, #58	; 0x3a
    f99c:	2902      	cmp	r1, #2
    f99e:	d20c      	bcs.n	f9ba <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f9a0:	e8df f001 	tbb	[pc, r1]
    f9a4:	010b      	.short	0x010b
    f9a6:	8820      	ldrh	r0, [r4, #0]
    f9a8:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f9ac:	d205      	bcs.n	f9ba <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f9ae:	4669      	mov	r1, sp
    f9b0:	f7fd ffd2 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9b4:	b118      	cbz	r0, f9be <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f9b6:	2002      	movs	r0, #2
    f9b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f9ba:	2012      	movs	r0, #18
    f9bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f9be:	9901      	ldr	r1, [sp, #4]
    f9c0:	4668      	mov	r0, sp
    f9c2:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
    f9c6:	f88d 2008 	strb.w	r2, [sp, #8]
    f9ca:	9a02      	ldr	r2, [sp, #8]
    f9cc:	9202      	str	r2, [sp, #8]
    f9ce:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f9d2:	f501 7194 	add.w	r1, r1, #296	; 0x128
    f9d6:	b10a      	cbz	r2, f9dc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    f9d8:	200c      	movs	r0, #12
    f9da:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f9dc:	78a2      	ldrb	r2, [r4, #2]
    f9de:	704a      	strb	r2, [r1, #1]
    f9e0:	22ff      	movs	r2, #255	; 0xff
    f9e2:	700a      	strb	r2, [r1, #0]
    f9e4:	f7fe fb51 	bl	e08a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f9e8:	4628      	mov	r0, r5
    f9ea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f9ec <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f9ec:	b510      	push	{r4, lr}
    f9ee:	4604      	mov	r4, r0
    f9f0:	f7fb f82c 	bl	aa4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    f9f4:	b108      	cbz	r0, f9fa <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f9f6:	200c      	movs	r0, #12
    f9f8:	bd10      	pop	{r4, pc}
    f9fa:	7820      	ldrb	r0, [r4, #0]
    f9fc:	b118      	cbz	r0, fa06 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f9fe:	2801      	cmp	r0, #1
    fa00:	d001      	beq.n	fa06 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fa02:	2012      	movs	r0, #18
    fa04:	bd10      	pop	{r4, pc}
    fa06:	f7ff ff9c 	bl	f942 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x78>
    fa0a:	1c61      	adds	r1, r4, #1
    fa0c:	f7f6 fd14 	bl	6438 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fa10:	b108      	cbz	r0, fa16 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fa12:	2000      	movs	r0, #0
    fa14:	bd10      	pop	{r4, pc}
    fa16:	2007      	movs	r0, #7
    fa18:	bd10      	pop	{r4, pc}

0000fa1a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fa1a:	b510      	push	{r4, lr}
    fa1c:	f7fb f816 	bl	aa4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fa20:	b108      	cbz	r0, fa26 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fa22:	200c      	movs	r0, #12
    fa24:	bd10      	pop	{r4, pc}
    fa26:	f7f6 fd2f 	bl	6488 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fa2a:	2000      	movs	r0, #0
    fa2c:	bd10      	pop	{r4, pc}

0000fa2e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fa2e:	b510      	push	{r4, lr}
    fa30:	460b      	mov	r3, r1
    fa32:	2201      	movs	r2, #1
    fa34:	f100 0110 	add.w	r1, r0, #16
    fa38:	f7fd ff70 	bl	d91c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fa3c:	2000      	movs	r0, #0
    fa3e:	bd10      	pop	{r4, pc}

0000fa40 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fa40:	b510      	push	{r4, lr}
    fa42:	8800      	ldrh	r0, [r0, #0]
    fa44:	2100      	movs	r1, #0
    fa46:	f7fd fd10 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa4a:	b118      	cbz	r0, fa54 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fa4c:	f890 12a0 	ldrb.w	r1, [r0, #672]	; 0x2a0
    fa50:	b111      	cbz	r1, fa58 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fa52:	e007      	b.n	fa64 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fa54:	2002      	movs	r0, #2
    fa56:	bd10      	pop	{r4, pc}
    fa58:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
    fa5c:	2916      	cmp	r1, #22
    fa5e:	d003      	beq.n	fa68 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fa60:	2917      	cmp	r1, #23
    fa62:	d001      	beq.n	fa68 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fa64:	200c      	movs	r0, #12
    fa66:	bd10      	pop	{r4, pc}
    fa68:	2102      	movs	r1, #2
    fa6a:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
    fa6e:	2000      	movs	r0, #0
    fa70:	bd10      	pop	{r4, pc}

0000fa72 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fa72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa74:	4605      	mov	r5, r0
    fa76:	8800      	ldrh	r0, [r0, #0]
    fa78:	2100      	movs	r1, #0
    fa7a:	f7fd fcf6 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa7e:	0004      	movs	r4, r0
    fa80:	d003      	beq.n	fa8a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fa82:	f894 02a0 	ldrb.w	r0, [r4, #672]	; 0x2a0
    fa86:	b110      	cbz	r0, fa8e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fa88:	e011      	b.n	faae <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fa8a:	2002      	movs	r0, #2
    fa8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa8e:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    fa92:	2816      	cmp	r0, #22
    fa94:	d001      	beq.n	fa9a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fa96:	2817      	cmp	r0, #23
    fa98:	d109      	bne.n	faae <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fa9a:	f894 02d4 	ldrb.w	r0, [r4, #724]	; 0x2d4
    fa9e:	f88d 0000 	strb.w	r0, [sp]
    faa2:	9800      	ldr	r0, [sp, #0]
    faa4:	9000      	str	r0, [sp, #0]
    faa6:	f89d 0000 	ldrb.w	r0, [sp]
    faaa:	2601      	movs	r6, #1
    faac:	b108      	cbz	r0, fab2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    faae:	200c      	movs	r0, #12
    fab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fab2:	2210      	movs	r2, #16
    fab4:	1ca9      	adds	r1, r5, #2
    fab6:	f204 20a1 	addw	r0, r4, #673	; 0x2a1
    faba:	f7fc fd4c 	bl	c556 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fabe:	f884 62a0 	strb.w	r6, [r4, #672]	; 0x2a0
    fac2:	2000      	movs	r0, #0
    fac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fac6 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fac6:	b510      	push	{r4, lr}
    fac8:	2108      	movs	r1, #8
    faca:	f7f5 f89d 	bl	4c08 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    face:	2000      	movs	r0, #0
    fad0:	bd10      	pop	{r4, pc}

0000fad2 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fad2:	b510      	push	{r4, lr}
    fad4:	4604      	mov	r4, r0
    fad6:	f7fa fe39 	bl	a74c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fada:	f7fe fe79 	bl	e7d0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fade:	7020      	strb	r0, [r4, #0]
    fae0:	2000      	movs	r0, #0
    fae2:	bd10      	pop	{r4, pc}

0000fae4 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fae4:	21fb      	movs	r1, #251	; 0xfb
    fae6:	8001      	strh	r1, [r0, #0]
    fae8:	f640 0248 	movw	r2, #2120	; 0x848
    faec:	8042      	strh	r2, [r0, #2]
    faee:	8081      	strh	r1, [r0, #4]
    faf0:	80c2      	strh	r2, [r0, #6]
    faf2:	2000      	movs	r0, #0
    faf4:	4770      	bx	lr

0000faf6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    faf6:	b51c      	push	{r2, r3, r4, lr}
    faf8:	8800      	ldrh	r0, [r0, #0]
    fafa:	4669      	mov	r1, sp
    fafc:	f7fd ff2c 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb00:	2800      	cmp	r0, #0
    fb02:	d10d      	bne.n	fb20 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fb04:	f89d 0000 	ldrb.w	r0, [sp]
    fb08:	9c01      	ldr	r4, [sp, #4]
    fb0a:	2801      	cmp	r0, #1
    fb0c:	f504 7494 	add.w	r4, r4, #296	; 0x128
    fb10:	d103      	bne.n	fb1a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fb12:	9801      	ldr	r0, [sp, #4]
    fb14:	f000 fcf8 	bl	10508 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fb18:	b118      	cbz	r0, fb22 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fb1a:	7ce0      	ldrb	r0, [r4, #19]
    fb1c:	b118      	cbz	r0, fb26 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fb1e:	203a      	movs	r0, #58	; 0x3a
    fb20:	bd1c      	pop	{r2, r3, r4, pc}
    fb22:	2002      	movs	r0, #2
    fb24:	bd1c      	pop	{r2, r3, r4, pc}
    fb26:	2001      	movs	r0, #1
    fb28:	74e0      	strb	r0, [r4, #19]
    fb2a:	2000      	movs	r0, #0
    fb2c:	bd1c      	pop	{r2, r3, r4, pc}

0000fb2e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fb2e:	b510      	push	{r4, lr}
    fb30:	4604      	mov	r4, r0
    fb32:	20d8      	movs	r0, #216	; 0xd8
    fb34:	7020      	strb	r0, [r4, #0]
    fb36:	f000 fce4 	bl	10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fb3a:	7060      	strb	r0, [r4, #1]
    fb3c:	2000      	movs	r0, #0
    fb3e:	bd10      	pop	{r4, pc}

0000fb40 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fb40:	2108      	movs	r1, #8
    fb42:	7001      	strb	r1, [r0, #0]
    fb44:	2000      	movs	r0, #0
    fb46:	4770      	bx	lr

0000fb48 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fb48:	b510      	push	{r4, lr}
    fb4a:	4604      	mov	r4, r0
    fb4c:	f7fa ff7e 	bl	aa4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fb50:	b108      	cbz	r0, fb56 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fb52:	200c      	movs	r0, #12
    fb54:	bd10      	pop	{r4, pc}
    fb56:	7820      	ldrb	r0, [r4, #0]
    fb58:	b108      	cbz	r0, fb5e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fb5a:	2801      	cmp	r0, #1
    fb5c:	d107      	bne.n	fb6e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fb5e:	f7ff fef0 	bl	f942 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x78>
    fb62:	1c61      	adds	r1, r4, #1
    fb64:	f7fd fecf 	bl	d906 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fb68:	b108      	cbz	r0, fb6e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fb6a:	2000      	movs	r0, #0
    fb6c:	bd10      	pop	{r4, pc}
    fb6e:	2012      	movs	r0, #18
    fb70:	bd10      	pop	{r4, pc}

0000fb72 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fb72:	b51c      	push	{r2, r3, r4, lr}
    fb74:	4604      	mov	r4, r0
    fb76:	f7fa fde9 	bl	a74c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fb7a:	2000      	movs	r0, #0
    fb7c:	f88d 0002 	strb.w	r0, [sp, #2]
    fb80:	2103      	movs	r1, #3
    fb82:	f88d 1001 	strb.w	r1, [sp, #1]
    fb86:	f814 1b01 	ldrb.w	r1, [r4], #1
    fb8a:	f88d 1003 	strb.w	r1, [sp, #3]
    fb8e:	f88d 0000 	strb.w	r0, [sp]
    fb92:	4668      	mov	r0, sp
    fb94:	9401      	str	r4, [sp, #4]
    fb96:	f000 f99f 	bl	fed8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fb9a:	bd1c      	pop	{r2, r3, r4, pc}

0000fb9c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fb9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fb9e:	4605      	mov	r5, r0
    fba0:	f7fa fdd4 	bl	a74c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fba4:	4606      	mov	r6, r0
    fba6:	7828      	ldrb	r0, [r5, #0]
    fba8:	2400      	movs	r4, #0
    fbaa:	b160      	cbz	r0, fbc6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fbac:	f88d 4000 	strb.w	r4, [sp]
    fbb0:	2001      	movs	r0, #1
    fbb2:	f10d 0101 	add.w	r1, sp, #1
    fbb6:	f7f5 fe15 	bl	57e4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fbba:	b120      	cbz	r0, fbc6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fbbc:	4668      	mov	r0, sp
    fbbe:	f000 f897 	bl	fcf0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fbc2:	2800      	cmp	r0, #0
    fbc4:	d112      	bne.n	fbec <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fbc6:	f88d 400c 	strb.w	r4, [sp, #12]
    fbca:	4630      	mov	r0, r6
    fbcc:	f7fe fdf6 	bl	e7bc <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fbd0:	b118      	cbz	r0, fbda <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fbd2:	2080      	movs	r0, #128	; 0x80
    fbd4:	f8ad 000d 	strh.w	r0, [sp, #13]
    fbd8:	e001      	b.n	fbde <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fbda:	f8ad 400d 	strh.w	r4, [sp, #13]
    fbde:	f88d 400f 	strb.w	r4, [sp, #15]
    fbe2:	7828      	ldrb	r0, [r5, #0]
    fbe4:	2801      	cmp	r0, #1
    fbe6:	d003      	beq.n	fbf0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fbe8:	b138      	cbz	r0, fbfa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fbea:	2012      	movs	r0, #18
    fbec:	b004      	add	sp, #16
    fbee:	bd70      	pop	{r4, r5, r6, pc}
    fbf0:	a903      	add	r1, sp, #12
    fbf2:	4630      	mov	r0, r6
    fbf4:	f7fa fdc6 	bl	a784 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fbf8:	e7f8      	b.n	fbec <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fbfa:	4630      	mov	r0, r6
    fbfc:	f000 fc9a 	bl	10534 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fc00:	e7f4      	b.n	fbec <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fc02 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fc02:	b530      	push	{r4, r5, lr}
    fc04:	b08b      	sub	sp, #44	; 0x2c
    fc06:	4604      	mov	r4, r0
    fc08:	f7fa fda0 	bl	a74c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fc0c:	4602      	mov	r2, r0
    fc0e:	7920      	ldrb	r0, [r4, #4]
    fc10:	2804      	cmp	r0, #4
    fc12:	d803      	bhi.n	fc1c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fc14:	8860      	ldrh	r0, [r4, #2]
    fc16:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fc1a:	d902      	bls.n	fc22 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fc1c:	2012      	movs	r0, #18
    fc1e:	b00b      	add	sp, #44	; 0x2c
    fc20:	bd30      	pop	{r4, r5, pc}
    fc22:	2500      	movs	r5, #0
    fc24:	f88d 5004 	strb.w	r5, [sp, #4]
    fc28:	7921      	ldrb	r1, [r4, #4]
    fc2a:	9500      	str	r5, [sp, #0]
    fc2c:	f89d 0000 	ldrb.w	r0, [sp]
    fc30:	2905      	cmp	r1, #5
    fc32:	f040 0010 	orr.w	r0, r0, #16
    fc36:	f88d 0000 	strb.w	r0, [sp]
    fc3a:	d254      	bcs.n	fce6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fc3c:	e8df f001 	tbb	[pc, r1]
    fc40:	11050803 	.word	0x11050803
    fc44:	000b      	.short	0x000b
    fc46:	f040 0001 	orr.w	r0, r0, #1
    fc4a:	f040 0002 	orr.w	r0, r0, #2
    fc4e:	e006      	b.n	fc5e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fc50:	f040 0009 	orr.w	r0, r0, #9
    fc54:	e001      	b.n	fc5a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fc56:	f040 0001 	orr.w	r0, r0, #1
    fc5a:	f040 0004 	orr.w	r0, r0, #4
    fc5e:	f88d 0000 	strb.w	r0, [sp]
    fc62:	f8bd 0000 	ldrh.w	r0, [sp]
    fc66:	9000      	str	r0, [sp, #0]
    fc68:	f8bd 0000 	ldrh.w	r0, [sp]
    fc6c:	f8ad 0005 	strh.w	r0, [sp, #5]
    fc70:	8821      	ldrh	r1, [r4, #0]
    fc72:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fc76:	f361 201f 	bfi	r0, r1, #8, #24
    fc7a:	f8cd 0006 	str.w	r0, [sp, #6]
    fc7e:	8861      	ldrh	r1, [r4, #2]
    fc80:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fc84:	f361 201f 	bfi	r0, r1, #8, #24
    fc88:	f8cd 0009 	str.w	r0, [sp, #9]
    fc8c:	7b60      	ldrb	r0, [r4, #13]
    fc8e:	f88d 000d 	strb.w	r0, [sp, #13]
    fc92:	7960      	ldrb	r0, [r4, #5]
    fc94:	f88d 000e 	strb.w	r0, [sp, #14]
    fc98:	79a0      	ldrb	r0, [r4, #6]
    fc9a:	f88d 000f 	strb.w	r0, [sp, #15]
    fc9e:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fca2:	9004      	str	r0, [sp, #16]
    fca4:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fca8:	f8ad 0014 	strh.w	r0, [sp, #20]
    fcac:	7ba0      	ldrb	r0, [r4, #14]
    fcae:	f88d 0016 	strb.w	r0, [sp, #22]
    fcb2:	207f      	movs	r0, #127	; 0x7f
    fcb4:	f88d 0017 	strb.w	r0, [sp, #23]
    fcb8:	2001      	movs	r0, #1
    fcba:	f88d 0018 	strb.w	r0, [sp, #24]
    fcbe:	f88d 5019 	strb.w	r5, [sp, #25]
    fcc2:	f88d 001a 	strb.w	r0, [sp, #26]
    fcc6:	f88d 501b 	strb.w	r5, [sp, #27]
    fcca:	4610      	mov	r0, r2
    fccc:	f7fe fd96 	bl	e7fc <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fcd0:	f88d 001c 	strb.w	r0, [sp, #28]
    fcd4:	f88d 501d 	strb.w	r5, [sp, #29]
    fcd8:	f88d 501e 	strb.w	r5, [sp, #30]
    fcdc:	a909      	add	r1, sp, #36	; 0x24
    fcde:	a801      	add	r0, sp, #4
    fce0:	f7fa fbfe 	bl	a4e0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fce4:	e79b      	b.n	fc1e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fce6:	f241 11d5 	movw	r1, #4565	; 0x11d5
    fcea:	2039      	movs	r0, #57	; 0x39
    fcec:	f7f4 fede 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fcf0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fcf0:	b570      	push	{r4, r5, r6, lr}
    fcf2:	4604      	mov	r4, r0
    fcf4:	7800      	ldrb	r0, [r0, #0]
    fcf6:	2101      	movs	r1, #1
    fcf8:	f7fd fbb7 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fcfc:	0005      	movs	r5, r0
    fcfe:	d007      	beq.n	fd10 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fd00:	f7fe ff1e 	bl	eb40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fd04:	b160      	cbz	r0, fd20 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fd06:	4628      	mov	r0, r5
    fd08:	f7fe fd5e 	bl	e7c8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fd0c:	b110      	cbz	r0, fd14 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fd0e:	e005      	b.n	fd1c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fd10:	2042      	movs	r0, #66	; 0x42
    fd12:	bd70      	pop	{r4, r5, r6, pc}
    fd14:	4628      	mov	r0, r5
    fd16:	f7fe fd4d 	bl	e7b4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fd1a:	b108      	cbz	r0, fd20 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fd1c:	200c      	movs	r0, #12
    fd1e:	bd70      	pop	{r4, r5, r6, pc}
    fd20:	1c61      	adds	r1, r4, #1
    fd22:	4628      	mov	r0, r5
    fd24:	f7fe fd62 	bl	e7ec <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fd28:	2000      	movs	r0, #0
    fd2a:	bd70      	pop	{r4, r5, r6, pc}

0000fd2c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fd2c:	b50e      	push	{r1, r2, r3, lr}
    fd2e:	8882      	ldrh	r2, [r0, #4]
    fd30:	f244 2390 	movw	r3, #17040	; 0x4290
    fd34:	429a      	cmp	r2, r3
    fd36:	d901      	bls.n	fd3c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fd38:	2012      	movs	r0, #18
    fd3a:	bd0e      	pop	{r1, r2, r3, pc}
    fd3c:	f640 0348 	movw	r3, #2120	; 0x848
    fd40:	429a      	cmp	r2, r3
    fd42:	d300      	bcc.n	fd46 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fd44:	461a      	mov	r2, r3
    fd46:	8803      	ldrh	r3, [r0, #0]
    fd48:	f8ad 3000 	strh.w	r3, [sp]
    fd4c:	8843      	ldrh	r3, [r0, #2]
    fd4e:	f8ad 3002 	strh.w	r3, [sp, #2]
    fd52:	f8ad 2004 	strh.w	r2, [sp, #4]
    fd56:	8843      	ldrh	r3, [r0, #2]
    fd58:	f8ad 3006 	strh.w	r3, [sp, #6]
    fd5c:	f8ad 2008 	strh.w	r2, [sp, #8]
    fd60:	8800      	ldrh	r0, [r0, #0]
    fd62:	8008      	strh	r0, [r1, #0]
    fd64:	4668      	mov	r0, sp
    fd66:	f7fa fded 	bl	a944 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    fd6a:	bd0e      	pop	{r1, r2, r3, pc}

0000fd6c <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    fd6c:	b510      	push	{r4, lr}
    fd6e:	4604      	mov	r4, r0
    fd70:	f7fa fcec 	bl	a74c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fd74:	7861      	ldrb	r1, [r4, #1]
    fd76:	f3c1 0240 	ubfx	r2, r1, #1, #1
    fd7a:	f001 0101 	and.w	r1, r1, #1
    fd7e:	f7fe fd31 	bl	e7e4 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    fd82:	2000      	movs	r0, #0
    fd84:	bd10      	pop	{r4, pc}

0000fd86 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fd86:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fd88:	4604      	mov	r4, r0
    fd8a:	f10d 0007 	add.w	r0, sp, #7
    fd8e:	9000      	str	r0, [sp, #0]
    fd90:	7922      	ldrb	r2, [r4, #4]
    fd92:	78e1      	ldrb	r1, [r4, #3]
    fd94:	78a0      	ldrb	r0, [r4, #2]
    fd96:	f10d 0306 	add.w	r3, sp, #6
    fd9a:	f000 fbf8 	bl	1058e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    fd9e:	2800      	cmp	r0, #0
    fda0:	d109      	bne.n	fdb6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fda2:	8820      	ldrh	r0, [r4, #0]
    fda4:	f8ad 0004 	strh.w	r0, [sp, #4]
    fda8:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fdac:	f8ad 0008 	strh.w	r0, [sp, #8]
    fdb0:	a801      	add	r0, sp, #4
    fdb2:	f000 f94c 	bl	1004e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fdb6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fdb8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fdb8:	b510      	push	{r4, lr}
    fdba:	4604      	mov	r4, r0
    fdbc:	2001      	movs	r0, #1
    fdbe:	f000 fa7e 	bl	102be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fdc2:	b128      	cbz	r0, fdd0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fdc4:	4621      	mov	r1, r4
    fdc6:	2001      	movs	r0, #1
    fdc8:	f7f5 fd24 	bl	5814 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fdcc:	2000      	movs	r0, #0
    fdce:	bd10      	pop	{r4, pc}
    fdd0:	200c      	movs	r0, #12
    fdd2:	bd10      	pop	{r4, pc}

0000fdd4 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fdd4:	b51c      	push	{r2, r3, r4, lr}
    fdd6:	4604      	mov	r4, r0
    fdd8:	f7fa fcb8 	bl	a74c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fddc:	2000      	movs	r0, #0
    fdde:	f88d 0000 	strb.w	r0, [sp]
    fde2:	f88d 0002 	strb.w	r0, [sp, #2]
    fde6:	2003      	movs	r0, #3
    fde8:	f88d 0001 	strb.w	r0, [sp, #1]
    fdec:	f814 0b01 	ldrb.w	r0, [r4], #1
    fdf0:	f88d 0003 	strb.w	r0, [sp, #3]
    fdf4:	4668      	mov	r0, sp
    fdf6:	9401      	str	r4, [sp, #4]
    fdf8:	f000 f8d7 	bl	ffaa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    fdfc:	bd1c      	pop	{r2, r3, r4, pc}

0000fdfe <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fdfe:	b51c      	push	{r2, r3, r4, lr}
    fe00:	8801      	ldrh	r1, [r0, #0]
    fe02:	f8ad 1000 	strh.w	r1, [sp]
    fe06:	8841      	ldrh	r1, [r0, #2]
    fe08:	f8ad 1002 	strh.w	r1, [sp, #2]
    fe0c:	8801      	ldrh	r1, [r0, #0]
    fe0e:	f8ad 1004 	strh.w	r1, [sp, #4]
    fe12:	8840      	ldrh	r0, [r0, #2]
    fe14:	f8ad 0006 	strh.w	r0, [sp, #6]
    fe18:	4668      	mov	r0, sp
    fe1a:	f7fa fe33 	bl	aa84 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x300>
    fe1e:	bd1c      	pop	{r2, r3, r4, pc}

0000fe20 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fe20:	b510      	push	{r4, lr}
    fe22:	f7f5 fd1b 	bl	585c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fe26:	2000      	movs	r0, #0
    fe28:	bd10      	pop	{r4, pc}

0000fe2a <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    fe2a:	b510      	push	{r4, lr}
    fe2c:	460c      	mov	r4, r1
    fe2e:	2100      	movs	r1, #0
    fe30:	f7fd fb1b 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe34:	b118      	cbz	r0, fe3e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    fe36:	2c02      	cmp	r4, #2
    fe38:	d903      	bls.n	fe42 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    fe3a:	2012      	movs	r0, #18
    fe3c:	bd10      	pop	{r4, pc}
    fe3e:	2002      	movs	r0, #2
    fe40:	bd10      	pop	{r4, pc}
    fe42:	f014 0101 	ands.w	r1, r4, #1
    fe46:	f880 121d 	strb.w	r1, [r0, #541]	; 0x21d
    fe4a:	f3c4 0240 	ubfx	r2, r4, #1, #1
    fe4e:	f880 221c 	strb.w	r2, [r0, #540]	; 0x21c
    fe52:	d004      	beq.n	fe5e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fe54:	f890 121a 	ldrb.w	r1, [r0, #538]	; 0x21a
    fe58:	b109      	cbz	r1, fe5e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fe5a:	f7fe fe74 	bl	eb46 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    fe5e:	2000      	movs	r0, #0
    fe60:	bd10      	pop	{r4, pc}

0000fe62 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fe62:	b51c      	push	{r2, r3, r4, lr}
    fe64:	460c      	mov	r4, r1
    fe66:	4669      	mov	r1, sp
    fe68:	f7fd fd76 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe6c:	2800      	cmp	r0, #0
    fe6e:	d105      	bne.n	fe7c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    fe70:	2100      	movs	r1, #0
    fe72:	4622      	mov	r2, r4
    fe74:	9801      	ldr	r0, [sp, #4]
    fe76:	f000 faee 	bl	10456 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    fe7a:	2000      	movs	r0, #0
    fe7c:	bd1c      	pop	{r2, r3, r4, pc}

0000fe7e <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    fe7e:	b510      	push	{r4, lr}
    fe80:	4604      	mov	r4, r0
    fe82:	7800      	ldrb	r0, [r0, #0]
    fe84:	28ff      	cmp	r0, #255	; 0xff
    fe86:	d009      	beq.n	fe9c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    fe88:	2101      	movs	r1, #1
    fe8a:	f7fd faee 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe8e:	b118      	cbz	r0, fe98 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    fe90:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    fe94:	8441      	strh	r1, [r0, #34]	; 0x22
    fe96:	e005      	b.n	fea4 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    fe98:	2042      	movs	r0, #66	; 0x42
    fe9a:	bd10      	pop	{r4, pc}
    fe9c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fea0:	f7f8 f85a 	bl	7f58 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    fea4:	2000      	movs	r0, #0
    fea6:	bd10      	pop	{r4, pc}

0000fea8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fea8:	b510      	push	{r4, lr}
    feaa:	4604      	mov	r4, r0
    feac:	2000      	movs	r0, #0
    feae:	f000 fa06 	bl	102be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    feb2:	b128      	cbz	r0, fec0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    feb4:	4621      	mov	r1, r4
    feb6:	2000      	movs	r0, #0
    feb8:	f7f5 fcac 	bl	5814 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    febc:	2000      	movs	r0, #0
    febe:	bd10      	pop	{r4, pc}
    fec0:	200c      	movs	r0, #12
    fec2:	bd10      	pop	{r4, pc}

0000fec4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fec4:	b510      	push	{r4, lr}
    fec6:	7800      	ldrb	r0, [r0, #0]
    fec8:	b100      	cbz	r0, fecc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    feca:	2001      	movs	r0, #1
    fecc:	f7f8 f86e 	bl	7fac <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    fed0:	2000      	movs	r0, #0
    fed2:	bd10      	pop	{r4, pc}

0000fed4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fed4:	f7fa bd36 	b.w	a944 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

0000fed8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    fed8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fedc:	4606      	mov	r6, r0
    fede:	7845      	ldrb	r5, [r0, #1]
    fee0:	7800      	ldrb	r0, [r0, #0]
    fee2:	2101      	movs	r1, #1
    fee4:	f7fd fac1 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fee8:	0004      	movs	r4, r0
    feea:	d01e      	beq.n	ff2a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    feec:	f7fe fbcc 	bl	e688 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    fef0:	78f1      	ldrb	r1, [r6, #3]
    fef2:	4281      	cmp	r1, r0
    fef4:	d800      	bhi.n	fef8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    fef6:	4608      	mov	r0, r1
    fef8:	4607      	mov	r7, r0
    fefa:	2d04      	cmp	r5, #4
    fefc:	d018      	beq.n	ff30 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    fefe:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff00:	f7fd fbfe 	bl	d700 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ff04:	4438      	add	r0, r7
    ff06:	b281      	uxth	r1, r0
    ff08:	4620      	mov	r0, r4
    ff0a:	2201      	movs	r2, #1
    ff0c:	f000 f9e9 	bl	102e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    ff10:	2800      	cmp	r0, #0
    ff12:	d10b      	bne.n	ff2c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ff14:	2d03      	cmp	r5, #3
    ff16:	d000      	beq.n	ff1a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ff18:	b1df      	cbz	r7, ff52 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ff1a:	4620      	mov	r0, r4
    ff1c:	f7fe fc52 	bl	e7c4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ff20:	7871      	ldrb	r1, [r6, #1]
    ff22:	2903      	cmp	r1, #3
    ff24:	d010      	beq.n	ff48 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    ff26:	b9a0      	cbnz	r0, ff52 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ff28:	e004      	b.n	ff34 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    ff2a:	2042      	movs	r0, #66	; 0x42
    ff2c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ff30:	b97f      	cbnz	r7, ff52 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ff32:	e7f2      	b.n	ff1a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ff34:	2904      	cmp	r1, #4
    ff36:	d107      	bne.n	ff48 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    ff38:	4620      	mov	r0, r4
    ff3a:	f7fe fe01 	bl	eb40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ff3e:	b140      	cbz	r0, ff52 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ff40:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff42:	f7fd fbac 	bl	d69e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    ff46:	b120      	cbz	r0, ff52 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ff48:	2d01      	cmp	r5, #1
    ff4a:	d004      	beq.n	ff56 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    ff4c:	2d03      	cmp	r5, #3
    ff4e:	d002      	beq.n	ff56 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    ff50:	e00e      	b.n	ff70 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    ff52:	2012      	movs	r0, #18
    ff54:	e7ea      	b.n	ff2c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ff56:	4620      	mov	r0, r4
    ff58:	f7fe fc34 	bl	e7c4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ff5c:	b108      	cbz	r0, ff62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    ff5e:	2200      	movs	r2, #0
    ff60:	e002      	b.n	ff68 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    ff62:	2d01      	cmp	r5, #1
    ff64:	d013      	beq.n	ff8e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    ff66:	2201      	movs	r2, #1
    ff68:	4668      	mov	r0, sp
    ff6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ff6c:	f7fd fb2f 	bl	d5ce <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ff70:	2d04      	cmp	r5, #4
    ff72:	d018      	beq.n	ffa6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    ff74:	6872      	ldr	r2, [r6, #4]
    ff76:	463b      	mov	r3, r7
    ff78:	2101      	movs	r1, #1
    ff7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff7c:	f7fd fb5b 	bl	d636 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    ff80:	b138      	cbz	r0, ff92 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    ff82:	7870      	ldrb	r0, [r6, #1]
    ff84:	2802      	cmp	r0, #2
    ff86:	d006      	beq.n	ff96 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    ff88:	2803      	cmp	r0, #3
    ff8a:	d004      	beq.n	ff96 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    ff8c:	e00b      	b.n	ffa6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    ff8e:	2202      	movs	r2, #2
    ff90:	e7ea      	b.n	ff68 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    ff92:	2007      	movs	r0, #7
    ff94:	e7ca      	b.n	ff2c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ff96:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff98:	f7fd fbb2 	bl	d700 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ff9c:	4602      	mov	r2, r0
    ff9e:	2101      	movs	r1, #1
    ffa0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffa2:	f7fd fb8a 	bl	d6ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ffa6:	2000      	movs	r0, #0
    ffa8:	e7c0      	b.n	ff2c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000ffaa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    ffaa:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ffae:	4607      	mov	r7, r0
    ffb0:	7845      	ldrb	r5, [r0, #1]
    ffb2:	78c6      	ldrb	r6, [r0, #3]
    ffb4:	7800      	ldrb	r0, [r0, #0]
    ffb6:	2101      	movs	r1, #1
    ffb8:	f7fd fa57 	bl	d46a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ffbc:	0004      	movs	r4, r0
    ffbe:	d003      	beq.n	ffc8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    ffc0:	f7fe fc02 	bl	e7c8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ffc4:	b118      	cbz	r0, ffce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    ffc6:	e003      	b.n	ffd0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    ffc8:	2042      	movs	r0, #66	; 0x42
    ffca:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ffce:	2600      	movs	r6, #0
    ffd0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffd2:	f7fd fb99 	bl	d708 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    ffd6:	4430      	add	r0, r6
    ffd8:	b281      	uxth	r1, r0
    ffda:	4688      	mov	r8, r1
    ffdc:	4620      	mov	r0, r4
    ffde:	2201      	movs	r2, #1
    ffe0:	f000 f97f 	bl	102e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    ffe4:	2800      	cmp	r0, #0
    ffe6:	d1f0      	bne.n	ffca <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ffe8:	2d04      	cmp	r5, #4
    ffea:	d008      	beq.n	fffe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    ffec:	2d03      	cmp	r5, #3
    ffee:	d00a      	beq.n	10006 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    fff0:	b12e      	cbz	r6, fffe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    fff2:	4620      	mov	r0, r4
    fff4:	f7fe fda4 	bl	eb40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fff8:	b118      	cbz	r0, 10002 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    fffa:	200c      	movs	r0, #12
    fffc:	e7e5      	b.n	ffca <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fffe:	2012      	movs	r0, #18
   10000:	e7e3      	b.n	ffca <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10002:	2d01      	cmp	r5, #1
   10004:	d10c      	bne.n	10020 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10006:	4620      	mov	r0, r4
   10008:	f7fe fbdc 	bl	e7c4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1000c:	b108      	cbz	r0, 10012 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   1000e:	2204      	movs	r2, #4
   10010:	e002      	b.n	10018 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10012:	2d01      	cmp	r5, #1
   10014:	d010      	beq.n	10038 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10016:	2205      	movs	r2, #5
   10018:	4668      	mov	r0, sp
   1001a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1001c:	f7fd fad7 	bl	d5ce <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10020:	687a      	ldr	r2, [r7, #4]
   10022:	4633      	mov	r3, r6
   10024:	2100      	movs	r1, #0
   10026:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10028:	f7fd fb05 	bl	d636 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1002c:	b130      	cbz	r0, 1003c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   1002e:	2d02      	cmp	r5, #2
   10030:	d006      	beq.n	10040 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10032:	2d03      	cmp	r5, #3
   10034:	d004      	beq.n	10040 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10036:	e008      	b.n	1004a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10038:	2206      	movs	r2, #6
   1003a:	e7ed      	b.n	10018 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1003c:	2007      	movs	r0, #7
   1003e:	e7c4      	b.n	ffca <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10040:	4642      	mov	r2, r8
   10042:	2100      	movs	r1, #0
   10044:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10046:	f7fd fb38 	bl	d6ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1004a:	2000      	movs	r0, #0
   1004c:	e7bd      	b.n	ffca <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0001004e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   1004e:	b510      	push	{r4, lr}
   10050:	4604      	mov	r4, r0
   10052:	8880      	ldrh	r0, [r0, #4]
   10054:	b128      	cbz	r0, 10062 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10056:	2801      	cmp	r0, #1
   10058:	d003      	beq.n	10062 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1005a:	2802      	cmp	r0, #2
   1005c:	d001      	beq.n	10062 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1005e:	2012      	movs	r0, #18
   10060:	bd10      	pop	{r4, pc}
   10062:	78e0      	ldrb	r0, [r4, #3]
   10064:	f000 f9d4 	bl	10410 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   10068:	b148      	cbz	r0, 1007e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1006a:	78a0      	ldrb	r0, [r4, #2]
   1006c:	f000 f9d0 	bl	10410 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   10070:	b128      	cbz	r0, 1007e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10072:	4620      	mov	r0, r4
   10074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10078:	2101      	movs	r1, #1
   1007a:	f000 b88e 	b.w	1019a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1007e:	2011      	movs	r0, #17
   10080:	bd10      	pop	{r4, pc}

00010082 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10082:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10084:	460c      	mov	r4, r1
   10086:	4605      	mov	r5, r0
   10088:	8800      	ldrh	r0, [r0, #0]
   1008a:	4669      	mov	r1, sp
   1008c:	f7fd fc64 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10090:	2800      	cmp	r0, #0
   10092:	d106      	bne.n	100a2 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10094:	9801      	ldr	r0, [sp, #4]
   10096:	8829      	ldrh	r1, [r5, #0]
   10098:	8021      	strh	r1, [r4, #0]
   1009a:	f8b0 00c0 	ldrh.w	r0, [r0, #192]	; 0xc0
   1009e:	8060      	strh	r0, [r4, #2]
   100a0:	2000      	movs	r0, #0
   100a2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000100a4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   100a4:	b510      	push	{r4, lr}
   100a6:	4604      	mov	r4, r0
   100a8:	4601      	mov	r1, r0
   100aa:	2000      	movs	r0, #0
   100ac:	f7f5 fb9a 	bl	57e4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   100b0:	b910      	cbnz	r0, 100b8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   100b2:	2000      	movs	r0, #0
   100b4:	6020      	str	r0, [r4, #0]
   100b6:	80a0      	strh	r0, [r4, #4]
   100b8:	2000      	movs	r0, #0
   100ba:	bd10      	pop	{r4, pc}

000100bc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   100bc:	b50e      	push	{r1, r2, r3, lr}
   100be:	8800      	ldrh	r0, [r0, #0]
   100c0:	4669      	mov	r1, sp
   100c2:	f7fd fc49 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100c6:	b960      	cbnz	r0, 100e2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   100c8:	9801      	ldr	r0, [sp, #4]
   100ca:	f000 fa1d 	bl	10508 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
   100ce:	b140      	cbz	r0, 100e2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
   100d0:	9801      	ldr	r0, [sp, #4]
   100d2:	4601      	mov	r1, r0
   100d4:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
   100d8:	3080      	adds	r0, #128	; 0x80
   100da:	f501 719d 	add.w	r1, r1, #314	; 0x13a
   100de:	b962      	cbnz	r2, 100fa <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
   100e0:	e001      	b.n	100e6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
   100e2:	2002      	movs	r0, #2
   100e4:	bd0e      	pop	{r1, r2, r3, pc}
   100e6:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
   100ea:	f88d 2008 	strb.w	r2, [sp, #8]
   100ee:	9a02      	ldr	r2, [sp, #8]
   100f0:	9202      	str	r2, [sp, #8]
   100f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   100f6:	2201      	movs	r2, #1
   100f8:	b10b      	cbz	r3, 100fe <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
   100fa:	203a      	movs	r0, #58	; 0x3a
   100fc:	bd0e      	pop	{r1, r2, r3, pc}
   100fe:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
   10102:	079b      	lsls	r3, r3, #30
   10104:	d006      	beq.n	10114 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
   10106:	2203      	movs	r2, #3
   10108:	3056      	adds	r0, #86	; 0x56
   1010a:	9901      	ldr	r1, [sp, #4]
   1010c:	f7f6 fc40 	bl	6990 <sym_6DHRDOLEPQTXUFSZA5GRCPOYB3PIRRWQJXE2LLA>
   10110:	2000      	movs	r0, #0
   10112:	bd0e      	pop	{r1, r2, r3, pc}
   10114:	700a      	strb	r2, [r1, #0]
   10116:	4668      	mov	r0, sp
   10118:	f7fd ffb7 	bl	e08a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   1011c:	e7f8      	b.n	10110 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>

0001011e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1011e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10120:	460c      	mov	r4, r1
   10122:	4605      	mov	r5, r0
   10124:	8800      	ldrh	r0, [r0, #0]
   10126:	4669      	mov	r1, sp
   10128:	f7fd fc16 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1012c:	b108      	cbz	r0, 10132 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1012e:	2002      	movs	r0, #2
   10130:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10132:	78a8      	ldrb	r0, [r5, #2]
   10134:	b130      	cbz	r0, 10144 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10136:	f000 f9e4 	bl	10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   1013a:	70a0      	strb	r0, [r4, #2]
   1013c:	8828      	ldrh	r0, [r5, #0]
   1013e:	8020      	strh	r0, [r4, #0]
   10140:	2000      	movs	r0, #0
   10142:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10144:	9801      	ldr	r0, [sp, #4]
   10146:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   1014a:	e7f6      	b.n	1013a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001014c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1014c:	b510      	push	{r4, lr}
   1014e:	f7fa fcd9 	bl	ab04 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10152:	2000      	movs	r0, #0
   10154:	bd10      	pop	{r4, pc}

00010156 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10156:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1015a:	4604      	mov	r4, r0
   1015c:	8840      	ldrh	r0, [r0, #2]
   1015e:	460d      	mov	r5, r1
   10160:	b1b8      	cbz	r0, 10192 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10162:	8820      	ldrh	r0, [r4, #0]
   10164:	4669      	mov	r1, sp
   10166:	f7fd fbf7 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1016a:	2800      	cmp	r0, #0
   1016c:	d10f      	bne.n	1018e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1016e:	8820      	ldrh	r0, [r4, #0]
   10170:	8028      	strh	r0, [r5, #0]
   10172:	9e01      	ldr	r6, [sp, #4]
   10174:	f106 0510 	add.w	r5, r6, #16
   10178:	3680      	adds	r6, #128	; 0x80
   1017a:	682f      	ldr	r7, [r5, #0]
   1017c:	8862      	ldrh	r2, [r4, #2]
   1017e:	4639      	mov	r1, r7
   10180:	4630      	mov	r0, r6
   10182:	f7fd fd1a 	bl	dbba <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10186:	6828      	ldr	r0, [r5, #0]
   10188:	42b8      	cmp	r0, r7
   1018a:	d1f6      	bne.n	1017a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1018c:	2000      	movs	r0, #0
   1018e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10192:	2012      	movs	r0, #18
   10194:	e7fb      	b.n	1018e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010196 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10196:	f000 b863 	b.w	10260 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0001019a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   1019a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1019e:	b086      	sub	sp, #24
   101a0:	4689      	mov	r9, r1
   101a2:	4607      	mov	r7, r0
   101a4:	8800      	ldrh	r0, [r0, #0]
   101a6:	a901      	add	r1, sp, #4
   101a8:	f7fd fbd6 	bl	d958 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101ac:	2800      	cmp	r0, #0
   101ae:	d136      	bne.n	1021e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   101b0:	9802      	ldr	r0, [sp, #8]
   101b2:	4601      	mov	r1, r0
   101b4:	4688      	mov	r8, r1
   101b6:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
   101ba:	f500 7494 	add.w	r4, r0, #296	; 0x128
   101be:	f88d 1000 	strb.w	r1, [sp]
   101c2:	9900      	ldr	r1, [sp, #0]
   101c4:	9100      	str	r1, [sp, #0]
   101c6:	f89d 1000 	ldrb.w	r1, [sp]
   101ca:	3080      	adds	r0, #128	; 0x80
   101cc:	b109      	cbz	r1, 101d2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   101ce:	2601      	movs	r6, #1
   101d0:	e000      	b.n	101d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   101d2:	2600      	movs	r6, #0
   101d4:	7d81      	ldrb	r1, [r0, #22]
   101d6:	2923      	cmp	r1, #35	; 0x23
   101d8:	d100      	bne.n	101dc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   101da:	b13e      	cbz	r6, 101ec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   101dc:	2500      	movs	r5, #0
   101de:	3064      	adds	r0, #100	; 0x64
   101e0:	2108      	movs	r1, #8
   101e2:	4682      	mov	sl, r0
   101e4:	f7ff fba4 	bl	f930 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
   101e8:	b110      	cbz	r0, 101f0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   101ea:	e007      	b.n	101fc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   101ec:	2501      	movs	r5, #1
   101ee:	e7f6      	b.n	101de <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   101f0:	210b      	movs	r1, #11
   101f2:	4650      	mov	r0, sl
   101f4:	f7ff fb9c 	bl	f930 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x66>
   101f8:	b900      	cbnz	r0, 101fc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   101fa:	b17d      	cbz	r5, 1021c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   101fc:	a804      	add	r0, sp, #16
   101fe:	9000      	str	r0, [sp, #0]
   10200:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10204:	ab03      	add	r3, sp, #12
   10206:	463a      	mov	r2, r7
   10208:	4641      	mov	r1, r8
   1020a:	f000 f95a 	bl	104c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   1020e:	0005      	movs	r5, r0
   10210:	d105      	bne.n	1021e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10212:	340c      	adds	r4, #12
   10214:	20ff      	movs	r0, #255	; 0xff
   10216:	7060      	strb	r0, [r4, #1]
   10218:	b936      	cbnz	r6, 10228 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1021a:	e003      	b.n	10224 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   1021c:	201a      	movs	r0, #26
   1021e:	b006      	add	sp, #24
   10220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10224:	7820      	ldrb	r0, [r4, #0]
   10226:	b108      	cbz	r0, 1022c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   10228:	253a      	movs	r5, #58	; 0x3a
   1022a:	e012      	b.n	10252 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   1022c:	f884 9000 	strb.w	r9, [r4]
   10230:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10234:	70a0      	strb	r0, [r4, #2]
   10236:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1023a:	70e1      	strb	r1, [r4, #3]
   1023c:	f88d 0000 	strb.w	r0, [sp]
   10240:	f88d 1001 	strb.w	r1, [sp, #1]
   10244:	88b8      	ldrh	r0, [r7, #4]
   10246:	f8ad 0002 	strh.w	r0, [sp, #2]
   1024a:	4669      	mov	r1, sp
   1024c:	4640      	mov	r0, r8
   1024e:	f7fd fc53 	bl	daf8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   10252:	2000      	movs	r0, #0
   10254:	7060      	strb	r0, [r4, #1]
   10256:	4628      	mov	r0, r5
   10258:	e7e1      	b.n	1021e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0001025a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   1025a:	2008      	movs	r0, #8
   1025c:	f7fa bcb8 	b.w	abd0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00010260 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   10260:	b510      	push	{r4, lr}
   10262:	f7fd fadc 	bl	d81e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   10266:	f7f6 f88d 	bl	6384 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   1026a:	f7fa fcd3 	bl	ac14 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   1026e:	f7fd ff2f 	bl	e0d0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   10272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10276:	f7fa ba49 	b.w	a70c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>

0001027a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   1027a:	f7f8 baf7 	b.w	886c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   1027e:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10282:	4288      	cmp	r0, r1
   10284:	d303      	bcc.n	1028e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   10286:	f640 0148 	movw	r1, #2120	; 0x848
   1028a:	4288      	cmp	r0, r1
   1028c:	d300      	bcc.n	10290 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   1028e:	4608      	mov	r0, r1
   10290:	b280      	uxth	r0, r0
   10292:	4770      	bx	lr
   10294:	07c1      	lsls	r1, r0, #31
   10296:	d001      	beq.n	1029c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   10298:	2001      	movs	r0, #1
   1029a:	4770      	bx	lr
   1029c:	0780      	lsls	r0, r0, #30
   1029e:	d501      	bpl.n	102a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   102a0:	2002      	movs	r0, #2
   102a2:	4770      	bx	lr
   102a4:	2000      	movs	r0, #0
   102a6:	4770      	bx	lr
   102a8:	b510      	push	{r4, lr}
   102aa:	2801      	cmp	r0, #1
   102ac:	d006      	beq.n	102bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   102ae:	2802      	cmp	r0, #2
   102b0:	d004      	beq.n	102bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   102b2:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   102b6:	2006      	movs	r0, #6
   102b8:	f7f4 fbf8 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102bc:	bd10      	pop	{r4, pc}
   102be:	b510      	push	{r4, lr}
   102c0:	f7fa f9a2 	bl	a608 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   102c4:	b158      	cbz	r0, 102de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   102c6:	f7fa fa41 	bl	a74c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   102ca:	4604      	mov	r4, r0
   102cc:	f7fe fa7c 	bl	e7c8 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   102d0:	b918      	cbnz	r0, 102da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   102d2:	4620      	mov	r0, r4
   102d4:	f7fe fa6e 	bl	e7b4 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   102d8:	b108      	cbz	r0, 102de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   102da:	2000      	movs	r0, #0
   102dc:	bd10      	pop	{r4, pc}
   102de:	2001      	movs	r0, #1
   102e0:	bd10      	pop	{r4, pc}
   102e2:	b570      	push	{r4, r5, r6, lr}
   102e4:	460c      	mov	r4, r1
   102e6:	4605      	mov	r5, r0
   102e8:	b112      	cbz	r2, 102f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   102ea:	291f      	cmp	r1, #31
   102ec:	d80c      	bhi.n	10308 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   102ee:	e016      	b.n	1031e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   102f0:	f7f5 f8b6 	bl	5460 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   102f4:	42a0      	cmp	r0, r4
   102f6:	d201      	bcs.n	102fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   102f8:	2007      	movs	r0, #7
   102fa:	bd70      	pop	{r4, r5, r6, pc}
   102fc:	4628      	mov	r0, r5
   102fe:	f7fe fa61 	bl	e7c4 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10302:	b118      	cbz	r0, 1030c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10304:	2c1f      	cmp	r4, #31
   10306:	d901      	bls.n	1030c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10308:	2012      	movs	r0, #18
   1030a:	bd70      	pop	{r4, r5, r6, pc}
   1030c:	4628      	mov	r0, r5
   1030e:	f7fe fa62 	bl	e7d6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10312:	b130      	cbz	r0, 10322 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   10314:	4621      	mov	r1, r4
   10316:	4628      	mov	r0, r5
   10318:	f7fe fa29 	bl	e76e <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   1031c:	b118      	cbz	r0, 10326 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   1031e:	2000      	movs	r0, #0
   10320:	bd70      	pop	{r4, r5, r6, pc}
   10322:	2042      	movs	r0, #66	; 0x42
   10324:	bd70      	pop	{r4, r5, r6, pc}
   10326:	2045      	movs	r0, #69	; 0x45
   10328:	bd70      	pop	{r4, r5, r6, pc}
   1032a:	b510      	push	{r4, lr}
   1032c:	4604      	mov	r4, r0
   1032e:	7840      	ldrb	r0, [r0, #1]
   10330:	06c1      	lsls	r1, r0, #27
   10332:	d51c      	bpl.n	1036e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10334:	07c0      	lsls	r0, r0, #31
   10336:	d00b      	beq.n	10350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   10338:	f7fa fc1e 	bl	ab78 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   1033c:	b1b8      	cbz	r0, 1036e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1033e:	7860      	ldrb	r0, [r4, #1]
   10340:	06c1      	lsls	r1, r0, #27
   10342:	d405      	bmi.n	10350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   10344:	0700      	lsls	r0, r0, #28
   10346:	d503      	bpl.n	10350 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   10348:	7d20      	ldrb	r0, [r4, #20]
   1034a:	2802      	cmp	r0, #2
   1034c:	d10f      	bne.n	1036e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1034e:	e010      	b.n	10372 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10350:	7d20      	ldrb	r0, [r4, #20]
   10352:	2802      	cmp	r0, #2
   10354:	d001      	beq.n	1035a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   10356:	7ea0      	ldrb	r0, [r4, #26]
   10358:	b948      	cbnz	r0, 1036e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1035a:	7860      	ldrb	r0, [r4, #1]
   1035c:	0700      	lsls	r0, r0, #28
   1035e:	d408      	bmi.n	10372 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10360:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   10368:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1036c:	d201      	bcs.n	10372 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   1036e:	2011      	movs	r0, #17
   10370:	bd10      	pop	{r4, pc}
   10372:	2000      	movs	r0, #0
   10374:	bd10      	pop	{r4, pc}
   10376:	b538      	push	{r3, r4, r5, lr}
   10378:	4604      	mov	r4, r0
   1037a:	7800      	ldrb	r0, [r0, #0]
   1037c:	28ef      	cmp	r0, #239	; 0xef
   1037e:	d843      	bhi.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10380:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10384:	f8ad 0000 	strh.w	r0, [sp]
   10388:	9800      	ldr	r0, [sp, #0]
   1038a:	f000 f917 	bl	105bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x342>
   1038e:	b3a0      	cbz	r0, 103fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   10390:	7861      	ldrb	r1, [r4, #1]
   10392:	0708      	lsls	r0, r1, #28
   10394:	d40b      	bmi.n	103ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   10396:	f8d4 0002 	ldr.w	r0, [r4, #2]
   1039a:	f8d4 3005 	ldr.w	r3, [r4, #5]
   1039e:	0a02      	lsrs	r2, r0, #8
   103a0:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   103a4:	d830      	bhi.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103a6:	2220      	movs	r2, #32
   103a8:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   103ac:	d82c      	bhi.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103ae:	7a60      	ldrb	r0, [r4, #9]
   103b0:	b318      	cbz	r0, 103fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   103b2:	2807      	cmp	r0, #7
   103b4:	d828      	bhi.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103b6:	7aa0      	ldrb	r0, [r4, #10]
   103b8:	b128      	cbz	r0, 103c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   103ba:	2801      	cmp	r0, #1
   103bc:	d003      	beq.n	103c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   103be:	2802      	cmp	r0, #2
   103c0:	d001      	beq.n	103c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   103c2:	2803      	cmp	r0, #3
   103c4:	d120      	bne.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103c6:	074a      	lsls	r2, r1, #29
   103c8:	d403      	bmi.n	103d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   103ca:	2802      	cmp	r0, #2
   103cc:	d001      	beq.n	103d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   103ce:	2803      	cmp	r0, #3
   103d0:	d105      	bne.n	103de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   103d2:	7ae0      	ldrb	r0, [r4, #11]
   103d4:	b108      	cbz	r0, 103da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   103d6:	2801      	cmp	r0, #1
   103d8:	d116      	bne.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103da:	0748      	lsls	r0, r1, #29
   103dc:	d407      	bmi.n	103ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   103de:	7ca0      	ldrb	r0, [r4, #18]
   103e0:	b128      	cbz	r0, 103ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   103e2:	2801      	cmp	r0, #1
   103e4:	d003      	beq.n	103ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   103e6:	2802      	cmp	r0, #2
   103e8:	d001      	beq.n	103ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   103ea:	2803      	cmp	r0, #3
   103ec:	d10c      	bne.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103ee:	06c8      	lsls	r0, r1, #27
   103f0:	7d20      	ldrb	r0, [r4, #20]
   103f2:	d503      	bpl.n	103fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   103f4:	2801      	cmp	r0, #1
   103f6:	d107      	bne.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103f8:	e002      	b.n	10400 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   103fa:	e005      	b.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103fc:	2802      	cmp	r0, #2
   103fe:	d003      	beq.n	10408 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10400:	7e20      	ldrb	r0, [r4, #24]
   10402:	b118      	cbz	r0, 1040c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10404:	2801      	cmp	r0, #1
   10406:	d001      	beq.n	1040c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10408:	2012      	movs	r0, #18
   1040a:	bd38      	pop	{r3, r4, r5, pc}
   1040c:	2000      	movs	r0, #0
   1040e:	bd38      	pop	{r3, r4, r5, pc}
   10410:	b510      	push	{r4, lr}
   10412:	0004      	movs	r4, r0
   10414:	d005      	beq.n	10422 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10416:	f7fa fbed 	bl	abf4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1041a:	4384      	bics	r4, r0
   1041c:	d001      	beq.n	10422 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   1041e:	2000      	movs	r0, #0
   10420:	bd10      	pop	{r4, pc}
   10422:	2001      	movs	r0, #1
   10424:	bd10      	pop	{r4, pc}
   10426:	28fb      	cmp	r0, #251	; 0xfb
   10428:	d803      	bhi.n	10432 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   1042a:	f640 0048 	movw	r0, #2120	; 0x848
   1042e:	4281      	cmp	r1, r0
   10430:	d901      	bls.n	10436 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   10432:	2011      	movs	r0, #17
   10434:	4770      	bx	lr
   10436:	2000      	movs	r0, #0
   10438:	4770      	bx	lr
   1043a:	381b      	subs	r0, #27
   1043c:	28e1      	cmp	r0, #225	; 0xe1
   1043e:	d206      	bcs.n	1044e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   10440:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10444:	d303      	bcc.n	1044e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   10446:	f244 2090 	movw	r0, #17040	; 0x4290
   1044a:	4281      	cmp	r1, r0
   1044c:	d901      	bls.n	10452 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   1044e:	2012      	movs	r0, #18
   10450:	4770      	bx	lr
   10452:	2000      	movs	r0, #0
   10454:	4770      	bx	lr
   10456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1045a:	4606      	mov	r6, r0
   1045c:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10460:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   10464:	4615      	mov	r5, r2
   10466:	302c      	adds	r0, #44	; 0x2c
   10468:	f7f7 fda6 	bl	7fb8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   1046c:	4680      	mov	r8, r0
   1046e:	2102      	movs	r1, #2
   10470:	f7fd fb12 	bl	da98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10474:	4287      	cmp	r7, r0
   10476:	d200      	bcs.n	1047a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   10478:	4638      	mov	r0, r7
   1047a:	4607      	mov	r7, r0
   1047c:	2102      	movs	r1, #2
   1047e:	4640      	mov	r0, r8
   10480:	f7fd fb0a 	bl	da98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10484:	4284      	cmp	r4, r0
   10486:	d200      	bcs.n	1048a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   10488:	4620      	mov	r0, r4
   1048a:	8831      	ldrh	r1, [r6, #0]
   1048c:	8029      	strh	r1, [r5, #0]
   1048e:	2f1b      	cmp	r7, #27
   10490:	d913      	bls.n	104ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   10492:	2ffb      	cmp	r7, #251	; 0xfb
   10494:	d300      	bcc.n	10498 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   10496:	27fb      	movs	r7, #251	; 0xfb
   10498:	806f      	strh	r7, [r5, #2]
   1049a:	281b      	cmp	r0, #27
   1049c:	d90f      	bls.n	104be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   1049e:	28fb      	cmp	r0, #251	; 0xfb
   104a0:	d300      	bcc.n	104a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   104a2:	20fb      	movs	r0, #251	; 0xfb
   104a4:	80e8      	strh	r0, [r5, #6]
   104a6:	4640      	mov	r0, r8
   104a8:	f7ff fee9 	bl	1027e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   104ac:	80a8      	strh	r0, [r5, #4]
   104ae:	4640      	mov	r0, r8
   104b0:	f7ff fee5 	bl	1027e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   104b4:	8128      	strh	r0, [r5, #8]
   104b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   104ba:	271b      	movs	r7, #27
   104bc:	e7ec      	b.n	10498 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   104be:	201b      	movs	r0, #27
   104c0:	e7f0      	b.n	104a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   104c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104c6:	7890      	ldrb	r0, [r2, #2]
   104c8:	9e06      	ldr	r6, [sp, #24]
   104ca:	461d      	mov	r5, r3
   104cc:	4614      	mov	r4, r2
   104ce:	b908      	cbnz	r0, 104d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   104d0:	f7fa fb90 	bl	abf4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   104d4:	78e4      	ldrb	r4, [r4, #3]
   104d6:	4607      	mov	r7, r0
   104d8:	b914      	cbnz	r4, 104e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   104da:	f7fa fb8b 	bl	abf4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   104de:	4604      	mov	r4, r0
   104e0:	b16f      	cbz	r7, 104fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   104e2:	b164      	cbz	r4, 104fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   104e4:	4638      	mov	r0, r7
   104e6:	f7ff fed5 	bl	10294 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   104ea:	4620      	mov	r0, r4
   104ec:	f7ff fed2 	bl	10294 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   104f0:	b12f      	cbz	r7, 104fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   104f2:	b124      	cbz	r4, 104fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   104f4:	702f      	strb	r7, [r5, #0]
   104f6:	7034      	strb	r4, [r6, #0]
   104f8:	2000      	movs	r0, #0
   104fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   104fe:	2009      	movs	r0, #9
   10500:	e7fb      	b.n	104fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   10502:	207f      	movs	r0, #127	; 0x7f
   10504:	f000 b83c 	b.w	10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   10508:	b508      	push	{r3, lr}
   1050a:	f890 124c 	ldrb.w	r1, [r0, #588]	; 0x24c
   1050e:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
   10512:	f88d 0000 	strb.w	r0, [sp]
   10516:	9800      	ldr	r0, [sp, #0]
   10518:	9000      	str	r0, [sp, #0]
   1051a:	f89d 0000 	ldrb.w	r0, [sp]
   1051e:	b100      	cbz	r0, 10522 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   10520:	2001      	movs	r0, #1
   10522:	1e40      	subs	r0, r0, #1
   10524:	4208      	tst	r0, r1
   10526:	d003      	beq.n	10530 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   10528:	2904      	cmp	r1, #4
   1052a:	d001      	beq.n	10530 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   1052c:	2001      	movs	r0, #1
   1052e:	bd08      	pop	{r3, pc}
   10530:	2000      	movs	r0, #0
   10532:	bd08      	pop	{r3, pc}
   10534:	b570      	push	{r4, r5, r6, lr}
   10536:	4605      	mov	r5, r0
   10538:	f7fe f94d 	bl	e7d6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1053c:	b170      	cbz	r0, 1055c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   1053e:	4628      	mov	r0, r5
   10540:	f7fe fafe 	bl	eb40 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10544:	2800      	cmp	r0, #0
   10546:	d008      	beq.n	1055a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   10548:	4628      	mov	r0, r5
   1054a:	f7fe faf6 	bl	eb3a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   1054e:	4604      	mov	r4, r0
   10550:	4628      	mov	r0, r5
   10552:	f7fe facc 	bl	eaee <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   10556:	b118      	cbz	r0, 10560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   10558:	200c      	movs	r0, #12
   1055a:	bd70      	pop	{r4, r5, r6, pc}
   1055c:	2042      	movs	r0, #66	; 0x42
   1055e:	bd70      	pop	{r4, r5, r6, pc}
   10560:	b164      	cbz	r4, 1057c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10562:	8820      	ldrh	r0, [r4, #0]
   10564:	f7fd f928 	bl	d7b8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   10568:	8820      	ldrh	r0, [r4, #0]
   1056a:	2100      	movs	r1, #0
   1056c:	f7f4 fd20 	bl	4fb0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10570:	b120      	cbz	r0, 1057c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10572:	f241 6154 	movw	r1, #5716	; 0x1654
   10576:	2039      	movs	r0, #57	; 0x39
   10578:	f7f4 fa98 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1057c:	2000      	movs	r0, #0
   1057e:	bd70      	pop	{r4, r5, r6, pc}
   10580:	b508      	push	{r3, lr}
   10582:	f640 1288 	movw	r2, #2440	; 0x988
   10586:	4669      	mov	r1, sp
   10588:	f7f4 f972 	bl	4870 <mpsl_fem_tx_power_split>
   1058c:	bd08      	pop	{r3, pc}
   1058e:	b530      	push	{r4, r5, lr}
   10590:	f340 0400 	sbfx	r4, r0, #0, #1
   10594:	f340 0040 	sbfx	r0, r0, #1, #1
   10598:	1c40      	adds	r0, r0, #1
   1059a:	9d03      	ldr	r5, [sp, #12]
   1059c:	1c64      	adds	r4, r4, #1
   1059e:	d000      	beq.n	105a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x328>
   105a0:	b119      	cbz	r1, 105aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x330>
   105a2:	b100      	cbz	r0, 105a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32c>
   105a4:	b10a      	cbz	r2, 105aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x330>
   105a6:	b91c      	cbnz	r4, 105b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   105a8:	e001      	b.n	105ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x334>
   105aa:	2011      	movs	r0, #17
   105ac:	bd30      	pop	{r4, r5, pc}
   105ae:	2100      	movs	r1, #0
   105b0:	7019      	strb	r1, [r3, #0]
   105b2:	b900      	cbnz	r0, 105b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33c>
   105b4:	2200      	movs	r2, #0
   105b6:	702a      	strb	r2, [r5, #0]
   105b8:	2000      	movs	r0, #0
   105ba:	bd30      	pop	{r4, r5, pc}
   105bc:	b2c0      	uxtb	r0, r0
   105be:	06c1      	lsls	r1, r0, #27
   105c0:	d40c      	bmi.n	105dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x362>
   105c2:	0681      	lsls	r1, r0, #26
   105c4:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   105c8:	d503      	bpl.n	105d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x358>
   105ca:	b9d1      	cbnz	r1, 10602 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   105cc:	0781      	lsls	r1, r0, #30
   105ce:	d418      	bmi.n	10602 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   105d0:	e001      	b.n	105d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35c>
   105d2:	2900      	cmp	r1, #0
   105d4:	d1fa      	bne.n	105cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   105d6:	0700      	lsls	r0, r0, #28
   105d8:	d413      	bmi.n	10602 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   105da:	e010      	b.n	105fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x384>
   105dc:	0641      	lsls	r1, r0, #25
   105de:	d410      	bmi.n	10602 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   105e0:	0681      	lsls	r1, r0, #26
   105e2:	d40e      	bmi.n	10602 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   105e4:	07c1      	lsls	r1, r0, #31
   105e6:	ea4f 7180 	mov.w	r1, r0, lsl #30
   105ea:	d004      	beq.n	105f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
   105ec:	2900      	cmp	r1, #0
   105ee:	db02      	blt.n	105f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37c>
   105f0:	0740      	lsls	r0, r0, #29
   105f2:	d404      	bmi.n	105fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x384>
   105f4:	e005      	b.n	10602 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   105f6:	0701      	lsls	r1, r0, #28
   105f8:	d403      	bmi.n	10602 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   105fa:	0740      	lsls	r0, r0, #29
   105fc:	d401      	bmi.n	10602 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x388>
   105fe:	2001      	movs	r0, #1
   10600:	4770      	bx	lr
   10602:	2000      	movs	r0, #0
   10604:	4770      	bx	lr
   10606:	b510      	push	{r4, lr}
   10608:	f7f7 fcba 	bl	7f80 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   1060c:	b110      	cbz	r0, 10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   1060e:	f240 110d 	movw	r1, #269	; 0x10d
   10612:	e004      	b.n	1061e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a4>
   10614:	f7f6 fe34 	bl	7280 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10618:	b120      	cbz	r0, 10624 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   1061a:	f44f 7189 	mov.w	r1, #274	; 0x112
   1061e:	2001      	movs	r0, #1
   10620:	f7f4 fa44 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10628:	2001      	movs	r0, #1
   1062a:	f7fc befb 	b.w	d424 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1062e:	6802      	ldr	r2, [r0, #0]
   10630:	b912      	cbnz	r2, 10638 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   10632:	6001      	str	r1, [r0, #0]
   10634:	4770      	bx	lr
   10636:	4602      	mov	r2, r0
   10638:	6850      	ldr	r0, [r2, #4]
   1063a:	b108      	cbz	r0, 10640 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   1063c:	428a      	cmp	r2, r1
   1063e:	d1fa      	bne.n	10636 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   10640:	428a      	cmp	r2, r1
   10642:	d0f7      	beq.n	10634 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   10644:	6051      	str	r1, [r2, #4]
   10646:	4770      	bx	lr
   10648:	b510      	push	{r4, lr}
   1064a:	4604      	mov	r4, r0
   1064c:	e002      	b.n	10654 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3da>
   1064e:	6820      	ldr	r0, [r4, #0]
   10650:	4780      	blx	r0
   10652:	6864      	ldr	r4, [r4, #4]
   10654:	2c00      	cmp	r4, #0
   10656:	d1fa      	bne.n	1064e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d4>
   10658:	bd10      	pop	{r4, pc}
   1065a:	b510      	push	{r4, lr}
   1065c:	2000      	movs	r0, #0
   1065e:	f7fc fee1 	bl	d424 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10662:	f7f4 fe07 	bl	5274 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10666:	f7f5 f89f 	bl	57a8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1066a:	f7f5 fa51 	bl	5b10 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   1066e:	2800      	cmp	r0, #0
   10670:	d003      	beq.n	1067a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
   10672:	21ec      	movs	r1, #236	; 0xec
   10674:	2001      	movs	r0, #1
   10676:	f7f4 fa19 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1067a:	bd10      	pop	{r4, pc}
   1067c:	b510      	push	{r4, lr}
   1067e:	f7ff ffc2 	bl	10606 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   10682:	f7fe fe14 	bl	f2ae <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10686:	2800      	cmp	r0, #0
   10688:	d004      	beq.n	10694 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
   1068a:	f240 1129 	movw	r1, #297	; 0x129
   1068e:	2001      	movs	r0, #1
   10690:	f7f4 fa0c 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10694:	bd10      	pop	{r4, pc}

00010696 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10696:	f7f3 be33 	b.w	4300 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   1069a:	0001      	.short	0x0001
   1069c:	0002000b 	.word	0x0002000b
   106a0:	0005000a 	.word	0x0005000a
   106a4:	000a0009 	.word	0x000a0009
   106a8:	00140008 	.word	0x00140008
   106ac:	001e0007 	.word	0x001e0007
   106b0:	00320006 	.word	0x00320006
   106b4:	004b0005 	.word	0x004b0005
   106b8:	00640004 	.word	0x00640004
   106bc:	00960003 	.word	0x00960003
   106c0:	00fa0002 	.word	0x00fa0002
   106c4:	01f40001 	.word	0x01f40001
	...

000106ca <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   106ca:	b510      	push	{r4, lr}
   106cc:	f7fa fe2c 	bl	b328 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   106d0:	f000 f81d 	bl	1070e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   106d4:	f7fa fb02 	bl	acdc <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   106d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   106dc:	f7fa bbfc 	b.w	aed8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000106e0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   106e0:	b510      	push	{r4, lr}
   106e2:	24c8      	movs	r4, #200	; 0xc8
   106e4:	1e64      	subs	r4, r4, #1
   106e6:	b2e4      	uxtb	r4, r4
   106e8:	f7fa fb16 	bl	ad18 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   106ec:	2802      	cmp	r0, #2
   106ee:	d003      	beq.n	106f8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   106f0:	2801      	cmp	r0, #1
   106f2:	d000      	beq.n	106f6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   106f4:	2000      	movs	r0, #0
   106f6:	bd10      	pop	{r4, pc}
   106f8:	2c00      	cmp	r4, #0
   106fa:	d1f3      	bne.n	106e4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   106fc:	21b1      	movs	r1, #177	; 0xb1
   106fe:	203b      	movs	r0, #59	; 0x3b
   10700:	f7f4 f9d4 	bl	4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10704:	5840      	ldr	r0, [r0, r1]
   10706:	2800      	cmp	r0, #0
   10708:	d000      	beq.n	1070c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1070a:	2001      	movs	r0, #1
   1070c:	4770      	bx	lr

0001070e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1070e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10712:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10716:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1071a:	f3bf 8f4f 	dsb	sy
   1071e:	f3bf 8f6f 	isb	sy
   10722:	f7fa bc73 	b.w	b00c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10726:	2800      	cmp	r0, #0
   10728:	db09      	blt.n	1073e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1072a:	f000 021f 	and.w	r2, r0, #31
   1072e:	2101      	movs	r1, #1
   10730:	4091      	lsls	r1, r2
   10732:	0940      	lsrs	r0, r0, #5
   10734:	0080      	lsls	r0, r0, #2
   10736:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1073a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1073e:	4770      	bx	lr
   10740:	2800      	cmp	r0, #0
   10742:	db0d      	blt.n	10760 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10744:	f000 021f 	and.w	r2, r0, #31
   10748:	2101      	movs	r1, #1
   1074a:	4091      	lsls	r1, r2
   1074c:	0940      	lsrs	r0, r0, #5
   1074e:	0080      	lsls	r0, r0, #2
   10750:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10754:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10758:	f3bf 8f4f 	dsb	sy
   1075c:	f3bf 8f6f 	isb	sy
   10760:	4770      	bx	lr
   10762:	5840      	ldr	r0, [r0, r1]
   10764:	2800      	cmp	r0, #0
   10766:	d000      	beq.n	1076a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10768:	2001      	movs	r0, #1
   1076a:	4770      	bx	lr
   1076c:	5840      	ldr	r0, [r0, r1]
   1076e:	2800      	cmp	r0, #0
   10770:	d000      	beq.n	10774 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10772:	2001      	movs	r0, #1
   10774:	4770      	bx	lr

00010776 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10776:	b510      	push	{r4, lr}
   10778:	4604      	mov	r4, r0
   1077a:	4608      	mov	r0, r1
   1077c:	f7fa fefa 	bl	b574 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10780:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10784:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10788:	fbb0 f0f1 	udiv	r0, r0, r1
   1078c:	1a20      	subs	r0, r4, r0
   1078e:	1e80      	subs	r0, r0, #2
   10790:	bd10      	pop	{r4, pc}

00010792 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10792:	b510      	push	{r4, lr}
   10794:	4604      	mov	r4, r0
   10796:	4608      	mov	r0, r1
   10798:	f7fa feec 	bl	b574 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1079c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   107a0:	fbb0 f0f1 	udiv	r0, r0, r1
   107a4:	1a20      	subs	r0, r4, r0
   107a6:	bd10      	pop	{r4, pc}
   107a8:	f4f0ecd8 	.word	0xf4f0ecd8
   107ac:	0200fcf8 	.word	0x0200fcf8
   107b0:	06050403 	.word	0x06050403
   107b4:	00000807 	.word	0x00000807
	...
   107c8:	01010000 	.word	0x01010000
   107cc:	02020101 	.word	0x02020101
   107d0:	03030202 	.word	0x03030202
   107d4:	04040303 	.word	0x04040303
   107d8:	05050404 	.word	0x05050404
   107dc:	06060505 	.word	0x06060505
   107e0:	0a090807 	.word	0x0a090807
   107e4:	000d0c0b 	.word	0x000d0c0b
	...
   107f8:	01000000 	.word	0x01000000
   107fc:	02010101 	.word	0x02010101
   10800:	03020202 	.word	0x03020202
   10804:	04030303 	.word	0x04030303
   10808:	05040404 	.word	0x05040404
   1080c:	06050505 	.word	0x06050505
   10810:	09080606 	.word	0x09080606
   10814:	1702080c 	.word	0x1702080c
   10818:	0201010d 	.word	0x0201010d
   1081c:	01010909 	.word	0x01010909
   10820:	18090206 	.word	0x18090206
   10824:	01010318 	.word	0x01010318
   10828:	03030909 	.word	0x03030909
   1082c:	01020305 	.word	0x01020305
   10830:	24020223 	.word	0x24020223
   10834:	04041009 	.word	0x04041009
   10838:	0b0b0505 	.word	0x0b0b0505
   1083c:	002b0b04 	.word	0x002b0b04

00010840 <adv_handler>:
        return;
    }

    printk("Regular advertising started\n");
}
static void adv_handler(struct k_work *work) {
   10840:	b570      	push	{r4, r5, r6, lr}
    adv_param = *BT_LE_ADV_CONN;
   10842:	4c0e      	ldr	r4, [pc, #56]	; (1087c <adv_handler+0x3c>)
   10844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
static void adv_handler(struct k_work *work) {
   10846:	b08c      	sub	sp, #48	; 0x30
    adv_param = *BT_LE_ADV_CONN;
   10848:	ad07      	add	r5, sp, #28
   1084a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1084c:	ad07      	add	r5, sp, #28
   1084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10850:	6826      	ldr	r6, [r4, #0]
   10852:	ac02      	add	r4, sp, #8
   10854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    err = bt_le_adv_start(&adv_param, ad, ARRAY_SIZE(ad),
   10856:	2300      	movs	r3, #0
   10858:	4909      	ldr	r1, [pc, #36]	; (10880 <adv_handler+0x40>)
    adv_param = *BT_LE_ADV_CONN;
   1085a:	6026      	str	r6, [r4, #0]
    err = bt_le_adv_start(&adv_param, ad, ARRAY_SIZE(ad),
   1085c:	2202      	movs	r2, #2
   1085e:	9300      	str	r3, [sp, #0]
   10860:	a802      	add	r0, sp, #8
   10862:	f004 fbcb 	bl	14ffc <bt_le_adv_start>
    if (err) {
   10866:	4601      	mov	r1, r0
   10868:	b120      	cbz	r0, 10874 <adv_handler+0x34>
        printk("Advertising failed to start (err %d)\n", err);
   1086a:	4806      	ldr	r0, [pc, #24]	; (10884 <adv_handler+0x44>)
   1086c:	f012 f9b4 	bl	22bd8 <printk>
    adv_continue();
}
   10870:	b00c      	add	sp, #48	; 0x30
   10872:	bd70      	pop	{r4, r5, r6, pc}
    printk("Regular advertising started\n");
   10874:	4804      	ldr	r0, [pc, #16]	; (10888 <adv_handler+0x48>)
   10876:	f012 f9af 	bl	22bd8 <printk>
}
   1087a:	e7f9      	b.n	10870 <adv_handler+0x30>
   1087c:	00025a30 	.word	0x00025a30
   10880:	00025ba4 	.word	0x00025ba4
   10884:	00026360 	.word	0x00026360
   10888:	00026386 	.word	0x00026386

0001088c <nfc_callback>:
	switch (event) {
   1088c:	2901      	cmp	r1, #1
static void nfc_callback(void *context, nfc_t2t_event_t event, const uint8_t *data, size_t data_length) {
   1088e:	b508      	push	{r3, lr}
	switch (event) {
   10890:	d002      	beq.n	10898 <nfc_callback+0xc>
   10892:	2902      	cmp	r1, #2
   10894:	d024      	beq.n	108e0 <nfc_callback+0x54>
}
   10896:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   10898:	f014 fddd 	bl	25456 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1089c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   108a0:	fba0 0302 	umull	r0, r3, r0, r2
   108a4:	fb02 3101 	mla	r1, r2, r1, r3
   108a8:	0bc0      	lsrs	r0, r0, #15
			uint32_t seconds = k_uptime_get() / 1000;
   108aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   108ae:	2300      	movs	r3, #0
   108b0:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   108b4:	0bc9      	lsrs	r1, r1, #15
   108b6:	f7ef ff17 	bl	6e8 <__aeabi_ldivmod>
			seconds -= hours * 3600U;
   108ba:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   108be:	fbb0 f1f3 	udiv	r1, r0, r3
   108c2:	fb03 0011 	mls	r0, r3, r1, r0
			printk("[%02u:%02u:%02u] nfc field detected\n", hours, minutes, seconds) ;
   108c6:	233c      	movs	r3, #60	; 0x3c
   108c8:	fbb0 f2f3 	udiv	r2, r0, r3
   108cc:	fb03 0312 	mls	r3, r3, r2, r0
   108d0:	4806      	ldr	r0, [pc, #24]	; (108ec <nfc_callback+0x60>)
   108d2:	f012 f981 	bl	22bd8 <printk>
}
   108d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			dk_set_led_on(NFC_FIELD_LED);
   108da:	2000      	movs	r0, #0
   108dc:	f014 ba55 	b.w	24d8a <dk_set_led_on>
}
   108e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			dk_set_led_off(NFC_FIELD_LED);
   108e4:	2000      	movs	r0, #0
   108e6:	f014 ba53 	b.w	24d90 <dk_set_led_off>
   108ea:	bf00      	nop
   108ec:	000263a3 	.word	0x000263a3

000108f0 <bt_ready>:
static void adv_start(void) {
    k_work_submit(&adv_work);
}

static void bt_ready(int err)
{
   108f0:	b508      	push	{r3, lr}
	if (err) {
   108f2:	4601      	mov	r1, r0
   108f4:	b120      	cbz	r0, 10900 <bt_ready+0x10>

	printk("Bluetooth initialized\n");
	bt_conn_cb_register(&bt_conn_callbacks);
	adv_start();
	k_sem_give(&ble_init_ok);
}
   108f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Bluetooth init failed (err %d)\n", err);
   108fa:	4808      	ldr	r0, [pc, #32]	; (1091c <bt_ready+0x2c>)
   108fc:	f012 b96c 	b.w	22bd8 <printk>
	printk("Bluetooth initialized\n");
   10900:	4807      	ldr	r0, [pc, #28]	; (10920 <bt_ready+0x30>)
   10902:	f012 f969 	bl	22bd8 <printk>
	bt_conn_cb_register(&bt_conn_callbacks);
   10906:	4807      	ldr	r0, [pc, #28]	; (10924 <bt_ready+0x34>)
   10908:	f005 f928 	bl	15b5c <bt_conn_cb_register>
    k_work_submit(&adv_work);
   1090c:	4806      	ldr	r0, [pc, #24]	; (10928 <bt_ready+0x38>)
   1090e:	f00c fe3f 	bl	1d590 <k_work_submit>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   10912:	4806      	ldr	r0, [pc, #24]	; (1092c <bt_ready+0x3c>)
}
   10914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10918:	f00c bb46 	b.w	1cfa8 <z_impl_k_sem_give>
   1091c:	000263c8 	.word	0x000263c8
   10920:	000263e8 	.word	0x000263e8
   10924:	200004d8 	.word	0x200004d8
   10928:	20002188 	.word	0x20002188
   1092c:	20000a98 	.word	0x20000a98

00010930 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10930:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   10932:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10934:	b08a      	sub	sp, #40	; 0x28
   10936:	4604      	mov	r4, r0
   10938:	460e      	mov	r6, r1
   1093a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   1093c:	2b03      	cmp	r3, #3
   1093e:	d820      	bhi.n	10982 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   10940:	e8df f003 	tbb	[pc, r3]
   10944:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10948:	4911      	ldr	r1, [pc, #68]	; (10990 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   1094a:	4628      	mov	r0, r5
   1094c:	f012 fdbf 	bl	234ce <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10950:	9505      	str	r5, [sp, #20]
   10952:	7863      	ldrb	r3, [r4, #1]
   10954:	9304      	str	r3, [sp, #16]
   10956:	78a3      	ldrb	r3, [r4, #2]
   10958:	9303      	str	r3, [sp, #12]
   1095a:	78e3      	ldrb	r3, [r4, #3]
   1095c:	9302      	str	r3, [sp, #8]
   1095e:	7923      	ldrb	r3, [r4, #4]
   10960:	9301      	str	r3, [sp, #4]
   10962:	7963      	ldrb	r3, [r4, #5]
   10964:	9300      	str	r3, [sp, #0]
   10966:	79a3      	ldrb	r3, [r4, #6]
   10968:	4a0a      	ldr	r2, [pc, #40]	; (10994 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   1096a:	211e      	movs	r1, #30
   1096c:	4630      	mov	r0, r6
   1096e:	f012 f940 	bl	22bf2 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   10972:	b00a      	add	sp, #40	; 0x28
   10974:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   10976:	4908      	ldr	r1, [pc, #32]	; (10998 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   10978:	e7e7      	b.n	1094a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   1097a:	4908      	ldr	r1, [pc, #32]	; (1099c <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   1097c:	e7e5      	b.n	1094a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   1097e:	4908      	ldr	r1, [pc, #32]	; (109a0 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   10980:	e7e3      	b.n	1094a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10982:	4a08      	ldr	r2, [pc, #32]	; (109a4 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   10984:	210a      	movs	r1, #10
   10986:	4628      	mov	r0, r5
   10988:	f012 f933 	bl	22bf2 <snprintk>
		break;
   1098c:	e7e0      	b.n	10950 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   1098e:	bf00      	nop
   10990:	000263ff 	.word	0x000263ff
   10994:	00026428 	.word	0x00026428
   10998:	00026406 	.word	0x00026406
   1099c:	0002640d 	.word	0x0002640d
   109a0:	00026417 	.word	0x00026417
   109a4:	00026421 	.word	0x00026421

000109a8 <read_timer>:
{
   109a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   109ac:	4699      	mov	r9, r3
	uint32_t timer = 60 - (uint32_t) ((end - start) / timerConversion);
   109ae:	4b1d      	ldr	r3, [pc, #116]	; (10a24 <read_timer+0x7c>)
   109b0:	4e1d      	ldr	r6, [pc, #116]	; (10a28 <read_timer+0x80>)
{
   109b2:	4604      	mov	r4, r0
	uint32_t timer = 60 - (uint32_t) ((end - start) / timerConversion);
   109b4:	6818      	ldr	r0, [r3, #0]
   109b6:	4b1d      	ldr	r3, [pc, #116]	; (10a2c <read_timer+0x84>)
   109b8:	681b      	ldr	r3, [r3, #0]
{
   109ba:	b08f      	sub	sp, #60	; 0x3c
	uint32_t timer = 60 - (uint32_t) ((end - start) / timerConversion);
   109bc:	1ac0      	subs	r0, r0, r3
{
   109be:	4690      	mov	r8, r2
   109c0:	460f      	mov	r7, r1
	uint32_t timer = 60 - (uint32_t) ((end - start) / timerConversion);
   109c2:	f7ef fc53 	bl	26c <__aeabi_ui2f>
   109c6:	4b1a      	ldr	r3, [pc, #104]	; (10a30 <read_timer+0x88>)
   109c8:	6819      	ldr	r1, [r3, #0]
   109ca:	f7ef fd5b 	bl	484 <__aeabi_fdiv>
   109ce:	f7ef fe6b 	bl	6a8 <__aeabi_f2uiz>
   109d2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   109d6:	9005      	str	r0, [sp, #20]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   109d8:	4620      	mov	r0, r4
   109da:	f013 f892 	bl	23b02 <bt_conn_get_dst>
   109de:	a906      	add	r1, sp, #24
   109e0:	f7ff ffa6 	bl	10930 <bt_addr_le_to_str.constprop.0.isra.0>
	for (int i = 0; i < 4; i++){
   109e4:	2500      	movs	r5, #0
		if(strcmp(addr, queue[i]) == 0){
   109e6:	4631      	mov	r1, r6
   109e8:	a806      	add	r0, sp, #24
   109ea:	f012 fd8a 	bl	23502 <strcmp>
   109ee:	b990      	cbnz	r0, 10a16 <read_timer+0x6e>
			printk("Timer");
   109f0:	4810      	ldr	r0, [pc, #64]	; (10a34 <read_timer+0x8c>)
   109f2:	f012 f8f1 	bl	22bd8 <printk>
			return bt_gatt_attr_read(conn, attr, buf, len, offset, &timer,
   109f6:	2304      	movs	r3, #4
   109f8:	9302      	str	r3, [sp, #8]
   109fa:	ab05      	add	r3, sp, #20
   109fc:	9301      	str	r3, [sp, #4]
   109fe:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   10a02:	9300      	str	r3, [sp, #0]
   10a04:	4642      	mov	r2, r8
   10a06:	464b      	mov	r3, r9
   10a08:	4639      	mov	r1, r7
   10a0a:	4620      	mov	r0, r4
   10a0c:	f013 fe91 	bl	24732 <bt_gatt_attr_read>
}
   10a10:	b00f      	add	sp, #60	; 0x3c
   10a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < 4; i++){
   10a16:	3501      	adds	r5, #1
   10a18:	2d04      	cmp	r5, #4
   10a1a:	f106 061e 	add.w	r6, r6, #30
   10a1e:	d1e2      	bne.n	109e6 <read_timer+0x3e>
   10a20:	e7f6      	b.n	10a10 <read_timer+0x68>
   10a22:	bf00      	nop
   10a24:	20002198 	.word	0x20002198
   10a28:	20003b7e 	.word	0x20003b7e
   10a2c:	2000219c 	.word	0x2000219c
   10a30:	200005cc 	.word	0x200005cc
   10a34:	0002644b 	.word	0x0002644b

00010a38 <read_queue>:
{
   10a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10a3c:	b08d      	sub	sp, #52	; 0x34
   10a3e:	460f      	mov	r7, r1
   10a40:	4690      	mov	r8, r2
   10a42:	4699      	mov	r9, r3
   10a44:	4606      	mov	r6, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10a46:	f013 f85c 	bl	23b02 <bt_conn_get_dst>
   10a4a:	a904      	add	r1, sp, #16
   10a4c:	f7ff ff70 	bl	10930 <bt_addr_le_to_str.constprop.0.isra.0>
	for (int i = 0; i < 4; i++){
   10a50:	4d15      	ldr	r5, [pc, #84]	; (10aa8 <read_queue+0x70>)
   10a52:	2400      	movs	r4, #0
		if(strcmp(addr, queue[i]) == 0){
   10a54:	4629      	mov	r1, r5
   10a56:	a804      	add	r0, sp, #16
   10a58:	f012 fd53 	bl	23502 <strcmp>
   10a5c:	b9f0      	cbnz	r0, 10a9c <read_queue+0x64>
			printk("%u\n", queueNumber[i]);
   10a5e:	4d13      	ldr	r5, [pc, #76]	; (10aac <read_queue+0x74>)
			printk("%s\n", addr);
   10a60:	4813      	ldr	r0, [pc, #76]	; (10ab0 <read_queue+0x78>)
   10a62:	a904      	add	r1, sp, #16
   10a64:	f012 f8b8 	bl	22bd8 <printk>
			printk("%u\n", queueNumber[i]);
   10a68:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
   10a6c:	4811      	ldr	r0, [pc, #68]	; (10ab4 <read_queue+0x7c>)
   10a6e:	f012 f8b3 	bl	22bd8 <printk>
			printk("%u\n", i);
   10a72:	4810      	ldr	r0, [pc, #64]	; (10ab4 <read_queue+0x7c>)
   10a74:	4621      	mov	r1, r4
   10a76:	f012 f8af 	bl	22bd8 <printk>
			return bt_gatt_attr_read(conn, attr, buf, len, offset, &queueNumber[i],
   10a7a:	2304      	movs	r3, #4
   10a7c:	9302      	str	r3, [sp, #8]
   10a7e:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   10a82:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   10a86:	9300      	str	r3, [sp, #0]
   10a88:	9501      	str	r5, [sp, #4]
   10a8a:	464b      	mov	r3, r9
   10a8c:	4642      	mov	r2, r8
   10a8e:	4639      	mov	r1, r7
   10a90:	4630      	mov	r0, r6
   10a92:	f013 fe4e 	bl	24732 <bt_gatt_attr_read>
}
   10a96:	b00d      	add	sp, #52	; 0x34
   10a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < 4; i++){
   10a9c:	3401      	adds	r4, #1
   10a9e:	2c04      	cmp	r4, #4
   10aa0:	f105 051e 	add.w	r5, r5, #30
   10aa4:	d1d6      	bne.n	10a54 <read_queue+0x1c>
   10aa6:	e7f6      	b.n	10a96 <read_queue+0x5e>
   10aa8:	20003b7e 	.word	0x20003b7e
   10aac:	200005d4 	.word	0x200005d4
   10ab0:	00028226 	.word	0x00028226
   10ab4:	0002829b 	.word	0x0002829b

00010ab8 <connected>:
{
   10ab8:	b530      	push	{r4, r5, lr}
   10aba:	4605      	mov	r5, r0
   10abc:	b089      	sub	sp, #36	; 0x24
	if (err) {
   10abe:	b129      	cbz	r1, 10acc <connected+0x14>
		printk("Connection failed (err 0x%02x)\n", err);
   10ac0:	4814      	ldr	r0, [pc, #80]	; (10b14 <connected+0x5c>)
}
   10ac2:	b009      	add	sp, #36	; 0x24
   10ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Connection failed (err 0x%02x)\n", err);
   10ac8:	f012 b886 	b.w	22bd8 <printk>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10acc:	f013 f819 	bl	23b02 <bt_conn_get_dst>
   10ad0:	4669      	mov	r1, sp
   10ad2:	f7ff ff2d 	bl	10930 <bt_addr_le_to_str.constprop.0.isra.0>
		strcpy(queue[count], addr);
   10ad6:	4c10      	ldr	r4, [pc, #64]	; (10b18 <connected+0x60>)
		printk("Connected\n");
   10ad8:	4810      	ldr	r0, [pc, #64]	; (10b1c <connected+0x64>)
   10ada:	f012 f87d 	bl	22bd8 <printk>
		printk("Address: %s\n", addr);
   10ade:	4810      	ldr	r0, [pc, #64]	; (10b20 <connected+0x68>)
   10ae0:	4669      	mov	r1, sp
   10ae2:	f012 f879 	bl	22bd8 <printk>
		strcpy(queue[count], addr);
   10ae6:	6822      	ldr	r2, [r4, #0]
   10ae8:	4b0e      	ldr	r3, [pc, #56]	; (10b24 <connected+0x6c>)
   10aea:	201e      	movs	r0, #30
   10aec:	fb00 3002 	mla	r0, r0, r2, r3
   10af0:	4669      	mov	r1, sp
   10af2:	f012 fcec 	bl	234ce <strcpy>
		connectionQueue[count] = conn;
   10af6:	6823      	ldr	r3, [r4, #0]
   10af8:	4a0b      	ldr	r2, [pc, #44]	; (10b28 <connected+0x70>)
   10afa:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
		if(count == 0){
   10afe:	b91b      	cbnz	r3, 10b08 <connected+0x50>
			start = k_uptime_get_32();
   10b00:	f012 f848 	bl	22b94 <k_uptime_get_32>
   10b04:	4b09      	ldr	r3, [pc, #36]	; (10b2c <connected+0x74>)
   10b06:	6018      	str	r0, [r3, #0]
		count++;
   10b08:	6823      	ldr	r3, [r4, #0]
   10b0a:	3301      	adds	r3, #1
   10b0c:	6023      	str	r3, [r4, #0]
}
   10b0e:	b009      	add	sp, #36	; 0x24
   10b10:	bd30      	pop	{r4, r5, pc}
   10b12:	bf00      	nop
   10b14:	00026451 	.word	0x00026451
   10b18:	200021a0 	.word	0x200021a0
   10b1c:	00026471 	.word	0x00026471
   10b20:	0002647c 	.word	0x0002647c
   10b24:	20003b7e 	.word	0x20003b7e
   10b28:	200021a4 	.word	0x200021a4
   10b2c:	2000219c 	.word	0x2000219c

00010b30 <disconnected>:
{
   10b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b34:	4604      	mov	r4, r0
   10b36:	b08f      	sub	sp, #60	; 0x3c
	printk("Disconnected (reason 0x%02x)\n", reason);
   10b38:	4830      	ldr	r0, [pc, #192]	; (10bfc <disconnected+0xcc>)
   10b3a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 10c00 <disconnected+0xd0>
   10b3e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 10c04 <disconnected+0xd4>
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));

	params.attr = attr;
   10b42:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 10c08 <disconnected+0xd8>
					bt_gatt_notify(connectionQueue[i], &lab2_service.attrs[9], &queueNumber[i], sizeof(queueNumber[i]));
   10b46:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 10c0c <disconnected+0xdc>
	printk("Disconnected (reason 0x%02x)\n", reason);
   10b4a:	f012 f845 	bl	22bd8 <printk>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10b4e:	4620      	mov	r0, r4
   10b50:	f012 ffd7 	bl	23b02 <bt_conn_get_dst>
   10b54:	a906      	add	r1, sp, #24
   10b56:	f7ff feeb 	bl	10930 <bt_addr_le_to_str.constprop.0.isra.0>
	for(int i = 0; i < 4; i++){
   10b5a:	2400      	movs	r4, #0
	int aboveNumber = 0;
   10b5c:	4625      	mov	r5, r4
   10b5e:	465f      	mov	r7, fp
		if(strcmp(addr, queue[i]) == 0 || aboveNumber == 1){
   10b60:	4641      	mov	r1, r8
   10b62:	a806      	add	r0, sp, #24
   10b64:	f012 fccd 	bl	23502 <strcmp>
   10b68:	b108      	cbz	r0, 10b6e <disconnected+0x3e>
   10b6a:	2d00      	cmp	r5, #0
   10b6c:	d03d      	beq.n	10bea <disconnected+0xba>
			if(i < 3){
   10b6e:	2c03      	cmp	r4, #3
   10b70:	d028      	beq.n	10bc4 <disconnected+0x94>
				strcpy(queue[i], queue[i + 1]);
   10b72:	f108 061e 	add.w	r6, r8, #30
   10b76:	4640      	mov	r0, r8
   10b78:	4631      	mov	r1, r6
   10b7a:	f012 fca8 	bl	234ce <strcpy>
				connectionQueue[i] = connectionQueue[i + 1];
   10b7e:	465d      	mov	r5, fp
   10b80:	f8db 2004 	ldr.w	r2, [fp, #4]
   10b84:	f845 2b04 	str.w	r2, [r5], #4
				if(connectionQueue[i] != NULL){
   10b88:	f104 0801 	add.w	r8, r4, #1
   10b8c:	b1aa      	cbz	r2, 10bba <disconnected+0x8a>
					printk("NOTIFY");
   10b8e:	4820      	ldr	r0, [pc, #128]	; (10c10 <disconnected+0xe0>)
   10b90:	f012 f822 	bl	22bd8 <printk>
					bt_gatt_notify(connectionQueue[i], &lab2_service.attrs[9], &queueNumber[i], sizeof(queueNumber[i]));
   10b94:	f8db b000 	ldr.w	fp, [fp]
	memset(&params, 0, sizeof(params));
   10b98:	2218      	movs	r2, #24
   10b9a:	2100      	movs	r1, #0
   10b9c:	4668      	mov	r0, sp
   10b9e:	f012 fcee 	bl	2357e <memset>
   10ba2:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	params.data = data;
	params.len = len;
   10ba6:	2204      	movs	r2, #4
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   10ba8:	4669      	mov	r1, sp
   10baa:	4658      	mov	r0, fp
	params.attr = attr;
   10bac:	f8cd 9004 	str.w	r9, [sp, #4]
	params.data = data;
   10bb0:	9402      	str	r4, [sp, #8]
	params.len = len;
   10bb2:	f8ad 200c 	strh.w	r2, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   10bb6:	f007 f9cd 	bl	17f54 <bt_gatt_notify_cb>
	for(int i = 0; i < 4; i++){
   10bba:	4644      	mov	r4, r8
   10bbc:	46ab      	mov	fp, r5
   10bbe:	46b0      	mov	r8, r6
			aboveNumber = 1;
   10bc0:	2501      	movs	r5, #1
   10bc2:	e7cd      	b.n	10b60 <disconnected+0x30>
				strcpy(queue[i], "");
   10bc4:	4913      	ldr	r1, [pc, #76]	; (10c14 <disconnected+0xe4>)
   10bc6:	4814      	ldr	r0, [pc, #80]	; (10c18 <disconnected+0xe8>)
   10bc8:	f012 fc81 	bl	234ce <strcpy>
				count--;
   10bcc:	4a13      	ldr	r2, [pc, #76]	; (10c1c <disconnected+0xec>)
				connectionQueue[i] = NULL;
   10bce:	2300      	movs	r3, #0
   10bd0:	60fb      	str	r3, [r7, #12]
				count--;
   10bd2:	6813      	ldr	r3, [r2, #0]
   10bd4:	3b01      	subs	r3, #1
   10bd6:	6013      	str	r3, [r2, #0]
	if(connectionQueue[0] != NULL){
   10bd8:	683b      	ldr	r3, [r7, #0]
   10bda:	b11b      	cbz	r3, 10be4 <disconnected+0xb4>
		start =  k_uptime_get_32();
   10bdc:	f011 ffda 	bl	22b94 <k_uptime_get_32>
   10be0:	4b0f      	ldr	r3, [pc, #60]	; (10c20 <disconnected+0xf0>)
   10be2:	6018      	str	r0, [r3, #0]
}
   10be4:	b00f      	add	sp, #60	; 0x3c
   10be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for(int i = 0; i < 4; i++){
   10bea:	3401      	adds	r4, #1
   10bec:	2c04      	cmp	r4, #4
   10bee:	d0f3      	beq.n	10bd8 <disconnected+0xa8>
   10bf0:	f108 081e 	add.w	r8, r8, #30
   10bf4:	f10b 0b04 	add.w	fp, fp, #4
   10bf8:	e7b2      	b.n	10b60 <disconnected+0x30>
   10bfa:	bf00      	nop
   10bfc:	00026489 	.word	0x00026489
   10c00:	200021a4 	.word	0x200021a4
   10c04:	20003b7e 	.word	0x20003b7e
   10c08:	00025b7c 	.word	0x00025b7c
   10c0c:	200005d4 	.word	0x200005d4
   10c10:	000264a7 	.word	0x000264a7
   10c14:	0002866e 	.word	0x0002866e
   10c18:	20003bd8 	.word	0x20003bd8
   10c1c:	200021a0 	.word	0x200021a0
   10c20:	2000219c 	.word	0x2000219c

00010c24 <main>:



int main() {
   10c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c28:	b0a1      	sub	sp, #132	; 0x84
	uint32_t len = sizeof(ndef_msg_buf);
   10c2a:	2380      	movs	r3, #128	; 0x80
	int err;

	printk("Initializing nfc tag...\n");
   10c2c:	489d      	ldr	r0, [pc, #628]	; (10ea4 <main+0x280>)
	uint32_t len = sizeof(ndef_msg_buf);
   10c2e:	9303      	str	r3, [sp, #12]
	printk("Initializing nfc tag...\n");
   10c30:	f011 ffd2 	bl	22bd8 <printk>

	// configure LED-pins as outputs
	err = dk_leds_init();
   10c34:	f009 f8a4 	bl	19d80 <dk_leds_init>
	if (err == 0)
   10c38:	4604      	mov	r4, r0
   10c3a:	b958      	cbnz	r0, 10c54 <main+0x30>
		printk("LEDs initialized successfully\n");
   10c3c:	489a      	ldr	r0, [pc, #616]	; (10ea8 <main+0x284>)
   10c3e:	f011 ffcb 	bl	22bd8 <printk>
	else {
		printk("failed to initialize LEDs! (err %d)\n", err);
		goto fail;
	}
	// set up NFC
	err = nfc_t2t_setup(nfc_callback, NULL);
   10c42:	489a      	ldr	r0, [pc, #616]	; (10eac <main+0x288>)
   10c44:	4621      	mov	r1, r4
   10c46:	f00f f8b7 	bl	1fdb8 <nfc_t2t_setup>
	if (err == 0)
   10c4a:	4605      	mov	r5, r0
   10c4c:	b160      	cbz	r0, 10c68 <main+0x44>
		printk("nfc T2T library configured successfully\n");
	else {
		printk("failed to configure NFC T2T library! (err %d)\n", err);
   10c4e:	4601      	mov	r1, r0
   10c50:	4897      	ldr	r0, [pc, #604]	; (10eb0 <main+0x28c>)
   10c52:	e001      	b.n	10c58 <main+0x34>
		printk("failed to initialize LEDs! (err %d)\n", err);
   10c54:	4601      	mov	r1, r0
   10c56:	4897      	ldr	r0, [pc, #604]	; (10eb4 <main+0x290>)
	// set NFC payload
	err = nfc_t2t_payload_set(ndef_msg_buf, len);
	if (err == 0)
		printk("nfc payload configured successfully\n");
	else {
		printk("failed to configure nfc payload! (err %d)\n", err);
   10c58:	f011 ffbe 	bl	22bd8 <printk>
		}
	}
	return 0;

fail:
printk("rebooting...");
   10c5c:	4896      	ldr	r0, [pc, #600]	; (10eb8 <main+0x294>)
   10c5e:	f011 ffbb 	bl	22bd8 <printk>
#if CONFIG_REBOOT
	sys_reboot(SYS_REBOOT_COLD);
   10c62:	2001      	movs	r0, #1
   10c64:	f001 f98e 	bl	11f84 <sys_reboot>
	NFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_message, UTF_8, en_code, sizeof(en_code), message, sizeof(message));
   10c68:	4c94      	ldr	r4, [pc, #592]	; (10ebc <main+0x298>)
		printk("nfc T2T library configured successfully\n");
   10c6a:	4895      	ldr	r0, [pc, #596]	; (10ec0 <main+0x29c>)
   10c6c:	f011 ffb4 	bl	22bd8 <printk>
	NFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_message, UTF_8, en_code, sizeof(en_code), message, sizeof(message));
   10c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   10c72:	ae0a      	add	r6, sp, #40	; 0x28
   10c74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   10c76:	f854 3b04 	ldr.w	r3, [r4], #4
   10c7a:	6033      	str	r3, [r6, #0]
   10c7c:	ab0a      	add	r3, sp, #40	; 0x28
   10c7e:	9319      	str	r3, [sp, #100]	; 0x64
	NFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_ble_uuid, UTF_8, en_code, sizeof(en_code), ble_uuid, sizeof(ble_uuid));
   10c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   10c82:	ae0f      	add	r6, sp, #60	; 0x3c
   10c84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   10c86:	6823      	ldr	r3, [r4, #0]
	NFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_message, UTF_8, en_code, sizeof(en_code), message, sizeof(message));
   10c88:	f8df e238 	ldr.w	lr, [pc, #568]	; 10ec4 <main+0x2a0>
   10c8c:	f8df c238 	ldr.w	ip, [pc, #568]	; 10ec8 <main+0x2a4>
	NFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_ble_uuid, UTF_8, en_code, sizeof(en_code), ble_uuid, sizeof(ble_uuid));
   10c90:	6033      	str	r3, [r6, #0]
   10c92:	ab0f      	add	r3, sp, #60	; 0x3c
	NFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_message, UTF_8, en_code, sizeof(en_code), message, sizeof(message));
   10c94:	2701      	movs	r7, #1
	NFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_ble_uuid, UTF_8, en_code, sizeof(en_code), ble_uuid, sizeof(ble_uuid));
   10c96:	931f      	str	r3, [sp, #124]	; 0x7c
	NFC_NDEF_MSG_DEF(nfc_msg, MAX_REC_COUNT);
   10c98:	ab04      	add	r3, sp, #16
	NFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_ble_uuid, UTF_8, en_code, sizeof(en_code), ble_uuid, sizeof(ble_uuid));
   10c9a:	e9cd ec1d 	strd	lr, ip, [sp, #116]	; 0x74
	NFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_message, UTF_8, en_code, sizeof(en_code), message, sizeof(message));
   10c9e:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
   10ca2:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
	nfc_ndef_msg_record_add(&NFC_NDEF_MSG(nfc_msg), &NFC_NDEF_TEXT_RECORD_DESC(nfc_message));
   10ca6:	a914      	add	r1, sp, #80	; 0x50
	NFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_message, UTF_8, en_code, sizeof(en_code), message, sizeof(message));
   10ca8:	f8ad 7050 	strh.w	r7, [sp, #80]	; 0x50
   10cac:	9515      	str	r5, [sp, #84]	; 0x54
   10cae:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
	NFC_NDEF_TEXT_RECORD_DESC_DEF(nfc_ble_uuid, UTF_8, en_code, sizeof(en_code), ble_uuid, sizeof(ble_uuid));
   10cb2:	f8ad 7068 	strh.w	r7, [sp, #104]	; 0x68
   10cb6:	951b      	str	r5, [sp, #108]	; 0x6c
   10cb8:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
	nfc_ndef_msg_record_add(&NFC_NDEF_MSG(nfc_msg), &NFC_NDEF_TEXT_RECORD_DESC(nfc_message));
   10cbc:	a807      	add	r0, sp, #28
	NFC_NDEF_MSG_DEF(nfc_msg, MAX_REC_COUNT);
   10cbe:	9307      	str	r3, [sp, #28]
   10cc0:	2303      	movs	r3, #3
   10cc2:	e9cd 3508 	strd	r3, r5, [sp, #32]
	nfc_ndef_msg_record_add(&NFC_NDEF_MSG(nfc_msg), &NFC_NDEF_TEXT_RECORD_DESC(nfc_message));
   10cc6:	f014 f924 	bl	24f12 <nfc_ndef_msg_record_add>
	nfc_ndef_msg_record_add(&NFC_NDEF_MSG(nfc_msg), &NFC_NDEF_TEXT_RECORD_DESC(nfc_ble_uuid));
   10cca:	a91a      	add	r1, sp, #104	; 0x68
   10ccc:	a807      	add	r0, sp, #28
   10cce:	f014 f920 	bl	24f12 <nfc_ndef_msg_record_add>
	nfc_ndef_msg_encode(&NFC_NDEF_MSG(nfc_msg), buffer, len);
   10cd2:	497e      	ldr	r1, [pc, #504]	; (10ecc <main+0x2a8>)
   10cd4:	aa03      	add	r2, sp, #12
   10cd6:	a807      	add	r0, sp, #28
   10cd8:	f014 f8e2 	bl	24ea0 <nfc_ndef_msg_encode>
		printk("data encoded successfully\n");
   10cdc:	487c      	ldr	r0, [pc, #496]	; (10ed0 <main+0x2ac>)
   10cde:	f011 ff7b 	bl	22bd8 <printk>
	err = nfc_t2t_payload_set(ndef_msg_buf, len);
   10ce2:	9903      	ldr	r1, [sp, #12]
   10ce4:	4879      	ldr	r0, [pc, #484]	; (10ecc <main+0x2a8>)
   10ce6:	f00f f891 	bl	1fe0c <nfc_t2t_payload_set>
	if (err == 0)
   10cea:	4601      	mov	r1, r0
   10cec:	b108      	cbz	r0, 10cf2 <main+0xce>
		printk("failed to configure nfc payload! (err %d)\n", err);
   10cee:	4879      	ldr	r0, [pc, #484]	; (10ed4 <main+0x2b0>)
   10cf0:	e7b2      	b.n	10c58 <main+0x34>
		printk("nfc payload configured successfully\n");
   10cf2:	4879      	ldr	r0, [pc, #484]	; (10ed8 <main+0x2b4>)
   10cf4:	f011 ff70 	bl	22bd8 <printk>
	err = nfc_t2t_emulation_start();
   10cf8:	f00f f926 	bl	1ff48 <nfc_t2t_emulation_start>
	if (err == 0)
   10cfc:	4604      	mov	r4, r0
   10cfe:	b110      	cbz	r0, 10d06 <main+0xe2>
		printk("failed to start emulation! (err %d)\n", err);
   10d00:	4601      	mov	r1, r0
   10d02:	4876      	ldr	r0, [pc, #472]	; (10edc <main+0x2b8>)
   10d04:	e7a8      	b.n	10c58 <main+0x34>
		printk("emulation started successfully\n");
   10d06:	4876      	ldr	r0, [pc, #472]	; (10ee0 <main+0x2bc>)
   10d08:	f011 ff66 	bl	22bd8 <printk>
	printk("nfc tag initialized successfully\n");
   10d0c:	4875      	ldr	r0, [pc, #468]	; (10ee4 <main+0x2c0>)
   10d0e:	f011 ff63 	bl	22bd8 <printk>
	printk("\nNDEF records:\n  name: nfc_message\n  text: %s\n\n  name: nfc_ble_uuid\n  text: %s\n\nwaiting for nfc field detection...\n", message, ble_uuid);
   10d12:	4a75      	ldr	r2, [pc, #468]	; (10ee8 <main+0x2c4>)
   10d14:	4975      	ldr	r1, [pc, #468]	; (10eec <main+0x2c8>)
   10d16:	4876      	ldr	r0, [pc, #472]	; (10ef0 <main+0x2cc>)
   10d18:	f011 ff5e 	bl	22bd8 <printk>
	k_work_init(&adv_work, adv_handler);
   10d1c:	4975      	ldr	r1, [pc, #468]	; (10ef4 <main+0x2d0>)
   10d1e:	4876      	ldr	r0, [pc, #472]	; (10ef8 <main+0x2d4>)
   10d20:	f00c fb9c 	bl	1d45c <k_work_init>
	err = bt_enable(bt_ready);
   10d24:	4875      	ldr	r0, [pc, #468]	; (10efc <main+0x2d8>)
   10d26:	f003 fcc3 	bl	146b0 <bt_enable>
	if (err) {
   10d2a:	4601      	mov	r1, r0
   10d2c:	b130      	cbz	r0, 10d3c <main+0x118>
		printk("Bluetooth init failed (err %d)\n", err);
   10d2e:	4874      	ldr	r0, [pc, #464]	; (10f00 <main+0x2dc>)
   10d30:	f011 ff52 	bl	22bd8 <printk>
#endif
	return -EIO;
   10d34:	4620      	mov	r0, r4
   10d36:	b021      	add	sp, #132	; 0x84
   10d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return z_impl_k_sem_take(sem, timeout);
   10d3c:	4871      	ldr	r0, [pc, #452]	; (10f04 <main+0x2e0>)
   10d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   10d42:	2300      	movs	r3, #0
   10d44:	f00c f96a 	bl	1d01c <z_impl_k_sem_take>
	if(!err){
   10d48:	b9a0      	cbnz	r0, 10d74 <main+0x150>
		printk("BLE initialized\n");
   10d4a:	486f      	ldr	r0, [pc, #444]	; (10f08 <main+0x2e4>)
        printk("BLE initialization did not complete in time\n");
   10d4c:	f011 ff44 	bl	22bd8 <printk>

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
   10d50:	4c6e      	ldr	r4, [pc, #440]	; (10f0c <main+0x2e8>)
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10d52:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_api *api =
   10d54:	68a1      	ldr	r1, [r4, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10d56:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   10d58:	6922      	ldr	r2, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10d5a:	0518      	lsls	r0, r3, #20
   10d5c:	d40c      	bmi.n	10d78 <main+0x154>
   10d5e:	496c      	ldr	r1, [pc, #432]	; (10f10 <main+0x2ec>)
   10d60:	486c      	ldr	r0, [pc, #432]	; (10f14 <main+0x2f0>)
   10d62:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   10d66:	f012 f95a 	bl	2301e <assert_print>
   10d6a:	f44f 7137 	mov.w	r1, #732	; 0x2dc
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10d6e:	4868      	ldr	r0, [pc, #416]	; (10f10 <main+0x2ec>)
   10d70:	f012 f94e 	bl	23010 <assert_post_action>
   10d74:	4868      	ldr	r0, [pc, #416]	; (10f18 <main+0x2f4>)
   10d76:	e7e9      	b.n	10d4c <main+0x128>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   10d78:	6813      	ldr	r3, [r2, #0]
		if(connectionQueue[0] != NULL){
   10d7a:	4f68      	ldr	r7, [pc, #416]	; (10f1c <main+0x2f8>)
   10d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   10d80:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   10d82:	680b      	ldr	r3, [r1, #0]
   10d84:	4a66      	ldr	r2, [pc, #408]	; (10f20 <main+0x2fc>)
   10d86:	210b      	movs	r1, #11
   10d88:	4620      	mov	r0, r4
   10d8a:	4798      	blx	r3
	uint8_t button0_state = 0;
   10d8c:	f04f 0b00 	mov.w	fp, #0
		if(connectionQueue[0] != NULL){
   10d90:	683b      	ldr	r3, [r7, #0]
   10d92:	b1ab      	cbz	r3, 10dc0 <main+0x19c>
			end =  k_uptime_get_32();
   10d94:	f011 fefe 	bl	22b94 <k_uptime_get_32>
   10d98:	4b62      	ldr	r3, [pc, #392]	; (10f24 <main+0x300>)
   10d9a:	6018      	str	r0, [r3, #0]
			if(((end - start) / conversion) >= 1){
   10d9c:	4b62      	ldr	r3, [pc, #392]	; (10f28 <main+0x304>)
   10d9e:	681b      	ldr	r3, [r3, #0]
   10da0:	1ac0      	subs	r0, r0, r3
   10da2:	f7ef fa63 	bl	26c <__aeabi_ui2f>
   10da6:	4b61      	ldr	r3, [pc, #388]	; (10f2c <main+0x308>)
   10da8:	6819      	ldr	r1, [r3, #0]
   10daa:	f7ef fb6b 	bl	484 <__aeabi_fdiv>
   10dae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10db2:	f7ef fc65 	bl	680 <__aeabi_fcmpge>
   10db6:	b118      	cbz	r0, 10dc0 <main+0x19c>
				err = bt_conn_disconnect(connection, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   10db8:	6838      	ldr	r0, [r7, #0]
   10dba:	2113      	movs	r1, #19
   10dbc:	f012 fe5f 	bl	23a7e <bt_conn_disconnect>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10dc0:	6863      	ldr	r3, [r4, #4]
   10dc2:	681b      	ldr	r3, [r3, #0]
   10dc4:	051b      	lsls	r3, r3, #20
   10dc6:	d408      	bmi.n	10dda <main+0x1b6>
   10dc8:	4951      	ldr	r1, [pc, #324]	; (10f10 <main+0x2ec>)
   10dca:	4852      	ldr	r0, [pc, #328]	; (10f14 <main+0x2f0>)
   10dcc:	f240 42ce 	movw	r2, #1230	; 0x4ce
   10dd0:	f012 f925 	bl	2301e <assert_print>
   10dd4:	f240 41ce 	movw	r1, #1230	; 0x4ce
   10dd8:	e7c9      	b.n	10d6e <main+0x14a>
	const struct gpio_driver_data *const data =
   10dda:	6925      	ldr	r5, [r4, #16]
	return api->port_get_raw(port, value);
   10ddc:	68a3      	ldr	r3, [r4, #8]
   10dde:	484b      	ldr	r0, [pc, #300]	; (10f0c <main+0x2e8>)
   10de0:	685b      	ldr	r3, [r3, #4]
   10de2:	a91a      	add	r1, sp, #104	; 0x68
   10de4:	4798      	blx	r3
	if (ret == 0) {
   10de6:	b920      	cbnz	r0, 10df2 <main+0x1ce>
		*value ^= data->invert;
   10de8:	682b      	ldr	r3, [r5, #0]
   10dea:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   10dec:	405d      	eors	r5, r3
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   10dee:	f3c5 20c0 	ubfx	r0, r5, #11, #1
		button0_current_state = gpio_pin_get_dt(&button);
   10df2:	b2c5      	uxtb	r5, r0
		if (button0_state != button0_current_state && connectionQueue[0] != NULL) {
   10df4:	45ab      	cmp	fp, r5
   10df6:	d006      	beq.n	10e06 <main+0x1e2>
   10df8:	6838      	ldr	r0, [r7, #0]
   10dfa:	b128      	cbz	r0, 10e08 <main+0x1e4>
			if (button0_current_state == 1) {
   10dfc:	2d01      	cmp	r5, #1
   10dfe:	d102      	bne.n	10e06 <main+0x1e2>
				err = bt_conn_disconnect(connection, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   10e00:	2113      	movs	r1, #19
   10e02:	f012 fe3c 	bl	23a7e <bt_conn_disconnect>
			button0_state = button0_current_state;
   10e06:	46ab      	mov	fp, r5
		for (int i = 0; i < 4; i++){
   10e08:	f8df 8110 	ldr.w	r8, [pc, #272]	; 10f1c <main+0x2f8>
   10e0c:	4e48      	ldr	r6, [pc, #288]	; (10f30 <main+0x30c>)
				uint32_t timer = 60 - (uint32_t) ((end - start) / timerConversion);
   10e0e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 10f24 <main+0x300>
   10e12:	f8df a114 	ldr.w	sl, [pc, #276]	; 10f28 <main+0x304>
		for (int i = 0; i < 4; i++){
   10e16:	2500      	movs	r5, #0
			if(connectionQueue[i] != NULL){
   10e18:	f858 3b04 	ldr.w	r3, [r8], #4
   10e1c:	b32b      	cbz	r3, 10e6a <main+0x246>
				uint32_t timer = 60 - (uint32_t) ((end - start) / timerConversion);
   10e1e:	f8da 3000 	ldr.w	r3, [sl]
   10e22:	f8d9 0000 	ldr.w	r0, [r9]
   10e26:	1ac0      	subs	r0, r0, r3
   10e28:	f7ef fa20 	bl	26c <__aeabi_ui2f>
   10e2c:	4b41      	ldr	r3, [pc, #260]	; (10f34 <main+0x310>)
   10e2e:	6819      	ldr	r1, [r3, #0]
   10e30:	f7ef fb28 	bl	484 <__aeabi_fdiv>
   10e34:	f7ef fc38 	bl	6a8 <__aeabi_f2uiz>
   10e38:	f1c0 013c 	rsb	r1, r0, #60	; 0x3c
				printk("%u\n", timer);
   10e3c:	483e      	ldr	r0, [pc, #248]	; (10f38 <main+0x314>)
				uint32_t timer = 60 - (uint32_t) ((end - start) / timerConversion);
   10e3e:	9114      	str	r1, [sp, #80]	; 0x50
				printk("%u\n", timer);
   10e40:	f011 feca 	bl	22bd8 <printk>
				bt_gatt_notify(connectionQueue[i], &lab2_service.attrs[5], &timer, sizeof(timer));
   10e44:	f858 3c04 	ldr.w	r3, [r8, #-4]
   10e48:	9301      	str	r3, [sp, #4]
	memset(&params, 0, sizeof(params));
   10e4a:	2100      	movs	r1, #0
   10e4c:	2218      	movs	r2, #24
   10e4e:	a81a      	add	r0, sp, #104	; 0x68
   10e50:	f012 fb95 	bl	2357e <memset>
	params.attr = attr;
   10e54:	4b39      	ldr	r3, [pc, #228]	; (10f3c <main+0x318>)
   10e56:	931b      	str	r3, [sp, #108]	; 0x6c
	params.data = data;
   10e58:	ab14      	add	r3, sp, #80	; 0x50
   10e5a:	931c      	str	r3, [sp, #112]	; 0x70
	return bt_gatt_notify_cb(conn, &params);
   10e5c:	9801      	ldr	r0, [sp, #4]
	params.len = len;
   10e5e:	2304      	movs	r3, #4
	return bt_gatt_notify_cb(conn, &params);
   10e60:	a91a      	add	r1, sp, #104	; 0x68
	params.len = len;
   10e62:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
	return bt_gatt_notify_cb(conn, &params);
   10e66:	f007 f875 	bl	17f54 <bt_gatt_notify_cb>
			if(strcmp(queue[i], "") != 0){
   10e6a:	4935      	ldr	r1, [pc, #212]	; (10f40 <main+0x31c>)
   10e6c:	4630      	mov	r0, r6
   10e6e:	f012 fb48 	bl	23502 <strcmp>
   10e72:	b188      	cbz	r0, 10e98 <main+0x274>
				printk("%u", queueNumber[i]);
   10e74:	4b33      	ldr	r3, [pc, #204]	; (10f44 <main+0x320>)
   10e76:	4834      	ldr	r0, [pc, #208]	; (10f48 <main+0x324>)
   10e78:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   10e7c:	f011 feac 	bl	22bd8 <printk>
				printk(" ");
   10e80:	4832      	ldr	r0, [pc, #200]	; (10f4c <main+0x328>)
   10e82:	f011 fea9 	bl	22bd8 <printk>
				printk("%s\n", queue[i]);
   10e86:	4832      	ldr	r0, [pc, #200]	; (10f50 <main+0x32c>)
   10e88:	4631      	mov	r1, r6
   10e8a:	f011 fea5 	bl	22bd8 <printk>
	return z_impl_k_sleep(timeout);
   10e8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10e92:	2100      	movs	r1, #0
   10e94:	f00d fc14 	bl	1e6c0 <z_impl_k_sleep>
		for (int i = 0; i < 4; i++){
   10e98:	3501      	adds	r5, #1
   10e9a:	2d04      	cmp	r5, #4
   10e9c:	f106 061e 	add.w	r6, r6, #30
   10ea0:	d1ba      	bne.n	10e18 <main+0x1f4>
   10ea2:	e775      	b.n	10d90 <main+0x16c>
   10ea4:	000264ae 	.word	0x000264ae
   10ea8:	000264c7 	.word	0x000264c7
   10eac:	0001088d 	.word	0x0001088d
   10eb0:	0002654f 	.word	0x0002654f
   10eb4:	000264e6 	.word	0x000264e6
   10eb8:	00026733 	.word	0x00026733
   10ebc:	00025a44 	.word	0x00025a44
   10ec0:	0002650b 	.word	0x0002650b
   10ec4:	00028486 	.word	0x00028486
   10ec8:	00024fe7 	.word	0x00024fe7
   10ecc:	20003bf6 	.word	0x20003bf6
   10ed0:	00026534 	.word	0x00026534
   10ed4:	000265a3 	.word	0x000265a3
   10ed8:	0002657e 	.word	0x0002657e
   10edc:	00026684 	.word	0x00026684
   10ee0:	000265ce 	.word	0x000265ce
   10ee4:	000265ee 	.word	0x000265ee
   10ee8:	20000963 	.word	0x20000963
   10eec:	200009a3 	.word	0x200009a3
   10ef0:	00026610 	.word	0x00026610
   10ef4:	00010841 	.word	0x00010841
   10ef8:	20002188 	.word	0x20002188
   10efc:	000108f1 	.word	0x000108f1
   10f00:	000263c8 	.word	0x000263c8
   10f04:	20000a98 	.word	0x20000a98
   10f08:	000266a9 	.word	0x000266a9
   10f0c:	000256e8 	.word	0x000256e8
   10f10:	000266e7 	.word	0x000266e7
   10f14:	00026718 	.word	0x00026718
   10f18:	000266ba 	.word	0x000266ba
   10f1c:	200021a4 	.word	0x200021a4
   10f20:	00010011 	.word	0x00010011
   10f24:	20002198 	.word	0x20002198
   10f28:	2000219c 	.word	0x2000219c
   10f2c:	200005d0 	.word	0x200005d0
   10f30:	20003b7e 	.word	0x20003b7e
   10f34:	200005cc 	.word	0x200005cc
   10f38:	0002829b 	.word	0x0002829b
   10f3c:	00025b2c 	.word	0x00025b2c
   10f40:	0002866e 	.word	0x0002866e
   10f44:	200005d4 	.word	0x200005d4
   10f48:	00026730 	.word	0x00026730
   10f4c:	0002682b 	.word	0x0002682b
   10f50:	00028226 	.word	0x00028226

00010f54 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   10f54:	4b01      	ldr	r3, [pc, #4]	; (10f5c <char_out+0x8>)
   10f56:	681b      	ldr	r3, [r3, #0]
   10f58:	4718      	bx	r3
   10f5a:	bf00      	nop
   10f5c:	200005e4 	.word	0x200005e4

00010f60 <__printk_hook_install>:
	_char_out = fn;
   10f60:	4b01      	ldr	r3, [pc, #4]	; (10f68 <__printk_hook_install+0x8>)
   10f62:	6018      	str	r0, [r3, #0]
}
   10f64:	4770      	bx	lr
   10f66:	bf00      	nop
   10f68:	200005e4 	.word	0x200005e4

00010f6c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   10f6c:	b507      	push	{r0, r1, r2, lr}
   10f6e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   10f70:	2100      	movs	r1, #0
   10f72:	4602      	mov	r2, r0
   10f74:	9100      	str	r1, [sp, #0]
   10f76:	4803      	ldr	r0, [pc, #12]	; (10f84 <vprintk+0x18>)
   10f78:	f000 fc52 	bl	11820 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   10f7c:	b003      	add	sp, #12
   10f7e:	f85d fb04 	ldr.w	pc, [sp], #4
   10f82:	bf00      	nop
   10f84:	00010f55 	.word	0x00010f55

00010f88 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10f88:	b530      	push	{r4, r5, lr}
   10f8a:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   10f8c:	2500      	movs	r5, #0
   10f8e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   10f92:	4604      	mov	r4, r0
   10f94:	9500      	str	r5, [sp, #0]
   10f96:	a903      	add	r1, sp, #12
   10f98:	4805      	ldr	r0, [pc, #20]	; (10fb0 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   10f9a:	9505      	str	r5, [sp, #20]
   10f9c:	f000 fc40 	bl	11820 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   10fa0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   10fa4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10fa6:	bfb8      	it	lt
   10fa8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   10faa:	b007      	add	sp, #28
   10fac:	bd30      	pop	{r4, r5, pc}
   10fae:	bf00      	nop
   10fb0:	00022bb3 	.word	0x00022bb3

00010fb4 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   10fb4:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
   10fb6:	b351      	cbz	r1, 1100e <sys_heap_free+0x5a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   10fb8:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10fba:	1f0b      	subs	r3, r1, #4
   10fbc:	1a9b      	subs	r3, r3, r2
   10fbe:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   10fc0:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   10fc4:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   10fc6:	885c      	ldrh	r4, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   10fc8:	07e0      	lsls	r0, r4, #31
   10fca:	d408      	bmi.n	10fde <sys_heap_free+0x2a>
   10fcc:	4910      	ldr	r1, [pc, #64]	; (11010 <sys_heap_free+0x5c>)
   10fce:	4811      	ldr	r0, [pc, #68]	; (11014 <sys_heap_free+0x60>)
   10fd0:	22af      	movs	r2, #175	; 0xaf
   10fd2:	f012 f824 	bl	2301e <assert_print>
   10fd6:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   10fd8:	480d      	ldr	r0, [pc, #52]	; (11010 <sys_heap_free+0x5c>)
   10fda:	f012 f819 	bl	23010 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   10fde:	4610      	mov	r0, r2
   10fe0:	f011 fe1e 	bl	22c20 <chunk_size>
   10fe4:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
   10fe6:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   10fea:	1b40      	subs	r0, r0, r5
   10fec:	4281      	cmp	r1, r0
   10fee:	d006      	beq.n	10ffe <sys_heap_free+0x4a>
   10ff0:	4907      	ldr	r1, [pc, #28]	; (11010 <sys_heap_free+0x5c>)
   10ff2:	4808      	ldr	r0, [pc, #32]	; (11014 <sys_heap_free+0x60>)
   10ff4:	22b7      	movs	r2, #183	; 0xb7
   10ff6:	f012 f812 	bl	2301e <assert_print>
   10ffa:	21b7      	movs	r1, #183	; 0xb7
   10ffc:	e7ec      	b.n	10fd8 <sys_heap_free+0x24>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10ffe:	f024 0401 	bic.w	r4, r4, #1
   11002:	805c      	strh	r4, [r3, #2]
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
}
   11004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
   11008:	4610      	mov	r0, r2
   1100a:	f011 bec6 	b.w	22d9a <free_chunk>
}
   1100e:	bd38      	pop	{r3, r4, r5, pc}
   11010:	0002675c 	.word	0x0002675c
   11014:	00026718 	.word	0x00026718

00011018 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   11018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1101c:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1101e:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
   11020:	6806      	ldr	r6, [r0, #0]
{
   11022:	460f      	mov	r7, r1
   11024:	4614      	mov	r4, r2
	if (align != rew) {
   11026:	d011      	beq.n	1104c <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
   11028:	f1c1 0900 	rsb	r9, r1, #0
   1102c:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   11030:	464a      	mov	r2, r9
   11032:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11034:	f103 31ff 	add.w	r1, r3, #4294967295
		gap = MIN(rew, chunk_header_bytes(h));
   11038:	bf28      	it	cs
   1103a:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   1103c:	4219      	tst	r1, r3
   1103e:	d10c      	bne.n	1105a <sys_heap_aligned_alloc+0x42>
   11040:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   11042:	b9c4      	cbnz	r4, 11076 <sys_heap_aligned_alloc+0x5e>
		return NULL;
   11044:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   11046:	4628      	mov	r0, r5
   11048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1104c:	2904      	cmp	r1, #4
   1104e:	d80f      	bhi.n	11070 <sys_heap_aligned_alloc+0x58>
}
   11050:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   11054:	4611      	mov	r1, r2
   11056:	f011 bed1 	b.w	22dfc <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   1105a:	492a      	ldr	r1, [pc, #168]	; (11104 <sys_heap_aligned_alloc+0xec>)
   1105c:	482a      	ldr	r0, [pc, #168]	; (11108 <sys_heap_aligned_alloc+0xf0>)
   1105e:	f44f 72a2 	mov.w	r2, #324	; 0x144
   11062:	f011 ffdc 	bl	2301e <assert_print>
   11066:	4827      	ldr	r0, [pc, #156]	; (11104 <sys_heap_aligned_alloc+0xec>)
   11068:	f44f 71a2 	mov.w	r1, #324	; 0x144
   1106c:	f011 ffd0 	bl	23010 <assert_post_action>
		rew = 0;
   11070:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
   11072:	2204      	movs	r2, #4
   11074:	e7e5      	b.n	11042 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   11076:	68b3      	ldr	r3, [r6, #8]
   11078:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1107c:	d9e2      	bls.n	11044 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1107e:	f104 010b 	add.w	r1, r4, #11
   11082:	4439      	add	r1, r7
   11084:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   11086:	08c9      	lsrs	r1, r1, #3
   11088:	4630      	mov	r0, r6
   1108a:	f011 fe1f 	bl	22ccc <alloc_chunk>
	if (c0 == 0) {
   1108e:	4680      	mov	r8, r0
   11090:	2800      	cmp	r0, #0
   11092:	d0d7      	beq.n	11044 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   11094:	f109 0504 	add.w	r5, r9, #4
   11098:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1109c:	1e7b      	subs	r3, r7, #1
   1109e:	4435      	add	r5, r6
   110a0:	441d      	add	r5, r3
   110a2:	427f      	negs	r7, r7
   110a4:	403d      	ands	r5, r7
   110a6:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   110aa:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   110ac:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   110ae:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   110b0:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   110b2:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   110b6:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   110b8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   110bc:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   110c0:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   110c4:	d208      	bcs.n	110d8 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c0, c);
   110c6:	4601      	mov	r1, r0
   110c8:	463a      	mov	r2, r7
   110ca:	4630      	mov	r0, r6
   110cc:	f011 fe4b 	bl	22d66 <split_chunks>
		free_list_add(h, c0);
   110d0:	4641      	mov	r1, r8
   110d2:	4630      	mov	r0, r6
   110d4:	f011 fda9 	bl	22c2a <free_list_add>
	return c + chunk_size(h, c);
   110d8:	4639      	mov	r1, r7
   110da:	4630      	mov	r0, r6
   110dc:	f011 fda0 	bl	22c20 <chunk_size>
   110e0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   110e2:	4284      	cmp	r4, r0
   110e4:	d207      	bcs.n	110f6 <sys_heap_aligned_alloc+0xde>
		split_chunks(h, c, c_end);
   110e6:	4630      	mov	r0, r6
   110e8:	4622      	mov	r2, r4
   110ea:	f011 fe3c 	bl	22d66 <split_chunks>
		free_list_add(h, c_end);
   110ee:	4621      	mov	r1, r4
   110f0:	4630      	mov	r0, r6
   110f2:	f011 fd9a 	bl	22c2a <free_list_add>
	void *cmem = &buf[c];
   110f6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   110fa:	8873      	ldrh	r3, [r6, #2]
   110fc:	f043 0301 	orr.w	r3, r3, #1
   11100:	8073      	strh	r3, [r6, #2]
   11102:	e7a0      	b.n	11046 <sys_heap_aligned_alloc+0x2e>
   11104:	0002675c 	.word	0x0002675c
   11108:	00026718 	.word	0x00026718

0001110c <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1110c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   11110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11112:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   11114:	d30a      	bcc.n	1112c <sys_heap_init+0x20>
   11116:	4933      	ldr	r1, [pc, #204]	; (111e4 <sys_heap_init+0xd8>)
   11118:	4833      	ldr	r0, [pc, #204]	; (111e8 <sys_heap_init+0xdc>)
   1111a:	f240 12eb 	movw	r2, #491	; 0x1eb
   1111e:	f011 ff7e 	bl	2301e <assert_print>
   11122:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11126:	482f      	ldr	r0, [pc, #188]	; (111e4 <sys_heap_init+0xd8>)
   11128:	f011 ff72 	bl	23010 <assert_post_action>
   1112c:	2a04      	cmp	r2, #4
   1112e:	d808      	bhi.n	11142 <sys_heap_init+0x36>
   11130:	492c      	ldr	r1, [pc, #176]	; (111e4 <sys_heap_init+0xd8>)
   11132:	482d      	ldr	r0, [pc, #180]	; (111e8 <sys_heap_init+0xdc>)
   11134:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   11138:	f011 ff71 	bl	2301e <assert_print>
   1113c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   11140:	e7f1      	b.n	11126 <sys_heap_init+0x1a>
	bytes -= heap_footer_bytes(bytes);
   11142:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11144:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11146:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11148:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1114c:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11150:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11152:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11154:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11158:	d808      	bhi.n	1116c <sys_heap_init+0x60>
   1115a:	4922      	ldr	r1, [pc, #136]	; (111e4 <sys_heap_init+0xd8>)
   1115c:	4822      	ldr	r0, [pc, #136]	; (111e8 <sys_heap_init+0xdc>)
   1115e:	f240 12fb 	movw	r2, #507	; 0x1fb
   11162:	f011 ff5c 	bl	2301e <assert_print>
   11166:	f240 11fb 	movw	r1, #507	; 0x1fb
   1116a:	e7dc      	b.n	11126 <sys_heap_init+0x1a>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1116c:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11170:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11174:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   11178:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1117a:	3107      	adds	r1, #7
   1117c:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1117e:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
   11180:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11182:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
   11184:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
   11188:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
   1118a:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1118c:	d908      	bls.n	111a0 <sys_heap_init+0x94>
   1118e:	4915      	ldr	r1, [pc, #84]	; (111e4 <sys_heap_init+0xd8>)
   11190:	4815      	ldr	r0, [pc, #84]	; (111e8 <sys_heap_init+0xdc>)
   11192:	f44f 7203 	mov.w	r2, #524	; 0x20c
   11196:	f011 ff42 	bl	2301e <assert_print>
   1119a:	f44f 7103 	mov.w	r1, #524	; 0x20c
   1119e:	e7c2      	b.n	11126 <sys_heap_init+0x1a>
   111a0:	f100 050c 	add.w	r5, r0, #12
   111a4:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   111a8:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   111ac:	42b5      	cmp	r5, r6
   111ae:	d1fb      	bne.n	111a8 <sys_heap_init+0x9c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   111b0:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   111b2:	f045 0501 	orr.w	r5, r5, #1
   111b6:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   111b8:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   111bc:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   111be:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
   111c0:	8004      	strh	r4, [r0, #0]
   111c2:	8077      	strh	r7, [r6, #2]
   111c4:	1886      	adds	r6, r0, r2
   111c6:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   111ca:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   111ce:	8074      	strh	r4, [r6, #2]
   111d0:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   111d2:	885a      	ldrh	r2, [r3, #2]
   111d4:	f042 0201 	orr.w	r2, r2, #1
   111d8:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   111da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   111de:	f011 bd24 	b.w	22c2a <free_list_add>
   111e2:	bf00      	nop
   111e4:	0002675c 	.word	0x0002675c
   111e8:	00026718 	.word	0x00026718

000111ec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   111ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111f0:	4604      	mov	r4, r0
   111f2:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   111f4:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   111f6:	0719      	lsls	r1, r3, #28
{
   111f8:	4616      	mov	r6, r2
	if (processing) {
   111fa:	d412      	bmi.n	11222 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   111fc:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   111fe:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
   11202:	d162      	bne.n	112ca <process_event+0xde>
			evt = process_recheck(mgr);
   11204:	4620      	mov	r0, r4
   11206:	f011 fe3d 	bl	22e84 <process_recheck>
		}

		if (evt == EVT_NOP) {
   1120a:	b188      	cbz	r0, 11230 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   1120c:	3801      	subs	r0, #1
   1120e:	2804      	cmp	r0, #4
   11210:	f200 8121 	bhi.w	11456 <process_event+0x26a>
   11214:	e8df f010 	tbh	[pc, r0, lsl #1]
   11218:	011f0059 	.word	0x011f0059
   1121c:	00c4007e 	.word	0x00c4007e
   11220:	00f1      	.short	0x00f1
		if (evt == EVT_COMPLETE) {
   11222:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11224:	bf0c      	ite	eq
   11226:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1122a:	f043 0120 	orrne.w	r1, r3, #32
   1122e:	83a1      	strh	r1, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11230:	f104 0014 	add.w	r0, r4, #20
   11234:	f00b fc18 	bl	1ca68 <z_spin_unlock_valid>
   11238:	2800      	cmp	r0, #0
   1123a:	f000 80a9 	beq.w	11390 <process_event+0x1a4>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1123e:	f386 8811 	msr	BASEPRI, r6
   11242:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1124a:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1124e:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11250:	2801      	cmp	r0, #1
   11252:	d81e      	bhi.n	11292 <process_event+0xa6>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   11254:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
   11256:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   11258:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   1125a:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1125e:	d114      	bne.n	1128a <process_event+0x9e>
		*clients = mgr->clients;
   11260:	463a      	mov	r2, r7
   11262:	e003      	b.n	1126c <process_event+0x80>
				mgr->refs += 1U;
   11264:	8be0      	ldrh	r0, [r4, #30]
   11266:	3001      	adds	r0, #1
   11268:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   1126a:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1126c:	2a00      	cmp	r2, #0
   1126e:	d1f9      	bne.n	11264 <process_event+0x78>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11270:	f023 0307 	bic.w	r3, r3, #7
   11274:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   11278:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1127a:	4620      	mov	r0, r4
   1127c:	f011 fe02 	bl	22e84 <process_recheck>
   11280:	b390      	cbz	r0, 112e8 <process_event+0xfc>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11282:	f042 0220 	orr.w	r2, r2, #32
   11286:	83a2      	strh	r2, [r4, #28]
   11288:	e02e      	b.n	112e8 <process_event+0xfc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1128a:	f023 0307 	bic.w	r3, r3, #7
   1128e:	b29a      	uxth	r2, r3
}
   11290:	e7f2      	b.n	11278 <process_event+0x8c>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11292:	2a04      	cmp	r2, #4
   11294:	d133      	bne.n	112fe <process_event+0x112>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11296:	f023 0307 	bic.w	r3, r3, #7
   1129a:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1129c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1129e:	4620      	mov	r0, r4
   112a0:	f011 fdf0 	bl	22e84 <process_recheck>
   112a4:	b110      	cbz	r0, 112ac <process_event+0xc0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   112a6:	f042 0220 	orr.w	r2, r2, #32
   112aa:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   112ac:	8ba3      	ldrh	r3, [r4, #28]
   112ae:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   112b2:	4589      	cmp	r9, r1
   112b4:	f040 80d8 	bne.w	11468 <process_event+0x27c>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   112b8:	8ba1      	ldrh	r1, [r4, #28]
   112ba:	06ca      	lsls	r2, r1, #27
   112bc:	f140 811e 	bpl.w	114fc <process_event+0x310>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   112c0:	f021 0310 	bic.w	r3, r1, #16
   112c4:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   112c6:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
   112ca:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   112ce:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   112d0:	f1b8 0f00 	cmp.w	r8, #0
   112d4:	dab9      	bge.n	1124a <process_event+0x5e>
	list->head = NULL;
   112d6:	2200      	movs	r2, #0
		*clients = mgr->clients;
   112d8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   112da:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   112de:	e9c4 2200 	strd	r2, r2, [r4]
   112e2:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   112e6:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   112e8:	8ba3      	ldrh	r3, [r4, #28]
   112ea:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   112ee:	4589      	cmp	r9, r1
   112f0:	f040 80bb 	bne.w	1146a <process_event+0x27e>
		    || !sys_slist_is_empty(&clients)
   112f4:	2f00      	cmp	r7, #0
   112f6:	d0df      	beq.n	112b8 <process_event+0xcc>
   112f8:	2500      	movs	r5, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   112fa:	46aa      	mov	sl, r5
   112fc:	e03e      	b.n	1137c <process_event+0x190>
		__ASSERT_NO_MSG(false);
   112fe:	4984      	ldr	r1, [pc, #528]	; (11510 <process_event+0x324>)
   11300:	4884      	ldr	r0, [pc, #528]	; (11514 <process_event+0x328>)
   11302:	f240 121b 	movw	r2, #283	; 0x11b
   11306:	f011 fe8a 	bl	2301e <assert_print>
   1130a:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1130e:	4880      	ldr	r0, [pc, #512]	; (11510 <process_event+0x324>)
   11310:	f011 fe7e 	bl	23010 <assert_post_action>
   11314:	b141      	cbz	r1, 11328 <process_event+0x13c>
   11316:	497e      	ldr	r1, [pc, #504]	; (11510 <process_event+0x324>)
   11318:	487e      	ldr	r0, [pc, #504]	; (11514 <process_event+0x328>)
   1131a:	f44f 72ab 	mov.w	r2, #342	; 0x156
   1131e:	f011 fe7e 	bl	2301e <assert_print>
   11322:	f44f 71ab 	mov.w	r1, #342	; 0x156
   11326:	e7f2      	b.n	1130e <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11328:	6823      	ldr	r3, [r4, #0]
   1132a:	b943      	cbnz	r3, 1133e <process_event+0x152>
   1132c:	4978      	ldr	r1, [pc, #480]	; (11510 <process_event+0x324>)
   1132e:	4879      	ldr	r0, [pc, #484]	; (11514 <process_event+0x328>)
   11330:	f240 1257 	movw	r2, #343	; 0x157
   11334:	f011 fe73 	bl	2301e <assert_print>
   11338:	f240 1157 	movw	r1, #343	; 0x157
   1133c:	e7e7      	b.n	1130e <process_event+0x122>
			transit = mgr->transitions->start;
   1133e:	6923      	ldr	r3, [r4, #16]
   11340:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   11342:	b945      	cbnz	r5, 11356 <process_event+0x16a>
   11344:	4972      	ldr	r1, [pc, #456]	; (11510 <process_event+0x324>)
   11346:	4873      	ldr	r0, [pc, #460]	; (11514 <process_event+0x328>)
   11348:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   1134c:	f011 fe67 	bl	2301e <assert_print>
   11350:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   11354:	e7db      	b.n	1130e <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11356:	8ba3      	ldrh	r3, [r4, #28]
   11358:	f023 0307 	bic.w	r3, r3, #7
   1135c:	f043 0306 	orr.w	r3, r3, #6
   11360:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11362:	83a3      	strh	r3, [r4, #28]
   11364:	460f      	mov	r7, r1
		res = 0;
   11366:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11368:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   1136c:	68a2      	ldr	r2, [r4, #8]
   1136e:	2a00      	cmp	r2, #0
   11370:	d17d      	bne.n	1146e <process_event+0x282>
		    || !sys_slist_is_empty(&clients)
   11372:	2f00      	cmp	r7, #0
   11374:	d17e      	bne.n	11474 <process_event+0x288>
		    || (transit != NULL)) {
   11376:	2d00      	cmp	r5, #0
   11378:	d09e      	beq.n	112b8 <process_event+0xcc>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1137a:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1137c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   11380:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   11384:	83a3      	strh	r3, [r4, #28]
   11386:	4658      	mov	r0, fp
   11388:	f00b fb6e 	bl	1ca68 <z_spin_unlock_valid>
   1138c:	2800      	cmp	r0, #0
   1138e:	d173      	bne.n	11478 <process_event+0x28c>
   11390:	4961      	ldr	r1, [pc, #388]	; (11518 <process_event+0x32c>)
   11392:	4860      	ldr	r0, [pc, #384]	; (11514 <process_event+0x328>)
   11394:	22c2      	movs	r2, #194	; 0xc2
   11396:	f011 fe42 	bl	2301e <assert_print>
   1139a:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1139c:	485e      	ldr	r0, [pc, #376]	; (11518 <process_event+0x32c>)
   1139e:	e7b7      	b.n	11310 <process_event+0x124>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   113a0:	2902      	cmp	r1, #2
   113a2:	d008      	beq.n	113b6 <process_event+0x1ca>
   113a4:	495a      	ldr	r1, [pc, #360]	; (11510 <process_event+0x324>)
   113a6:	485b      	ldr	r0, [pc, #364]	; (11514 <process_event+0x328>)
   113a8:	f240 125d 	movw	r2, #349	; 0x15d
   113ac:	f011 fe37 	bl	2301e <assert_print>
   113b0:	f240 115d 	movw	r1, #349	; 0x15d
   113b4:	e7ab      	b.n	1130e <process_event+0x122>
			__ASSERT_NO_MSG(mgr->refs == 0);
   113b6:	8be7      	ldrh	r7, [r4, #30]
   113b8:	b147      	cbz	r7, 113cc <process_event+0x1e0>
   113ba:	4955      	ldr	r1, [pc, #340]	; (11510 <process_event+0x324>)
   113bc:	4855      	ldr	r0, [pc, #340]	; (11514 <process_event+0x328>)
   113be:	f44f 72af 	mov.w	r2, #350	; 0x15e
   113c2:	f011 fe2c 	bl	2301e <assert_print>
   113c6:	f44f 71af 	mov.w	r1, #350	; 0x15e
   113ca:	e7a0      	b.n	1130e <process_event+0x122>
			transit = mgr->transitions->stop;
   113cc:	6923      	ldr	r3, [r4, #16]
   113ce:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   113d0:	b945      	cbnz	r5, 113e4 <process_event+0x1f8>
   113d2:	494f      	ldr	r1, [pc, #316]	; (11510 <process_event+0x324>)
   113d4:	484f      	ldr	r0, [pc, #316]	; (11514 <process_event+0x328>)
   113d6:	f240 1261 	movw	r2, #353	; 0x161
   113da:	f011 fe20 	bl	2301e <assert_print>
   113de:	f240 1161 	movw	r1, #353	; 0x161
   113e2:	e794      	b.n	1130e <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113e4:	8ba3      	ldrh	r3, [r4, #28]
   113e6:	f023 0307 	bic.w	r3, r3, #7
   113ea:	f043 0304 	orr.w	r3, r3, #4
   113ee:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   113f0:	83a3      	strh	r3, [r4, #28]
		res = 0;
   113f2:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   113f4:	f04f 0904 	mov.w	r9, #4
   113f8:	e7b8      	b.n	1136c <process_event+0x180>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   113fa:	2901      	cmp	r1, #1
   113fc:	d008      	beq.n	11410 <process_event+0x224>
   113fe:	4944      	ldr	r1, [pc, #272]	; (11510 <process_event+0x324>)
   11400:	4844      	ldr	r0, [pc, #272]	; (11514 <process_event+0x328>)
   11402:	f44f 72b2 	mov.w	r2, #356	; 0x164
   11406:	f011 fe0a 	bl	2301e <assert_print>
   1140a:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1140e:	e77e      	b.n	1130e <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11410:	6823      	ldr	r3, [r4, #0]
   11412:	b943      	cbnz	r3, 11426 <process_event+0x23a>
   11414:	493e      	ldr	r1, [pc, #248]	; (11510 <process_event+0x324>)
   11416:	483f      	ldr	r0, [pc, #252]	; (11514 <process_event+0x328>)
   11418:	f240 1265 	movw	r2, #357	; 0x165
   1141c:	f011 fdff 	bl	2301e <assert_print>
   11420:	f240 1165 	movw	r1, #357	; 0x165
   11424:	e773      	b.n	1130e <process_event+0x122>
			transit = mgr->transitions->reset;
   11426:	6923      	ldr	r3, [r4, #16]
   11428:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   1142a:	b945      	cbnz	r5, 1143e <process_event+0x252>
   1142c:	4938      	ldr	r1, [pc, #224]	; (11510 <process_event+0x324>)
   1142e:	4839      	ldr	r0, [pc, #228]	; (11514 <process_event+0x328>)
   11430:	f44f 72b4 	mov.w	r2, #360	; 0x168
   11434:	f011 fdf3 	bl	2301e <assert_print>
   11438:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1143c:	e767      	b.n	1130e <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1143e:	8ba3      	ldrh	r3, [r4, #28]
   11440:	f023 0307 	bic.w	r3, r3, #7
   11444:	f043 0305 	orr.w	r3, r3, #5
   11448:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1144a:	2700      	movs	r7, #0
   1144c:	83a3      	strh	r3, [r4, #28]
		res = 0;
   1144e:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11450:	f04f 0905 	mov.w	r9, #5
   11454:	e78a      	b.n	1136c <process_event+0x180>
			__ASSERT_NO_MSG(false);
   11456:	492e      	ldr	r1, [pc, #184]	; (11510 <process_event+0x324>)
   11458:	482e      	ldr	r0, [pc, #184]	; (11514 <process_event+0x328>)
   1145a:	f240 126b 	movw	r2, #363	; 0x16b
   1145e:	f011 fdde 	bl	2301e <assert_print>
   11462:	f240 116b 	movw	r1, #363	; 0x16b
   11466:	e752      	b.n	1130e <process_event+0x122>
				   && !sys_slist_is_empty(&mgr->monitors);
   11468:	2700      	movs	r7, #0
   1146a:	2500      	movs	r5, #0
   1146c:	e77e      	b.n	1136c <process_event+0x180>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1146e:	f04f 0a01 	mov.w	sl, #1
   11472:	e783      	b.n	1137c <process_event+0x190>
   11474:	4692      	mov	sl, r2
   11476:	e781      	b.n	1137c <process_event+0x190>
   11478:	f386 8811 	msr	BASEPRI, r6
   1147c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11480:	f1ba 0f00 	cmp.w	sl, #0
   11484:	d117      	bne.n	114b6 <process_event+0x2ca>
	while (!sys_slist_is_empty(list)) {
   11486:	bb4f      	cbnz	r7, 114dc <process_event+0x2f0>
			if (transit != NULL) {
   11488:	b115      	cbz	r5, 11490 <process_event+0x2a4>
				transit(mgr, transition_complete);
   1148a:	4924      	ldr	r1, [pc, #144]	; (1151c <process_event+0x330>)
   1148c:	4620      	mov	r0, r4
   1148e:	47a8      	blx	r5
	__asm__ volatile(
   11490:	f04f 0340 	mov.w	r3, #64	; 0x40
   11494:	f3ef 8611 	mrs	r6, BASEPRI
   11498:	f383 8812 	msr	BASEPRI_MAX, r3
   1149c:	f3bf 8f6f 	isb	sy
   114a0:	4658      	mov	r0, fp
   114a2:	f00b fad3 	bl	1ca4c <z_spin_lock_valid>
   114a6:	bb08      	cbnz	r0, 114ec <process_event+0x300>
   114a8:	491b      	ldr	r1, [pc, #108]	; (11518 <process_event+0x32c>)
   114aa:	481a      	ldr	r0, [pc, #104]	; (11514 <process_event+0x328>)
   114ac:	2294      	movs	r2, #148	; 0x94
   114ae:	f011 fdb6 	bl	2301e <assert_print>
   114b2:	2194      	movs	r1, #148	; 0x94
   114b4:	e772      	b.n	1139c <process_event+0x1b0>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   114b6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   114b8:	2900      	cmp	r1, #0
   114ba:	d0e4      	beq.n	11486 <process_event+0x29a>
	return node->next;
   114bc:	680e      	ldr	r6, [r1, #0]
   114be:	2900      	cmp	r1, #0
   114c0:	d0e1      	beq.n	11486 <process_event+0x29a>
		mon->callback(mgr, mon, state, res);
   114c2:	f8d1 a004 	ldr.w	sl, [r1, #4]
   114c6:	4643      	mov	r3, r8
   114c8:	464a      	mov	r2, r9
   114ca:	4620      	mov	r0, r4
   114cc:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   114ce:	b11e      	cbz	r6, 114d8 <process_event+0x2ec>
   114d0:	6833      	ldr	r3, [r6, #0]
   114d2:	4631      	mov	r1, r6
   114d4:	461e      	mov	r6, r3
   114d6:	e7f2      	b.n	114be <process_event+0x2d2>
   114d8:	4633      	mov	r3, r6
   114da:	e7fa      	b.n	114d2 <process_event+0x2e6>
   114dc:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
   114de:	4643      	mov	r3, r8
   114e0:	464a      	mov	r2, r9
   114e2:	4620      	mov	r0, r4
   114e4:	683f      	ldr	r7, [r7, #0]
   114e6:	f011 fcf9 	bl	22edc <notify_one>
   114ea:	e7cc      	b.n	11486 <process_event+0x29a>
	z_spin_lock_set_owner(l);
   114ec:	4658      	mov	r0, fp
   114ee:	f00b facb 	bl	1ca88 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   114f2:	8ba3      	ldrh	r3, [r4, #28]
   114f4:	f023 0308 	bic.w	r3, r3, #8
   114f8:	83a3      	strh	r3, [r4, #28]
   114fa:	e6dd      	b.n	112b8 <process_event+0xcc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   114fc:	068b      	lsls	r3, r1, #26
   114fe:	f57f ae97 	bpl.w	11230 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11502:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11506:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   11508:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
   1150c:	e67a      	b.n	11204 <process_event+0x18>
   1150e:	bf00      	nop
   11510:	0002677d 	.word	0x0002677d
   11514:	00026718 	.word	0x00026718
   11518:	0002679f 	.word	0x0002679f
   1151c:	00011521 	.word	0x00011521

00011520 <transition_complete>:
{
   11520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11522:	4604      	mov	r4, r0
   11524:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11526:	f100 0614 	add.w	r6, r0, #20
   1152a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1152e:	f3ef 8711 	mrs	r7, BASEPRI
   11532:	f383 8812 	msr	BASEPRI_MAX, r3
   11536:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1153a:	4630      	mov	r0, r6
   1153c:	f00b fa86 	bl	1ca4c <z_spin_lock_valid>
   11540:	b940      	cbnz	r0, 11554 <transition_complete+0x34>
   11542:	490a      	ldr	r1, [pc, #40]	; (1156c <transition_complete+0x4c>)
   11544:	480a      	ldr	r0, [pc, #40]	; (11570 <transition_complete+0x50>)
   11546:	2294      	movs	r2, #148	; 0x94
   11548:	f011 fd69 	bl	2301e <assert_print>
   1154c:	4807      	ldr	r0, [pc, #28]	; (1156c <transition_complete+0x4c>)
   1154e:	2194      	movs	r1, #148	; 0x94
   11550:	f011 fd5e 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   11554:	4630      	mov	r0, r6
   11556:	f00b fa97 	bl	1ca88 <z_spin_lock_set_owner>
	mgr->last_res = res;
   1155a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1155c:	463a      	mov	r2, r7
   1155e:	4620      	mov	r0, r4
   11560:	2101      	movs	r1, #1
}
   11562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   11566:	f7ff be41 	b.w	111ec <process_event>
   1156a:	bf00      	nop
   1156c:	0002679f 	.word	0x0002679f
   11570:	00026718 	.word	0x00026718

00011574 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11578:	4604      	mov	r4, r0
   1157a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1157c:	f011 fc9e 	bl	22ebc <validate_args>

	if (rv < 0) {
   11580:	1e05      	subs	r5, r0, #0
   11582:	db5c      	blt.n	1163e <onoff_request+0xca>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11584:	f104 0914 	add.w	r9, r4, #20
   11588:	f04f 0340 	mov.w	r3, #64	; 0x40
   1158c:	f3ef 8a11 	mrs	sl, BASEPRI
   11590:	f383 8812 	msr	BASEPRI_MAX, r3
   11594:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11598:	4648      	mov	r0, r9
   1159a:	f00b fa57 	bl	1ca4c <z_spin_lock_valid>
   1159e:	4680      	mov	r8, r0
   115a0:	b938      	cbnz	r0, 115b2 <onoff_request+0x3e>
   115a2:	4932      	ldr	r1, [pc, #200]	; (1166c <onoff_request+0xf8>)
   115a4:	4832      	ldr	r0, [pc, #200]	; (11670 <onoff_request+0xfc>)
   115a6:	2294      	movs	r2, #148	; 0x94
   115a8:	f011 fd39 	bl	2301e <assert_print>
   115ac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   115ae:	482f      	ldr	r0, [pc, #188]	; (1166c <onoff_request+0xf8>)
   115b0:	e03a      	b.n	11628 <onoff_request+0xb4>
	z_spin_lock_set_owner(l);
   115b2:	4648      	mov	r0, r9
   115b4:	f00b fa68 	bl	1ca88 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   115b8:	8be3      	ldrh	r3, [r4, #30]
   115ba:	8ba6      	ldrh	r6, [r4, #28]
   115bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   115c0:	4293      	cmp	r3, r2
   115c2:	f006 0607 	and.w	r6, r6, #7
   115c6:	d03d      	beq.n	11644 <onoff_request+0xd0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   115c8:	2e02      	cmp	r6, #2
   115ca:	d10e      	bne.n	115ea <onoff_request+0x76>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   115cc:	3301      	adds	r3, #1
   115ce:	83e3      	strh	r3, [r4, #30]
	rv = state;
   115d0:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   115d2:	4648      	mov	r0, r9
   115d4:	f00b fa48 	bl	1ca68 <z_spin_unlock_valid>
   115d8:	2800      	cmp	r0, #0
   115da:	d139      	bne.n	11650 <onoff_request+0xdc>
   115dc:	4923      	ldr	r1, [pc, #140]	; (1166c <onoff_request+0xf8>)
   115de:	4824      	ldr	r0, [pc, #144]	; (11670 <onoff_request+0xfc>)
   115e0:	22c2      	movs	r2, #194	; 0xc2
   115e2:	f011 fd1c 	bl	2301e <assert_print>
   115e6:	21c2      	movs	r1, #194	; 0xc2
   115e8:	e7e1      	b.n	115ae <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   115ea:	2e06      	cmp	r6, #6
   115ec:	d813      	bhi.n	11616 <onoff_request+0xa2>
   115ee:	e8df f006 	tbb	[pc, r6]
   115f2:	2c09      	.short	0x2c09
   115f4:	04091212 	.word	0x04091212
   115f8:	09          	.byte	0x09
   115f9:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
   115fa:	f06f 0585 	mvn.w	r5, #133	; 0x85
   115fe:	f04f 0800 	mov.w	r8, #0
   11602:	e7e6      	b.n	115d2 <onoff_request+0x5e>
	parent->next = child;
   11604:	2300      	movs	r3, #0
   11606:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   11608:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1160a:	b97b      	cbnz	r3, 1162c <onoff_request+0xb8>
	list->head = node;
   1160c:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   11610:	b17e      	cbz	r6, 11632 <onoff_request+0xbe>
	rv = state;
   11612:	4635      	mov	r5, r6
   11614:	e7f3      	b.n	115fe <onoff_request+0x8a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11616:	4917      	ldr	r1, [pc, #92]	; (11674 <onoff_request+0x100>)
   11618:	4815      	ldr	r0, [pc, #84]	; (11670 <onoff_request+0xfc>)
   1161a:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1161e:	f011 fcfe 	bl	2301e <assert_print>
   11622:	4814      	ldr	r0, [pc, #80]	; (11674 <onoff_request+0x100>)
   11624:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   11628:	f011 fcf2 	bl	23010 <assert_post_action>
	parent->next = child;
   1162c:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1162e:	6067      	str	r7, [r4, #4]
}
   11630:	e7ee      	b.n	11610 <onoff_request+0x9c>
		process_event(mgr, EVT_RECHECK, key);
   11632:	4652      	mov	r2, sl
   11634:	2102      	movs	r1, #2
   11636:	4620      	mov	r0, r4
   11638:	f7ff fdd8 	bl	111ec <process_event>
   1163c:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1163e:	4628      	mov	r0, r5
   11640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   11644:	f06f 050a 	mvn.w	r5, #10
   11648:	e7d9      	b.n	115fe <onoff_request+0x8a>
	if (state == ONOFF_STATE_ON) {
   1164a:	f06f 0504 	mvn.w	r5, #4
   1164e:	e7d6      	b.n	115fe <onoff_request+0x8a>
	__asm__ volatile(
   11650:	f38a 8811 	msr	BASEPRI, sl
   11654:	f3bf 8f6f 	isb	sy
		if (notify) {
   11658:	f1b8 0f00 	cmp.w	r8, #0
   1165c:	d0ef      	beq.n	1163e <onoff_request+0xca>
			notify_one(mgr, cli, state, 0);
   1165e:	2300      	movs	r3, #0
   11660:	4632      	mov	r2, r6
   11662:	4639      	mov	r1, r7
   11664:	4620      	mov	r0, r4
   11666:	f011 fc39 	bl	22edc <notify_one>
   1166a:	e7e8      	b.n	1163e <onoff_request+0xca>
   1166c:	0002679f 	.word	0x0002679f
   11670:	00026718 	.word	0x00026718
   11674:	0002677d 	.word	0x0002677d

00011678 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   11678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1167a:	4605      	mov	r5, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1167c:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   11680:	f04f 0340 	mov.w	r3, #64	; 0x40
   11684:	f3ef 8711 	mrs	r7, BASEPRI
   11688:	f383 8812 	msr	BASEPRI_MAX, r3
   1168c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11690:	4630      	mov	r0, r6
   11692:	f00b f9db 	bl	1ca4c <z_spin_lock_valid>
   11696:	b938      	cbnz	r0, 116a8 <onoff_release+0x30>
   11698:	491f      	ldr	r1, [pc, #124]	; (11718 <onoff_release+0xa0>)
   1169a:	4820      	ldr	r0, [pc, #128]	; (1171c <onoff_release+0xa4>)
   1169c:	2294      	movs	r2, #148	; 0x94
   1169e:	f011 fcbe 	bl	2301e <assert_print>
   116a2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   116a4:	481c      	ldr	r0, [pc, #112]	; (11718 <onoff_release+0xa0>)
   116a6:	e023      	b.n	116f0 <onoff_release+0x78>
	z_spin_lock_set_owner(l);
   116a8:	4630      	mov	r0, r6
   116aa:	f00b f9ed 	bl	1ca88 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   116ae:	8bac      	ldrh	r4, [r5, #28]
   116b0:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   116b4:	2c02      	cmp	r4, #2
   116b6:	d010      	beq.n	116da <onoff_release+0x62>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   116b8:	2c01      	cmp	r4, #1
   116ba:	bf0c      	ite	eq
   116bc:	f06f 0404 	mvneq.w	r4, #4
   116c0:	f06f 0485 	mvnne.w	r4, #133	; 0x85
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   116c4:	4630      	mov	r0, r6
   116c6:	f00b f9cf 	bl	1ca68 <z_spin_unlock_valid>
   116ca:	b9f8      	cbnz	r0, 1170c <onoff_release+0x94>
   116cc:	4912      	ldr	r1, [pc, #72]	; (11718 <onoff_release+0xa0>)
   116ce:	4813      	ldr	r0, [pc, #76]	; (1171c <onoff_release+0xa4>)
   116d0:	22c2      	movs	r2, #194	; 0xc2
   116d2:	f011 fca4 	bl	2301e <assert_print>
   116d6:	21c2      	movs	r1, #194	; 0xc2
   116d8:	e7e4      	b.n	116a4 <onoff_release+0x2c>
		}
		goto out;
	}

	__ASSERT_NO_MSG(mgr->refs > 0);
   116da:	8beb      	ldrh	r3, [r5, #30]
   116dc:	b953      	cbnz	r3, 116f4 <onoff_release+0x7c>
   116de:	4910      	ldr	r1, [pc, #64]	; (11720 <onoff_release+0xa8>)
   116e0:	480e      	ldr	r0, [pc, #56]	; (1171c <onoff_release+0xa4>)
   116e2:	f240 12ef 	movw	r2, #495	; 0x1ef
   116e6:	f011 fc9a 	bl	2301e <assert_print>
   116ea:	480d      	ldr	r0, [pc, #52]	; (11720 <onoff_release+0xa8>)
   116ec:	f240 11ef 	movw	r1, #495	; 0x1ef
   116f0:	f011 fc8e 	bl	23010 <assert_post_action>
	mgr->refs -= 1U;
   116f4:	3b01      	subs	r3, #1
   116f6:	b29b      	uxth	r3, r3
   116f8:	83eb      	strh	r3, [r5, #30]
	stop = (mgr->refs == 0);

out:
	if (stop) {
   116fa:	2b00      	cmp	r3, #0
   116fc:	d1e2      	bne.n	116c4 <onoff_release+0x4c>
		process_event(mgr, EVT_RECHECK, key);
   116fe:	463a      	mov	r2, r7
   11700:	4621      	mov	r1, r4
   11702:	4628      	mov	r0, r5
   11704:	f7ff fd72 	bl	111ec <process_event>
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
   11708:	4620      	mov	r0, r4
   1170a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
   1170c:	f387 8811 	msr	BASEPRI, r7
   11710:	f3bf 8f6f 	isb	sy
	return rv;
   11714:	e7f8      	b.n	11708 <onoff_release+0x90>
   11716:	bf00      	nop
   11718:	0002679f 	.word	0x0002679f
   1171c:	00026718 	.word	0x00026718
   11720:	0002677d 	.word	0x0002677d

00011724 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   11724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11728:	460e      	mov	r6, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1172a:	4605      	mov	r5, r0
   1172c:	2800      	cmp	r0, #0
   1172e:	d044      	beq.n	117ba <onoff_cancel+0x96>
   11730:	2900      	cmp	r1, #0
   11732:	d042      	beq.n	117ba <onoff_cancel+0x96>
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11734:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   11738:	f04f 0340 	mov.w	r3, #64	; 0x40
   1173c:	f3ef 8811 	mrs	r8, BASEPRI
   11740:	f383 8812 	msr	BASEPRI_MAX, r3
   11744:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11748:	4638      	mov	r0, r7
   1174a:	f00b f97f 	bl	1ca4c <z_spin_lock_valid>
   1174e:	b938      	cbnz	r0, 11760 <onoff_cancel+0x3c>
   11750:	491b      	ldr	r1, [pc, #108]	; (117c0 <onoff_cancel+0x9c>)
   11752:	481c      	ldr	r0, [pc, #112]	; (117c4 <onoff_cancel+0xa0>)
   11754:	2294      	movs	r2, #148	; 0x94
   11756:	f011 fc62 	bl	2301e <assert_print>
   1175a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1175c:	4818      	ldr	r0, [pc, #96]	; (117c0 <onoff_cancel+0x9c>)
   1175e:	e016      	b.n	1178e <onoff_cancel+0x6a>
	z_spin_lock_set_owner(l);
   11760:	4638      	mov	r0, r7
   11762:	f00b f991 	bl	1ca88 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   11766:	4631      	mov	r1, r6
   11768:	4628      	mov	r0, r5
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1176a:	8bac      	ldrh	r4, [r5, #28]
	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   1176c:	f011 fb6f 	bl	22e4e <sys_slist_find_and_remove>
   11770:	b178      	cbz	r0, 11792 <onoff_cancel+0x6e>
   11772:	f004 0407 	and.w	r4, r4, #7
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
   11776:	1f23      	subs	r3, r4, #4
   11778:	2b02      	cmp	r3, #2
   1177a:	d90c      	bls.n	11796 <onoff_cancel+0x72>
   1177c:	4912      	ldr	r1, [pc, #72]	; (117c8 <onoff_cancel+0xa4>)
   1177e:	4811      	ldr	r0, [pc, #68]	; (117c4 <onoff_cancel+0xa0>)
   11780:	f240 222d 	movw	r2, #557	; 0x22d
   11784:	f011 fc4b 	bl	2301e <assert_print>
   11788:	480f      	ldr	r0, [pc, #60]	; (117c8 <onoff_cancel+0xa4>)
   1178a:	f240 212d 	movw	r1, #557	; 0x22d
   1178e:	f011 fc3f 	bl	23010 <assert_post_action>
	int rv = -EALREADY;
   11792:	f06f 0477 	mvn.w	r4, #119	; 0x77
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11796:	4638      	mov	r0, r7
   11798:	f00b f966 	bl	1ca68 <z_spin_unlock_valid>
   1179c:	b930      	cbnz	r0, 117ac <onoff_cancel+0x88>
   1179e:	4908      	ldr	r1, [pc, #32]	; (117c0 <onoff_cancel+0x9c>)
   117a0:	4808      	ldr	r0, [pc, #32]	; (117c4 <onoff_cancel+0xa0>)
   117a2:	22c2      	movs	r2, #194	; 0xc2
   117a4:	f011 fc3b 	bl	2301e <assert_print>
   117a8:	21c2      	movs	r1, #194	; 0xc2
   117aa:	e7d7      	b.n	1175c <onoff_cancel+0x38>
	__asm__ volatile(
   117ac:	f388 8811 	msr	BASEPRI, r8
   117b0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   117b4:	4620      	mov	r0, r4
   117b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   117ba:	f06f 0415 	mvn.w	r4, #21
   117be:	e7f9      	b.n	117b4 <onoff_cancel+0x90>
   117c0:	0002679f 	.word	0x0002679f
   117c4:	00026718 	.word	0x00026718
   117c8:	0002677d 	.word	0x0002677d

000117cc <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   117cc:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   117ce:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   117d0:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
   117d2:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   117d6:	2a02      	cmp	r2, #2
{
   117d8:	4603      	mov	r3, r0
	switch (method) {
   117da:	d00a      	beq.n	117f2 <sys_notify_finalize+0x26>
   117dc:	2a03      	cmp	r2, #3
   117de:	f04f 0100 	mov.w	r1, #0
   117e2:	d003      	beq.n	117ec <sys_notify_finalize+0x20>
   117e4:	2a01      	cmp	r2, #1
   117e6:	d10a      	bne.n	117fe <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   117e8:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   117ea:	e006      	b.n	117fa <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   117ec:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   117ee:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   117f0:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
   117f2:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   117f4:	2200      	movs	r2, #0
   117f6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   117f8:	b950      	cbnz	r0, 11810 <sys_notify_finalize+0x44>
	sys_notify_generic_callback rv = NULL;
   117fa:	2000      	movs	r0, #0
   117fc:	e7f8      	b.n	117f0 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   117fe:	4906      	ldr	r1, [pc, #24]	; (11818 <sys_notify_finalize+0x4c>)
   11800:	4806      	ldr	r0, [pc, #24]	; (1181c <sys_notify_finalize+0x50>)
   11802:	2245      	movs	r2, #69	; 0x45
   11804:	f011 fc0b 	bl	2301e <assert_print>
   11808:	4803      	ldr	r0, [pc, #12]	; (11818 <sys_notify_finalize+0x4c>)
   1180a:	2145      	movs	r1, #69	; 0x45
   1180c:	f011 fc00 	bl	23010 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11810:	f00d fd4c 	bl	1f2ac <z_impl_k_poll_signal_raise>
   11814:	e7f1      	b.n	117fa <sys_notify_finalize+0x2e>
   11816:	bf00      	nop
   11818:	000267cc 	.word	0x000267cc
   1181c:	00026718 	.word	0x00026718

00011820 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   11820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11824:	4681      	mov	r9, r0
   11826:	b095      	sub	sp, #84	; 0x54
   11828:	468b      	mov	fp, r1
   1182a:	4617      	mov	r7, r2
   1182c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1182e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11830:	7838      	ldrb	r0, [r7, #0]
   11832:	b908      	cbnz	r0, 11838 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   11834:	4628      	mov	r0, r5
   11836:	e358      	b.n	11eea <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   11838:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   1183a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1183c:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   1183e:	d006      	beq.n	1184e <z_cbvprintf_impl+0x2e>
			OUTC('%');
   11840:	4659      	mov	r1, fp
   11842:	47c8      	blx	r9
   11844:	2800      	cmp	r0, #0
   11846:	f2c0 8350 	blt.w	11eea <z_cbvprintf_impl+0x6ca>
   1184a:	3501      	adds	r5, #1
		if (bps == NULL) {
   1184c:	e1fb      	b.n	11c46 <z_cbvprintf_impl+0x426>
		} state = {
   1184e:	2218      	movs	r2, #24
   11850:	2100      	movs	r1, #0
   11852:	a80e      	add	r0, sp, #56	; 0x38
   11854:	f011 fe93 	bl	2357e <memset>
	if (*sp == '%') {
   11858:	787b      	ldrb	r3, [r7, #1]
   1185a:	2b25      	cmp	r3, #37	; 0x25
   1185c:	d07d      	beq.n	1195a <z_cbvprintf_impl+0x13a>
   1185e:	2300      	movs	r3, #0
   11860:	1c78      	adds	r0, r7, #1
   11862:	4698      	mov	r8, r3
   11864:	469e      	mov	lr, r3
   11866:	469c      	mov	ip, r3
   11868:	461e      	mov	r6, r3
   1186a:	4601      	mov	r1, r0
		switch (*sp) {
   1186c:	f810 2b01 	ldrb.w	r2, [r0], #1
   11870:	2a2b      	cmp	r2, #43	; 0x2b
   11872:	f000 80a1 	beq.w	119b8 <z_cbvprintf_impl+0x198>
   11876:	f200 8098 	bhi.w	119aa <z_cbvprintf_impl+0x18a>
   1187a:	2a20      	cmp	r2, #32
   1187c:	f000 809f 	beq.w	119be <z_cbvprintf_impl+0x19e>
   11880:	2a23      	cmp	r2, #35	; 0x23
   11882:	f000 809f 	beq.w	119c4 <z_cbvprintf_impl+0x1a4>
   11886:	b12b      	cbz	r3, 11894 <z_cbvprintf_impl+0x74>
   11888:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1188c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11890:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11894:	f1b8 0f00 	cmp.w	r8, #0
   11898:	d005      	beq.n	118a6 <z_cbvprintf_impl+0x86>
   1189a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1189e:	f043 0320 	orr.w	r3, r3, #32
   118a2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   118a6:	f1be 0f00 	cmp.w	lr, #0
   118aa:	d005      	beq.n	118b8 <z_cbvprintf_impl+0x98>
   118ac:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   118b0:	f043 0310 	orr.w	r3, r3, #16
   118b4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   118b8:	f1bc 0f00 	cmp.w	ip, #0
   118bc:	d005      	beq.n	118ca <z_cbvprintf_impl+0xaa>
   118be:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   118c2:	f043 0308 	orr.w	r3, r3, #8
   118c6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   118ca:	b12e      	cbz	r6, 118d8 <z_cbvprintf_impl+0xb8>
   118cc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   118d0:	f043 0304 	orr.w	r3, r3, #4
   118d4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   118d8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   118dc:	f003 0044 	and.w	r0, r3, #68	; 0x44
   118e0:	2844      	cmp	r0, #68	; 0x44
   118e2:	d103      	bne.n	118ec <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   118e4:	f36f 1386 	bfc	r3, #6, #1
   118e8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   118ec:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   118f0:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   118f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   118f6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   118fa:	d17f      	bne.n	119fc <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   118fc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11900:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   11904:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   11906:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   1190a:	781a      	ldrb	r2, [r3, #0]
   1190c:	2a2e      	cmp	r2, #46	; 0x2e
   1190e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11912:	bf0c      	ite	eq
   11914:	2101      	moveq	r1, #1
   11916:	2100      	movne	r1, #0
   11918:	f361 0241 	bfi	r2, r1, #1, #1
   1191c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   11920:	d178      	bne.n	11a14 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   11922:	785a      	ldrb	r2, [r3, #1]
   11924:	2a2a      	cmp	r2, #42	; 0x2a
   11926:	d06e      	beq.n	11a06 <z_cbvprintf_impl+0x1e6>
	++sp;
   11928:	3301      	adds	r3, #1
	size_t val = 0;
   1192a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1192c:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11930:	4619      	mov	r1, r3
   11932:	f811 0b01 	ldrb.w	r0, [r1], #1
   11936:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1193a:	2e09      	cmp	r6, #9
   1193c:	f240 8095 	bls.w	11a6a <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   11940:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   11944:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   11946:	f3c1 0040 	ubfx	r0, r1, #1, #1
   1194a:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   1194e:	460a      	mov	r2, r1
   11950:	f360 0241 	bfi	r2, r0, #1, #1
   11954:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   11958:	e05c      	b.n	11a14 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   1195a:	1cba      	adds	r2, r7, #2
   1195c:	9203      	str	r2, [sp, #12]
   1195e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   11962:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   11966:	07da      	lsls	r2, r3, #31
   11968:	f140 812e 	bpl.w	11bc8 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   1196c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   11970:	f1b8 0f00 	cmp.w	r8, #0
   11974:	da07      	bge.n	11986 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   11976:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1197a:	f042 0204 	orr.w	r2, r2, #4
   1197e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   11982:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   11986:	075e      	lsls	r6, r3, #29
   11988:	f140 8127 	bpl.w	11bda <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   1198c:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   11990:	f1ba 0f00 	cmp.w	sl, #0
   11994:	f280 8126 	bge.w	11be4 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   11998:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1199c:	f36f 0341 	bfc	r3, #1, #1
   119a0:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   119a4:	f04f 3aff 	mov.w	sl, #4294967295
   119a8:	e11c      	b.n	11be4 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   119aa:	2a2d      	cmp	r2, #45	; 0x2d
   119ac:	d00d      	beq.n	119ca <z_cbvprintf_impl+0x1aa>
   119ae:	2a30      	cmp	r2, #48	; 0x30
   119b0:	f47f af69 	bne.w	11886 <z_cbvprintf_impl+0x66>
   119b4:	2301      	movs	r3, #1
	} while (loop);
   119b6:	e758      	b.n	1186a <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   119b8:	f04f 0c01 	mov.w	ip, #1
   119bc:	e755      	b.n	1186a <z_cbvprintf_impl+0x4a>
   119be:	f04f 0e01 	mov.w	lr, #1
   119c2:	e752      	b.n	1186a <z_cbvprintf_impl+0x4a>
   119c4:	f04f 0801 	mov.w	r8, #1
   119c8:	e74f      	b.n	1186a <z_cbvprintf_impl+0x4a>
   119ca:	2601      	movs	r6, #1
   119cc:	e74d      	b.n	1186a <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   119ce:	fb0e 6202 	mla	r2, lr, r2, r6
   119d2:	3a30      	subs	r2, #48	; 0x30
   119d4:	4603      	mov	r3, r0
   119d6:	4618      	mov	r0, r3
   119d8:	f810 6b01 	ldrb.w	r6, [r0], #1
   119dc:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   119e0:	f1bc 0f09 	cmp.w	ip, #9
   119e4:	d9f3      	bls.n	119ce <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   119e6:	4299      	cmp	r1, r3
   119e8:	d08f      	beq.n	1190a <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   119ea:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   119ee:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   119f0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   119f2:	f362 0141 	bfi	r1, r2, #1, #1
   119f6:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   119fa:	e786      	b.n	1190a <z_cbvprintf_impl+0xea>
   119fc:	460b      	mov	r3, r1
	size_t val = 0;
   119fe:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11a00:	f04f 0e0a 	mov.w	lr, #10
   11a04:	e7e7      	b.n	119d6 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   11a06:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11a0a:	f042 0204 	orr.w	r2, r2, #4
   11a0e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   11a12:	3302      	adds	r3, #2
	switch (*sp) {
   11a14:	781a      	ldrb	r2, [r3, #0]
   11a16:	2a6c      	cmp	r2, #108	; 0x6c
   11a18:	d047      	beq.n	11aaa <z_cbvprintf_impl+0x28a>
   11a1a:	d82b      	bhi.n	11a74 <z_cbvprintf_impl+0x254>
   11a1c:	2a68      	cmp	r2, #104	; 0x68
   11a1e:	d031      	beq.n	11a84 <z_cbvprintf_impl+0x264>
   11a20:	2a6a      	cmp	r2, #106	; 0x6a
   11a22:	d04b      	beq.n	11abc <z_cbvprintf_impl+0x29c>
   11a24:	2a4c      	cmp	r2, #76	; 0x4c
   11a26:	d051      	beq.n	11acc <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   11a28:	461a      	mov	r2, r3
   11a2a:	f812 3b01 	ldrb.w	r3, [r2], #1
   11a2e:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   11a30:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a32:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   11a36:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   11a3a:	f200 80be 	bhi.w	11bba <z_cbvprintf_impl+0x39a>
   11a3e:	2b6d      	cmp	r3, #109	; 0x6d
   11a40:	d851      	bhi.n	11ae6 <z_cbvprintf_impl+0x2c6>
   11a42:	2b69      	cmp	r3, #105	; 0x69
   11a44:	f200 80b9 	bhi.w	11bba <z_cbvprintf_impl+0x39a>
   11a48:	2b57      	cmp	r3, #87	; 0x57
   11a4a:	d867      	bhi.n	11b1c <z_cbvprintf_impl+0x2fc>
   11a4c:	2b41      	cmp	r3, #65	; 0x41
   11a4e:	d003      	beq.n	11a58 <z_cbvprintf_impl+0x238>
   11a50:	3b45      	subs	r3, #69	; 0x45
   11a52:	2b02      	cmp	r3, #2
   11a54:	f200 80b1 	bhi.w	11bba <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   11a58:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11a5c:	2204      	movs	r2, #4
   11a5e:	f362 0302 	bfi	r3, r2, #0, #3
   11a62:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   11a66:	2301      	movs	r3, #1
			break;
   11a68:	e073      	b.n	11b52 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   11a6a:	fb0c 0202 	mla	r2, ip, r2, r0
   11a6e:	3a30      	subs	r2, #48	; 0x30
   11a70:	460b      	mov	r3, r1
   11a72:	e75d      	b.n	11930 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   11a74:	2a74      	cmp	r2, #116	; 0x74
   11a76:	d025      	beq.n	11ac4 <z_cbvprintf_impl+0x2a4>
   11a78:	2a7a      	cmp	r2, #122	; 0x7a
   11a7a:	d1d5      	bne.n	11a28 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   11a7c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11a80:	2106      	movs	r1, #6
   11a82:	e00c      	b.n	11a9e <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   11a84:	785a      	ldrb	r2, [r3, #1]
   11a86:	2a68      	cmp	r2, #104	; 0x68
   11a88:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11a8c:	d106      	bne.n	11a9c <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   11a8e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   11a90:	f361 02c6 	bfi	r2, r1, #3, #4
   11a94:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   11a98:	3302      	adds	r3, #2
   11a9a:	e7c5      	b.n	11a28 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   11a9c:	2102      	movs	r1, #2
   11a9e:	f361 02c6 	bfi	r2, r1, #3, #4
   11aa2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   11aa6:	3301      	adds	r3, #1
   11aa8:	e7be      	b.n	11a28 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   11aaa:	785a      	ldrb	r2, [r3, #1]
   11aac:	2a6c      	cmp	r2, #108	; 0x6c
   11aae:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11ab2:	d101      	bne.n	11ab8 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   11ab4:	2104      	movs	r1, #4
   11ab6:	e7eb      	b.n	11a90 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   11ab8:	2103      	movs	r1, #3
   11aba:	e7f0      	b.n	11a9e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   11abc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11ac0:	2105      	movs	r1, #5
   11ac2:	e7ec      	b.n	11a9e <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   11ac4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11ac8:	2107      	movs	r1, #7
   11aca:	e7e8      	b.n	11a9e <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   11acc:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   11ad0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   11ad4:	f022 0202 	bic.w	r2, r2, #2
   11ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   11adc:	f042 0202 	orr.w	r2, r2, #2
   11ae0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   11ae4:	e7df      	b.n	11aa6 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   11ae6:	3b6e      	subs	r3, #110	; 0x6e
   11ae8:	b2d9      	uxtb	r1, r3
   11aea:	2301      	movs	r3, #1
   11aec:	408b      	lsls	r3, r1
   11aee:	f240 4182 	movw	r1, #1154	; 0x482
   11af2:	420b      	tst	r3, r1
   11af4:	d137      	bne.n	11b66 <z_cbvprintf_impl+0x346>
   11af6:	f013 0f24 	tst.w	r3, #36	; 0x24
   11afa:	d151      	bne.n	11ba0 <z_cbvprintf_impl+0x380>
   11afc:	07d8      	lsls	r0, r3, #31
   11afe:	d55c      	bpl.n	11bba <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   11b00:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11b04:	2103      	movs	r1, #3
   11b06:	f361 0302 	bfi	r3, r1, #0, #3
   11b0a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   11b0e:	f002 0378 	and.w	r3, r2, #120	; 0x78
   11b12:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   11b16:	424b      	negs	r3, r1
   11b18:	414b      	adcs	r3, r1
   11b1a:	e01a      	b.n	11b52 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   11b1c:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   11b20:	b2c9      	uxtb	r1, r1
   11b22:	2001      	movs	r0, #1
   11b24:	fa00 f101 	lsl.w	r1, r0, r1
   11b28:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   11b2c:	d194      	bne.n	11a58 <z_cbvprintf_impl+0x238>
   11b2e:	f640 0601 	movw	r6, #2049	; 0x801
   11b32:	4231      	tst	r1, r6
   11b34:	d11d      	bne.n	11b72 <z_cbvprintf_impl+0x352>
   11b36:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   11b3a:	d03e      	beq.n	11bba <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   11b3c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11b40:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11b44:	f002 0278 	and.w	r2, r2, #120	; 0x78
   11b48:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   11b4a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   11b4e:	d034      	beq.n	11bba <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   11b50:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   11b52:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   11b56:	f3c2 0140 	ubfx	r1, r2, #1, #1
   11b5a:	430b      	orrs	r3, r1
   11b5c:	f363 0241 	bfi	r2, r3, #1, #1
   11b60:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   11b64:	e6fd      	b.n	11962 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   11b66:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11b6a:	2102      	movs	r1, #2
   11b6c:	f361 0302 	bfi	r3, r1, #0, #3
   11b70:	e7e8      	b.n	11b44 <z_cbvprintf_impl+0x324>
   11b72:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   11b76:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   11b78:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11b7c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11b80:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11b82:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   11b86:	bf02      	ittt	eq
   11b88:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   11b8c:	f041 0101 	orreq.w	r1, r1, #1
   11b90:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   11b94:	2b63      	cmp	r3, #99	; 0x63
   11b96:	d1db      	bne.n	11b50 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11b98:	1e13      	subs	r3, r2, #0
   11b9a:	bf18      	it	ne
   11b9c:	2301      	movne	r3, #1
   11b9e:	e7d8      	b.n	11b52 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   11ba0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11ba4:	2103      	movs	r1, #3
   11ba6:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   11baa:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11bae:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   11bb2:	bf14      	ite	ne
   11bb4:	2301      	movne	r3, #1
   11bb6:	2300      	moveq	r3, #0
   11bb8:	e7cb      	b.n	11b52 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   11bba:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11bbe:	f043 0301 	orr.w	r3, r3, #1
   11bc2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   11bc6:	e7c3      	b.n	11b50 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   11bc8:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   11bcc:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11bce:	bfb4      	ite	lt
   11bd0:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   11bd4:	f04f 38ff 	movge.w	r8, #4294967295
   11bd8:	e6d5      	b.n	11986 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   11bda:	0798      	lsls	r0, r3, #30
   11bdc:	f57f aee2 	bpl.w	119a4 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   11be0:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   11be4:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   11be8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11bea:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   11bee:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   11bf2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11bf6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11bf8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11bfc:	d133      	bne.n	11c66 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   11bfe:	1ecb      	subs	r3, r1, #3
   11c00:	2b04      	cmp	r3, #4
   11c02:	d804      	bhi.n	11c0e <z_cbvprintf_impl+0x3ee>
   11c04:	e8df f003 	tbb	[pc, r3]
   11c08:	21464621 	.word	0x21464621
   11c0c:	21          	.byte	0x21
   11c0d:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11c0e:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   11c10:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   11c12:	ea4f 72e3 	mov.w	r2, r3, asr #31
   11c16:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   11c1a:	d11c      	bne.n	11c56 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   11c1c:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   11c20:	17da      	asrs	r2, r3, #31
   11c22:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   11c26:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   11c28:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11c2c:	f013 0603 	ands.w	r6, r3, #3
   11c30:	d050      	beq.n	11cd4 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   11c32:	9b03      	ldr	r3, [sp, #12]
   11c34:	463a      	mov	r2, r7
   11c36:	4659      	mov	r1, fp
   11c38:	4648      	mov	r0, r9
   11c3a:	f011 f9d2 	bl	22fe2 <outs>
   11c3e:	2800      	cmp	r0, #0
   11c40:	f2c0 8153 	blt.w	11eea <z_cbvprintf_impl+0x6ca>
   11c44:	4405      	add	r5, r0
			continue;
   11c46:	9f03      	ldr	r7, [sp, #12]
   11c48:	e5f2      	b.n	11830 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11c4a:	f854 3b04 	ldr.w	r3, [r4], #4
   11c4e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   11c50:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   11c54:	e7e8      	b.n	11c28 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   11c56:	2902      	cmp	r1, #2
   11c58:	d1e5      	bne.n	11c26 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   11c5a:	b21a      	sxth	r2, r3
   11c5c:	f343 33c0 	sbfx	r3, r3, #15, #1
   11c60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11c64:	e7df      	b.n	11c26 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   11c66:	2b02      	cmp	r3, #2
   11c68:	d124      	bne.n	11cb4 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   11c6a:	1ecb      	subs	r3, r1, #3
   11c6c:	2b04      	cmp	r3, #4
   11c6e:	d804      	bhi.n	11c7a <z_cbvprintf_impl+0x45a>
   11c70:	e8df f003 	tbb	[pc, r3]
   11c74:	18101018 	.word	0x18101018
   11c78:	18          	.byte	0x18
   11c79:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   11c7a:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   11c7c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   11c80:	f04f 0200 	mov.w	r2, #0
   11c84:	d014      	beq.n	11cb0 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   11c86:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   11c88:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   11c8c:	d1cc      	bne.n	11c28 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   11c8e:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   11c90:	930e      	str	r3, [sp, #56]	; 0x38
   11c92:	e7c9      	b.n	11c28 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   11c94:	3407      	adds	r4, #7
   11c96:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   11c9a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   11c9e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   11ca2:	e7c1      	b.n	11c28 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   11ca4:	f854 3b04 	ldr.w	r3, [r4], #4
   11ca8:	930e      	str	r3, [sp, #56]	; 0x38
   11caa:	2300      	movs	r3, #0
   11cac:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   11cae:	e7bb      	b.n	11c28 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   11cb0:	b2db      	uxtb	r3, r3
   11cb2:	e7cd      	b.n	11c50 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   11cb4:	2b04      	cmp	r3, #4
   11cb6:	d108      	bne.n	11cca <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   11cb8:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   11cba:	f024 0407 	bic.w	r4, r4, #7
   11cbe:	e9d4 2300 	ldrd	r2, r3, [r4]
   11cc2:	3408      	adds	r4, #8
   11cc4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11cc8:	e7ae      	b.n	11c28 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11cca:	2b03      	cmp	r3, #3
   11ccc:	d1ac      	bne.n	11c28 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   11cce:	f854 3b04 	ldr.w	r3, [r4], #4
   11cd2:	e7dd      	b.n	11c90 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   11cd4:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   11cd8:	2878      	cmp	r0, #120	; 0x78
   11cda:	d8b4      	bhi.n	11c46 <z_cbvprintf_impl+0x426>
   11cdc:	2862      	cmp	r0, #98	; 0x62
   11cde:	d81c      	bhi.n	11d1a <z_cbvprintf_impl+0x4fa>
   11ce0:	2825      	cmp	r0, #37	; 0x25
   11ce2:	f43f adad 	beq.w	11840 <z_cbvprintf_impl+0x20>
   11ce6:	2858      	cmp	r0, #88	; 0x58
   11ce8:	d1ad      	bne.n	11c46 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11cea:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11cee:	9300      	str	r3, [sp, #0]
   11cf0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   11cf4:	ab08      	add	r3, sp, #32
   11cf6:	aa10      	add	r2, sp, #64	; 0x40
   11cf8:	f011 f92d 	bl	22f56 <encode_uint>
			if (precision >= 0) {
   11cfc:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   11d00:	4607      	mov	r7, r0
			if (precision >= 0) {
   11d02:	f280 809a 	bge.w	11e3a <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   11d06:	2f00      	cmp	r7, #0
   11d08:	d09d      	beq.n	11c46 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   11d0a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11d0e:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   11d10:	2e00      	cmp	r6, #0
   11d12:	f000 80c1 	beq.w	11e98 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   11d16:	3001      	adds	r0, #1
   11d18:	e0be      	b.n	11e98 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   11d1a:	3863      	subs	r0, #99	; 0x63
   11d1c:	2815      	cmp	r0, #21
   11d1e:	d892      	bhi.n	11c46 <z_cbvprintf_impl+0x426>
   11d20:	a201      	add	r2, pc, #4	; (adr r2, 11d28 <z_cbvprintf_impl+0x508>)
   11d22:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   11d26:	bf00      	nop
   11d28:	00011dfd 	.word	0x00011dfd
   11d2c:	00011e0f 	.word	0x00011e0f
   11d30:	00011c47 	.word	0x00011c47
   11d34:	00011c47 	.word	0x00011c47
   11d38:	00011c47 	.word	0x00011c47
   11d3c:	00011c47 	.word	0x00011c47
   11d40:	00011e0f 	.word	0x00011e0f
   11d44:	00011c47 	.word	0x00011c47
   11d48:	00011c47 	.word	0x00011c47
   11d4c:	00011c47 	.word	0x00011c47
   11d50:	00011c47 	.word	0x00011c47
   11d54:	00011e9d 	.word	0x00011e9d
   11d58:	00011e35 	.word	0x00011e35
   11d5c:	00011e5b 	.word	0x00011e5b
   11d60:	00011c47 	.word	0x00011c47
   11d64:	00011c47 	.word	0x00011c47
   11d68:	00011d81 	.word	0x00011d81
   11d6c:	00011c47 	.word	0x00011c47
   11d70:	00011e35 	.word	0x00011e35
   11d74:	00011c47 	.word	0x00011c47
   11d78:	00011c47 	.word	0x00011c47
   11d7c:	00011e35 	.word	0x00011e35
			if (precision >= 0) {
   11d80:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   11d84:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   11d86:	db35      	blt.n	11df4 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   11d88:	4651      	mov	r1, sl
   11d8a:	4638      	mov	r0, r7
   11d8c:	f011 fbb0 	bl	234f0 <strnlen>
			bpe = bps + len;
   11d90:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   11d94:	2f00      	cmp	r7, #0
   11d96:	f43f af56 	beq.w	11c46 <z_cbvprintf_impl+0x426>
		char sign = 0;
   11d9a:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   11d9c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11da0:	f013 0210 	ands.w	r2, r3, #16
   11da4:	9205      	str	r2, [sp, #20]
   11da6:	f000 8093 	beq.w	11ed0 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   11daa:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   11dac:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   11dae:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   11db0:	bf48      	it	mi
   11db2:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   11db4:	9204      	str	r2, [sp, #16]
   11db6:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   11db8:	bf48      	it	mi
   11dba:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   11dbc:	f1b8 0f00 	cmp.w	r8, #0
   11dc0:	f340 80a0 	ble.w	11f04 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   11dc4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   11dc8:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   11dcc:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11dd0:	0750      	lsls	r0, r2, #29
   11dd2:	9306      	str	r3, [sp, #24]
   11dd4:	f100 8096 	bmi.w	11f04 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   11dd8:	0651      	lsls	r1, r2, #25
   11dda:	f140 8089 	bpl.w	11ef0 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   11dde:	b13e      	cbz	r6, 11df0 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   11de0:	4659      	mov	r1, fp
   11de2:	4630      	mov	r0, r6
   11de4:	47c8      	blx	r9
   11de6:	2800      	cmp	r0, #0
   11de8:	db7f      	blt.n	11eea <z_cbvprintf_impl+0x6ca>
   11dea:	9b06      	ldr	r3, [sp, #24]
   11dec:	3501      	adds	r5, #1
   11dee:	461e      	mov	r6, r3
					pad = '0';
   11df0:	2230      	movs	r2, #48	; 0x30
   11df2:	e07e      	b.n	11ef2 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   11df4:	4638      	mov	r0, r7
   11df6:	f011 fb74 	bl	234e2 <strlen>
   11dfa:	e7c9      	b.n	11d90 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11dfe:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   11e02:	2600      	movs	r6, #0
			bps = buf;
   11e04:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   11e06:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   11e0a:	2001      	movs	r0, #1
   11e0c:	e7c6      	b.n	11d9c <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   11e0e:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   11e10:	bf5c      	itt	pl
   11e12:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   11e16:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   11e18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   11e1c:	bf48      	it	mi
   11e1e:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   11e20:	2b00      	cmp	r3, #0
   11e22:	f6bf af62 	bge.w	11cea <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   11e26:	4252      	negs	r2, r2
   11e28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11e2c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   11e30:	262d      	movs	r6, #45	; 0x2d
   11e32:	e75a      	b.n	11cea <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   11e34:	2600      	movs	r6, #0
   11e36:	e758      	b.n	11cea <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   11e38:	2600      	movs	r6, #0
				conv->flag_zero = false;
   11e3a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   11e3e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11e42:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   11e44:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   11e48:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   11e4a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   11e4e:	f67f af5a 	bls.w	11d06 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   11e52:	ebaa 0303 	sub.w	r3, sl, r3
   11e56:	9311      	str	r3, [sp, #68]	; 0x44
   11e58:	e755      	b.n	11d06 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   11e5a:	980e      	ldr	r0, [sp, #56]	; 0x38
   11e5c:	b390      	cbz	r0, 11ec4 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11e5e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11e62:	9300      	str	r3, [sp, #0]
   11e64:	aa10      	add	r2, sp, #64	; 0x40
   11e66:	ab08      	add	r3, sp, #32
   11e68:	2100      	movs	r1, #0
   11e6a:	f011 f874 	bl	22f56 <encode_uint>
				conv->altform_0c = true;
   11e6e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   11e72:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11e76:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11e7a:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   11e7e:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11e82:	4607      	mov	r7, r0
				conv->altform_0c = true;
   11e84:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   11e88:	dad6      	bge.n	11e38 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   11e8a:	2800      	cmp	r0, #0
   11e8c:	f43f aedb 	beq.w	11c46 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   11e90:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11e94:	1a18      	subs	r0, r3, r0
		char sign = 0;
   11e96:	2600      	movs	r6, #0
   11e98:	469a      	mov	sl, r3
   11e9a:	e77f      	b.n	11d9c <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   11e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   11e9e:	2907      	cmp	r1, #7
   11ea0:	f63f aed1 	bhi.w	11c46 <z_cbvprintf_impl+0x426>
   11ea4:	e8df f001 	tbb	[pc, r1]
   11ea8:	0c06040c 	.word	0x0c06040c
   11eac:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   11eb0:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   11eb2:	e6c8      	b.n	11c46 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   11eb4:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   11eb6:	e6c6      	b.n	11c46 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   11eb8:	17ea      	asrs	r2, r5, #31
   11eba:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   11ebe:	e6c2      	b.n	11c46 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11ec0:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   11ec2:	e6c0      	b.n	11c46 <z_cbvprintf_impl+0x426>
   11ec4:	4f2e      	ldr	r7, [pc, #184]	; (11f80 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   11ec6:	4606      	mov	r6, r0
			bpe = bps + 5;
   11ec8:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   11ecc:	2005      	movs	r0, #5
   11ece:	e765      	b.n	11d9c <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   11ed0:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   11ed2:	bf48      	it	mi
   11ed4:	3001      	addmi	r0, #1
   11ed6:	e769      	b.n	11dac <z_cbvprintf_impl+0x58c>
   11ed8:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   11eda:	4610      	mov	r0, r2
   11edc:	9206      	str	r2, [sp, #24]
   11ede:	4659      	mov	r1, fp
   11ee0:	47c8      	blx	r9
   11ee2:	2800      	cmp	r0, #0
   11ee4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11ee8:	da04      	bge.n	11ef4 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   11eea:	b015      	add	sp, #84	; 0x54
   11eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11ef0:	2220      	movs	r2, #32
					pad = '0';
   11ef2:	4643      	mov	r3, r8
				while (width-- > 0) {
   11ef4:	4619      	mov	r1, r3
   11ef6:	2900      	cmp	r1, #0
   11ef8:	f103 33ff 	add.w	r3, r3, #4294967295
   11efc:	dcec      	bgt.n	11ed8 <z_cbvprintf_impl+0x6b8>
   11efe:	4445      	add	r5, r8
   11f00:	1a6d      	subs	r5, r5, r1
   11f02:	4698      	mov	r8, r3
		if (sign != 0) {
   11f04:	b12e      	cbz	r6, 11f12 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   11f06:	4659      	mov	r1, fp
   11f08:	4630      	mov	r0, r6
   11f0a:	47c8      	blx	r9
   11f0c:	2800      	cmp	r0, #0
   11f0e:	dbec      	blt.n	11eea <z_cbvprintf_impl+0x6ca>
   11f10:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   11f12:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11f16:	06da      	lsls	r2, r3, #27
   11f18:	d401      	bmi.n	11f1e <z_cbvprintf_impl+0x6fe>
   11f1a:	071b      	lsls	r3, r3, #28
   11f1c:	d505      	bpl.n	11f2a <z_cbvprintf_impl+0x70a>
				OUTC('0');
   11f1e:	4659      	mov	r1, fp
   11f20:	2030      	movs	r0, #48	; 0x30
   11f22:	47c8      	blx	r9
   11f24:	2800      	cmp	r0, #0
   11f26:	dbe0      	blt.n	11eea <z_cbvprintf_impl+0x6ca>
   11f28:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11f2a:	9b05      	ldr	r3, [sp, #20]
   11f2c:	b133      	cbz	r3, 11f3c <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   11f2e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   11f32:	4659      	mov	r1, fp
   11f34:	47c8      	blx	r9
   11f36:	2800      	cmp	r0, #0
   11f38:	dbd7      	blt.n	11eea <z_cbvprintf_impl+0x6ca>
   11f3a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11f3c:	9e04      	ldr	r6, [sp, #16]
   11f3e:	442e      	add	r6, r5
   11f40:	e005      	b.n	11f4e <z_cbvprintf_impl+0x72e>
				OUTC('0');
   11f42:	4659      	mov	r1, fp
   11f44:	2030      	movs	r0, #48	; 0x30
   11f46:	47c8      	blx	r9
   11f48:	2800      	cmp	r0, #0
   11f4a:	dbce      	blt.n	11eea <z_cbvprintf_impl+0x6ca>
   11f4c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11f4e:	1b73      	subs	r3, r6, r5
   11f50:	2b00      	cmp	r3, #0
   11f52:	dcf6      	bgt.n	11f42 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   11f54:	4653      	mov	r3, sl
   11f56:	463a      	mov	r2, r7
   11f58:	4659      	mov	r1, fp
   11f5a:	4648      	mov	r0, r9
   11f5c:	f011 f841 	bl	22fe2 <outs>
   11f60:	2800      	cmp	r0, #0
   11f62:	dbc2      	blt.n	11eea <z_cbvprintf_impl+0x6ca>
   11f64:	4405      	add	r5, r0
		while (width > 0) {
   11f66:	44a8      	add	r8, r5
   11f68:	eba8 0305 	sub.w	r3, r8, r5
   11f6c:	2b00      	cmp	r3, #0
   11f6e:	f77f ae6a 	ble.w	11c46 <z_cbvprintf_impl+0x426>
			OUTC(' ');
   11f72:	4659      	mov	r1, fp
   11f74:	2020      	movs	r0, #32
   11f76:	47c8      	blx	r9
   11f78:	2800      	cmp	r0, #0
   11f7a:	dbb6      	blt.n	11eea <z_cbvprintf_impl+0x6ca>
   11f7c:	3501      	adds	r5, #1
			--width;
   11f7e:	e7f3      	b.n	11f68 <z_cbvprintf_impl+0x748>
   11f80:	000267ef 	.word	0x000267ef

00011f84 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   11f84:	b508      	push	{r3, lr}
	__asm__ volatile(
   11f86:	f04f 0240 	mov.w	r2, #64	; 0x40
   11f8a:	f3ef 8311 	mrs	r3, BASEPRI
   11f8e:	f382 8812 	msr	BASEPRI_MAX, r2
   11f92:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   11f96:	f001 f8e1 	bl	1315c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   11f9a:	4803      	ldr	r0, [pc, #12]	; (11fa8 <sys_reboot+0x24>)
   11f9c:	f010 fe1c 	bl	22bd8 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11fa0:	f000 fb3c 	bl	1261c <arch_cpu_idle>
   11fa4:	e7fc      	b.n	11fa0 <sys_reboot+0x1c>
   11fa6:	bf00      	nop
   11fa8:	000267f5 	.word	0x000267f5

00011fac <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   11fac:	f008 bfce 	b.w	1af4c <SystemInit>

00011fb0 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   11fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 12050 <z_log_minimal_hexdump_print+0xa0>
   11fb8:	4680      	mov	r8, r0
   11fba:	460f      	mov	r7, r1
   11fbc:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   11fbe:	4614      	mov	r4, r2
   11fc0:	19bd      	adds	r5, r7, r6
   11fc2:	1b2d      	subs	r5, r5, r4
   11fc4:	b90c      	cbnz	r4, 11fca <z_log_minimal_hexdump_print+0x1a>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   11fc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   11fca:	f108 33ff 	add.w	r3, r8, #4294967295
   11fce:	2b03      	cmp	r3, #3
   11fd0:	bf98      	it	ls
   11fd2:	f819 1003 	ldrbls.w	r1, [r9, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   11fd6:	481f      	ldr	r0, [pc, #124]	; (12054 <z_log_minimal_hexdump_print+0xa4>)
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   11fd8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 12058 <z_log_minimal_hexdump_print+0xa8>
   11fdc:	bf88      	it	hi
   11fde:	213f      	movhi	r1, #63	; 0x3f
		printk("%c: ", z_log_minimal_level_to_char(level));
   11fe0:	f010 fdfa 	bl	22bd8 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11fe4:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   11fe8:	455c      	cmp	r4, fp
   11fea:	d928      	bls.n	1203e <z_log_minimal_hexdump_print+0x8e>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   11fec:	f815 100b 	ldrb.w	r1, [r5, fp]
   11ff0:	4650      	mov	r0, sl
   11ff2:	f010 fdf1 	bl	22bd8 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11ff6:	f10b 0b01 	add.w	fp, fp, #1
   11ffa:	f1bb 0f08 	cmp.w	fp, #8
   11ffe:	d1f3      	bne.n	11fe8 <z_log_minimal_hexdump_print+0x38>
	printk("|");
   12000:	4816      	ldr	r0, [pc, #88]	; (1205c <z_log_minimal_hexdump_print+0xac>)
			printk("%c", isprint((int)c) != 0 ? c : '.');
   12002:	f8df b05c 	ldr.w	fp, [pc, #92]	; 12060 <z_log_minimal_hexdump_print+0xb0>
	printk("|");
   12006:	f010 fde7 	bl	22bd8 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1200a:	f04f 0a00 	mov.w	sl, #0
		if (i < length) {
   1200e:	4554      	cmp	r4, sl
   12010:	d919      	bls.n	12046 <z_log_minimal_hexdump_print+0x96>
			unsigned char c = data[i];
   12012:	f815 100a 	ldrb.w	r1, [r5, sl]
	return (int)((((unsigned)c) >= ' ') &&
   12016:	f1a1 0220 	sub.w	r2, r1, #32
			printk("%c", isprint((int)c) != 0 ? c : '.');
   1201a:	2a5f      	cmp	r2, #95	; 0x5f
   1201c:	bf28      	it	cs
   1201e:	212e      	movcs	r1, #46	; 0x2e
   12020:	4658      	mov	r0, fp
   12022:	f010 fdd9 	bl	22bd8 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12026:	f10a 0a01 	add.w	sl, sl, #1
   1202a:	f1ba 0f08 	cmp.w	sl, #8
   1202e:	d1ee      	bne.n	1200e <z_log_minimal_hexdump_print+0x5e>
	printk("\n");
   12030:	480c      	ldr	r0, [pc, #48]	; (12064 <z_log_minimal_hexdump_print+0xb4>)
   12032:	f010 fdd1 	bl	22bd8 <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   12036:	2c07      	cmp	r4, #7
   12038:	d9c5      	bls.n	11fc6 <z_log_minimal_hexdump_print+0x16>
		size -= HEXDUMP_BYTES_IN_LINE;
   1203a:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   1203c:	e7c0      	b.n	11fc0 <z_log_minimal_hexdump_print+0x10>
			printk("   ");
   1203e:	480a      	ldr	r0, [pc, #40]	; (12068 <z_log_minimal_hexdump_print+0xb8>)
   12040:	f010 fdca 	bl	22bd8 <printk>
   12044:	e7d7      	b.n	11ff6 <z_log_minimal_hexdump_print+0x46>
			printk(" ");
   12046:	4809      	ldr	r0, [pc, #36]	; (1206c <z_log_minimal_hexdump_print+0xbc>)
   12048:	f010 fdc6 	bl	22bd8 <printk>
   1204c:	e7eb      	b.n	12026 <z_log_minimal_hexdump_print+0x76>
   1204e:	bf00      	nop
   12050:	00026832 	.word	0x00026832
   12054:	0002681e 	.word	0x0002681e
   12058:	00026823 	.word	0x00026823
   1205c:	0002682d 	.word	0x0002682d
   12060:	0002682f 	.word	0x0002682f
   12064:	0002866d 	.word	0x0002866d
   12068:	00026829 	.word	0x00026829
   1206c:	0002682b 	.word	0x0002682b

00012070 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12074:	4605      	mov	r5, r0
   12076:	f04f 0340 	mov.w	r3, #64	; 0x40
   1207a:	f3ef 8611 	mrs	r6, BASEPRI
   1207e:	f383 8812 	msr	BASEPRI_MAX, r3
   12082:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12086:	481b      	ldr	r0, [pc, #108]	; (120f4 <pm_state_notify+0x84>)
   12088:	f00a fce0 	bl	1ca4c <z_spin_lock_valid>
   1208c:	b940      	cbnz	r0, 120a0 <pm_state_notify+0x30>
   1208e:	491a      	ldr	r1, [pc, #104]	; (120f8 <pm_state_notify+0x88>)
   12090:	481a      	ldr	r0, [pc, #104]	; (120fc <pm_state_notify+0x8c>)
   12092:	2294      	movs	r2, #148	; 0x94
   12094:	f010 ffc3 	bl	2301e <assert_print>
   12098:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1209a:	4817      	ldr	r0, [pc, #92]	; (120f8 <pm_state_notify+0x88>)
   1209c:	f010 ffb8 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   120a0:	4814      	ldr	r0, [pc, #80]	; (120f4 <pm_state_notify+0x84>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   120a2:	4f17      	ldr	r7, [pc, #92]	; (12100 <pm_state_notify+0x90>)
   120a4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 12104 <pm_state_notify+0x94>
   120a8:	f00a fcee 	bl	1ca88 <z_spin_lock_set_owner>
	return list->head;
   120ac:	4b16      	ldr	r3, [pc, #88]	; (12108 <pm_state_notify+0x98>)
   120ae:	681c      	ldr	r4, [r3, #0]
   120b0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   120b4:	b954      	cbnz	r4, 120cc <pm_state_notify+0x5c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   120b6:	480f      	ldr	r0, [pc, #60]	; (120f4 <pm_state_notify+0x84>)
   120b8:	f00a fcd6 	bl	1ca68 <z_spin_unlock_valid>
   120bc:	b9a0      	cbnz	r0, 120e8 <pm_state_notify+0x78>
   120be:	490e      	ldr	r1, [pc, #56]	; (120f8 <pm_state_notify+0x88>)
   120c0:	480e      	ldr	r0, [pc, #56]	; (120fc <pm_state_notify+0x8c>)
   120c2:	22c2      	movs	r2, #194	; 0xc2
   120c4:	f010 ffab 	bl	2301e <assert_print>
   120c8:	21c2      	movs	r1, #194	; 0xc2
   120ca:	e7e6      	b.n	1209a <pm_state_notify+0x2a>
			callback = notifier->state_exit;
   120cc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   120d0:	2d00      	cmp	r5, #0
   120d2:	bf18      	it	ne
   120d4:	4613      	movne	r3, r2
		if (callback) {
   120d6:	b12b      	cbz	r3, 120e4 <pm_state_notify+0x74>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   120d8:	f898 2014 	ldrb.w	r2, [r8, #20]
   120dc:	fb09 f202 	mul.w	r2, r9, r2
   120e0:	5cb8      	ldrb	r0, [r7, r2]
   120e2:	4798      	blx	r3
	return node->next;
   120e4:	6824      	ldr	r4, [r4, #0]
   120e6:	e7e5      	b.n	120b4 <pm_state_notify+0x44>
	__asm__ volatile(
   120e8:	f386 8811 	msr	BASEPRI, r6
   120ec:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   120f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   120f4:	200021b4 	.word	0x200021b4
   120f8:	0002679f 	.word	0x0002679f
   120fc:	00026718 	.word	0x00026718
   12100:	200021c8 	.word	0x200021c8
   12104:	20002f64 	.word	0x20002f64
   12108:	200021d4 	.word	0x200021d4

0001210c <pm_system_resume>:

void pm_system_resume(void)
{
   1210c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1210e:	4b19      	ldr	r3, [pc, #100]	; (12174 <pm_system_resume+0x68>)
   12110:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12112:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12116:	f004 031f 	and.w	r3, r4, #31
   1211a:	2201      	movs	r2, #1
   1211c:	409a      	lsls	r2, r3
   1211e:	4b16      	ldr	r3, [pc, #88]	; (12178 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12120:	0961      	lsrs	r1, r4, #5
   12122:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12126:	43d0      	mvns	r0, r2
   12128:	e853 1f00 	ldrex	r1, [r3]
   1212c:	ea01 0500 	and.w	r5, r1, r0
   12130:	e843 5600 	strex	r6, r5, [r3]
   12134:	2e00      	cmp	r6, #0
   12136:	d1f7      	bne.n	12128 <pm_system_resume+0x1c>
   12138:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1213c:	420a      	tst	r2, r1
   1213e:	d013      	beq.n	12168 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   12140:	4b0e      	ldr	r3, [pc, #56]	; (1217c <pm_system_resume+0x70>)
   12142:	4d0f      	ldr	r5, [pc, #60]	; (12180 <pm_system_resume+0x74>)
   12144:	b18b      	cbz	r3, 1216a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   12146:	230c      	movs	r3, #12
   12148:	4363      	muls	r3, r4
   1214a:	18ea      	adds	r2, r5, r3
   1214c:	5ce8      	ldrb	r0, [r5, r3]
   1214e:	7851      	ldrb	r1, [r2, #1]
   12150:	f011 fa2d 	bl	235ae <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   12154:	2000      	movs	r0, #0
   12156:	f7ff ff8b 	bl	12070 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1215a:	230c      	movs	r3, #12
   1215c:	435c      	muls	r4, r3
   1215e:	192a      	adds	r2, r5, r4
   12160:	2300      	movs	r3, #0
   12162:	512b      	str	r3, [r5, r4]
   12164:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   12168:	bd70      	pop	{r4, r5, r6, pc}
   1216a:	f383 8811 	msr	BASEPRI, r3
   1216e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12172:	e7ef      	b.n	12154 <pm_system_resume+0x48>
   12174:	20002f64 	.word	0x20002f64
   12178:	200021dc 	.word	0x200021dc
   1217c:	000235af 	.word	0x000235af
   12180:	200021c8 	.word	0x200021c8

00012184 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   12184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   12188:	4b42      	ldr	r3, [pc, #264]	; (12294 <pm_system_suspend+0x110>)
{
   1218a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   1218c:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   1218e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12192:	f3ef 8811 	mrs	r8, BASEPRI
   12196:	f383 8812 	msr	BASEPRI_MAX, r3
   1219a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1219e:	483e      	ldr	r0, [pc, #248]	; (12298 <pm_system_suspend+0x114>)
   121a0:	f00a fc54 	bl	1ca4c <z_spin_lock_valid>
   121a4:	b940      	cbnz	r0, 121b8 <pm_system_suspend+0x34>
   121a6:	493d      	ldr	r1, [pc, #244]	; (1229c <pm_system_suspend+0x118>)
   121a8:	483d      	ldr	r0, [pc, #244]	; (122a0 <pm_system_suspend+0x11c>)
   121aa:	2294      	movs	r2, #148	; 0x94
   121ac:	f010 ff37 	bl	2301e <assert_print>
   121b0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   121b2:	483a      	ldr	r0, [pc, #232]	; (1229c <pm_system_suspend+0x118>)
   121b4:	f010 ff2c 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   121b8:	4837      	ldr	r0, [pc, #220]	; (12298 <pm_system_suspend+0x114>)
   121ba:	4e3a      	ldr	r6, [pc, #232]	; (122a4 <pm_system_suspend+0x120>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   121bc:	240c      	movs	r4, #12
   121be:	f00a fc63 	bl	1ca88 <z_spin_lock_set_owner>
   121c2:	436c      	muls	r4, r5
   121c4:	4b38      	ldr	r3, [pc, #224]	; (122a8 <pm_system_suspend+0x124>)
   121c6:	5d19      	ldrb	r1, [r3, r4]
   121c8:	191a      	adds	r2, r3, r4
   121ca:	b191      	cbz	r1, 121f2 <pm_system_suspend+0x6e>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   121cc:	ca07      	ldmia	r2, {r0, r1, r2}
   121ce:	eb06 0c04 	add.w	ip, r6, r4
   121d2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   121d6:	2200      	movs	r2, #0
   121d8:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   121da:	482f      	ldr	r0, [pc, #188]	; (12298 <pm_system_suspend+0x114>)
   121dc:	f00a fc44 	bl	1ca68 <z_spin_unlock_valid>
   121e0:	4604      	mov	r4, r0
   121e2:	b988      	cbnz	r0, 12208 <pm_system_suspend+0x84>
   121e4:	492d      	ldr	r1, [pc, #180]	; (1229c <pm_system_suspend+0x118>)
   121e6:	482e      	ldr	r0, [pc, #184]	; (122a0 <pm_system_suspend+0x11c>)
   121e8:	22c2      	movs	r2, #194	; 0xc2
   121ea:	f010 ff18 	bl	2301e <assert_print>
   121ee:	21c2      	movs	r1, #194	; 0xc2
   121f0:	e7df      	b.n	121b2 <pm_system_suspend+0x2e>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   121f2:	4639      	mov	r1, r7
   121f4:	4628      	mov	r0, r5
   121f6:	f000 f861 	bl	122bc <pm_policy_next_state>
		if (info != NULL) {
   121fa:	2800      	cmp	r0, #0
   121fc:	d0ed      	beq.n	121da <pm_system_suspend+0x56>
			z_cpus_pm_state[id] = *info;
   121fe:	c807      	ldmia	r0, {r0, r1, r2}
   12200:	4434      	add	r4, r6
   12202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   12206:	e7e8      	b.n	121da <pm_system_suspend+0x56>
	__asm__ volatile(
   12208:	f388 8811 	msr	BASEPRI, r8
   1220c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   12210:	230c      	movs	r3, #12
   12212:	436b      	muls	r3, r5
   12214:	18f2      	adds	r2, r6, r3
   12216:	5cf3      	ldrb	r3, [r6, r3]
   12218:	2b00      	cmp	r3, #0
   1221a:	d039      	beq.n	12290 <pm_system_suspend+0x10c>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1221c:	1c7b      	adds	r3, r7, #1
   1221e:	d00f      	beq.n	12240 <pm_system_suspend+0xbc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   12220:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12224:	4821      	ldr	r0, [pc, #132]	; (122ac <pm_system_suspend+0x128>)
   12226:	4a22      	ldr	r2, [pc, #136]	; (122b0 <pm_system_suspend+0x12c>)
   12228:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1222c:	2100      	movs	r1, #0
   1222e:	2300      	movs	r3, #0
   12230:	fbee 010c 	umlal	r0, r1, lr, ip
   12234:	f7ee faa8 	bl	788 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   12238:	2101      	movs	r1, #1
   1223a:	1a38      	subs	r0, r7, r0
   1223c:	f00c fcf4 	bl	1ec28 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12240:	f00b fd4e 	bl	1dce0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   12244:	2001      	movs	r0, #1
   12246:	f7ff ff13 	bl	12070 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1224a:	f3bf 8f5b 	dmb	ish
   1224e:	4b19      	ldr	r3, [pc, #100]	; (122b4 <pm_system_suspend+0x130>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12250:	096a      	lsrs	r2, r5, #5
   12252:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   12256:	f005 011f 	and.w	r1, r5, #31
   1225a:	2201      	movs	r2, #1
   1225c:	408a      	lsls	r2, r1
   1225e:	e853 0f00 	ldrex	r0, [r3]
   12262:	4310      	orrs	r0, r2
   12264:	e843 0100 	strex	r1, r0, [r3]
   12268:	2900      	cmp	r1, #0
   1226a:	d1f8      	bne.n	1225e <pm_system_suspend+0xda>
   1226c:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   12270:	4b11      	ldr	r3, [pc, #68]	; (122b8 <pm_system_suspend+0x134>)
   12272:	b133      	cbz	r3, 12282 <pm_system_suspend+0xfe>
		pm_state_set(info->state, info->substate_id);
   12274:	230c      	movs	r3, #12
   12276:	436b      	muls	r3, r5
   12278:	18f2      	adds	r2, r6, r3
   1227a:	5cf0      	ldrb	r0, [r6, r3]
   1227c:	7851      	ldrb	r1, [r2, #1]
   1227e:	f011 f98a 	bl	23596 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   12282:	f7ff ff43 	bl	1210c <pm_system_resume>
	k_sched_unlock();
   12286:	f00b fd77 	bl	1dd78 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   1228a:	4620      	mov	r0, r4
   1228c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   12290:	461c      	mov	r4, r3
   12292:	e7fa      	b.n	1228a <pm_system_suspend+0x106>
   12294:	20002f64 	.word	0x20002f64
   12298:	200021b8 	.word	0x200021b8
   1229c:	0002679f 	.word	0x0002679f
   122a0:	00026718 	.word	0x00026718
   122a4:	200021c8 	.word	0x200021c8
   122a8:	200021bc 	.word	0x200021bc
   122ac:	000f423f 	.word	0x000f423f
   122b0:	000f4240 	.word	0x000f4240
   122b4:	200021dc 	.word	0x200021dc
   122b8:	00023597 	.word	0x00023597

000122bc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   122bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122c0:	b085      	sub	sp, #20
   122c2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   122c4:	a903      	add	r1, sp, #12
   122c6:	f000 f843 	bl	12350 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   122ca:	4b1e      	ldr	r3, [pc, #120]	; (12344 <pm_policy_next_state+0x88>)
   122cc:	9d03      	ldr	r5, [sp, #12]
   122ce:	f8d3 a000 	ldr.w	sl, [r3]
   122d2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 12348 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   122d6:	1e43      	subs	r3, r0, #1
   122d8:	b21b      	sxth	r3, r3
   122da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   122de:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   122e0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   122e4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   122e8:	f04f 0b00 	mov.w	fp, #0
   122ec:	b924      	cbnz	r4, 122f8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   122ee:	46a1      	mov	r9, r4
}
   122f0:	4648      	mov	r0, r9
   122f2:	b005      	add	sp, #20
   122f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122f8:	6868      	ldr	r0, [r5, #4]
   122fa:	4a14      	ldr	r2, [pc, #80]	; (1234c <pm_policy_next_state+0x90>)
   122fc:	46c4      	mov	ip, r8
   122fe:	4659      	mov	r1, fp
   12300:	fbe0 c107 	umlal	ip, r1, r0, r7
   12304:	2300      	movs	r3, #0
   12306:	4660      	mov	r0, ip
   12308:	f7ee fa3e 	bl	788 <__aeabi_uldivmod>
   1230c:	9001      	str	r0, [sp, #4]
   1230e:	68a8      	ldr	r0, [r5, #8]
   12310:	4a0e      	ldr	r2, [pc, #56]	; (1234c <pm_policy_next_state+0x90>)
   12312:	46c4      	mov	ip, r8
   12314:	4659      	mov	r1, fp
   12316:	fbe0 c107 	umlal	ip, r1, r0, r7
   1231a:	2300      	movs	r3, #0
   1231c:	4660      	mov	r0, ip
   1231e:	f7ee fa33 	bl	788 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12322:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   12326:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12328:	d001      	beq.n	1232e <pm_policy_next_state+0x72>
   1232a:	4582      	cmp	sl, r0
   1232c:	d905      	bls.n	1233a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   1232e:	1c73      	adds	r3, r6, #1
   12330:	d0de      	beq.n	122f0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   12332:	9b01      	ldr	r3, [sp, #4]
   12334:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   12336:	42b0      	cmp	r0, r6
   12338:	d9da      	bls.n	122f0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1233a:	3c01      	subs	r4, #1
   1233c:	b2a4      	uxth	r4, r4
   1233e:	3d0c      	subs	r5, #12
   12340:	e7d4      	b.n	122ec <pm_policy_next_state+0x30>
   12342:	bf00      	nop
   12344:	200005e8 	.word	0x200005e8
   12348:	000f423f 	.word	0x000f423f
   1234c:	000f4240 	.word	0x000f4240

00012350 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   12350:	b908      	cbnz	r0, 12356 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   12352:	4b02      	ldr	r3, [pc, #8]	; (1235c <pm_state_cpu_get_all+0xc>)
   12354:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   12356:	2000      	movs	r0, #0
   12358:	4770      	bx	lr
   1235a:	bf00      	nop
   1235c:	00025bb4 	.word	0x00025bb4

00012360 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   12360:	4904      	ldr	r1, [pc, #16]	; (12374 <sub_bytes+0x14>)
   12362:	1e43      	subs	r3, r0, #1
   12364:	300f      	adds	r0, #15
   12366:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1236a:	5c8a      	ldrb	r2, [r1, r2]
   1236c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1236e:	4283      	cmp	r3, r0
   12370:	d1f9      	bne.n	12366 <sub_bytes+0x6>
	}
}
   12372:	4770      	bx	lr
   12374:	00026839 	.word	0x00026839

00012378 <tc_aes128_set_encrypt_key>:
{
   12378:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1237a:	4e26      	ldr	r6, [pc, #152]	; (12414 <tc_aes128_set_encrypt_key+0x9c>)
{
   1237c:	4607      	mov	r7, r0
   1237e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   12380:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   12382:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12384:	ad01      	add	r5, sp, #4
   12386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12388:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1238a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1238c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12390:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   12394:	4638      	mov	r0, r7
   12396:	2f00      	cmp	r7, #0
   12398:	d038      	beq.n	1240c <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   1239a:	2c00      	cmp	r4, #0
   1239c:	d038      	beq.n	12410 <tc_aes128_set_encrypt_key+0x98>
   1239e:	1f38      	subs	r0, r7, #4
   123a0:	4621      	mov	r1, r4
   123a2:	4602      	mov	r2, r0
   123a4:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   123a6:	784b      	ldrb	r3, [r1, #1]
   123a8:	780d      	ldrb	r5, [r1, #0]
   123aa:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   123ac:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   123b0:	78cd      	ldrb	r5, [r1, #3]
   123b2:	432b      	orrs	r3, r5
   123b4:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   123b6:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   123b8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   123bc:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   123be:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   123c2:	d1f0      	bne.n	123a6 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   123c4:	4c14      	ldr	r4, [pc, #80]	; (12418 <tc_aes128_set_encrypt_key+0xa0>)
   123c6:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   123c8:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   123ca:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   123cc:	d116      	bne.n	123fc <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   123ce:	f3c3 4207 	ubfx	r2, r3, #16, #8
   123d2:	5ca5      	ldrb	r5, [r4, r2]
   123d4:	0e1a      	lsrs	r2, r3, #24
   123d6:	5ca2      	ldrb	r2, [r4, r2]
   123d8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   123dc:	f3c3 2507 	ubfx	r5, r3, #8, #8
   123e0:	b2db      	uxtb	r3, r3
   123e2:	5d65      	ldrb	r5, [r4, r5]
   123e4:	5ce3      	ldrb	r3, [r4, r3]
   123e6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   123ea:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   123ee:	f021 0303 	bic.w	r3, r1, #3
   123f2:	3330      	adds	r3, #48	; 0x30
   123f4:	446b      	add	r3, sp
   123f6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   123fa:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   123fc:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   12400:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   12402:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   12404:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   12406:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12408:	d1de      	bne.n	123c8 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   1240a:	2001      	movs	r0, #1
}
   1240c:	b00d      	add	sp, #52	; 0x34
   1240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   12410:	4620      	mov	r0, r4
   12412:	e7fb      	b.n	1240c <tc_aes128_set_encrypt_key+0x94>
   12414:	00025a6c 	.word	0x00025a6c
   12418:	00026839 	.word	0x00026839

0001241c <nfc_nrfx_error_to_nfc>:
 *
 * @retval Translated NFC error code.
 */
int nfc_nrfx_error_to_nfc(nrfx_err_t err)
{
    switch (err) {
   1241c:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   12420:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   12424:	280b      	cmp	r0, #11
   12426:	bf9a      	itte	ls
   12428:	4b02      	ldrls	r3, [pc, #8]	; (12434 <nfc_nrfx_error_to_nfc+0x18>)
   1242a:	5618      	ldrsbls	r0, [r3, r0]
{
   1242c:	f06f 000d 	mvnhi.w	r0, #13
    case NRFX_ERROR_BUSY:
        return -NRF_EALREADY;
    default:
        return -NRF_EFAULT;
    }
}
   12430:	4770      	bx	lr
   12432:	bf00      	nop
   12434:	00026939 	.word	0x00026939

00012438 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   12438:	4801      	ldr	r0, [pc, #4]	; (12440 <nrf_cc3xx_platform_abort_init+0x8>)
   1243a:	f00d bf23 	b.w	20284 <nrf_cc3xx_platform_set_abort>
   1243e:	bf00      	nop
   12440:	00025bb4 	.word	0x00025bb4

00012444 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12444:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   12446:	4604      	mov	r4, r0
   12448:	b918      	cbnz	r0, 12452 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   1244a:	4b0f      	ldr	r3, [pc, #60]	; (12488 <mutex_free_platform+0x44>)
   1244c:	480f      	ldr	r0, [pc, #60]	; (1248c <mutex_free_platform+0x48>)
   1244e:	685b      	ldr	r3, [r3, #4]
   12450:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12452:	6861      	ldr	r1, [r4, #4]
   12454:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   12458:	d00f      	beq.n	1247a <mutex_free_platform+0x36>
   1245a:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   1245e:	d00c      	beq.n	1247a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12460:	4d0b      	ldr	r5, [pc, #44]	; (12490 <mutex_free_platform+0x4c>)
   12462:	42a9      	cmp	r1, r5
   12464:	d009      	beq.n	1247a <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   12466:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   1246a:	d007      	beq.n	1247c <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   1246c:	4809      	ldr	r0, [pc, #36]	; (12494 <mutex_free_platform+0x50>)
   1246e:	4621      	mov	r1, r4
   12470:	f00a f99a 	bl	1c7a8 <k_mem_slab_free>
        mutex->mutex = NULL;
   12474:	2300      	movs	r3, #0
   12476:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   12478:	6065      	str	r5, [r4, #4]
}
   1247a:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1247c:	6820      	ldr	r0, [r4, #0]
   1247e:	2214      	movs	r2, #20
   12480:	f011 f87d 	bl	2357e <memset>
   12484:	e7f8      	b.n	12478 <mutex_free_platform+0x34>
   12486:	bf00      	nop
   12488:	20000838 	.word	0x20000838
   1248c:	00026945 	.word	0x00026945
   12490:	a95c5f2c 	.word	0xa95c5f2c
   12494:	200026e0 	.word	0x200026e0

00012498 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12498:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1249a:	b320      	cbz	r0, 124e6 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   1249c:	6843      	ldr	r3, [r0, #4]
   1249e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   124a2:	d110      	bne.n	124c6 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   124a4:	2201      	movs	r2, #1
   124a6:	6803      	ldr	r3, [r0, #0]
   124a8:	f3bf 8f5b 	dmb	ish
   124ac:	e853 1f00 	ldrex	r1, [r3]
   124b0:	2900      	cmp	r1, #0
   124b2:	d103      	bne.n	124bc <mutex_lock_platform+0x24>
   124b4:	e843 2000 	strex	r0, r2, [r3]
   124b8:	2800      	cmp	r0, #0
   124ba:	d1f7      	bne.n	124ac <mutex_lock_platform+0x14>
   124bc:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   124c0:	d10d      	bne.n	124de <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   124c2:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   124c4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   124c6:	4a09      	ldr	r2, [pc, #36]	; (124ec <mutex_lock_platform+0x54>)
   124c8:	4293      	cmp	r3, r2
   124ca:	d00a      	beq.n	124e2 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   124cc:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   124ce:	f04f 32ff 	mov.w	r2, #4294967295
   124d2:	f04f 33ff 	mov.w	r3, #4294967295
   124d6:	f00a fb0d 	bl	1caf4 <z_impl_k_mutex_lock>
        if (ret == 0) {
   124da:	2800      	cmp	r0, #0
   124dc:	d0f1      	beq.n	124c2 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   124de:	4804      	ldr	r0, [pc, #16]	; (124f0 <mutex_lock_platform+0x58>)
   124e0:	e7f0      	b.n	124c4 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   124e2:	4804      	ldr	r0, [pc, #16]	; (124f4 <mutex_lock_platform+0x5c>)
   124e4:	e7ee      	b.n	124c4 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   124e6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   124ea:	e7eb      	b.n	124c4 <mutex_lock_platform+0x2c>
   124ec:	a95c5f2c 	.word	0xa95c5f2c
   124f0:	ffff8fe9 	.word	0xffff8fe9
   124f4:	ffff8fea 	.word	0xffff8fea

000124f8 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   124f8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   124fa:	b1d8      	cbz	r0, 12534 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   124fc:	6843      	ldr	r3, [r0, #4]
   124fe:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   12502:	d110      	bne.n	12526 <mutex_unlock_platform+0x2e>
   12504:	2200      	movs	r2, #0
   12506:	6803      	ldr	r3, [r0, #0]
   12508:	f3bf 8f5b 	dmb	ish
   1250c:	e853 1f00 	ldrex	r1, [r3]
   12510:	2901      	cmp	r1, #1
   12512:	d103      	bne.n	1251c <mutex_unlock_platform+0x24>
   12514:	e843 2000 	strex	r0, r2, [r3]
   12518:	2800      	cmp	r0, #0
   1251a:	d1f7      	bne.n	1250c <mutex_unlock_platform+0x14>
   1251c:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12520:	d10b      	bne.n	1253a <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   12522:	2000      	movs	r0, #0
    }
}
   12524:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12526:	4a07      	ldr	r2, [pc, #28]	; (12544 <mutex_unlock_platform+0x4c>)
   12528:	4293      	cmp	r3, r2
   1252a:	d008      	beq.n	1253e <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   1252c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   1252e:	f00a fb97 	bl	1cc60 <z_impl_k_mutex_unlock>
   12532:	e7f6      	b.n	12522 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12534:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12538:	e7f4      	b.n	12524 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1253a:	4803      	ldr	r0, [pc, #12]	; (12548 <mutex_unlock_platform+0x50>)
   1253c:	e7f2      	b.n	12524 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1253e:	4803      	ldr	r0, [pc, #12]	; (1254c <mutex_unlock_platform+0x54>)
   12540:	e7f0      	b.n	12524 <mutex_unlock_platform+0x2c>
   12542:	bf00      	nop
   12544:	a95c5f2c 	.word	0xa95c5f2c
   12548:	ffff8fe9 	.word	0xffff8fe9
   1254c:	ffff8fea 	.word	0xffff8fea

00012550 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12550:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12552:	4604      	mov	r4, r0
   12554:	b918      	cbnz	r0, 1255e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   12556:	4b1d      	ldr	r3, [pc, #116]	; (125cc <mutex_init_platform+0x7c>)
   12558:	481d      	ldr	r0, [pc, #116]	; (125d0 <mutex_init_platform+0x80>)
   1255a:	685b      	ldr	r3, [r3, #4]
   1255c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1255e:	6863      	ldr	r3, [r4, #4]
   12560:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   12564:	d02f      	beq.n	125c6 <mutex_init_platform+0x76>
   12566:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   1256a:	d02c      	beq.n	125c6 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   1256c:	4a19      	ldr	r2, [pc, #100]	; (125d4 <mutex_init_platform+0x84>)
   1256e:	4293      	cmp	r3, r2
   12570:	d119      	bne.n	125a6 <mutex_init_platform+0x56>
   12572:	6823      	ldr	r3, [r4, #0]
   12574:	bb03      	cbnz	r3, 125b8 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   12576:	4818      	ldr	r0, [pc, #96]	; (125d8 <mutex_init_platform+0x88>)
   12578:	f04f 32ff 	mov.w	r2, #4294967295
   1257c:	f04f 33ff 	mov.w	r3, #4294967295
   12580:	4621      	mov	r1, r4
   12582:	f00a f8b9 	bl	1c6f8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   12586:	b908      	cbnz	r0, 1258c <mutex_init_platform+0x3c>
   12588:	6823      	ldr	r3, [r4, #0]
   1258a:	b91b      	cbnz	r3, 12594 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   1258c:	4b0f      	ldr	r3, [pc, #60]	; (125cc <mutex_init_platform+0x7c>)
   1258e:	4813      	ldr	r0, [pc, #76]	; (125dc <mutex_init_platform+0x8c>)
   12590:	685b      	ldr	r3, [r3, #4]
   12592:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12594:	6820      	ldr	r0, [r4, #0]
   12596:	2214      	movs	r2, #20
   12598:	2100      	movs	r1, #0
   1259a:	f010 fff0 	bl	2357e <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   1259e:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   125a2:	6063      	str	r3, [r4, #4]
   125a4:	e008      	b.n	125b8 <mutex_init_platform+0x68>
    switch(flags){
   125a6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   125aa:	d80d      	bhi.n	125c8 <mutex_init_platform+0x78>
   125ac:	2b3a      	cmp	r3, #58	; 0x3a
   125ae:	d003      	beq.n	125b8 <mutex_init_platform+0x68>
   125b0:	f640 62ba 	movw	r2, #3770	; 0xeba
   125b4:	4293      	cmp	r3, r2
   125b6:	d1de      	bne.n	12576 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   125b8:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   125ba:	f012 fe6e 	bl	2529a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   125be:	6863      	ldr	r3, [r4, #4]
   125c0:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   125c4:	6063      	str	r3, [r4, #4]
}
   125c6:	bd10      	pop	{r4, pc}
    switch(flags){
   125c8:	4a05      	ldr	r2, [pc, #20]	; (125e0 <mutex_init_platform+0x90>)
   125ca:	e7f3      	b.n	125b4 <mutex_init_platform+0x64>
   125cc:	20000838 	.word	0x20000838
   125d0:	00026945 	.word	0x00026945
   125d4:	a95c5f2c 	.word	0xa95c5f2c
   125d8:	200026e0 	.word	0x200026e0
   125dc:	0002696b 	.word	0x0002696b
   125e0:	3a00003a 	.word	0x3a00003a

000125e4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   125e4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   125e6:	4906      	ldr	r1, [pc, #24]	; (12600 <nrf_cc3xx_platform_mutex_init+0x1c>)
   125e8:	4806      	ldr	r0, [pc, #24]	; (12604 <nrf_cc3xx_platform_mutex_init+0x20>)
   125ea:	2340      	movs	r3, #64	; 0x40
   125ec:	2214      	movs	r2, #20
   125ee:	f012 fe29 	bl	25244 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   125f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   125f6:	4904      	ldr	r1, [pc, #16]	; (12608 <nrf_cc3xx_platform_mutex_init+0x24>)
   125f8:	4804      	ldr	r0, [pc, #16]	; (1260c <nrf_cc3xx_platform_mutex_init+0x28>)
   125fa:	f00d bf09 	b.w	20410 <nrf_cc3xx_platform_set_mutexes>
   125fe:	bf00      	nop
   12600:	200021e0 	.word	0x200021e0
   12604:	200026e0 	.word	0x200026e0
   12608:	00025bbc 	.word	0x00025bbc
   1260c:	00025bd0 	.word	0x00025bd0

00012610 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12610:	4901      	ldr	r1, [pc, #4]	; (12618 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12612:	2210      	movs	r2, #16
	str	r2, [r1]
   12614:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12616:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12618:	e000ed10 	.word	0xe000ed10

0001261c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1261c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1261e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12620:	f380 8811 	msr	BASEPRI, r0
	isb
   12624:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12628:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1262c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1262e:	b662      	cpsie	i
	isb
   12630:	f3bf 8f6f 	isb	sy

	bx	lr
   12634:	4770      	bx	lr
   12636:	bf00      	nop

00012638 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12638:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1263a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1263c:	f381 8811 	msr	BASEPRI, r1

	wfe
   12640:	bf20      	wfe

	msr	BASEPRI, r0
   12642:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12646:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12648:	4770      	bx	lr
   1264a:	bf00      	nop

0001264c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1264c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1264e:	4605      	mov	r5, r0

	if (esf != NULL) {
   12650:	460c      	mov	r4, r1
   12652:	b1c9      	cbz	r1, 12688 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   12654:	688b      	ldr	r3, [r1, #8]
   12656:	9300      	str	r3, [sp, #0]
   12658:	e9d1 2300 	ldrd	r2, r3, [r1]
   1265c:	480e      	ldr	r0, [pc, #56]	; (12698 <z_arm_fatal_error+0x4c>)
   1265e:	2145      	movs	r1, #69	; 0x45
   12660:	f010 fceb 	bl	2303a <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   12664:	6963      	ldr	r3, [r4, #20]
   12666:	9300      	str	r3, [sp, #0]
   12668:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   1266c:	480b      	ldr	r0, [pc, #44]	; (1269c <z_arm_fatal_error+0x50>)
   1266e:	2145      	movs	r1, #69	; 0x45
   12670:	f010 fce3 	bl	2303a <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   12674:	69e2      	ldr	r2, [r4, #28]
   12676:	480a      	ldr	r0, [pc, #40]	; (126a0 <z_arm_fatal_error+0x54>)
   12678:	2145      	movs	r1, #69	; 0x45
   1267a:	f010 fcde 	bl	2303a <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1267e:	69a2      	ldr	r2, [r4, #24]
   12680:	4808      	ldr	r0, [pc, #32]	; (126a4 <z_arm_fatal_error+0x58>)
   12682:	2145      	movs	r1, #69	; 0x45
   12684:	f010 fcd9 	bl	2303a <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   12688:	4621      	mov	r1, r4
   1268a:	4628      	mov	r0, r5
}
   1268c:	b003      	add	sp, #12
   1268e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   12692:	f009 bde1 	b.w	1c258 <z_fatal_error>
   12696:	bf00      	nop
   12698:	00026998 	.word	0x00026998
   1269c:	000269cc 	.word	0x000269cc
   126a0:	00026a00 	.word	0x00026a00
   126a4:	00026a14 	.word	0x00026a14

000126a8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   126a8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   126aa:	2800      	cmp	r0, #0
   126ac:	db07      	blt.n	126be <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   126ae:	4a04      	ldr	r2, [pc, #16]	; (126c0 <arch_irq_enable+0x18>)
   126b0:	0941      	lsrs	r1, r0, #5
   126b2:	2301      	movs	r3, #1
   126b4:	f000 001f 	and.w	r0, r0, #31
   126b8:	4083      	lsls	r3, r0
   126ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   126be:	4770      	bx	lr
   126c0:	e000e100 	.word	0xe000e100

000126c4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   126c4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   126c6:	2800      	cmp	r0, #0
   126c8:	db0c      	blt.n	126e4 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   126ca:	0943      	lsrs	r3, r0, #5
   126cc:	4906      	ldr	r1, [pc, #24]	; (126e8 <arch_irq_disable+0x24>)
   126ce:	f000 001f 	and.w	r0, r0, #31
   126d2:	3320      	adds	r3, #32
   126d4:	2201      	movs	r2, #1
   126d6:	4082      	lsls	r2, r0
   126d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   126dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   126e0:	f3bf 8f6f 	isb	sy
}
   126e4:	4770      	bx	lr
   126e6:	bf00      	nop
   126e8:	e000e100 	.word	0xe000e100

000126ec <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   126ec:	4b05      	ldr	r3, [pc, #20]	; (12704 <arch_irq_is_enabled+0x18>)
   126ee:	0942      	lsrs	r2, r0, #5
   126f0:	f000 001f 	and.w	r0, r0, #31
   126f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   126f8:	2301      	movs	r3, #1
   126fa:	fa03 f000 	lsl.w	r0, r3, r0
}
   126fe:	4010      	ands	r0, r2
   12700:	4770      	bx	lr
   12702:	bf00      	nop
   12704:	e000e100 	.word	0xe000e100

00012708 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   12708:	b508      	push	{r3, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1270a:	07d3      	lsls	r3, r2, #31
   1270c:	d40b      	bmi.n	12726 <z_arm_irq_priority_set+0x1e>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1270e:	3102      	adds	r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   12710:	2907      	cmp	r1, #7
   12712:	d909      	bls.n	12728 <z_arm_irq_priority_set+0x20>
   12714:	490e      	ldr	r1, [pc, #56]	; (12750 <z_arm_irq_priority_set+0x48>)
   12716:	480f      	ldr	r0, [pc, #60]	; (12754 <z_arm_irq_priority_set+0x4c>)
   12718:	225b      	movs	r2, #91	; 0x5b
   1271a:	f010 fc80 	bl	2301e <assert_print>
   1271e:	480c      	ldr	r0, [pc, #48]	; (12750 <z_arm_irq_priority_set+0x48>)
   12720:	215b      	movs	r1, #91	; 0x5b
   12722:	f010 fc75 	bl	23010 <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   12726:	2100      	movs	r1, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12728:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1272a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1272c:	bfac      	ite	ge
   1272e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12732:	4b09      	ldrlt	r3, [pc, #36]	; (12758 <z_arm_irq_priority_set+0x50>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12734:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12738:	bfb8      	it	lt
   1273a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1273e:	b2c9      	uxtb	r1, r1
   12740:	bfaa      	itet	ge
   12742:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12746:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12748:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   1274c:	bd08      	pop	{r3, pc}
   1274e:	bf00      	nop
   12750:	00026a47 	.word	0x00026a47
   12754:	00026718 	.word	0x00026718
   12758:	e000ed14 	.word	0xe000ed14

0001275c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1275c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1275e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   12760:	4b04      	ldr	r3, [pc, #16]	; (12774 <_arch_isr_direct_pm+0x18>)
   12762:	699a      	ldr	r2, [r3, #24]
   12764:	b11a      	cbz	r2, 1276e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   12766:	2200      	movs	r2, #0
   12768:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1276a:	f012 fd87 	bl	2527c <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1276e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   12770:	bd08      	pop	{r3, pc}
   12772:	bf00      	nop
   12774:	20002f64 	.word	0x20002f64

00012778 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12778:	bf30      	wfi
    b z_SysNmiOnReset
   1277a:	f7ff bffd 	b.w	12778 <z_SysNmiOnReset>
   1277e:	bf00      	nop

00012780 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12780:	4a0b      	ldr	r2, [pc, #44]	; (127b0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   12782:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12784:	4b0b      	ldr	r3, [pc, #44]	; (127b4 <z_arm_prep_c+0x34>)
   12786:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1278a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1278c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12790:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12794:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12798:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1279c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   127a0:	f009 fdf2 	bl	1c388 <z_bss_zero>
	z_data_copy();
   127a4:	f00c f8be 	bl	1e924 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   127a8:	f000 fb00 	bl	12dac <z_arm_interrupt_init>
	z_cstart();
   127ac:	f009 fe30 	bl	1c410 <z_cstart>
   127b0:	00000000 	.word	0x00000000
   127b4:	e000ed00 	.word	0xe000ed00

000127b8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   127b8:	4a09      	ldr	r2, [pc, #36]	; (127e0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   127ba:	490a      	ldr	r1, [pc, #40]	; (127e4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   127bc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   127be:	6809      	ldr	r1, [r1, #0]
   127c0:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   127c2:	4909      	ldr	r1, [pc, #36]	; (127e8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   127c4:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   127c6:	684b      	ldr	r3, [r1, #4]
   127c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   127cc:	604b      	str	r3, [r1, #4]
   127ce:	2300      	movs	r3, #0
   127d0:	f383 8811 	msr	BASEPRI, r3
   127d4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   127d8:	6893      	ldr	r3, [r2, #8]
}
   127da:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   127dc:	4770      	bx	lr
   127de:	bf00      	nop
   127e0:	20002f64 	.word	0x20002f64
   127e4:	00026068 	.word	0x00026068
   127e8:	e000ed00 	.word	0xe000ed00

000127ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   127ec:	4912      	ldr	r1, [pc, #72]	; (12838 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   127ee:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   127f0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   127f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   127f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   127fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   127fe:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   12800:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12804:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12808:	4f0c      	ldr	r7, [pc, #48]	; (1283c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1280a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1280e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   12810:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12812:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12814:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   12816:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12818:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1281a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1281e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   12820:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   12822:	f000 fb5f 	bl	12ee4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   12826:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1282a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1282e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   12832:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   12836:	4770      	bx	lr
    ldr r1, =_kernel
   12838:	20002f64 	.word	0x20002f64
    ldr v4, =_SCS_ICSR
   1283c:	e000ed04 	.word	0xe000ed04

00012840 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   12840:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12844:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   12846:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1284a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1284e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   12850:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   12854:	2902      	cmp	r1, #2
    beq _oops
   12856:	d0ff      	beq.n	12858 <_oops>

00012858 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   12858:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1285a:	f010 fe29 	bl	234b0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   1285e:	bd01      	pop	{r0, pc}

00012860 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12860:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12864:	9b00      	ldr	r3, [sp, #0]
   12866:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1286a:	490a      	ldr	r1, [pc, #40]	; (12894 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   1286c:	9b01      	ldr	r3, [sp, #4]
   1286e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12872:	9b02      	ldr	r3, [sp, #8]
   12874:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   12878:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1287c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12880:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   12884:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12888:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1288a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1288c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1288e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12890:	4770      	bx	lr
   12892:	bf00      	nop
   12894:	00022c0d 	.word	0x00022c0d

00012898 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   12898:	4a09      	ldr	r2, [pc, #36]	; (128c0 <z_check_thread_stack_fail+0x28>)
{
   1289a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   1289c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   1289e:	b170      	cbz	r0, 128be <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   128a0:	f113 0f16 	cmn.w	r3, #22
   128a4:	6e80      	ldr	r0, [r0, #104]	; 0x68
   128a6:	d005      	beq.n	128b4 <z_check_thread_stack_fail+0x1c>
   128a8:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   128ac:	429a      	cmp	r2, r3
   128ae:	d805      	bhi.n	128bc <z_check_thread_stack_fail+0x24>
   128b0:	4283      	cmp	r3, r0
   128b2:	d203      	bcs.n	128bc <z_check_thread_stack_fail+0x24>
		return 0;
   128b4:	4281      	cmp	r1, r0
   128b6:	bf28      	it	cs
   128b8:	2000      	movcs	r0, #0
   128ba:	4770      	bx	lr
   128bc:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   128be:	4770      	bx	lr
   128c0:	20002f64 	.word	0x20002f64

000128c4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   128c4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   128c6:	4b09      	ldr	r3, [pc, #36]	; (128ec <arch_switch_to_main_thread+0x28>)
   128c8:	6098      	str	r0, [r3, #8]
{
   128ca:	460d      	mov	r5, r1
   128cc:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   128ce:	f000 fb09 	bl	12ee4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   128d2:	4620      	mov	r0, r4
   128d4:	f385 8809 	msr	PSP, r5
   128d8:	2100      	movs	r1, #0
   128da:	b663      	cpsie	if
   128dc:	f381 8811 	msr	BASEPRI, r1
   128e0:	f3bf 8f6f 	isb	sy
   128e4:	2200      	movs	r2, #0
   128e6:	2300      	movs	r3, #0
   128e8:	f010 f990 	bl	22c0c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   128ec:	20002f64 	.word	0x20002f64

000128f0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   128f0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   128f2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   128f4:	4a0b      	ldr	r2, [pc, #44]	; (12924 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   128f6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   128f8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   128fa:	bf1e      	ittt	ne
	movne	r1, #0
   128fc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   128fe:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   12900:	f012 fcbc 	blne	2527c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12904:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12906:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1290a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1290e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   12912:	4905      	ldr	r1, [pc, #20]	; (12928 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12914:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12916:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12918:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1291a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1291e:	4903      	ldr	r1, [pc, #12]	; (1292c <_isr_wrapper+0x3c>)
	bx r1
   12920:	4708      	bx	r1
   12922:	0000      	.short	0x0000
	ldr r2, =_kernel
   12924:	20002f64 	.word	0x20002f64
	ldr r1, =_sw_isr_table
   12928:	00025778 	.word	0x00025778
	ldr r1, =z_arm_int_exit
   1292c:	00012931 	.word	0x00012931

00012930 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   12930:	4b04      	ldr	r3, [pc, #16]	; (12944 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   12932:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   12934:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   12936:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12938:	d003      	beq.n	12942 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1293a:	4903      	ldr	r1, [pc, #12]	; (12948 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1293c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   12940:	600a      	str	r2, [r1, #0]

00012942 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   12942:	4770      	bx	lr
	ldr r3, =_kernel
   12944:	20002f64 	.word	0x20002f64
	ldr r1, =_SCS_ICSR
   12948:	e000ed04 	.word	0xe000ed04

0001294c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   1294c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12950:	4c38      	ldr	r4, [pc, #224]	; (12a34 <mem_manage_fault+0xe8>)
{
   12952:	4607      	mov	r7, r0
   12954:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   12956:	4838      	ldr	r0, [pc, #224]	; (12a38 <mem_manage_fault+0xec>)
   12958:	2145      	movs	r1, #69	; 0x45
{
   1295a:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1295c:	f010 fb6d 	bl	2303a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12960:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12962:	06d8      	lsls	r0, r3, #27
   12964:	d503      	bpl.n	1296e <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   12966:	4835      	ldr	r0, [pc, #212]	; (12a3c <mem_manage_fault+0xf0>)
   12968:	2145      	movs	r1, #69	; 0x45
   1296a:	f010 fb66 	bl	2303a <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1296e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12970:	0719      	lsls	r1, r3, #28
   12972:	d503      	bpl.n	1297c <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   12974:	4832      	ldr	r0, [pc, #200]	; (12a40 <mem_manage_fault+0xf4>)
   12976:	2145      	movs	r1, #69	; 0x45
   12978:	f010 fb5f 	bl	2303a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1297c:	4c2d      	ldr	r4, [pc, #180]	; (12a34 <mem_manage_fault+0xe8>)
   1297e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12980:	079a      	lsls	r2, r3, #30
   12982:	d432      	bmi.n	129ea <mem_manage_fault+0x9e>
	uint32_t mmfar = -EINVAL;
   12984:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   12988:	4c2a      	ldr	r4, [pc, #168]	; (12a34 <mem_manage_fault+0xe8>)
   1298a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1298c:	07d8      	lsls	r0, r3, #31
   1298e:	d503      	bpl.n	12998 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
   12990:	482c      	ldr	r0, [pc, #176]	; (12a44 <mem_manage_fault+0xf8>)
   12992:	2145      	movs	r1, #69	; 0x45
   12994:	f010 fb51 	bl	2303a <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12998:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1299a:	0699      	lsls	r1, r3, #26
   1299c:	d503      	bpl.n	129a6 <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
   1299e:	482a      	ldr	r0, [pc, #168]	; (12a48 <mem_manage_fault+0xfc>)
   129a0:	2145      	movs	r1, #69	; 0x45
   129a2:	f010 fb4a 	bl	2303a <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   129a6:	4c23      	ldr	r4, [pc, #140]	; (12a34 <mem_manage_fault+0xe8>)
   129a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   129aa:	06da      	lsls	r2, r3, #27
   129ac:	d402      	bmi.n	129b4 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   129ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   129b0:	079b      	lsls	r3, r3, #30
   129b2:	d53d      	bpl.n	12a30 <mem_manage_fault+0xe4>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   129b4:	6863      	ldr	r3, [r4, #4]
   129b6:	0518      	lsls	r0, r3, #20
   129b8:	d53a      	bpl.n	12a30 <mem_manage_fault+0xe4>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   129ba:	4639      	mov	r1, r7
   129bc:	4630      	mov	r0, r6
   129be:	f7ff ff6b 	bl	12898 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
   129c2:	b338      	cbz	r0, 12a14 <mem_manage_fault+0xc8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   129c4:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
   129c8:	2002      	movs	r0, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   129ca:	4b1a      	ldr	r3, [pc, #104]	; (12a34 <mem_manage_fault+0xe8>)
   129cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   129ce:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   129d0:	bf42      	ittt	mi
   129d2:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   129d4:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   129d8:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   129da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   129dc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   129e0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   129e2:	2300      	movs	r3, #0
   129e4:	702b      	strb	r3, [r5, #0]

	return reason;
}
   129e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   129ea:	4818      	ldr	r0, [pc, #96]	; (12a4c <mem_manage_fault+0x100>)
   129ec:	2145      	movs	r1, #69	; 0x45
   129ee:	f010 fb24 	bl	2303a <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   129f2:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   129f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   129f6:	061b      	lsls	r3, r3, #24
   129f8:	d5c4      	bpl.n	12984 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   129fa:	4815      	ldr	r0, [pc, #84]	; (12a50 <mem_manage_fault+0x104>)
   129fc:	4632      	mov	r2, r6
   129fe:	2145      	movs	r1, #69	; 0x45
   12a00:	f010 fb1b 	bl	2303a <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   12a04:	f1b8 0f00 	cmp.w	r8, #0
   12a08:	d0be      	beq.n	12988 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12a0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   12a10:	62a3      	str	r3, [r4, #40]	; 0x28
   12a12:	e7b9      	b.n	12988 <mem_manage_fault+0x3c>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   12a14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12a16:	06d9      	lsls	r1, r3, #27
   12a18:	d50a      	bpl.n	12a30 <mem_manage_fault+0xe4>
   12a1a:	490e      	ldr	r1, [pc, #56]	; (12a54 <mem_manage_fault+0x108>)
   12a1c:	480e      	ldr	r0, [pc, #56]	; (12a58 <mem_manage_fault+0x10c>)
   12a1e:	f44f 72ab 	mov.w	r2, #342	; 0x156
   12a22:	f010 fafc 	bl	2301e <assert_print>
   12a26:	480b      	ldr	r0, [pc, #44]	; (12a54 <mem_manage_fault+0x108>)
   12a28:	f44f 71ab 	mov.w	r1, #342	; 0x156
   12a2c:	f010 faf0 	bl	23010 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12a30:	2000      	movs	r0, #0
   12a32:	e7ca      	b.n	129ca <mem_manage_fault+0x7e>
   12a34:	e000ed00 	.word	0xe000ed00
   12a38:	00026a7d 	.word	0x00026a7d
   12a3c:	00026a98 	.word	0x00026a98
   12a40:	00026ad0 	.word	0x00026ad0
   12a44:	00026b20 	.word	0x00026b20
   12a48:	00026b44 	.word	0x00026b44
   12a4c:	00026ae8 	.word	0x00026ae8
   12a50:	00026b05 	.word	0x00026b05
   12a54:	00026b78 	.word	0x00026b78
   12a58:	00026718 	.word	0x00026718

00012a5c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   12a5c:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12a5e:	4c1d      	ldr	r4, [pc, #116]	; (12ad4 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   12a60:	481d      	ldr	r0, [pc, #116]	; (12ad8 <usage_fault.constprop.0+0x7c>)
   12a62:	2145      	movs	r1, #69	; 0x45
   12a64:	f010 fae9 	bl	2303a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12a6a:	019b      	lsls	r3, r3, #6
   12a6c:	d503      	bpl.n	12a76 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   12a6e:	481b      	ldr	r0, [pc, #108]	; (12adc <usage_fault.constprop.0+0x80>)
   12a70:	2145      	movs	r1, #69	; 0x45
   12a72:	f010 fae2 	bl	2303a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12a76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12a78:	01dc      	lsls	r4, r3, #7
   12a7a:	d503      	bpl.n	12a84 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   12a7c:	4818      	ldr	r0, [pc, #96]	; (12ae0 <usage_fault.constprop.0+0x84>)
   12a7e:	2145      	movs	r1, #69	; 0x45
   12a80:	f010 fadb 	bl	2303a <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12a84:	4c13      	ldr	r4, [pc, #76]	; (12ad4 <usage_fault.constprop.0+0x78>)
   12a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12a88:	0318      	lsls	r0, r3, #12
   12a8a:	d503      	bpl.n	12a94 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   12a8c:	4815      	ldr	r0, [pc, #84]	; (12ae4 <usage_fault.constprop.0+0x88>)
   12a8e:	2145      	movs	r1, #69	; 0x45
   12a90:	f010 fad3 	bl	2303a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12a94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12a96:	0359      	lsls	r1, r3, #13
   12a98:	d503      	bpl.n	12aa2 <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   12a9a:	4813      	ldr	r0, [pc, #76]	; (12ae8 <usage_fault.constprop.0+0x8c>)
   12a9c:	2145      	movs	r1, #69	; 0x45
   12a9e:	f010 facc 	bl	2303a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12aa2:	4c0c      	ldr	r4, [pc, #48]	; (12ad4 <usage_fault.constprop.0+0x78>)
   12aa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12aa6:	039a      	lsls	r2, r3, #14
   12aa8:	d503      	bpl.n	12ab2 <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   12aaa:	4810      	ldr	r0, [pc, #64]	; (12aec <usage_fault.constprop.0+0x90>)
   12aac:	2145      	movs	r1, #69	; 0x45
   12aae:	f010 fac4 	bl	2303a <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12ab2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12ab4:	03db      	lsls	r3, r3, #15
   12ab6:	d503      	bpl.n	12ac0 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   12ab8:	480d      	ldr	r0, [pc, #52]	; (12af0 <usage_fault.constprop.0+0x94>)
   12aba:	2145      	movs	r1, #69	; 0x45
   12abc:	f010 fabd 	bl	2303a <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12ac0:	4a04      	ldr	r2, [pc, #16]	; (12ad4 <usage_fault.constprop.0+0x78>)
   12ac2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12ac4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   12ac8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   12acc:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   12ace:	2000      	movs	r0, #0
   12ad0:	bd10      	pop	{r4, pc}
   12ad2:	bf00      	nop
   12ad4:	e000ed00 	.word	0xe000ed00
   12ad8:	00026bb2 	.word	0x00026bb2
   12adc:	00026bcf 	.word	0x00026bcf
   12ae0:	00026be7 	.word	0x00026be7
   12ae4:	00026c06 	.word	0x00026c06
   12ae8:	00026c29 	.word	0x00026c29
   12aec:	00026c53 	.word	0x00026c53
   12af0:	00026c72 	.word	0x00026c72

00012af4 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12af4:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12af6:	4c23      	ldr	r4, [pc, #140]	; (12b84 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12af8:	4606      	mov	r6, r0
   12afa:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   12afc:	4822      	ldr	r0, [pc, #136]	; (12b88 <bus_fault.constprop.0+0x94>)
   12afe:	2145      	movs	r1, #69	; 0x45
   12b00:	f010 fa9b 	bl	2303a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12b04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b06:	04d9      	lsls	r1, r3, #19
   12b08:	d503      	bpl.n	12b12 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   12b0a:	4820      	ldr	r0, [pc, #128]	; (12b8c <bus_fault.constprop.0+0x98>)
   12b0c:	2145      	movs	r1, #69	; 0x45
   12b0e:	f010 fa94 	bl	2303a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12b12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b14:	051a      	lsls	r2, r3, #20
   12b16:	d503      	bpl.n	12b20 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   12b18:	481d      	ldr	r0, [pc, #116]	; (12b90 <bus_fault.constprop.0+0x9c>)
   12b1a:	2145      	movs	r1, #69	; 0x45
   12b1c:	f010 fa8d 	bl	2303a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12b20:	4c18      	ldr	r4, [pc, #96]	; (12b84 <bus_fault.constprop.0+0x90>)
   12b22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b24:	059b      	lsls	r3, r3, #22
   12b26:	d510      	bpl.n	12b4a <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   12b28:	481a      	ldr	r0, [pc, #104]	; (12b94 <bus_fault.constprop.0+0xa0>)
   12b2a:	2145      	movs	r1, #69	; 0x45
   12b2c:	f010 fa85 	bl	2303a <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   12b30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12b32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b34:	0418      	lsls	r0, r3, #16
   12b36:	d508      	bpl.n	12b4a <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   12b38:	4817      	ldr	r0, [pc, #92]	; (12b98 <bus_fault.constprop.0+0xa4>)
   12b3a:	2145      	movs	r1, #69	; 0x45
   12b3c:	f010 fa7d 	bl	2303a <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   12b40:	b11e      	cbz	r6, 12b4a <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12b42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   12b48:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12b4a:	4c0e      	ldr	r4, [pc, #56]	; (12b84 <bus_fault.constprop.0+0x90>)
   12b4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b4e:	0559      	lsls	r1, r3, #21
   12b50:	d503      	bpl.n	12b5a <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   12b52:	4812      	ldr	r0, [pc, #72]	; (12b9c <bus_fault.constprop.0+0xa8>)
   12b54:	2145      	movs	r1, #69	; 0x45
   12b56:	f010 fa70 	bl	2303a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12b5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b5c:	05da      	lsls	r2, r3, #23
   12b5e:	d50b      	bpl.n	12b78 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   12b60:	480f      	ldr	r0, [pc, #60]	; (12ba0 <bus_fault.constprop.0+0xac>)
   12b62:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12b64:	f010 fa69 	bl	2303a <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12b68:	4a06      	ldr	r2, [pc, #24]	; (12b84 <bus_fault.constprop.0+0x90>)
   12b6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12b6c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12b6e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   12b72:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12b74:	7028      	strb	r0, [r5, #0]
}
   12b76:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12b78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b7a:	049b      	lsls	r3, r3, #18
   12b7c:	d5f4      	bpl.n	12b68 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12b7e:	4809      	ldr	r0, [pc, #36]	; (12ba4 <bus_fault.constprop.0+0xb0>)
   12b80:	2145      	movs	r1, #69	; 0x45
   12b82:	e7ef      	b.n	12b64 <bus_fault.constprop.0+0x70>
   12b84:	e000ed00 	.word	0xe000ed00
   12b88:	00026ca2 	.word	0x00026ca2
   12b8c:	00026cbd 	.word	0x00026cbd
   12b90:	00026ad0 	.word	0x00026ad0
   12b94:	00026cd3 	.word	0x00026cd3
   12b98:	00026cf1 	.word	0x00026cf1
   12b9c:	00026d0b 	.word	0x00026d0b
   12ba0:	00026d2b 	.word	0x00026d2b
   12ba4:	00026b44 	.word	0x00026b44

00012ba8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   12ba8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12baa:	4b6a      	ldr	r3, [pc, #424]	; (12d54 <z_arm_fault+0x1ac>)
{
   12bac:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12bae:	6858      	ldr	r0, [r3, #4]
{
   12bb0:	b08a      	sub	sp, #40	; 0x28
   12bb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
   12bb6:	2600      	movs	r6, #0
   12bb8:	f386 8811 	msr	BASEPRI, r6
   12bbc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   12bc0:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   12bc4:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   12bc8:	d107      	bne.n	12bda <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   12bca:	f002 040c 	and.w	r4, r2, #12
   12bce:	2c08      	cmp	r4, #8
   12bd0:	d10e      	bne.n	12bf0 <z_arm_fault+0x48>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   12bd2:	4861      	ldr	r0, [pc, #388]	; (12d58 <z_arm_fault+0x1b0>)
   12bd4:	2145      	movs	r1, #69	; 0x45
   12bd6:	f010 fa30 	bl	2303a <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   12bda:	4960      	ldr	r1, [pc, #384]	; (12d5c <z_arm_fault+0x1b4>)
   12bdc:	4860      	ldr	r0, [pc, #384]	; (12d60 <z_arm_fault+0x1b8>)
   12bde:	f44f 6284 	mov.w	r2, #1056	; 0x420
   12be2:	f010 fa1c 	bl	2301e <assert_print>
   12be6:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   12bea:	485c      	ldr	r0, [pc, #368]	; (12d5c <z_arm_fault+0x1b4>)
   12bec:	f010 fa10 	bl	23010 <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12bf0:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   12bf2:	bf4c      	ite	mi
   12bf4:	460d      	movmi	r5, r1
			*nested_exc = true;
   12bf6:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   12bf8:	2d00      	cmp	r5, #0
   12bfa:	d0ee      	beq.n	12bda <z_arm_fault+0x32>
	*recoverable = false;
   12bfc:	2400      	movs	r4, #0
	switch (fault) {
   12bfe:	1eda      	subs	r2, r3, #3
	*recoverable = false;
   12c00:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   12c04:	2a09      	cmp	r2, #9
   12c06:	f200 8093 	bhi.w	12d30 <z_arm_fault+0x188>
   12c0a:	e8df f002 	tbb	[pc, r2]
   12c0e:	8605      	.short	0x8605
   12c10:	9191718a 	.word	0x9191718a
   12c14:	8e919191 	.word	0x8e919191
	PR_FAULT_INFO("***** HARD FAULT *****");
   12c18:	4852      	ldr	r0, [pc, #328]	; (12d64 <z_arm_fault+0x1bc>)
   12c1a:	2145      	movs	r1, #69	; 0x45
   12c1c:	f010 fa0d 	bl	2303a <z_log_minimal_printk>
	*recoverable = false;
   12c20:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12c24:	4c4b      	ldr	r4, [pc, #300]	; (12d54 <z_arm_fault+0x1ac>)
   12c26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12c28:	079a      	lsls	r2, r3, #30
   12c2a:	d505      	bpl.n	12c38 <z_arm_fault+0x90>
		PR_EXC("  Bus fault on vector table read");
   12c2c:	484e      	ldr	r0, [pc, #312]	; (12d68 <z_arm_fault+0x1c0>)
   12c2e:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   12c30:	f010 fa03 	bl	2303a <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12c34:	2400      	movs	r4, #0
   12c36:	e029      	b.n	12c8c <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   12c38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12c3a:	2b00      	cmp	r3, #0
   12c3c:	da02      	bge.n	12c44 <z_arm_fault+0x9c>
		PR_EXC("  Debug event");
   12c3e:	484b      	ldr	r0, [pc, #300]	; (12d6c <z_arm_fault+0x1c4>)
   12c40:	2145      	movs	r1, #69	; 0x45
   12c42:	e7f5      	b.n	12c30 <z_arm_fault+0x88>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12c44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12c46:	005b      	lsls	r3, r3, #1
   12c48:	d55e      	bpl.n	12d08 <z_arm_fault+0x160>
		PR_EXC("  Fault escalation (see below)");
   12c4a:	4849      	ldr	r0, [pc, #292]	; (12d70 <z_arm_fault+0x1c8>)
   12c4c:	2145      	movs	r1, #69	; 0x45
   12c4e:	f010 f9f4 	bl	2303a <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   12c52:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   12c54:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   12c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   12c5a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   12c5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12c60:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   12c64:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   12c66:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   12c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   12c6e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   12c70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12c74:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   12c78:	f64d 7302 	movw	r3, #57090	; 0xdf02
   12c7c:	429a      	cmp	r2, r3
   12c7e:	d11e      	bne.n	12cbe <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   12c80:	682a      	ldr	r2, [r5, #0]
   12c82:	483c      	ldr	r0, [pc, #240]	; (12d74 <z_arm_fault+0x1cc>)
   12c84:	2145      	movs	r1, #69	; 0x45
   12c86:	f010 f9d8 	bl	2303a <z_log_minimal_printk>
			reason = esf->basic.r0;
   12c8a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   12c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12c90:	b99b      	cbnz	r3, 12cba <z_arm_fault+0x112>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12c92:	2220      	movs	r2, #32
   12c94:	4629      	mov	r1, r5
   12c96:	a802      	add	r0, sp, #8
   12c98:	f010 fc66 	bl	23568 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   12c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12c9e:	2e00      	cmp	r6, #0
   12ca0:	d052      	beq.n	12d48 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   12ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   12ca6:	b922      	cbnz	r2, 12cb2 <z_arm_fault+0x10a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   12ca8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12cac:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12cb0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   12cb2:	a902      	add	r1, sp, #8
   12cb4:	4620      	mov	r0, r4
   12cb6:	f7ff fcc9 	bl	1264c <z_arm_fatal_error>
}
   12cba:	b00a      	add	sp, #40	; 0x28
   12cbc:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   12cbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12cc0:	b2db      	uxtb	r3, r3
   12cc2:	b13b      	cbz	r3, 12cd4 <z_arm_fault+0x12c>
			reason = mem_manage_fault(esf, 1, recoverable);
   12cc4:	f10d 0207 	add.w	r2, sp, #7
   12cc8:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   12cca:	4628      	mov	r0, r5
   12ccc:	f7ff fe3e 	bl	1294c <mem_manage_fault>
   12cd0:	4604      	mov	r4, r0
		break;
   12cd2:	e7db      	b.n	12c8c <z_arm_fault+0xe4>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   12cd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12cd6:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   12cda:	d005      	beq.n	12ce8 <z_arm_fault+0x140>
			reason = bus_fault(esf, 1, recoverable);
   12cdc:	f10d 0107 	add.w	r1, sp, #7
   12ce0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   12ce2:	f7ff ff07 	bl	12af4 <bus_fault.constprop.0>
   12ce6:	e7f3      	b.n	12cd0 <z_arm_fault+0x128>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   12ce8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   12cee:	d302      	bcc.n	12cf6 <z_arm_fault+0x14e>
		reason = usage_fault(esf);
   12cf0:	f7ff feb4 	bl	12a5c <usage_fault.constprop.0>
   12cf4:	e7ec      	b.n	12cd0 <z_arm_fault+0x128>
			__ASSERT(0,
   12cf6:	4919      	ldr	r1, [pc, #100]	; (12d5c <z_arm_fault+0x1b4>)
   12cf8:	4819      	ldr	r0, [pc, #100]	; (12d60 <z_arm_fault+0x1b8>)
   12cfa:	f240 22f2 	movw	r2, #754	; 0x2f2
   12cfe:	f010 f98e 	bl	2301e <assert_print>
   12d02:	f240 21f2 	movw	r1, #754	; 0x2f2
   12d06:	e770      	b.n	12bea <z_arm_fault+0x42>
		__ASSERT(0,
   12d08:	4914      	ldr	r1, [pc, #80]	; (12d5c <z_arm_fault+0x1b4>)
   12d0a:	4815      	ldr	r0, [pc, #84]	; (12d60 <z_arm_fault+0x1b8>)
   12d0c:	f240 22f6 	movw	r2, #758	; 0x2f6
   12d10:	f010 f985 	bl	2301e <assert_print>
   12d14:	f240 21f6 	movw	r1, #758	; 0x2f6
   12d18:	e767      	b.n	12bea <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
   12d1a:	f10d 0207 	add.w	r2, sp, #7
   12d1e:	2100      	movs	r1, #0
   12d20:	e7d3      	b.n	12cca <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
   12d22:	f10d 0107 	add.w	r1, sp, #7
   12d26:	2000      	movs	r0, #0
   12d28:	e7db      	b.n	12ce2 <z_arm_fault+0x13a>
	PR_FAULT_INFO(
   12d2a:	4813      	ldr	r0, [pc, #76]	; (12d78 <z_arm_fault+0x1d0>)
   12d2c:	2145      	movs	r1, #69	; 0x45
   12d2e:	e77f      	b.n	12c30 <z_arm_fault+0x88>
	PR_FAULT_INFO("***** %s %d) *****",
   12d30:	4912      	ldr	r1, [pc, #72]	; (12d7c <z_arm_fault+0x1d4>)
   12d32:	4a13      	ldr	r2, [pc, #76]	; (12d80 <z_arm_fault+0x1d8>)
   12d34:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
   12d38:	bf08      	it	eq
   12d3a:	460a      	moveq	r2, r1
   12d3c:	4811      	ldr	r0, [pc, #68]	; (12d84 <z_arm_fault+0x1dc>)
   12d3e:	3b10      	subs	r3, #16
   12d40:	2145      	movs	r1, #69	; 0x45
   12d42:	f010 f97a 	bl	2303a <z_log_minimal_printk>
}
   12d46:	e775      	b.n	12c34 <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12d48:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12d4c:	f023 0301 	bic.w	r3, r3, #1
   12d50:	e7ae      	b.n	12cb0 <z_arm_fault+0x108>
   12d52:	bf00      	nop
   12d54:	e000ed00 	.word	0xe000ed00
   12d58:	00026d76 	.word	0x00026d76
   12d5c:	00026b78 	.word	0x00026b78
   12d60:	00026718 	.word	0x00026718
   12d64:	00026da6 	.word	0x00026da6
   12d68:	00026dc2 	.word	0x00026dc2
   12d6c:	00026de8 	.word	0x00026de8
   12d70:	00026dfb 	.word	0x00026dfb
   12d74:	00026e1f 	.word	0x00026e1f
   12d78:	00026e40 	.word	0x00026e40
   12d7c:	00026d48 	.word	0x00026d48
   12d80:	00026d5d 	.word	0x00026d5d
   12d84:	00026e69 	.word	0x00026e69

00012d88 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12d88:	4a02      	ldr	r2, [pc, #8]	; (12d94 <z_arm_fault_init+0xc>)
   12d8a:	6953      	ldr	r3, [r2, #20]
   12d8c:	f043 0310 	orr.w	r3, r3, #16
   12d90:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   12d92:	4770      	bx	lr
   12d94:	e000ed00 	.word	0xe000ed00

00012d98 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12d98:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12d9c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12da0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12da2:	4672      	mov	r2, lr
	bl z_arm_fault
   12da4:	f7ff ff00 	bl	12ba8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12da8:	bd01      	pop	{r0, pc}
   12daa:	bf00      	nop

00012dac <z_arm_interrupt_init>:
   12dac:	4804      	ldr	r0, [pc, #16]	; (12dc0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12dae:	2300      	movs	r3, #0
   12db0:	2140      	movs	r1, #64	; 0x40
   12db2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12db4:	3301      	adds	r3, #1
   12db6:	2b30      	cmp	r3, #48	; 0x30
   12db8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   12dbc:	d1f9      	bne.n	12db2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   12dbe:	4770      	bx	lr
   12dc0:	e000e100 	.word	0xe000e100

00012dc4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   12dc4:	2000      	movs	r0, #0
    msr CONTROL, r0
   12dc6:	f380 8814 	msr	CONTROL, r0
    isb
   12dca:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   12dce:	f7ff f8ed 	bl	11fac <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   12dd2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12dd4:	490d      	ldr	r1, [pc, #52]	; (12e0c <__start+0x48>)
    str r0, [r1]
   12dd6:	6008      	str	r0, [r1, #0]
    dsb
   12dd8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12ddc:	480c      	ldr	r0, [pc, #48]	; (12e10 <__start+0x4c>)
    msr msp, r0
   12dde:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   12de2:	f000 f82b 	bl	12e3c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12de6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   12de8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12dec:	4809      	ldr	r0, [pc, #36]	; (12e14 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12dee:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   12df2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12df4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12df8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12dfc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12dfe:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12e00:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12e04:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12e08:	f7ff fcba 	bl	12780 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   12e0c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12e10:	200082c0 	.word	0x200082c0
    ldr r0, =z_interrupt_stacks
   12e14:	20007100 	.word	0x20007100

00012e18 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12e18:	4907      	ldr	r1, [pc, #28]	; (12e38 <z_arm_clear_arm_mpu_config+0x20>)
   12e1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   12e1e:	2300      	movs	r3, #0
	int num_regions =
   12e20:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   12e24:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   12e26:	4293      	cmp	r3, r2
   12e28:	db00      	blt.n	12e2c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   12e2a:	4770      	bx	lr
  MPU->RNR = rnr;
   12e2c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   12e30:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   12e34:	3301      	adds	r3, #1
   12e36:	e7f6      	b.n	12e26 <z_arm_clear_arm_mpu_config+0xe>
   12e38:	e000ed00 	.word	0xe000ed00

00012e3c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   12e3c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12e3e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12e40:	2300      	movs	r3, #0
   12e42:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12e46:	f7ff ffe7 	bl	12e18 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   12e4a:	4b14      	ldr	r3, [pc, #80]	; (12e9c <z_arm_init_arch_hw_at_boot+0x60>)
   12e4c:	f04f 32ff 	mov.w	r2, #4294967295
   12e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   12e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   12e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   12e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   12e60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   12e64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   12e68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   12e6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12e70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   12e74:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   12e78:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   12e7c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   12e80:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   12e84:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   12e88:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   12e8c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   12e90:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   12e92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12e96:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   12e9a:	bd08      	pop	{r3, pc}
   12e9c:	e000e100 	.word	0xe000e100

00012ea0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   12ea0:	4b08      	ldr	r3, [pc, #32]	; (12ec4 <z_impl_k_thread_abort+0x24>)
   12ea2:	689b      	ldr	r3, [r3, #8]
   12ea4:	4283      	cmp	r3, r0
   12ea6:	d10b      	bne.n	12ec0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12ea8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12eac:	b143      	cbz	r3, 12ec0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12eae:	4b06      	ldr	r3, [pc, #24]	; (12ec8 <z_impl_k_thread_abort+0x28>)
   12eb0:	685a      	ldr	r2, [r3, #4]
   12eb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   12eb6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   12eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   12eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12ebe:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   12ec0:	f00b bc30 	b.w	1e724 <z_thread_abort>
   12ec4:	20002f64 	.word	0x20002f64
   12ec8:	e000ed00 	.word	0xe000ed00

00012ecc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12ecc:	4b02      	ldr	r3, [pc, #8]	; (12ed8 <z_arm_configure_static_mpu_regions+0xc>)
   12ece:	4a03      	ldr	r2, [pc, #12]	; (12edc <z_arm_configure_static_mpu_regions+0x10>)
   12ed0:	4803      	ldr	r0, [pc, #12]	; (12ee0 <z_arm_configure_static_mpu_regions+0x14>)
   12ed2:	2101      	movs	r1, #1
   12ed4:	f000 b87c 	b.w	12fd0 <arm_core_mpu_configure_static_mpu_regions>
   12ed8:	20040000 	.word	0x20040000
   12edc:	20000000 	.word	0x20000000
   12ee0:	00025be0 	.word	0x00025be0

00012ee4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   12ee4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   12ee6:	4b05      	ldr	r3, [pc, #20]	; (12efc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   12ee8:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   12eea:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   12eec:	4a04      	ldr	r2, [pc, #16]	; (12f00 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   12eee:	2140      	movs	r1, #64	; 0x40
   12ef0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   12ef4:	4618      	mov	r0, r3
   12ef6:	2101      	movs	r1, #1
   12ef8:	f000 b886 	b.w	13008 <arm_core_mpu_configure_dynamic_mpu_regions>
   12efc:	20002700 	.word	0x20002700
   12f00:	150b0000 	.word	0x150b0000

00012f04 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   12f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   12f06:	4e24      	ldr	r6, [pc, #144]	; (12f98 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   12f08:	2500      	movs	r5, #0
   12f0a:	428d      	cmp	r5, r1
   12f0c:	da0f      	bge.n	12f2e <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
   12f0e:	6844      	ldr	r4, [r0, #4]
   12f10:	2c00      	cmp	r4, #0
   12f12:	d03e      	beq.n	12f92 <mpu_configure_regions+0x8e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   12f14:	b19b      	cbz	r3, 12f3e <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   12f16:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   12f1a:	ea14 0f0c 	tst.w	r4, ip
   12f1e:	d008      	beq.n	12f32 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   12f20:	481e      	ldr	r0, [pc, #120]	; (12f9c <mpu_configure_regions+0x98>)
   12f22:	462a      	mov	r2, r5
   12f24:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   12f26:	f010 f888 	bl	2303a <z_log_minimal_printk>
			return -EINVAL;
   12f2a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   12f2e:	4610      	mov	r0, r2
   12f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   12f32:	2c1f      	cmp	r4, #31
   12f34:	d9f4      	bls.n	12f20 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
   12f36:	6807      	ldr	r7, [r0, #0]
		&&
   12f38:	ea1c 0f07 	tst.w	ip, r7
   12f3c:	d1f0      	bne.n	12f20 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   12f3e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   12f40:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12f42:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12f46:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   12f4a:	d910      	bls.n	12f6e <mpu_configure_regions+0x6a>
	if (size > (1UL << 31)) {
   12f4c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   12f50:	d80f      	bhi.n	12f72 <mpu_configure_regions+0x6e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   12f52:	3c01      	subs	r4, #1
   12f54:	fab4 f484 	clz	r4, r4
   12f58:	f1c4 041f 	rsb	r4, r4, #31
   12f5c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   12f5e:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12f62:	ea4c 0c04 	orr.w	ip, ip, r4
   12f66:	d906      	bls.n	12f76 <mpu_configure_regions+0x72>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   12f68:	480d      	ldr	r0, [pc, #52]	; (12fa0 <mpu_configure_regions+0x9c>)
   12f6a:	2145      	movs	r1, #69	; 0x45
   12f6c:	e7db      	b.n	12f26 <mpu_configure_regions+0x22>
		return REGION_32B;
   12f6e:	2408      	movs	r4, #8
   12f70:	e7f5      	b.n	12f5e <mpu_configure_regions+0x5a>
		return REGION_4G;
   12f72:	243e      	movs	r4, #62	; 0x3e
   12f74:	e7f3      	b.n	12f5e <mpu_configure_regions+0x5a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12f76:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   12f7a:	4314      	orrs	r4, r2
   12f7c:	f044 0410 	orr.w	r4, r4, #16
   12f80:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12f84:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12f88:	f04c 0401 	orr.w	r4, ip, #1
   12f8c:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   12f90:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   12f92:	3501      	adds	r5, #1
   12f94:	300c      	adds	r0, #12
   12f96:	e7b8      	b.n	12f0a <mpu_configure_regions+0x6>
   12f98:	e000ed00 	.word	0xe000ed00
   12f9c:	00026e85 	.word	0x00026e85
   12fa0:	00026ead 	.word	0x00026ead

00012fa4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12fa4:	4b04      	ldr	r3, [pc, #16]	; (12fb8 <arm_core_mpu_enable+0x14>)
   12fa6:	2205      	movs	r2, #5
   12fa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   12fac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12fb0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12fb4:	4770      	bx	lr
   12fb6:	bf00      	nop
   12fb8:	e000ed00 	.word	0xe000ed00

00012fbc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   12fbc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12fc0:	4b02      	ldr	r3, [pc, #8]	; (12fcc <arm_core_mpu_disable+0x10>)
   12fc2:	2200      	movs	r2, #0
   12fc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   12fc8:	4770      	bx	lr
   12fca:	bf00      	nop
   12fcc:	e000ed00 	.word	0xe000ed00

00012fd0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   12fd0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   12fd2:	4c0a      	ldr	r4, [pc, #40]	; (12ffc <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   12fd4:	2301      	movs	r3, #1
   12fd6:	7822      	ldrb	r2, [r4, #0]
   12fd8:	f7ff ff94 	bl	12f04 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12fdc:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   12fde:	3016      	adds	r0, #22
   12fe0:	d10a      	bne.n	12ff8 <arm_core_mpu_configure_static_mpu_regions+0x28>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   12fe2:	4907      	ldr	r1, [pc, #28]	; (13000 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   12fe4:	4807      	ldr	r0, [pc, #28]	; (13004 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   12fe6:	f44f 728b 	mov.w	r2, #278	; 0x116
   12fea:	f010 f818 	bl	2301e <assert_print>
   12fee:	4804      	ldr	r0, [pc, #16]	; (13000 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   12ff0:	f44f 718b 	mov.w	r1, #278	; 0x116
   12ff4:	f010 f80c 	bl	23010 <assert_post_action>
			regions_num);
	}
}
   12ff8:	bd10      	pop	{r4, pc}
   12ffa:	bf00      	nop
   12ffc:	20003c76 	.word	0x20003c76
   13000:	00026ed8 	.word	0x00026ed8
   13004:	00026718 	.word	0x00026718

00013008 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   13008:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1300a:	4a0f      	ldr	r2, [pc, #60]	; (13048 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
   1300c:	2300      	movs	r3, #0
   1300e:	7812      	ldrb	r2, [r2, #0]
   13010:	f7ff ff78 	bl	12f04 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13014:	f110 0f16 	cmn.w	r0, #22
   13018:	d004      	beq.n	13024 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
  MPU->RNR = rnr;
   1301a:	4b0c      	ldr	r3, [pc, #48]	; (1304c <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
   1301c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1301e:	2807      	cmp	r0, #7
   13020:	dd0b      	ble.n	1303a <arm_core_mpu_configure_dynamic_mpu_regions+0x32>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   13022:	bd08      	pop	{r3, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   13024:	490a      	ldr	r1, [pc, #40]	; (13050 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   13026:	480b      	ldr	r0, [pc, #44]	; (13054 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   13028:	f240 1235 	movw	r2, #309	; 0x135
   1302c:	f00f fff7 	bl	2301e <assert_print>
   13030:	4807      	ldr	r0, [pc, #28]	; (13050 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   13032:	f240 1135 	movw	r1, #309	; 0x135
   13036:	f00f ffeb 	bl	23010 <assert_post_action>
  MPU->RNR = rnr;
   1303a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   1303e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   13042:	3001      	adds	r0, #1
   13044:	e7eb      	b.n	1301e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   13046:	bf00      	nop
   13048:	20003c76 	.word	0x20003c76
   1304c:	e000ed00 	.word	0xe000ed00
   13050:	00026ed8 	.word	0x00026ed8
   13054:	00026718 	.word	0x00026718

00013058 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13058:	4920      	ldr	r1, [pc, #128]	; (130dc <z_arm_mpu_init+0x84>)
{
   1305a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   1305c:	680c      	ldr	r4, [r1, #0]
   1305e:	2c08      	cmp	r4, #8
   13060:	d90a      	bls.n	13078 <z_arm_mpu_init+0x20>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   13062:	491f      	ldr	r1, [pc, #124]	; (130e0 <z_arm_mpu_init+0x88>)
   13064:	481f      	ldr	r0, [pc, #124]	; (130e4 <z_arm_mpu_init+0x8c>)
   13066:	f240 124d 	movw	r2, #333	; 0x14d
   1306a:	f00f ffd8 	bl	2301e <assert_print>
   1306e:	f240 114d 	movw	r1, #333	; 0x14d

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   13072:	481b      	ldr	r0, [pc, #108]	; (130e0 <z_arm_mpu_init+0x88>)
   13074:	f00f ffcc 	bl	23010 <assert_post_action>
	arm_core_mpu_disable();
   13078:	f7ff ffa0 	bl	12fbc <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1307c:	6848      	ldr	r0, [r1, #4]
   1307e:	491a      	ldr	r1, [pc, #104]	; (130e8 <z_arm_mpu_init+0x90>)
   13080:	2200      	movs	r2, #0
   13082:	4294      	cmp	r4, r2
   13084:	f100 000c 	add.w	r0, r0, #12
   13088:	d112      	bne.n	130b0 <z_arm_mpu_init+0x58>
	static_regions_num = mpu_config.num_regions;
   1308a:	4b18      	ldr	r3, [pc, #96]	; (130ec <z_arm_mpu_init+0x94>)
   1308c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1308e:	f7ff ff89 	bl	12fa4 <arm_core_mpu_enable>
	__ASSERT(
   13092:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   13096:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1309a:	2b08      	cmp	r3, #8
   1309c:	d01b      	beq.n	130d6 <z_arm_mpu_init+0x7e>
   1309e:	4910      	ldr	r1, [pc, #64]	; (130e0 <z_arm_mpu_init+0x88>)
   130a0:	4810      	ldr	r0, [pc, #64]	; (130e4 <z_arm_mpu_init+0x8c>)
   130a2:	f240 12ad 	movw	r2, #429	; 0x1ad
   130a6:	f00f ffba 	bl	2301e <assert_print>
   130aa:	f240 11ad 	movw	r1, #429	; 0x1ad
   130ae:	e7e0      	b.n	13072 <z_arm_mpu_init+0x1a>
   130b0:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   130b4:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   130b8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   130bc:	4313      	orrs	r3, r2
   130be:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   130c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   130c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   130ca:	f043 0301 	orr.w	r3, r3, #1
   130ce:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   130d2:	3201      	adds	r2, #1
   130d4:	e7d5      	b.n	13082 <z_arm_mpu_init+0x2a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   130d6:	2000      	movs	r0, #0
   130d8:	bd10      	pop	{r4, pc}
   130da:	bf00      	nop
   130dc:	00025bec 	.word	0x00025bec
   130e0:	00026ed8 	.word	0x00026ed8
   130e4:	00026718 	.word	0x00026718
   130e8:	e000ed00 	.word	0xe000ed00
   130ec:	20003c76 	.word	0x20003c76

000130f0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   130f0:	4b01      	ldr	r3, [pc, #4]	; (130f8 <__stdout_hook_install+0x8>)
   130f2:	6018      	str	r0, [r3, #0]
}
   130f4:	4770      	bx	lr
   130f6:	bf00      	nop
   130f8:	2000060c 	.word	0x2000060c

000130fc <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   130fc:	b510      	push	{r4, lr}
	__asm__ volatile(
   130fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   13102:	f3ef 8011 	mrs	r0, BASEPRI
   13106:	f383 8812 	msr	BASEPRI_MAX, r3
   1310a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1310e:	4a11      	ldr	r2, [pc, #68]	; (13154 <nordicsemi_nrf52_init+0x58>)
   13110:	2301      	movs	r3, #1
   13112:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   13116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1311a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1311e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   13122:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   13126:	2c08      	cmp	r4, #8
   13128:	d108      	bne.n	1313c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1312a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   1312e:	2905      	cmp	r1, #5
   13130:	d804      	bhi.n	1313c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   13132:	4c09      	ldr	r4, [pc, #36]	; (13158 <nordicsemi_nrf52_init+0x5c>)
   13134:	5c61      	ldrb	r1, [r4, r1]
   13136:	b109      	cbz	r1, 1313c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   13138:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1313c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13140:	2201      	movs	r2, #1
   13142:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   13146:	f380 8811 	msr	BASEPRI, r0
   1314a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1314e:	2000      	movs	r0, #0
   13150:	bd10      	pop	{r4, pc}
   13152:	bf00      	nop
   13154:	4001e000 	.word	0x4001e000
   13158:	00026f1e 	.word	0x00026f1e

0001315c <sys_arch_reboot>:
    *p_gpregret = val;
   1315c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13160:	b2c0      	uxtb	r0, r0
   13162:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13166:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1316a:	4905      	ldr	r1, [pc, #20]	; (13180 <sys_arch_reboot+0x24>)
   1316c:	4b05      	ldr	r3, [pc, #20]	; (13184 <sys_arch_reboot+0x28>)
   1316e:	68ca      	ldr	r2, [r1, #12]
   13170:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13174:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13176:	60cb      	str	r3, [r1, #12]
   13178:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1317c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1317e:	e7fd      	b.n	1317c <sys_arch_reboot+0x20>
   13180:	e000ed00 	.word	0xe000ed00
   13184:	05fa0004 	.word	0x05fa0004

00013188 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13188:	b120      	cbz	r0, 13194 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1318a:	4b03      	ldr	r3, [pc, #12]	; (13198 <arch_busy_wait+0x10>)
   1318c:	0180      	lsls	r0, r0, #6
   1318e:	f043 0301 	orr.w	r3, r3, #1
   13192:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13194:	4770      	bx	lr
   13196:	bf00      	nop
   13198:	00025ac0 	.word	0x00025ac0

0001319c <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   1319c:	4b0e      	ldr	r3, [pc, #56]	; (131d8 <bt_hex+0x3c>)
   1319e:	2940      	cmp	r1, #64	; 0x40
{
   131a0:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   131a2:	bf28      	it	cs
   131a4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   131a6:	4c0d      	ldr	r4, [pc, #52]	; (131dc <bt_hex+0x40>)
   131a8:	1846      	adds	r6, r0, r1
   131aa:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   131ac:	42b0      	cmp	r0, r6
   131ae:	f103 0302 	add.w	r3, r3, #2
   131b2:	d104      	bne.n	131be <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   131b4:	2300      	movs	r3, #0
   131b6:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   131ba:	4807      	ldr	r0, [pc, #28]	; (131d8 <bt_hex+0x3c>)
   131bc:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   131be:	7802      	ldrb	r2, [r0, #0]
   131c0:	0912      	lsrs	r2, r2, #4
   131c2:	5ca2      	ldrb	r2, [r4, r2]
   131c4:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   131c8:	f810 2b01 	ldrb.w	r2, [r0], #1
   131cc:	f002 020f 	and.w	r2, r2, #15
   131d0:	5ca2      	ldrb	r2, [r4, r2]
   131d2:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   131d6:	e7e9      	b.n	131ac <bt_hex+0x10>
   131d8:	20003c95 	.word	0x20003c95
   131dc:	00026f42 	.word	0x00026f42

000131e0 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   131e0:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   131e2:	7803      	ldrb	r3, [r0, #0]
   131e4:	b08b      	sub	sp, #44	; 0x2c
   131e6:	4604      	mov	r4, r0
   131e8:	ad07      	add	r5, sp, #28
   131ea:	2b03      	cmp	r3, #3
   131ec:	d821      	bhi.n	13232 <bt_addr_le_str+0x52>
   131ee:	e8df f003 	tbb	[pc, r3]
   131f2:	1a02      	.short	0x1a02
   131f4:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   131f6:	4912      	ldr	r1, [pc, #72]	; (13240 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   131f8:	4628      	mov	r0, r5
   131fa:	f010 f968 	bl	234ce <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   131fe:	9505      	str	r5, [sp, #20]
   13200:	7863      	ldrb	r3, [r4, #1]
   13202:	9304      	str	r3, [sp, #16]
   13204:	78a3      	ldrb	r3, [r4, #2]
   13206:	9303      	str	r3, [sp, #12]
   13208:	78e3      	ldrb	r3, [r4, #3]
   1320a:	9302      	str	r3, [sp, #8]
   1320c:	7923      	ldrb	r3, [r4, #4]
   1320e:	9301      	str	r3, [sp, #4]
   13210:	7963      	ldrb	r3, [r4, #5]
   13212:	9300      	str	r3, [sp, #0]
   13214:	79a3      	ldrb	r3, [r4, #6]
   13216:	4a0b      	ldr	r2, [pc, #44]	; (13244 <bt_addr_le_str+0x64>)
   13218:	480b      	ldr	r0, [pc, #44]	; (13248 <bt_addr_le_str+0x68>)
   1321a:	211e      	movs	r1, #30
   1321c:	f00f fce9 	bl	22bf2 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   13220:	4809      	ldr	r0, [pc, #36]	; (13248 <bt_addr_le_str+0x68>)
   13222:	b00b      	add	sp, #44	; 0x2c
   13224:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   13226:	4909      	ldr	r1, [pc, #36]	; (1324c <bt_addr_le_str+0x6c>)
   13228:	e7e6      	b.n	131f8 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   1322a:	4909      	ldr	r1, [pc, #36]	; (13250 <bt_addr_le_str+0x70>)
   1322c:	e7e4      	b.n	131f8 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   1322e:	4909      	ldr	r1, [pc, #36]	; (13254 <bt_addr_le_str+0x74>)
   13230:	e7e2      	b.n	131f8 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   13232:	4a09      	ldr	r2, [pc, #36]	; (13258 <bt_addr_le_str+0x78>)
   13234:	210a      	movs	r1, #10
   13236:	4628      	mov	r0, r5
   13238:	f00f fcdb 	bl	22bf2 <snprintk>
		break;
   1323c:	e7df      	b.n	131fe <bt_addr_le_str+0x1e>
   1323e:	bf00      	nop
   13240:	000263ff 	.word	0x000263ff
   13244:	00026428 	.word	0x00026428
   13248:	20003c77 	.word	0x20003c77
   1324c:	00026406 	.word	0x00026406
   13250:	0002640d 	.word	0x0002640d
   13254:	00026417 	.word	0x00026417
   13258:	00026421 	.word	0x00026421

0001325c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   1325c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   1325e:	4d0a      	ldr	r5, [pc, #40]	; (13288 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13260:	4b0a      	ldr	r3, [pc, #40]	; (1328c <long_wq_init+0x30>)
{
   13262:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13264:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   13266:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   13268:	9302      	str	r3, [sp, #8]
   1326a:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   1326c:	f00a f996 	bl	1d59c <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   13270:	ab02      	add	r3, sp, #8
   13272:	9300      	str	r3, [sp, #0]
   13274:	4628      	mov	r0, r5
   13276:	4906      	ldr	r1, [pc, #24]	; (13290 <long_wq_init+0x34>)
   13278:	230a      	movs	r3, #10
   1327a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   1327e:	f00a f9a3 	bl	1d5c8 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   13282:	4620      	mov	r0, r4
   13284:	b005      	add	sp, #20
   13286:	bd30      	pop	{r4, r5, pc}
   13288:	20001900 	.word	0x20001900
   1328c:	00026f53 	.word	0x00026f53
   13290:	200058c0 	.word	0x200058c0

00013294 <bt_long_wq_schedule>:
{
   13294:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   13296:	4801      	ldr	r0, [pc, #4]	; (1329c <bt_long_wq_schedule+0x8>)
   13298:	f00a ba1c 	b.w	1d6d4 <k_work_schedule_for_queue>
   1329c:	20001900 	.word	0x20001900

000132a0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   132a0:	b430      	push	{r4, r5}
   132a2:	4603      	mov	r3, r0
   132a4:	4608      	mov	r0, r1
	switch (src->type) {
   132a6:	781a      	ldrb	r2, [r3, #0]
   132a8:	2a01      	cmp	r2, #1
   132aa:	d013      	beq.n	132d4 <uuid_to_uuid128+0x34>
   132ac:	2a02      	cmp	r2, #2
   132ae:	d026      	beq.n	132fe <uuid_to_uuid128+0x5e>
   132b0:	b972      	cbnz	r2, 132d0 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   132b2:	4a15      	ldr	r2, [pc, #84]	; (13308 <uuid_to_uuid128+0x68>)
   132b4:	f102 0410 	add.w	r4, r2, #16
   132b8:	f852 5b04 	ldr.w	r5, [r2], #4
   132bc:	f841 5b04 	str.w	r5, [r1], #4
   132c0:	42a2      	cmp	r2, r4
   132c2:	d1f9      	bne.n	132b8 <uuid_to_uuid128+0x18>
   132c4:	7812      	ldrb	r2, [r2, #0]
   132c6:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   132c8:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   132ca:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   132cc:	0a1b      	lsrs	r3, r3, #8
   132ce:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   132d0:	bc30      	pop	{r4, r5}
   132d2:	4770      	bx	lr
		*dst = uuid128_base;
   132d4:	4a0c      	ldr	r2, [pc, #48]	; (13308 <uuid_to_uuid128+0x68>)
   132d6:	f102 0410 	add.w	r4, r2, #16
   132da:	f852 5b04 	ldr.w	r5, [r2], #4
   132de:	f841 5b04 	str.w	r5, [r1], #4
   132e2:	42a2      	cmp	r2, r4
   132e4:	d1f9      	bne.n	132da <uuid_to_uuid128+0x3a>
   132e6:	7812      	ldrb	r2, [r2, #0]
   132e8:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   132ea:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   132ec:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   132ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   132f2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   132f4:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   132f6:	0a1b      	lsrs	r3, r3, #8
   132f8:	7382      	strb	r2, [r0, #14]
   132fa:	7403      	strb	r3, [r0, #16]
}
   132fc:	e7e8      	b.n	132d0 <uuid_to_uuid128+0x30>
}
   132fe:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   13300:	2211      	movs	r2, #17
   13302:	4619      	mov	r1, r3
   13304:	f010 b930 	b.w	23568 <memcpy>
   13308:	00026f5c 	.word	0x00026f5c

0001330c <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1330c:	2805      	cmp	r0, #5
{
   1330e:	b538      	push	{r3, r4, r5, lr}
   13310:	4605      	mov	r5, r0
   13312:	d803      	bhi.n	1331c <bt_buf_get_rx+0x10>
   13314:	212a      	movs	r1, #42	; 0x2a
   13316:	40c1      	lsrs	r1, r0
   13318:	07c9      	lsls	r1, r1, #31
   1331a:	d408      	bmi.n	1332e <bt_buf_get_rx+0x22>
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1331c:	490a      	ldr	r1, [pc, #40]	; (13348 <bt_buf_get_rx+0x3c>)
   1331e:	480b      	ldr	r0, [pc, #44]	; (1334c <bt_buf_get_rx+0x40>)
   13320:	223f      	movs	r2, #63	; 0x3f
   13322:	f00f fe7c 	bl	2301e <assert_print>
   13326:	4808      	ldr	r0, [pc, #32]	; (13348 <bt_buf_get_rx+0x3c>)
   13328:	213f      	movs	r1, #63	; 0x3f
   1332a:	f00f fe71 	bl	23010 <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   1332e:	4808      	ldr	r0, [pc, #32]	; (13350 <bt_buf_get_rx+0x44>)
   13330:	f011 fb0d 	bl	2494e <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   13334:	4604      	mov	r4, r0
   13336:	b120      	cbz	r0, 13342 <bt_buf_get_rx+0x36>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   13338:	2100      	movs	r1, #0
   1333a:	3008      	adds	r0, #8
   1333c:	f005 f8ce 	bl	184dc <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13340:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13342:	4620      	mov	r0, r4
   13344:	bd38      	pop	{r3, r4, r5, pc}
   13346:	bf00      	nop
   13348:	00026f6d 	.word	0x00026f6d
   1334c:	00026718 	.word	0x00026718
   13350:	20000bb8 	.word	0x20000bb8

00013354 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13354:	b510      	push	{r4, lr}
   13356:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   13358:	490a      	ldr	r1, [pc, #40]	; (13384 <bt_buf_get_cmd_complete+0x30>)
{
   1335a:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   1335c:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
   13360:	b920      	cbnz	r0, 1336c <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   13362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13366:	2001      	movs	r0, #1
   13368:	f7ff bfd0 	b.w	1330c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   1336c:	f005 fa00 	bl	18770 <net_buf_ref>
   13370:	2301      	movs	r3, #1
		buf->len = 0U;
   13372:	2100      	movs	r1, #0
   13374:	7503      	strb	r3, [r0, #20]
   13376:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   13378:	4604      	mov	r4, r0
   1337a:	3008      	adds	r0, #8
   1337c:	f005 f8ae 	bl	184dc <net_buf_simple_reserve>
}
   13380:	4620      	mov	r0, r4
   13382:	bd10      	pop	{r4, pc}
   13384:	20000378 	.word	0x20000378

00013388 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   13388:	b570      	push	{r4, r5, r6, lr}
   1338a:	4604      	mov	r4, r0
	switch (evt) {
   1338c:	2c0f      	cmp	r4, #15
{
   1338e:	460d      	mov	r5, r1
   13390:	4610      	mov	r0, r2
   13392:	4619      	mov	r1, r3
	switch (evt) {
   13394:	d805      	bhi.n	133a2 <bt_buf_get_evt+0x1a>
   13396:	2c0d      	cmp	r4, #13
   13398:	d90d      	bls.n	133b6 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1339a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1339e:	f7ff bfd9 	b.w	13354 <bt_buf_get_cmd_complete>
	switch (evt) {
   133a2:	2c13      	cmp	r4, #19
   133a4:	d107      	bne.n	133b6 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   133a6:	480c      	ldr	r0, [pc, #48]	; (133d8 <bt_buf_get_evt+0x50>)
   133a8:	f011 fad1 	bl	2494e <net_buf_alloc_fixed>
			if (buf) {
   133ac:	4604      	mov	r4, r0
   133ae:	b938      	cbnz	r0, 133c0 <bt_buf_get_evt+0x38>
{
   133b0:	2400      	movs	r4, #0
}
   133b2:	4620      	mov	r0, r4
   133b4:	bd70      	pop	{r4, r5, r6, pc}
   133b6:	4602      	mov	r2, r0
   133b8:	460b      	mov	r3, r1
		if (discardable) {
   133ba:	b145      	cbz	r5, 133ce <bt_buf_get_evt+0x46>
   133bc:	4807      	ldr	r0, [pc, #28]	; (133dc <bt_buf_get_evt+0x54>)
   133be:	e7f3      	b.n	133a8 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   133c0:	2100      	movs	r1, #0
   133c2:	3008      	adds	r0, #8
   133c4:	f005 f88a 	bl	184dc <net_buf_simple_reserve>
   133c8:	2301      	movs	r3, #1
   133ca:	7523      	strb	r3, [r4, #20]
}
   133cc:	e7f1      	b.n	133b2 <bt_buf_get_evt+0x2a>
}
   133ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   133d2:	2001      	movs	r0, #1
   133d4:	f7ff bf9a 	b.w	1330c <bt_buf_get_rx>
   133d8:	20000bec 	.word	0x20000bec
   133dc:	20000b1c 	.word	0x20000b1c

000133e0 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   133e0:	6883      	ldr	r3, [r0, #8]
   133e2:	4802      	ldr	r0, [pc, #8]	; (133ec <hci_data_buf_overflow+0xc>)
   133e4:	781a      	ldrb	r2, [r3, #0]
   133e6:	2157      	movs	r1, #87	; 0x57
   133e8:	f00f be27 	b.w	2303a <z_log_minimal_printk>
   133ec:	00026fa3 	.word	0x00026fa3

000133f0 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   133f0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   133f2:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   133f4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   133f8:	781b      	ldrb	r3, [r3, #0]
   133fa:	b98b      	cbnz	r3, 13420 <hci_disconn_complete_prio+0x30>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   133fc:	4620      	mov	r0, r4
   133fe:	f002 f9d3 	bl	157a8 <bt_conn_lookup_handle>
	if (!conn) {
   13402:	4605      	mov	r5, r0
   13404:	b968      	cbnz	r0, 13422 <hci_disconn_complete_prio+0x32>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13406:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   1340a:	4a0a      	ldr	r2, [pc, #40]	; (13434 <hci_disconn_complete_prio+0x44>)
	if (!conn) {
   1340c:	2304      	movs	r3, #4
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   1340e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
		if (!disconnected_handles[i]) {
   13412:	f832 1b02 	ldrh.w	r1, [r2], #2
   13416:	b909      	cbnz	r1, 1341c <hci_disconn_complete_prio+0x2c>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13418:	f822 0c02 	strh.w	r0, [r2, #-2]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1341c:	3b01      	subs	r3, #1
   1341e:	d1f8      	bne.n	13412 <hci_disconn_complete_prio+0x22>
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   13420:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13422:	2101      	movs	r1, #1
   13424:	f002 f9c8 	bl	157b8 <bt_conn_set_state>
	bt_conn_unref(conn);
   13428:	4628      	mov	r0, r5
}
   1342a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1342e:	f002 b98b 	b.w	15748 <bt_conn_unref>
   13432:	bf00      	nop
   13434:	20003b14 	.word	0x20003b14

00013438 <hci_disconn_complete>:

static void hci_disconn_complete(struct net_buf *buf)
{
   13438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1343a:	6885      	ldr	r5, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   1343c:	782e      	ldrb	r6, [r5, #0]
   1343e:	b9be      	cbnz	r6, 13470 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13440:	f8b5 7001 	ldrh.w	r7, [r5, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   13444:	4638      	mov	r0, r7
   13446:	f002 f9af 	bl	157a8 <bt_conn_lookup_handle>
	if (!conn) {
   1344a:	4604      	mov	r4, r0
   1344c:	b930      	cbnz	r0, 1345c <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
   1344e:	463a      	mov	r2, r7
   13450:	4808      	ldr	r0, [pc, #32]	; (13474 <hci_disconn_complete+0x3c>)
		bt_le_scan_update(false);
	}
#endif /* defined(CONFIG_BT_CENTRAL) && !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

	bt_conn_unref(conn);
}
   13452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   13456:	2145      	movs	r1, #69	; 0x45
   13458:	f00f bdef 	b.w	2303a <z_log_minimal_printk>
	conn->err = evt->reason;
   1345c:	78eb      	ldrb	r3, [r5, #3]
   1345e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13460:	4631      	mov	r1, r6
   13462:	f002 f9a9 	bl	157b8 <bt_conn_set_state>
		bt_conn_unref(conn);
   13466:	4620      	mov	r0, r4
}
   13468:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1346c:	f002 b96c 	b.w	15748 <bt_conn_unref>
}
   13470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13472:	bf00      	nop
   13474:	00026fd0 	.word	0x00026fd0

00013478 <le_phy_update_complete>:
}
#endif /* CONFIG_BT_DATA_LEN_UPDATE */

#if defined(CONFIG_BT_PHY_UPDATE)
static void le_phy_update_complete(struct net_buf *buf)
{
   13478:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1347a:	6883      	ldr	r3, [r0, #8]
   1347c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
   13480:	4620      	mov	r0, r4
   13482:	f002 f991 	bl	157a8 <bt_conn_lookup_handle>
	if (!conn) {
   13486:	b930      	cbnz	r0, 13496 <le_phy_update_complete+0x1e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13488:	4622      	mov	r2, r4
   1348a:	4805      	ldr	r0, [pc, #20]	; (134a0 <le_phy_update_complete+0x28>)
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
	notify_le_phy_updated(conn);
#endif

	bt_conn_unref(conn);
}
   1348c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13490:	2145      	movs	r1, #69	; 0x45
   13492:	f00f bdd2 	b.w	2303a <z_log_minimal_printk>
}
   13496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1349a:	f002 b955 	b.w	15748 <bt_conn_unref>
   1349e:	bf00      	nop
   134a0:	00026ffb 	.word	0x00026ffb

000134a4 <le_data_len_change>:
{
   134a4:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   134a6:	6883      	ldr	r3, [r0, #8]
   134a8:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   134aa:	4620      	mov	r0, r4
   134ac:	f002 f97c 	bl	157a8 <bt_conn_lookup_handle>
	if (!conn) {
   134b0:	b930      	cbnz	r0, 134c0 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   134b2:	4622      	mov	r2, r4
   134b4:	4804      	ldr	r0, [pc, #16]	; (134c8 <le_data_len_change+0x24>)
}
   134b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   134ba:	2145      	movs	r1, #69	; 0x45
   134bc:	f00f bdbd 	b.w	2303a <z_log_minimal_printk>
}
   134c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   134c4:	f002 b940 	b.w	15748 <bt_conn_unref>
   134c8:	00026ffb 	.word	0x00026ffb

000134cc <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
   134cc:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   134ce:	2101      	movs	r1, #1
   134d0:	3008      	adds	r0, #8
   134d2:	f005 f9f7 	bl	188c4 <net_buf_simple_pull_mem>
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
}
   134d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   134da:	7802      	ldrb	r2, [r0, #0]
   134dc:	4801      	ldr	r0, [pc, #4]	; (134e4 <hci_hardware_error+0x18>)
   134de:	2145      	movs	r1, #69	; 0x45
   134e0:	f00f bdab 	b.w	2303a <z_log_minimal_printk>
   134e4:	00027024 	.word	0x00027024

000134e8 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   134e8:	4601      	mov	r1, r0
   134ea:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   134ec:	4807      	ldr	r0, [pc, #28]	; (1350c <rx_queue_put+0x24>)
   134ee:	f005 f815 	bl	1851c <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   134f2:	4907      	ldr	r1, [pc, #28]	; (13510 <rx_queue_put+0x28>)
   134f4:	4807      	ldr	r0, [pc, #28]	; (13514 <rx_queue_put+0x2c>)
   134f6:	f011 ff68 	bl	253ca <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   134fa:	1e02      	subs	r2, r0, #0
   134fc:	da05      	bge.n	1350a <rx_queue_put+0x22>
		BT_ERR("Could not submit rx_work: %d", err);
	}
}
   134fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Could not submit rx_work: %d", err);
   13502:	4805      	ldr	r0, [pc, #20]	; (13518 <rx_queue_put+0x30>)
   13504:	2145      	movs	r1, #69	; 0x45
   13506:	f00f bd98 	b.w	2303a <z_log_minimal_printk>
}
   1350a:	bd08      	pop	{r3, pc}
   1350c:	200004ac 	.word	0x200004ac
   13510:	20000688 	.word	0x20000688
   13514:	20001a20 	.word	0x20001a20
   13518:	0002704b 	.word	0x0002704b

0001351c <le_conn_update_complete>:
{
   1351c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1351e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   13520:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   13524:	4630      	mov	r0, r6
   13526:	f002 f93f 	bl	157a8 <bt_conn_lookup_handle>
	if (!conn) {
   1352a:	4604      	mov	r4, r0
   1352c:	b938      	cbnz	r0, 1353e <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1352e:	481a      	ldr	r0, [pc, #104]	; (13598 <le_conn_update_complete+0x7c>)
   13530:	4632      	mov	r2, r6
   13532:	2145      	movs	r1, #69	; 0x45
}
   13534:	b002      	add	sp, #8
   13536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1353a:	f00f bd7e 	b.w	2303a <z_log_minimal_printk>
	if (!evt->status) {
   1353e:	782b      	ldrb	r3, [r5, #0]
   13540:	b99b      	cbnz	r3, 1356a <le_conn_update_complete+0x4e>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   13542:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   13546:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1354a:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1354e:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13552:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   13556:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   1355a:	f002 fa59 	bl	15a10 <notify_le_param_updated>
	bt_conn_unref(conn);
   1355e:	4620      	mov	r0, r4
}
   13560:	b002      	add	sp, #8
   13562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   13566:	f002 b8ef 	b.w	15748 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1356a:	2b1a      	cmp	r3, #26
   1356c:	d1f7      	bne.n	1355e <le_conn_update_complete+0x42>
   1356e:	78c3      	ldrb	r3, [r0, #3]
   13570:	2b01      	cmp	r3, #1
   13572:	d1f4      	bne.n	1355e <le_conn_update_complete+0x42>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13574:	f44f 7100 	mov.w	r1, #512	; 0x200
   13578:	3004      	adds	r0, #4
   1357a:	f010 f88b 	bl	23694 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1357e:	0583      	lsls	r3, r0, #22
   13580:	d4ed      	bmi.n	1355e <le_conn_update_complete+0x42>
		param.interval_min = conn->le.interval_min;
   13582:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   13586:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   13588:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1358a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   1358e:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   13590:	4620      	mov	r0, r4
   13592:	f002 fdf9 	bl	16188 <bt_l2cap_update_conn_param>
   13596:	e7e2      	b.n	1355e <le_conn_update_complete+0x42>
   13598:	00026ffb 	.word	0x00026ffb

0001359c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1359c:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1359e:	4c08      	ldr	r4, [pc, #32]	; (135c0 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   135a0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   135a2:	2205      	movs	r2, #5
   135a4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   135a8:	f002 fb3a 	bl	15c20 <bt_conn_lookup_state_le>
		if (!conn) {
   135ac:	b938      	cbnz	r0, 135be <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   135ae:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   135b2:	4904      	ldr	r1, [pc, #16]	; (135c4 <find_pending_connect.part.0+0x28>)
}
   135b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   135b8:	2204      	movs	r2, #4
   135ba:	f002 bb31 	b.w	15c20 <bt_conn_lookup_state_le>
}
   135be:	bd10      	pop	{r4, pc}
   135c0:	20000378 	.word	0x20000378
   135c4:	00026f28 	.word	0x00026f28

000135c8 <handle_event>:
{
   135c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   135ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   135ce:	4605      	mov	r5, r0
   135d0:	4614      	mov	r4, r2
   135d2:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   135d4:	429c      	cmp	r4, r3
   135d6:	d10d      	bne.n	135f4 <handle_event+0x2c>
		BT_WARN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   135d8:	8984      	ldrh	r4, [r0, #12]
   135da:	6880      	ldr	r0, [r0, #8]
   135dc:	4621      	mov	r1, r4
   135de:	f7ff fddd 	bl	1319c <bt_hex>
   135e2:	4623      	mov	r3, r4
   135e4:	9000      	str	r0, [sp, #0]
   135e6:	462a      	mov	r2, r5
   135e8:	480e      	ldr	r0, [pc, #56]	; (13624 <handle_event+0x5c>)
   135ea:	2157      	movs	r1, #87	; 0x57
   135ec:	f00f fd25 	bl	2303a <z_log_minimal_printk>
}
   135f0:	b003      	add	sp, #12
   135f2:	bd30      	pop	{r4, r5, pc}
		if (handler->event != event) {
   135f4:	4622      	mov	r2, r4
   135f6:	f812 1b08 	ldrb.w	r1, [r2], #8
   135fa:	42a9      	cmp	r1, r5
   135fc:	d110      	bne.n	13620 <handle_event+0x58>
		if (buf->len < handler->min_len) {
   135fe:	8982      	ldrh	r2, [r0, #12]
   13600:	7863      	ldrb	r3, [r4, #1]
   13602:	4293      	cmp	r3, r2
   13604:	d907      	bls.n	13616 <handle_event+0x4e>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   13606:	4808      	ldr	r0, [pc, #32]	; (13628 <handle_event+0x60>)
   13608:	462b      	mov	r3, r5
   1360a:	2145      	movs	r1, #69	; 0x45
}
   1360c:	b003      	add	sp, #12
   1360e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   13612:	f00f bd12 	b.w	2303a <z_log_minimal_printk>
		handler->handler(buf);
   13616:	6863      	ldr	r3, [r4, #4]
}
   13618:	b003      	add	sp, #12
   1361a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   1361e:	4718      	bx	r3
   13620:	4614      	mov	r4, r2
   13622:	e7d7      	b.n	135d4 <handle_event+0xc>
   13624:	00027094 	.word	0x00027094
   13628:	0002706d 	.word	0x0002706d

0001362c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   1362c:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1362e:	4844      	ldr	r0, [pc, #272]	; (13740 <rx_work_handler+0x114>)
   13630:	f004 ffcc 	bl	185cc <net_buf_slist_get>
	if (!buf) {
   13634:	4604      	mov	r4, r0
   13636:	2800      	cmp	r0, #0
   13638:	f000 8081 	beq.w	1373e <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1363c:	7d02      	ldrb	r2, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   1363e:	2a01      	cmp	r2, #1
   13640:	d04d      	beq.n	136de <rx_work_handler+0xb2>
   13642:	2a03      	cmp	r2, #3
   13644:	d178      	bne.n	13738 <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13646:	8983      	ldrh	r3, [r0, #12]
   13648:	2b03      	cmp	r3, #3
   1364a:	d80b      	bhi.n	13664 <rx_work_handler+0x38>
   1364c:	493d      	ldr	r1, [pc, #244]	; (13744 <rx_work_handler+0x118>)
   1364e:	483e      	ldr	r0, [pc, #248]	; (13748 <rx_work_handler+0x11c>)
   13650:	f240 12ed 	movw	r2, #493	; 0x1ed
   13654:	f00f fce3 	bl	2301e <assert_print>
   13658:	4040      	eors	r0, r0
   1365a:	f380 8811 	msr	BASEPRI, r0
   1365e:	f04f 0003 	mov.w	r0, #3
   13662:	df02      	svc	2
   13664:	2104      	movs	r1, #4
   13666:	f104 0008 	add.w	r0, r4, #8
   1366a:	f005 f92b 	bl	188c4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1366e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   13670:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13672:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13674:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   13676:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   13678:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1367c:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   1367e:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   13680:	d007      	beq.n	13692 <rx_work_handler+0x66>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   13682:	4832      	ldr	r0, [pc, #200]	; (1374c <rx_work_handler+0x120>)
   13684:	2145      	movs	r1, #69	; 0x45
   13686:	f00f fcd8 	bl	2303a <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   1368a:	4620      	mov	r0, r4
   1368c:	f005 f82e 	bl	186ec <net_buf_unref>
		break;
   13690:	e014      	b.n	136bc <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   13692:	f002 f889 	bl	157a8 <bt_conn_lookup_handle>
	if (!conn) {
   13696:	4605      	mov	r5, r0
   13698:	b928      	cbnz	r0, 136a6 <rx_work_handler+0x7a>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1369a:	8ae2      	ldrh	r2, [r4, #22]
   1369c:	482c      	ldr	r0, [pc, #176]	; (13750 <rx_work_handler+0x124>)
   1369e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   136a0:	f00f fccb 	bl	2303a <z_log_minimal_printk>
   136a4:	e7f1      	b.n	1368a <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
   136a6:	f002 f961 	bl	1596c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   136aa:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   136ac:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   136ae:	4621      	mov	r1, r4
   136b0:	4628      	mov	r0, r5
   136b2:	f001 ff11 	bl	154d8 <bt_conn_recv>
	bt_conn_unref(conn);
   136b6:	4628      	mov	r0, r5
   136b8:	f002 f846 	bl	15748 <bt_conn_unref>
	return list->head;
   136bc:	4b25      	ldr	r3, [pc, #148]	; (13754 <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   136be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   136c2:	2b00      	cmp	r3, #0
   136c4:	d03b      	beq.n	1373e <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   136c6:	4924      	ldr	r1, [pc, #144]	; (13758 <rx_work_handler+0x12c>)
   136c8:	4824      	ldr	r0, [pc, #144]	; (1375c <rx_work_handler+0x130>)
   136ca:	f011 fe7e 	bl	253ca <k_work_submit_to_queue>
#endif
		if (err < 0) {
   136ce:	1e02      	subs	r2, r0, #0
   136d0:	da35      	bge.n	1373e <rx_work_handler+0x112>
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   136d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Could not submit rx_work: %d", err);
   136d6:	4822      	ldr	r0, [pc, #136]	; (13760 <rx_work_handler+0x134>)
   136d8:	2145      	movs	r1, #69	; 0x45
   136da:	f00f bcae 	b.w	2303a <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   136de:	8983      	ldrh	r3, [r0, #12]
   136e0:	2b01      	cmp	r3, #1
   136e2:	d80b      	bhi.n	136fc <rx_work_handler+0xd0>
   136e4:	4917      	ldr	r1, [pc, #92]	; (13744 <rx_work_handler+0x118>)
   136e6:	4818      	ldr	r0, [pc, #96]	; (13748 <rx_work_handler+0x11c>)
   136e8:	f44f 6216 	mov.w	r2, #2400	; 0x960
   136ec:	f00f fc97 	bl	2301e <assert_print>
   136f0:	4040      	eors	r0, r0
   136f2:	f380 8811 	msr	BASEPRI, r0
   136f6:	f04f 0003 	mov.w	r0, #3
   136fa:	df02      	svc	2
   136fc:	2102      	movs	r1, #2
   136fe:	f104 0008 	add.w	r0, r4, #8
   13702:	f005 f8df 	bl	188c4 <net_buf_simple_pull_mem>
   13706:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13708:	7800      	ldrb	r0, [r0, #0]
   1370a:	f00f ffad 	bl	23668 <bt_hci_evt_get_flags>
   1370e:	0783      	lsls	r3, r0, #30
   13710:	d40b      	bmi.n	1372a <rx_work_handler+0xfe>
   13712:	490c      	ldr	r1, [pc, #48]	; (13744 <rx_work_handler+0x118>)
   13714:	480c      	ldr	r0, [pc, #48]	; (13748 <rx_work_handler+0x11c>)
   13716:	f640 1264 	movw	r2, #2404	; 0x964
   1371a:	f00f fc80 	bl	2301e <assert_print>
   1371e:	4040      	eors	r0, r0
   13720:	f380 8811 	msr	BASEPRI, r0
   13724:	f04f 0003 	mov.w	r0, #3
   13728:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1372a:	4a0e      	ldr	r2, [pc, #56]	; (13764 <rx_work_handler+0x138>)
   1372c:	7828      	ldrb	r0, [r5, #0]
   1372e:	2304      	movs	r3, #4
   13730:	4621      	mov	r1, r4
   13732:	f7ff ff49 	bl	135c8 <handle_event>
	net_buf_unref(buf);
   13736:	e7a8      	b.n	1368a <rx_work_handler+0x5e>
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   13738:	480b      	ldr	r0, [pc, #44]	; (13768 <rx_work_handler+0x13c>)
   1373a:	2145      	movs	r1, #69	; 0x45
   1373c:	e7b0      	b.n	136a0 <rx_work_handler+0x74>
}
   1373e:	bd70      	pop	{r4, r5, r6, pc}
   13740:	200004ac 	.word	0x200004ac
   13744:	000270bb 	.word	0x000270bb
   13748:	00026718 	.word	0x00026718
   1374c:	000270ef 	.word	0x000270ef
   13750:	00027118 	.word	0x00027118
   13754:	20000378 	.word	0x20000378
   13758:	20000688 	.word	0x20000688
   1375c:	20001a20 	.word	0x20001a20
   13760:	0002704b 	.word	0x0002704b
   13764:	00025c64 	.word	0x00025c64
   13768:	0002713f 	.word	0x0002713f

0001376c <hci_le_meta_event>:
{
   1376c:	b510      	push	{r4, lr}
   1376e:	2101      	movs	r1, #1
   13770:	4604      	mov	r4, r0
   13772:	3008      	adds	r0, #8
   13774:	f005 f8a6 	bl	188c4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13778:	4621      	mov	r1, r4
   1377a:	4a03      	ldr	r2, [pc, #12]	; (13788 <hci_le_meta_event+0x1c>)
   1377c:	7800      	ldrb	r0, [r0, #0]
}
   1377e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13782:	2307      	movs	r3, #7
   13784:	f7ff bf20 	b.w	135c8 <handle_event>
   13788:	00025c84 	.word	0x00025c84

0001378c <le_remote_feat_complete>:
{
   1378c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1378e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13790:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   13794:	4630      	mov	r0, r6
   13796:	f002 f807 	bl	157a8 <bt_conn_lookup_handle>
	if (!conn) {
   1379a:	4604      	mov	r4, r0
   1379c:	b930      	cbnz	r0, 137ac <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1379e:	4632      	mov	r2, r6
   137a0:	480b      	ldr	r0, [pc, #44]	; (137d0 <le_remote_feat_complete+0x44>)
}
   137a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   137a6:	2145      	movs	r1, #69	; 0x45
   137a8:	f00f bc47 	b.w	2303a <z_log_minimal_printk>
	if (!evt->status) {
   137ac:	782b      	ldrb	r3, [r5, #0]
   137ae:	b923      	cbnz	r3, 137ba <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
   137b0:	2208      	movs	r2, #8
   137b2:	1ce9      	adds	r1, r5, #3
   137b4:	30b4      	adds	r0, #180	; 0xb4
   137b6:	f00f fed7 	bl	23568 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   137ba:	1d20      	adds	r0, r4, #4
   137bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
   137c0:	f00f ff68 	bl	23694 <atomic_or>
	bt_conn_unref(conn);
   137c4:	4620      	mov	r0, r4
}
   137c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   137ca:	f001 bfbd 	b.w	15748 <bt_conn_unref>
   137ce:	bf00      	nop
   137d0:	00026ffb 	.word	0x00026ffb

000137d4 <hci_cmd_done>:
{
   137d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   137d8:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   137da:	7990      	ldrb	r0, [r2, #6]
   137dc:	4d39      	ldr	r5, [pc, #228]	; (138c4 <hci_cmd_done+0xf0>)
{
   137de:	460f      	mov	r7, r1
   137e0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   137e2:	f004 fd47 	bl	18274 <net_buf_pool_get>
   137e6:	4285      	cmp	r5, r0
   137e8:	d00e      	beq.n	13808 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   137ea:	79a4      	ldrb	r4, [r4, #6]
   137ec:	4620      	mov	r0, r4
   137ee:	f004 fd41 	bl	18274 <net_buf_pool_get>
   137f2:	4623      	mov	r3, r4
   137f4:	e9cd 0500 	strd	r0, r5, [sp]
   137f8:	4632      	mov	r2, r6
   137fa:	4833      	ldr	r0, [pc, #204]	; (138c8 <hci_cmd_done+0xf4>)
   137fc:	2157      	movs	r1, #87	; 0x57
   137fe:	f00f fc1c 	bl	2303a <z_log_minimal_printk>
}
   13802:	b002      	add	sp, #8
   13804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   13808:	4620      	mov	r0, r4
   1380a:	f004 fd3b 	bl	18284 <net_buf_id>
   1380e:	4d2f      	ldr	r5, [pc, #188]	; (138cc <hci_cmd_done+0xf8>)
   13810:	f04f 080c 	mov.w	r8, #12
   13814:	fb08 5000 	mla	r0, r8, r0, r5
   13818:	8843      	ldrh	r3, [r0, #2]
   1381a:	42b3      	cmp	r3, r6
   1381c:	d00d      	beq.n	1383a <hci_cmd_done+0x66>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1381e:	4620      	mov	r0, r4
   13820:	f004 fd30 	bl	18284 <net_buf_id>
   13824:	fb08 5000 	mla	r0, r8, r0, r5
   13828:	4632      	mov	r2, r6
   1382a:	8843      	ldrh	r3, [r0, #2]
   1382c:	4828      	ldr	r0, [pc, #160]	; (138d0 <hci_cmd_done+0xfc>)
   1382e:	2157      	movs	r1, #87	; 0x57
}
   13830:	b002      	add	sp, #8
   13832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   13836:	f00f bc00 	b.w	2303a <z_log_minimal_printk>
	if (bt_dev.sent_cmd) {
   1383a:	4e26      	ldr	r6, [pc, #152]	; (138d4 <hci_cmd_done+0x100>)
   1383c:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   13840:	b120      	cbz	r0, 1384c <hci_cmd_done+0x78>
		net_buf_unref(bt_dev.sent_cmd);
   13842:	f004 ff53 	bl	186ec <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13846:	2300      	movs	r3, #0
   13848:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   1384c:	4620      	mov	r0, r4
   1384e:	f004 fd19 	bl	18284 <net_buf_id>
   13852:	260c      	movs	r6, #12
   13854:	fb06 5000 	mla	r0, r6, r0, r5
   13858:	6843      	ldr	r3, [r0, #4]
   1385a:	b19b      	cbz	r3, 13884 <hci_cmd_done+0xb0>
   1385c:	b997      	cbnz	r7, 13884 <hci_cmd_done+0xb0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1385e:	4620      	mov	r0, r4
   13860:	f004 fd10 	bl	18284 <net_buf_id>
   13864:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13868:	2101      	movs	r1, #1
   1386a:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1386c:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   13870:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   13872:	f003 061f 	and.w	r6, r3, #31
   13876:	40b1      	lsls	r1, r6
	if (val) {
   13878:	095b      	lsrs	r3, r3, #5
   1387a:	b1e2      	cbz	r2, 138b6 <hci_cmd_done+0xe2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1387c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13880:	f00f ff08 	bl	23694 <atomic_or>
	if (cmd(buf)->sync) {
   13884:	4620      	mov	r0, r4
   13886:	f004 fcfd 	bl	18284 <net_buf_id>
   1388a:	260c      	movs	r6, #12
   1388c:	fb06 5000 	mla	r0, r6, r0, r5
   13890:	6883      	ldr	r3, [r0, #8]
   13892:	2b00      	cmp	r3, #0
   13894:	d0b5      	beq.n	13802 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
   13896:	4620      	mov	r0, r4
   13898:	f004 fcf4 	bl	18284 <net_buf_id>
   1389c:	4370      	muls	r0, r6
   1389e:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   138a0:	4620      	mov	r0, r4
   138a2:	f004 fcef 	bl	18284 <net_buf_id>
   138a6:	fb06 5500 	mla	r5, r6, r0, r5
   138aa:	68a8      	ldr	r0, [r5, #8]
}
   138ac:	b002      	add	sp, #8
   138ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   138b2:	f009 bb79 	b.w	1cfa8 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   138b6:	43c9      	mvns	r1, r1
   138b8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   138bc:	f00f fef9 	bl	236b2 <atomic_and.isra.0>
   138c0:	e7e0      	b.n	13884 <hci_cmd_done+0xb0>
   138c2:	bf00      	nop
   138c4:	20000b84 	.word	0x20000b84
   138c8:	00027158 	.word	0x00027158
   138cc:	2000270c 	.word	0x2000270c
   138d0:	00027192 	.word	0x00027192
   138d4:	20000378 	.word	0x20000378

000138d8 <hci_cmd_status>:
{
   138d8:	b538      	push	{r3, r4, r5, lr}
   138da:	2104      	movs	r1, #4
   138dc:	4604      	mov	r4, r0
   138de:	3008      	adds	r0, #8
   138e0:	f004 fff0 	bl	188c4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   138e4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   138e6:	7801      	ldrb	r1, [r0, #0]
   138e8:	8840      	ldrh	r0, [r0, #2]
   138ea:	4622      	mov	r2, r4
   138ec:	f7ff ff72 	bl	137d4 <hci_cmd_done>
	if (ncmd) {
   138f0:	b125      	cbz	r5, 138fc <hci_cmd_status+0x24>
   138f2:	4803      	ldr	r0, [pc, #12]	; (13900 <hci_cmd_status+0x28>)
}
   138f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   138f8:	f009 bb56 	b.w	1cfa8 <z_impl_k_sem_give>
   138fc:	bd38      	pop	{r3, r4, r5, pc}
   138fe:	bf00      	nop
   13900:	20000490 	.word	0x20000490

00013904 <hci_cmd_complete>:
{
   13904:	b538      	push	{r3, r4, r5, lr}
   13906:	2103      	movs	r1, #3
   13908:	4604      	mov	r4, r0
   1390a:	3008      	adds	r0, #8
   1390c:	f004 ffda 	bl	188c4 <net_buf_simple_pull_mem>
	status = buf->data[0];
   13910:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   13912:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   13914:	7819      	ldrb	r1, [r3, #0]
   13916:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1391a:	4622      	mov	r2, r4
   1391c:	f7ff ff5a 	bl	137d4 <hci_cmd_done>
	if (ncmd) {
   13920:	b125      	cbz	r5, 1392c <hci_cmd_complete+0x28>
   13922:	4803      	ldr	r0, [pc, #12]	; (13930 <hci_cmd_complete+0x2c>)
}
   13924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13928:	f009 bb3e 	b.w	1cfa8 <z_impl_k_sem_give>
   1392c:	bd38      	pop	{r3, r4, r5, pc}
   1392e:	bf00      	nop
   13930:	20000490 	.word	0x20000490

00013934 <hci_num_completed_packets>:
{
   13934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   13938:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1393a:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
   1393c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 13a10 <hci_num_completed_packets+0xdc>
			tx->pending_no_cb = 0U;
   13940:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   13942:	783b      	ldrb	r3, [r7, #0]
   13944:	429d      	cmp	r5, r3
   13946:	db01      	blt.n	1394c <hci_num_completed_packets+0x18>
}
   13948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1394c:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   13950:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   13954:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   13958:	4650      	mov	r0, sl
   1395a:	f001 ff25 	bl	157a8 <bt_conn_lookup_handle>
		if (!conn) {
   1395e:	4604      	mov	r4, r0
   13960:	b1d0      	cbz	r0, 13998 <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
   13962:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   13966:	b346      	cbz	r6, 139ba <hci_num_completed_packets+0x86>
	__asm__ volatile(
   13968:	f04f 0340 	mov.w	r3, #64	; 0x40
   1396c:	f3ef 8211 	mrs	r2, BASEPRI
   13970:	f383 8812 	msr	BASEPRI_MAX, r3
   13974:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   13978:	69e3      	ldr	r3, [r4, #28]
   1397a:	b1a3      	cbz	r3, 139a6 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
   1397c:	3b01      	subs	r3, #1
   1397e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   13980:	f382 8811 	msr	BASEPRI, r2
   13984:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   13988:	4620      	mov	r0, r4
   1398a:	f001 fd2f 	bl	153ec <bt_conn_get_pkts>
   1398e:	3e01      	subs	r6, #1
   13990:	f009 fb0a 	bl	1cfa8 <z_impl_k_sem_give>
   13994:	b2b6      	uxth	r6, r6
   13996:	e7e6      	b.n	13966 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
   13998:	481e      	ldr	r0, [pc, #120]	; (13a14 <hci_num_completed_packets+0xe0>)
   1399a:	4652      	mov	r2, sl
   1399c:	2145      	movs	r1, #69	; 0x45
   1399e:	f00f fb4c 	bl	2303a <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
   139a2:	3501      	adds	r5, #1
   139a4:	e7cd      	b.n	13942 <hci_num_completed_packets+0xe>
   139a6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   139a8:	b95b      	cbnz	r3, 139c2 <hci_num_completed_packets+0x8e>
   139aa:	f382 8811 	msr	BASEPRI, r2
   139ae:	f3bf 8f6f 	isb	sy
				BT_ERR("packets count mismatch");
   139b2:	2145      	movs	r1, #69	; 0x45
   139b4:	4648      	mov	r0, r9
   139b6:	f00f fb40 	bl	2303a <z_log_minimal_printk>
		bt_conn_unref(conn);
   139ba:	4620      	mov	r0, r4
   139bc:	f001 fec4 	bl	15748 <bt_conn_unref>
   139c0:	e7ef      	b.n	139a2 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   139c2:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   139c4:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   139c6:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   139c8:	428b      	cmp	r3, r1
	list->tail = node;
   139ca:	bf08      	it	eq
   139cc:	61a0      	streq	r0, [r4, #24]
   139ce:	f382 8811 	msr	BASEPRI, r2
   139d2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   139d6:	f04f 0240 	mov.w	r2, #64	; 0x40
   139da:	f3ef 8111 	mrs	r1, BASEPRI
   139de:	f382 8812 	msr	BASEPRI_MAX, r2
   139e2:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   139e6:	68da      	ldr	r2, [r3, #12]
   139e8:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   139ea:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   139ee:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   139f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   139f4:	b94a      	cbnz	r2, 13a0a <hci_num_completed_packets+0xd6>
	list->head = node;
   139f6:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   139fa:	f381 8811 	msr	BASEPRI, r1
   139fe:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   13a02:	4650      	mov	r0, sl
   13a04:	f009 fdc4 	bl	1d590 <k_work_submit>
   13a08:	e7be      	b.n	13988 <hci_num_completed_packets+0x54>
	parent->next = child;
   13a0a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13a0c:	6263      	str	r3, [r4, #36]	; 0x24
}
   13a0e:	e7f4      	b.n	139fa <hci_num_completed_packets+0xc6>
   13a10:	000271eb 	.word	0x000271eb
   13a14:	000271ca 	.word	0x000271ca

00013a18 <bt_hci_cmd_state_set_init>:
{
   13a18:	b510      	push	{r4, lr}
	state->bit = bit;
   13a1a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   13a1e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   13a22:	720b      	strb	r3, [r1, #8]
{
   13a24:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   13a26:	f004 fc2d 	bl	18284 <net_buf_id>
   13a2a:	4b03      	ldr	r3, [pc, #12]	; (13a38 <bt_hci_cmd_state_set_init+0x20>)
   13a2c:	220c      	movs	r2, #12
   13a2e:	fb02 3300 	mla	r3, r2, r0, r3
   13a32:	605c      	str	r4, [r3, #4]
}
   13a34:	bd10      	pop	{r4, pc}
   13a36:	bf00      	nop
   13a38:	2000270c 	.word	0x2000270c

00013a3c <bt_hci_cmd_create>:
{
   13a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   13a40:	f04f 32ff 	mov.w	r2, #4294967295
   13a44:	4606      	mov	r6, r0
   13a46:	f04f 33ff 	mov.w	r3, #4294967295
   13a4a:	481d      	ldr	r0, [pc, #116]	; (13ac0 <bt_hci_cmd_create+0x84>)
   13a4c:	460f      	mov	r7, r1
   13a4e:	f010 ff7e 	bl	2494e <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   13a52:	4604      	mov	r4, r0
   13a54:	b950      	cbnz	r0, 13a6c <bt_hci_cmd_create+0x30>
   13a56:	491b      	ldr	r1, [pc, #108]	; (13ac4 <bt_hci_cmd_create+0x88>)
   13a58:	481b      	ldr	r0, [pc, #108]	; (13ac8 <bt_hci_cmd_create+0x8c>)
   13a5a:	f240 1201 	movw	r2, #257	; 0x101
   13a5e:	f00f fade 	bl	2301e <assert_print>
   13a62:	4818      	ldr	r0, [pc, #96]	; (13ac4 <bt_hci_cmd_create+0x88>)
   13a64:	f240 1101 	movw	r1, #257	; 0x101
   13a68:	f00f fad2 	bl	23010 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   13a6c:	f100 0a08 	add.w	sl, r0, #8
   13a70:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13a72:	f04f 0800 	mov.w	r8, #0
   13a76:	4650      	mov	r0, sl
   13a78:	f004 fd30 	bl	184dc <net_buf_simple_reserve>
   13a7c:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   13a80:	4620      	mov	r0, r4
   13a82:	f004 fbff 	bl	18284 <net_buf_id>
   13a86:	4d11      	ldr	r5, [pc, #68]	; (13acc <bt_hci_cmd_create+0x90>)
   13a88:	f04f 090c 	mov.w	r9, #12
   13a8c:	fb09 5000 	mla	r0, r9, r0, r5
   13a90:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   13a92:	4620      	mov	r0, r4
   13a94:	f004 fbf6 	bl	18284 <net_buf_id>
   13a98:	fb09 5000 	mla	r0, r9, r0, r5
   13a9c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   13aa0:	4620      	mov	r0, r4
   13aa2:	f004 fbef 	bl	18284 <net_buf_id>
   13aa6:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   13aaa:	2103      	movs	r1, #3
   13aac:	f8c5 8004 	str.w	r8, [r5, #4]
   13ab0:	4650      	mov	r0, sl
   13ab2:	f004 ff21 	bl	188f8 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   13ab6:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   13ab8:	7087      	strb	r7, [r0, #2]
}
   13aba:	4620      	mov	r0, r4
   13abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13ac0:	20000b84 	.word	0x20000b84
   13ac4:	000270bb 	.word	0x000270bb
   13ac8:	00026718 	.word	0x00026718
   13acc:	2000270c 	.word	0x2000270c

00013ad0 <bt_hci_cmd_send_sync>:
{
   13ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ad2:	4607      	mov	r7, r0
   13ad4:	b087      	sub	sp, #28
   13ad6:	4615      	mov	r5, r2
	if (!buf) {
   13ad8:	460c      	mov	r4, r1
   13ada:	b921      	cbnz	r1, 13ae6 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
   13adc:	f7ff ffae 	bl	13a3c <bt_hci_cmd_create>
		if (!buf) {
   13ae0:	4604      	mov	r4, r0
   13ae2:	2800      	cmp	r0, #0
   13ae4:	d047      	beq.n	13b76 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13ae6:	2201      	movs	r2, #1
   13ae8:	2100      	movs	r1, #0
   13aea:	4668      	mov	r0, sp
   13aec:	f011 fc0a 	bl	25304 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   13af0:	4620      	mov	r0, r4
   13af2:	f004 fbc7 	bl	18284 <net_buf_id>
   13af6:	4e21      	ldr	r6, [pc, #132]	; (13b7c <bt_hci_cmd_send_sync+0xac>)
   13af8:	230c      	movs	r3, #12
   13afa:	fb03 6000 	mla	r0, r3, r0, r6
   13afe:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   13b02:	4620      	mov	r0, r4
   13b04:	f004 fe34 	bl	18770 <net_buf_ref>
   13b08:	4601      	mov	r1, r0
   13b0a:	481d      	ldr	r0, [pc, #116]	; (13b80 <bt_hci_cmd_send_sync+0xb0>)
   13b0c:	f004 fdc4 	bl	18698 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   13b10:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   13b14:	2300      	movs	r3, #0
   13b16:	4668      	mov	r0, sp
   13b18:	f009 fa80 	bl	1d01c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   13b1c:	b158      	cbz	r0, 13b36 <bt_hci_cmd_send_sync+0x66>
   13b1e:	4919      	ldr	r1, [pc, #100]	; (13b84 <bt_hci_cmd_send_sync+0xb4>)
   13b20:	4819      	ldr	r0, [pc, #100]	; (13b88 <bt_hci_cmd_send_sync+0xb8>)
   13b22:	f240 1249 	movw	r2, #329	; 0x149
   13b26:	f00f fa7a 	bl	2301e <assert_print>
   13b2a:	4040      	eors	r0, r0
   13b2c:	f380 8811 	msr	BASEPRI, r0
   13b30:	f04f 0003 	mov.w	r0, #3
   13b34:	df02      	svc	2
	status = cmd(buf)->status;
   13b36:	4620      	mov	r0, r4
   13b38:	f004 fba4 	bl	18284 <net_buf_id>
   13b3c:	230c      	movs	r3, #12
   13b3e:	4358      	muls	r0, r3
   13b40:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   13b42:	b186      	cbz	r6, 13b66 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   13b44:	4811      	ldr	r0, [pc, #68]	; (13b8c <bt_hci_cmd_send_sync+0xbc>)
   13b46:	4633      	mov	r3, r6
   13b48:	463a      	mov	r2, r7
   13b4a:	2157      	movs	r1, #87	; 0x57
   13b4c:	f00f fa75 	bl	2303a <z_log_minimal_printk>
		net_buf_unref(buf);
   13b50:	4620      	mov	r0, r4
   13b52:	f004 fdcb 	bl	186ec <net_buf_unref>
			return -ECONNREFUSED;
   13b56:	2e09      	cmp	r6, #9
   13b58:	bf14      	ite	ne
   13b5a:	f06f 0004 	mvnne.w	r0, #4
   13b5e:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   13b62:	b007      	add	sp, #28
   13b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   13b66:	b115      	cbz	r5, 13b6e <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
   13b68:	602c      	str	r4, [r5, #0]
	return 0;
   13b6a:	2000      	movs	r0, #0
   13b6c:	e7f9      	b.n	13b62 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
   13b6e:	4620      	mov	r0, r4
   13b70:	f004 fdbc 	bl	186ec <net_buf_unref>
   13b74:	e7f9      	b.n	13b6a <bt_hci_cmd_send_sync+0x9a>
			return -ENOBUFS;
   13b76:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13b7a:	e7f2      	b.n	13b62 <bt_hci_cmd_send_sync+0x92>
   13b7c:	2000270c 	.word	0x2000270c
   13b80:	200004b4 	.word	0x200004b4
   13b84:	000270bb 	.word	0x000270bb
   13b88:	00026718 	.word	0x00026718
   13b8c:	00027207 	.word	0x00027207

00013b90 <hci_le_read_max_data_len>:
{
   13b90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13b92:	4606      	mov	r6, r0
   13b94:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   13b96:	aa01      	add	r2, sp, #4
   13b98:	2100      	movs	r1, #0
   13b9a:	f242 002f 	movw	r0, #8239	; 0x202f
   13b9e:	f7ff ff97 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   13ba2:	4604      	mov	r4, r0
   13ba4:	b130      	cbz	r0, 13bb4 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
   13ba6:	4809      	ldr	r0, [pc, #36]	; (13bcc <hci_le_read_max_data_len+0x3c>)
   13ba8:	2145      	movs	r1, #69	; 0x45
   13baa:	f00f fa46 	bl	2303a <z_log_minimal_printk>
}
   13bae:	4620      	mov	r0, r4
   13bb0:	b002      	add	sp, #8
   13bb2:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   13bb4:	9801      	ldr	r0, [sp, #4]
   13bb6:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   13bb8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   13bbc:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   13bbe:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   13bc2:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   13bc4:	f004 fd92 	bl	186ec <net_buf_unref>
	return 0;
   13bc8:	e7f1      	b.n	13bae <hci_le_read_max_data_len+0x1e>
   13bca:	bf00      	nop
   13bcc:	00027228 	.word	0x00027228

00013bd0 <bt_hci_le_rand>:
{
   13bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   13bd2:	4b14      	ldr	r3, [pc, #80]	; (13c24 <bt_hci_le_rand+0x54>)
   13bd4:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   13bd8:	2b00      	cmp	r3, #0
{
   13bda:	4605      	mov	r5, r0
   13bdc:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   13bde:	da1d      	bge.n	13c1c <bt_hci_le_rand+0x4c>
	while (len > 0) {
   13be0:	b914      	cbnz	r4, 13be8 <bt_hci_le_rand+0x18>
	return 0;
   13be2:	4620      	mov	r0, r4
}
   13be4:	b003      	add	sp, #12
   13be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   13be8:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   13bea:	aa01      	add	r2, sp, #4
   13bec:	f04f 0100 	mov.w	r1, #0
   13bf0:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   13bf4:	4626      	mov	r6, r4
   13bf6:	bf28      	it	cs
   13bf8:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   13bfa:	f7ff ff69 	bl	13ad0 <bt_hci_cmd_send_sync>
		if (err) {
   13bfe:	2800      	cmp	r0, #0
   13c00:	d1f0      	bne.n	13be4 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   13c02:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   13c04:	68b9      	ldr	r1, [r7, #8]
   13c06:	4632      	mov	r2, r6
   13c08:	3101      	adds	r1, #1
   13c0a:	4628      	mov	r0, r5
   13c0c:	f00f fcac 	bl	23568 <memcpy>
		net_buf_unref(rsp);
   13c10:	4638      	mov	r0, r7
   13c12:	f004 fd6b 	bl	186ec <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   13c16:	4435      	add	r5, r6
		len -= count;
   13c18:	1ba4      	subs	r4, r4, r6
   13c1a:	e7e1      	b.n	13be0 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   13c1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13c20:	e7e0      	b.n	13be4 <bt_hci_le_rand+0x14>
   13c22:	bf00      	nop
   13c24:	20000378 	.word	0x20000378

00013c28 <bt_hci_le_enh_conn_complete>:
{
   13c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13c2c:	f8b0 6001 	ldrh.w	r6, [r0, #1]
   13c30:	4996      	ldr	r1, [pc, #600]	; (13e8c <bt_hci_le_enh_conn_complete+0x264>)
	handle |= ~BT_ACL_HANDLE_MASK;
   13c32:	ea6f 5306 	mvn.w	r3, r6, lsl #20
   13c36:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   13c3a:	4605      	mov	r5, r0
   13c3c:	b088      	sub	sp, #32
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13c3e:	fa1f f886 	uxth.w	r8, r6
	handle |= ~BT_ACL_HANDLE_MASK;
   13c42:	b29b      	uxth	r3, r3
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   13c44:	2200      	movs	r2, #0
   13c46:	4608      	mov	r0, r1
		if (disconnected_handles[i] == handle) {
   13c48:	f831 4b02 	ldrh.w	r4, [r1], #2
   13c4c:	42a3      	cmp	r3, r4
   13c4e:	d11a      	bne.n	13c86 <bt_hci_le_enh_conn_complete+0x5e>
			disconnected_handles[i] = 0;
   13c50:	2300      	movs	r3, #0
   13c52:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			return true;
   13c56:	2701      	movs	r7, #1
	if (evt->status) {
   13c58:	782c      	ldrb	r4, [r5, #0]
   13c5a:	b35c      	cbz	r4, 13cb4 <bt_hci_le_enh_conn_complete+0x8c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13c5c:	2c3c      	cmp	r4, #60	; 0x3c
   13c5e:	d121      	bne.n	13ca4 <bt_hci_le_enh_conn_complete+0x7c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13c60:	f001 f894 	bl	14d8c <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13c64:	f06f 0180 	mvn.w	r1, #128	; 0x80
   13c68:	3010      	adds	r0, #16
   13c6a:	f00f fd22 	bl	236b2 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   13c6e:	2000      	movs	r0, #0
   13c70:	f7ff fc94 	bl	1359c <find_pending_connect.part.0>
		if (!conn) {
   13c74:	4605      	mov	r5, r0
   13c76:	b958      	cbnz	r0, 13c90 <bt_hci_le_enh_conn_complete+0x68>
			BT_ERR("No pending peripheral connection");
   13c78:	4885      	ldr	r0, [pc, #532]	; (13e90 <bt_hci_le_enh_conn_complete+0x268>)
   13c7a:	2145      	movs	r1, #69	; 0x45
}
   13c7c:	b008      	add	sp, #32
   13c7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			BT_ERR("No pending peripheral connection");
   13c82:	f00f b9da 	b.w	2303a <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   13c86:	3201      	adds	r2, #1
   13c88:	2a04      	cmp	r2, #4
   13c8a:	d1dd      	bne.n	13c48 <bt_hci_le_enh_conn_complete+0x20>
	return false;
   13c8c:	2700      	movs	r7, #0
   13c8e:	e7e3      	b.n	13c58 <bt_hci_le_enh_conn_complete+0x30>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   13c90:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13c92:	2100      	movs	r1, #0
   13c94:	f001 fd90 	bl	157b8 <bt_conn_set_state>
		bt_conn_unref(conn);
   13c98:	4628      	mov	r0, r5
}
   13c9a:	b008      	add	sp, #32
   13c9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   13ca0:	f001 bd52 	b.w	15748 <bt_conn_unref>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   13ca4:	487b      	ldr	r0, [pc, #492]	; (13e94 <bt_hci_le_enh_conn_complete+0x26c>)
   13ca6:	4622      	mov	r2, r4
   13ca8:	2157      	movs	r1, #87	; 0x57
}
   13caa:	b008      	add	sp, #32
   13cac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   13cb0:	f00f b9c3 	b.w	2303a <z_log_minimal_printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   13cb4:	792b      	ldrb	r3, [r5, #4]
   13cb6:	3b02      	subs	r3, #2
   13cb8:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   13cba:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   13cbe:	d824      	bhi.n	13d0a <bt_hci_le_enh_conn_complete+0xe2>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   13cc0:	4649      	mov	r1, r9
   13cc2:	a806      	add	r0, sp, #24
   13cc4:	f00f fce3 	bl	2368e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   13cc8:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
   13ccc:	2206      	movs	r2, #6
   13cce:	3b02      	subs	r3, #2
   13cd0:	f105 0111 	add.w	r1, r5, #17
   13cd4:	f10d 0011 	add.w	r0, sp, #17
   13cd8:	f88d 3018 	strb.w	r3, [sp, #24]
   13cdc:	f00f fc44 	bl	23568 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   13ce0:	2301      	movs	r3, #1
   13ce2:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   13ce6:	78eb      	ldrb	r3, [r5, #3]
   13ce8:	2b01      	cmp	r3, #1
   13cea:	d021      	beq.n	13d30 <bt_hci_le_enh_conn_complete+0x108>
		BT_ERR("No pending conn for peer %s",
   13cec:	4648      	mov	r0, r9
   13cee:	f7ff fa77 	bl	131e0 <bt_addr_le_str>
   13cf2:	2145      	movs	r1, #69	; 0x45
   13cf4:	4602      	mov	r2, r0
   13cf6:	4868      	ldr	r0, [pc, #416]	; (13e98 <bt_hci_le_enh_conn_complete+0x270>)
   13cf8:	f00f f99f 	bl	2303a <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   13cfc:	211f      	movs	r1, #31
   13cfe:	4640      	mov	r0, r8
   13d00:	f00f fce3 	bl	236ca <bt_hci_disconnect>
}
   13d04:	b008      	add	sp, #32
   13d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   13d0a:	78eb      	ldrb	r3, [r5, #3]
   13d0c:	2b01      	cmp	r3, #1
   13d0e:	bf04      	itt	eq
   13d10:	4b62      	ldreq	r3, [pc, #392]	; (13e9c <bt_hci_le_enh_conn_complete+0x274>)
   13d12:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   13d16:	4649      	mov	r1, r9
   13d18:	4620      	mov	r0, r4
   13d1a:	f00f fd67 	bl	237ec <bt_lookup_id_addr>
   13d1e:	4601      	mov	r1, r0
   13d20:	a806      	add	r0, sp, #24
   13d22:	f00f fcb4 	bl	2368e <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   13d26:	4649      	mov	r1, r9
   13d28:	a804      	add	r0, sp, #16
   13d2a:	f00f fcb0 	bl	2368e <bt_addr_le_copy>
   13d2e:	e7da      	b.n	13ce6 <bt_hci_le_enh_conn_complete+0xbe>
   13d30:	a806      	add	r0, sp, #24
   13d32:	f7ff fc33 	bl	1359c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13d36:	78eb      	ldrb	r3, [r5, #3]
   13d38:	2b01      	cmp	r3, #1
   13d3a:	4604      	mov	r4, r0
   13d3c:	d10a      	bne.n	13d54 <bt_hci_le_enh_conn_complete+0x12c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13d3e:	f001 f825 	bl	14d8c <bt_le_adv_lookup_legacy>
   13d42:	f06f 0180 	mvn.w	r1, #128	; 0x80
   13d46:	4682      	mov	sl, r0
   13d48:	3010      	adds	r0, #16
   13d4a:	f00f fcb2 	bl	236b2 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   13d4e:	4650      	mov	r0, sl
   13d50:	f00f fe5b 	bl	23a0a <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   13d54:	2c00      	cmp	r4, #0
   13d56:	d0c9      	beq.n	13cec <bt_hci_le_enh_conn_complete+0xc4>
	conn->handle = handle;
   13d58:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   13d5a:	a906      	add	r1, sp, #24
	conn->handle = handle;
   13d5c:	f820 6b90 	strh.w	r6, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   13d60:	f00f fc95 	bl	2368e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   13d64:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   13d68:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   13d6c:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   13d70:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13d74:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   13d78:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   13d7c:	78eb      	ldrb	r3, [r5, #3]
   13d7e:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   13d80:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13d82:	2b01      	cmp	r3, #1
	conn->err = 0U;
   13d84:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13d86:	d115      	bne.n	13db4 <bt_hci_le_enh_conn_complete+0x18c>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   13d88:	a904      	add	r1, sp, #16
   13d8a:	f104 0097 	add.w	r0, r4, #151	; 0x97
   13d8e:	f00f fc7e 	bl	2368e <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13d92:	f000 fffb 	bl	14d8c <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   13d96:	7a21      	ldrb	r1, [r4, #8]
   13d98:	4d40      	ldr	r5, [pc, #256]	; (13e9c <bt_hci_le_enh_conn_complete+0x274>)
   13d9a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   13d9e:	4429      	add	r1, r5
   13da0:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   13da4:	f00f fc73 	bl	2368e <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   13da8:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   13dac:	065d      	lsls	r5, r3, #25
   13dae:	d501      	bpl.n	13db4 <bt_hci_le_enh_conn_complete+0x18c>
			bt_le_adv_resume();
   13db0:	f001 f9a4 	bl	150fc <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   13db4:	2107      	movs	r1, #7
   13db6:	4620      	mov	r0, r4
   13db8:	f001 fcfe 	bl	157b8 <bt_conn_set_state>
	if (is_disconnected) {
   13dbc:	b11f      	cbz	r7, 13dc6 <bt_hci_le_enh_conn_complete+0x19e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13dbe:	2101      	movs	r1, #1
   13dc0:	4620      	mov	r0, r4
   13dc2:	f001 fcf9 	bl	157b8 <bt_conn_set_state>
	bt_conn_connected(conn);
   13dc6:	4620      	mov	r0, r4
   13dc8:	f00f fe50 	bl	23a6c <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   13dcc:	7aa3      	ldrb	r3, [r4, #10]
   13dce:	2b07      	cmp	r3, #7
   13dd0:	d155      	bne.n	13e7e <bt_hci_le_enh_conn_complete+0x256>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13dd2:	f3bf 8f5b 	dmb	ish
   13dd6:	6863      	ldr	r3, [r4, #4]
   13dd8:	4e30      	ldr	r6, [pc, #192]	; (13e9c <bt_hci_le_enh_conn_complete+0x274>)
   13dda:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   13dde:	f413 6f00 	tst.w	r3, #2048	; 0x800
   13de2:	d11f      	bne.n	13e24 <bt_hci_le_enh_conn_complete+0x1fc>
   13de4:	78e3      	ldrb	r3, [r4, #3]
   13de6:	b11b      	cbz	r3, 13df0 <bt_hci_le_enh_conn_complete+0x1c8>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   13de8:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   13dec:	0718      	lsls	r0, r3, #28
   13dee:	d519      	bpl.n	13e24 <bt_hci_le_enh_conn_complete+0x1fc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   13df0:	2102      	movs	r1, #2
   13df2:	f242 0016 	movw	r0, #8214	; 0x2016
   13df6:	f7ff fe21 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   13dfa:	4605      	mov	r5, r0
   13dfc:	2800      	cmp	r0, #0
   13dfe:	d042      	beq.n	13e86 <bt_hci_le_enh_conn_complete+0x25e>
   13e00:	2102      	movs	r1, #2
   13e02:	3008      	adds	r0, #8
   13e04:	f004 fd78 	bl	188f8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   13e08:	8823      	ldrh	r3, [r4, #0]
   13e0a:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   13e0c:	2200      	movs	r2, #0
   13e0e:	4629      	mov	r1, r5
   13e10:	f242 0016 	movw	r0, #8214	; 0x2016
   13e14:	f7ff fe5c 	bl	13ad0 <bt_hci_cmd_send_sync>
		if (err) {
   13e18:	4602      	mov	r2, r0
   13e1a:	b118      	cbz	r0, 13e24 <bt_hci_le_enh_conn_complete+0x1fc>
			BT_ERR("Failed read remote features (%d)", err);
   13e1c:	4820      	ldr	r0, [pc, #128]	; (13ea0 <bt_hci_le_enh_conn_complete+0x278>)
   13e1e:	2145      	movs	r1, #69	; 0x45
   13e20:	f00f f90b 	bl	2303a <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   13e24:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   13e28:	07d9      	lsls	r1, r3, #31
   13e2a:	d50c      	bpl.n	13e46 <bt_hci_le_enh_conn_complete+0x21e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   13e2c:	2100      	movs	r1, #0
   13e2e:	2302      	movs	r3, #2
   13e30:	461a      	mov	r2, r3
   13e32:	9100      	str	r1, [sp, #0]
   13e34:	4620      	mov	r0, r4
   13e36:	f00f fc81 	bl	2373c <bt_le_set_phy>
		if (err) {
   13e3a:	4602      	mov	r2, r0
   13e3c:	b118      	cbz	r0, 13e46 <bt_hci_le_enh_conn_complete+0x21e>
			BT_ERR("Failed LE Set PHY (%d)", err);
   13e3e:	4819      	ldr	r0, [pc, #100]	; (13ea4 <bt_hci_le_enh_conn_complete+0x27c>)
   13e40:	2145      	movs	r1, #69	; 0x45
   13e42:	f00f f8fa 	bl	2303a <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   13e46:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   13e4a:	069a      	lsls	r2, r3, #26
   13e4c:	d517      	bpl.n	13e7e <bt_hci_le_enh_conn_complete+0x256>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   13e4e:	f8d6 3158 	ldr.w	r3, [r6, #344]	; 0x158
   13e52:	689b      	ldr	r3, [r3, #8]
   13e54:	079b      	lsls	r3, r3, #30
   13e56:	d512      	bpl.n	13e7e <bt_hci_le_enh_conn_complete+0x256>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   13e58:	f10d 010e 	add.w	r1, sp, #14
   13e5c:	a803      	add	r0, sp, #12
   13e5e:	f7ff fe97 	bl	13b90 <hci_le_read_max_data_len>
			if (!err) {
   13e62:	b960      	cbnz	r0, 13e7e <bt_hci_le_enh_conn_complete+0x256>
				err = bt_le_set_data_len(conn,
   13e64:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   13e68:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   13e6c:	4620      	mov	r0, r4
   13e6e:	f00f fc47 	bl	23700 <bt_le_set_data_len>
				if (err) {
   13e72:	4602      	mov	r2, r0
   13e74:	b118      	cbz	r0, 13e7e <bt_hci_le_enh_conn_complete+0x256>
					BT_ERR("Failed to set data len (%d)", err);
   13e76:	480c      	ldr	r0, [pc, #48]	; (13ea8 <bt_hci_le_enh_conn_complete+0x280>)
   13e78:	2145      	movs	r1, #69	; 0x45
   13e7a:	f00f f8de 	bl	2303a <z_log_minimal_printk>
	bt_conn_unref(conn);
   13e7e:	4620      	mov	r0, r4
   13e80:	f001 fc62 	bl	15748 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13e84:	e73e      	b.n	13d04 <bt_hci_le_enh_conn_complete+0xdc>
		return -ENOBUFS;
   13e86:	f06f 0268 	mvn.w	r2, #104	; 0x68
   13e8a:	e7c7      	b.n	13e1c <bt_hci_le_enh_conn_complete+0x1f4>
   13e8c:	20003b14 	.word	0x20003b14
   13e90:	0002724d 	.word	0x0002724d
   13e94:	00027273 	.word	0x00027273
   13e98:	00027291 	.word	0x00027291
   13e9c:	20000378 	.word	0x20000378
   13ea0:	000272b2 	.word	0x000272b2
   13ea4:	000272d8 	.word	0x000272d8
   13ea8:	000272f4 	.word	0x000272f4

00013eac <le_legacy_conn_complete>:
{
   13eac:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   13eae:	6881      	ldr	r1, [r0, #8]
   13eb0:	4c17      	ldr	r4, [pc, #92]	; (13f10 <le_legacy_conn_complete+0x64>)
	enh.status         = evt->status;
   13eb2:	780b      	ldrb	r3, [r1, #0]
{
   13eb4:	b088      	sub	sp, #32
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13eb6:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   13eb8:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   13ebc:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   13ec0:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   13ec4:	78cb      	ldrb	r3, [r1, #3]
   13ec6:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   13eca:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   13ece:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   13ed2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   13ed6:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   13eda:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   13ede:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   13ee2:	7c4b      	ldrb	r3, [r1, #17]
   13ee4:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   13ee8:	3104      	adds	r1, #4
   13eea:	f00f fbd0 	bl	2368e <bt_addr_le_copy>
   13eee:	4621      	mov	r1, r4
   13ef0:	2206      	movs	r2, #6
   13ef2:	f10d 000b 	add.w	r0, sp, #11
   13ef6:	f00f fb37 	bl	23568 <memcpy>
   13efa:	2206      	movs	r2, #6
   13efc:	4621      	mov	r1, r4
   13efe:	f10d 0011 	add.w	r0, sp, #17
   13f02:	f00f fb31 	bl	23568 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   13f06:	4668      	mov	r0, sp
   13f08:	f7ff fe8e 	bl	13c28 <bt_hci_le_enh_conn_complete>
}
   13f0c:	b008      	add	sp, #32
   13f0e:	bd10      	pop	{r4, pc}
   13f10:	00026f3c 	.word	0x00026f3c

00013f14 <bt_send>:
	return bt_dev.drv->send(buf);
   13f14:	4b02      	ldr	r3, [pc, #8]	; (13f20 <bt_send+0xc>)
   13f16:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   13f1a:	695b      	ldr	r3, [r3, #20]
   13f1c:	4718      	bx	r3
   13f1e:	bf00      	nop
   13f20:	20000378 	.word	0x20000378

00013f24 <bt_hci_cmd_send>:
{
   13f24:	b538      	push	{r3, r4, r5, lr}
   13f26:	4605      	mov	r5, r0
	if (!buf) {
   13f28:	460c      	mov	r4, r1
   13f2a:	b919      	cbnz	r1, 13f34 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   13f2c:	f7ff fd86 	bl	13a3c <bt_hci_cmd_create>
		if (!buf) {
   13f30:	4604      	mov	r4, r0
   13f32:	b1c0      	cbz	r0, 13f66 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   13f34:	f640 4335 	movw	r3, #3125	; 0xc35
   13f38:	429d      	cmp	r5, r3
   13f3a:	d10e      	bne.n	13f5a <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
   13f3c:	4620      	mov	r0, r4
   13f3e:	f7ff ffe9 	bl	13f14 <bt_send>
		if (err) {
   13f42:	4605      	mov	r5, r0
   13f44:	b168      	cbz	r0, 13f62 <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
   13f46:	4602      	mov	r2, r0
   13f48:	2145      	movs	r1, #69	; 0x45
   13f4a:	4808      	ldr	r0, [pc, #32]	; (13f6c <bt_hci_cmd_send+0x48>)
   13f4c:	f00f f875 	bl	2303a <z_log_minimal_printk>
			net_buf_unref(buf);
   13f50:	4620      	mov	r0, r4
   13f52:	f004 fbcb 	bl	186ec <net_buf_unref>
}
   13f56:	4628      	mov	r0, r5
   13f58:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   13f5a:	4805      	ldr	r0, [pc, #20]	; (13f70 <bt_hci_cmd_send+0x4c>)
   13f5c:	4621      	mov	r1, r4
   13f5e:	f004 fb9b 	bl	18698 <net_buf_put>
	return 0;
   13f62:	2500      	movs	r5, #0
   13f64:	e7f7      	b.n	13f56 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   13f66:	f06f 0568 	mvn.w	r5, #104	; 0x68
   13f6a:	e7f4      	b.n	13f56 <bt_hci_cmd_send+0x32>
   13f6c:	00027315 	.word	0x00027315
   13f70:	200004b4 	.word	0x200004b4

00013f74 <le_conn_param_neg_reply>:
{
   13f74:	b570      	push	{r4, r5, r6, lr}
   13f76:	4606      	mov	r6, r0
   13f78:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   13f7a:	f242 0021 	movw	r0, #8225	; 0x2021
   13f7e:	2103      	movs	r1, #3
   13f80:	f7ff fd5c 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   13f84:	4604      	mov	r4, r0
   13f86:	b928      	cbnz	r0, 13f94 <le_conn_param_neg_reply+0x20>
}
   13f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   13f8c:	4808      	ldr	r0, [pc, #32]	; (13fb0 <le_conn_param_neg_reply+0x3c>)
   13f8e:	2145      	movs	r1, #69	; 0x45
   13f90:	f00f b853 	b.w	2303a <z_log_minimal_printk>
   13f94:	2103      	movs	r1, #3
   13f96:	3008      	adds	r0, #8
   13f98:	f004 fcae 	bl	188f8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   13f9c:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   13f9e:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   13fa0:	4621      	mov	r1, r4
   13fa2:	f242 0021 	movw	r0, #8225	; 0x2021
}
   13fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   13faa:	f7ff bfbb 	b.w	13f24 <bt_hci_cmd_send>
   13fae:	bf00      	nop
   13fb0:	0002733c 	.word	0x0002733c

00013fb4 <le_conn_param_req>:
{
   13fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   13fb6:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   13fb8:	78d9      	ldrb	r1, [r3, #3]
   13fba:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   13fbc:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   13fbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13fc2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   13fc6:	7959      	ldrb	r1, [r3, #5]
   13fc8:	791a      	ldrb	r2, [r3, #4]
   13fca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13fce:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   13fd2:	799a      	ldrb	r2, [r3, #6]
   13fd4:	79d9      	ldrb	r1, [r3, #7]
   13fd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13fda:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   13fde:	7a1a      	ldrb	r2, [r3, #8]
   13fe0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   13fe2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   13fe4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   13fe8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   13fea:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   13fee:	f001 fbdb 	bl	157a8 <bt_conn_lookup_handle>
	if (!conn) {
   13ff2:	4606      	mov	r6, r0
   13ff4:	b950      	cbnz	r0, 1400c <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13ff6:	481d      	ldr	r0, [pc, #116]	; (1406c <le_conn_param_req+0xb8>)
   13ff8:	2145      	movs	r1, #69	; 0x45
   13ffa:	4622      	mov	r2, r4
   13ffc:	f00f f81d 	bl	2303a <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   14000:	2102      	movs	r1, #2
   14002:	4620      	mov	r0, r4
   14004:	f7ff ffb6 	bl	13f74 <le_conn_param_neg_reply>
}
   14008:	b003      	add	sp, #12
   1400a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1400c:	4669      	mov	r1, sp
   1400e:	f001 fd5b 	bl	15ac8 <le_param_req>
   14012:	b938      	cbnz	r0, 14024 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   14014:	211e      	movs	r1, #30
   14016:	4620      	mov	r0, r4
   14018:	f7ff ffac 	bl	13f74 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1401c:	4630      	mov	r0, r6
   1401e:	f001 fb93 	bl	15748 <bt_conn_unref>
   14022:	e7f1      	b.n	14008 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   14024:	210e      	movs	r1, #14
   14026:	f242 0020 	movw	r0, #8224	; 0x2020
   1402a:	f7ff fd07 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   1402e:	4605      	mov	r5, r0
   14030:	2800      	cmp	r0, #0
   14032:	d0f3      	beq.n	1401c <le_conn_param_req+0x68>
   14034:	210e      	movs	r1, #14
   14036:	3008      	adds	r0, #8
   14038:	f004 fc5e 	bl	188f8 <net_buf_simple_add>
   1403c:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   1403e:	220e      	movs	r2, #14
   14040:	2100      	movs	r1, #0
   14042:	f00f fa9c 	bl	2357e <memset>
	cp->handle = sys_cpu_to_le16(handle);
   14046:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   14048:	f8bd 3000 	ldrh.w	r3, [sp]
   1404c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1404e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   14052:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   14054:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14058:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1405a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1405e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   14060:	4629      	mov	r1, r5
   14062:	f242 0020 	movw	r0, #8224	; 0x2020
   14066:	f7ff ff5d 	bl	13f24 <bt_hci_cmd_send>
   1406a:	e7d7      	b.n	1401c <le_conn_param_req+0x68>
   1406c:	00026ffb 	.word	0x00026ffb

00014070 <hci_tx_thread>:
{
   14070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   14074:	4f45      	ldr	r7, [pc, #276]	; (1418c <hci_tx_thread+0x11c>)
		BT_ASSERT(err == 0);
   14076:	f8df 8118 	ldr.w	r8, [pc, #280]	; 14190 <hci_tx_thread+0x120>
			ev_count += bt_conn_prepare_events(&events[1]);
   1407a:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   1407e:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14080:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
   14082:	f36f 3394 	bfc	r3, #14, #7
   14086:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14088:	f001 fae8 	bl	1565c <bt_conn_prepare_events>
   1408c:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1408e:	483f      	ldr	r0, [pc, #252]	; (1418c <hci_tx_thread+0x11c>)
   14090:	f04f 32ff 	mov.w	r2, #4294967295
   14094:	f04f 33ff 	mov.w	r3, #4294967295
   14098:	4629      	mov	r1, r5
   1409a:	f00b f855 	bl	1f148 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1409e:	b158      	cbz	r0, 140b8 <hci_tx_thread+0x48>
   140a0:	483c      	ldr	r0, [pc, #240]	; (14194 <hci_tx_thread+0x124>)
   140a2:	f640 12da 	movw	r2, #2522	; 0x9da
   140a6:	4641      	mov	r1, r8
   140a8:	f00e ffb9 	bl	2301e <assert_print>
   140ac:	4040      	eors	r0, r0
   140ae:	f380 8811 	msr	BASEPRI, r0
   140b2:	f04f 0003 	mov.w	r0, #3
   140b6:	df02      	svc	2
{
   140b8:	4e34      	ldr	r6, [pc, #208]	; (1418c <hci_tx_thread+0x11c>)
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   140ba:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 14198 <hci_tx_thread+0x128>
	for (; count; ev++, count--) {
   140be:	b915      	cbnz	r5, 140c6 <hci_tx_thread+0x56>
	z_impl_k_yield();
   140c0:	f00a fa00 	bl	1e4c4 <z_impl_k_yield>
	while (1) {
   140c4:	e7db      	b.n	1407e <hci_tx_thread+0xe>
		switch (ev->state) {
   140c6:	68f2      	ldr	r2, [r6, #12]
   140c8:	f3c2 3286 	ubfx	r2, r2, #14, #7
   140cc:	2a01      	cmp	r2, #1
   140ce:	d94e      	bls.n	1416e <hci_tx_thread+0xfe>
   140d0:	2a04      	cmp	r2, #4
   140d2:	d156      	bne.n	14182 <hci_tx_thread+0x112>
			if (ev->tag == BT_EVENT_CMD_TX) {
   140d4:	7b33      	ldrb	r3, [r6, #12]
   140d6:	2b00      	cmp	r3, #0
   140d8:	d14c      	bne.n	14174 <hci_tx_thread+0x104>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   140da:	4830      	ldr	r0, [pc, #192]	; (1419c <hci_tx_thread+0x12c>)
   140dc:	2200      	movs	r2, #0
   140de:	2300      	movs	r3, #0
   140e0:	f004 f9d2 	bl	18488 <net_buf_get>
	BT_ASSERT(buf);
   140e4:	4604      	mov	r4, r0
   140e6:	b958      	cbnz	r0, 14100 <hci_tx_thread+0x90>
   140e8:	482a      	ldr	r0, [pc, #168]	; (14194 <hci_tx_thread+0x124>)
   140ea:	f640 1273 	movw	r2, #2419	; 0x973
   140ee:	4641      	mov	r1, r8
   140f0:	f00e ff95 	bl	2301e <assert_print>
   140f4:	4040      	eors	r0, r0
   140f6:	f380 8811 	msr	BASEPRI, r0
   140fa:	f04f 0003 	mov.w	r0, #3
   140fe:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   14100:	f8df b09c 	ldr.w	fp, [pc, #156]	; 141a0 <hci_tx_thread+0x130>
	return z_impl_k_sem_take(sem, timeout);
   14104:	4827      	ldr	r0, [pc, #156]	; (141a4 <hci_tx_thread+0x134>)
   14106:	f04f 33ff 	mov.w	r3, #4294967295
   1410a:	f04f 32ff 	mov.w	r2, #4294967295
   1410e:	f008 ff85 	bl	1d01c <z_impl_k_sem_take>
   14112:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
   14116:	b153      	cbz	r3, 1412e <hci_tx_thread+0xbe>
		BT_ERR("Uncleared pending sent_cmd");
   14118:	4823      	ldr	r0, [pc, #140]	; (141a8 <hci_tx_thread+0x138>)
   1411a:	2145      	movs	r1, #69	; 0x45
   1411c:	f00e ff8d 	bl	2303a <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   14120:	f8db 0130 	ldr.w	r0, [fp, #304]	; 0x130
   14124:	f004 fae2 	bl	186ec <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14128:	2300      	movs	r3, #0
   1412a:	f8cb 3130 	str.w	r3, [fp, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   1412e:	4620      	mov	r0, r4
   14130:	f004 fb1e 	bl	18770 <net_buf_ref>
   14134:	f8cb 0130 	str.w	r0, [fp, #304]	; 0x130
	err = bt_send(buf);
   14138:	4620      	mov	r0, r4
   1413a:	f7ff feeb 	bl	13f14 <bt_send>
	if (err) {
   1413e:	4602      	mov	r2, r0
   14140:	b1a8      	cbz	r0, 1416e <hci_tx_thread+0xfe>
		BT_ERR("Unable to send to driver (err %d)", err);
   14142:	481a      	ldr	r0, [pc, #104]	; (141ac <hci_tx_thread+0x13c>)
   14144:	2145      	movs	r1, #69	; 0x45
   14146:	f00e ff78 	bl	2303a <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   1414a:	4816      	ldr	r0, [pc, #88]	; (141a4 <hci_tx_thread+0x134>)
   1414c:	f008 ff2c 	bl	1cfa8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   14150:	4620      	mov	r0, r4
   14152:	f004 f897 	bl	18284 <net_buf_id>
   14156:	4b16      	ldr	r3, [pc, #88]	; (141b0 <hci_tx_thread+0x140>)
   14158:	220c      	movs	r2, #12
   1415a:	fb02 3000 	mla	r0, r2, r0, r3
   1415e:	211f      	movs	r1, #31
   14160:	8840      	ldrh	r0, [r0, #2]
   14162:	4622      	mov	r2, r4
   14164:	f7ff fb36 	bl	137d4 <hci_cmd_done>
		net_buf_unref(buf);
   14168:	4620      	mov	r0, r4
   1416a:	f004 fabf 	bl	186ec <net_buf_unref>
	for (; count; ev++, count--) {
   1416e:	3614      	adds	r6, #20
   14170:	3d01      	subs	r5, #1
   14172:	e7a4      	b.n	140be <hci_tx_thread+0x4e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   14174:	2b01      	cmp	r3, #1
   14176:	d1fa      	bne.n	1416e <hci_tx_thread+0xfe>
					conn = CONTAINER_OF(ev->fifo,
   14178:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1417a:	3838      	subs	r0, #56	; 0x38
   1417c:	f001 fe60 	bl	15e40 <bt_conn_process_tx>
   14180:	e7f5      	b.n	1416e <hci_tx_thread+0xfe>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   14182:	2157      	movs	r1, #87	; 0x57
   14184:	4650      	mov	r0, sl
   14186:	f00e ff58 	bl	2303a <z_log_minimal_printk>
   1418a:	e7f0      	b.n	1416e <hci_tx_thread+0xfe>
   1418c:	20000610 	.word	0x20000610
   14190:	000270bb 	.word	0x000270bb
   14194:	00026718 	.word	0x00026718
   14198:	0002737b 	.word	0x0002737b
   1419c:	200004b4 	.word	0x200004b4
   141a0:	20000378 	.word	0x20000378
   141a4:	20000490 	.word	0x20000490
   141a8:	0002735b 	.word	0x0002735b
   141ac:	00027315 	.word	0x00027315
   141b0:	2000270c 	.word	0x2000270c

000141b4 <hci_event_prio>:
{
   141b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141b8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   141ba:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   141be:	4630      	mov	r0, r6
   141c0:	f010 fbd2 	bl	24968 <net_buf_simple_headroom>
	state->len = buf->len;
   141c4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   141c8:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   141cc:	4605      	mov	r5, r0
   141ce:	d80b      	bhi.n	141e8 <hci_event_prio+0x34>
   141d0:	491b      	ldr	r1, [pc, #108]	; (14240 <hci_event_prio+0x8c>)
   141d2:	481c      	ldr	r0, [pc, #112]	; (14244 <hci_event_prio+0x90>)
   141d4:	f640 5277 	movw	r2, #3447	; 0xd77
   141d8:	f00e ff21 	bl	2301e <assert_print>
   141dc:	4040      	eors	r0, r0
   141de:	f380 8811 	msr	BASEPRI, r0
   141e2:	f04f 0003 	mov.w	r0, #3
   141e6:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   141e8:	4630      	mov	r0, r6
   141ea:	2102      	movs	r1, #2
   141ec:	f004 fb6a 	bl	188c4 <net_buf_simple_pull_mem>
   141f0:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   141f2:	7800      	ldrb	r0, [r0, #0]
   141f4:	f00f fa38 	bl	23668 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   141f8:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   141fa:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   141fc:	d40b      	bmi.n	14216 <hci_event_prio+0x62>
   141fe:	4910      	ldr	r1, [pc, #64]	; (14240 <hci_event_prio+0x8c>)
   14200:	4810      	ldr	r0, [pc, #64]	; (14244 <hci_event_prio+0x90>)
   14202:	f640 527b 	movw	r2, #3451	; 0xd7b
   14206:	f00e ff0a 	bl	2301e <assert_print>
   1420a:	4040      	eors	r0, r0
   1420c:	f380 8811 	msr	BASEPRI, r0
   14210:	f04f 0003 	mov.w	r0, #3
   14214:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   14216:	2305      	movs	r3, #5
   14218:	4a0b      	ldr	r2, [pc, #44]	; (14248 <hci_event_prio+0x94>)
   1421a:	7838      	ldrb	r0, [r7, #0]
   1421c:	4621      	mov	r1, r4
   1421e:	f7ff f9d3 	bl	135c8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14222:	07b3      	lsls	r3, r6, #30
   14224:	d507      	bpl.n	14236 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   14226:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   14228:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1422c:	fa13 f585 	uxtah	r5, r3, r5
   14230:	60a5      	str	r5, [r4, #8]
}
   14232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   14236:	4620      	mov	r0, r4
}
   14238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1423c:	f004 ba56 	b.w	186ec <net_buf_unref>
   14240:	000270bb 	.word	0x000270bb
   14244:	00026718 	.word	0x00026718
   14248:	00025c3c 	.word	0x00025c3c

0001424c <bt_recv>:
{
   1424c:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1424e:	7d02      	ldrb	r2, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   14250:	2a01      	cmp	r2, #1
{
   14252:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   14254:	d005      	beq.n	14262 <bt_recv+0x16>
   14256:	2a03      	cmp	r2, #3
   14258:	d111      	bne.n	1427e <bt_recv+0x32>
			rx_queue_put(buf);
   1425a:	f7ff f945 	bl	134e8 <rx_queue_put>
		return 0;
   1425e:	2000      	movs	r0, #0
}
   14260:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14262:	6883      	ldr	r3, [r0, #8]
   14264:	7818      	ldrb	r0, [r3, #0]
   14266:	f00f f9ff 	bl	23668 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1426a:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1426c:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1426e:	d502      	bpl.n	14276 <bt_recv+0x2a>
			hci_event_prio(buf);
   14270:	4620      	mov	r0, r4
   14272:	f7ff ff9f 	bl	141b4 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14276:	07ab      	lsls	r3, r5, #30
   14278:	d5f1      	bpl.n	1425e <bt_recv+0x12>
			rx_queue_put(buf);
   1427a:	4620      	mov	r0, r4
   1427c:	e7ed      	b.n	1425a <bt_recv+0xe>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1427e:	4805      	ldr	r0, [pc, #20]	; (14294 <bt_recv+0x48>)
   14280:	2145      	movs	r1, #69	; 0x45
   14282:	f00e feda 	bl	2303a <z_log_minimal_printk>
		net_buf_unref(buf);
   14286:	4620      	mov	r0, r4
   14288:	f004 fa30 	bl	186ec <net_buf_unref>
		return -EINVAL;
   1428c:	f06f 0015 	mvn.w	r0, #21
   14290:	e7e6      	b.n	14260 <bt_recv+0x14>
   14292:	bf00      	nop
   14294:	000273a1 	.word	0x000273a1

00014298 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   14298:	4a08      	ldr	r2, [pc, #32]	; (142bc <bt_hci_driver_register+0x24>)
{
   1429a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1429c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
   142a0:	b930      	cbnz	r0, 142b0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   142a2:	68d9      	ldr	r1, [r3, #12]
   142a4:	b139      	cbz	r1, 142b6 <bt_hci_driver_register+0x1e>
   142a6:	6959      	ldr	r1, [r3, #20]
   142a8:	b129      	cbz	r1, 142b6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   142aa:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
	return 0;
   142ae:	4770      	bx	lr
		return -EALREADY;
   142b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   142b4:	4770      	bx	lr
		return -EINVAL;
   142b6:	f06f 0015 	mvn.w	r0, #21
}
   142ba:	4770      	bx	lr
   142bc:	20000378 	.word	0x20000378

000142c0 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   142c0:	4801      	ldr	r0, [pc, #4]	; (142c8 <bt_finalize_init+0x8>)
   142c2:	2104      	movs	r1, #4
   142c4:	f00f b9e6 	b.w	23694 <atomic_or>
   142c8:	20000444 	.word	0x20000444

000142cc <bt_init>:
{
   142cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   142ce:	4db3      	ldr	r5, [pc, #716]	; (1459c <bt_init+0x2d0>)
   142d0:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
   142d4:	6899      	ldr	r1, [r3, #8]
   142d6:	f011 0101 	ands.w	r1, r1, #1
   142da:	d121      	bne.n	14320 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   142dc:	aa01      	add	r2, sp, #4
   142de:	f640 4003 	movw	r0, #3075	; 0xc03
   142e2:	f7ff fbf5 	bl	13ad0 <bt_hci_cmd_send_sync>
		if (err) {
   142e6:	4604      	mov	r4, r0
   142e8:	2800      	cmp	r0, #0
   142ea:	d165      	bne.n	143b8 <bt_init+0xec>
		hci_reset_complete(rsp);
   142ec:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
   142ee:	6883      	ldr	r3, [r0, #8]
	if (status) {
   142f0:	781b      	ldrb	r3, [r3, #0]
   142f2:	b99b      	cbnz	r3, 1431c <bt_init+0x50>
   142f4:	f3bf 8f5b 	dmb	ish
   142f8:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   142fc:	f3bf 8f5b 	dmb	ish
   14300:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14304:	f003 0309 	and.w	r3, r3, #9
   14308:	f3bf 8f5b 	dmb	ish
   1430c:	e852 1f00 	ldrex	r1, [r2]
   14310:	e842 3400 	strex	r4, r3, [r2]
   14314:	2c00      	cmp	r4, #0
   14316:	d1f9      	bne.n	1430c <bt_init+0x40>
   14318:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1431c:	f004 f9e6 	bl	186ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   14320:	aa01      	add	r2, sp, #4
   14322:	2100      	movs	r1, #0
   14324:	f241 0003 	movw	r0, #4099	; 0x1003
   14328:	f7ff fbd2 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   1432c:	4604      	mov	r4, r0
   1432e:	2800      	cmp	r0, #0
   14330:	d142      	bne.n	143b8 <bt_init+0xec>
	read_local_features_complete(rsp);
   14332:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   14334:	489a      	ldr	r0, [pc, #616]	; (145a0 <bt_init+0x2d4>)
   14336:	68b1      	ldr	r1, [r6, #8]
   14338:	2208      	movs	r2, #8
   1433a:	3101      	adds	r1, #1
   1433c:	f00f f914 	bl	23568 <memcpy>
	net_buf_unref(rsp);
   14340:	4630      	mov	r0, r6
   14342:	f004 f9d3 	bl	186ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   14346:	4621      	mov	r1, r4
   14348:	aa01      	add	r2, sp, #4
   1434a:	f241 0001 	movw	r0, #4097	; 0x1001
   1434e:	f7ff fbbf 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   14352:	4604      	mov	r4, r0
   14354:	bb80      	cbnz	r0, 143b8 <bt_init+0xec>
	read_local_ver_complete(rsp);
   14356:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   14358:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1435a:	785a      	ldrb	r2, [r3, #1]
   1435c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   14360:	885a      	ldrh	r2, [r3, #2]
   14362:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   14366:	791a      	ldrb	r2, [r3, #4]
   14368:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1436c:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   14370:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   14374:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   14378:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   1437c:	f004 f9b6 	bl	186ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   14380:	4621      	mov	r1, r4
   14382:	aa01      	add	r2, sp, #4
   14384:	f241 0002 	movw	r0, #4098	; 0x1002
   14388:	f7ff fba2 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   1438c:	4604      	mov	r4, r0
   1438e:	b998      	cbnz	r0, 143b8 <bt_init+0xec>
	read_supported_commands_complete(rsp);
   14390:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   14392:	4884      	ldr	r0, [pc, #528]	; (145a4 <bt_init+0x2d8>)
   14394:	68b1      	ldr	r1, [r6, #8]
   14396:	2240      	movs	r2, #64	; 0x40
   14398:	3101      	adds	r1, #1
   1439a:	f00f f8e5 	bl	23568 <memcpy>
	net_buf_unref(rsp);
   1439e:	4630      	mov	r0, r6
   143a0:	f004 f9a4 	bl	186ec <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   143a4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   143a8:	065e      	lsls	r6, r3, #25
   143aa:	d408      	bmi.n	143be <bt_init+0xf2>
		BT_ERR("Non-LE capable controller detected!");
   143ac:	487e      	ldr	r0, [pc, #504]	; (145a8 <bt_init+0x2dc>)
   143ae:	2145      	movs	r1, #69	; 0x45
   143b0:	f00e fe43 	bl	2303a <z_log_minimal_printk>
		return -ENODEV;
   143b4:	f06f 0412 	mvn.w	r4, #18
}
   143b8:	4620      	mov	r0, r4
   143ba:	b003      	add	sp, #12
   143bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   143be:	4621      	mov	r1, r4
   143c0:	aa01      	add	r2, sp, #4
   143c2:	f242 0003 	movw	r0, #8195	; 0x2003
   143c6:	f7ff fb83 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   143ca:	4604      	mov	r4, r0
   143cc:	2800      	cmp	r0, #0
   143ce:	d1f3      	bne.n	143b8 <bt_init+0xec>
	read_le_features_complete(rsp);
   143d0:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   143d2:	4876      	ldr	r0, [pc, #472]	; (145ac <bt_init+0x2e0>)
   143d4:	68b1      	ldr	r1, [r6, #8]
   143d6:	2208      	movs	r2, #8
   143d8:	3101      	adds	r1, #1
   143da:	f00f f8c5 	bl	23568 <memcpy>
	net_buf_unref(rsp);
   143de:	4630      	mov	r0, r6
   143e0:	f004 f984 	bl	186ec <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   143e4:	4621      	mov	r1, r4
   143e6:	aa01      	add	r2, sp, #4
   143e8:	f242 0002 	movw	r0, #8194	; 0x2002
   143ec:	f7ff fb70 	bl	13ad0 <bt_hci_cmd_send_sync>
		if (err) {
   143f0:	4604      	mov	r4, r0
   143f2:	2800      	cmp	r0, #0
   143f4:	d1e0      	bne.n	143b8 <bt_init+0xec>
		le_read_buffer_size_complete(rsp);
   143f6:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   143f8:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   143fa:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   143fe:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   14402:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   14404:	b121      	cbz	r1, 14410 <bt_init+0x144>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   14406:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   14408:	4869      	ldr	r0, [pc, #420]	; (145b0 <bt_init+0x2e4>)
   1440a:	4611      	mov	r1, r2
   1440c:	f010 ff7a 	bl	25304 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   14410:	4620      	mov	r0, r4
   14412:	f004 f96b 	bl	186ec <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14416:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   1441a:	f016 0620 	ands.w	r6, r6, #32
   1441e:	d118      	bne.n	14452 <bt_init+0x186>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14420:	2102      	movs	r1, #2
   14422:	f640 406d 	movw	r0, #3181	; 0xc6d
   14426:	f7ff fb09 	bl	13a3c <bt_hci_cmd_create>
		if (!buf) {
   1442a:	4604      	mov	r4, r0
   1442c:	2800      	cmp	r0, #0
   1442e:	f000 80a9 	beq.w	14584 <bt_init+0x2b8>
	return net_buf_simple_add(&buf->b, len);
   14432:	2102      	movs	r1, #2
   14434:	3008      	adds	r0, #8
   14436:	f004 fa5f 	bl	188f8 <net_buf_simple_add>
		cp_le->le = 0x01;
   1443a:	2301      	movs	r3, #1
   1443c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1443e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   14440:	4621      	mov	r1, r4
   14442:	4632      	mov	r2, r6
   14444:	f640 406d 	movw	r0, #3181	; 0xc6d
   14448:	f7ff fb42 	bl	13ad0 <bt_hci_cmd_send_sync>
		if (err) {
   1444c:	4604      	mov	r4, r0
   1444e:	2800      	cmp	r0, #0
   14450:	d1b2      	bne.n	143b8 <bt_init+0xec>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   14452:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   14456:	071c      	lsls	r4, r3, #28
   14458:	d512      	bpl.n	14480 <bt_init+0x1b4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1445a:	aa01      	add	r2, sp, #4
   1445c:	2100      	movs	r1, #0
   1445e:	f242 001c 	movw	r0, #8220	; 0x201c
   14462:	f7ff fb35 	bl	13ad0 <bt_hci_cmd_send_sync>
		if (err) {
   14466:	4604      	mov	r4, r0
   14468:	2800      	cmp	r0, #0
   1446a:	d1a5      	bne.n	143b8 <bt_init+0xec>
		le_read_supp_states_complete(rsp);
   1446c:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1446e:	6883      	ldr	r3, [r0, #8]
   14470:	f8d3 2001 	ldr.w	r2, [r3, #1]
   14474:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   14478:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   1447c:	f004 f936 	bl	186ec <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   14480:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   14484:	0698      	lsls	r0, r3, #26
   14486:	d523      	bpl.n	144d0 <bt_init+0x204>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14488:	f10d 0102 	add.w	r1, sp, #2
   1448c:	4668      	mov	r0, sp
   1448e:	f7ff fb7f 	bl	13b90 <hci_le_read_max_data_len>
		if (err) {
   14492:	4604      	mov	r4, r0
   14494:	2800      	cmp	r0, #0
   14496:	d18f      	bne.n	143b8 <bt_init+0xec>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14498:	2104      	movs	r1, #4
   1449a:	f242 0024 	movw	r0, #8228	; 0x2024
   1449e:	f7ff facd 	bl	13a3c <bt_hci_cmd_create>
		if (!buf) {
   144a2:	4606      	mov	r6, r0
   144a4:	2800      	cmp	r0, #0
   144a6:	d06d      	beq.n	14584 <bt_init+0x2b8>
   144a8:	2104      	movs	r1, #4
   144aa:	3008      	adds	r0, #8
   144ac:	f004 fa24 	bl	188f8 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   144b0:	f8bd 3000 	ldrh.w	r3, [sp]
   144b4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   144b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   144ba:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   144bc:	4622      	mov	r2, r4
   144be:	4631      	mov	r1, r6
   144c0:	f242 0024 	movw	r0, #8228	; 0x2024
   144c4:	f7ff fb04 	bl	13ad0 <bt_hci_cmd_send_sync>
		if (err) {
   144c8:	4604      	mov	r4, r0
   144ca:	2800      	cmp	r0, #0
   144cc:	f47f af74 	bne.w	143b8 <bt_init+0xec>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   144d0:	2108      	movs	r1, #8
   144d2:	f242 0001 	movw	r0, #8193	; 0x2001
   144d6:	f7ff fab1 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   144da:	4604      	mov	r4, r0
   144dc:	2800      	cmp	r0, #0
   144de:	d051      	beq.n	14584 <bt_init+0x2b8>
   144e0:	2108      	movs	r1, #8
   144e2:	4408      	add	r0, r1
   144e4:	f004 fa08 	bl	188f8 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   144e8:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   144ec:	f012 0f02 	tst.w	r2, #2
   144f0:	bf14      	ite	ne
   144f2:	232f      	movne	r3, #47	; 0x2f
   144f4:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   144f6:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   144f8:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   144fc:	bf48      	it	mi
   144fe:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   14502:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   14506:	bf18      	it	ne
   14508:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   1450c:	2200      	movs	r2, #0
   1450e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14510:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14514:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   14516:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   14518:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1451a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1451c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1451e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14520:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   14522:	4621      	mov	r1, r4
   14524:	f242 0001 	movw	r0, #8193	; 0x2001
   14528:	f7ff fad2 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   1452c:	4604      	mov	r4, r0
   1452e:	2800      	cmp	r0, #0
   14530:	f47f af42 	bne.w	143b8 <bt_init+0xec>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14534:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   14538:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1453c:	069a      	lsls	r2, r3, #26
   1453e:	d424      	bmi.n	1458a <bt_init+0x2be>
	if (bt_dev.le.acl_mtu) {
   14540:	b9c9      	cbnz	r1, 14576 <bt_init+0x2aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   14542:	aa01      	add	r2, sp, #4
   14544:	f241 0005 	movw	r0, #4101	; 0x1005
   14548:	f7ff fac2 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   1454c:	4604      	mov	r4, r0
   1454e:	2800      	cmp	r0, #0
   14550:	f47f af32 	bne.w	143b8 <bt_init+0xec>
	if (bt_dev.le.acl_mtu) {
   14554:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   14558:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   1455a:	b94b      	cbnz	r3, 14570 <bt_init+0x2a4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   1455c:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1455e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14562:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   14566:	889a      	ldrh	r2, [r3, #4]
   14568:	4811      	ldr	r0, [pc, #68]	; (145b0 <bt_init+0x2e4>)
   1456a:	4611      	mov	r1, r2
   1456c:	f010 feca 	bl	25304 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   14570:	4620      	mov	r0, r4
   14572:	f004 f8bb 	bl	186ec <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   14576:	2108      	movs	r1, #8
   14578:	f640 4001 	movw	r0, #3073	; 0xc01
   1457c:	f7ff fa5e 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   14580:	4604      	mov	r4, r0
   14582:	b9c8      	cbnz	r0, 145b8 <bt_init+0x2ec>
		return -ENOBUFS;
   14584:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14588:	e716      	b.n	143b8 <bt_init+0xec>
	else if (!bt_dev.le.acl_mtu) {
   1458a:	2900      	cmp	r1, #0
   1458c:	d1f3      	bne.n	14576 <bt_init+0x2aa>
		BT_ERR("ACL BR/EDR buffers not initialized");
   1458e:	4809      	ldr	r0, [pc, #36]	; (145b4 <bt_init+0x2e8>)
   14590:	2145      	movs	r1, #69	; 0x45
   14592:	f00e fd52 	bl	2303a <z_log_minimal_printk>
		return -EIO;
   14596:	f06f 0404 	mvn.w	r4, #4
   1459a:	e70d      	b.n	143b8 <bt_init+0xec>
   1459c:	20000378 	.word	0x20000378
   145a0:	200003e8 	.word	0x200003e8
   145a4:	200003f0 	.word	0x200003f0
   145a8:	000273ba 	.word	0x000273ba
   145ac:	20000448 	.word	0x20000448
   145b0:	20000478 	.word	0x20000478
   145b4:	000273e3 	.word	0x000273e3
   145b8:	2108      	movs	r1, #8
   145ba:	4408      	add	r0, r1
   145bc:	f004 f99c 	bl	188f8 <net_buf_simple_add>
	dst[0] = val;
   145c0:	2310      	movs	r3, #16
   145c2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   145c4:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   145c6:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   145c8:	7043      	strb	r3, [r0, #1]
   145ca:	2602      	movs	r6, #2
   145cc:	2320      	movs	r3, #32
	dst[0] = val;
   145ce:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   145d0:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   145d2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   145d4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   145d6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   145d8:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   145da:	4621      	mov	r1, r4
   145dc:	f640 4001 	movw	r0, #3073	; 0xc01
   145e0:	f7ff fa76 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   145e4:	4604      	mov	r4, r0
   145e6:	2800      	cmp	r0, #0
   145e8:	f47f aee6 	bne.w	143b8 <bt_init+0xec>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   145ec:	4601      	mov	r1, r0
   145ee:	aa01      	add	r2, sp, #4
   145f0:	f64f 4001 	movw	r0, #64513	; 0xfc01
   145f4:	f7ff fa6c 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   145f8:	4604      	mov	r4, r0
   145fa:	b190      	cbz	r0, 14622 <bt_init+0x356>
		BT_WARN("Vendor HCI extensions not available");
   145fc:	4821      	ldr	r0, [pc, #132]	; (14684 <bt_init+0x3b8>)
   145fe:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
   14600:	f00e fd1b 	bl	2303a <z_log_minimal_printk>
	err = bt_id_init();
   14604:	f000 fabc 	bl	14b80 <bt_id_init>
	if (err) {
   14608:	4604      	mov	r4, r0
   1460a:	2800      	cmp	r0, #0
   1460c:	f47f aed4 	bne.w	143b8 <bt_init+0xec>
		err = bt_conn_init();
   14610:	f001 fc82 	bl	15f18 <bt_conn_init>
		if (err) {
   14614:	4604      	mov	r4, r0
   14616:	2800      	cmp	r0, #0
   14618:	f47f aece 	bne.w	143b8 <bt_init+0xec>
	bt_finalize_init();
   1461c:	f7ff fe50 	bl	142c0 <bt_finalize_init>
	return 0;
   14620:	e6ca      	b.n	143b8 <bt_init+0xec>
	net_buf_unref(rsp);
   14622:	9801      	ldr	r0, [sp, #4]
   14624:	f004 f862 	bl	186ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   14628:	4621      	mov	r1, r4
   1462a:	aa01      	add	r2, sp, #4
   1462c:	f64f 4002 	movw	r0, #64514	; 0xfc02
   14630:	f7ff fa4e 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   14634:	4604      	mov	r4, r0
   14636:	b110      	cbz	r0, 1463e <bt_init+0x372>
		BT_WARN("Failed to read supported vendor commands");
   14638:	4813      	ldr	r0, [pc, #76]	; (14688 <bt_init+0x3bc>)
   1463a:	2157      	movs	r1, #87	; 0x57
   1463c:	e7e0      	b.n	14600 <bt_init+0x334>
	rp.cmds = (void *)rsp->data;
   1463e:	9f01      	ldr	r7, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   14640:	4812      	ldr	r0, [pc, #72]	; (1468c <bt_init+0x3c0>)
   14642:	68b9      	ldr	r1, [r7, #8]
   14644:	4632      	mov	r2, r6
   14646:	3101      	adds	r1, #1
   14648:	f00e ff8e 	bl	23568 <memcpy>
	net_buf_unref(rsp);
   1464c:	4638      	mov	r0, r7
   1464e:	f004 f84d 	bl	186ec <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   14652:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   14656:	075b      	lsls	r3, r3, #29
   14658:	d5d4      	bpl.n	14604 <bt_init+0x338>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1465a:	aa01      	add	r2, sp, #4
   1465c:	4621      	mov	r1, r4
   1465e:	f64f 4003 	movw	r0, #64515	; 0xfc03
   14662:	f7ff fa35 	bl	13ad0 <bt_hci_cmd_send_sync>
		if (err) {
   14666:	b110      	cbz	r0, 1466e <bt_init+0x3a2>
			BT_WARN("Failed to read supported vendor features");
   14668:	4809      	ldr	r0, [pc, #36]	; (14690 <bt_init+0x3c4>)
   1466a:	2157      	movs	r1, #87	; 0x57
   1466c:	e7c8      	b.n	14600 <bt_init+0x334>
		rp.feat = (void *)rsp->data;
   1466e:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   14670:	4808      	ldr	r0, [pc, #32]	; (14694 <bt_init+0x3c8>)
   14672:	68a1      	ldr	r1, [r4, #8]
   14674:	2201      	movs	r2, #1
   14676:	4411      	add	r1, r2
   14678:	f00e ff76 	bl	23568 <memcpy>
		net_buf_unref(rsp);
   1467c:	4620      	mov	r0, r4
   1467e:	f004 f835 	bl	186ec <net_buf_unref>
   14682:	e7bf      	b.n	14604 <bt_init+0x338>
   14684:	0002740b 	.word	0x0002740b
   14688:	00027434 	.word	0x00027434
   1468c:	20000431 	.word	0x20000431
   14690:	00027462 	.word	0x00027462
   14694:	20000430 	.word	0x20000430

00014698 <init_work>:
{
   14698:	b510      	push	{r4, lr}
	err = bt_init();
   1469a:	f7ff fe17 	bl	142cc <bt_init>
	if (ready_cb) {
   1469e:	4b03      	ldr	r3, [pc, #12]	; (146ac <init_work+0x14>)
   146a0:	681b      	ldr	r3, [r3, #0]
   146a2:	b113      	cbz	r3, 146aa <init_work+0x12>
}
   146a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   146a8:	4718      	bx	r3
}
   146aa:	bd10      	pop	{r4, pc}
   146ac:	20002724 	.word	0x20002724

000146b0 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   146b0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   146b2:	4d33      	ldr	r5, [pc, #204]	; (14780 <bt_enable+0xd0>)
   146b4:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
{
   146b8:	b088      	sub	sp, #32
   146ba:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   146bc:	b943      	cbnz	r3, 146d0 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
   146be:	4831      	ldr	r0, [pc, #196]	; (14784 <bt_enable+0xd4>)
   146c0:	2145      	movs	r1, #69	; 0x45
   146c2:	f00e fcba 	bl	2303a <z_log_minimal_printk>
		return -ENODEV;
   146c6:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   146ca:	4620      	mov	r0, r4
   146cc:	b008      	add	sp, #32
   146ce:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   146d0:	f06f 0102 	mvn.w	r1, #2
   146d4:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   146d8:	f00e ffeb 	bl	236b2 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   146dc:	2101      	movs	r1, #1
   146de:	f00e ffd9 	bl	23694 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   146e2:	ea10 0401 	ands.w	r4, r0, r1
   146e6:	d147      	bne.n	14778 <bt_enable+0xc8>
	ready_cb = cb;
   146e8:	4b27      	ldr	r3, [pc, #156]	; (14788 <bt_enable+0xd8>)
   146ea:	601e      	str	r6, [r3, #0]
   146ec:	460a      	mov	r2, r1
   146ee:	f505 708c 	add.w	r0, r5, #280	; 0x118
   146f2:	f010 fe07 	bl	25304 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   146f6:	f505 709e 	add.w	r0, r5, #316	; 0x13c
   146fa:	f010 fde1 	bl	252c0 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   146fe:	2200      	movs	r2, #0
   14700:	2300      	movs	r3, #0
   14702:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14706:	f06f 0308 	mvn.w	r3, #8
   1470a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1470e:	e9cd 4400 	strd	r4, r4, [sp]
   14712:	4b1e      	ldr	r3, [pc, #120]	; (1478c <bt_enable+0xdc>)
   14714:	491e      	ldr	r1, [pc, #120]	; (14790 <bt_enable+0xe0>)
   14716:	9404      	str	r4, [sp, #16]
   14718:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1471c:	481d      	ldr	r0, [pc, #116]	; (14794 <bt_enable+0xe4>)
   1471e:	f008 f8df 	bl	1c8e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14722:	491d      	ldr	r1, [pc, #116]	; (14798 <bt_enable+0xe8>)
   14724:	481b      	ldr	r0, [pc, #108]	; (14794 <bt_enable+0xe4>)
   14726:	f010 fda2 	bl	2526e <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1472a:	481c      	ldr	r0, [pc, #112]	; (1479c <bt_enable+0xec>)
   1472c:	f008 ff36 	bl	1d59c <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   14730:	491b      	ldr	r1, [pc, #108]	; (147a0 <bt_enable+0xf0>)
   14732:	481a      	ldr	r0, [pc, #104]	; (1479c <bt_enable+0xec>)
   14734:	9400      	str	r4, [sp, #0]
   14736:	f06f 0307 	mvn.w	r3, #7
   1473a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1473e:	f008 ff43 	bl	1d5c8 <k_work_queue_start>
   14742:	4918      	ldr	r1, [pc, #96]	; (147a4 <bt_enable+0xf4>)
   14744:	4815      	ldr	r0, [pc, #84]	; (1479c <bt_enable+0xec>)
   14746:	f010 fd92 	bl	2526e <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1474a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
   1474e:	68db      	ldr	r3, [r3, #12]
   14750:	4798      	blx	r3
	if (err) {
   14752:	4604      	mov	r4, r0
   14754:	b128      	cbz	r0, 14762 <bt_enable+0xb2>
		BT_ERR("HCI driver open failed (%d)", err);
   14756:	4602      	mov	r2, r0
   14758:	2145      	movs	r1, #69	; 0x45
   1475a:	4813      	ldr	r0, [pc, #76]	; (147a8 <bt_enable+0xf8>)
   1475c:	f00e fc6d 	bl	2303a <z_log_minimal_printk>
		return err;
   14760:	e7b3      	b.n	146ca <bt_enable+0x1a>
	if (!cb) {
   14762:	b926      	cbnz	r6, 1476e <bt_enable+0xbe>
}
   14764:	b008      	add	sp, #32
   14766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   1476a:	f7ff bdaf 	b.w	142cc <bt_init>
	k_work_submit(&bt_dev.init);
   1476e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   14772:	f008 ff0d 	bl	1d590 <k_work_submit>
	return 0;
   14776:	e7a8      	b.n	146ca <bt_enable+0x1a>
		return -EALREADY;
   14778:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1477c:	e7a5      	b.n	146ca <bt_enable+0x1a>
   1477e:	bf00      	nop
   14780:	20000378 	.word	0x20000378
   14784:	00027490 	.word	0x00027490
   14788:	20002724 	.word	0x20002724
   1478c:	00014071 	.word	0x00014071
   14790:	20005e40 	.word	0x20005e40
   14794:	200019a0 	.word	0x200019a0
   14798:	000274ae 	.word	0x000274ae
   1479c:	20001a20 	.word	0x20001a20
   147a0:	20006480 	.word	0x20006480
   147a4:	000274b4 	.word	0x000274b4
   147a8:	000274ba 	.word	0x000274ba

000147ac <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   147ac:	4b04      	ldr	r3, [pc, #16]	; (147c0 <bt_is_ready+0x14>)
   147ae:	f3bf 8f5b 	dmb	ish
   147b2:	6818      	ldr	r0, [r3, #0]
   147b4:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   147b8:	f3c0 0080 	ubfx	r0, r0, #2, #1
   147bc:	4770      	bx	lr
   147be:	bf00      	nop
   147c0:	20000444 	.word	0x20000444

000147c4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   147c4:	4800      	ldr	r0, [pc, #0]	; (147c8 <bt_get_name+0x4>)
   147c6:	4770      	bx	lr
   147c8:	000274db 	.word	0x000274db

000147cc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   147cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   147ce:	4f0a      	ldr	r7, [pc, #40]	; (147f8 <id_find+0x2c>)
{
   147d0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   147d2:	2500      	movs	r5, #0
   147d4:	79fb      	ldrb	r3, [r7, #7]
   147d6:	b2ec      	uxtb	r4, r5
   147d8:	42a3      	cmp	r3, r4
   147da:	d802      	bhi.n	147e2 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   147dc:	f06f 0001 	mvn.w	r0, #1
   147e0:	e009      	b.n	147f6 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   147e2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   147e6:	4439      	add	r1, r7
   147e8:	4630      	mov	r0, r6
   147ea:	f00e fff7 	bl	237dc <bt_addr_le_eq>
   147ee:	3501      	adds	r5, #1
   147f0:	2800      	cmp	r0, #0
   147f2:	d0ef      	beq.n	147d4 <id_find+0x8>
   147f4:	4620      	mov	r0, r4
}
   147f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   147f8:	20000378 	.word	0x20000378

000147fc <set_random_address>:
{
   147fc:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   147fe:	4913      	ldr	r1, [pc, #76]	; (1484c <set_random_address+0x50>)
   14800:	2206      	movs	r2, #6
   14802:	4605      	mov	r5, r0
   14804:	f00e fe89 	bl	2351a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14808:	b1d8      	cbz	r0, 14842 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1480a:	2106      	movs	r1, #6
   1480c:	f242 0005 	movw	r0, #8197	; 0x2005
   14810:	f7ff f914 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   14814:	4604      	mov	r4, r0
   14816:	b1b0      	cbz	r0, 14846 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14818:	2206      	movs	r2, #6
   1481a:	4629      	mov	r1, r5
   1481c:	3008      	adds	r0, #8
   1481e:	f010 f8af 	bl	24980 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   14822:	2200      	movs	r2, #0
   14824:	4621      	mov	r1, r4
   14826:	f242 0005 	movw	r0, #8197	; 0x2005
   1482a:	f7ff f951 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   1482e:	b948      	cbnz	r0, 14844 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   14830:	2206      	movs	r2, #6
   14832:	4806      	ldr	r0, [pc, #24]	; (1484c <set_random_address+0x50>)
   14834:	4629      	mov	r1, r5
   14836:	f00e fe97 	bl	23568 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1483a:	4b05      	ldr	r3, [pc, #20]	; (14850 <set_random_address+0x54>)
   1483c:	2201      	movs	r2, #1
   1483e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   14842:	2000      	movs	r0, #0
}
   14844:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   14846:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1484a:	e7fb      	b.n	14844 <set_random_address+0x48>
   1484c:	200003d9 	.word	0x200003d9
   14850:	20000378 	.word	0x20000378

00014854 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14854:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14856:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   14858:	460d      	mov	r5, r1
   1485a:	b179      	cbz	r1, 1487c <id_create.constprop.0+0x28>
   1485c:	4914      	ldr	r1, [pc, #80]	; (148b0 <id_create.constprop.0+0x5c>)
   1485e:	4628      	mov	r0, r5
   14860:	f00e ffbc 	bl	237dc <bt_addr_le_eq>
   14864:	b950      	cbnz	r0, 1487c <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   14866:	4813      	ldr	r0, [pc, #76]	; (148b4 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   14868:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1486c:	2207      	movs	r2, #7
   1486e:	4629      	mov	r1, r5
   14870:	4420      	add	r0, r4
   14872:	f00e fe79 	bl	23568 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   14876:	2000      	movs	r0, #0
}
   14878:	b003      	add	sp, #12
   1487a:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1487c:	4668      	mov	r0, sp
   1487e:	f00e fee5 	bl	2364c <bt_addr_le_create_static>
			if (err) {
   14882:	2800      	cmp	r0, #0
   14884:	d1f8      	bne.n	14878 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   14886:	4668      	mov	r0, sp
   14888:	f7ff ffa0 	bl	147cc <id_find>
   1488c:	2800      	cmp	r0, #0
   1488e:	daf5      	bge.n	1487c <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   14890:	4b08      	ldr	r3, [pc, #32]	; (148b4 <id_create.constprop.0+0x60>)
   14892:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14896:	441c      	add	r4, r3
   14898:	2207      	movs	r2, #7
   1489a:	4669      	mov	r1, sp
   1489c:	4620      	mov	r0, r4
   1489e:	f00e fe63 	bl	23568 <memcpy>
		if (addr) {
   148a2:	2d00      	cmp	r5, #0
   148a4:	d0e7      	beq.n	14876 <id_create.constprop.0+0x22>
   148a6:	2207      	movs	r2, #7
   148a8:	4621      	mov	r1, r4
   148aa:	4628      	mov	r0, r5
   148ac:	e7e1      	b.n	14872 <id_create.constprop.0+0x1e>
   148ae:	bf00      	nop
   148b0:	00026f2f 	.word	0x00026f2f
   148b4:	20000378 	.word	0x20000378

000148b8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   148b8:	b570      	push	{r4, r5, r6, lr}
   148ba:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   148bc:	4604      	mov	r4, r0
   148be:	b918      	cbnz	r0, 148c8 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   148c0:	b1e5      	cbz	r5, 148fc <bt_id_create+0x44>
			return -EINVAL;
   148c2:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   148c6:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   148c8:	491e      	ldr	r1, [pc, #120]	; (14944 <bt_id_create+0x8c>)
   148ca:	f00e ff87 	bl	237dc <bt_addr_le_eq>
   148ce:	2800      	cmp	r0, #0
   148d0:	d1f6      	bne.n	148c0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   148d2:	7823      	ldrb	r3, [r4, #0]
   148d4:	2b01      	cmp	r3, #1
   148d6:	d104      	bne.n	148e2 <bt_id_create+0x2a>
   148d8:	79a3      	ldrb	r3, [r4, #6]
   148da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   148de:	2bc0      	cmp	r3, #192	; 0xc0
   148e0:	d004      	beq.n	148ec <bt_id_create+0x34>
			BT_ERR("Only static random identity address supported");
   148e2:	4819      	ldr	r0, [pc, #100]	; (14948 <bt_id_create+0x90>)
   148e4:	2145      	movs	r1, #69	; 0x45
   148e6:	f00e fba8 	bl	2303a <z_log_minimal_printk>
			return -EINVAL;
   148ea:	e7ea      	b.n	148c2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   148ec:	4620      	mov	r0, r4
   148ee:	f7ff ff6d 	bl	147cc <id_find>
   148f2:	2800      	cmp	r0, #0
   148f4:	dbe4      	blt.n	148c0 <bt_id_create+0x8>
			return -EALREADY;
   148f6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   148fa:	e7e4      	b.n	148c6 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   148fc:	4d13      	ldr	r5, [pc, #76]	; (1494c <bt_id_create+0x94>)
   148fe:	79eb      	ldrb	r3, [r5, #7]
   14900:	2b01      	cmp	r3, #1
   14902:	d01c      	beq.n	1493e <bt_id_create+0x86>
   14904:	f3bf 8f5b 	dmb	ish
   14908:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   1490c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14910:	07db      	lsls	r3, r3, #31
   14912:	d50b      	bpl.n	1492c <bt_id_create+0x74>
	new_id = bt_dev.id_count;
   14914:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   14916:	4621      	mov	r1, r4
   14918:	4630      	mov	r0, r6
   1491a:	f7ff ff9b 	bl	14854 <id_create.constprop.0>
	if (err) {
   1491e:	2800      	cmp	r0, #0
   14920:	d1d1      	bne.n	148c6 <bt_id_create+0xe>
		bt_dev.id_count++;
   14922:	79eb      	ldrb	r3, [r5, #7]
   14924:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   14926:	4630      	mov	r0, r6
		bt_dev.id_count++;
   14928:	71eb      	strb	r3, [r5, #7]
	return new_id;
   1492a:	e7cc      	b.n	148c6 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   1492c:	2c00      	cmp	r4, #0
   1492e:	d0c8      	beq.n	148c2 <bt_id_create+0xa>
   14930:	4904      	ldr	r1, [pc, #16]	; (14944 <bt_id_create+0x8c>)
   14932:	4620      	mov	r0, r4
   14934:	f00e ff52 	bl	237dc <bt_addr_le_eq>
   14938:	2800      	cmp	r0, #0
   1493a:	d0eb      	beq.n	14914 <bt_id_create+0x5c>
   1493c:	e7c1      	b.n	148c2 <bt_id_create+0xa>
		return -ENOMEM;
   1493e:	f06f 000b 	mvn.w	r0, #11
   14942:	e7c0      	b.n	148c6 <bt_id_create+0xe>
   14944:	00026f2f 	.word	0x00026f2f
   14948:	000274ee 	.word	0x000274ee
   1494c:	20000378 	.word	0x20000378

00014950 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   14950:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   14952:	4604      	mov	r4, r0
   14954:	b930      	cbnz	r0, 14964 <bt_id_read_public_addr+0x14>
		BT_WARN("Invalid input parameters");
   14956:	4818      	ldr	r0, [pc, #96]	; (149b8 <bt_id_read_public_addr+0x68>)
   14958:	2157      	movs	r1, #87	; 0x57
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read public address");
   1495a:	f00e fb6e 	bl	2303a <z_log_minimal_printk>
		return 0U;
   1495e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   14960:	b002      	add	sp, #8
   14962:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   14964:	aa01      	add	r2, sp, #4
   14966:	2100      	movs	r1, #0
   14968:	f241 0009 	movw	r0, #4105	; 0x1009
   1496c:	f7ff f8b0 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   14970:	4606      	mov	r6, r0
   14972:	b110      	cbz	r0, 1497a <bt_id_read_public_addr+0x2a>
		BT_WARN("Failed to read public address");
   14974:	4811      	ldr	r0, [pc, #68]	; (149bc <bt_id_read_public_addr+0x6c>)
   14976:	2157      	movs	r1, #87	; 0x57
   14978:	e7ef      	b.n	1495a <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   1497a:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   1497c:	4910      	ldr	r1, [pc, #64]	; (149c0 <bt_id_read_public_addr+0x70>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1497e:	689d      	ldr	r5, [r3, #8]
   14980:	3501      	adds	r5, #1
   14982:	2206      	movs	r2, #6
   14984:	4628      	mov	r0, r5
   14986:	f00e fdc8 	bl	2351a <memcmp>
   1498a:	b918      	cbnz	r0, 14994 <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
   1498c:	9801      	ldr	r0, [sp, #4]
   1498e:	f003 fead 	bl	186ec <net_buf_unref>
		return 0U;
   14992:	e7e4      	b.n	1495e <bt_id_read_public_addr+0xe>
   14994:	490b      	ldr	r1, [pc, #44]	; (149c4 <bt_id_read_public_addr+0x74>)
   14996:	2206      	movs	r2, #6
   14998:	4628      	mov	r0, r5
   1499a:	f00e fdbe 	bl	2351a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1499e:	2800      	cmp	r0, #0
   149a0:	d0f4      	beq.n	1498c <bt_id_read_public_addr+0x3c>
	memcpy(dst, src, sizeof(*dst));
   149a2:	2206      	movs	r2, #6
   149a4:	4629      	mov	r1, r5
   149a6:	1c60      	adds	r0, r4, #1
   149a8:	f00e fdde 	bl	23568 <memcpy>
	net_buf_unref(rsp);
   149ac:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   149ae:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   149b0:	f003 fe9c 	bl	186ec <net_buf_unref>
	return 1U;
   149b4:	2001      	movs	r0, #1
   149b6:	e7d3      	b.n	14960 <bt_id_read_public_addr+0x10>
   149b8:	00027521 	.word	0x00027521
   149bc:	0002753f 	.word	0x0002753f
   149c0:	00026f3c 	.word	0x00026f3c
   149c4:	00026f36 	.word	0x00026f36

000149c8 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   149c8:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   149ca:	4668      	mov	r0, sp
   149cc:	f7ff ffc0 	bl	14950 <bt_id_read_public_addr>
   149d0:	4b04      	ldr	r3, [pc, #16]	; (149e4 <bt_setup_public_id_addr+0x1c>)
   149d2:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   149d4:	b118      	cbz	r0, 149de <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   149d6:	4669      	mov	r1, sp
   149d8:	2000      	movs	r0, #0
   149da:	f7ff ff3b 	bl	14854 <id_create.constprop.0>
}
   149de:	b003      	add	sp, #12
   149e0:	f85d fb04 	ldr.w	pc, [sp], #4
   149e4:	20000378 	.word	0x20000378

000149e8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   149e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   149ec:	4b1c      	ldr	r3, [pc, #112]	; (14a60 <bt_read_static_addr+0x78>)
   149ee:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   149f2:	07db      	lsls	r3, r3, #31
{
   149f4:	4607      	mov	r7, r0
   149f6:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   149f8:	d408      	bmi.n	14a0c <bt_read_static_addr+0x24>
		BT_WARN("Read Static Addresses command not available");
   149fa:	481a      	ldr	r0, [pc, #104]	; (14a64 <bt_read_static_addr+0x7c>)
   149fc:	2157      	movs	r1, #87	; 0x57
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		BT_WARN("Failed to read static addresses");
   149fe:	f00e fb1c 	bl	2303a <z_log_minimal_printk>
		return 0;
   14a02:	2500      	movs	r5, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   14a04:	4628      	mov	r0, r5
   14a06:	b002      	add	sp, #8
   14a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   14a0c:	aa01      	add	r2, sp, #4
   14a0e:	2100      	movs	r1, #0
   14a10:	f64f 4009 	movw	r0, #64521	; 0xfc09
   14a14:	f7ff f85c 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   14a18:	4604      	mov	r4, r0
   14a1a:	b110      	cbz	r0, 14a22 <bt_read_static_addr+0x3a>
		BT_WARN("Failed to read static addresses");
   14a1c:	4812      	ldr	r0, [pc, #72]	; (14a68 <bt_read_static_addr+0x80>)
   14a1e:	2157      	movs	r1, #87	; 0x57
   14a20:	e7ed      	b.n	149fe <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   14a22:	9b01      	ldr	r3, [sp, #4]
   14a24:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   14a26:	7875      	ldrb	r5, [r6, #1]
   14a28:	4545      	cmp	r5, r8
   14a2a:	bf28      	it	cs
   14a2c:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   14a2e:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   14a30:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   14a34:	42a5      	cmp	r5, r4
   14a36:	dc09      	bgt.n	14a4c <bt_read_static_addr+0x64>
	net_buf_unref(rsp);
   14a38:	9801      	ldr	r0, [sp, #4]
   14a3a:	f003 fe57 	bl	186ec <net_buf_unref>
	if (!cnt) {
   14a3e:	2d00      	cmp	r5, #0
   14a40:	d1e0      	bne.n	14a04 <bt_read_static_addr+0x1c>
		BT_WARN("No static addresses stored in controller");
   14a42:	480a      	ldr	r0, [pc, #40]	; (14a6c <bt_read_static_addr+0x84>)
   14a44:	2157      	movs	r1, #87	; 0x57
   14a46:	f00e faf8 	bl	2303a <z_log_minimal_printk>
   14a4a:	e7db      	b.n	14a04 <bt_read_static_addr+0x1c>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   14a4c:	4631      	mov	r1, r6
   14a4e:	fb08 7004 	mla	r0, r8, r4, r7
   14a52:	2216      	movs	r2, #22
   14a54:	f00e fd88 	bl	23568 <memcpy>
	for (i = 0; i < cnt; i++) {
   14a58:	3401      	adds	r4, #1
   14a5a:	3616      	adds	r6, #22
   14a5c:	e7ea      	b.n	14a34 <bt_read_static_addr+0x4c>
   14a5e:	bf00      	nop
   14a60:	20000378 	.word	0x20000378
   14a64:	00027562 	.word	0x00027562
   14a68:	00027593 	.word	0x00027593
   14a6c:	000275b8 	.word	0x000275b8

00014a70 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   14a70:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   14a72:	4e15      	ldr	r6, [pc, #84]	; (14ac8 <bt_setup_random_id_addr+0x58>)
   14a74:	79f4      	ldrb	r4, [r6, #7]
{
   14a76:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   14a78:	b92c      	cbnz	r4, 14a86 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   14a7a:	2101      	movs	r1, #1
   14a7c:	a802      	add	r0, sp, #8
   14a7e:	f7ff ffb3 	bl	149e8 <bt_read_static_addr>
   14a82:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   14a84:	b9c8      	cbnz	r0, 14aba <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   14a86:	2100      	movs	r1, #0
   14a88:	4608      	mov	r0, r1
}
   14a8a:	b009      	add	sp, #36	; 0x24
   14a8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   14a90:	f7ff bf12 	b.w	148b8 <bt_id_create>
   14a94:	ab02      	add	r3, sp, #8
   14a96:	fb07 3105 	mla	r1, r7, r5, r3
   14a9a:	2206      	movs	r2, #6
   14a9c:	f10d 0001 	add.w	r0, sp, #1
   14aa0:	f00e fd62 	bl	23568 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   14aa4:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   14aa6:	4669      	mov	r1, sp
   14aa8:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   14aaa:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   14aae:	f7ff fed1 	bl	14854 <id_create.constprop.0>
				if (err) {
   14ab2:	3401      	adds	r4, #1
   14ab4:	b110      	cbz	r0, 14abc <bt_setup_random_id_addr+0x4c>
}
   14ab6:	b009      	add	sp, #36	; 0x24
   14ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   14aba:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   14abc:	79f3      	ldrb	r3, [r6, #7]
   14abe:	b2e5      	uxtb	r5, r4
   14ac0:	42ab      	cmp	r3, r5
   14ac2:	d8e7      	bhi.n	14a94 <bt_setup_random_id_addr+0x24>
			return 0;
   14ac4:	2000      	movs	r0, #0
   14ac6:	e7f6      	b.n	14ab6 <bt_setup_random_id_addr+0x46>
   14ac8:	20000378 	.word	0x20000378

00014acc <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   14acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ad0:	4690      	mov	r8, r2
   14ad2:	460e      	mov	r6, r1
   14ad4:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   14ad6:	4602      	mov	r2, r0
   14ad8:	2800      	cmp	r0, #0
   14ada:	d04b      	beq.n	14b74 <bt_id_set_adv_own_addr+0xa8>
   14adc:	2b00      	cmp	r3, #0
   14ade:	d049      	beq.n	14b74 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14ae0:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   14ae2:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14ae4:	d531      	bpl.n	14b4a <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   14ae6:	4f25      	ldr	r7, [pc, #148]	; (14b7c <bt_id_set_adv_own_addr+0xb0>)
   14ae8:	f1b8 0f00 	cmp.w	r8, #0
   14aec:	d013      	beq.n	14b16 <bt_id_set_adv_own_addr+0x4a>
   14aee:	0688      	lsls	r0, r1, #26
   14af0:	d40a      	bmi.n	14b08 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14af2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   14af6:	5cfb      	ldrb	r3, [r7, r3]
   14af8:	2b01      	cmp	r3, #1
   14afa:	d015      	beq.n	14b28 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   14afc:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14afe:	06b2      	lsls	r2, r6, #26
   14b00:	d50f      	bpl.n	14b22 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14b02:	f043 0302 	orr.w	r3, r3, #2
   14b06:	e00b      	b.n	14b20 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   14b08:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   14b0c:	0659      	lsls	r1, r3, #25
   14b0e:	d4f0      	bmi.n	14af2 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   14b10:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14b14:	e006      	b.n	14b24 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14b16:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   14b1a:	5cfb      	ldrb	r3, [r7, r3]
   14b1c:	2b01      	cmp	r3, #1
   14b1e:	d003      	beq.n	14b28 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   14b20:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   14b22:	2000      	movs	r0, #0
}
   14b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14b28:	2107      	movs	r1, #7
   14b2a:	fb01 7104 	mla	r1, r1, r4, r7
   14b2e:	3101      	adds	r1, #1
   14b30:	4610      	mov	r0, r2
   14b32:	f00e fe60 	bl	237f6 <bt_id_set_adv_random_addr>
				if (err) {
   14b36:	2800      	cmp	r0, #0
   14b38:	d1f4      	bne.n	14b24 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   14b3a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14b3e:	5d3b      	ldrb	r3, [r7, r4]
   14b40:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14b42:	f1b8 0f00 	cmp.w	r8, #0
   14b46:	d0ec      	beq.n	14b22 <bt_id_set_adv_own_addr+0x56>
   14b48:	e7d9      	b.n	14afe <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   14b4a:	074b      	lsls	r3, r1, #29
   14b4c:	d50e      	bpl.n	14b6c <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14b4e:	4e0b      	ldr	r6, [pc, #44]	; (14b7c <bt_id_set_adv_own_addr+0xb0>)
   14b50:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   14b54:	5df3      	ldrb	r3, [r6, r7]
   14b56:	2b01      	cmp	r3, #1
   14b58:	d1e2      	bne.n	14b20 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14b5a:	2107      	movs	r1, #7
   14b5c:	fb11 3104 	smlabb	r1, r1, r4, r3
   14b60:	4431      	add	r1, r6
   14b62:	f00e fe48 	bl	237f6 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   14b66:	5df3      	ldrb	r3, [r6, r7]
   14b68:	702b      	strb	r3, [r5, #0]
		if (err) {
   14b6a:	e7db      	b.n	14b24 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   14b6c:	f00e fe4b 	bl	23806 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14b70:	2301      	movs	r3, #1
   14b72:	e7f9      	b.n	14b68 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   14b74:	f06f 0015 	mvn.w	r0, #21
   14b78:	e7d4      	b.n	14b24 <bt_id_set_adv_own_addr+0x58>
   14b7a:	bf00      	nop
   14b7c:	20000378 	.word	0x20000378

00014b80 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   14b80:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14b82:	4d10      	ldr	r5, [pc, #64]	; (14bc4 <bt_id_init+0x44>)
   14b84:	79eb      	ldrb	r3, [r5, #7]
   14b86:	b113      	cbz	r3, 14b8e <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   14b88:	2400      	movs	r4, #0
}
   14b8a:	4620      	mov	r0, r4
   14b8c:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_setup_public_id_addr();
   14b8e:	f7ff ff1b 	bl	149c8 <bt_setup_public_id_addr>
		if (err) {
   14b92:	4604      	mov	r4, r0
   14b94:	b120      	cbz	r0, 14ba0 <bt_id_init+0x20>
			BT_ERR("Unable to set identity address");
   14b96:	480c      	ldr	r0, [pc, #48]	; (14bc8 <bt_id_init+0x48>)
   14b98:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to set random address");
   14b9a:	f00e fa4e 	bl	2303a <z_log_minimal_printk>
			return err;
   14b9e:	e7f4      	b.n	14b8a <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14ba0:	79eb      	ldrb	r3, [r5, #7]
   14ba2:	2b00      	cmp	r3, #0
   14ba4:	d1f0      	bne.n	14b88 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   14ba6:	f7ff ff63 	bl	14a70 <bt_setup_random_id_addr>
		if (err) {
   14baa:	4604      	mov	r4, r0
   14bac:	2800      	cmp	r0, #0
   14bae:	d1f2      	bne.n	14b96 <bt_id_init+0x16>
		err = set_random_address(&bt_dev.id_addr[0].a);
   14bb0:	1c68      	adds	r0, r5, #1
   14bb2:	f7ff fe23 	bl	147fc <set_random_address>
		if (err) {
   14bb6:	4604      	mov	r4, r0
   14bb8:	2800      	cmp	r0, #0
   14bba:	d0e5      	beq.n	14b88 <bt_id_init+0x8>
			BT_ERR("Unable to set random address");
   14bbc:	4803      	ldr	r0, [pc, #12]	; (14bcc <bt_id_init+0x4c>)
   14bbe:	2145      	movs	r1, #69	; 0x45
   14bc0:	e7eb      	b.n	14b9a <bt_id_init+0x1a>
   14bc2:	bf00      	nop
   14bc4:	20000378 	.word	0x20000378
   14bc8:	000275e6 	.word	0x000275e6
   14bcc:	0002760a 	.word	0x0002760a

00014bd0 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   14bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bd4:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   14bd6:	2120      	movs	r1, #32
{
   14bd8:	9000      	str	r0, [sp, #0]
   14bda:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   14bdc:	f7fe ff2e 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   14be0:	4605      	mov	r5, r0
   14be2:	2800      	cmp	r0, #0
   14be4:	d054      	beq.n	14c90 <hci_set_ad+0xc0>
	return net_buf_simple_add(&buf->b, len);
   14be6:	2120      	movs	r1, #32
   14be8:	3008      	adds	r0, #8
   14bea:	f003 fe85 	bl	188f8 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   14bee:	2220      	movs	r2, #32
   14bf0:	2100      	movs	r1, #0
   14bf2:	4681      	mov	r9, r0
   14bf4:	f00e fcc3 	bl	2357e <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   14bf8:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   14bfc:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   14c00:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   14c02:	f8d4 8000 	ldr.w	r8, [r4]
   14c06:	2300      	movs	r3, #0
   14c08:	6862      	ldr	r2, [r4, #4]
   14c0a:	4293      	cmp	r3, r2
   14c0c:	d30c      	bcc.n	14c28 <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   14c0e:	3408      	adds	r4, #8
   14c10:	45a2      	cmp	sl, r4
   14c12:	d1f6      	bne.n	14c02 <hci_set_ad+0x32>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   14c14:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   14c16:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   14c1a:	2200      	movs	r2, #0
   14c1c:	4629      	mov	r1, r5
}
   14c1e:	b003      	add	sp, #12
   14c20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   14c24:	f7fe bf54 	b.w	13ad0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   14c28:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   14c2c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   14c30:	1cb0      	adds	r0, r6, #2
   14c32:	1811      	adds	r1, r2, r0
   14c34:	291f      	cmp	r1, #31
   14c36:	d914      	bls.n	14c62 <hci_set_ad+0x92>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   14c38:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   14c3c:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   14c40:	d101      	bne.n	14c46 <hci_set_ad+0x76>
   14c42:	2a00      	cmp	r2, #0
   14c44:	dc0b      	bgt.n	14c5e <hci_set_ad+0x8e>
					BT_ERR("Too big advertising data");
   14c46:	4814      	ldr	r0, [pc, #80]	; (14c98 <hci_set_ad+0xc8>)
   14c48:	2145      	movs	r1, #69	; 0x45
   14c4a:	f00e f9f6 	bl	2303a <z_log_minimal_printk>
		net_buf_unref(buf);
   14c4e:	4628      	mov	r0, r5
   14c50:	f003 fd4c 	bl	186ec <net_buf_unref>
					return -EINVAL;
   14c54:	f06f 0015 	mvn.w	r0, #21
}
   14c58:	b003      	add	sp, #12
   14c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   14c5e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   14c62:	b2d7      	uxtb	r7, r2
   14c64:	1c79      	adds	r1, r7, #1
   14c66:	f80b 1006 	strb.w	r1, [fp, r6]
   14c6a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   14c6c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   14c6e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   14c72:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   14c76:	f8d8 1004 	ldr.w	r1, [r8, #4]
   14c7a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   14c7c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   14c7e:	f00e fc73 	bl	23568 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   14c82:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   14c84:	4437      	add	r7, r6
   14c86:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   14c88:	3301      	adds	r3, #1
   14c8a:	f108 0808 	add.w	r8, r8, #8
   14c8e:	e7bb      	b.n	14c08 <hci_set_ad+0x38>
		return -ENOBUFS;
   14c90:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14c94:	e7e0      	b.n	14c58 <hci_set_ad+0x88>
   14c96:	bf00      	nop
   14c98:	00027632 	.word	0x00027632

00014c9c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   14c9c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   14c9e:	4605      	mov	r5, r0
   14ca0:	4b16      	ldr	r3, [pc, #88]	; (14cfc <le_adv_start_add_conn+0x60>)
   14ca2:	f815 2b09 	ldrb.w	r2, [r5], #9
   14ca6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   14caa:	4604      	mov	r4, r0
   14cac:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   14cae:	2207      	movs	r2, #7
   14cb0:	4913      	ldr	r1, [pc, #76]	; (14d00 <le_adv_start_add_conn+0x64>)
   14cb2:	4628      	mov	r0, r5
   14cb4:	f00e fc31 	bl	2351a <memcmp>
   14cb8:	4603      	mov	r3, r0
   14cba:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14cbc:	b96b      	cbnz	r3, 14cda <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   14cbe:	4911      	ldr	r1, [pc, #68]	; (14d04 <le_adv_start_add_conn+0x68>)
   14cc0:	f000 ff54 	bl	15b6c <bt_conn_add_le>
		if (!conn) {
   14cc4:	4604      	mov	r4, r0
   14cc6:	b910      	cbnz	r0, 14cce <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   14cc8:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   14ccc:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   14cce:	2104      	movs	r1, #4
   14cd0:	f000 fd72 	bl	157b8 <bt_conn_set_state>
		*out_conn = conn;
   14cd4:	6034      	str	r4, [r6, #0]
		return 0;
   14cd6:	2000      	movs	r0, #0
   14cd8:	e7f8      	b.n	14ccc <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   14cda:	4629      	mov	r1, r5
   14cdc:	f000 ff84 	bl	15be8 <bt_conn_exists_le>
   14ce0:	b940      	cbnz	r0, 14cf4 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   14ce2:	7820      	ldrb	r0, [r4, #0]
   14ce4:	4629      	mov	r1, r5
   14ce6:	f000 ff41 	bl	15b6c <bt_conn_add_le>
	if (!conn) {
   14cea:	4604      	mov	r4, r0
   14cec:	2800      	cmp	r0, #0
   14cee:	d0eb      	beq.n	14cc8 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   14cf0:	2105      	movs	r1, #5
   14cf2:	e7ed      	b.n	14cd0 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   14cf4:	f06f 0015 	mvn.w	r0, #21
   14cf8:	e7e8      	b.n	14ccc <le_adv_start_add_conn+0x30>
   14cfa:	bf00      	nop
   14cfc:	20000378 	.word	0x20000378
   14d00:	00026f2f 	.word	0x00026f2f
   14d04:	00026f28 	.word	0x00026f28

00014d08 <valid_adv_param>:
{
   14d08:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14d0a:	6843      	ldr	r3, [r0, #4]
{
   14d0c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14d0e:	0558      	lsls	r0, r3, #21
   14d10:	d501      	bpl.n	14d16 <valid_adv_param+0xe>
		return false;
   14d12:	2000      	movs	r0, #0
}
   14d14:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14d16:	6922      	ldr	r2, [r4, #16]
   14d18:	b10a      	cbz	r2, 14d1e <valid_adv_param+0x16>
   14d1a:	07d9      	lsls	r1, r3, #31
   14d1c:	d5f9      	bpl.n	14d12 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   14d1e:	4d19      	ldr	r5, [pc, #100]	; (14d84 <valid_adv_param+0x7c>)
   14d20:	7820      	ldrb	r0, [r4, #0]
   14d22:	79eb      	ldrb	r3, [r5, #7]
   14d24:	4283      	cmp	r3, r0
   14d26:	d9f4      	bls.n	14d12 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   14d28:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14d2c:	4916      	ldr	r1, [pc, #88]	; (14d88 <valid_adv_param+0x80>)
   14d2e:	2207      	movs	r2, #7
   14d30:	4428      	add	r0, r5
   14d32:	f00e fbf2 	bl	2351a <memcmp>
	if (param->id >= bt_dev.id_count ||
   14d36:	2800      	cmp	r0, #0
   14d38:	d0eb      	beq.n	14d12 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14d3a:	6860      	ldr	r0, [r4, #4]
   14d3c:	07c2      	lsls	r2, r0, #31
   14d3e:	d406      	bmi.n	14d4e <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   14d40:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   14d44:	2b08      	cmp	r3, #8
   14d46:	d802      	bhi.n	14d4e <valid_adv_param+0x46>
   14d48:	68a3      	ldr	r3, [r4, #8]
   14d4a:	2b9f      	cmp	r3, #159	; 0x9f
   14d4c:	d9e1      	bls.n	14d12 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   14d4e:	f010 0f30 	tst.w	r0, #48	; 0x30
   14d52:	d002      	beq.n	14d5a <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   14d54:	6923      	ldr	r3, [r4, #16]
   14d56:	2b00      	cmp	r3, #0
   14d58:	d0db      	beq.n	14d12 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   14d5a:	06c3      	lsls	r3, r0, #27
   14d5c:	d401      	bmi.n	14d62 <valid_adv_param+0x5a>
   14d5e:	6923      	ldr	r3, [r4, #16]
   14d60:	b943      	cbnz	r3, 14d74 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   14d62:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   14d66:	429a      	cmp	r2, r3
   14d68:	d8d3      	bhi.n	14d12 <valid_adv_param+0xa>
   14d6a:	2a1f      	cmp	r2, #31
   14d6c:	d9d1      	bls.n	14d12 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   14d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   14d72:	d8ce      	bhi.n	14d12 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   14d74:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   14d78:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   14d7c:	bf18      	it	ne
   14d7e:	2001      	movne	r0, #1
   14d80:	e7c8      	b.n	14d14 <valid_adv_param+0xc>
   14d82:	bf00      	nop
   14d84:	20000378 	.word	0x20000378
   14d88:	00026f2f 	.word	0x00026f2f

00014d8c <bt_le_adv_lookup_legacy>:
}
   14d8c:	4800      	ldr	r0, [pc, #0]	; (14d90 <bt_le_adv_lookup_legacy+0x4>)
   14d8e:	4770      	bx	lr
   14d90:	20000390 	.word	0x20000390

00014d94 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   14d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   14d98:	f8d1 9010 	ldr.w	r9, [r1, #16]
{
   14d9c:	b08d      	sub	sp, #52	; 0x34
   14d9e:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   14da0:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   14da2:	ebb9 0603 	subs.w	r6, r9, r3
{
   14da6:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14da8:	4890      	ldr	r0, [pc, #576]	; (14fec <bt_le_adv_start_legacy+0x258>)
   14daa:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   14dac:	bf18      	it	ne
   14dae:	2601      	movne	r6, #1
	struct bt_conn *conn = NULL;
   14db0:	9307      	str	r3, [sp, #28]
   14db2:	f00e fd52 	bl	2385a <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14db6:	0742      	lsls	r2, r0, #29
{
   14db8:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14dba:	f140 810b 	bpl.w	14fd4 <bt_le_adv_start_legacy+0x240>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   14dbe:	4608      	mov	r0, r1
   14dc0:	f7ff ffa2 	bl	14d08 <valid_adv_param>
   14dc4:	b928      	cbnz	r0, 14dd2 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   14dc6:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   14dca:	4658      	mov	r0, fp
   14dcc:	b00d      	add	sp, #52	; 0x34
   14dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   14dd2:	4620      	mov	r0, r4
   14dd4:	f00e fd2e 	bl	23834 <bt_id_adv_random_addr_check>
   14dd8:	4680      	mov	r8, r0
   14dda:	2800      	cmp	r0, #0
   14ddc:	d0f3      	beq.n	14dc6 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14dde:	f105 0710 	add.w	r7, r5, #16
   14de2:	4638      	mov	r0, r7
   14de4:	f00e fd39 	bl	2385a <atomic_get>
   14de8:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14dea:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
   14dee:	f100 80f4 	bmi.w	14fda <bt_le_adv_start_legacy+0x246>
	(void)memset(&set_param, 0, sizeof(set_param));
   14df2:	220f      	movs	r2, #15
   14df4:	4659      	mov	r1, fp
   14df6:	a808      	add	r0, sp, #32
   14df8:	f00e fbc1 	bl	2357e <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14dfc:	68a3      	ldr	r3, [r4, #8]
   14dfe:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14e02:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   14e04:	68e3      	ldr	r3, [r4, #12]
   14e06:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   14e0a:	f00e fd17 	bl	2383c <get_adv_channel_map>
	if (adv->id != param->id) {
   14e0e:	782a      	ldrb	r2, [r5, #0]
   14e10:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14e12:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   14e16:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   14e18:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   14e1c:	d004      	beq.n	14e28 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14e1e:	4873      	ldr	r0, [pc, #460]	; (14fec <bt_le_adv_start_legacy+0x258>)
   14e20:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   14e24:	f00e fd1f 	bl	23866 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   14e28:	4a71      	ldr	r2, [pc, #452]	; (14ff0 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   14e2a:	7823      	ldrb	r3, [r4, #0]
   14e2c:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   14e2e:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   14e32:	6861      	ldr	r1, [r4, #4]
   14e34:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   14e38:	4632      	mov	r2, r6
   14e3a:	4628      	mov	r0, r5
   14e3c:	f7ff fe46 	bl	14acc <bt_id_set_adv_own_addr>
	if (err) {
   14e40:	4683      	mov	fp, r0
   14e42:	2800      	cmp	r0, #0
   14e44:	d1c1      	bne.n	14dca <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   14e46:	f105 0009 	add.w	r0, r5, #9
	memcpy(dst, src, sizeof(*dst));
   14e4a:	2207      	movs	r2, #7
	if (dir_adv) {
   14e4c:	f1b9 0f00 	cmp.w	r9, #0
   14e50:	d013      	beq.n	14e7a <bt_le_adv_start_legacy+0xe6>
   14e52:	6921      	ldr	r1, [r4, #16]
   14e54:	f00e fb88 	bl	23568 <memcpy>
	name_type = get_adv_name_type_param(param);
   14e58:	4620      	mov	r0, r4
   14e5a:	f00e fda1 	bl	239a0 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14e5e:	6862      	ldr	r2, [r4, #4]
	name_type = get_adv_name_type_param(param);
   14e60:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14e62:	07d0      	lsls	r0, r2, #31
   14e64:	d416      	bmi.n	14e94 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   14e66:	0592      	lsls	r2, r2, #22
   14e68:	d403      	bmi.n	14e72 <bt_le_adv_start_legacy+0xde>
   14e6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14e6c:	b90b      	cbnz	r3, 14e72 <bt_le_adv_start_legacy+0xde>
   14e6e:	2e02      	cmp	r6, #2
   14e70:	d152      	bne.n	14f18 <bt_le_adv_start_legacy+0x184>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   14e72:	2302      	movs	r3, #2
   14e74:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14e78:	e01a      	b.n	14eb0 <bt_le_adv_start_legacy+0x11c>
   14e7a:	495e      	ldr	r1, [pc, #376]	; (14ff4 <bt_le_adv_start_legacy+0x260>)
   14e7c:	f00e fb74 	bl	23568 <memcpy>
	name_type = get_adv_name_type_param(param);
   14e80:	4620      	mov	r0, r4
   14e82:	f00e fd8d 	bl	239a0 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14e86:	6862      	ldr	r2, [r4, #4]
   14e88:	07d1      	lsls	r1, r2, #31
	name_type = get_adv_name_type_param(param);
   14e8a:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14e8c:	d5eb      	bpl.n	14e66 <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   14e8e:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
   14e92:	e00d      	b.n	14eb0 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   14e94:	f012 0f10 	tst.w	r2, #16
   14e98:	bf0c      	ite	eq
   14e9a:	2201      	moveq	r2, #1
   14e9c:	2204      	movne	r2, #4
   14e9e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   14ea2:	6921      	ldr	r1, [r4, #16]
   14ea4:	2207      	movs	r2, #7
   14ea6:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   14eaa:	f00e fb5d 	bl	23568 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   14eae:	46d8      	mov	r8, fp
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   14eb0:	210f      	movs	r1, #15
   14eb2:	f242 0006 	movw	r0, #8198	; 0x2006
   14eb6:	f7fe fdc1 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   14eba:	4683      	mov	fp, r0
   14ebc:	2800      	cmp	r0, #0
   14ebe:	f000 808f 	beq.w	14fe0 <bt_le_adv_start_legacy+0x24c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14ec2:	220f      	movs	r2, #15
   14ec4:	a908      	add	r1, sp, #32
   14ec6:	3008      	adds	r0, #8
   14ec8:	f00f fd5a 	bl	24980 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   14ecc:	2200      	movs	r2, #0
   14ece:	4659      	mov	r1, fp
   14ed0:	f242 0006 	movw	r0, #8198	; 0x2006
   14ed4:	f7fe fdfc 	bl	13ad0 <bt_hci_cmd_send_sync>
	if (err) {
   14ed8:	2800      	cmp	r0, #0
   14eda:	f040 8084 	bne.w	14fe6 <bt_le_adv_start_legacy+0x252>
	if (!dir_adv) {
   14ede:	f1b9 0f00 	cmp.w	r9, #0
   14ee2:	d01f      	beq.n	14f24 <bt_le_adv_start_legacy+0x190>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14ee4:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14ee6:	07db      	lsls	r3, r3, #31
   14ee8:	d42a      	bmi.n	14f40 <bt_le_adv_start_legacy+0x1ac>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14eea:	4628      	mov	r0, r5
   14eec:	2101      	movs	r1, #1
   14eee:	f00e fd67 	bl	239c0 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14ef2:	9d07      	ldr	r5, [sp, #28]
	if (err) {
   14ef4:	4683      	mov	fp, r0
   14ef6:	2800      	cmp	r0, #0
   14ef8:	d064      	beq.n	14fc4 <bt_le_adv_start_legacy+0x230>
		BT_ERR("Failed to start advertiser");
   14efa:	483f      	ldr	r0, [pc, #252]	; (14ff8 <bt_le_adv_start_legacy+0x264>)
   14efc:	2145      	movs	r1, #69	; 0x45
   14efe:	f00e f89c 	bl	2303a <z_log_minimal_printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14f02:	2d00      	cmp	r5, #0
   14f04:	f43f af61 	beq.w	14dca <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14f08:	4628      	mov	r0, r5
   14f0a:	2100      	movs	r1, #0
   14f0c:	f000 fc54 	bl	157b8 <bt_conn_set_state>
			bt_conn_unref(conn);
   14f10:	4628      	mov	r0, r5
   14f12:	f000 fc19 	bl	15748 <bt_conn_unref>
   14f16:	e758      	b.n	14dca <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14f18:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   14f1a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14f1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14f22:	e7c5      	b.n	14eb0 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   14f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14f26:	9300      	str	r3, [sp, #0]
   14f28:	e9cd 8601 	strd	r8, r6, [sp, #4]
   14f2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14f2e:	9905      	ldr	r1, [sp, #20]
   14f30:	4652      	mov	r2, sl
   14f32:	4628      	mov	r0, r5
   14f34:	f00e fcbd 	bl	238b2 <le_adv_update.constprop.0>
		if (err) {
   14f38:	4683      	mov	fp, r0
   14f3a:	2800      	cmp	r0, #0
   14f3c:	d0d2      	beq.n	14ee4 <bt_le_adv_start_legacy+0x150>
   14f3e:	e744      	b.n	14dca <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   14f40:	a907      	add	r1, sp, #28
   14f42:	4628      	mov	r0, r5
   14f44:	f7ff feaa 	bl	14c9c <le_adv_start_add_conn>
		if (err) {
   14f48:	4683      	mov	fp, r0
   14f4a:	2800      	cmp	r0, #0
   14f4c:	d0cd      	beq.n	14eea <bt_le_adv_start_legacy+0x156>
			if (err == -ENOMEM && !dir_adv &&
   14f4e:	f110 0f0c 	cmn.w	r0, #12
   14f52:	f47f af3a 	bne.w	14dca <bt_le_adv_start_legacy+0x36>
   14f56:	f1b9 0f00 	cmp.w	r9, #0
   14f5a:	f47f af36 	bne.w	14dca <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   14f5e:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   14f60:	0790      	lsls	r0, r2, #30
   14f62:	f53f af32 	bmi.w	14dca <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14f66:	6863      	ldr	r3, [r4, #4]
   14f68:	f083 0302 	eor.w	r3, r3, #2
   14f6c:	f3c3 0b40 	ubfx	fp, r3, #1, #1
   14f70:	f00b 0201 	and.w	r2, fp, #1
   14f74:	210e      	movs	r1, #14
   14f76:	4638      	mov	r0, r7
   14f78:	f00e fc84 	bl	23884 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   14f7c:	1e73      	subs	r3, r6, #1
   14f7e:	425a      	negs	r2, r3
   14f80:	415a      	adcs	r2, r3
   14f82:	2108      	movs	r1, #8
   14f84:	4638      	mov	r0, r7
   14f86:	f00e fc7d 	bl	23884 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   14f8a:	1eb1      	subs	r1, r6, #2
   14f8c:	424a      	negs	r2, r1
   14f8e:	414a      	adcs	r2, r1
   14f90:	4638      	mov	r0, r7
   14f92:	2109      	movs	r1, #9
   14f94:	f00e fc76 	bl	23884 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   14f98:	6862      	ldr	r2, [r4, #4]
   14f9a:	210a      	movs	r1, #10
   14f9c:	f002 0201 	and.w	r2, r2, #1
   14fa0:	4638      	mov	r0, r7
   14fa2:	f00e fc6f 	bl	23884 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   14fa6:	4642      	mov	r2, r8
   14fa8:	210b      	movs	r1, #11
   14faa:	4638      	mov	r0, r7
   14fac:	f00e fc6a 	bl	23884 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   14fb0:	6862      	ldr	r2, [r4, #4]
   14fb2:	210d      	movs	r1, #13
   14fb4:	f3c2 0280 	ubfx	r2, r2, #2, #1
   14fb8:	4638      	mov	r0, r7
   14fba:	f00e fc63 	bl	23884 <atomic_set_bit_to>
	return 0;
   14fbe:	f04f 0b00 	mov.w	fp, #0
   14fc2:	e702      	b.n	14dca <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14fc4:	b115      	cbz	r5, 14fcc <bt_le_adv_start_legacy+0x238>
		bt_conn_unref(conn);
   14fc6:	4628      	mov	r0, r5
   14fc8:	f000 fbbe 	bl	15748 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14fcc:	f1b9 0f00 	cmp.w	r9, #0
   14fd0:	d1ce      	bne.n	14f70 <bt_le_adv_start_legacy+0x1dc>
   14fd2:	e7c8      	b.n	14f66 <bt_le_adv_start_legacy+0x1d2>
		return -EAGAIN;
   14fd4:	f06f 0b0a 	mvn.w	fp, #10
   14fd8:	e6f7      	b.n	14dca <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   14fda:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   14fde:	e6f4      	b.n	14dca <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   14fe0:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   14fe4:	e6f1      	b.n	14dca <bt_le_adv_start_legacy+0x36>
   14fe6:	4683      	mov	fp, r0
   14fe8:	e6ef      	b.n	14dca <bt_le_adv_start_legacy+0x36>
   14fea:	bf00      	nop
   14fec:	20000444 	.word	0x20000444
   14ff0:	20000378 	.word	0x20000378
   14ff4:	00026f2f 	.word	0x00026f2f
   14ff8:	00027650 	.word	0x00027650

00014ffc <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   14ffc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14ffe:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15000:	9a06      	ldr	r2, [sp, #24]
{
   15002:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15004:	e9cd 3200 	strd	r3, r2, [sp]
   15008:	462b      	mov	r3, r5
   1500a:	460a      	mov	r2, r1
   1500c:	4601      	mov	r1, r0
   1500e:	4811      	ldr	r0, [pc, #68]	; (15054 <bt_le_adv_start+0x58>)
   15010:	f7ff fec0 	bl	14d94 <bt_le_adv_start_legacy>
   15014:	4621      	mov	r1, r4
   15016:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   15018:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1501a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1501e:	429d      	cmp	r5, r3
   15020:	d102      	bne.n	15028 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   15022:	4630      	mov	r0, r6
   15024:	b002      	add	sp, #8
   15026:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   15028:	880a      	ldrh	r2, [r1, #0]
   1502a:	4282      	cmp	r2, r0
   1502c:	d104      	bne.n	15038 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1502e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   15030:	b112      	cbz	r2, 15038 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   15032:	7812      	ldrb	r2, [r2, #0]
   15034:	07d2      	lsls	r2, r2, #31
   15036:	d402      	bmi.n	1503e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   15038:	3301      	adds	r3, #1
   1503a:	3108      	adds	r1, #8
   1503c:	e7ef      	b.n	1501e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1503e:	4906      	ldr	r1, [pc, #24]	; (15058 <bt_le_adv_start+0x5c>)
   15040:	4806      	ldr	r0, [pc, #24]	; (1505c <bt_le_adv_start+0x60>)
   15042:	f008 fb21 	bl	1d688 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   15046:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1504a:	2300      	movs	r3, #0
   1504c:	4803      	ldr	r0, [pc, #12]	; (1505c <bt_le_adv_start+0x60>)
   1504e:	f008 fc05 	bl	1d85c <k_work_reschedule>
   15052:	e7e6      	b.n	15022 <bt_le_adv_start+0x26>
   15054:	20000390 	.word	0x20000390
   15058:	000150e5 	.word	0x000150e5
   1505c:	200003a8 	.word	0x200003a8

00015060 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   15060:	b510      	push	{r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   15062:	481a      	ldr	r0, [pc, #104]	; (150cc <bt_le_adv_stop+0x6c>)
   15064:	f00e fcd1 	bl	23a0a <bt_le_lim_adv_cancel_timeout>
   15068:	4819      	ldr	r0, [pc, #100]	; (150d0 <bt_le_adv_stop+0x70>)
   1506a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1506e:	f00e fbfa 	bl	23866 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15072:	4817      	ldr	r0, [pc, #92]	; (150d0 <bt_le_adv_stop+0x70>)
   15074:	f00e fbf1 	bl	2385a <atomic_get>
   15078:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1507a:	061a      	lsls	r2, r3, #24
   1507c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   15080:	d523      	bpl.n	150ca <bt_le_adv_stop+0x6a>
   15082:	4813      	ldr	r0, [pc, #76]	; (150d0 <bt_le_adv_stop+0x70>)
   15084:	f00e fbe9 	bl	2385a <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15088:	0543      	lsls	r3, r0, #21
   1508a:	d514      	bpl.n	150b6 <bt_le_adv_stop+0x56>
	return memcmp(a, b, sizeof(*a));
   1508c:	4911      	ldr	r1, [pc, #68]	; (150d4 <bt_le_adv_stop+0x74>)
   1508e:	4812      	ldr	r0, [pc, #72]	; (150d8 <bt_le_adv_stop+0x78>)
   15090:	2207      	movs	r2, #7
   15092:	f00e fa42 	bl	2351a <memcmp>
   15096:	4b11      	ldr	r3, [pc, #68]	; (150dc <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15098:	b998      	cbnz	r0, 150c2 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1509a:	4911      	ldr	r1, [pc, #68]	; (150e0 <bt_le_adv_stop+0x80>)
   1509c:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1509e:	7e18      	ldrb	r0, [r3, #24]
   150a0:	f000 fdbe 	bl	15c20 <bt_conn_lookup_state_le>
   150a4:	4604      	mov	r4, r0
	if (conn) {
   150a6:	b130      	cbz	r0, 150b6 <bt_le_adv_stop+0x56>
		conn->err = status;
   150a8:	2100      	movs	r1, #0
   150aa:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   150ac:	f000 fb84 	bl	157b8 <bt_conn_set_state>
		bt_conn_unref(conn);
   150b0:	4620      	mov	r0, r4
   150b2:	f000 fb49 	bl	15748 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   150b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   150ba:	4804      	ldr	r0, [pc, #16]	; (150cc <bt_le_adv_stop+0x6c>)
   150bc:	2100      	movs	r1, #0
   150be:	f00e bc7f 	b.w	239c0 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   150c2:	2205      	movs	r2, #5
   150c4:	f103 0121 	add.w	r1, r3, #33	; 0x21
   150c8:	e7e9      	b.n	1509e <bt_le_adv_stop+0x3e>
}
   150ca:	bd10      	pop	{r4, pc}
   150cc:	20000390 	.word	0x20000390
   150d0:	200003a0 	.word	0x200003a0
   150d4:	00026f2f 	.word	0x00026f2f
   150d8:	20000399 	.word	0x20000399
   150dc:	20000378 	.word	0x20000378
   150e0:	00026f28 	.word	0x00026f28

000150e4 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   150e4:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   150e6:	f7ff ffbb 	bl	15060 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
}
   150ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = bt_le_adv_stop();
   150ee:	4602      	mov	r2, r0
	BT_WARN("Failed to stop advertising: %d", err);
   150f0:	2157      	movs	r1, #87	; 0x57
   150f2:	4801      	ldr	r0, [pc, #4]	; (150f8 <adv_timeout+0x14>)
   150f4:	f00d bfa1 	b.w	2303a <z_log_minimal_printk>
   150f8:	00027670 	.word	0x00027670

000150fc <bt_le_adv_resume>:
{
   150fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   150fe:	4c20      	ldr	r4, [pc, #128]	; (15180 <bt_le_adv_resume+0x84>)
   15100:	4620      	mov	r0, r4
   15102:	f00e fbaa 	bl	2385a <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   15106:	0440      	lsls	r0, r0, #17
   15108:	d538      	bpl.n	1517c <bt_le_adv_resume+0x80>
   1510a:	4620      	mov	r0, r4
   1510c:	f00e fba5 	bl	2385a <atomic_get>
   15110:	0601      	lsls	r1, r0, #24
   15112:	d433      	bmi.n	1517c <bt_le_adv_resume+0x80>
   15114:	4620      	mov	r0, r4
   15116:	f00e fba0 	bl	2385a <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1511a:	0542      	lsls	r2, r0, #21
   1511c:	d52e      	bpl.n	1517c <bt_le_adv_resume+0x80>
	err = le_adv_start_add_conn(adv, &conn);
   1511e:	a901      	add	r1, sp, #4
   15120:	f1a4 0010 	sub.w	r0, r4, #16
   15124:	f7ff fdba 	bl	14c9c <le_adv_start_add_conn>
	if (err) {
   15128:	4605      	mov	r5, r0
   1512a:	bb38      	cbnz	r0, 1517c <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1512c:	2101      	movs	r1, #1
   1512e:	f1a4 0010 	sub.w	r0, r4, #16
   15132:	f00e fc45 	bl	239c0 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   15136:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   15138:	b928      	cbnz	r0, 15146 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   1513a:	4630      	mov	r0, r6
}
   1513c:	b002      	add	sp, #8
   1513e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15142:	f000 bb01 	b.w	15748 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15146:	4629      	mov	r1, r5
   15148:	4630      	mov	r0, r6
   1514a:	f000 fb35 	bl	157b8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1514e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   15152:	4620      	mov	r0, r4
   15154:	f00e fb87 	bl	23866 <atomic_and>
   15158:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   1515a:	4630      	mov	r0, r6
   1515c:	f000 faf4 	bl	15748 <bt_conn_unref>
	if (persist_paused) {
   15160:	046b      	lsls	r3, r5, #17
   15162:	d50b      	bpl.n	1517c <bt_le_adv_resume+0x80>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15164:	f3bf 8f5b 	dmb	ish
   15168:	e854 3f00 	ldrex	r3, [r4]
   1516c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   15170:	e844 3200 	strex	r2, r3, [r4]
   15174:	2a00      	cmp	r2, #0
   15176:	d1f7      	bne.n	15168 <bt_le_adv_resume+0x6c>
   15178:	f3bf 8f5b 	dmb	ish
}
   1517c:	b002      	add	sp, #8
   1517e:	bd70      	pop	{r4, r5, r6, pc}
   15180:	200003a0 	.word	0x200003a0

00015184 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   15184:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   15186:	4b11      	ldr	r3, [pc, #68]	; (151cc <notify_connected+0x48>)
   15188:	681d      	ldr	r5, [r3, #0]
{
   1518a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1518c:	b975      	cbnz	r5, 151ac <notify_connected+0x28>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1518e:	4d10      	ldr	r5, [pc, #64]	; (151d0 <notify_connected+0x4c>)
   15190:	4e10      	ldr	r6, [pc, #64]	; (151d4 <notify_connected+0x50>)
   15192:	42b5      	cmp	r5, r6
   15194:	d918      	bls.n	151c8 <notify_connected+0x44>
   15196:	4910      	ldr	r1, [pc, #64]	; (151d8 <notify_connected+0x54>)
   15198:	4810      	ldr	r0, [pc, #64]	; (151dc <notify_connected+0x58>)
   1519a:	f44f 62ab 	mov.w	r2, #1368	; 0x558
   1519e:	f00d ff3e 	bl	2301e <assert_print>
   151a2:	480d      	ldr	r0, [pc, #52]	; (151d8 <notify_connected+0x54>)
   151a4:	f44f 61ab 	mov.w	r1, #1368	; 0x558
   151a8:	f00d ff32 	bl	23010 <assert_post_action>
		if (cb->connected) {
   151ac:	682b      	ldr	r3, [r5, #0]
   151ae:	b113      	cbz	r3, 151b6 <notify_connected+0x32>
			cb->connected(conn, conn->err);
   151b0:	7a61      	ldrb	r1, [r4, #9]
   151b2:	4620      	mov	r0, r4
   151b4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   151b6:	692d      	ldr	r5, [r5, #16]
   151b8:	e7e8      	b.n	1518c <notify_connected+0x8>
		if (cb->connected) {
   151ba:	682b      	ldr	r3, [r5, #0]
   151bc:	b113      	cbz	r3, 151c4 <notify_connected+0x40>
			cb->connected(conn, conn->err);
   151be:	7a61      	ldrb	r1, [r4, #9]
   151c0:	4620      	mov	r0, r4
   151c2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   151c4:	3514      	adds	r5, #20
   151c6:	e7e4      	b.n	15192 <notify_connected+0xe>
   151c8:	d3f7      	bcc.n	151ba <notify_connected+0x36>
		}
	}
}
   151ca:	bd70      	pop	{r4, r5, r6, pc}
   151cc:	20002768 	.word	0x20002768
   151d0:	0002594c 	.word	0x0002594c
   151d4:	0002594c 	.word	0x0002594c
   151d8:	0002769b 	.word	0x0002769b
   151dc:	00026718 	.word	0x00026718

000151e0 <tx_notify>:
{
   151e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   151e4:	4f15      	ldr	r7, [pc, #84]	; (1523c <tx_notify+0x5c>)
{
   151e6:	4604      	mov	r4, r0
	tx->cb = NULL;
   151e8:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   151ec:	f04f 0240 	mov.w	r2, #64	; 0x40
   151f0:	f3ef 8311 	mrs	r3, BASEPRI
   151f4:	f382 8812 	msr	BASEPRI_MAX, r2
   151f8:	f3bf 8f6f 	isb	sy
	return list->head;
   151fc:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   151fe:	b929      	cbnz	r1, 1520c <tx_notify+0x2c>
	__asm__ volatile(
   15200:	f383 8811 	msr	BASEPRI, r3
   15204:	f3bf 8f6f 	isb	sy
}
   15208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1520c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1520e:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   15210:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15212:	4281      	cmp	r1, r0
	list->tail = node;
   15214:	bf08      	it	eq
   15216:	6262      	streq	r2, [r4, #36]	; 0x24
   15218:	f383 8811 	msr	BASEPRI, r3
   1521c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   15220:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   15224:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   15228:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1522c:	4638      	mov	r0, r7
   1522e:	f010 f854 	bl	252da <k_queue_append>
		cb(conn, user_data, 0);
   15232:	2200      	movs	r2, #0
   15234:	4631      	mov	r1, r6
   15236:	4620      	mov	r0, r4
   15238:	47a8      	blx	r5
	while (1) {
   1523a:	e7d7      	b.n	151ec <tx_notify+0xc>
   1523c:	20000acc 	.word	0x20000acc

00015240 <conn_tx_destroy>:
{
   15240:	b570      	push	{r4, r5, r6, lr}
   15242:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   15244:	b941      	cbnz	r1, 15258 <conn_tx_destroy+0x18>
   15246:	490d      	ldr	r1, [pc, #52]	; (1527c <conn_tx_destroy+0x3c>)
   15248:	480d      	ldr	r0, [pc, #52]	; (15280 <conn_tx_destroy+0x40>)
   1524a:	2238      	movs	r2, #56	; 0x38
   1524c:	f00d fee7 	bl	2301e <assert_print>
   15250:	480a      	ldr	r0, [pc, #40]	; (1527c <conn_tx_destroy+0x3c>)
   15252:	2138      	movs	r1, #56	; 0x38
   15254:	f00d fedc 	bl	23010 <assert_post_action>
	void *user_data = tx->user_data;
   15258:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   1525c:	2200      	movs	r2, #0
	tx->user_data = NULL;
   1525e:	e9c1 2201 	strd	r2, r2, [r1, #4]
	tx->pending_no_cb = 0U;
   15262:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   15264:	4807      	ldr	r0, [pc, #28]	; (15284 <conn_tx_destroy+0x44>)
   15266:	f010 f838 	bl	252da <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   1526a:	4631      	mov	r1, r6
   1526c:	4620      	mov	r0, r4
   1526e:	462b      	mov	r3, r5
   15270:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   15274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   15278:	4718      	bx	r3
   1527a:	bf00      	nop
   1527c:	0002769b 	.word	0x0002769b
   15280:	00026718 	.word	0x00026718
   15284:	20000acc 	.word	0x20000acc

00015288 <send_frag>:
{
   15288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1528c:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1528e:	694d      	ldr	r5, [r1, #20]
{
   15290:	460e      	mov	r6, r1
   15292:	4617      	mov	r7, r2
   15294:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   15296:	f04f 33ff 	mov.w	r3, #4294967295
   1529a:	4850      	ldr	r0, [pc, #320]	; (153dc <send_frag+0x154>)
   1529c:	f04f 32ff 	mov.w	r2, #4294967295
   152a0:	f007 febc 	bl	1d01c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   152a4:	7aa3      	ldrb	r3, [r4, #10]
   152a6:	2b07      	cmp	r3, #7
   152a8:	f040 808c 	bne.w	153c4 <send_frag+0x13c>
	__asm__ volatile(
   152ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   152b0:	f3ef 8211 	mrs	r2, BASEPRI
   152b4:	f383 8812 	msr	BASEPRI_MAX, r3
   152b8:	f3bf 8f6f 	isb	sy
	if (tx) {
   152bc:	2d00      	cmp	r5, #0
   152be:	d04d      	beq.n	1535c <send_frag+0xd4>
	parent->next = child;
   152c0:	2300      	movs	r3, #0
   152c2:	602b      	str	r3, [r5, #0]
	return list->tail;
   152c4:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   152c6:	2b00      	cmp	r3, #0
   152c8:	d145      	bne.n	15356 <send_frag+0xce>
	list->head = node;
   152ca:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   152ce:	f382 8811 	msr	BASEPRI, r2
   152d2:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   152d6:	2104      	movs	r1, #4
   152d8:	f106 0008 	add.w	r0, r6, #8
   152dc:	f003 fabc 	bl	18858 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   152e0:	8823      	ldrh	r3, [r4, #0]
   152e2:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   152e6:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   152ea:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   152ec:	89b3      	ldrh	r3, [r6, #12]
   152ee:	3b04      	subs	r3, #4
   152f0:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   152f2:	2302      	movs	r3, #2
   152f4:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   152f6:	4630      	mov	r0, r6
   152f8:	f7fe fe0c 	bl	13f14 <bt_send>
	if (err) {
   152fc:	4602      	mov	r2, r0
   152fe:	2800      	cmp	r0, #0
   15300:	d06a      	beq.n	153d8 <send_frag+0x150>
		BT_ERR("Unable to send to driver (err %d)", err);
   15302:	4837      	ldr	r0, [pc, #220]	; (153e0 <send_frag+0x158>)
   15304:	2145      	movs	r1, #69	; 0x45
   15306:	f00d fe98 	bl	2303a <z_log_minimal_printk>
	__asm__ volatile(
   1530a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1530e:	f3ef 8111 	mrs	r1, BASEPRI
   15312:	f383 8812 	msr	BASEPRI_MAX, r3
   15316:	f3bf 8f6f 	isb	sy
		if (tx) {
   1531a:	2d00      	cmp	r5, #0
   1531c:	d034      	beq.n	15388 <send_frag+0x100>
	return list->head;
   1531e:	6962      	ldr	r2, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15320:	2300      	movs	r3, #0
   15322:	b152      	cbz	r2, 1533a <send_frag+0xb2>
   15324:	4295      	cmp	r5, r2
   15326:	d12c      	bne.n	15382 <send_frag+0xfa>
	return node->next;
   15328:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1532a:	bb23      	cbnz	r3, 15376 <send_frag+0xee>
   1532c:	69a3      	ldr	r3, [r4, #24]
	list->head = node;
   1532e:	6162      	str	r2, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   15330:	429d      	cmp	r5, r3
   15332:	d100      	bne.n	15336 <send_frag+0xae>
	list->tail = node;
   15334:	61a2      	str	r2, [r4, #24]
	parent->next = child;
   15336:	2300      	movs	r3, #0
   15338:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1533a:	f381 8811 	msr	BASEPRI, r1
   1533e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   15342:	4826      	ldr	r0, [pc, #152]	; (153dc <send_frag+0x154>)
   15344:	f007 fe30 	bl	1cfa8 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   15348:	2300      	movs	r3, #0
   1534a:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   1534c:	4629      	mov	r1, r5
   1534e:	4620      	mov	r0, r4
   15350:	f7ff ff76 	bl	15240 <conn_tx_destroy>
   15354:	e030      	b.n	153b8 <send_frag+0x130>
   15356:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15358:	61a5      	str	r5, [r4, #24]
}
   1535a:	e7b8      	b.n	152ce <send_frag+0x46>
	return list->tail;
   1535c:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1535e:	b133      	cbz	r3, 1536e <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   15360:	f103 080c 	add.w	r8, r3, #12
   15364:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   15366:	3301      	adds	r3, #1
   15368:	f8c8 3000 	str.w	r3, [r8]
   1536c:	e7af      	b.n	152ce <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
   1536e:	69e3      	ldr	r3, [r4, #28]
   15370:	f104 081c 	add.w	r8, r4, #28
   15374:	e7f7      	b.n	15366 <send_frag+0xde>
	parent->next = child;
   15376:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   15378:	69a2      	ldr	r2, [r4, #24]
   1537a:	4295      	cmp	r5, r2
	list->tail = node;
   1537c:	bf08      	it	eq
   1537e:	61a3      	streq	r3, [r4, #24]
}
   15380:	e7d9      	b.n	15336 <send_frag+0xae>
	return node->next;
   15382:	4613      	mov	r3, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15384:	6812      	ldr	r2, [r2, #0]
   15386:	e7cc      	b.n	15322 <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   15388:	f8d8 2000 	ldr.w	r2, [r8]
   1538c:	b952      	cbnz	r2, 153a4 <send_frag+0x11c>
   1538e:	4915      	ldr	r1, [pc, #84]	; (153e4 <send_frag+0x15c>)
   15390:	4815      	ldr	r0, [pc, #84]	; (153e8 <send_frag+0x160>)
   15392:	f240 2229 	movw	r2, #553	; 0x229
   15396:	f00d fe42 	bl	2301e <assert_print>
   1539a:	4812      	ldr	r0, [pc, #72]	; (153e4 <send_frag+0x15c>)
   1539c:	f240 2129 	movw	r1, #553	; 0x229
   153a0:	f00d fe36 	bl	23010 <assert_post_action>
			(*pending_no_cb)--;
   153a4:	3a01      	subs	r2, #1
   153a6:	f8c8 2000 	str.w	r2, [r8]
   153aa:	f381 8811 	msr	BASEPRI, r1
   153ae:	f3bf 8f6f 	isb	sy
   153b2:	480a      	ldr	r0, [pc, #40]	; (153dc <send_frag+0x154>)
   153b4:	f007 fdf8 	bl	1cfa8 <z_impl_k_sem_give>
	if (always_consume) {
   153b8:	f1b9 0f00 	cmp.w	r9, #0
   153bc:	d108      	bne.n	153d0 <send_frag+0x148>
	return false;
   153be:	2000      	movs	r0, #0
}
   153c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   153c4:	4805      	ldr	r0, [pc, #20]	; (153dc <send_frag+0x154>)
   153c6:	f007 fdef 	bl	1cfa8 <z_impl_k_sem_give>
	if (tx) {
   153ca:	2d00      	cmp	r5, #0
   153cc:	d1bc      	bne.n	15348 <send_frag+0xc0>
   153ce:	e7f3      	b.n	153b8 <send_frag+0x130>
		net_buf_unref(buf);
   153d0:	4630      	mov	r0, r6
   153d2:	f003 f98b 	bl	186ec <net_buf_unref>
   153d6:	e7f2      	b.n	153be <send_frag+0x136>
	return true;
   153d8:	2001      	movs	r0, #1
   153da:	e7f1      	b.n	153c0 <send_frag+0x138>
   153dc:	20000478 	.word	0x20000478
   153e0:	00027315 	.word	0x00027315
   153e4:	0002769b 	.word	0x0002769b
   153e8:	00026718 	.word	0x00026718

000153ec <bt_conn_get_pkts>:
}
   153ec:	4800      	ldr	r0, [pc, #0]	; (153f0 <bt_conn_get_pkts+0x4>)
   153ee:	4770      	bx	lr
   153f0:	20000478 	.word	0x20000478

000153f4 <bt_conn_new>:
{
   153f4:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   153f6:	2200      	movs	r2, #0
   153f8:	4604      	mov	r4, r0
   153fa:	428a      	cmp	r2, r1
   153fc:	d102      	bne.n	15404 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   153fe:	2400      	movs	r4, #0
}
   15400:	4620      	mov	r0, r4
   15402:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15404:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   15408:	2001      	movs	r0, #1
   1540a:	f3bf 8f5b 	dmb	ish
   1540e:	e853 5f00 	ldrex	r5, [r3]
   15412:	2d00      	cmp	r5, #0
   15414:	d104      	bne.n	15420 <bt_conn_new+0x2c>
   15416:	e843 0c00 	strex	ip, r0, [r3]
   1541a:	f1bc 0f00 	cmp.w	ip, #0
   1541e:	d1f6      	bne.n	1540e <bt_conn_new+0x1a>
   15420:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   15424:	d002      	beq.n	1542c <bt_conn_new+0x38>
   15426:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   15428:	4402      	add	r2, r0
   1542a:	e7e6      	b.n	153fa <bt_conn_new+0x6>
	if (!conn) {
   1542c:	2c00      	cmp	r4, #0
   1542e:	d0e6      	beq.n	153fe <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   15430:	22c0      	movs	r2, #192	; 0xc0
   15432:	2100      	movs	r1, #0
   15434:	4620      	mov	r0, r4
   15436:	f00e f8a2 	bl	2357e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1543a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1543e:	4904      	ldr	r1, [pc, #16]	; (15450 <bt_conn_new+0x5c>)
   15440:	f008 f922 	bl	1d688 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   15444:	4903      	ldr	r1, [pc, #12]	; (15454 <bt_conn_new+0x60>)
   15446:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1544a:	f008 f807 	bl	1d45c <k_work_init>
	return conn;
   1544e:	e7d7      	b.n	15400 <bt_conn_new+0xc>
   15450:	00015ce9 	.word	0x00015ce9
   15454:	00023a11 	.word	0x00023a11

00015458 <conn_cleanup>:
{
   15458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1545c:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1545e:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   15460:	f104 0638 	add.w	r6, r4, #56	; 0x38
   15464:	2300      	movs	r3, #0
   15466:	2200      	movs	r2, #0
   15468:	4630      	mov	r0, r6
   1546a:	f003 f80d 	bl	18488 <net_buf_get>
   1546e:	4603      	mov	r3, r0
   15470:	b960      	cbnz	r0, 1548c <conn_cleanup+0x34>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   15472:	6963      	ldr	r3, [r4, #20]
   15474:	b1ab      	cbz	r3, 154a2 <conn_cleanup+0x4a>
   15476:	4916      	ldr	r1, [pc, #88]	; (154d0 <conn_cleanup+0x78>)
   15478:	4816      	ldr	r0, [pc, #88]	; (154d4 <conn_cleanup+0x7c>)
   1547a:	f240 22b6 	movw	r2, #694	; 0x2b6
   1547e:	f00d fdce 	bl	2301e <assert_print>
   15482:	f240 21b6 	movw	r1, #694	; 0x2b6
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   15486:	4812      	ldr	r0, [pc, #72]	; (154d0 <conn_cleanup+0x78>)
   15488:	f00d fdc2 	bl	23010 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1548c:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   1548e:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   15490:	f003 f92c 	bl	186ec <net_buf_unref>
		if (tx) {
   15494:	2d00      	cmp	r5, #0
   15496:	d0e5      	beq.n	15464 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   15498:	4629      	mov	r1, r5
   1549a:	4620      	mov	r0, r4
   1549c:	f7ff fed0 	bl	15240 <conn_tx_destroy>
   154a0:	e7de      	b.n	15460 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   154a2:	69e3      	ldr	r3, [r4, #28]
   154a4:	b143      	cbz	r3, 154b8 <conn_cleanup+0x60>
   154a6:	490a      	ldr	r1, [pc, #40]	; (154d0 <conn_cleanup+0x78>)
   154a8:	480a      	ldr	r0, [pc, #40]	; (154d4 <conn_cleanup+0x7c>)
   154aa:	f240 22b7 	movw	r2, #695	; 0x2b7
   154ae:	f00d fdb6 	bl	2301e <assert_print>
   154b2:	f240 21b7 	movw	r1, #695	; 0x2b7
   154b6:	e7e6      	b.n	15486 <conn_cleanup+0x2e>
	bt_conn_reset_rx_state(conn);
   154b8:	4620      	mov	r0, r4
   154ba:	f00e faac 	bl	23a16 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   154be:	f104 0060 	add.w	r0, r4, #96	; 0x60
   154c2:	2200      	movs	r2, #0
}
   154c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   154c8:	2300      	movs	r3, #0
   154ca:	f008 b9c7 	b.w	1d85c <k_work_reschedule>
   154ce:	bf00      	nop
   154d0:	0002769b 	.word	0x0002769b
   154d4:	00026718 	.word	0x00026718

000154d8 <bt_conn_recv>:
{
   154d8:	b570      	push	{r4, r5, r6, lr}
   154da:	4616      	mov	r6, r2
   154dc:	4604      	mov	r4, r0
   154de:	460d      	mov	r5, r1
	tx_notify(conn);
   154e0:	f7ff fe7e 	bl	151e0 <tx_notify>
	switch (flags) {
   154e4:	2e01      	cmp	r6, #1
   154e6:	d01f      	beq.n	15528 <bt_conn_recv+0x50>
   154e8:	2e02      	cmp	r6, #2
   154ea:	d149      	bne.n	15580 <bt_conn_recv+0xa8>
		if (conn->rx) {
   154ec:	6923      	ldr	r3, [r4, #16]
   154ee:	b133      	cbz	r3, 154fe <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   154f0:	482b      	ldr	r0, [pc, #172]	; (155a0 <bt_conn_recv+0xc8>)
   154f2:	2145      	movs	r1, #69	; 0x45
   154f4:	f00d fda1 	bl	2303a <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   154f8:	4620      	mov	r0, r4
   154fa:	f00e fa8c 	bl	23a16 <bt_conn_reset_rx_state>
		conn->rx = buf;
   154fe:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   15500:	6921      	ldr	r1, [r4, #16]
   15502:	898a      	ldrh	r2, [r1, #12]
   15504:	2a01      	cmp	r2, #1
   15506:	d949      	bls.n	1559c <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   15508:	688b      	ldr	r3, [r1, #8]
   1550a:	881b      	ldrh	r3, [r3, #0]
   1550c:	3304      	adds	r3, #4
   1550e:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   15510:	429a      	cmp	r2, r3
   15512:	d343      	bcc.n	1559c <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
   15514:	d93a      	bls.n	1558c <bt_conn_recv+0xb4>
		BT_ERR("ACL len mismatch (%u > %u)",
   15516:	4823      	ldr	r0, [pc, #140]	; (155a4 <bt_conn_recv+0xcc>)
   15518:	2145      	movs	r1, #69	; 0x45
   1551a:	f00d fd8e 	bl	2303a <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   1551e:	4620      	mov	r0, r4
}
   15520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   15524:	f00e ba77 	b.w	23a16 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   15528:	6920      	ldr	r0, [r4, #16]
   1552a:	b938      	cbnz	r0, 1553c <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   1552c:	481e      	ldr	r0, [pc, #120]	; (155a8 <bt_conn_recv+0xd0>)
   1552e:	2145      	movs	r1, #69	; 0x45
   15530:	f00d fd83 	bl	2303a <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   15534:	4620      	mov	r0, r4
   15536:	f00e fa6e 	bl	23a16 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1553a:	e001      	b.n	15540 <bt_conn_recv+0x68>
		if (!buf->len) {
   1553c:	89ae      	ldrh	r6, [r5, #12]
   1553e:	b926      	cbnz	r6, 1554a <bt_conn_recv+0x72>
			net_buf_unref(buf);
   15540:	4628      	mov	r0, r5
}
   15542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   15546:	f003 b8d1 	b.w	186ec <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1554a:	3008      	adds	r0, #8
   1554c:	f00f fa10 	bl	24970 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   15550:	4286      	cmp	r6, r0
   15552:	d90b      	bls.n	1556c <bt_conn_recv+0x94>
			BT_ERR("Not enough buffer space for L2CAP data");
   15554:	4815      	ldr	r0, [pc, #84]	; (155ac <bt_conn_recv+0xd4>)
   15556:	2145      	movs	r1, #69	; 0x45
   15558:	f00d fd6f 	bl	2303a <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   1555c:	6921      	ldr	r1, [r4, #16]
   1555e:	2200      	movs	r2, #0
   15560:	4620      	mov	r0, r4
   15562:	f000 fde9 	bl	16138 <bt_l2cap_recv>
			conn->rx = NULL;
   15566:	2300      	movs	r3, #0
   15568:	6123      	str	r3, [r4, #16]
   1556a:	e7e9      	b.n	15540 <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1556c:	6920      	ldr	r0, [r4, #16]
   1556e:	89aa      	ldrh	r2, [r5, #12]
   15570:	68a9      	ldr	r1, [r5, #8]
   15572:	3008      	adds	r0, #8
   15574:	f00f fa04 	bl	24980 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   15578:	4628      	mov	r0, r5
   1557a:	f003 f8b7 	bl	186ec <net_buf_unref>
		break;
   1557e:	e7bf      	b.n	15500 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   15580:	480b      	ldr	r0, [pc, #44]	; (155b0 <bt_conn_recv+0xd8>)
   15582:	4632      	mov	r2, r6
   15584:	2145      	movs	r1, #69	; 0x45
   15586:	f00d fd58 	bl	2303a <z_log_minimal_printk>
   1558a:	e7d3      	b.n	15534 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   1558c:	2300      	movs	r3, #0
   1558e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   15590:	4620      	mov	r0, r4
   15592:	2201      	movs	r2, #1
}
   15594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   15598:	f000 bdce 	b.w	16138 <bt_l2cap_recv>
}
   1559c:	bd70      	pop	{r4, r5, r6, pc}
   1559e:	bf00      	nop
   155a0:	000276cb 	.word	0x000276cb
   155a4:	0002775f 	.word	0x0002775f
   155a8:	000276ed 	.word	0x000276ed
   155ac:	00027710 	.word	0x00027710
   155b0:	0002773c 	.word	0x0002773c

000155b4 <bt_conn_send_cb>:
{
   155b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   155b8:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   155ba:	7a83      	ldrb	r3, [r0, #10]
   155bc:	2b07      	cmp	r3, #7
{
   155be:	4605      	mov	r5, r0
   155c0:	460f      	mov	r7, r1
   155c2:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   155c4:	d006      	beq.n	155d4 <bt_conn_send_cb+0x20>
		BT_ERR("not connected!");
   155c6:	4820      	ldr	r0, [pc, #128]	; (15648 <bt_conn_send_cb+0x94>)
   155c8:	2145      	movs	r1, #69	; 0x45
   155ca:	f00d fd36 	bl	2303a <z_log_minimal_printk>
		return -ENOTCONN;
   155ce:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   155d2:	e017      	b.n	15604 <bt_conn_send_cb+0x50>
	if (cb) {
   155d4:	2a00      	cmp	r2, #0
   155d6:	d035      	beq.n	15644 <bt_conn_send_cb+0x90>
	return z_impl_z_current_get();
   155d8:	f009 f89e 	bl	1e718 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   155dc:	4b1b      	ldr	r3, [pc, #108]	; (1564c <bt_conn_send_cb+0x98>)
   155de:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   155e0:	481b      	ldr	r0, [pc, #108]	; (15650 <bt_conn_send_cb+0x9c>)
   155e2:	bf07      	ittee	eq
   155e4:	2200      	moveq	r2, #0
   155e6:	2300      	moveq	r3, #0
   155e8:	f04f 32ff 	movne.w	r2, #4294967295
   155ec:	f04f 33ff 	movne.w	r3, #4294967295
   155f0:	f007 fc82 	bl	1cef8 <z_impl_k_queue_get>
   155f4:	4604      	mov	r4, r0
		if (!tx) {
   155f6:	b938      	cbnz	r0, 15608 <bt_conn_send_cb+0x54>
			BT_ERR("Unable to allocate TX context");
   155f8:	4816      	ldr	r0, [pc, #88]	; (15654 <bt_conn_send_cb+0xa0>)
   155fa:	2145      	movs	r1, #69	; 0x45
   155fc:	f00d fd1d 	bl	2303a <z_log_minimal_printk>
			return -ENOBUFS;
   15600:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   15604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   15608:	7aab      	ldrb	r3, [r5, #10]
   1560a:	2b07      	cmp	r3, #7
   1560c:	f04f 0800 	mov.w	r8, #0
   15610:	d00c      	beq.n	1562c <bt_conn_send_cb+0x78>
			BT_WARN("Disconnected while allocating context");
   15612:	4811      	ldr	r0, [pc, #68]	; (15658 <bt_conn_send_cb+0xa4>)
   15614:	2157      	movs	r1, #87	; 0x57
   15616:	f00d fd10 	bl	2303a <z_log_minimal_printk>
	tx->user_data = NULL;
   1561a:	e9c4 8801 	strd	r8, r8, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1561e:	480c      	ldr	r0, [pc, #48]	; (15650 <bt_conn_send_cb+0x9c>)
	tx->pending_no_cb = 0U;
   15620:	f8c4 800c 	str.w	r8, [r4, #12]
	k_fifo_put(&free_tx, tx);
   15624:	4621      	mov	r1, r4
   15626:	f00f fe58 	bl	252da <k_queue_append>
}
   1562a:	e7d0      	b.n	155ce <bt_conn_send_cb+0x1a>
		tx->user_data = user_data;
   1562c:	e9c0 6901 	strd	r6, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   15630:	f8c0 800c 	str.w	r8, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   15634:	f105 0038 	add.w	r0, r5, #56	; 0x38
		tx_data(buf)->tx = tx;
   15638:	617c      	str	r4, [r7, #20]
	net_buf_put(&conn->tx_queue, buf);
   1563a:	4639      	mov	r1, r7
   1563c:	f003 f82c 	bl	18698 <net_buf_put>
	return 0;
   15640:	2000      	movs	r0, #0
   15642:	e7df      	b.n	15604 <bt_conn_send_cb+0x50>
   15644:	4614      	mov	r4, r2
   15646:	e7f5      	b.n	15634 <bt_conn_send_cb+0x80>
   15648:	0002777f 	.word	0x0002777f
   1564c:	200020e0 	.word	0x200020e0
   15650:	20000acc 	.word	0x20000acc
   15654:	00027793 	.word	0x00027793
   15658:	000277b6 	.word	0x000277b6

0001565c <bt_conn_prepare_events>:
{
   1565c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15660:	4606      	mov	r6, r0
	z_impl_k_poll_signal_init(sig);
   15662:	4821      	ldr	r0, [pc, #132]	; (156e8 <bt_conn_prepare_events+0x8c>)
   15664:	4c21      	ldr	r4, [pc, #132]	; (156ec <bt_conn_prepare_events+0x90>)
   15666:	f00f ffb7 	bl	255d8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1566a:	4b1f      	ldr	r3, [pc, #124]	; (156e8 <bt_conn_prepare_events+0x8c>)
   1566c:	2200      	movs	r2, #0
   1566e:	2101      	movs	r1, #1
   15670:	4630      	mov	r0, r6
   15672:	f009 fd3f 	bl	1f0f4 <k_poll_event_init>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   15676:	2700      	movs	r7, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15678:	2501      	movs	r5, #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1567a:	f04f 0914 	mov.w	r9, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1567e:	f3bf 8f5b 	dmb	ish
   15682:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   15686:	f3bf 8f5b 	dmb	ish
   1568a:	fb09 6805 	mla	r8, r9, r5, r6
	if (!atomic_get(&conn->ref)) {
   1568e:	b19b      	cbz	r3, 156b8 <bt_conn_prepare_events+0x5c>
	if (conn->state == BT_CONN_DISCONNECTED &&
   15690:	7aa3      	ldrb	r3, [r4, #10]
   15692:	b9cb      	cbnz	r3, 156c8 <bt_conn_prepare_events+0x6c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15694:	f3bf 8f5b 	dmb	ish
   15698:	1d23      	adds	r3, r4, #4
   1569a:	e853 2f00 	ldrex	r2, [r3]
   1569e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   156a2:	e843 1000 	strex	r0, r1, [r3]
   156a6:	2800      	cmp	r0, #0
   156a8:	d1f7      	bne.n	1569a <bt_conn_prepare_events+0x3e>
   156aa:	f3bf 8f5b 	dmb	ish
   156ae:	0653      	lsls	r3, r2, #25
   156b0:	d50a      	bpl.n	156c8 <bt_conn_prepare_events+0x6c>
		conn_cleanup(conn);
   156b2:	4620      	mov	r0, r4
   156b4:	f7ff fed0 	bl	15458 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   156b8:	3701      	adds	r7, #1
   156ba:	2f04      	cmp	r7, #4
   156bc:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
   156c0:	d1dd      	bne.n	1567e <bt_conn_prepare_events+0x22>
}
   156c2:	4628      	mov	r0, r5
   156c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   156c8:	7aa3      	ldrb	r3, [r4, #10]
   156ca:	2b07      	cmp	r3, #7
   156cc:	d1f4      	bne.n	156b8 <bt_conn_prepare_events+0x5c>
	k_poll_event_init(&events[0],
   156ce:	f104 0338 	add.w	r3, r4, #56	; 0x38
   156d2:	2200      	movs	r2, #0
   156d4:	2104      	movs	r1, #4
   156d6:	4640      	mov	r0, r8
   156d8:	f009 fd0c 	bl	1f0f4 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   156dc:	2301      	movs	r3, #1
   156de:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   156e2:	441d      	add	r5, r3
   156e4:	e7e8      	b.n	156b8 <bt_conn_prepare_events+0x5c>
   156e6:	bf00      	nop
   156e8:	20000698 	.word	0x20000698
   156ec:	20001ac0 	.word	0x20001ac0

000156f0 <bt_conn_ref>:
{
   156f0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   156f2:	b950      	cbnz	r0, 1570a <bt_conn_ref+0x1a>
   156f4:	4912      	ldr	r1, [pc, #72]	; (15740 <bt_conn_ref+0x50>)
   156f6:	4813      	ldr	r0, [pc, #76]	; (15744 <bt_conn_ref+0x54>)
   156f8:	f44f 628f 	mov.w	r2, #1144	; 0x478
   156fc:	f00d fc8f 	bl	2301e <assert_print>
   15700:	480f      	ldr	r0, [pc, #60]	; (15740 <bt_conn_ref+0x50>)
   15702:	f44f 618f 	mov.w	r1, #1144	; 0x478
   15706:	f00d fc83 	bl	23010 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1570a:	f3bf 8f5b 	dmb	ish
   1570e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   15712:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   15716:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
		if (!old) {
   1571a:	b17b      	cbz	r3, 1573c <bt_conn_ref+0x4c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1571c:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   15720:	1c59      	adds	r1, r3, #1
   15722:	e852 4f00 	ldrex	r4, [r2]
   15726:	429c      	cmp	r4, r3
   15728:	d104      	bne.n	15734 <bt_conn_ref+0x44>
   1572a:	e842 1c00 	strex	ip, r1, [r2]
   1572e:	f1bc 0f00 	cmp.w	ip, #0
   15732:	d1f6      	bne.n	15722 <bt_conn_ref+0x32>
   15734:	f3bf 8f5b 	dmb	ish
   15738:	d1e7      	bne.n	1570a <bt_conn_ref+0x1a>
}
   1573a:	bd10      	pop	{r4, pc}
			return NULL;
   1573c:	4618      	mov	r0, r3
   1573e:	e7fc      	b.n	1573a <bt_conn_ref+0x4a>
   15740:	0002769b 	.word	0x0002769b
   15744:	00026718 	.word	0x00026718

00015748 <bt_conn_unref>:
{
   15748:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   1574a:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1574e:	f3bf 8f5b 	dmb	ish
   15752:	e853 2f00 	ldrex	r2, [r3]
   15756:	1e51      	subs	r1, r2, #1
   15758:	e843 1400 	strex	r4, r1, [r3]
   1575c:	2c00      	cmp	r4, #0
   1575e:	d1f8      	bne.n	15752 <bt_conn_unref+0xa>
   15760:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   15764:	2a00      	cmp	r2, #0
   15766:	dc0a      	bgt.n	1577e <bt_conn_unref+0x36>
   15768:	490d      	ldr	r1, [pc, #52]	; (157a0 <bt_conn_unref+0x58>)
   1576a:	480e      	ldr	r0, [pc, #56]	; (157a4 <bt_conn_unref+0x5c>)
   1576c:	f240 4295 	movw	r2, #1173	; 0x495
   15770:	f00d fc55 	bl	2301e <assert_print>
   15774:	480a      	ldr	r0, [pc, #40]	; (157a0 <bt_conn_unref+0x58>)
   15776:	f240 4195 	movw	r1, #1173	; 0x495
   1577a:	f00d fc49 	bl	23010 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1577e:	8842      	ldrh	r2, [r0, #2]
   15780:	f240 1301 	movw	r3, #257	; 0x101
   15784:	429a      	cmp	r2, r3
   15786:	d10a      	bne.n	1579e <bt_conn_unref+0x56>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15788:	f3bf 8f5b 	dmb	ish
   1578c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   15790:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   15794:	b91b      	cbnz	r3, 1579e <bt_conn_unref+0x56>
}
   15796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1579a:	f7ff bcaf 	b.w	150fc <bt_le_adv_resume>
}
   1579e:	bd10      	pop	{r4, pc}
   157a0:	0002769b 	.word	0x0002769b
   157a4:	00026718 	.word	0x00026718

000157a8 <bt_conn_lookup_handle>:
{
   157a8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   157aa:	2104      	movs	r1, #4
   157ac:	4801      	ldr	r0, [pc, #4]	; (157b4 <bt_conn_lookup_handle+0xc>)
   157ae:	f00e b93b 	b.w	23a28 <conn_lookup_handle>
   157b2:	bf00      	nop
   157b4:	20001ac0 	.word	0x20001ac0

000157b8 <bt_conn_set_state>:
{
   157b8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   157ba:	7a86      	ldrb	r6, [r0, #10]
   157bc:	428e      	cmp	r6, r1
{
   157be:	4604      	mov	r4, r0
   157c0:	460d      	mov	r5, r1
	if (conn->state == state) {
   157c2:	d10b      	bne.n	157dc <bt_conn_set_state+0x24>
	switch (state) {
   157c4:	2e08      	cmp	r6, #8
   157c6:	bf96      	itet	ls
   157c8:	4b61      	ldrls	r3, [pc, #388]	; (15950 <bt_conn_set_state+0x198>)
	if (conn->state == state) {
   157ca:	4a62      	ldrhi	r2, [pc, #392]	; (15954 <bt_conn_set_state+0x19c>)
   157cc:	f853 2026 	ldrls.w	r2, [r3, r6, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   157d0:	4861      	ldr	r0, [pc, #388]	; (15958 <bt_conn_set_state+0x1a0>)
   157d2:	2157      	movs	r1, #87	; 0x57
}
   157d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   157d8:	f00d bc2f 	b.w	2303a <z_log_minimal_printk>
	conn->state = state;
   157dc:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   157de:	b926      	cbnz	r6, 157ea <bt_conn_set_state+0x32>
		if (conn->type != BT_CONN_TYPE_ISO) {
   157e0:	7883      	ldrb	r3, [r0, #2]
   157e2:	2b08      	cmp	r3, #8
   157e4:	d001      	beq.n	157ea <bt_conn_set_state+0x32>
			bt_conn_ref(conn);
   157e6:	f7ff ff83 	bl	156f0 <bt_conn_ref>
	switch (conn->state) {
   157ea:	7aa3      	ldrb	r3, [r4, #10]
   157ec:	2b08      	cmp	r3, #8
   157ee:	f200 80aa 	bhi.w	15946 <bt_conn_set_state+0x18e>
   157f2:	e8df f003 	tbb	[pc, r3]
   157f6:	0536      	.short	0x0536
   157f8:	8a8a8a8a 	.word	0x8a8a8a8a
   157fc:	1c8a      	.short	0x1c8a
   157fe:	8a          	.byte	0x8a
   157ff:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   15800:	4d56      	ldr	r5, [pc, #344]	; (1595c <bt_conn_set_state+0x1a4>)
		tx->pending_no_cb = 0U;
   15802:	2600      	movs	r6, #0
	__asm__ volatile(
   15804:	f04f 0240 	mov.w	r2, #64	; 0x40
   15808:	f3ef 8311 	mrs	r3, BASEPRI
   1580c:	f382 8812 	msr	BASEPRI_MAX, r2
   15810:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   15814:	69e2      	ldr	r2, [r4, #28]
   15816:	2a00      	cmp	r2, #0
   15818:	d071      	beq.n	158fe <bt_conn_set_state+0x146>
			conn->pending_no_cb--;
   1581a:	3a01      	subs	r2, #1
   1581c:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   1581e:	f383 8811 	msr	BASEPRI, r3
   15822:	f3bf 8f6f 	isb	sy
   15826:	4628      	mov	r0, r5
   15828:	f007 fbbe 	bl	1cfa8 <z_impl_k_sem_give>
}
   1582c:	e7ea      	b.n	15804 <bt_conn_set_state+0x4c>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1582e:	78a3      	ldrb	r3, [r4, #2]
   15830:	2b04      	cmp	r3, #4
   15832:	d06a      	beq.n	1590a <bt_conn_set_state+0x152>
	z_impl_k_queue_init(queue);
   15834:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15838:	f00f fd42 	bl	252c0 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   1583c:	4848      	ldr	r0, [pc, #288]	; (15960 <bt_conn_set_state+0x1a8>)
   1583e:	2100      	movs	r1, #0
   15840:	f009 fd34 	bl	1f2ac <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15844:	2300      	movs	r3, #0
	list->tail = NULL;
   15846:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1584a:	78e3      	ldrb	r3, [r4, #3]
   1584c:	2b01      	cmp	r3, #1
   1584e:	d15c      	bne.n	1590a <bt_conn_set_state+0x152>
			k_work_schedule(&conn->deferred_work,
   15850:	f104 0060 	add.w	r0, r4, #96	; 0x60
   15854:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   15858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   1585c:	2300      	movs	r3, #0
   1585e:	f007 bf99 	b.w	1d794 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15862:	78a3      	ldrb	r3, [r4, #2]
   15864:	2b04      	cmp	r3, #4
   15866:	d104      	bne.n	15872 <bt_conn_set_state+0xba>
			bt_conn_unref(conn);
   15868:	4620      	mov	r0, r4
}
   1586a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   1586e:	f7ff bf6b 	b.w	15748 <bt_conn_unref>
		switch (old_state) {
   15872:	2e08      	cmp	r6, #8
   15874:	d849      	bhi.n	1590a <bt_conn_set_state+0x152>
   15876:	a301      	add	r3, pc, #4	; (adr r3, 1587c <bt_conn_set_state+0xc4>)
   15878:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1587c:	000158f7 	.word	0x000158f7
   15880:	000158a1 	.word	0x000158a1
   15884:	000158e9 	.word	0x000158e9
   15888:	00015869 	.word	0x00015869
   1588c:	00015869 	.word	0x00015869
   15890:	000158e9 	.word	0x000158e9
   15894:	000158e9 	.word	0x000158e9
   15898:	0001590b 	.word	0x0001590b
   1589c:	000158f7 	.word	0x000158f7
			tx_notify(conn);
   158a0:	4620      	mov	r0, r4
   158a2:	f7ff fc9d 	bl	151e0 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   158a6:	78a3      	ldrb	r3, [r4, #2]
   158a8:	2b01      	cmp	r3, #1
   158aa:	d10a      	bne.n	158c2 <bt_conn_set_state+0x10a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   158ac:	f104 0560 	add.w	r5, r4, #96	; 0x60
   158b0:	4628      	mov	r0, r5
   158b2:	f00f fd9b 	bl	253ec <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   158b6:	f010 0f0c 	tst.w	r0, #12
   158ba:	d002      	beq.n	158c2 <bt_conn_set_state+0x10a>
				k_work_cancel_delayable(&conn->deferred_work);
   158bc:	4628      	mov	r0, r5
   158be:	f007 ffd3 	bl	1d868 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   158c2:	f3bf 8f5b 	dmb	ish
   158c6:	3404      	adds	r4, #4
   158c8:	e854 3f00 	ldrex	r3, [r4]
   158cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   158d0:	e844 3200 	strex	r2, r3, [r4]
   158d4:	2a00      	cmp	r2, #0
   158d6:	d1f7      	bne.n	158c8 <bt_conn_set_state+0x110>
   158d8:	f3bf 8f5b 	dmb	ish
   158dc:	4820      	ldr	r0, [pc, #128]	; (15960 <bt_conn_set_state+0x1a8>)
}
   158de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   158e2:	2100      	movs	r1, #0
   158e4:	f009 bce2 	b.w	1f2ac <z_impl_k_poll_signal_raise>
			if (conn->err) {
   158e8:	7a63      	ldrb	r3, [r4, #9]
   158ea:	2b00      	cmp	r3, #0
   158ec:	d0bc      	beq.n	15868 <bt_conn_set_state+0xb0>
				notify_connected(conn);
   158ee:	4620      	mov	r0, r4
   158f0:	f7ff fc48 	bl	15184 <notify_connected>
   158f4:	e7b8      	b.n	15868 <bt_conn_set_state+0xb0>
			BT_WARN("Invalid (%u) old state", state);
   158f6:	481b      	ldr	r0, [pc, #108]	; (15964 <bt_conn_set_state+0x1ac>)
   158f8:	462a      	mov	r2, r5
   158fa:	2157      	movs	r1, #87	; 0x57
   158fc:	e76a      	b.n	157d4 <bt_conn_set_state+0x1c>
	return list->head;
   158fe:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   15900:	b921      	cbnz	r1, 1590c <bt_conn_set_state+0x154>
   15902:	f383 8811 	msr	BASEPRI, r3
   15906:	f3bf 8f6f 	isb	sy
}
   1590a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1590c:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1590e:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   15910:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15912:	4281      	cmp	r1, r0
	list->tail = node;
   15914:	bf08      	it	eq
   15916:	61a2      	streq	r2, [r4, #24]
   15918:	f383 8811 	msr	BASEPRI, r3
   1591c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15920:	f04f 0240 	mov.w	r2, #64	; 0x40
   15924:	f3ef 8311 	mrs	r3, BASEPRI
   15928:	f382 8812 	msr	BASEPRI_MAX, r2
   1592c:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   15930:	68ca      	ldr	r2, [r1, #12]
   15932:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   15934:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   15936:	f383 8811 	msr	BASEPRI, r3
   1593a:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1593e:	4620      	mov	r0, r4
   15940:	f7ff fc7e 	bl	15240 <conn_tx_destroy>
   15944:	e76f      	b.n	15826 <bt_conn_set_state+0x6e>
		BT_WARN("no valid (%u) state was set", state);
   15946:	4808      	ldr	r0, [pc, #32]	; (15968 <bt_conn_set_state+0x1b0>)
   15948:	462a      	mov	r2, r5
   1594a:	2157      	movs	r1, #87	; 0x57
   1594c:	e742      	b.n	157d4 <bt_conn_set_state+0x1c>
   1594e:	bf00      	nop
   15950:	00025ccc 	.word	0x00025ccc
   15954:	000277e1 	.word	0x000277e1
   15958:	000277eb 	.word	0x000277eb
   1595c:	20000478 	.word	0x20000478
   15960:	20000698 	.word	0x20000698
   15964:	00027801 	.word	0x00027801
   15968:	0002781d 	.word	0x0002781d

0001596c <bt_conn_index>:
{
   1596c:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   1596e:	4b0b      	ldr	r3, [pc, #44]	; (1599c <bt_conn_index+0x30>)
   15970:	4a0b      	ldr	r2, [pc, #44]	; (159a0 <bt_conn_index+0x34>)
   15972:	1ac3      	subs	r3, r0, r3
   15974:	10d8      	asrs	r0, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   15976:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
		index = conn - acl_conns;
   1597a:	fb02 f000 	mul.w	r0, r2, r0
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1597e:	d90a      	bls.n	15996 <bt_conn_index+0x2a>
   15980:	4908      	ldr	r1, [pc, #32]	; (159a4 <bt_conn_index+0x38>)
   15982:	4809      	ldr	r0, [pc, #36]	; (159a8 <bt_conn_index+0x3c>)
   15984:	f240 42b3 	movw	r2, #1203	; 0x4b3
   15988:	f00d fb49 	bl	2301e <assert_print>
   1598c:	4805      	ldr	r0, [pc, #20]	; (159a4 <bt_conn_index+0x38>)
   1598e:	f240 41b3 	movw	r1, #1203	; 0x4b3
   15992:	f00d fb3d 	bl	23010 <assert_post_action>
}
   15996:	b2c0      	uxtb	r0, r0
   15998:	bd08      	pop	{r3, pc}
   1599a:	bf00      	nop
   1599c:	20001ac0 	.word	0x20001ac0
   159a0:	c28f5c29 	.word	0xc28f5c29
   159a4:	0002769b 	.word	0x0002769b
   159a8:	00026718 	.word	0x00026718

000159ac <bt_conn_create_pdu_timeout>:
{
   159ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   159ae:	4604      	mov	r4, r0
   159b0:	460d      	mov	r5, r1
   159b2:	4617      	mov	r7, r2
   159b4:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   159b6:	f00f fc54 	bl	25262 <k_is_in_isr>
   159ba:	b150      	cbz	r0, 159d2 <bt_conn_create_pdu_timeout+0x26>
   159bc:	4910      	ldr	r1, [pc, #64]	; (15a00 <bt_conn_create_pdu_timeout+0x54>)
   159be:	4811      	ldr	r0, [pc, #68]	; (15a04 <bt_conn_create_pdu_timeout+0x58>)
   159c0:	f240 42cf 	movw	r2, #1231	; 0x4cf
   159c4:	f00d fb2b 	bl	2301e <assert_print>
   159c8:	480d      	ldr	r0, [pc, #52]	; (15a00 <bt_conn_create_pdu_timeout+0x54>)
   159ca:	f240 41cf 	movw	r1, #1231	; 0x4cf
   159ce:	f00d fb1f 	bl	23010 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   159d2:	490d      	ldr	r1, [pc, #52]	; (15a08 <bt_conn_create_pdu_timeout+0x5c>)
   159d4:	463a      	mov	r2, r7
   159d6:	2c00      	cmp	r4, #0
   159d8:	bf14      	ite	ne
   159da:	4620      	movne	r0, r4
   159dc:	4608      	moveq	r0, r1
   159de:	4633      	mov	r3, r6
   159e0:	f00e ffb5 	bl	2494e <net_buf_alloc_fixed>
	if (!buf) {
   159e4:	4604      	mov	r4, r0
   159e6:	b928      	cbnz	r0, 159f4 <bt_conn_create_pdu_timeout+0x48>
		BT_WARN("Unable to allocate buffer within timeout");
   159e8:	4808      	ldr	r0, [pc, #32]	; (15a0c <bt_conn_create_pdu_timeout+0x60>)
   159ea:	2157      	movs	r1, #87	; 0x57
   159ec:	f00d fb25 	bl	2303a <z_log_minimal_printk>
}
   159f0:	4620      	mov	r0, r4
   159f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   159f4:	1d29      	adds	r1, r5, #4
   159f6:	3008      	adds	r0, #8
   159f8:	f002 fd70 	bl	184dc <net_buf_simple_reserve>
	return buf;
   159fc:	e7f8      	b.n	159f0 <bt_conn_create_pdu_timeout+0x44>
   159fe:	bf00      	nop
   15a00:	0002769b 	.word	0x0002769b
   15a04:	00026718 	.word	0x00026718
   15a08:	20000ae8 	.word	0x20000ae8
   15a0c:	0002783e 	.word	0x0002783e

00015a10 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   15a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15a12:	f3bf 8f5b 	dmb	ish
   15a16:	6842      	ldr	r2, [r0, #4]
   15a18:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15a1c:	05d2      	lsls	r2, r2, #23
{
   15a1e:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15a20:	f100 0304 	add.w	r3, r0, #4
   15a24:	d519      	bpl.n	15a5a <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15a26:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15a2a:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   15a2e:	4291      	cmp	r1, r2
   15a30:	d813      	bhi.n	15a5a <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15a32:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   15a36:	4291      	cmp	r1, r2
   15a38:	d30f      	bcc.n	15a5a <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   15a3a:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   15a3e:	4291      	cmp	r1, r2
   15a40:	d10b      	bne.n	15a5a <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15a42:	f3bf 8f5b 	dmb	ish
   15a46:	e853 1f00 	ldrex	r1, [r3]
   15a4a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
   15a4e:	e843 1200 	strex	r2, r1, [r3]
   15a52:	2a00      	cmp	r2, #0
   15a54:	d1f7      	bne.n	15a46 <notify_le_param_updated+0x36>
   15a56:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   15a5a:	4b16      	ldr	r3, [pc, #88]	; (15ab4 <notify_le_param_updated+0xa4>)
   15a5c:	681d      	ldr	r5, [r3, #0]
   15a5e:	b975      	cbnz	r5, 15a7e <notify_le_param_updated+0x6e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15a60:	4d15      	ldr	r5, [pc, #84]	; (15ab8 <notify_le_param_updated+0xa8>)
   15a62:	4f16      	ldr	r7, [pc, #88]	; (15abc <notify_le_param_updated+0xac>)
   15a64:	42bd      	cmp	r5, r7
   15a66:	d922      	bls.n	15aae <notify_le_param_updated+0x9e>
   15a68:	4915      	ldr	r1, [pc, #84]	; (15ac0 <notify_le_param_updated+0xb0>)
   15a6a:	4816      	ldr	r0, [pc, #88]	; (15ac4 <notify_le_param_updated+0xb4>)
   15a6c:	f240 52a2 	movw	r2, #1442	; 0x5a2
   15a70:	f00d fad5 	bl	2301e <assert_print>
   15a74:	4812      	ldr	r0, [pc, #72]	; (15ac0 <notify_le_param_updated+0xb0>)
   15a76:	f240 51a2 	movw	r1, #1442	; 0x5a2
   15a7a:	f00d fac9 	bl	23010 <assert_post_action>
		if (cb->le_param_updated) {
   15a7e:	68ee      	ldr	r6, [r5, #12]
   15a80:	b13e      	cbz	r6, 15a92 <notify_le_param_updated+0x82>
			cb->le_param_updated(conn, conn->le.interval,
   15a82:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   15a86:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15a8a:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   15a8e:	4620      	mov	r0, r4
   15a90:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   15a92:	692d      	ldr	r5, [r5, #16]
   15a94:	e7e3      	b.n	15a5e <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   15a96:	68ee      	ldr	r6, [r5, #12]
   15a98:	b13e      	cbz	r6, 15aaa <notify_le_param_updated+0x9a>
			cb->le_param_updated(conn, conn->le.interval,
   15a9a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   15a9e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15aa2:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   15aa6:	4620      	mov	r0, r4
   15aa8:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15aaa:	3514      	adds	r5, #20
   15aac:	e7da      	b.n	15a64 <notify_le_param_updated+0x54>
   15aae:	d3f2      	bcc.n	15a96 <notify_le_param_updated+0x86>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   15ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15ab2:	bf00      	nop
   15ab4:	20002768 	.word	0x20002768
   15ab8:	0002594c 	.word	0x0002594c
   15abc:	0002594c 	.word	0x0002594c
   15ac0:	0002769b 	.word	0x0002769b
   15ac4:	00026718 	.word	0x00026718

00015ac8 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   15ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15acc:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   15ace:	4608      	mov	r0, r1
{
   15ad0:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   15ad2:	f00d fe5e 	bl	23792 <bt_le_conn_params_valid>
   15ad6:	4605      	mov	r5, r0
   15ad8:	b918      	cbnz	r0, 15ae2 <le_param_req+0x1a>
		return false;
   15ada:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   15adc:	4628      	mov	r0, r5
   15ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   15ae2:	4b19      	ldr	r3, [pc, #100]	; (15b48 <le_param_req+0x80>)
   15ae4:	681e      	ldr	r6, [r3, #0]
   15ae6:	b97e      	cbnz	r6, 15b08 <le_param_req+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15ae8:	4e18      	ldr	r6, [pc, #96]	; (15b4c <le_param_req+0x84>)
   15aea:	f8df 8064 	ldr.w	r8, [pc, #100]	; 15b50 <le_param_req+0x88>
   15aee:	4546      	cmp	r6, r8
   15af0:	d923      	bls.n	15b3a <le_param_req+0x72>
   15af2:	4918      	ldr	r1, [pc, #96]	; (15b54 <le_param_req+0x8c>)
   15af4:	4818      	ldr	r0, [pc, #96]	; (15b58 <le_param_req+0x90>)
   15af6:	f240 52ea 	movw	r2, #1514	; 0x5ea
   15afa:	f00d fa90 	bl	2301e <assert_print>
   15afe:	4815      	ldr	r0, [pc, #84]	; (15b54 <le_param_req+0x8c>)
   15b00:	f240 51ea 	movw	r1, #1514	; 0x5ea
   15b04:	f00d fa84 	bl	23010 <assert_post_action>
		if (!cb->le_param_req) {
   15b08:	68b3      	ldr	r3, [r6, #8]
   15b0a:	b90b      	cbnz	r3, 15b10 <le_param_req+0x48>
	for (cb = callback_list; cb; cb = cb->_next) {
   15b0c:	6936      	ldr	r6, [r6, #16]
   15b0e:	e7ea      	b.n	15ae6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   15b10:	4621      	mov	r1, r4
   15b12:	4638      	mov	r0, r7
   15b14:	4798      	blx	r3
   15b16:	2800      	cmp	r0, #0
   15b18:	d0df      	beq.n	15ada <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15b1a:	4620      	mov	r0, r4
   15b1c:	f00d fe39 	bl	23792 <bt_le_conn_params_valid>
   15b20:	2800      	cmp	r0, #0
   15b22:	d1f3      	bne.n	15b0c <le_param_req+0x44>
   15b24:	e7d9      	b.n	15ada <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   15b26:	4621      	mov	r1, r4
   15b28:	4638      	mov	r0, r7
   15b2a:	4798      	blx	r3
   15b2c:	2800      	cmp	r0, #0
   15b2e:	d0d4      	beq.n	15ada <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15b30:	4620      	mov	r0, r4
   15b32:	f00d fe2e 	bl	23792 <bt_le_conn_params_valid>
   15b36:	b920      	cbnz	r0, 15b42 <le_param_req+0x7a>
   15b38:	e7cf      	b.n	15ada <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15b3a:	d2cf      	bcs.n	15adc <le_param_req+0x14>
		if (!cb->le_param_req) {
   15b3c:	68b3      	ldr	r3, [r6, #8]
   15b3e:	2b00      	cmp	r3, #0
   15b40:	d1f1      	bne.n	15b26 <le_param_req+0x5e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15b42:	3614      	adds	r6, #20
   15b44:	e7d3      	b.n	15aee <le_param_req+0x26>
   15b46:	bf00      	nop
   15b48:	20002768 	.word	0x20002768
   15b4c:	0002594c 	.word	0x0002594c
   15b50:	0002594c 	.word	0x0002594c
   15b54:	0002769b 	.word	0x0002769b
   15b58:	00026718 	.word	0x00026718

00015b5c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   15b5c:	4b02      	ldr	r3, [pc, #8]	; (15b68 <bt_conn_cb_register+0xc>)
   15b5e:	681a      	ldr	r2, [r3, #0]
   15b60:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   15b62:	6018      	str	r0, [r3, #0]
}
   15b64:	4770      	bx	lr
   15b66:	bf00      	nop
   15b68:	20002768 	.word	0x20002768

00015b6c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   15b6c:	b570      	push	{r4, r5, r6, lr}
   15b6e:	4606      	mov	r6, r0
   15b70:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   15b72:	4809      	ldr	r0, [pc, #36]	; (15b98 <bt_conn_add_le+0x2c>)
   15b74:	2104      	movs	r1, #4
   15b76:	f7ff fc3d 	bl	153f4 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   15b7a:	4604      	mov	r4, r0
   15b7c:	b150      	cbz	r0, 15b94 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   15b7e:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   15b80:	2207      	movs	r2, #7
   15b82:	4629      	mov	r1, r5
   15b84:	3090      	adds	r0, #144	; 0x90
   15b86:	f00d fcef 	bl	23568 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   15b8a:	2301      	movs	r3, #1
   15b8c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   15b8e:	4b03      	ldr	r3, [pc, #12]	; (15b9c <bt_conn_add_le+0x30>)
   15b90:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   15b94:	4620      	mov	r0, r4
   15b96:	bd70      	pop	{r4, r5, r6, pc}
   15b98:	20001ac0 	.word	0x20001ac0
   15b9c:	00280018 	.word	0x00280018

00015ba0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   15ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ba4:	4e0f      	ldr	r6, [pc, #60]	; (15be4 <bt_conn_lookup_addr_le+0x44>)
   15ba6:	4607      	mov	r7, r0
   15ba8:	4688      	mov	r8, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   15baa:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15bac:	4630      	mov	r0, r6
   15bae:	f7ff fd9f 	bl	156f0 <bt_conn_ref>

		if (!conn) {
   15bb2:	4604      	mov	r4, r0
   15bb4:	b120      	cbz	r0, 15bc0 <bt_conn_lookup_addr_le+0x20>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15bb6:	7883      	ldrb	r3, [r0, #2]
   15bb8:	2b01      	cmp	r3, #1
   15bba:	d00a      	beq.n	15bd2 <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   15bbc:	f7ff fdc4 	bl	15748 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   15bc0:	3501      	adds	r5, #1
   15bc2:	2d04      	cmp	r5, #4
   15bc4:	f106 06c8 	add.w	r6, r6, #200	; 0xc8
   15bc8:	d1f0      	bne.n	15bac <bt_conn_lookup_addr_le+0xc>
		}

		return conn;
	}

	return NULL;
   15bca:	2400      	movs	r4, #0
}
   15bcc:	4620      	mov	r0, r4
   15bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   15bd2:	4642      	mov	r2, r8
   15bd4:	4639      	mov	r1, r7
   15bd6:	f00d ff74 	bl	23ac2 <bt_conn_is_peer_addr_le>
   15bda:	2800      	cmp	r0, #0
   15bdc:	d1f6      	bne.n	15bcc <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   15bde:	4620      	mov	r0, r4
   15be0:	e7ec      	b.n	15bbc <bt_conn_lookup_addr_le+0x1c>
   15be2:	bf00      	nop
   15be4:	20001ac0 	.word	0x20001ac0

00015be8 <bt_conn_exists_le>:
{
   15be8:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   15bea:	f7ff ffd9 	bl	15ba0 <bt_conn_lookup_addr_le>
	if (conn) {
   15bee:	4604      	mov	r4, r0
   15bf0:	b170      	cbz	r0, 15c10 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   15bf2:	7a83      	ldrb	r3, [r0, #10]
   15bf4:	4807      	ldr	r0, [pc, #28]	; (15c14 <bt_conn_exists_le+0x2c>)
   15bf6:	2b08      	cmp	r3, #8
   15bf8:	bf96      	itet	ls
   15bfa:	4a07      	ldrls	r2, [pc, #28]	; (15c18 <bt_conn_exists_le+0x30>)
   15bfc:	4a07      	ldrhi	r2, [pc, #28]	; (15c1c <bt_conn_exists_le+0x34>)
   15bfe:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   15c02:	2157      	movs	r1, #87	; 0x57
   15c04:	f00d fa19 	bl	2303a <z_log_minimal_printk>
		bt_conn_unref(conn);
   15c08:	4620      	mov	r0, r4
   15c0a:	f7ff fd9d 	bl	15748 <bt_conn_unref>
		return true;
   15c0e:	2001      	movs	r0, #1
}
   15c10:	bd10      	pop	{r4, pc}
   15c12:	bf00      	nop
   15c14:	0002786c 	.word	0x0002786c
   15c18:	00025ccc 	.word	0x00025ccc
   15c1c:	000277e1 	.word	0x000277e1

00015c20 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   15c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15c24:	f8df a050 	ldr.w	sl, [pc, #80]	; 15c78 <bt_conn_lookup_state_le+0x58>
{
   15c28:	4606      	mov	r6, r0
   15c2a:	460f      	mov	r7, r1
   15c2c:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   15c2e:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15c30:	f04f 09c8 	mov.w	r9, #200	; 0xc8
   15c34:	fb09 a005 	mla	r0, r9, r5, sl
   15c38:	f7ff fd5a 	bl	156f0 <bt_conn_ref>

		if (!conn) {
   15c3c:	4604      	mov	r4, r0
   15c3e:	b120      	cbz	r0, 15c4a <bt_conn_lookup_state_le+0x2a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15c40:	7883      	ldrb	r3, [r0, #2]
   15c42:	2b01      	cmp	r3, #1
   15c44:	d006      	beq.n	15c54 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   15c46:	f7ff fd7f 	bl	15748 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   15c4a:	3501      	adds	r5, #1
   15c4c:	2d04      	cmp	r5, #4
   15c4e:	d1f1      	bne.n	15c34 <bt_conn_lookup_state_le+0x14>
		}

		return conn;
	}

	return NULL;
   15c50:	2400      	movs	r4, #0
   15c52:	e00d      	b.n	15c70 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   15c54:	b137      	cbz	r7, 15c64 <bt_conn_lookup_state_le+0x44>
   15c56:	463a      	mov	r2, r7
   15c58:	4631      	mov	r1, r6
   15c5a:	f00d ff32 	bl	23ac2 <bt_conn_is_peer_addr_le>
   15c5e:	b908      	cbnz	r0, 15c64 <bt_conn_lookup_state_le+0x44>
			bt_conn_unref(conn);
   15c60:	4620      	mov	r0, r4
   15c62:	e7f0      	b.n	15c46 <bt_conn_lookup_state_le+0x26>
		if (!(conn->state == state && conn->id == id)) {
   15c64:	7aa3      	ldrb	r3, [r4, #10]
   15c66:	4543      	cmp	r3, r8
   15c68:	d1fa      	bne.n	15c60 <bt_conn_lookup_state_le+0x40>
   15c6a:	7a23      	ldrb	r3, [r4, #8]
   15c6c:	42b3      	cmp	r3, r6
   15c6e:	d1f7      	bne.n	15c60 <bt_conn_lookup_state_le+0x40>
}
   15c70:	4620      	mov	r0, r4
   15c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15c76:	bf00      	nop
   15c78:	20001ac0 	.word	0x20001ac0

00015c7c <send_conn_le_param_update>:
{
   15c7c:	b538      	push	{r3, r4, r5, lr}
   15c7e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   15c80:	4608      	mov	r0, r1
{
   15c82:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15c84:	f00d fd85 	bl	23792 <bt_le_conn_params_valid>
   15c88:	b348      	cbz	r0, 15cde <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15c8a:	4b16      	ldr	r3, [pc, #88]	; (15ce4 <send_conn_le_param_update+0x68>)
   15c8c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   15c90:	0799      	lsls	r1, r3, #30
   15c92:	d407      	bmi.n	15ca4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   15c94:	78e3      	ldrb	r3, [r4, #3]
   15c96:	b183      	cbz	r3, 15cba <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   15c98:	4629      	mov	r1, r5
   15c9a:	4620      	mov	r0, r4
}
   15c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15ca0:	f000 ba72 	b.w	16188 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15ca4:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   15ca8:	079a      	lsls	r2, r3, #30
   15caa:	d5f3      	bpl.n	15c94 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15cac:	f3bf 8f5b 	dmb	ish
   15cb0:	6863      	ldr	r3, [r4, #4]
   15cb2:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   15cb6:	059b      	lsls	r3, r3, #22
   15cb8:	d4ec      	bmi.n	15c94 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   15cba:	4629      	mov	r1, r5
   15cbc:	4620      	mov	r0, r4
   15cbe:	f00d ff22 	bl	23b06 <bt_conn_le_conn_update>
		if (rc == 0) {
   15cc2:	b958      	cbnz	r0, 15cdc <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   15cc4:	882b      	ldrh	r3, [r5, #0]
   15cc6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   15cca:	886b      	ldrh	r3, [r5, #2]
   15ccc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   15cd0:	88ab      	ldrh	r3, [r5, #4]
   15cd2:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   15cd6:	88eb      	ldrh	r3, [r5, #6]
   15cd8:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   15cdc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15cde:	f06f 0015 	mvn.w	r0, #21
   15ce2:	e7fb      	b.n	15cdc <send_conn_le_param_update+0x60>
   15ce4:	20000378 	.word	0x20000378

00015ce8 <deferred_work>:
{
   15ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   15cea:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   15cee:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   15cf0:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   15cf4:	bb5b      	cbnz	r3, 15d4e <deferred_work+0x66>
		bt_l2cap_disconnected(conn);
   15cf6:	4628      	mov	r0, r5
   15cf8:	f00d ff44 	bl	23b84 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15cfc:	4b2c      	ldr	r3, [pc, #176]	; (15db0 <deferred_work+0xc8>)
   15cfe:	681e      	ldr	r6, [r3, #0]
   15d00:	b976      	cbnz	r6, 15d20 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15d02:	4e2c      	ldr	r6, [pc, #176]	; (15db4 <deferred_work+0xcc>)
   15d04:	4f2c      	ldr	r7, [pc, #176]	; (15db8 <deferred_work+0xd0>)
   15d06:	42be      	cmp	r6, r7
   15d08:	d91a      	bls.n	15d40 <deferred_work+0x58>
   15d0a:	492c      	ldr	r1, [pc, #176]	; (15dbc <deferred_work+0xd4>)
   15d0c:	482c      	ldr	r0, [pc, #176]	; (15dc0 <deferred_work+0xd8>)
   15d0e:	f240 5269 	movw	r2, #1385	; 0x569
   15d12:	f00d f984 	bl	2301e <assert_print>
   15d16:	4829      	ldr	r0, [pc, #164]	; (15dbc <deferred_work+0xd4>)
   15d18:	f240 5169 	movw	r1, #1385	; 0x569
   15d1c:	f00d f978 	bl	23010 <assert_post_action>
		if (cb->disconnected) {
   15d20:	6873      	ldr	r3, [r6, #4]
   15d22:	b11b      	cbz	r3, 15d2c <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   15d24:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   15d28:	4628      	mov	r0, r5
   15d2a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15d2c:	6936      	ldr	r6, [r6, #16]
   15d2e:	e7e7      	b.n	15d00 <deferred_work+0x18>
		if (cb->disconnected) {
   15d30:	6873      	ldr	r3, [r6, #4]
   15d32:	b11b      	cbz	r3, 15d3c <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   15d34:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   15d38:	4628      	mov	r0, r5
   15d3a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15d3c:	3614      	adds	r6, #20
   15d3e:	e7e2      	b.n	15d06 <deferred_work+0x1e>
   15d40:	d3f6      	bcc.n	15d30 <deferred_work+0x48>
		bt_conn_unref(conn);
   15d42:	4628      	mov	r0, r5
}
   15d44:	b003      	add	sp, #12
   15d46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   15d4a:	f7ff bcfd 	b.w	15748 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   15d4e:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   15d52:	2b01      	cmp	r3, #1
   15d54:	d123      	bne.n	15d9e <deferred_work+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15d56:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   15d5a:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
   15d5e:	e856 3f00 	ldrex	r3, [r6]
   15d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   15d66:	e846 2100 	strex	r1, r2, [r6]
   15d6a:	2900      	cmp	r1, #0
   15d6c:	d1f7      	bne.n	15d5e <deferred_work+0x76>
   15d6e:	f3bf 8f5b 	dmb	ish
   15d72:	05db      	lsls	r3, r3, #23
   15d74:	d515      	bpl.n	15da2 <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15d76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15d78:	9300      	str	r3, [sp, #0]
   15d7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   15d7c:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   15d7e:	4669      	mov	r1, sp
   15d80:	4628      	mov	r0, r5
   15d82:	f7ff ff7b 	bl	15c7c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15d86:	f3bf 8f5b 	dmb	ish
   15d8a:	e856 3f00 	ldrex	r3, [r6]
   15d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15d92:	e846 3200 	strex	r2, r3, [r6]
   15d96:	2a00      	cmp	r2, #0
   15d98:	d1f7      	bne.n	15d8a <deferred_work+0xa2>
   15d9a:	f3bf 8f5b 	dmb	ish
}
   15d9e:	b003      	add	sp, #12
   15da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   15da2:	4a08      	ldr	r2, [pc, #32]	; (15dc4 <deferred_work+0xdc>)
   15da4:	6810      	ldr	r0, [r2, #0]
   15da6:	6851      	ldr	r1, [r2, #4]
   15da8:	466b      	mov	r3, sp
   15daa:	c303      	stmia	r3!, {r0, r1}
   15dac:	e7e7      	b.n	15d7e <deferred_work+0x96>
   15dae:	bf00      	nop
   15db0:	20002768 	.word	0x20002768
   15db4:	0002594c 	.word	0x0002594c
   15db8:	0002594c 	.word	0x0002594c
   15dbc:	0002769b 	.word	0x0002769b
   15dc0:	00026718 	.word	0x00026718
   15dc4:	00025aac 	.word	0x00025aac

00015dc8 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   15dc8:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   15dca:	4801      	ldr	r0, [pc, #4]	; (15dd0 <bt_conn_create_frag_timeout+0x8>)
   15dcc:	f7ff bdee 	b.w	159ac <bt_conn_create_pdu_timeout>
   15dd0:	20000b50 	.word	0x20000b50

00015dd4 <create_frag>:
{
   15dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15dd8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   15dda:	f04f 33ff 	mov.w	r3, #4294967295
   15dde:	f04f 32ff 	mov.w	r2, #4294967295
   15de2:	2000      	movs	r0, #0
{
   15de4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   15de6:	f7ff ffef 	bl	15dc8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   15dea:	7ab3      	ldrb	r3, [r6, #10]
   15dec:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   15dee:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15df0:	f04f 0600 	mov.w	r6, #0
   15df4:	d005      	beq.n	15e02 <create_frag+0x2e>
		net_buf_unref(frag);
   15df6:	f002 fc79 	bl	186ec <net_buf_unref>
		return NULL;
   15dfa:	4635      	mov	r5, r6
}
   15dfc:	4628      	mov	r0, r5
   15dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   15e02:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   15e04:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   15e08:	4e0c      	ldr	r6, [pc, #48]	; (15e3c <create_frag+0x68>)
   15e0a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15e0c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   15e10:	f00e fdae 	bl	24970 <net_buf_simple_tailroom>
   15e14:	4580      	cmp	r8, r0
   15e16:	d20c      	bcs.n	15e32 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   15e18:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15e1c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   15e20:	4632      	mov	r2, r6
   15e22:	4638      	mov	r0, r7
   15e24:	f00e fdac 	bl	24980 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   15e28:	4631      	mov	r1, r6
   15e2a:	4620      	mov	r0, r4
   15e2c:	f002 fd30 	bl	18890 <net_buf_simple_pull>
   15e30:	e7e4      	b.n	15dfc <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   15e32:	4638      	mov	r0, r7
   15e34:	f00e fd9c 	bl	24970 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15e38:	b286      	uxth	r6, r0
   15e3a:	e7ef      	b.n	15e1c <create_frag+0x48>
   15e3c:	20000378 	.word	0x20000378

00015e40 <bt_conn_process_tx>:
{
   15e40:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15e42:	7a83      	ldrb	r3, [r0, #10]
{
   15e44:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   15e46:	b993      	cbnz	r3, 15e6e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15e48:	f3bf 8f5b 	dmb	ish
   15e4c:	1d03      	adds	r3, r0, #4
   15e4e:	e853 2f00 	ldrex	r2, [r3]
   15e52:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   15e56:	e843 1500 	strex	r5, r1, [r3]
   15e5a:	2d00      	cmp	r5, #0
   15e5c:	d1f7      	bne.n	15e4e <bt_conn_process_tx+0xe>
   15e5e:	f3bf 8f5b 	dmb	ish
   15e62:	0653      	lsls	r3, r2, #25
   15e64:	d503      	bpl.n	15e6e <bt_conn_process_tx+0x2e>
}
   15e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   15e6a:	f7ff baf5 	b.w	15458 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15e6e:	2200      	movs	r2, #0
   15e70:	2300      	movs	r3, #0
   15e72:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15e76:	f002 fb07 	bl	18488 <net_buf_get>
	BT_ASSERT(buf);
   15e7a:	4605      	mov	r5, r0
   15e7c:	b958      	cbnz	r0, 15e96 <bt_conn_process_tx+0x56>
   15e7e:	4923      	ldr	r1, [pc, #140]	; (15f0c <bt_conn_process_tx+0xcc>)
   15e80:	4823      	ldr	r0, [pc, #140]	; (15f10 <bt_conn_process_tx+0xd0>)
   15e82:	f44f 7247 	mov.w	r2, #796	; 0x31c
   15e86:	f00d f8ca 	bl	2301e <assert_print>
   15e8a:	4040      	eors	r0, r0
   15e8c:	f380 8811 	msr	BASEPRI, r0
   15e90:	f04f 0003 	mov.w	r0, #3
   15e94:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   15e96:	4e1f      	ldr	r6, [pc, #124]	; (15f14 <bt_conn_process_tx+0xd4>)
	if (buf->len <= conn_mtu(conn)) {
   15e98:	89aa      	ldrh	r2, [r5, #12]
   15e9a:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15e9e:	429a      	cmp	r2, r3
   15ea0:	d807      	bhi.n	15eb2 <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15ea2:	2300      	movs	r3, #0
   15ea4:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   15ea6:	4629      	mov	r1, r5
   15ea8:	4620      	mov	r0, r4
   15eaa:	f7ff f9ed 	bl	15288 <send_frag>
	if (!send_buf(conn, buf)) {
   15eae:	b968      	cbnz	r0, 15ecc <bt_conn_process_tx+0x8c>
   15eb0:	e005      	b.n	15ebe <bt_conn_process_tx+0x7e>
	frag = create_frag(conn, buf);
   15eb2:	4629      	mov	r1, r5
   15eb4:	4620      	mov	r0, r4
   15eb6:	f7ff ff8d 	bl	15dd4 <create_frag>
	if (!frag) {
   15eba:	4601      	mov	r1, r0
   15ebc:	b938      	cbnz	r0, 15ece <bt_conn_process_tx+0x8e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   15ebe:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   15ec0:	2300      	movs	r3, #0
   15ec2:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   15ec4:	4628      	mov	r0, r5
   15ec6:	f002 fc11 	bl	186ec <net_buf_unref>
		if (tx) {
   15eca:	b9ce      	cbnz	r6, 15f00 <bt_conn_process_tx+0xc0>
}
   15ecc:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   15ece:	2301      	movs	r3, #1
   15ed0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15ed2:	4620      	mov	r0, r4
   15ed4:	f7ff f9d8 	bl	15288 <send_frag>
   15ed8:	2800      	cmp	r0, #0
   15eda:	d0f0      	beq.n	15ebe <bt_conn_process_tx+0x7e>
	while (buf->len > conn_mtu(conn)) {
   15edc:	89aa      	ldrh	r2, [r5, #12]
   15ede:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15ee2:	429a      	cmp	r2, r3
   15ee4:	d802      	bhi.n	15eec <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   15ee6:	2300      	movs	r3, #0
   15ee8:	2203      	movs	r2, #3
   15eea:	e7dc      	b.n	15ea6 <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
   15eec:	4629      	mov	r1, r5
   15eee:	4620      	mov	r0, r4
   15ef0:	f7ff ff70 	bl	15dd4 <create_frag>
		if (!frag) {
   15ef4:	4601      	mov	r1, r0
   15ef6:	2800      	cmp	r0, #0
   15ef8:	d0e1      	beq.n	15ebe <bt_conn_process_tx+0x7e>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15efa:	2301      	movs	r3, #1
   15efc:	461a      	mov	r2, r3
   15efe:	e7e8      	b.n	15ed2 <bt_conn_process_tx+0x92>
			conn_tx_destroy(conn, tx);
   15f00:	4631      	mov	r1, r6
   15f02:	4620      	mov	r0, r4
}
   15f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   15f08:	f7ff b99a 	b.w	15240 <conn_tx_destroy>
   15f0c:	0002769b 	.word	0x0002769b
   15f10:	00026718 	.word	0x00026718
   15f14:	20000378 	.word	0x20000378

00015f18 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   15f18:	b570      	push	{r4, r5, r6, lr}
	z_impl_k_queue_init(queue);
   15f1a:	480c      	ldr	r0, [pc, #48]	; (15f4c <bt_conn_init+0x34>)
   15f1c:	4d0c      	ldr	r5, [pc, #48]	; (15f50 <bt_conn_init+0x38>)
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15f1e:	4e0b      	ldr	r6, [pc, #44]	; (15f4c <bt_conn_init+0x34>)
   15f20:	f00f f9ce 	bl	252c0 <z_impl_k_queue_init>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   15f24:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
   15f26:	4629      	mov	r1, r5
   15f28:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   15f2a:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
   15f2c:	f00f f9d5 	bl	252da <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   15f30:	2c04      	cmp	r4, #4
   15f32:	f105 0510 	add.w	r5, r5, #16
   15f36:	d1f6      	bne.n	15f26 <bt_conn_init+0xe>
	}

	bt_att_init();
   15f38:	f001 f82a 	bl	16f90 <bt_att_init>

	err = bt_smp_init();
   15f3c:	f00e fd04 	bl	24948 <bt_smp_init>
	if (err) {
   15f40:	4604      	mov	r4, r0
   15f42:	b908      	cbnz	r0, 15f48 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   15f44:	f00d fe5c 	bl	23c00 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   15f48:	4620      	mov	r0, r4
   15f4a:	bd70      	pop	{r4, r5, r6, pc}
   15f4c:	20000acc 	.word	0x20000acc
   15f50:	20002728 	.word	0x20002728

00015f54 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   15f54:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   15f56:	4d0c      	ldr	r5, [pc, #48]	; (15f88 <l2cap_accept+0x34>)
{
   15f58:	4602      	mov	r2, r0
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   15f5a:	2400      	movs	r4, #0
   15f5c:	2694      	movs	r6, #148	; 0x94
		if (l2cap->chan.chan.conn) {
   15f5e:	fb06 f304 	mul.w	r3, r6, r4
   15f62:	1958      	adds	r0, r3, r5
   15f64:	58eb      	ldr	r3, [r5, r3]
   15f66:	b14b      	cbz	r3, 15f7c <l2cap_accept+0x28>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   15f68:	3401      	adds	r4, #1
   15f6a:	2c04      	cmp	r4, #4
   15f6c:	d1f7      	bne.n	15f5e <l2cap_accept+0xa>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   15f6e:	4807      	ldr	r0, [pc, #28]	; (15f8c <l2cap_accept+0x38>)
   15f70:	2145      	movs	r1, #69	; 0x45
   15f72:	f00d f862 	bl	2303a <z_log_minimal_printk>
   15f76:	f06f 000b 	mvn.w	r0, #11
   15f7a:	e003      	b.n	15f84 <l2cap_accept+0x30>
		l2cap->chan.chan.ops = &ops;
   15f7c:	4a04      	ldr	r2, [pc, #16]	; (15f90 <l2cap_accept+0x3c>)
   15f7e:	6042      	str	r2, [r0, #4]
		*chan = &l2cap->chan.chan;
   15f80:	6008      	str	r0, [r1, #0]
		return 0;
   15f82:	4618      	mov	r0, r3

	return -ENOMEM;
}
   15f84:	bd70      	pop	{r4, r5, r6, pc}
   15f86:	bf00      	nop
   15f88:	2000276c 	.word	0x2000276c
   15f8c:	0002790d 	.word	0x0002790d
   15f90:	00025d10 	.word	0x00025d10

00015f94 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   15f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f96:	4605      	mov	r5, r0
   15f98:	460f      	mov	r7, r1
   15f9a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   15f9c:	2300      	movs	r3, #0
   15f9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15fa2:	2104      	movs	r1, #4
   15fa4:	2000      	movs	r0, #0
   15fa6:	f7ff fd01 	bl	159ac <bt_conn_create_pdu_timeout>
	if (!buf) {
   15faa:	4604      	mov	r4, r0
   15fac:	b930      	cbnz	r0, 15fbc <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   15fae:	4807      	ldr	r0, [pc, #28]	; (15fcc <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   15fb0:	462a      	mov	r2, r5
   15fb2:	2145      	movs	r1, #69	; 0x45
   15fb4:	f00d f841 	bl	2303a <z_log_minimal_printk>
}
   15fb8:	4620      	mov	r0, r4
   15fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   15fbc:	2104      	movs	r1, #4
   15fbe:	3008      	adds	r0, #8
   15fc0:	f002 fc9a 	bl	188f8 <net_buf_simple_add>
	hdr->code = code;
   15fc4:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   15fc6:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   15fc8:	8046      	strh	r6, [r0, #2]
	return buf;
   15fca:	e7f5      	b.n	15fb8 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   15fcc:	00027939 	.word	0x00027939

00015fd0 <bt_l2cap_connected>:
{
   15fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15fd2:	4d2a      	ldr	r5, [pc, #168]	; (1607c <bt_l2cap_connected+0xac>)
   15fd4:	4f2a      	ldr	r7, [pc, #168]	; (16080 <bt_l2cap_connected+0xb0>)
{
   15fd6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15fd8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15fda:	42bd      	cmp	r5, r7
   15fdc:	d94a      	bls.n	16074 <bt_l2cap_connected+0xa4>
   15fde:	4929      	ldr	r1, [pc, #164]	; (16084 <bt_l2cap_connected+0xb4>)
   15fe0:	4829      	ldr	r0, [pc, #164]	; (16088 <bt_l2cap_connected+0xb8>)
   15fe2:	f240 1281 	movw	r2, #385	; 0x181
   15fe6:	f00d f81a 	bl	2301e <assert_print>
   15fea:	4826      	ldr	r0, [pc, #152]	; (16084 <bt_l2cap_connected+0xb4>)
   15fec:	f240 1181 	movw	r1, #385	; 0x181
   15ff0:	f00d f80e 	bl	23010 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   15ff4:	686b      	ldr	r3, [r5, #4]
   15ff6:	a901      	add	r1, sp, #4
   15ff8:	4620      	mov	r0, r4
   15ffa:	4798      	blx	r3
   15ffc:	2800      	cmp	r0, #0
   15ffe:	db34      	blt.n	1606a <bt_l2cap_connected+0x9a>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   16000:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   16002:	882a      	ldrh	r2, [r5, #0]
   16004:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   16006:	849a      	strh	r2, [r3, #36]	; 0x24
   16008:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1600c:	68a8      	ldr	r0, [r5, #8]
   1600e:	f3bf 8f5b 	dmb	ish
   16012:	e852 1f00 	ldrex	r1, [r2]
   16016:	e842 6c00 	strex	ip, r6, [r2]
   1601a:	f1bc 0f00 	cmp.w	ip, #0
   1601e:	d1f8      	bne.n	16012 <bt_l2cap_connected+0x42>
   16020:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   16024:	609e      	str	r6, [r3, #8]
	return list->tail;
   16026:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   16028:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   1602c:	b9f9      	cbnz	r1, 1606e <bt_l2cap_connected+0x9e>
	list->head = node;
   1602e:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   16032:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   16034:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   16036:	9801      	ldr	r0, [sp, #4]
   16038:	6843      	ldr	r3, [r0, #4]
   1603a:	681b      	ldr	r3, [r3, #0]
   1603c:	b103      	cbz	r3, 16040 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   1603e:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16040:	9b01      	ldr	r3, [sp, #4]
   16042:	f3bf 8f5b 	dmb	ish
   16046:	3310      	adds	r3, #16
   16048:	e853 1f00 	ldrex	r1, [r3]
   1604c:	f041 0101 	orr.w	r1, r1, #1
   16050:	e843 1200 	strex	r2, r1, [r3]
   16054:	2a00      	cmp	r2, #0
   16056:	d1f7      	bne.n	16048 <bt_l2cap_connected+0x78>
   16058:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1605c:	9801      	ldr	r0, [sp, #4]
   1605e:	6843      	ldr	r3, [r0, #4]
   16060:	69db      	ldr	r3, [r3, #28]
   16062:	b113      	cbz	r3, 1606a <bt_l2cap_connected+0x9a>
			chan->ops->status(chan, chan->status);
   16064:	f100 0110 	add.w	r1, r0, #16
   16068:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1606a:	350c      	adds	r5, #12
   1606c:	e7b5      	b.n	15fda <bt_l2cap_connected+0xa>
	parent->next = child;
   1606e:	600a      	str	r2, [r1, #0]
	list->tail = node;
   16070:	65a2      	str	r2, [r4, #88]	; 0x58
}
   16072:	e7de      	b.n	16032 <bt_l2cap_connected+0x62>
   16074:	d3be      	bcc.n	15ff4 <bt_l2cap_connected+0x24>
}
   16076:	b003      	add	sp, #12
   16078:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1607a:	bf00      	nop
   1607c:	00025928 	.word	0x00025928
   16080:	0002594c 	.word	0x0002594c
   16084:	00027966 	.word	0x00027966
   16088:	00026718 	.word	0x00026718

0001608c <l2cap_recv>:
{
   1608c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   1608e:	898b      	ldrh	r3, [r1, #12]
   16090:	2b03      	cmp	r3, #3
{
   16092:	4606      	mov	r6, r0
   16094:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   16096:	d804      	bhi.n	160a2 <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
   16098:	4822      	ldr	r0, [pc, #136]	; (16124 <l2cap_recv+0x98>)
   1609a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
   1609c:	f00c ffcd 	bl	2303a <z_log_minimal_printk>
		return 0;
   160a0:	e00d      	b.n	160be <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   160a2:	2104      	movs	r1, #4
   160a4:	f105 0008 	add.w	r0, r5, #8
   160a8:	f002 fc0c 	bl	188c4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   160ac:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   160ae:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   160b0:	4293      	cmp	r3, r2
   160b2:	4604      	mov	r4, r0
   160b4:	d006      	beq.n	160c4 <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   160b6:	481c      	ldr	r0, [pc, #112]	; (16128 <l2cap_recv+0x9c>)
   160b8:	2145      	movs	r1, #69	; 0x45
   160ba:	f00c ffbe 	bl	2303a <z_log_minimal_printk>
}
   160be:	2000      	movs	r0, #0
   160c0:	b002      	add	sp, #8
   160c2:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   160c4:	7842      	ldrb	r2, [r0, #1]
   160c6:	b912      	cbnz	r2, 160ce <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
   160c8:	4818      	ldr	r0, [pc, #96]	; (1612c <l2cap_recv+0xa0>)
   160ca:	2145      	movs	r1, #69	; 0x45
   160cc:	e7e6      	b.n	1609c <l2cap_recv+0x10>
	switch (hdr->code) {
   160ce:	7802      	ldrb	r2, [r0, #0]
   160d0:	2a01      	cmp	r2, #1
   160d2:	d0f4      	beq.n	160be <l2cap_recv+0x32>
   160d4:	2a13      	cmp	r2, #19
   160d6:	d104      	bne.n	160e2 <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
   160d8:	2b01      	cmp	r3, #1
   160da:	d8f0      	bhi.n	160be <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
   160dc:	4814      	ldr	r0, [pc, #80]	; (16130 <l2cap_recv+0xa4>)
   160de:	2145      	movs	r1, #69	; 0x45
   160e0:	e7dc      	b.n	1609c <l2cap_recv+0x10>
		BT_WARN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   160e2:	4814      	ldr	r0, [pc, #80]	; (16134 <l2cap_recv+0xa8>)
   160e4:	2157      	movs	r1, #87	; 0x57
   160e6:	f00c ffa8 	bl	2303a <z_log_minimal_printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   160ea:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   160ec:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   160ee:	2202      	movs	r2, #2
   160f0:	2001      	movs	r0, #1
   160f2:	f7ff ff4f 	bl	15f94 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   160f6:	4604      	mov	r4, r0
   160f8:	2800      	cmp	r0, #0
   160fa:	d0e0      	beq.n	160be <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
   160fc:	2102      	movs	r1, #2
   160fe:	3008      	adds	r0, #8
   16100:	f002 fbfa 	bl	188f8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   16104:	2300      	movs	r3, #0
   16106:	7003      	strb	r3, [r0, #0]
   16108:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1610a:	4622      	mov	r2, r4
   1610c:	9300      	str	r3, [sp, #0]
   1610e:	2105      	movs	r1, #5
   16110:	4628      	mov	r0, r5
   16112:	f00d fd52 	bl	23bba <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   16116:	2800      	cmp	r0, #0
   16118:	d0d1      	beq.n	160be <l2cap_recv+0x32>
		net_buf_unref(buf);
   1611a:	4620      	mov	r0, r4
   1611c:	f002 fae6 	bl	186ec <net_buf_unref>
   16120:	e7cd      	b.n	160be <l2cap_recv+0x32>
   16122:	bf00      	nop
   16124:	00027997 	.word	0x00027997
   16128:	000279ba 	.word	0x000279ba
   1612c:	000279e0 	.word	0x000279e0
   16130:	00027a06 	.word	0x00027a06
   16134:	00027a27 	.word	0x00027a27

00016138 <bt_l2cap_recv>:
{
   16138:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1613a:	898b      	ldrh	r3, [r1, #12]
   1613c:	2b03      	cmp	r3, #3
{
   1613e:	4605      	mov	r5, r0
   16140:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   16142:	d808      	bhi.n	16156 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   16144:	480e      	ldr	r0, [pc, #56]	; (16180 <bt_l2cap_recv+0x48>)
   16146:	2145      	movs	r1, #69	; 0x45
   16148:	f00c ff77 	bl	2303a <z_log_minimal_printk>
	net_buf_unref(buf);
   1614c:	4620      	mov	r0, r4
}
   1614e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   16152:	f002 bacb 	b.w	186ec <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   16156:	2104      	movs	r1, #4
   16158:	f104 0008 	add.w	r0, r4, #8
   1615c:	f002 fbb2 	bl	188c4 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   16160:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   16162:	4628      	mov	r0, r5
   16164:	4611      	mov	r1, r2
   16166:	f00d fd41 	bl	23bec <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1616a:	b920      	cbnz	r0, 16176 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1616c:	4805      	ldr	r0, [pc, #20]	; (16184 <bt_l2cap_recv+0x4c>)
   1616e:	2157      	movs	r1, #87	; 0x57
   16170:	f00c ff63 	bl	2303a <z_log_minimal_printk>
		net_buf_unref(buf);
   16174:	e7ea      	b.n	1614c <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   16176:	6843      	ldr	r3, [r0, #4]
   16178:	4621      	mov	r1, r4
   1617a:	695b      	ldr	r3, [r3, #20]
   1617c:	4798      	blx	r3
   1617e:	e7e5      	b.n	1614c <bt_l2cap_recv+0x14>
   16180:	00027a54 	.word	0x00027a54
   16184:	00027a76 	.word	0x00027a76

00016188 <bt_l2cap_update_conn_param>:
{
   16188:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1618a:	4b17      	ldr	r3, [pc, #92]	; (161e8 <bt_l2cap_update_conn_param+0x60>)
{
   1618c:	460e      	mov	r6, r1
	ident++;
   1618e:	7819      	ldrb	r1, [r3, #0]
   16190:	3101      	adds	r1, #1
   16192:	b2c9      	uxtb	r1, r1
   16194:	2901      	cmp	r1, #1
   16196:	bf38      	it	cc
   16198:	2101      	movcc	r1, #1
{
   1619a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1619c:	2208      	movs	r2, #8
   1619e:	2012      	movs	r0, #18
	ident++;
   161a0:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   161a2:	f7ff fef7 	bl	15f94 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   161a6:	4604      	mov	r4, r0
   161a8:	b1d0      	cbz	r0, 161e0 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   161aa:	2108      	movs	r1, #8
   161ac:	4408      	add	r0, r1
   161ae:	f002 fba3 	bl	188f8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   161b2:	8833      	ldrh	r3, [r6, #0]
   161b4:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   161b6:	8873      	ldrh	r3, [r6, #2]
   161b8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   161ba:	88b3      	ldrh	r3, [r6, #4]
   161bc:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   161be:	88f3      	ldrh	r3, [r6, #6]
   161c0:	80c3      	strh	r3, [r0, #6]
   161c2:	2300      	movs	r3, #0
   161c4:	4628      	mov	r0, r5
   161c6:	9300      	str	r3, [sp, #0]
   161c8:	4622      	mov	r2, r4
   161ca:	2105      	movs	r1, #5
   161cc:	f00d fcf5 	bl	23bba <bt_l2cap_send_cb>
	if (err) {
   161d0:	4605      	mov	r5, r0
   161d2:	b110      	cbz	r0, 161da <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   161d4:	4620      	mov	r0, r4
   161d6:	f002 fa89 	bl	186ec <net_buf_unref>
}
   161da:	4628      	mov	r0, r5
   161dc:	b002      	add	sp, #8
   161de:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   161e0:	f06f 050b 	mvn.w	r5, #11
   161e4:	e7f9      	b.n	161da <bt_l2cap_update_conn_param+0x52>
   161e6:	bf00      	nop
   161e8:	20003d16 	.word	0x20003d16

000161ec <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   161ec:	2823      	cmp	r0, #35	; 0x23
   161ee:	d81f      	bhi.n	16230 <att_op_get_type+0x44>
   161f0:	281a      	cmp	r0, #26
   161f2:	d804      	bhi.n	161fe <att_op_get_type+0x12>
   161f4:	1e43      	subs	r3, r0, #1
   161f6:	2b18      	cmp	r3, #24
   161f8:	d90e      	bls.n	16218 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   161fa:	2006      	movs	r0, #6
   161fc:	4770      	bx	lr
	switch (op) {
   161fe:	f1a0 031b 	sub.w	r3, r0, #27
   16202:	2b08      	cmp	r3, #8
   16204:	d81e      	bhi.n	16244 <att_op_get_type+0x58>
   16206:	e8df f003 	tbb	[pc, r3]
   1620a:	1d05      	.short	0x1d05
   1620c:	191d231b 	.word	0x191d231b
   16210:	1d25      	.short	0x1d25
   16212:	05          	.byte	0x05
   16213:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   16214:	2003      	movs	r0, #3
   16216:	4770      	bx	lr
	switch (op) {
   16218:	4a0f      	ldr	r2, [pc, #60]	; (16258 <att_op_get_type+0x6c>)
   1621a:	2301      	movs	r3, #1
   1621c:	4083      	lsls	r3, r0
   1621e:	401a      	ands	r2, r3
   16220:	b9c2      	cbnz	r2, 16254 <att_op_get_type+0x68>
   16222:	4a0e      	ldr	r2, [pc, #56]	; (1625c <att_op_get_type+0x70>)
   16224:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   16226:	2a00      	cmp	r2, #0
   16228:	bf14      	ite	ne
   1622a:	2001      	movne	r0, #1
   1622c:	2006      	moveq	r0, #6
   1622e:	4770      	bx	lr
	switch (op) {
   16230:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   16234:	2b52      	cmp	r3, #82	; 0x52
   16236:	d105      	bne.n	16244 <att_op_get_type+0x58>
		return ATT_COMMAND;
   16238:	2000      	movs	r0, #0
}
   1623a:	4770      	bx	lr
		return ATT_REQUEST;
   1623c:	2001      	movs	r0, #1
   1623e:	4770      	bx	lr
		return ATT_INDICATION;
   16240:	2005      	movs	r0, #5
   16242:	4770      	bx	lr
		return ATT_COMMAND;
   16244:	f010 0f40 	tst.w	r0, #64	; 0x40
   16248:	bf0c      	ite	eq
   1624a:	2006      	moveq	r0, #6
   1624c:	2000      	movne	r0, #0
   1624e:	4770      	bx	lr
	switch (op) {
   16250:	2004      	movs	r0, #4
   16252:	4770      	bx	lr
		return ATT_RESPONSE;
   16254:	2002      	movs	r0, #2
   16256:	4770      	bx	lr
   16258:	028aaaaa 	.word	0x028aaaaa
   1625c:	01455554 	.word	0x01455554

00016260 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   16260:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   16262:	7a83      	ldrb	r3, [r0, #10]
   16264:	2b07      	cmp	r3, #7
   16266:	d005      	beq.n	16274 <att_get+0x14>
		BT_WARN("Not connected");
   16268:	4810      	ldr	r0, [pc, #64]	; (162ac <att_get+0x4c>)
   1626a:	2157      	movs	r1, #87	; 0x57
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
	if (!chan) {
		BT_ERR("Unable to find ATT channel");
   1626c:	f00c fee5 	bl	2303a <z_log_minimal_printk>
		return NULL;
   16270:	2000      	movs	r0, #0
	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
}
   16272:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   16274:	2104      	movs	r1, #4
   16276:	f00d fcb9 	bl	23bec <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1627a:	4603      	mov	r3, r0
   1627c:	b910      	cbnz	r0, 16284 <att_get+0x24>
		BT_ERR("Unable to find ATT channel");
   1627e:	480c      	ldr	r0, [pc, #48]	; (162b0 <att_get+0x50>)
   16280:	2145      	movs	r1, #69	; 0x45
   16282:	e7f3      	b.n	1626c <att_get+0xc>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   16284:	2102      	movs	r1, #2
   16286:	3094      	adds	r0, #148	; 0x94
   16288:	f00d fcdf 	bl	23c4a <atomic_test_bit>
   1628c:	b950      	cbnz	r0, 162a4 <att_get+0x44>
   1628e:	4909      	ldr	r1, [pc, #36]	; (162b4 <att_get+0x54>)
   16290:	4809      	ldr	r0, [pc, #36]	; (162b8 <att_get+0x58>)
   16292:	f640 322e 	movw	r2, #2862	; 0xb2e
   16296:	f00c fec2 	bl	2301e <assert_print>
   1629a:	4806      	ldr	r0, [pc, #24]	; (162b4 <att_get+0x54>)
   1629c:	f640 312e 	movw	r1, #2862	; 0xb2e
   162a0:	f00c feb6 	bl	23010 <assert_post_action>
	return att_chan->att;
   162a4:	f853 0c04 	ldr.w	r0, [r3, #-4]
   162a8:	e7e3      	b.n	16272 <att_get+0x12>
   162aa:	bf00      	nop
   162ac:	00027ab7 	.word	0x00027ab7
   162b0:	00027aca 	.word	0x00027aca
   162b4:	00027aea 	.word	0x00027aea
   162b8:	00026718 	.word	0x00026718

000162bc <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   162bc:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   162be:	3804      	subs	r0, #4
   162c0:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   162c2:	a901      	add	r1, sp, #4
   162c4:	4802      	ldr	r0, [pc, #8]	; (162d0 <bt_att_released+0x14>)
   162c6:	f006 fa6f 	bl	1c7a8 <k_mem_slab_free>
}
   162ca:	b003      	add	sp, #12
   162cc:	f85d fb04 	ldr.w	pc, [sp], #4
   162d0:	200009f4 	.word	0x200009f4

000162d4 <find_type_cb>:
{
   162d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162d8:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   162da:	f8d2 9000 	ldr.w	r9, [r2]
{
   162de:	4607      	mov	r7, r0
   162e0:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   162e2:	2500      	movs	r5, #0
   162e4:	f642 0301 	movw	r3, #10241	; 0x2801
   162e8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   162ea:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   162ee:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   162f2:	a90b      	add	r1, sp, #44	; 0x2c
{
   162f4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   162f6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   162fa:	f00d f95e 	bl	235ba <bt_uuid_cmp>
   162fe:	2800      	cmp	r0, #0
   16300:	d060      	beq.n	163c4 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   16302:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16306:	6838      	ldr	r0, [r7, #0]
   16308:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1630c:	a90b      	add	r1, sp, #44	; 0x2c
   1630e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   16312:	f00d f952 	bl	235ba <bt_uuid_cmp>
   16316:	b138      	cbz	r0, 16328 <find_type_cb+0x54>
		if (data->group &&
   16318:	68a3      	ldr	r3, [r4, #8]
   1631a:	b11b      	cbz	r3, 16324 <find_type_cb+0x50>
   1631c:	885a      	ldrh	r2, [r3, #2]
   1631e:	42b2      	cmp	r2, r6
   16320:	d200      	bcs.n	16324 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   16322:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16324:	2001      	movs	r0, #1
   16326:	e009      	b.n	1633c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   16328:	6861      	ldr	r1, [r4, #4]
   1632a:	4608      	mov	r0, r1
   1632c:	f00d fc73 	bl	23c16 <net_buf_frags_len>
   16330:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   16334:	1a1b      	subs	r3, r3, r0
   16336:	2b03      	cmp	r3, #3
   16338:	d803      	bhi.n	16342 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1633a:	2000      	movs	r0, #0
}
   1633c:	b011      	add	sp, #68	; 0x44
   1633e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   16342:	4608      	mov	r0, r1
   16344:	f002 fa2a 	bl	1879c <net_buf_frag_last>
   16348:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1634a:	6860      	ldr	r0, [r4, #4]
   1634c:	f00d fc63 	bl	23c16 <net_buf_frags_len>
   16350:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   16354:	f105 0b08 	add.w	fp, r5, #8
   16358:	ebaa 0a00 	sub.w	sl, sl, r0
   1635c:	4658      	mov	r0, fp
   1635e:	f00e fb07 	bl	24970 <net_buf_simple_tailroom>
   16362:	4582      	cmp	sl, r0
   16364:	d231      	bcs.n	163ca <find_type_cb+0xf6>
   16366:	6860      	ldr	r0, [r4, #4]
   16368:	f00d fc55 	bl	23c16 <net_buf_frags_len>
   1636c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   16370:	1a18      	subs	r0, r3, r0
	if (!len) {
   16372:	b970      	cbnz	r0, 16392 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   16374:	6863      	ldr	r3, [r4, #4]
   16376:	7998      	ldrb	r0, [r3, #6]
   16378:	f001 ff7c 	bl	18274 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1637c:	2200      	movs	r2, #0
   1637e:	2300      	movs	r3, #0
   16380:	f00e fae5 	bl	2494e <net_buf_alloc_fixed>
		if (!frag) {
   16384:	4605      	mov	r5, r0
   16386:	2800      	cmp	r0, #0
   16388:	d0d7      	beq.n	1633a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1638a:	4601      	mov	r1, r0
   1638c:	6860      	ldr	r0, [r4, #4]
   1638e:	f002 fa43 	bl	18818 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   16392:	2300      	movs	r3, #0
   16394:	9300      	str	r3, [sp, #0]
   16396:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1639a:	4639      	mov	r1, r7
   1639c:	2310      	movs	r3, #16
   1639e:	aa02      	add	r2, sp, #8
   163a0:	4640      	mov	r0, r8
   163a2:	47c8      	blx	r9
	if (read < 0) {
   163a4:	1e07      	subs	r7, r0, #0
   163a6:	db0d      	blt.n	163c4 <find_type_cb+0xf0>
	if (read != data->value_len) {
   163a8:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   163aa:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   163ac:	42ba      	cmp	r2, r7
   163ae:	d02b      	beq.n	16408 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   163b0:	4601      	mov	r1, r0
   163b2:	a80b      	add	r0, sp, #44	; 0x2c
   163b4:	f00d f92f 	bl	23616 <bt_uuid_create>
   163b8:	b958      	cbnz	r0, 163d2 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   163ba:	7c22      	ldrb	r2, [r4, #16]
   163bc:	4814      	ldr	r0, [pc, #80]	; (16410 <find_type_cb+0x13c>)
   163be:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
   163c0:	f00c fe3b 	bl	2303a <z_log_minimal_printk>
	data->group = NULL;
   163c4:	2300      	movs	r3, #0
   163c6:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   163c8:	e7ac      	b.n	16324 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   163ca:	4658      	mov	r0, fp
   163cc:	f00e fad0 	bl	24970 <net_buf_simple_tailroom>
   163d0:	e7cf      	b.n	16372 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   163d2:	b2fa      	uxtb	r2, r7
   163d4:	a902      	add	r1, sp, #8
   163d6:	a806      	add	r0, sp, #24
   163d8:	f00d f91d 	bl	23616 <bt_uuid_create>
   163dc:	b918      	cbnz	r0, 163e6 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   163de:	480d      	ldr	r0, [pc, #52]	; (16414 <find_type_cb+0x140>)
   163e0:	463a      	mov	r2, r7
   163e2:	2157      	movs	r1, #87	; 0x57
   163e4:	e7ec      	b.n	163c0 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   163e6:	a906      	add	r1, sp, #24
   163e8:	a80b      	add	r0, sp, #44	; 0x2c
   163ea:	f00d f8e6 	bl	235ba <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   163ee:	2800      	cmp	r0, #0
   163f0:	d1e8      	bne.n	163c4 <find_type_cb+0xf0>
	data->err = 0x00;
   163f2:	2300      	movs	r3, #0
   163f4:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   163f6:	2104      	movs	r1, #4
   163f8:	f105 0008 	add.w	r0, r5, #8
   163fc:	f002 fa7c 	bl	188f8 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   16400:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16402:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16404:	68a3      	ldr	r3, [r4, #8]
   16406:	e78c      	b.n	16322 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   16408:	a902      	add	r1, sp, #8
   1640a:	f00d f886 	bl	2351a <memcmp>
   1640e:	e7ee      	b.n	163ee <find_type_cb+0x11a>
   16410:	00027b19 	.word	0x00027b19
   16414:	00027b3d 	.word	0x00027b3d

00016418 <tx_meta_data_free>:
{
   16418:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   1641a:	4604      	mov	r4, r0
   1641c:	b940      	cbnz	r0, 16430 <tx_meta_data_free+0x18>
   1641e:	4909      	ldr	r1, [pc, #36]	; (16444 <tx_meta_data_free+0x2c>)
   16420:	4809      	ldr	r0, [pc, #36]	; (16448 <tx_meta_data_free+0x30>)
   16422:	22a5      	movs	r2, #165	; 0xa5
   16424:	f00c fdfb 	bl	2301e <assert_print>
   16428:	4806      	ldr	r0, [pc, #24]	; (16444 <tx_meta_data_free+0x2c>)
   1642a:	21a5      	movs	r1, #165	; 0xa5
   1642c:	f00c fdf0 	bl	23010 <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   16430:	2100      	movs	r1, #0
   16432:	2214      	movs	r2, #20
   16434:	f00d f8a3 	bl	2357e <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   16438:	4621      	mov	r1, r4
   1643a:	4804      	ldr	r0, [pc, #16]	; (1644c <tx_meta_data_free+0x34>)
}
   1643c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   16440:	f00e bf4b 	b.w	252da <k_queue_append>
   16444:	00027aea 	.word	0x00027aea
   16448:	00026718 	.word	0x00026718
   1644c:	20000ab0 	.word	0x20000ab0

00016450 <chan_send>:
{
   16450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16454:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   16456:	f8d1 8014 	ldr.w	r8, [r1, #20]
	hdr = (void *)buf->data;
   1645a:	688b      	ldr	r3, [r1, #8]
{
   1645c:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1645e:	3098      	adds	r0, #152	; 0x98
   16460:	2102      	movs	r1, #2
   16462:	f00d fbf2 	bl	23c4a <atomic_test_bit>
   16466:	2800      	cmp	r0, #0
   16468:	d047      	beq.n	164fa <chan_send+0xaa>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1646a:	781b      	ldrb	r3, [r3, #0]
   1646c:	2bd2      	cmp	r3, #210	; 0xd2
   1646e:	d114      	bne.n	1649a <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
   16470:	6833      	ldr	r3, [r6, #0]
   16472:	4621      	mov	r1, r4
   16474:	6818      	ldr	r0, [r3, #0]
   16476:	f00e fa64 	bl	24942 <bt_smp_sign>
		if (err) {
   1647a:	4605      	mov	r5, r0
   1647c:	b168      	cbz	r0, 1649a <chan_send+0x4a>
			BT_ERR("Error signing data");
   1647e:	4820      	ldr	r0, [pc, #128]	; (16500 <chan_send+0xb0>)
   16480:	2145      	movs	r1, #69	; 0x45
   16482:	f00c fdda 	bl	2303a <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   16486:	6960      	ldr	r0, [r4, #20]
   16488:	f7ff ffc6 	bl	16418 <tx_meta_data_free>
			net_buf_unref(buf);
   1648c:	4620      	mov	r0, r4
   1648e:	f002 f92d 	bl	186ec <net_buf_unref>
}
   16492:	4628      	mov	r0, r5
   16494:	b003      	add	sp, #12
   16496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1649a:	f104 0008 	add.w	r0, r4, #8
   1649e:	f00e fa63 	bl	24968 <net_buf_simple_headroom>
	state->len = buf->len;
   164a2:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	data->att_chan = chan;
   164a6:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   164aa:	6833      	ldr	r3, [r6, #0]
   164ac:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   164ae:	68a3      	ldr	r3, [r4, #8]
	state->offset = net_buf_simple_headroom(buf);
   164b0:	4607      	mov	r7, r0
   164b2:	7818      	ldrb	r0, [r3, #0]
   164b4:	f7ff fe9a 	bl	161ec <att_op_get_type>
	switch (op_type) {
   164b8:	2805      	cmp	r0, #5
   164ba:	d813      	bhi.n	164e4 <chan_send+0x94>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   164bc:	4b11      	ldr	r3, [pc, #68]	; (16504 <chan_send+0xb4>)
   164be:	f8cd 8000 	str.w	r8, [sp]
   164c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   164c6:	4622      	mov	r2, r4
   164c8:	4628      	mov	r0, r5
   164ca:	2104      	movs	r1, #4
   164cc:	f00d fb75 	bl	23bba <bt_l2cap_send_cb>
	if (err) {
   164d0:	4605      	mov	r5, r0
   164d2:	2800      	cmp	r0, #0
   164d4:	d0dd      	beq.n	16492 <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
   164d6:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   164d8:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   164dc:	fa13 f787 	uxtah	r7, r3, r7
   164e0:	60a7      	str	r7, [r4, #8]
}
   164e2:	e7d6      	b.n	16492 <chan_send+0x42>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   164e4:	4908      	ldr	r1, [pc, #32]	; (16508 <chan_send+0xb8>)
   164e6:	4809      	ldr	r0, [pc, #36]	; (1650c <chan_send+0xbc>)
   164e8:	f240 2257 	movw	r2, #599	; 0x257
   164ec:	f00c fd97 	bl	2301e <assert_print>
   164f0:	4805      	ldr	r0, [pc, #20]	; (16508 <chan_send+0xb8>)
   164f2:	f240 2157 	movw	r1, #599	; 0x257
   164f6:	f00c fd8b 	bl	23010 <assert_post_action>
		return -EINVAL;
   164fa:	f06f 0515 	mvn.w	r5, #21
   164fe:	e7c8      	b.n	16492 <chan_send+0x42>
   16500:	00027b61 	.word	0x00027b61
   16504:	00025d38 	.word	0x00025d38
   16508:	00027aea 	.word	0x00027aea
   1650c:	00026718 	.word	0x00026718

00016510 <bt_att_chan_req_send>:
{
   16510:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   16512:	b950      	cbnz	r0, 1652a <bt_att_chan_req_send+0x1a>
   16514:	4917      	ldr	r1, [pc, #92]	; (16574 <bt_att_chan_req_send+0x64>)
   16516:	4818      	ldr	r0, [pc, #96]	; (16578 <bt_att_chan_req_send+0x68>)
   16518:	f44f 7246 	mov.w	r2, #792	; 0x318
   1651c:	f00c fd7f 	bl	2301e <assert_print>
   16520:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   16524:	4813      	ldr	r0, [pc, #76]	; (16574 <bt_att_chan_req_send+0x64>)
   16526:	f00c fd73 	bl	23010 <assert_post_action>
   1652a:	b941      	cbnz	r1, 1653e <bt_att_chan_req_send+0x2e>
   1652c:	4911      	ldr	r1, [pc, #68]	; (16574 <bt_att_chan_req_send+0x64>)
   1652e:	4812      	ldr	r0, [pc, #72]	; (16578 <bt_att_chan_req_send+0x68>)
   16530:	f240 3219 	movw	r2, #793	; 0x319
   16534:	f00c fd73 	bl	2301e <assert_print>
   16538:	f240 3119 	movw	r1, #793	; 0x319
   1653c:	e7f2      	b.n	16524 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(req->func);
   1653e:	684a      	ldr	r2, [r1, #4]
   16540:	b942      	cbnz	r2, 16554 <bt_att_chan_req_send+0x44>
   16542:	490c      	ldr	r1, [pc, #48]	; (16574 <bt_att_chan_req_send+0x64>)
   16544:	480c      	ldr	r0, [pc, #48]	; (16578 <bt_att_chan_req_send+0x68>)
   16546:	f240 321a 	movw	r2, #794	; 0x31a
   1654a:	f00c fd68 	bl	2301e <assert_print>
   1654e:	f240 311a 	movw	r1, #794	; 0x31a
   16552:	e7e7      	b.n	16524 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(!chan->req);
   16554:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   16558:	b143      	cbz	r3, 1656c <bt_att_chan_req_send+0x5c>
   1655a:	4906      	ldr	r1, [pc, #24]	; (16574 <bt_att_chan_req_send+0x64>)
   1655c:	4806      	ldr	r0, [pc, #24]	; (16578 <bt_att_chan_req_send+0x68>)
   1655e:	f240 321b 	movw	r2, #795	; 0x31b
   16562:	f00c fd5c 	bl	2301e <assert_print>
   16566:	f240 311b 	movw	r1, #795	; 0x31b
   1656a:	e7db      	b.n	16524 <bt_att_chan_req_send+0x14>
}
   1656c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   16570:	f00d bc3f 	b.w	23df2 <chan_req_send>
   16574:	00027aea 	.word	0x00027aea
   16578:	00026718 	.word	0x00026718

0001657c <bt_att_connected>:
{
   1657c:	b510      	push	{r4, lr}
   1657e:	f100 0394 	add.w	r3, r0, #148	; 0x94
   16582:	4604      	mov	r4, r0
   16584:	f3bf 8f5b 	dmb	ish
   16588:	e853 1f00 	ldrex	r1, [r3]
   1658c:	f041 0104 	orr.w	r1, r1, #4
   16590:	e843 1200 	strex	r2, r1, [r3]
   16594:	2a00      	cmp	r2, #0
   16596:	d1f7      	bne.n	16588 <bt_att_connected+0xc>
   16598:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1659c:	2317      	movs	r3, #23
   1659e:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   165a0:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   165a2:	1f20      	subs	r0, r4, #4
   165a4:	f00d fbe2 	bl	23d6c <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   165a8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   165ac:	4903      	ldr	r1, [pc, #12]	; (165bc <bt_att_connected+0x40>)
   165ae:	f007 f86b 	bl	1d688 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   165b2:	6820      	ldr	r0, [r4, #0]
}
   165b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   165b8:	f001 bdf4 	b.w	181a4 <bt_gatt_connected>
   165bc:	00017179 	.word	0x00017179

000165c0 <read_group_cb>:
{
   165c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   165c4:	4605      	mov	r5, r0
   165c6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   165c8:	f04f 0800 	mov.w	r8, #0
   165cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   165d0:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   165d2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   165d4:	f88d 8008 	strb.w	r8, [sp, #8]
   165d8:	a902      	add	r1, sp, #8
{
   165da:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   165dc:	f8ad 300a 	strh.w	r3, [sp, #10]
   165e0:	f00c ffeb 	bl	235ba <bt_uuid_cmp>
   165e4:	b1a0      	cbz	r0, 16610 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   165e6:	f642 0301 	movw	r3, #10241	; 0x2801
   165ea:	6828      	ldr	r0, [r5, #0]
   165ec:	f88d 800c 	strb.w	r8, [sp, #12]
   165f0:	a903      	add	r1, sp, #12
   165f2:	f8ad 300e 	strh.w	r3, [sp, #14]
   165f6:	f00c ffe0 	bl	235ba <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   165fa:	b148      	cbz	r0, 16610 <read_group_cb+0x50>
		if (data->group &&
   165fc:	6923      	ldr	r3, [r4, #16]
   165fe:	b11b      	cbz	r3, 16608 <read_group_cb+0x48>
   16600:	885a      	ldrh	r2, [r3, #2]
   16602:	42b2      	cmp	r2, r6
   16604:	d200      	bcs.n	16608 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16606:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16608:	2001      	movs	r0, #1
}
   1660a:	b004      	add	sp, #16
   1660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16610:	6861      	ldr	r1, [r4, #4]
   16612:	6828      	ldr	r0, [r5, #0]
   16614:	f00c ffd1 	bl	235ba <bt_uuid_cmp>
   16618:	b110      	cbz	r0, 16620 <read_group_cb+0x60>
		data->group = NULL;
   1661a:	2300      	movs	r3, #0
   1661c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1661e:	e7f3      	b.n	16608 <read_group_cb+0x48>
	if (data->rsp->len &&
   16620:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16622:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   16624:	781a      	ldrb	r2, [r3, #0]
   16626:	b132      	cbz	r2, 16636 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16628:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1662a:	8981      	ldrh	r1, [r0, #12]
   1662c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1662e:	4293      	cmp	r3, r2
   16630:	da01      	bge.n	16636 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   16632:	2000      	movs	r0, #0
   16634:	e7e9      	b.n	1660a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   16636:	2104      	movs	r1, #4
   16638:	3008      	adds	r0, #8
   1663a:	f002 f95d 	bl	188f8 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1663e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16640:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16642:	6923      	ldr	r3, [r4, #16]
   16644:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16646:	4b08      	ldr	r3, [pc, #32]	; (16668 <read_group_cb+0xa8>)
   16648:	9300      	str	r3, [sp, #0]
   1664a:	9401      	str	r4, [sp, #4]
   1664c:	68a2      	ldr	r2, [r4, #8]
   1664e:	2300      	movs	r3, #0
   16650:	4629      	mov	r1, r5
   16652:	4638      	mov	r0, r7
   16654:	f00d fc0e 	bl	23e74 <att_chan_read>
	if (read < 0) {
   16658:	2800      	cmp	r0, #0
   1665a:	dbea      	blt.n	16632 <read_group_cb+0x72>
	if (!data->group) {
   1665c:	6920      	ldr	r0, [r4, #16]
   1665e:	3800      	subs	r0, #0
   16660:	bf18      	it	ne
   16662:	2001      	movne	r0, #1
   16664:	e7d1      	b.n	1660a <read_group_cb+0x4a>
   16666:	bf00      	nop
   16668:	00023dd3 	.word	0x00023dd3

0001666c <read_type_cb>:
{
   1666c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   16670:	6817      	ldr	r7, [r2, #0]
{
   16672:	4605      	mov	r5, r0
   16674:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16676:	6800      	ldr	r0, [r0, #0]
   16678:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1667a:	687e      	ldr	r6, [r7, #4]
{
   1667c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1667e:	f00c ff9c 	bl	235ba <bt_uuid_cmp>
   16682:	4681      	mov	r9, r0
   16684:	2800      	cmp	r0, #0
   16686:	d13c      	bne.n	16702 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16688:	4630      	mov	r0, r6
   1668a:	2295      	movs	r2, #149	; 0x95
   1668c:	4629      	mov	r1, r5
   1668e:	f00e f8c2 	bl	24816 <bt_gatt_check_perm>
   16692:	4606      	mov	r6, r0
   16694:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   16696:	b140      	cbz	r0, 166aa <read_type_cb+0x3e>
		if (data->rsp->len) {
   16698:	68e3      	ldr	r3, [r4, #12]
   1669a:	781b      	ldrb	r3, [r3, #0]
   1669c:	b10b      	cbz	r3, 166a2 <read_type_cb+0x36>
			data->err = 0x00;
   1669e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   166a2:	2000      	movs	r0, #0
}
   166a4:	b003      	add	sp, #12
   166a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   166aa:	68a0      	ldr	r0, [r4, #8]
   166ac:	f002 f876 	bl	1879c <net_buf_frag_last>
   166b0:	2102      	movs	r1, #2
   166b2:	3008      	adds	r0, #8
   166b4:	f002 f920 	bl	188f8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   166b8:	4b13      	ldr	r3, [pc, #76]	; (16708 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   166ba:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   166bc:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   166c0:	9300      	str	r3, [sp, #0]
   166c2:	9401      	str	r4, [sp, #4]
   166c4:	68a2      	ldr	r2, [r4, #8]
   166c6:	4633      	mov	r3, r6
   166c8:	4629      	mov	r1, r5
   166ca:	4638      	mov	r0, r7
   166cc:	f00d fbd2 	bl	23e74 <att_chan_read>
	if (read < 0) {
   166d0:	2800      	cmp	r0, #0
   166d2:	da07      	bge.n	166e4 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   166d4:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   166d8:	bf26      	itte	cs
   166da:	4240      	negcs	r0, r0
   166dc:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   166de:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   166e0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   166e2:	e7de      	b.n	166a2 <read_type_cb+0x36>
	if (!data->item) {
   166e4:	6923      	ldr	r3, [r4, #16]
   166e6:	2b00      	cmp	r3, #0
   166e8:	d0db      	beq.n	166a2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   166ea:	68a0      	ldr	r0, [r4, #8]
   166ec:	f00d fa93 	bl	23c16 <net_buf_frags_len>
   166f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   166f2:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   166f4:	68e3      	ldr	r3, [r4, #12]
   166f6:	781b      	ldrb	r3, [r3, #0]
   166f8:	4298      	cmp	r0, r3
   166fa:	bf94      	ite	ls
   166fc:	2000      	movls	r0, #0
   166fe:	2001      	movhi	r0, #1
   16700:	e7d0      	b.n	166a4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   16702:	2001      	movs	r0, #1
   16704:	e7ce      	b.n	166a4 <read_type_cb+0x38>
   16706:	bf00      	nop
   16708:	00023c27 	.word	0x00023c27

0001670c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1670c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1670e:	2300      	movs	r3, #0
{
   16710:	4604      	mov	r4, r0
   16712:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16714:	482e      	ldr	r0, [pc, #184]	; (167d0 <bt_att_accept+0xc4>)
   16716:	2200      	movs	r2, #0
   16718:	4669      	mov	r1, sp
   1671a:	f005 ffed 	bl	1c6f8 <k_mem_slab_alloc>
   1671e:	4605      	mov	r5, r0
   16720:	b148      	cbz	r0, 16736 <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   16722:	482c      	ldr	r0, [pc, #176]	; (167d4 <bt_att_accept+0xc8>)
   16724:	4622      	mov	r2, r4
   16726:	2145      	movs	r1, #69	; 0x45
		BT_WARN("No available ATT channel for conn %p", att->conn);
   16728:	f00c fc87 	bl	2303a <z_log_minimal_printk>
		return -ENOMEM;
   1672c:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   16730:	4628      	mov	r0, r5
   16732:	b003      	add	sp, #12
   16734:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   16736:	f007 ffef 	bl	1e718 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1673a:	4b27      	ldr	r3, [pc, #156]	; (167d8 <bt_att_accept+0xcc>)
	(void)memset(att, 0, sizeof(*att));
   1673c:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   1673e:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   16740:	2230      	movs	r2, #48	; 0x30
   16742:	9800      	ldr	r0, [sp, #0]
   16744:	f00c ff1b 	bl	2357e <memset>
	att->conn = conn;
   16748:	9b00      	ldr	r3, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1674a:	4824      	ldr	r0, [pc, #144]	; (167dc <bt_att_accept+0xd0>)
	att->conn = conn;
   1674c:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   1674e:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16750:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
   16752:	e9c4 5501 	strd	r5, r5, [r4, #4]
   16756:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1675a:	2200      	movs	r2, #0
   1675c:	2300      	movs	r3, #0
   1675e:	a901      	add	r1, sp, #4
   16760:	f005 ffca 	bl	1c6f8 <k_mem_slab_alloc>
   16764:	4605      	mov	r5, r0
   16766:	b118      	cbz	r0, 16770 <bt_att_accept+0x64>
		BT_WARN("No available ATT channel for conn %p", att->conn);
   16768:	6822      	ldr	r2, [r4, #0]
   1676a:	481d      	ldr	r0, [pc, #116]	; (167e0 <bt_att_accept+0xd4>)
   1676c:	2157      	movs	r1, #87	; 0x57
   1676e:	e7db      	b.n	16728 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   16770:	4601      	mov	r1, r0
   16772:	22f8      	movs	r2, #248	; 0xf8
   16774:	9801      	ldr	r0, [sp, #4]
   16776:	f00c ff02 	bl	2357e <memset>
	chan->chan.chan.ops = &ops;
   1677a:	9801      	ldr	r0, [sp, #4]
   1677c:	4b19      	ldr	r3, [pc, #100]	; (167e4 <bt_att_accept+0xd8>)
   1677e:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   16780:	30a0      	adds	r0, #160	; 0xa0
   16782:	f00e fd9d 	bl	252c0 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16786:	9b01      	ldr	r3, [sp, #4]
   16788:	f3bf 8f5b 	dmb	ish
   1678c:	3398      	adds	r3, #152	; 0x98
   1678e:	e853 2f00 	ldrex	r2, [r3]
   16792:	e843 5100 	strex	r1, r5, [r3]
   16796:	2900      	cmp	r1, #0
   16798:	d1f9      	bne.n	1678e <bt_att_accept+0x82>
   1679a:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1679e:	9b01      	ldr	r3, [sp, #4]
   167a0:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   167a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   167a4:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   167a6:	b91b      	cbnz	r3, 167b0 <bt_att_accept+0xa4>
   167a8:	f104 000c 	add.w	r0, r4, #12
   167ac:	f00e fd88 	bl	252c0 <z_impl_k_queue_init>
	return list->head;
   167b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   167b2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   167b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   167b8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	list->head = node;
   167bc:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   167be:	b902      	cbnz	r2, 167c2 <bt_att_accept+0xb6>
	list->tail = node;
   167c0:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   167c2:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   167c4:	2b00      	cmp	r3, #0
   167c6:	d0b1      	beq.n	1672c <bt_att_accept+0x20>
	*ch = &chan->chan.chan;
   167c8:	3304      	adds	r3, #4
   167ca:	6033      	str	r3, [r6, #0]
	return 0;
   167cc:	e7b0      	b.n	16730 <bt_att_accept+0x24>
   167ce:	bf00      	nop
   167d0:	200009d4 	.word	0x200009d4
   167d4:	00027b79 	.word	0x00027b79
   167d8:	20002a0c 	.word	0x20002a0c
   167dc:	200009f4 	.word	0x200009f4
   167e0:	00027ba3 	.word	0x00027ba3
   167e4:	200006a8 	.word	0x200006a8

000167e8 <bt_att_chan_create_pdu>:
{
   167e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   167ea:	1c53      	adds	r3, r2, #1
   167ec:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   167ee:	4293      	cmp	r3, r2
{
   167f0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   167f2:	d906      	bls.n	16802 <bt_att_chan_create_pdu+0x1a>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   167f4:	481c      	ldr	r0, [pc, #112]	; (16868 <bt_att_chan_create_pdu+0x80>)
   167f6:	2157      	movs	r1, #87	; 0x57
   167f8:	f00c fc1f 	bl	2303a <z_log_minimal_printk>
		return NULL;
   167fc:	2400      	movs	r4, #0
}
   167fe:	4620      	mov	r0, r4
   16800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   16802:	4608      	mov	r0, r1
   16804:	f7ff fcf2 	bl	161ec <att_op_get_type>
   16808:	2802      	cmp	r0, #2
   1680a:	d013      	beq.n	16834 <bt_att_chan_create_pdu+0x4c>
   1680c:	2804      	cmp	r0, #4
   1680e:	d011      	beq.n	16834 <bt_att_chan_create_pdu+0x4c>
		timeout = K_FOREVER;
   16810:	f04f 36ff 	mov.w	r6, #4294967295
   16814:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   16818:	2100      	movs	r1, #0
   1681a:	4632      	mov	r2, r6
   1681c:	463b      	mov	r3, r7
   1681e:	4608      	mov	r0, r1
   16820:	f00d f9c8 	bl	23bb4 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   16824:	4604      	mov	r4, r0
   16826:	b948      	cbnz	r0, 1683c <bt_att_chan_create_pdu+0x54>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   16828:	4810      	ldr	r0, [pc, #64]	; (1686c <bt_att_chan_create_pdu+0x84>)
   1682a:	462a      	mov	r2, r5
   1682c:	2145      	movs	r1, #69	; 0x45
   1682e:	f00c fc04 	bl	2303a <z_log_minimal_printk>
		return NULL;
   16832:	e7e3      	b.n	167fc <bt_att_chan_create_pdu+0x14>
	switch (att_op_get_type(op)) {
   16834:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   16838:	2700      	movs	r7, #0
   1683a:	e7ed      	b.n	16818 <bt_att_chan_create_pdu+0x30>
	return z_impl_k_queue_get(queue, timeout);
   1683c:	480c      	ldr	r0, [pc, #48]	; (16870 <bt_att_chan_create_pdu+0x88>)
   1683e:	4632      	mov	r2, r6
   16840:	463b      	mov	r3, r7
   16842:	f006 fb59 	bl	1cef8 <z_impl_k_queue_get>
	if (!data) {
   16846:	b938      	cbnz	r0, 16858 <bt_att_chan_create_pdu+0x70>
		BT_WARN("Unable to allocate ATT TX meta");
   16848:	480a      	ldr	r0, [pc, #40]	; (16874 <bt_att_chan_create_pdu+0x8c>)
   1684a:	2157      	movs	r1, #87	; 0x57
   1684c:	f00c fbf5 	bl	2303a <z_log_minimal_printk>
		net_buf_unref(buf);
   16850:	4620      	mov	r0, r4
   16852:	f001 ff4b 	bl	186ec <net_buf_unref>
		return NULL;
   16856:	e7d1      	b.n	167fc <bt_att_chan_create_pdu+0x14>
	bt_att_tx_meta_data(buf) = data;
   16858:	6160      	str	r0, [r4, #20]
   1685a:	2101      	movs	r1, #1
   1685c:	f104 0008 	add.w	r0, r4, #8
   16860:	f002 f84a 	bl	188f8 <net_buf_simple_add>
	hdr->code = op;
   16864:	7005      	strb	r5, [r0, #0]
	return buf;
   16866:	e7ca      	b.n	167fe <bt_att_chan_create_pdu+0x16>
   16868:	00027bcd 	.word	0x00027bcd
   1686c:	00027939 	.word	0x00027939
   16870:	20000ab0 	.word	0x20000ab0
   16874:	00027bf7 	.word	0x00027bf7

00016878 <bt_att_recv>:
{
   16878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   1687c:	898b      	ldrh	r3, [r1, #12]
{
   1687e:	4607      	mov	r7, r0
   16880:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   16882:	b933      	cbnz	r3, 16892 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   16884:	4835      	ldr	r0, [pc, #212]	; (1695c <bt_att_recv+0xe4>)
   16886:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected request");
   16888:	f00c fbd7 	bl	2303a <z_log_minimal_printk>
}
   1688c:	2000      	movs	r0, #0
   1688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16892:	2101      	movs	r1, #1
   16894:	f105 0008 	add.w	r0, r5, #8
   16898:	f002 f814 	bl	188c4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1689c:	f857 3c04 	ldr.w	r3, [r7, #-4]
   168a0:	4604      	mov	r4, r0
   168a2:	2b00      	cmp	r3, #0
   168a4:	d0f2      	beq.n	1688c <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
   168a6:	7802      	ldrb	r2, [r0, #0]
   168a8:	4e2d      	ldr	r6, [pc, #180]	; (16960 <bt_att_recv+0xe8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   168aa:	f1a7 0804 	sub.w	r8, r7, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   168ae:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   168b0:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   168b4:	4290      	cmp	r0, r2
   168b6:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   168ba:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   168be:	d10d      	bne.n	168dc <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   168c0:	f891 9002 	ldrb.w	r9, [r1, #2]
   168c4:	f1b9 0f01 	cmp.w	r9, #1
   168c8:	d11f      	bne.n	1690a <bt_att_recv+0x92>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   168ca:	2100      	movs	r1, #0
   168cc:	f107 0094 	add.w	r0, r7, #148	; 0x94
   168d0:	f00d fb76 	bl	23fc0 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   168d4:	b328      	cbz	r0, 16922 <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected request");
   168d6:	4823      	ldr	r0, [pc, #140]	; (16964 <bt_att_recv+0xec>)
   168d8:	2157      	movs	r1, #87	; 0x57
   168da:	e7d5      	b.n	16888 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   168dc:	3301      	adds	r3, #1
   168de:	2b0e      	cmp	r3, #14
   168e0:	d1e6      	bne.n	168b0 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   168e2:	4821      	ldr	r0, [pc, #132]	; (16968 <bt_att_recv+0xf0>)
   168e4:	2157      	movs	r1, #87	; 0x57
   168e6:	f00c fba8 	bl	2303a <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   168ea:	7821      	ldrb	r1, [r4, #0]
   168ec:	4608      	mov	r0, r1
   168ee:	f7ff fc7d 	bl	161ec <att_op_get_type>
   168f2:	2800      	cmp	r0, #0
   168f4:	d0ca      	beq.n	1688c <bt_att_recv+0x14>
   168f6:	2805      	cmp	r0, #5
   168f8:	d0c8      	beq.n	1688c <bt_att_recv+0x14>
	if (!req) {
   168fa:	2900      	cmp	r1, #0
   168fc:	d0c6      	beq.n	1688c <bt_att_recv+0x14>
   168fe:	2306      	movs	r3, #6
   16900:	2200      	movs	r2, #0
   16902:	4640      	mov	r0, r8
   16904:	f00d fcd0 	bl	242a8 <send_err_rsp.part.0>
   16908:	e7c0      	b.n	1688c <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   1690a:	f1b9 0f05 	cmp.w	r9, #5
   1690e:	d108      	bne.n	16922 <bt_att_recv+0xaa>
			   atomic_test_and_set_bit(att_chan->flags,
   16910:	2101      	movs	r1, #1
   16912:	f107 0094 	add.w	r0, r7, #148	; 0x94
   16916:	f00d fb53 	bl	23fc0 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1691a:	b110      	cbz	r0, 16922 <bt_att_recv+0xaa>
			BT_WARN("Ignoring unexpected indication");
   1691c:	4813      	ldr	r0, [pc, #76]	; (1696c <bt_att_recv+0xf4>)
   1691e:	2157      	movs	r1, #87	; 0x57
   16920:	e7b2      	b.n	16888 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   16922:	4456      	add	r6, sl
   16924:	89aa      	ldrh	r2, [r5, #12]
   16926:	7873      	ldrb	r3, [r6, #1]
   16928:	4293      	cmp	r3, r2
   1692a:	d909      	bls.n	16940 <bt_att_recv+0xc8>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1692c:	7823      	ldrb	r3, [r4, #0]
   1692e:	4810      	ldr	r0, [pc, #64]	; (16970 <bt_att_recv+0xf8>)
   16930:	2145      	movs	r1, #69	; 0x45
   16932:	f00c fb82 	bl	2303a <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
   16936:	f1b9 0f01 	cmp.w	r9, #1
   1693a:	d1a7      	bne.n	1688c <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   1693c:	2304      	movs	r3, #4
   1693e:	e009      	b.n	16954 <bt_att_recv+0xdc>
		err = handler->func(att_chan, buf);
   16940:	6873      	ldr	r3, [r6, #4]
   16942:	4629      	mov	r1, r5
   16944:	4640      	mov	r0, r8
   16946:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16948:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1694c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1694e:	d19d      	bne.n	1688c <bt_att_recv+0x14>
   16950:	2800      	cmp	r0, #0
   16952:	d09b      	beq.n	1688c <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16954:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   16956:	2900      	cmp	r1, #0
   16958:	d098      	beq.n	1688c <bt_att_recv+0x14>
   1695a:	e7d1      	b.n	16900 <bt_att_recv+0x88>
   1695c:	00027c1b 	.word	0x00027c1b
   16960:	00025d50 	.word	0x00025d50
   16964:	00027c5a 	.word	0x00027c5a
   16968:	00027c3b 	.word	0x00027c3b
   1696c:	00027c7b 	.word	0x00027c7b
   16970:	00027c9f 	.word	0x00027c9f

00016974 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16974:	b5f0      	push	{r4, r5, r6, r7, lr}
   16976:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16978:	6803      	ldr	r3, [r0, #0]
   1697a:	460d      	mov	r5, r1
   1697c:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1697e:	b087      	sub	sp, #28
   16980:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16982:	bf18      	it	ne
   16984:	2101      	movne	r1, #1
   16986:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16988:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1698a:	f00d ff6d 	bl	24868 <bt_gatt_change_aware>
   1698e:	b948      	cbnz	r0, 169a4 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16990:	2105      	movs	r1, #5
   16992:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16996:	f00d fb13 	bl	23fc0 <atomic_test_and_set_bit>
   1699a:	2800      	cmp	r0, #0
   1699c:	d048      	beq.n	16a30 <att_write_rsp.constprop.0+0xbc>
			return 0;
   1699e:	2000      	movs	r0, #0
}
   169a0:	b007      	add	sp, #28
   169a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   169a4:	2e00      	cmp	r6, #0
   169a6:	d045      	beq.n	16a34 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   169a8:	2218      	movs	r2, #24
   169aa:	2100      	movs	r1, #0
   169ac:	4668      	mov	r0, sp
   169ae:	f00c fde6 	bl	2357e <memset>
	if (rsp) {
   169b2:	bb67      	cbnz	r7, 16a0e <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   169b4:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   169b6:	4a20      	ldr	r2, [pc, #128]	; (16a38 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   169b8:	681b      	ldr	r3, [r3, #0]
   169ba:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   169bc:	2300      	movs	r3, #0
   169be:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   169c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   169c4:	9303      	str	r3, [sp, #12]
	data.len = len;
   169c6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   169ca:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   169ce:	2301      	movs	r3, #1
   169d0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   169d4:	4631      	mov	r1, r6
   169d6:	466b      	mov	r3, sp
   169d8:	4630      	mov	r0, r6
	data.req = req;
   169da:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   169de:	f00d f96e 	bl	23cbe <bt_gatt_foreach_attr>
	if (data.err) {
   169e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   169e6:	b1e3      	cbz	r3, 16a22 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   169e8:	2f00      	cmp	r7, #0
   169ea:	d0d8      	beq.n	1699e <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   169ec:	9b01      	ldr	r3, [sp, #4]
   169ee:	6958      	ldr	r0, [r3, #20]
   169f0:	f7ff fd12 	bl	16418 <tx_meta_data_free>
			net_buf_unref(data.buf);
   169f4:	9801      	ldr	r0, [sp, #4]
   169f6:	f001 fe79 	bl	186ec <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   169fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   169fe:	2d00      	cmp	r5, #0
   16a00:	d0cd      	beq.n	1699e <att_write_rsp.constprop.0+0x2a>
   16a02:	4632      	mov	r2, r6
   16a04:	4629      	mov	r1, r5
   16a06:	4620      	mov	r0, r4
   16a08:	f00d fc4e 	bl	242a8 <send_err_rsp.part.0>
   16a0c:	e7c7      	b.n	1699e <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   16a0e:	2200      	movs	r2, #0
   16a10:	4639      	mov	r1, r7
   16a12:	4620      	mov	r0, r4
   16a14:	f7ff fee8 	bl	167e8 <bt_att_chan_create_pdu>
   16a18:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   16a1a:	2800      	cmp	r0, #0
   16a1c:	d1ca      	bne.n	169b4 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   16a1e:	200e      	movs	r0, #14
   16a20:	e7be      	b.n	169a0 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   16a22:	9901      	ldr	r1, [sp, #4]
   16a24:	2900      	cmp	r1, #0
   16a26:	d0ba      	beq.n	1699e <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   16a28:	4620      	mov	r0, r4
   16a2a:	f00d f9fc 	bl	23e26 <bt_att_chan_send_rsp>
   16a2e:	e7b6      	b.n	1699e <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16a30:	2012      	movs	r0, #18
   16a32:	e7b5      	b.n	169a0 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16a34:	2001      	movs	r0, #1
   16a36:	e7b3      	b.n	169a0 <att_write_rsp.constprop.0+0x2c>
   16a38:	00023c5d 	.word	0x00023c5d

00016a3c <bt_att_create_pdu>:
{
   16a3c:	b570      	push	{r4, r5, r6, lr}
   16a3e:	460e      	mov	r6, r1
   16a40:	4615      	mov	r5, r2
	att = att_get(conn);
   16a42:	f7ff fc0d 	bl	16260 <att_get>
	if (!att) {
   16a46:	b190      	cbz	r0, 16a6e <bt_att_create_pdu+0x32>
	return list->head;
   16a48:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16a4a:	4618      	mov	r0, r3
   16a4c:	b11b      	cbz	r3, 16a56 <bt_att_create_pdu+0x1a>
	return node->next;
   16a4e:	f850 39f0 	ldr.w	r3, [r0], #-240
   16a52:	b103      	cbz	r3, 16a56 <bt_att_create_pdu+0x1a>
   16a54:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16a56:	1c6c      	adds	r4, r5, #1
   16a58:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16a5a:	b118      	cbz	r0, 16a64 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16a5c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16a5e:	42a1      	cmp	r1, r4
   16a60:	d210      	bcs.n	16a84 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16a62:	b933      	cbnz	r3, 16a72 <bt_att_create_pdu+0x36>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   16a64:	480b      	ldr	r0, [pc, #44]	; (16a94 <bt_att_create_pdu+0x58>)
   16a66:	4622      	mov	r2, r4
   16a68:	2157      	movs	r1, #87	; 0x57
   16a6a:	f00c fae6 	bl	2303a <z_log_minimal_printk>
}
   16a6e:	2000      	movs	r0, #0
   16a70:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16a72:	4618      	mov	r0, r3
   16a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   16a78:	b153      	cbz	r3, 16a90 <bt_att_create_pdu+0x54>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16a7a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16a7c:	4291      	cmp	r1, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16a7e:	f1a3 03f0 	sub.w	r3, r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16a82:	d3f6      	bcc.n	16a72 <bt_att_create_pdu+0x36>
		return bt_att_chan_create_pdu(chan, op, len);
   16a84:	462a      	mov	r2, r5
   16a86:	4631      	mov	r1, r6
}
   16a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   16a8c:	f7ff beac 	b.w	167e8 <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16a90:	4614      	mov	r4, r2
   16a92:	e7e3      	b.n	16a5c <bt_att_create_pdu+0x20>
   16a94:	00027cc3 	.word	0x00027cc3

00016a98 <att_read_group_req>:
{
   16a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16a9c:	898e      	ldrh	r6, [r1, #12]
   16a9e:	3e04      	subs	r6, #4
   16aa0:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   16aa2:	2e02      	cmp	r6, #2
{
   16aa4:	4604      	mov	r4, r0
   16aa6:	b08c      	sub	sp, #48	; 0x30
   16aa8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   16aaa:	d001      	beq.n	16ab0 <att_read_group_req+0x18>
   16aac:	2e10      	cmp	r6, #16
   16aae:	d16a      	bne.n	16b86 <att_read_group_req+0xee>
   16ab0:	2104      	movs	r1, #4
   16ab2:	3008      	adds	r0, #8
   16ab4:	f001 ff06 	bl	188c4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16ab8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   16abc:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16abe:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16ac0:	1d01      	adds	r1, r0, #4
   16ac2:	4632      	mov	r2, r6
   16ac4:	4640      	mov	r0, r8
   16ac6:	f00c fda6 	bl	23616 <bt_uuid_create>
   16aca:	2800      	cmp	r0, #0
   16acc:	d05d      	beq.n	16b8a <att_read_group_req+0xf2>
	if (!start || !end) {
   16ace:	2d00      	cmp	r5, #0
   16ad0:	d03a      	beq.n	16b48 <att_read_group_req+0xb0>
   16ad2:	2600      	movs	r6, #0
   16ad4:	2f00      	cmp	r7, #0
   16ad6:	d036      	beq.n	16b46 <att_read_group_req+0xae>
	if (start > end) {
   16ad8:	42bd      	cmp	r5, r7
   16ada:	d835      	bhi.n	16b48 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16adc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16ae0:	a901      	add	r1, sp, #4
   16ae2:	4640      	mov	r0, r8
   16ae4:	f88d 6004 	strb.w	r6, [sp, #4]
   16ae8:	f8ad 3006 	strh.w	r3, [sp, #6]
   16aec:	f00c fd65 	bl	235ba <bt_uuid_cmp>
   16af0:	bb70      	cbnz	r0, 16b50 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   16af2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16af4:	2214      	movs	r2, #20
   16af6:	2100      	movs	r1, #0
   16af8:	a807      	add	r0, sp, #28
   16afa:	f00c fd40 	bl	2357e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   16afe:	2201      	movs	r2, #1
   16b00:	2111      	movs	r1, #17
   16b02:	4630      	mov	r0, r6
   16b04:	f7ff ff9a 	bl	16a3c <bt_att_create_pdu>
   16b08:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16b0a:	2800      	cmp	r0, #0
   16b0c:	d03d      	beq.n	16b8a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   16b0e:	2101      	movs	r1, #1
   16b10:	3008      	adds	r0, #8
	data.uuid = uuid;
   16b12:	e9cd 4807 	strd	r4, r8, [sp, #28]
   16b16:	f001 feef 	bl	188f8 <net_buf_simple_add>
	data.rsp->len = 0U;
   16b1a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16b1c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16b1e:	4a1c      	ldr	r2, [pc, #112]	; (16b90 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   16b20:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16b22:	4639      	mov	r1, r7
	data.group = NULL;
   16b24:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16b26:	4628      	mov	r0, r5
   16b28:	ab07      	add	r3, sp, #28
   16b2a:	f00d f8c8 	bl	23cbe <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   16b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16b30:	781b      	ldrb	r3, [r3, #0]
   16b32:	bb1b      	cbnz	r3, 16b7c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b36:	6958      	ldr	r0, [r3, #20]
   16b38:	f7ff fc6e 	bl	16418 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
   16b3e:	f001 fdd5 	bl	186ec <net_buf_unref>
	if (!req) {
   16b42:	230a      	movs	r3, #10
   16b44:	e001      	b.n	16b4a <att_read_group_req+0xb2>
			*err = 0U;
   16b46:	463d      	mov	r5, r7
	if (!req) {
   16b48:	2301      	movs	r3, #1
   16b4a:	462a      	mov	r2, r5
   16b4c:	2110      	movs	r1, #16
   16b4e:	e00e      	b.n	16b6e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   16b50:	f642 0301 	movw	r3, #10241	; 0x2801
   16b54:	a907      	add	r1, sp, #28
   16b56:	4640      	mov	r0, r8
   16b58:	f88d 601c 	strb.w	r6, [sp, #28]
   16b5c:	f8ad 301e 	strh.w	r3, [sp, #30]
   16b60:	f00c fd2b 	bl	235ba <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16b64:	2800      	cmp	r0, #0
   16b66:	d0c4      	beq.n	16af2 <att_read_group_req+0x5a>
	if (!req) {
   16b68:	2310      	movs	r3, #16
   16b6a:	462a      	mov	r2, r5
   16b6c:	4619      	mov	r1, r3
   16b6e:	4620      	mov	r0, r4
   16b70:	f00d fb9a 	bl	242a8 <send_err_rsp.part.0>
		return 0;
   16b74:	2000      	movs	r0, #0
}
   16b76:	b00c      	add	sp, #48	; 0x30
   16b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   16b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
   16b7e:	4620      	mov	r0, r4
   16b80:	f00d f951 	bl	23e26 <bt_att_chan_send_rsp>
	return 0;
   16b84:	e7f6      	b.n	16b74 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   16b86:	2004      	movs	r0, #4
   16b88:	e7f5      	b.n	16b76 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   16b8a:	200e      	movs	r0, #14
   16b8c:	e7f3      	b.n	16b76 <att_read_group_req+0xde>
   16b8e:	bf00      	nop
   16b90:	000165c1 	.word	0x000165c1

00016b94 <att_read_mult_vl_req>:
{
   16b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16b98:	6846      	ldr	r6, [r0, #4]
{
   16b9a:	b085      	sub	sp, #20
   16b9c:	4604      	mov	r4, r0
   16b9e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   16ba0:	4630      	mov	r0, r6
   16ba2:	2101      	movs	r1, #1
   16ba4:	f00d fe60 	bl	24868 <bt_gatt_change_aware>
   16ba8:	b950      	cbnz	r0, 16bc0 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16baa:	2105      	movs	r1, #5
   16bac:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16bb0:	f00d fa06 	bl	23fc0 <atomic_test_and_set_bit>
   16bb4:	2800      	cmp	r0, #0
   16bb6:	d13b      	bne.n	16c30 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16bb8:	2012      	movs	r0, #18
}
   16bba:	b005      	add	sp, #20
   16bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   16bc0:	2210      	movs	r2, #16
   16bc2:	2100      	movs	r1, #0
   16bc4:	4668      	mov	r0, sp
   16bc6:	f00c fcda 	bl	2357e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   16bca:	2200      	movs	r2, #0
   16bcc:	2121      	movs	r1, #33	; 0x21
   16bce:	4630      	mov	r0, r6
   16bd0:	f7ff ff34 	bl	16a3c <bt_att_create_pdu>
   16bd4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16bd6:	b368      	cbz	r0, 16c34 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16bd8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 16c38 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   16bdc:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   16bde:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16be2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   16be6:	89ab      	ldrh	r3, [r5, #12]
   16be8:	2b01      	cmp	r3, #1
   16bea:	d804      	bhi.n	16bf6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   16bec:	9902      	ldr	r1, [sp, #8]
   16bee:	4620      	mov	r0, r4
   16bf0:	f00d f919 	bl	23e26 <bt_att_chan_send_rsp>
	return 0;
   16bf4:	e01c      	b.n	16c30 <att_read_mult_vl_req+0x9c>
   16bf6:	4638      	mov	r0, r7
   16bf8:	f00d feae 	bl	24958 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16bfc:	466b      	mov	r3, sp
   16bfe:	464a      	mov	r2, r9
   16c00:	4601      	mov	r1, r0
   16c02:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16c04:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16c08:	f00d f859 	bl	23cbe <bt_gatt_foreach_attr>
		if (data.err) {
   16c0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16c10:	2b00      	cmp	r3, #0
   16c12:	d0e8      	beq.n	16be6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16c14:	9b02      	ldr	r3, [sp, #8]
   16c16:	6958      	ldr	r0, [r3, #20]
   16c18:	f7ff fbfe 	bl	16418 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16c1c:	9802      	ldr	r0, [sp, #8]
   16c1e:	f001 fd65 	bl	186ec <net_buf_unref>
	if (!req) {
   16c22:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16c26:	4632      	mov	r2, r6
   16c28:	2120      	movs	r1, #32
   16c2a:	4620      	mov	r0, r4
   16c2c:	f00d fb3c 	bl	242a8 <send_err_rsp.part.0>
			return 0;
   16c30:	2000      	movs	r0, #0
   16c32:	e7c2      	b.n	16bba <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   16c34:	200e      	movs	r0, #14
   16c36:	e7c0      	b.n	16bba <att_read_mult_vl_req+0x26>
   16c38:	00024031 	.word	0x00024031

00016c3c <att_read_mult_req>:
{
   16c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16c40:	6846      	ldr	r6, [r0, #4]
{
   16c42:	b085      	sub	sp, #20
   16c44:	4604      	mov	r4, r0
   16c46:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   16c48:	4630      	mov	r0, r6
   16c4a:	2101      	movs	r1, #1
   16c4c:	f00d fe0c 	bl	24868 <bt_gatt_change_aware>
   16c50:	b950      	cbnz	r0, 16c68 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16c52:	2105      	movs	r1, #5
   16c54:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16c58:	f00d f9b2 	bl	23fc0 <atomic_test_and_set_bit>
   16c5c:	2800      	cmp	r0, #0
   16c5e:	d13b      	bne.n	16cd8 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16c60:	2012      	movs	r0, #18
}
   16c62:	b005      	add	sp, #20
   16c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   16c68:	2210      	movs	r2, #16
   16c6a:	2100      	movs	r1, #0
   16c6c:	4668      	mov	r0, sp
   16c6e:	f00c fc86 	bl	2357e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   16c72:	2200      	movs	r2, #0
   16c74:	210f      	movs	r1, #15
   16c76:	4630      	mov	r0, r6
   16c78:	f7ff fee0 	bl	16a3c <bt_att_create_pdu>
   16c7c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16c7e:	b368      	cbz	r0, 16cdc <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16c80:	f8df 905c 	ldr.w	r9, [pc, #92]	; 16ce0 <att_read_mult_req+0xa4>
	data.chan = chan;
   16c84:	9400      	str	r4, [sp, #0]
   16c86:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16c8a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   16c8e:	89ab      	ldrh	r3, [r5, #12]
   16c90:	2b01      	cmp	r3, #1
   16c92:	d804      	bhi.n	16c9e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   16c94:	9902      	ldr	r1, [sp, #8]
   16c96:	4620      	mov	r0, r4
   16c98:	f00d f8c5 	bl	23e26 <bt_att_chan_send_rsp>
	return 0;
   16c9c:	e01c      	b.n	16cd8 <att_read_mult_req+0x9c>
   16c9e:	4638      	mov	r0, r7
   16ca0:	f00d fe5a 	bl	24958 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16ca4:	466b      	mov	r3, sp
   16ca6:	464a      	mov	r2, r9
   16ca8:	4601      	mov	r1, r0
   16caa:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16cac:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16cb0:	f00d f805 	bl	23cbe <bt_gatt_foreach_attr>
		if (data.err) {
   16cb4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16cb8:	2b00      	cmp	r3, #0
   16cba:	d0e8      	beq.n	16c8e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16cbc:	9b02      	ldr	r3, [sp, #8]
   16cbe:	6958      	ldr	r0, [r3, #20]
   16cc0:	f7ff fbaa 	bl	16418 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16cc4:	9802      	ldr	r0, [sp, #8]
   16cc6:	f001 fd11 	bl	186ec <net_buf_unref>
	if (!req) {
   16cca:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16cce:	4632      	mov	r2, r6
   16cd0:	210e      	movs	r1, #14
   16cd2:	4620      	mov	r0, r4
   16cd4:	f00d fae8 	bl	242a8 <send_err_rsp.part.0>
			return 0;
   16cd8:	2000      	movs	r0, #0
   16cda:	e7c2      	b.n	16c62 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   16cdc:	200e      	movs	r0, #14
   16cde:	e7c0      	b.n	16c62 <att_read_mult_req+0x26>
   16ce0:	00023feb 	.word	0x00023feb

00016ce4 <att_read_rsp>:
{
   16ce4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16ce8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   16cec:	4604      	mov	r4, r0
   16cee:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   16cf0:	4640      	mov	r0, r8
   16cf2:	2101      	movs	r1, #1
{
   16cf4:	4617      	mov	r7, r2
   16cf6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   16cf8:	f00d fdb6 	bl	24868 <bt_gatt_change_aware>
   16cfc:	b948      	cbnz	r0, 16d12 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16cfe:	2105      	movs	r1, #5
   16d00:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16d04:	f00d f95c 	bl	23fc0 <atomic_test_and_set_bit>
   16d08:	bb78      	cbnz	r0, 16d6a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16d0a:	2012      	movs	r0, #18
}
   16d0c:	b004      	add	sp, #16
   16d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   16d12:	b38d      	cbz	r5, 16d78 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   16d14:	2210      	movs	r2, #16
   16d16:	2100      	movs	r1, #0
   16d18:	4668      	mov	r0, sp
   16d1a:	f00c fc30 	bl	2357e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   16d1e:	2200      	movs	r2, #0
   16d20:	4639      	mov	r1, r7
   16d22:	4640      	mov	r0, r8
   16d24:	f7ff fe8a 	bl	16a3c <bt_att_create_pdu>
   16d28:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16d2a:	b338      	cbz	r0, 16d7c <att_read_rsp+0x98>
	data.offset = offset;
   16d2c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16d30:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16d34:	2301      	movs	r3, #1
   16d36:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16d3a:	4a11      	ldr	r2, [pc, #68]	; (16d80 <att_read_rsp+0x9c>)
	data.chan = chan;
   16d3c:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16d3e:	466b      	mov	r3, sp
   16d40:	4629      	mov	r1, r5
   16d42:	4628      	mov	r0, r5
   16d44:	f00c ffbb 	bl	23cbe <bt_gatt_foreach_attr>
	if (data.err) {
   16d48:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16d4c:	b17b      	cbz	r3, 16d6e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16d4e:	9b02      	ldr	r3, [sp, #8]
   16d50:	6958      	ldr	r0, [r3, #20]
   16d52:	f7ff fb61 	bl	16418 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16d56:	9802      	ldr	r0, [sp, #8]
   16d58:	f001 fcc8 	bl	186ec <net_buf_unref>
	if (!req) {
   16d5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16d60:	462a      	mov	r2, r5
   16d62:	4631      	mov	r1, r6
   16d64:	4620      	mov	r0, r4
   16d66:	f00d fa9f 	bl	242a8 <send_err_rsp.part.0>
			return 0;
   16d6a:	2000      	movs	r0, #0
   16d6c:	e7ce      	b.n	16d0c <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   16d6e:	9902      	ldr	r1, [sp, #8]
   16d70:	4620      	mov	r0, r4
   16d72:	f00d f858 	bl	23e26 <bt_att_chan_send_rsp>
	return 0;
   16d76:	e7f8      	b.n	16d6a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   16d78:	2001      	movs	r0, #1
   16d7a:	e7c7      	b.n	16d0c <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   16d7c:	200e      	movs	r0, #14
   16d7e:	e7c5      	b.n	16d0c <att_read_rsp+0x28>
   16d80:	00023feb 	.word	0x00023feb

00016d84 <att_read_type_req>:
{
   16d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16d88:	898d      	ldrh	r5, [r1, #12]
   16d8a:	3d04      	subs	r5, #4
   16d8c:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   16d8e:	2d02      	cmp	r5, #2
{
   16d90:	4604      	mov	r4, r0
   16d92:	b08c      	sub	sp, #48	; 0x30
   16d94:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   16d96:	d001      	beq.n	16d9c <att_read_type_req+0x18>
   16d98:	2d10      	cmp	r5, #16
   16d9a:	d150      	bne.n	16e3e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   16d9c:	2104      	movs	r1, #4
   16d9e:	3008      	adds	r0, #8
   16da0:	f001 fd90 	bl	188c4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16da4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   16da8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16daa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16dac:	1d01      	adds	r1, r0, #4
   16dae:	462a      	mov	r2, r5
   16db0:	4640      	mov	r0, r8
   16db2:	f00c fc30 	bl	23616 <bt_uuid_create>
   16db6:	b188      	cbz	r0, 16ddc <att_read_type_req+0x58>
	if (!start || !end) {
   16db8:	b19e      	cbz	r6, 16de2 <att_read_type_req+0x5e>
   16dba:	b18f      	cbz	r7, 16de0 <att_read_type_req+0x5c>
	if (start > end) {
   16dbc:	42b7      	cmp	r7, r6
   16dbe:	d310      	bcc.n	16de2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   16dc0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   16dc2:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16dc4:	2100      	movs	r1, #0
   16dc6:	eb0d 0002 	add.w	r0, sp, r2
   16dca:	f00c fbd8 	bl	2357e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   16dce:	2201      	movs	r2, #1
   16dd0:	2109      	movs	r1, #9
   16dd2:	4628      	mov	r0, r5
   16dd4:	f7ff fe32 	bl	16a3c <bt_att_create_pdu>
   16dd8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   16dda:	b960      	cbnz	r0, 16df6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   16ddc:	200e      	movs	r0, #14
   16dde:	e007      	b.n	16df0 <att_read_type_req+0x6c>
			*err = 0U;
   16de0:	463e      	mov	r6, r7
	if (!req) {
   16de2:	2301      	movs	r3, #1
   16de4:	4632      	mov	r2, r6
   16de6:	2108      	movs	r1, #8
   16de8:	4620      	mov	r0, r4
   16dea:	f00d fa5d 	bl	242a8 <send_err_rsp.part.0>
		return 0;
   16dee:	2000      	movs	r0, #0
}
   16df0:	b00c      	add	sp, #48	; 0x30
   16df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   16df6:	2101      	movs	r1, #1
   16df8:	3008      	adds	r0, #8
	data.uuid = uuid;
   16dfa:	e9cd 4806 	strd	r4, r8, [sp, #24]
   16dfe:	f001 fd7b 	bl	188f8 <net_buf_simple_add>
	data.rsp->len = 0U;
   16e02:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16e04:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   16e06:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16e08:	230a      	movs	r3, #10
   16e0a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16e0e:	4a0d      	ldr	r2, [pc, #52]	; (16e44 <att_read_type_req+0xc0>)
   16e10:	ab06      	add	r3, sp, #24
   16e12:	4639      	mov	r1, r7
   16e14:	4630      	mov	r0, r6
   16e16:	f00c ff52 	bl	23cbe <bt_gatt_foreach_attr>
	if (data.err) {
   16e1a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16e1e:	b14b      	cbz	r3, 16e34 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16e20:	9b08      	ldr	r3, [sp, #32]
   16e22:	6958      	ldr	r0, [r3, #20]
   16e24:	f7ff faf8 	bl	16418 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16e28:	9808      	ldr	r0, [sp, #32]
   16e2a:	f001 fc5f 	bl	186ec <net_buf_unref>
	if (!req) {
   16e2e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16e32:	e7d7      	b.n	16de4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   16e34:	9908      	ldr	r1, [sp, #32]
   16e36:	4620      	mov	r0, r4
   16e38:	f00c fff5 	bl	23e26 <bt_att_chan_send_rsp>
	return 0;
   16e3c:	e7d7      	b.n	16dee <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   16e3e:	2004      	movs	r0, #4
   16e40:	e7d6      	b.n	16df0 <att_read_type_req+0x6c>
   16e42:	bf00      	nop
   16e44:	0001666d 	.word	0x0001666d

00016e48 <att_find_type_req>:
{
   16e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e4c:	460f      	mov	r7, r1
   16e4e:	b086      	sub	sp, #24
   16e50:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   16e52:	2106      	movs	r1, #6
   16e54:	f107 0008 	add.w	r0, r7, #8
   16e58:	f001 fd34 	bl	188c4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16e5c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16e5e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   16e62:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   16e64:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   16e68:	b1c5      	cbz	r5, 16e9c <att_find_type_req+0x54>
   16e6a:	2300      	movs	r3, #0
   16e6c:	f1b8 0f00 	cmp.w	r8, #0
   16e70:	d013      	beq.n	16e9a <att_find_type_req+0x52>
	if (start > end) {
   16e72:	4545      	cmp	r5, r8
   16e74:	d812      	bhi.n	16e9c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   16e76:	f88d 3000 	strb.w	r3, [sp]
   16e7a:	f88d 3004 	strb.w	r3, [sp, #4]
   16e7e:	a901      	add	r1, sp, #4
   16e80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16e84:	4668      	mov	r0, sp
   16e86:	f8ad 2002 	strh.w	r2, [sp, #2]
   16e8a:	f8ad 3006 	strh.w	r3, [sp, #6]
   16e8e:	f00c fb94 	bl	235ba <bt_uuid_cmp>
   16e92:	4606      	mov	r6, r0
   16e94:	b160      	cbz	r0, 16eb0 <att_find_type_req+0x68>
	if (!req) {
   16e96:	230a      	movs	r3, #10
   16e98:	e001      	b.n	16e9e <att_find_type_req+0x56>
			*err = 0U;
   16e9a:	4645      	mov	r5, r8
	if (!req) {
   16e9c:	2301      	movs	r3, #1
   16e9e:	462a      	mov	r2, r5
   16ea0:	2106      	movs	r1, #6
   16ea2:	4620      	mov	r0, r4
   16ea4:	f00d fa00 	bl	242a8 <send_err_rsp.part.0>
		return 0;
   16ea8:	2000      	movs	r0, #0
}
   16eaa:	b006      	add	sp, #24
   16eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   16eb0:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16eb4:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   16eb6:	4601      	mov	r1, r0
   16eb8:	2214      	movs	r2, #20
   16eba:	a801      	add	r0, sp, #4
   16ebc:	f00c fb5f 	bl	2357e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   16ec0:	4632      	mov	r2, r6
   16ec2:	2107      	movs	r1, #7
   16ec4:	4650      	mov	r0, sl
   16ec6:	f7ff fdb9 	bl	16a3c <bt_att_create_pdu>
   16eca:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16ecc:	b1f8      	cbz	r0, 16f0e <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16ece:	230a      	movs	r3, #10
   16ed0:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16ed4:	4a0f      	ldr	r2, [pc, #60]	; (16f14 <att_find_type_req+0xcc>)
	data.chan = chan;
   16ed6:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16ed8:	ab01      	add	r3, sp, #4
   16eda:	4641      	mov	r1, r8
   16edc:	4628      	mov	r0, r5
	data.value = value;
   16ede:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   16ee2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16ee6:	f00c feea 	bl	23cbe <bt_gatt_foreach_attr>
	if (data.err) {
   16eea:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16eee:	b14b      	cbz	r3, 16f04 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16ef0:	9b02      	ldr	r3, [sp, #8]
   16ef2:	6958      	ldr	r0, [r3, #20]
   16ef4:	f7ff fa90 	bl	16418 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16ef8:	9802      	ldr	r0, [sp, #8]
   16efa:	f001 fbf7 	bl	186ec <net_buf_unref>
	if (!req) {
   16efe:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16f02:	e7cc      	b.n	16e9e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   16f04:	9902      	ldr	r1, [sp, #8]
   16f06:	4620      	mov	r0, r4
   16f08:	f00c ff8d 	bl	23e26 <bt_att_chan_send_rsp>
	return 0;
   16f0c:	e7cc      	b.n	16ea8 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   16f0e:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16f10:	e7cb      	b.n	16eaa <att_find_type_req+0x62>
   16f12:	bf00      	nop
   16f14:	000162d5 	.word	0x000162d5

00016f18 <att_find_info_req>:
{
   16f18:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   16f1a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   16f1c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16f1e:	885e      	ldrh	r6, [r3, #2]
{
   16f20:	b085      	sub	sp, #20
   16f22:	4604      	mov	r4, r0
	if (!start || !end) {
   16f24:	b195      	cbz	r5, 16f4c <att_find_info_req+0x34>
   16f26:	b186      	cbz	r6, 16f4a <att_find_info_req+0x32>
	if (start > end) {
   16f28:	42b5      	cmp	r5, r6
   16f2a:	d80f      	bhi.n	16f4c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16f2c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   16f2e:	2210      	movs	r2, #16
   16f30:	2100      	movs	r1, #0
   16f32:	4668      	mov	r0, sp
   16f34:	f00c fb23 	bl	2357e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16f38:	2200      	movs	r2, #0
   16f3a:	2105      	movs	r1, #5
   16f3c:	4638      	mov	r0, r7
   16f3e:	f7ff fd7d 	bl	16a3c <bt_att_create_pdu>
   16f42:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16f44:	b958      	cbnz	r0, 16f5e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16f46:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16f48:	e007      	b.n	16f5a <att_find_info_req+0x42>
			*err = 0U;
   16f4a:	4635      	mov	r5, r6
	if (!req) {
   16f4c:	2301      	movs	r3, #1
   16f4e:	462a      	mov	r2, r5
   16f50:	2104      	movs	r1, #4
   16f52:	4620      	mov	r0, r4
   16f54:	f00d f9a8 	bl	242a8 <send_err_rsp.part.0>
		return 0;
   16f58:	2000      	movs	r0, #0
}
   16f5a:	b005      	add	sp, #20
   16f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16f5e:	466b      	mov	r3, sp
   16f60:	4a0a      	ldr	r2, [pc, #40]	; (16f8c <att_find_info_req+0x74>)
	data.chan = chan;
   16f62:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16f64:	4631      	mov	r1, r6
   16f66:	4628      	mov	r0, r5
   16f68:	f00c fea9 	bl	23cbe <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16f6c:	9b02      	ldr	r3, [sp, #8]
   16f6e:	b943      	cbnz	r3, 16f82 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16f70:	9b01      	ldr	r3, [sp, #4]
   16f72:	6958      	ldr	r0, [r3, #20]
   16f74:	f7ff fa50 	bl	16418 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16f78:	9801      	ldr	r0, [sp, #4]
   16f7a:	f001 fbb7 	bl	186ec <net_buf_unref>
	if (!req) {
   16f7e:	230a      	movs	r3, #10
   16f80:	e7e5      	b.n	16f4e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   16f82:	9901      	ldr	r1, [sp, #4]
   16f84:	4620      	mov	r0, r4
   16f86:	f00c ff4e 	bl	23e26 <bt_att_chan_send_rsp>
	return 0;
   16f8a:	e7e5      	b.n	16f58 <att_find_info_req+0x40>
   16f8c:	00023cd5 	.word	0x00023cd5

00016f90 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   16f90:	b570      	push	{r4, r5, r6, lr}
	z_impl_k_queue_init(queue);
   16f92:	4809      	ldr	r0, [pc, #36]	; (16fb8 <bt_att_init+0x28>)
   16f94:	4d09      	ldr	r5, [pc, #36]	; (16fbc <bt_att_init+0x2c>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   16f96:	4e08      	ldr	r6, [pc, #32]	; (16fb8 <bt_att_init+0x28>)
   16f98:	f00e f992 	bl	252c0 <z_impl_k_queue_init>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   16f9c:	2400      	movs	r4, #0
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   16f9e:	4629      	mov	r1, r5
   16fa0:	4630      	mov	r0, r6
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   16fa2:	3401      	adds	r4, #1
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   16fa4:	f00e f999 	bl	252da <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   16fa8:	2c04      	cmp	r4, #4
   16faa:	f105 0514 	add.w	r5, r5, #20
   16fae:	d1f6      	bne.n	16f9e <bt_att_init+0xe>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   16fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_init();
   16fb4:	f000 bb64 	b.w	17680 <bt_gatt_init>
   16fb8:	20000ab0 	.word	0x20000ab0
   16fbc:	200029bc 	.word	0x200029bc

00016fc0 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   16fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   16fc2:	2300      	movs	r3, #0
{
   16fc4:	4605      	mov	r5, r0
   16fc6:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   16fc8:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   16fca:	f007 fba5 	bl	1e718 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   16fce:	4b0b      	ldr	r3, [pc, #44]	; (16ffc <bt_att_req_alloc+0x3c>)
   16fd0:	681b      	ldr	r3, [r3, #0]
   16fd2:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   16fd4:	bf04      	itt	eq
   16fd6:	2500      	moveq	r5, #0
   16fd8:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16fda:	a901      	add	r1, sp, #4
   16fdc:	4808      	ldr	r0, [pc, #32]	; (17000 <bt_att_req_alloc+0x40>)
   16fde:	462a      	mov	r2, r5
   16fe0:	4623      	mov	r3, r4
   16fe2:	f005 fb89 	bl	1c6f8 <k_mem_slab_alloc>
   16fe6:	4601      	mov	r1, r0
   16fe8:	b930      	cbnz	r0, 16ff8 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   16fea:	9801      	ldr	r0, [sp, #4]
   16fec:	2210      	movs	r2, #16
   16fee:	f00c fac6 	bl	2357e <memset>

	return req;
   16ff2:	9801      	ldr	r0, [sp, #4]
}
   16ff4:	b003      	add	sp, #12
   16ff6:	bd30      	pop	{r4, r5, pc}
		return NULL;
   16ff8:	2000      	movs	r0, #0
   16ffa:	e7fb      	b.n	16ff4 <bt_att_req_alloc+0x34>
   16ffc:	20002a0c 	.word	0x20002a0c
   17000:	20000a14 	.word	0x20000a14

00017004 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   17004:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   17006:	6883      	ldr	r3, [r0, #8]
{
   17008:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1700a:	b14b      	cbz	r3, 17020 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1700c:	6958      	ldr	r0, [r3, #20]
   1700e:	f7ff fa03 	bl	16418 <tx_meta_data_free>
		net_buf_unref(req->buf);
   17012:	9b01      	ldr	r3, [sp, #4]
   17014:	6898      	ldr	r0, [r3, #8]
   17016:	f001 fb69 	bl	186ec <net_buf_unref>
		req->buf = NULL;
   1701a:	9b01      	ldr	r3, [sp, #4]
   1701c:	2200      	movs	r2, #0
   1701e:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   17020:	4803      	ldr	r0, [pc, #12]	; (17030 <bt_att_req_free+0x2c>)
   17022:	a901      	add	r1, sp, #4
   17024:	f005 fbc0 	bl	1c7a8 <k_mem_slab_free>
}
   17028:	b003      	add	sp, #12
   1702a:	f85d fb04 	ldr.w	pc, [sp], #4
   1702e:	bf00      	nop
   17030:	20000a14 	.word	0x20000a14

00017034 <att_handle_rsp>:
{
   17034:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   17038:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1703a:	30c0      	adds	r0, #192	; 0xc0
{
   1703c:	460e      	mov	r6, r1
   1703e:	4617      	mov	r7, r2
   17040:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   17042:	f006 fc11 	bl	1d868 <k_work_cancel_delayable>
	if (!chan->req) {
   17046:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1704a:	b950      	cbnz	r0, 17062 <att_handle_rsp+0x2e>
		BT_WARN("No pending ATT request");
   1704c:	4816      	ldr	r0, [pc, #88]	; (170a8 <att_handle_rsp+0x74>)
   1704e:	2157      	movs	r1, #87	; 0x57
   17050:	f00b fff3 	bl	2303a <z_log_minimal_printk>
	att_req_send_process(chan->att);
   17054:	6820      	ldr	r0, [r4, #0]
   17056:	f00d f857 	bl	24108 <att_req_send_process>
}
   1705a:	2000      	movs	r0, #0
   1705c:	b002      	add	sp, #8
   1705e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   17062:	4b12      	ldr	r3, [pc, #72]	; (170ac <att_handle_rsp+0x78>)
   17064:	4298      	cmp	r0, r3
   17066:	f04f 0800 	mov.w	r8, #0
   1706a:	d102      	bne.n	17072 <att_handle_rsp+0x3e>
		chan->req = NULL;
   1706c:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   17070:	e7f0      	b.n	17054 <att_handle_rsp+0x20>
	func = chan->req->func;
   17072:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   17076:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1707a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1707e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   17082:	f7ff ffbf 	bl	17004 <bt_att_req_free>
	att_req_send_process(chan->att);
   17086:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   17088:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   1708c:	f00d f83c 	bl	24108 <att_req_send_process>
	if (func) {
   17090:	f1b9 0f00 	cmp.w	r9, #0
   17094:	d0e1      	beq.n	1705a <att_handle_rsp+0x26>
		func(chan->att->conn, err, pdu, len, params);
   17096:	6820      	ldr	r0, [r4, #0]
   17098:	f8cd a000 	str.w	sl, [sp]
   1709c:	6800      	ldr	r0, [r0, #0]
   1709e:	463b      	mov	r3, r7
   170a0:	4632      	mov	r2, r6
   170a2:	4629      	mov	r1, r5
   170a4:	47c8      	blx	r9
   170a6:	e7d8      	b.n	1705a <att_handle_rsp+0x26>
   170a8:	00027ce3 	.word	0x00027ce3
   170ac:	20002a10 	.word	0x20002a10

000170b0 <bt_att_disconnected>:
{
   170b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   170b4:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   170b8:	4604      	mov	r4, r0
	if (!att_chan->att) {
   170ba:	2e00      	cmp	r6, #0
   170bc:	d056      	beq.n	1716c <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   170be:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   170c2:	f106 0028 	add.w	r0, r6, #40	; 0x28
   170c6:	f00c ff60 	bl	23f8a <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   170ca:	1f27      	subs	r7, r4, #4
   170cc:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   170d0:	2200      	movs	r2, #0
   170d2:	2300      	movs	r3, #0
   170d4:	4640      	mov	r0, r8
   170d6:	f001 f9d7 	bl	18488 <net_buf_get>
   170da:	4605      	mov	r5, r0
   170dc:	bb28      	cbnz	r0, 1712a <bt_att_disconnected+0x7a>
	if (chan->req) {
   170de:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   170e2:	b12b      	cbz	r3, 170f0 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   170e4:	4602      	mov	r2, r0
   170e6:	4601      	mov	r1, r0
   170e8:	230e      	movs	r3, #14
   170ea:	4638      	mov	r0, r7
   170ec:	f7ff ffa2 	bl	17034 <att_handle_rsp>
	chan->att = NULL;
   170f0:	2300      	movs	r3, #0
   170f2:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   170f6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   170f8:	2b00      	cmp	r3, #0
   170fa:	d137      	bne.n	1716c <bt_att_disconnected+0xbc>
	att_reset(att);
   170fc:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   170fe:	9803      	ldr	r0, [sp, #12]
   17100:	2200      	movs	r2, #0
   17102:	2300      	movs	r3, #0
   17104:	300c      	adds	r0, #12
   17106:	f001 f9bf 	bl	18488 <net_buf_get>
   1710a:	4605      	mov	r5, r0
   1710c:	b9a0      	cbnz	r0, 17138 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   1710e:	9803      	ldr	r0, [sp, #12]
	return list->head;
   17110:	6845      	ldr	r5, [r0, #4]
   17112:	b9c5      	cbnz	r5, 17146 <bt_att_disconnected+0x96>
	att->conn = NULL;
   17114:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   17116:	a903      	add	r1, sp, #12
   17118:	4816      	ldr	r0, [pc, #88]	; (17174 <bt_att_disconnected+0xc4>)
   1711a:	f005 fb45 	bl	1c7a8 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1711e:	6820      	ldr	r0, [r4, #0]
}
   17120:	b004      	add	sp, #16
   17122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   17126:	f001 b861 	b.w	181ec <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1712a:	6968      	ldr	r0, [r5, #20]
   1712c:	f7ff f974 	bl	16418 <tx_meta_data_free>
		net_buf_unref(buf);
   17130:	4628      	mov	r0, r5
   17132:	f001 fadb 	bl	186ec <net_buf_unref>
   17136:	e7cb      	b.n	170d0 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   17138:	6968      	ldr	r0, [r5, #20]
   1713a:	f7ff f96d 	bl	16418 <tx_meta_data_free>
		net_buf_unref(buf);
   1713e:	4628      	mov	r0, r5
   17140:	f001 fad4 	bl	186ec <net_buf_unref>
   17144:	e7db      	b.n	170fe <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17146:	6882      	ldr	r2, [r0, #8]
	return node->next;
   17148:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1714a:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1714c:	4295      	cmp	r5, r2
	list->tail = node;
   1714e:	bf08      	it	eq
   17150:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   17152:	686e      	ldr	r6, [r5, #4]
   17154:	b136      	cbz	r6, 17164 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   17156:	68eb      	ldr	r3, [r5, #12]
   17158:	9300      	str	r3, [sp, #0]
   1715a:	2300      	movs	r3, #0
   1715c:	6800      	ldr	r0, [r0, #0]
   1715e:	461a      	mov	r2, r3
   17160:	210e      	movs	r1, #14
   17162:	47b0      	blx	r6
		bt_att_req_free(req);
   17164:	4628      	mov	r0, r5
   17166:	f7ff ff4d 	bl	17004 <bt_att_req_free>
   1716a:	e7d0      	b.n	1710e <bt_att_disconnected+0x5e>
}
   1716c:	b004      	add	sp, #16
   1716e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17172:	bf00      	nop
   17174:	200009d4 	.word	0x200009d4

00017178 <att_timeout>:
{
   17178:	b510      	push	{r4, lr}
	BT_ERR("ATT Timeout");
   1717a:	2145      	movs	r1, #69	; 0x45
{
   1717c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1717e:	4804      	ldr	r0, [pc, #16]	; (17190 <att_timeout+0x18>)
   17180:	f00b ff5b 	bl	2303a <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   17184:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   17188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1718c:	f7ff bf90 	b.w	170b0 <bt_att_disconnected>
   17190:	00027cff 	.word	0x00027cff

00017194 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   17194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17196:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   17198:	b950      	cbnz	r0, 171b0 <bt_att_send+0x1c>
   1719a:	4928      	ldr	r1, [pc, #160]	; (1723c <bt_att_send+0xa8>)
   1719c:	4828      	ldr	r0, [pc, #160]	; (17240 <bt_att_send+0xac>)
   1719e:	f640 62a8 	movw	r2, #3752	; 0xea8
   171a2:	f00b ff3c 	bl	2301e <assert_print>
   171a6:	f640 61a8 	movw	r1, #3752	; 0xea8
	__ASSERT_NO_MSG(buf);
   171aa:	4824      	ldr	r0, [pc, #144]	; (1723c <bt_att_send+0xa8>)
   171ac:	f00b ff30 	bl	23010 <assert_post_action>
   171b0:	b941      	cbnz	r1, 171c4 <bt_att_send+0x30>
   171b2:	4922      	ldr	r1, [pc, #136]	; (1723c <bt_att_send+0xa8>)
   171b4:	4822      	ldr	r0, [pc, #136]	; (17240 <bt_att_send+0xac>)
   171b6:	f640 62a9 	movw	r2, #3753	; 0xea9
   171ba:	f00b ff30 	bl	2301e <assert_print>
   171be:	f640 61a9 	movw	r1, #3753	; 0xea9
   171c2:	e7f2      	b.n	171aa <bt_att_send+0x16>

	att = att_get(conn);
   171c4:	f7ff f84c 	bl	16260 <att_get>
	if (!att) {
   171c8:	4605      	mov	r5, r0
   171ca:	b940      	cbnz	r0, 171de <bt_att_send+0x4a>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   171cc:	6960      	ldr	r0, [r4, #20]
   171ce:	f7ff f923 	bl	16418 <tx_meta_data_free>
		net_buf_unref(buf);
   171d2:	4620      	mov	r0, r4
   171d4:	f001 fa8a 	bl	186ec <net_buf_unref>
		return -ENOTCONN;
   171d8:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   171dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   171de:	f100 060c 	add.w	r6, r0, #12
   171e2:	4621      	mov	r1, r4
   171e4:	4630      	mov	r0, r6
   171e6:	f001 fa57 	bl	18698 <net_buf_put>
	return list->head;
   171ea:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   171ec:	b14d      	cbz	r5, 17202 <bt_att_send+0x6e>
	return node->next;
   171ee:	f855 49f0 	ldr.w	r4, [r5], #-240
   171f2:	b104      	cbz	r4, 171f6 <bt_att_send+0x62>
   171f4:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   171f6:	4631      	mov	r1, r6
   171f8:	4628      	mov	r0, r5
   171fa:	f00c fe22 	bl	23e42 <process_queue>
		if (!err) {
   171fe:	4603      	mov	r3, r0
   17200:	b980      	cbnz	r0, 17224 <bt_att_send+0x90>
	return 0;
   17202:	2000      	movs	r0, #0
   17204:	e7ea      	b.n	171dc <bt_att_send+0x48>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   17206:	2103      	movs	r1, #3
   17208:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1720c:	f00c fd1d 	bl	23c4a <atomic_test_bit>
   17210:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   17212:	f105 0098 	add.w	r0, r5, #152	; 0x98
   17216:	f00c fd18 	bl	23c4a <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1721a:	4287      	cmp	r7, r0
   1721c:	f06f 0301 	mvn.w	r3, #1
   17220:	d107      	bne.n	17232 <bt_att_send+0x9e>
   17222:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17224:	2c00      	cmp	r4, #0
   17226:	d0ec      	beq.n	17202 <bt_att_send+0x6e>
   17228:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   1722c:	b922      	cbnz	r2, 17238 <bt_att_send+0xa4>
		if (err == -ENOENT && prev &&
   1722e:	3302      	adds	r3, #2
   17230:	d0e9      	beq.n	17206 <bt_att_send+0x72>
{
   17232:	4625      	mov	r5, r4
   17234:	4614      	mov	r4, r2
   17236:	e7de      	b.n	171f6 <bt_att_send+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17238:	3af0      	subs	r2, #240	; 0xf0
   1723a:	e7f8      	b.n	1722e <bt_att_send+0x9a>
   1723c:	00027aea 	.word	0x00027aea
   17240:	00026718 	.word	0x00026718

00017244 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   17244:	b510      	push	{r4, lr}
   17246:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   17248:	b950      	cbnz	r0, 17260 <bt_att_req_send+0x1c>
   1724a:	4914      	ldr	r1, [pc, #80]	; (1729c <bt_att_req_send+0x58>)
   1724c:	4814      	ldr	r0, [pc, #80]	; (172a0 <bt_att_req_send+0x5c>)
   1724e:	f640 62be 	movw	r2, #3774	; 0xebe
   17252:	f00b fee4 	bl	2301e <assert_print>
   17256:	f640 61be 	movw	r1, #3774	; 0xebe
	__ASSERT_NO_MSG(req);
   1725a:	4810      	ldr	r0, [pc, #64]	; (1729c <bt_att_req_send+0x58>)
   1725c:	f00b fed8 	bl	23010 <assert_post_action>
   17260:	b941      	cbnz	r1, 17274 <bt_att_req_send+0x30>
   17262:	490e      	ldr	r1, [pc, #56]	; (1729c <bt_att_req_send+0x58>)
   17264:	480e      	ldr	r0, [pc, #56]	; (172a0 <bt_att_req_send+0x5c>)
   17266:	f640 62bf 	movw	r2, #3775	; 0xebf
   1726a:	f00b fed8 	bl	2301e <assert_print>
   1726e:	f640 61bf 	movw	r1, #3775	; 0xebf
   17272:	e7f2      	b.n	1725a <bt_att_req_send+0x16>

	att = att_get(conn);
   17274:	f7fe fff4 	bl	16260 <att_get>
	if (!att) {
   17278:	b160      	cbz	r0, 17294 <bt_att_req_send+0x50>
	parent->next = child;
   1727a:	2300      	movs	r3, #0
   1727c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1727e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   17280:	b92b      	cbnz	r3, 1728e <bt_att_req_send+0x4a>
	list->head = node;
   17282:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   17286:	f00c ff3f 	bl	24108 <att_req_send_process>

	return 0;
   1728a:	2000      	movs	r0, #0
}
   1728c:	bd10      	pop	{r4, pc}
	parent->next = child;
   1728e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17290:	6084      	str	r4, [r0, #8]
}
   17292:	e7f8      	b.n	17286 <bt_att_req_send+0x42>
		return -ENOTCONN;
   17294:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17298:	e7f8      	b.n	1728c <bt_att_req_send+0x48>
   1729a:	bf00      	nop
   1729c:	00027aea 	.word	0x00027aea
   172a0:	00026718 	.word	0x00026718

000172a4 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   172a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172a8:	4c0d      	ldr	r4, [pc, #52]	; (172e0 <find_cf_cfg+0x3c>)

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   172aa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 172e4 <find_cf_cfg+0x40>
{
   172ae:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   172b0:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   172b2:	4627      	mov	r7, r4
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   172b4:	1c62      	adds	r2, r4, #1
		if (!conn) {
   172b6:	b96d      	cbnz	r5, 172d4 <find_cf_cfg+0x30>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   172b8:	4641      	mov	r1, r8
   172ba:	4610      	mov	r0, r2
   172bc:	f00d f935 	bl	2452a <bt_addr_le_eq>
   172c0:	b928      	cbnz	r0, 172ce <find_cf_cfg+0x2a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   172c2:	3601      	adds	r6, #1
   172c4:	2e08      	cmp	r6, #8
   172c6:	f104 0410 	add.w	r4, r4, #16
   172ca:	d1f2      	bne.n	172b2 <find_cf_cfg+0xe>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
			return cfg;
		}
	}

	return NULL;
   172cc:	2700      	movs	r7, #0
}
   172ce:	4638      	mov	r0, r7
   172d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   172d4:	7821      	ldrb	r1, [r4, #0]
   172d6:	4628      	mov	r0, r5
   172d8:	f00c fbf3 	bl	23ac2 <bt_conn_is_peer_addr_le>
   172dc:	e7f0      	b.n	172c0 <find_cf_cfg+0x1c>
   172de:	bf00      	nop
   172e0:	20002a80 	.word	0x20002a80
   172e4:	00026f2f 	.word	0x00026f2f

000172e8 <find_sc_cfg>:
{
   172e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172ea:	4d0b      	ldr	r5, [pc, #44]	; (17318 <find_sc_cfg+0x30>)
   172ec:	4606      	mov	r6, r0
   172ee:	460f      	mov	r7, r1
   172f0:	2400      	movs	r4, #0
		if (id == sc_cfg[i].id &&
   172f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   172f6:	42b3      	cmp	r3, r6
   172f8:	d107      	bne.n	1730a <find_sc_cfg+0x22>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   172fa:	4639      	mov	r1, r7
   172fc:	4628      	mov	r0, r5
   172fe:	f00d f914 	bl	2452a <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   17302:	b110      	cbz	r0, 1730a <find_sc_cfg+0x22>
			return &sc_cfg[i];
   17304:	4805      	ldr	r0, [pc, #20]	; (1731c <find_sc_cfg+0x34>)
   17306:	4420      	add	r0, r4
}
   17308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1730a:	340c      	adds	r4, #12
   1730c:	2c60      	cmp	r4, #96	; 0x60
   1730e:	f105 050c 	add.w	r5, r5, #12
   17312:	d1ee      	bne.n	172f2 <find_sc_cfg+0xa>
	return NULL;
   17314:	2000      	movs	r0, #0
   17316:	e7f7      	b.n	17308 <find_sc_cfg+0x20>
   17318:	20003b1d 	.word	0x20003b1d
   1731c:	20003b1c 	.word	0x20003b1c

00017320 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   17320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   17322:	4f0c      	ldr	r7, [pc, #48]	; (17354 <find_ccc_cfg+0x34>)
{
   17324:	4606      	mov	r6, r0
   17326:	1c4c      	adds	r4, r1, #1
   17328:	f101 0551 	add.w	r5, r1, #81	; 0x51
		if (conn) {
   1732c:	b16e      	cbz	r6, 1734a <find_ccc_cfg+0x2a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1732e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   17332:	4622      	mov	r2, r4
   17334:	4630      	mov	r0, r6
   17336:	f00c fbc4 	bl	23ac2 <bt_conn_is_peer_addr_le>
   1733a:	b108      	cbz	r0, 17340 <find_ccc_cfg+0x20>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1733c:	1e60      	subs	r0, r4, #1
			return cfg;
		}
	}

	return NULL;
}
   1733e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17340:	340a      	adds	r4, #10
   17342:	42ac      	cmp	r4, r5
   17344:	d1f2      	bne.n	1732c <find_ccc_cfg+0xc>
	return NULL;
   17346:	2000      	movs	r0, #0
   17348:	e7f9      	b.n	1733e <find_ccc_cfg+0x1e>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1734a:	4639      	mov	r1, r7
   1734c:	4620      	mov	r0, r4
   1734e:	f00d f8ec 	bl	2452a <bt_addr_le_eq>
   17352:	e7f2      	b.n	1733a <find_ccc_cfg+0x1a>
   17354:	00026f2f 	.word	0x00026f2f

00017358 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   17358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1735c:	461e      	mov	r6, r3
   1735e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   17362:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   17366:	4681      	mov	r9, r0
   17368:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1736a:	2b00      	cmp	r3, #0
   1736c:	d144      	bne.n	173f8 <bt_gatt_attr_write_ccc+0xa0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1736e:	1e73      	subs	r3, r6, #1
   17370:	2b01      	cmp	r3, #1
   17372:	d844      	bhi.n	173fe <bt_gatt_attr_write_ccc+0xa6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   17374:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   17376:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   17378:	7815      	ldrb	r5, [r2, #0]
   1737a:	bf18      	it	ne
   1737c:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1737e:	f7ff ffcf 	bl	17320 <find_ccc_cfg>
	if (!cfg) {
   17382:	4604      	mov	r4, r0
   17384:	b9b8      	cbnz	r0, 173b6 <bt_gatt_attr_write_ccc+0x5e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   17386:	b915      	cbnz	r5, 1738e <bt_gatt_attr_write_ccc+0x36>
			return len;
   17388:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   1738a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1738e:	4641      	mov	r1, r8
   17390:	f7ff ffc6 	bl	17320 <find_ccc_cfg>
		if (!cfg) {
   17394:	4604      	mov	r4, r0
   17396:	b930      	cbnz	r0, 173a6 <bt_gatt_attr_write_ccc+0x4e>
			BT_WARN("No space to store CCC cfg");
   17398:	481a      	ldr	r0, [pc, #104]	; (17404 <bt_gatt_attr_write_ccc+0xac>)
   1739a:	2157      	movs	r1, #87	; 0x57
   1739c:	f00b fe4d 	bl	2303a <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   173a0:	f06f 0010 	mvn.w	r0, #16
   173a4:	e7f1      	b.n	1738a <bt_gatt_attr_write_ccc+0x32>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   173a6:	f109 0190 	add.w	r1, r9, #144	; 0x90
   173aa:	3001      	adds	r0, #1
   173ac:	f00d f8c5 	bl	2453a <bt_addr_le_copy>
		cfg->id = conn->id;
   173b0:	f899 3008 	ldrb.w	r3, [r9, #8]
   173b4:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   173b6:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
   173ba:	b98b      	cbnz	r3, 173e0 <bt_gatt_attr_write_ccc+0x88>
	cfg->value = value;
   173bc:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   173be:	f8b8 3050 	ldrh.w	r3, [r8, #80]	; 0x50
   173c2:	42ab      	cmp	r3, r5
   173c4:	d003      	beq.n	173ce <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   173c6:	4641      	mov	r1, r8
   173c8:	4638      	mov	r0, r7
   173ca:	f00d f82b 	bl	24424 <gatt_ccc_changed>
	if (!value) {
   173ce:	2d00      	cmp	r5, #0
   173d0:	d1da      	bne.n	17388 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   173d2:	490d      	ldr	r1, [pc, #52]	; (17408 <bt_gatt_attr_write_ccc+0xb0>)
   173d4:	1c60      	adds	r0, r4, #1
   173d6:	f00d f8b0 	bl	2453a <bt_addr_le_copy>
	cfg->id = 0U;
   173da:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   173dc:	8125      	strh	r5, [r4, #8]
}
   173de:	e7d3      	b.n	17388 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   173e0:	462a      	mov	r2, r5
   173e2:	4639      	mov	r1, r7
   173e4:	4648      	mov	r0, r9
   173e6:	4798      	blx	r3
		if (write < 0) {
   173e8:	2800      	cmp	r0, #0
   173ea:	dbce      	blt.n	1738a <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   173ec:	3801      	subs	r0, #1
   173ee:	2801      	cmp	r0, #1
   173f0:	d9e4      	bls.n	173bc <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   173f2:	f06f 000d 	mvn.w	r0, #13
   173f6:	e7c8      	b.n	1738a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   173f8:	f06f 0006 	mvn.w	r0, #6
   173fc:	e7c5      	b.n	1738a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   173fe:	f06f 000c 	mvn.w	r0, #12
   17402:	e7c2      	b.n	1738a <bt_gatt_attr_write_ccc+0x32>
   17404:	00027d17 	.word	0x00027d17
   17408:	00026f2f 	.word	0x00026f2f

0001740c <clear_cf_cfg>:
{
   1740c:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1740e:	490c      	ldr	r1, [pc, #48]	; (17440 <clear_cf_cfg+0x34>)
{
   17410:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17412:	3001      	adds	r0, #1
   17414:	f00d f891 	bl	2453a <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   17418:	f104 0008 	add.w	r0, r4, #8
   1741c:	2201      	movs	r2, #1
   1741e:	2100      	movs	r1, #0
   17420:	f00c f8ad 	bl	2357e <memset>
   17424:	f3bf 8f5b 	dmb	ish
   17428:	340c      	adds	r4, #12
   1742a:	2300      	movs	r3, #0
   1742c:	e854 2f00 	ldrex	r2, [r4]
   17430:	e844 3100 	strex	r1, r3, [r4]
   17434:	2900      	cmp	r1, #0
   17436:	d1f9      	bne.n	1742c <clear_cf_cfg+0x20>
   17438:	f3bf 8f5b 	dmb	ish
}
   1743c:	bd10      	pop	{r4, pc}
   1743e:	bf00      	nop
   17440:	00026f2f 	.word	0x00026f2f

00017444 <sc_save>:
{
   17444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17448:	4680      	mov	r8, r0
   1744a:	460f      	mov	r7, r1
   1744c:	4616      	mov	r6, r2
   1744e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   17450:	f7ff ff4a 	bl	172e8 <find_sc_cfg>
	if (!cfg) {
   17454:	4604      	mov	r4, r0
   17456:	b978      	cbnz	r0, 17478 <sc_save+0x34>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17458:	490e      	ldr	r1, [pc, #56]	; (17494 <sc_save+0x50>)
   1745a:	f7ff ff45 	bl	172e8 <find_sc_cfg>
		if (!cfg) {
   1745e:	4604      	mov	r4, r0
   17460:	b928      	cbnz	r0, 1746e <sc_save+0x2a>
}
   17462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("unable to save SC: no cfg left");
   17466:	480c      	ldr	r0, [pc, #48]	; (17498 <sc_save+0x54>)
   17468:	2145      	movs	r1, #69	; 0x45
   1746a:	f00b bde6 	b.w	2303a <z_log_minimal_printk>
		cfg->id = id;
   1746e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   17472:	4639      	mov	r1, r7
   17474:	f00d f861 	bl	2453a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   17478:	8922      	ldrh	r2, [r4, #8]
   1747a:	8963      	ldrh	r3, [r4, #10]
   1747c:	b91a      	cbnz	r2, 17486 <sc_save+0x42>
   1747e:	b92b      	cbnz	r3, 1748c <sc_save+0x48>
		cfg->data.start = start;
   17480:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   17482:	8165      	strh	r5, [r4, #10]
   17484:	e004      	b.n	17490 <sc_save+0x4c>
	if (new_start >= *start && new_end <= *end) {
   17486:	4296      	cmp	r6, r2
		*start = new_start;
   17488:	bf38      	it	cc
   1748a:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1748c:	429d      	cmp	r5, r3
   1748e:	d8f8      	bhi.n	17482 <sc_save+0x3e>
}
   17490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17494:	00026f2f 	.word	0x00026f2f
   17498:	00027d36 	.word	0x00027d36

0001749c <cf_write>:
{
   1749c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174a0:	461f      	mov	r7, r3
   174a2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   174a6:	2b01      	cmp	r3, #1
{
   174a8:	4606      	mov	r6, r0
   174aa:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   174ac:	d835      	bhi.n	1751a <cf_write+0x7e>
	if (offset + len > sizeof(cfg->data)) {
   174ae:	443b      	add	r3, r7
   174b0:	2b01      	cmp	r3, #1
   174b2:	463d      	mov	r5, r7
   174b4:	dc34      	bgt.n	17520 <cf_write+0x84>
	cfg = find_cf_cfg(conn);
   174b6:	f7ff fef5 	bl	172a4 <find_cf_cfg>
	if (!cfg) {
   174ba:	4604      	mov	r4, r0
   174bc:	b960      	cbnz	r0, 174d8 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
   174be:	f7ff fef1 	bl	172a4 <find_cf_cfg>
	if (!cfg) {
   174c2:	4604      	mov	r4, r0
   174c4:	b940      	cbnz	r0, 174d8 <cf_write+0x3c>
		BT_WARN("No space to store Client Supported Features");
   174c6:	4819      	ldr	r0, [pc, #100]	; (1752c <cf_write+0x90>)
   174c8:	2157      	movs	r1, #87	; 0x57
   174ca:	f00b fdb6 	bl	2303a <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   174ce:	f06f 0510 	mvn.w	r5, #16
}
   174d2:	4628      	mov	r0, r5
   174d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   174d8:	b197      	cbz	r7, 17500 <cf_write+0x64>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   174da:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   174dc:	f898 2000 	ldrb.w	r2, [r8]
   174e0:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   174e2:	fa21 f003 	lsr.w	r0, r1, r3
   174e6:	07c7      	lsls	r7, r0, #31
   174e8:	d503      	bpl.n	174f2 <cf_write+0x56>
		    !(value[i / 8] & BIT(i % 8))) {
   174ea:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   174ee:	07c0      	lsls	r0, r0, #31
   174f0:	d519      	bpl.n	17526 <cf_write+0x8a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   174f2:	3301      	adds	r3, #1
   174f4:	2b03      	cmp	r3, #3
   174f6:	d1f4      	bne.n	174e2 <cf_write+0x46>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   174f8:	f002 0207 	and.w	r2, r2, #7
   174fc:	4311      	orrs	r1, r2
   174fe:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17500:	f106 0190 	add.w	r1, r6, #144	; 0x90
   17504:	1c60      	adds	r0, r4, #1
   17506:	f00d f818 	bl	2453a <bt_addr_le_copy>
	cfg->id = conn->id;
   1750a:	4620      	mov	r0, r4
   1750c:	7a33      	ldrb	r3, [r6, #8]
   1750e:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   17512:	2100      	movs	r1, #0
   17514:	f00d f814 	bl	24540 <atomic_set_bit>
	return len;
   17518:	e7db      	b.n	174d2 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1751a:	f06f 0506 	mvn.w	r5, #6
   1751e:	e7d8      	b.n	174d2 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   17520:	f06f 050c 	mvn.w	r5, #12
   17524:	e7d5      	b.n	174d2 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   17526:	f06f 0512 	mvn.w	r5, #18
   1752a:	e7d2      	b.n	174d2 <cf_write+0x36>
   1752c:	00027d5a 	.word	0x00027d5a

00017530 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   17530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   17534:	4b29      	ldr	r3, [pc, #164]	; (175dc <disconnected_cb+0xac>)
{
   17536:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17538:	6882      	ldr	r2, [r0, #8]
   1753a:	429a      	cmp	r2, r3
{
   1753c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1753e:	d130      	bne.n	175a2 <disconnected_cb+0x72>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   17540:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   17542:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
   17546:	b363      	cbz	r3, 175a2 <disconnected_cb+0x72>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
   17548:	f8df b094 	ldr.w	fp, [pc, #148]	; 175e0 <disconnected_cb+0xb0>
   1754c:	1c6c      	adds	r4, r5, #1
   1754e:	f105 0a51 	add.w	sl, r5, #81	; 0x51
	value_used = false;
   17552:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17556:	f106 0990 	add.w	r9, r6, #144	; 0x90
		if (!cfg->value) {
   1755a:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1755e:	b19b      	cbz	r3, 17588 <disconnected_cb+0x58>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17560:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   17564:	4622      	mov	r2, r4
   17566:	4630      	mov	r0, r6
   17568:	f00c faab 	bl	23ac2 <bt_conn_is_peer_addr_le>
   1756c:	b9e0      	cbnz	r0, 175a8 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1756e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   17572:	4621      	mov	r1, r4
   17574:	f7fe fb14 	bl	15ba0 <bt_conn_lookup_addr_le>
			if (tmp) {
   17578:	b130      	cbz	r0, 17588 <disconnected_cb+0x58>
				if (tmp->state == BT_CONN_CONNECTED) {
   1757a:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   1757c:	2b07      	cmp	r3, #7
   1757e:	bf08      	it	eq
   17580:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   17584:	f7fe f8e0 	bl	15748 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17588:	340a      	adds	r4, #10
   1758a:	4554      	cmp	r4, sl
   1758c:	d1e5      	bne.n	1755a <disconnected_cb+0x2a>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   1758e:	f1b8 0f00 	cmp.w	r8, #0
   17592:	d106      	bne.n	175a2 <disconnected_cb+0x72>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   17594:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		ccc->value = 0U;
   17596:	f8a5 8050 	strh.w	r8, [r5, #80]	; 0x50
		if (ccc->cfg_changed) {
   1759a:	b113      	cbz	r3, 175a2 <disconnected_cb+0x72>
			ccc->cfg_changed(attr, ccc->value);
   1759c:	4641      	mov	r1, r8
   1759e:	4638      	mov	r0, r7
   175a0:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   175a2:	2001      	movs	r0, #1
   175a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   175a8:	7a30      	ldrb	r0, [r6, #8]
   175aa:	4649      	mov	r1, r9
   175ac:	f00c f914 	bl	237d8 <bt_addr_le_is_bonded>
   175b0:	b970      	cbnz	r0, 175d0 <disconnected_cb+0xa0>
				if (ccc == &sc_ccc) {
   175b2:	455d      	cmp	r5, fp
   175b4:	d102      	bne.n	175bc <disconnected_cb+0x8c>
					sc_clear(conn);
   175b6:	4630      	mov	r0, r6
   175b8:	f00c fff0 	bl	2459c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   175bc:	4909      	ldr	r1, [pc, #36]	; (175e4 <disconnected_cb+0xb4>)
   175be:	4620      	mov	r0, r4
   175c0:	f00c ffbb 	bl	2453a <bt_addr_le_copy>
	cfg->id = 0U;
   175c4:	2300      	movs	r3, #0
   175c6:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   175ca:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   175ce:	e7db      	b.n	17588 <disconnected_cb+0x58>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   175d0:	4649      	mov	r1, r9
   175d2:	4620      	mov	r0, r4
   175d4:	f00c ffb1 	bl	2453a <bt_addr_le_copy>
   175d8:	e7d6      	b.n	17588 <disconnected_cb+0x58>
   175da:	bf00      	nop
   175dc:	00017359 	.word	0x00017359
   175e0:	200006e8 	.word	0x200006e8
   175e4:	00026f2f 	.word	0x00026f2f

000175e8 <read_ppcp>:
{
   175e8:	b513      	push	{r0, r1, r4, lr}
   175ea:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   175ee:	4c0b      	ldr	r4, [pc, #44]	; (1761c <read_ppcp+0x34>)
{
   175f0:	4610      	mov	r0, r2
	if (offset > value_len) {
   175f2:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   175f4:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   175f8:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   175fc:	d80b      	bhi.n	17616 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   175fe:	f1c1 0408 	rsb	r4, r1, #8
   17602:	429c      	cmp	r4, r3
   17604:	bfa8      	it	ge
   17606:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   17608:	4622      	mov	r2, r4
   1760a:	4469      	add	r1, sp
   1760c:	f00b ffac 	bl	23568 <memcpy>
}
   17610:	4620      	mov	r0, r4
   17612:	b002      	add	sp, #8
   17614:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17616:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1761a:	e7f9      	b.n	17610 <read_ppcp+0x28>
   1761c:	00280018 	.word	0x00280018

00017620 <sc_indicate_rsp>:
{
   17620:	b510      	push	{r4, lr}
   17622:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17624:	4815      	ldr	r0, [pc, #84]	; (1767c <sc_indicate_rsp+0x5c>)
   17626:	f3bf 8f5b 	dmb	ish
   1762a:	e850 3f00 	ldrex	r3, [r0]
   1762e:	f023 0302 	bic.w	r3, r3, #2
   17632:	e840 3200 	strex	r2, r3, [r0]
   17636:	2a00      	cmp	r2, #0
   17638:	d1f7      	bne.n	1762a <sc_indicate_rsp+0xa>
   1763a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1763e:	f3bf 8f5b 	dmb	ish
   17642:	6803      	ldr	r3, [r0, #0]
   17644:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17648:	07da      	lsls	r2, r3, #31
   1764a:	d504      	bpl.n	17656 <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
   1764c:	2200      	movs	r2, #0
   1764e:	2300      	movs	r3, #0
   17650:	3830      	subs	r0, #48	; 0x30
   17652:	f006 f903 	bl	1d85c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   17656:	4620      	mov	r0, r4
   17658:	f00c feb3 	bl	243c2 <bt_att_fixed_chan_only>
   1765c:	b160      	cbz	r0, 17678 <sc_indicate_rsp+0x58>
		cfg = find_cf_cfg(conn);
   1765e:	4620      	mov	r0, r4
   17660:	f7ff fe20 	bl	172a4 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   17664:	b140      	cbz	r0, 17678 <sc_indicate_rsp+0x58>
   17666:	7a03      	ldrb	r3, [r0, #8]
   17668:	07db      	lsls	r3, r3, #31
   1766a:	d505      	bpl.n	17678 <sc_indicate_rsp+0x58>
}
   1766c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   17670:	2100      	movs	r1, #0
   17672:	300c      	adds	r0, #12
   17674:	f00c bf64 	b.w	24540 <atomic_set_bit>
}
   17678:	bd10      	pop	{r4, pc}
   1767a:	bf00      	nop
   1767c:	20001e98 	.word	0x20001e98

00017680 <bt_gatt_init>:
{
   17680:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17682:	4b27      	ldr	r3, [pc, #156]	; (17720 <bt_gatt_init+0xa0>)
   17684:	f3bf 8f5b 	dmb	ish
   17688:	2201      	movs	r2, #1
   1768a:	e853 1f00 	ldrex	r1, [r3]
   1768e:	2900      	cmp	r1, #0
   17690:	d103      	bne.n	1769a <bt_gatt_init+0x1a>
   17692:	e843 2000 	strex	r0, r2, [r3]
   17696:	2800      	cmp	r0, #0
   17698:	d1f7      	bne.n	1768a <bt_gatt_init+0xa>
   1769a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1769e:	d13e      	bne.n	1771e <bt_gatt_init+0x9e>
   176a0:	f3bf 8f5b 	dmb	ish
   176a4:	4b1f      	ldr	r3, [pc, #124]	; (17724 <bt_gatt_init+0xa4>)
   176a6:	e853 1f00 	ldrex	r1, [r3]
   176aa:	2900      	cmp	r1, #0
   176ac:	d103      	bne.n	176b6 <bt_gatt_init+0x36>
   176ae:	e843 2000 	strex	r0, r2, [r3]
   176b2:	2800      	cmp	r0, #0
   176b4:	d1f7      	bne.n	176a6 <bt_gatt_init+0x26>
   176b6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   176ba:	d11c      	bne.n	176f6 <bt_gatt_init+0x76>
   176bc:	491a      	ldr	r1, [pc, #104]	; (17728 <bt_gatt_init+0xa8>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   176be:	4a1b      	ldr	r2, [pc, #108]	; (1772c <bt_gatt_init+0xac>)
   176c0:	880b      	ldrh	r3, [r1, #0]
   176c2:	4c1b      	ldr	r4, [pc, #108]	; (17730 <bt_gatt_init+0xb0>)
	if (!atomic_cas(&service_init, 0, 1)) {
   176c4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   176c6:	42a2      	cmp	r2, r4
   176c8:	d912      	bls.n	176f0 <bt_gatt_init+0x70>
   176ca:	b100      	cbz	r0, 176ce <bt_gatt_init+0x4e>
   176cc:	800b      	strh	r3, [r1, #0]
   176ce:	4919      	ldr	r1, [pc, #100]	; (17734 <bt_gatt_init+0xb4>)
   176d0:	4819      	ldr	r0, [pc, #100]	; (17738 <bt_gatt_init+0xb8>)
   176d2:	f240 520e 	movw	r2, #1294	; 0x50e
   176d6:	f00b fca2 	bl	2301e <assert_print>
   176da:	4816      	ldr	r0, [pc, #88]	; (17734 <bt_gatt_init+0xb4>)
   176dc:	f240 510e 	movw	r1, #1294	; 0x50e
   176e0:	f00b fc96 	bl	23010 <assert_post_action>
		last_static_handle += svc->attr_count;
   176e4:	6850      	ldr	r0, [r2, #4]
   176e6:	4403      	add	r3, r0
   176e8:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   176ea:	3208      	adds	r2, #8
   176ec:	2001      	movs	r0, #1
   176ee:	e7ea      	b.n	176c6 <bt_gatt_init+0x46>
   176f0:	d3f8      	bcc.n	176e4 <bt_gatt_init+0x64>
   176f2:	b100      	cbz	r0, 176f6 <bt_gatt_init+0x76>
   176f4:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   176f6:	4b11      	ldr	r3, [pc, #68]	; (1773c <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   176f8:	4911      	ldr	r1, [pc, #68]	; (17740 <bt_gatt_init+0xc0>)
   176fa:	4812      	ldr	r0, [pc, #72]	; (17744 <bt_gatt_init+0xc4>)
   176fc:	2200      	movs	r2, #0
	list->tail = NULL;
   176fe:	e9c3 2200 	strd	r2, r2, [r3]
   17702:	f005 ffc1 	bl	1d688 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   17706:	480f      	ldr	r0, [pc, #60]	; (17744 <bt_gatt_init+0xc4>)
   17708:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1770c:	2300      	movs	r3, #0
   1770e:	f7fb fdc1 	bl	13294 <bt_long_wq_schedule>
}
   17712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   17716:	490c      	ldr	r1, [pc, #48]	; (17748 <bt_gatt_init+0xc8>)
   17718:	480c      	ldr	r0, [pc, #48]	; (1774c <bt_gatt_init+0xcc>)
   1771a:	f005 bfb5 	b.w	1d688 <k_work_init_delayable>
}
   1771e:	bd10      	pop	{r4, pc}
   17720:	20002b04 	.word	0x20002b04
   17724:	20002b00 	.word	0x20002b00
   17728:	20003b7c 	.word	0x20003b7c
   1772c:	0002594c 	.word	0x0002594c
   17730:	00025964 	.word	0x00025964
   17734:	00027d8b 	.word	0x00027d8b
   17738:	00026718 	.word	0x00026718
   1773c:	20002b08 	.word	0x20002b08
   17740:	00024813 	.word	0x00024813
   17744:	20001df0 	.word	0x20001df0
   17748:	00017d45 	.word	0x00017d45
   1774c:	20001e68 	.word	0x20001e68

00017750 <bt_gatt_attr_get_handle>:
{
   17750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   17754:	4603      	mov	r3, r0
   17756:	b378      	cbz	r0, 177b8 <bt_gatt_attr_get_handle+0x68>
	if (attr->handle) {
   17758:	8a00      	ldrh	r0, [r0, #16]
   1775a:	bb68      	cbnz	r0, 177b8 <bt_gatt_attr_get_handle+0x68>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1775c:	4918      	ldr	r1, [pc, #96]	; (177c0 <bt_gatt_attr_get_handle+0x70>)
   1775e:	f8df e064 	ldr.w	lr, [pc, #100]	; 177c4 <bt_gatt_attr_get_handle+0x74>
	uint16_t handle = 1;
   17762:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17764:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17768:	4571      	cmp	r1, lr
   1776a:	d924      	bls.n	177b6 <bt_gatt_attr_get_handle+0x66>
   1776c:	4916      	ldr	r1, [pc, #88]	; (177c8 <bt_gatt_attr_get_handle+0x78>)
   1776e:	4817      	ldr	r0, [pc, #92]	; (177cc <bt_gatt_attr_get_handle+0x7c>)
   17770:	f240 6265 	movw	r2, #1637	; 0x665
   17774:	f00b fc53 	bl	2301e <assert_print>
   17778:	4813      	ldr	r0, [pc, #76]	; (177c8 <bt_gatt_attr_get_handle+0x78>)
   1777a:	f240 6165 	movw	r1, #1637	; 0x665
   1777e:	f00b fc47 	bl	23010 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17782:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   17786:	42bb      	cmp	r3, r7
   17788:	d304      	bcc.n	17794 <bt_gatt_attr_get_handle+0x44>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1778a:	fb0c 7206 	mla	r2, ip, r6, r7
   1778e:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   17790:	4293      	cmp	r3, r2
   17792:	d90e      	bls.n	177b2 <bt_gatt_attr_get_handle+0x62>
			handle += static_svc->attr_count;
   17794:	4434      	add	r4, r6
   17796:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17798:	3108      	adds	r1, #8
   1779a:	4614      	mov	r4, r2
   1779c:	e7e4      	b.n	17768 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1779e:	fb0c 7805 	mla	r8, ip, r5, r7
   177a2:	4543      	cmp	r3, r8
   177a4:	d00a      	beq.n	177bc <bt_gatt_attr_get_handle+0x6c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   177a6:	3501      	adds	r5, #1
   177a8:	1962      	adds	r2, r4, r5
   177aa:	42b5      	cmp	r5, r6
   177ac:	b292      	uxth	r2, r2
   177ae:	d1f6      	bne.n	1779e <bt_gatt_attr_get_handle+0x4e>
   177b0:	e7f2      	b.n	17798 <bt_gatt_attr_get_handle+0x48>
   177b2:	2500      	movs	r5, #0
   177b4:	e7f8      	b.n	177a8 <bt_gatt_attr_get_handle+0x58>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   177b6:	d3e4      	bcc.n	17782 <bt_gatt_attr_get_handle+0x32>
}
   177b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   177bc:	4610      	mov	r0, r2
   177be:	e7fb      	b.n	177b8 <bt_gatt_attr_get_handle+0x68>
   177c0:	0002594c 	.word	0x0002594c
   177c4:	00025964 	.word	0x00025964
   177c8:	00027d8b 	.word	0x00027d8b
   177cc:	00026718 	.word	0x00026718

000177d0 <bt_gatt_foreach_attr_type>:
{
   177d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177d4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   177d8:	9100      	str	r1, [sp, #0]
   177da:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   177dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   177e0:	2d00      	cmp	r5, #0
   177e2:	bf08      	it	eq
   177e4:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   177e6:	4b29      	ldr	r3, [pc, #164]	; (1788c <bt_gatt_foreach_attr_type+0xbc>)
   177e8:	881b      	ldrh	r3, [r3, #0]
   177ea:	4283      	cmp	r3, r0
{
   177ec:	4607      	mov	r7, r0
   177ee:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   177f0:	d232      	bcs.n	17858 <bt_gatt_foreach_attr_type+0x88>
}
   177f2:	b003      	add	sp, #12
   177f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   177f8:	5889      	ldr	r1, [r1, r2]
   177fa:	9301      	str	r3, [sp, #4]
   177fc:	4640      	mov	r0, r8
   177fe:	f00b fedc 	bl	235ba <bt_uuid_cmp>
   17802:	9b01      	ldr	r3, [sp, #4]
   17804:	b190      	cbz	r0, 1782c <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17806:	3401      	adds	r4, #1
   17808:	f10a 0a01 	add.w	sl, sl, #1
   1780c:	b2a4      	uxth	r4, r4
   1780e:	6873      	ldr	r3, [r6, #4]
   17810:	4553      	cmp	r3, sl
   17812:	d92c      	bls.n	1786e <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   17814:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17816:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   17818:	429c      	cmp	r4, r3
   1781a:	d8ea      	bhi.n	177f2 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1781c:	42bc      	cmp	r4, r7
   1781e:	d3f2      	bcc.n	17806 <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17820:	fb0b f20a 	mul.w	r2, fp, sl
   17824:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17826:	f1b8 0f00 	cmp.w	r8, #0
   1782a:	d1e5      	bne.n	177f8 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   1782c:	f1b9 0f00 	cmp.w	r9, #0
   17830:	d10b      	bne.n	1784a <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   17832:	3d01      	subs	r5, #1
   17834:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   17836:	4618      	mov	r0, r3
   17838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1783a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1783c:	4621      	mov	r1, r4
   1783e:	4798      	blx	r3
	if (!*num_matches) {
   17840:	2d00      	cmp	r5, #0
   17842:	d0d6      	beq.n	177f2 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17844:	2800      	cmp	r0, #0
   17846:	d1de      	bne.n	17806 <bt_gatt_foreach_attr_type+0x36>
   17848:	e7d3      	b.n	177f2 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1784a:	68da      	ldr	r2, [r3, #12]
   1784c:	4591      	cmp	r9, r2
   1784e:	d1da      	bne.n	17806 <bt_gatt_foreach_attr_type+0x36>
   17850:	e7ef      	b.n	17832 <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17852:	f04f 0a00 	mov.w	sl, #0
   17856:	e7da      	b.n	1780e <bt_gatt_foreach_attr_type+0x3e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17858:	4e0d      	ldr	r6, [pc, #52]	; (17890 <bt_gatt_foreach_attr_type+0xc0>)
		uint16_t handle = 1;
   1785a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1785c:	f04f 0b14 	mov.w	fp, #20
   17860:	e006      	b.n	17870 <bt_gatt_foreach_attr_type+0xa0>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17862:	d2c6      	bcs.n	177f2 <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   17864:	6873      	ldr	r3, [r6, #4]
   17866:	4423      	add	r3, r4
   17868:	42bb      	cmp	r3, r7
   1786a:	d2f2      	bcs.n	17852 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   1786c:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1786e:	3608      	adds	r6, #8
   17870:	4b08      	ldr	r3, [pc, #32]	; (17894 <bt_gatt_foreach_attr_type+0xc4>)
   17872:	429e      	cmp	r6, r3
   17874:	d9f5      	bls.n	17862 <bt_gatt_foreach_attr_type+0x92>
   17876:	4908      	ldr	r1, [pc, #32]	; (17898 <bt_gatt_foreach_attr_type+0xc8>)
   17878:	4808      	ldr	r0, [pc, #32]	; (1789c <bt_gatt_foreach_attr_type+0xcc>)
   1787a:	f240 7229 	movw	r2, #1833	; 0x729
   1787e:	f00b fbce 	bl	2301e <assert_print>
   17882:	4805      	ldr	r0, [pc, #20]	; (17898 <bt_gatt_foreach_attr_type+0xc8>)
   17884:	f240 7129 	movw	r1, #1833	; 0x729
   17888:	f00b fbc2 	bl	23010 <assert_post_action>
   1788c:	20003b7c 	.word	0x20003b7c
   17890:	0002594c 	.word	0x0002594c
   17894:	00025964 	.word	0x00025964
   17898:	00027d8b 	.word	0x00027d8b
   1789c:	00026718 	.word	0x00026718

000178a0 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   178a0:	b510      	push	{r4, lr}
   178a2:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   178a4:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   178a6:	aa1c      	add	r2, sp, #112	; 0x70
   178a8:	4669      	mov	r1, sp
   178aa:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   178ac:	e9cd 3300 	strd	r3, r3, [sp]
   178b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   178b4:	f00b fd2e 	bl	23314 <tc_cmac_setup>
   178b8:	b928      	cbnz	r0, 178c6 <db_hash_gen.constprop.0+0x26>
		BT_ERR("Unable to setup AES CMAC");
   178ba:	4817      	ldr	r0, [pc, #92]	; (17918 <db_hash_gen.constprop.0+0x78>)
   178bc:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
   178be:	f00b fbbc 	bl	2303a <z_log_minimal_printk>
}
   178c2:	b048      	add	sp, #288	; 0x120
   178c4:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   178c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   178ca:	2001      	movs	r0, #1
   178cc:	4a13      	ldr	r2, [pc, #76]	; (1791c <db_hash_gen.constprop.0+0x7c>)
   178ce:	ab04      	add	r3, sp, #16
   178d0:	f00c ff94 	bl	247fc <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   178d4:	4812      	ldr	r0, [pc, #72]	; (17920 <db_hash_gen.constprop.0+0x80>)
   178d6:	a904      	add	r1, sp, #16
   178d8:	f00b fdb1 	bl	2343e <tc_cmac_final>
   178dc:	b910      	cbnz	r0, 178e4 <db_hash_gen.constprop.0+0x44>
		BT_ERR("Unable to calculate hash");
   178de:	4811      	ldr	r0, [pc, #68]	; (17924 <db_hash_gen.constprop.0+0x84>)
   178e0:	2145      	movs	r1, #69	; 0x45
   178e2:	e7ec      	b.n	178be <db_hash_gen.constprop.0+0x1e>
   178e4:	4b0e      	ldr	r3, [pc, #56]	; (17920 <db_hash_gen.constprop.0+0x80>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   178e6:	2208      	movs	r2, #8
   178e8:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   178ec:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   178ee:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   178f2:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   178f6:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   178f8:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   178fa:	d1f7      	bne.n	178ec <db_hash_gen.constprop.0+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   178fc:	f3bf 8f5b 	dmb	ish
   17900:	4b09      	ldr	r3, [pc, #36]	; (17928 <db_hash_gen.constprop.0+0x88>)
   17902:	e853 1f00 	ldrex	r1, [r3]
   17906:	f041 0104 	orr.w	r1, r1, #4
   1790a:	e843 1200 	strex	r2, r1, [r3]
   1790e:	2a00      	cmp	r2, #0
   17910:	d1f7      	bne.n	17902 <db_hash_gen.constprop.0+0x62>
   17912:	f3bf 8f5b 	dmb	ish
   17916:	e7d4      	b.n	178c2 <db_hash_gen.constprop.0+0x22>
   17918:	00027dbb 	.word	0x00027dbb
   1791c:	00024485 	.word	0x00024485
   17920:	20001de0 	.word	0x20001de0
   17924:	00027dd9 	.word	0x00027dd9
   17928:	20001e98 	.word	0x20001e98

0001792c <db_hash_read>:
{
   1792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1792e:	491d      	ldr	r1, [pc, #116]	; (179a4 <db_hash_read+0x78>)
{
   17930:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   17934:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17936:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1793a:	461f      	mov	r7, r3
   1793c:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1793e:	f005 ffd9 	bl	1d8f4 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17942:	f3bf 8f5b 	dmb	ish
   17946:	4b18      	ldr	r3, [pc, #96]	; (179a8 <db_hash_read+0x7c>)
   17948:	681b      	ldr	r3, [r3, #0]
   1794a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1794e:	0759      	lsls	r1, r3, #29
   17950:	d401      	bmi.n	17956 <db_hash_read+0x2a>
		db_hash_gen(true);
   17952:	f7ff ffa5 	bl	178a0 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   17956:	4620      	mov	r0, r4
   17958:	f7ff fca4 	bl	172a4 <find_cf_cfg>
	if (cfg &&
   1795c:	4601      	mov	r1, r0
   1795e:	b170      	cbz	r0, 1797e <db_hash_read+0x52>
   17960:	7a03      	ldrb	r3, [r0, #8]
   17962:	07da      	lsls	r2, r3, #31
   17964:	d50b      	bpl.n	1797e <db_hash_read+0x52>
   17966:	f3bf 8f5b 	dmb	ish
   1796a:	68cb      	ldr	r3, [r1, #12]
   1796c:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   17970:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   17972:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   17976:	d402      	bmi.n	1797e <db_hash_read+0x52>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   17978:	2101      	movs	r1, #1
   1797a:	f00c fde1 	bl	24540 <atomic_set_bit>
	if (offset > value_len) {
   1797e:	2e10      	cmp	r6, #16
   17980:	d80c      	bhi.n	1799c <db_hash_read+0x70>
	len = MIN(buf_len, value_len - offset);
   17982:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   17986:	4909      	ldr	r1, [pc, #36]	; (179ac <db_hash_read+0x80>)
	len = MIN(buf_len, value_len - offset);
   17988:	42bc      	cmp	r4, r7
   1798a:	bfa8      	it	ge
   1798c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1798e:	4622      	mov	r2, r4
   17990:	4431      	add	r1, r6
   17992:	4628      	mov	r0, r5
   17994:	f00b fde8 	bl	23568 <memcpy>
}
   17998:	4620      	mov	r0, r4
   1799a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1799c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   179a0:	e7fa      	b.n	17998 <db_hash_read+0x6c>
   179a2:	bf00      	nop
   179a4:	20001e20 	.word	0x20001e20
   179a8:	20001e98 	.word	0x20001e98
   179ac:	20001de0 	.word	0x20001de0

000179b0 <bt_gatt_attr_next>:
{
   179b0:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   179b2:	2300      	movs	r3, #0
   179b4:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   179b6:	f7ff fecb 	bl	17750 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   179ba:	1c41      	adds	r1, r0, #1
   179bc:	b289      	uxth	r1, r1
   179be:	4608      	mov	r0, r1
   179c0:	4a03      	ldr	r2, [pc, #12]	; (179d0 <bt_gatt_attr_next+0x20>)
   179c2:	ab01      	add	r3, sp, #4
   179c4:	f00c ff1a 	bl	247fc <bt_gatt_foreach_attr>
}
   179c8:	9801      	ldr	r0, [sp, #4]
   179ca:	b003      	add	sp, #12
   179cc:	f85d fb04 	ldr.w	pc, [sp], #4
   179d0:	0002441f 	.word	0x0002441f

000179d4 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   179d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   179d8:	460c      	mov	r4, r1
   179da:	4617      	mov	r7, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   179dc:	4605      	mov	r5, r0
   179de:	b950      	cbnz	r0, 179f6 <bt_gatt_is_subscribed+0x22>
   179e0:	4955      	ldr	r1, [pc, #340]	; (17b38 <bt_gatt_is_subscribed+0x164>)
   179e2:	4856      	ldr	r0, [pc, #344]	; (17b3c <bt_gatt_is_subscribed+0x168>)
   179e4:	f640 424b 	movw	r2, #3147	; 0xc4b
   179e8:	f00b fb19 	bl	2301e <assert_print>
   179ec:	f640 414b 	movw	r1, #3147	; 0xc4b
	__ASSERT(attr, "invalid parameter\n");
   179f0:	4851      	ldr	r0, [pc, #324]	; (17b38 <bt_gatt_is_subscribed+0x164>)
   179f2:	f00b fb0d 	bl	23010 <assert_post_action>
   179f6:	b941      	cbnz	r1, 17a0a <bt_gatt_is_subscribed+0x36>
   179f8:	494f      	ldr	r1, [pc, #316]	; (17b38 <bt_gatt_is_subscribed+0x164>)
   179fa:	4850      	ldr	r0, [pc, #320]	; (17b3c <bt_gatt_is_subscribed+0x168>)
   179fc:	f640 424c 	movw	r2, #3148	; 0xc4c
   17a00:	f00b fb0d 	bl	2301e <assert_print>
   17a04:	f640 414c 	movw	r1, #3148	; 0xc4c
   17a08:	e7f2      	b.n	179f0 <bt_gatt_is_subscribed+0x1c>

	if (conn->state != BT_CONN_CONNECTED) {
   17a0a:	7a83      	ldrb	r3, [r0, #10]
   17a0c:	2b07      	cmp	r3, #7
   17a0e:	d110      	bne.n	17a32 <bt_gatt_is_subscribed+0x5e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   17a10:	2300      	movs	r3, #0
   17a12:	f88d 300c 	strb.w	r3, [sp, #12]
   17a16:	6820      	ldr	r0, [r4, #0]
   17a18:	f642 0303 	movw	r3, #10243	; 0x2803
   17a1c:	a903      	add	r1, sp, #12
   17a1e:	f8ad 300e 	strh.w	r3, [sp, #14]
   17a22:	f00b fdca 	bl	235ba <bt_uuid_cmp>
   17a26:	b9b0      	cbnz	r0, 17a56 <bt_gatt_is_subscribed+0x82>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   17a28:	68e3      	ldr	r3, [r4, #12]
   17a2a:	799b      	ldrb	r3, [r3, #6]
   17a2c:	f013 0f30 	tst.w	r3, #48	; 0x30
   17a30:	d103      	bne.n	17a3a <bt_gatt_is_subscribed+0x66>
		return false;
   17a32:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   17a34:	b004      	add	sp, #16
   17a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   17a3a:	4620      	mov	r0, r4
   17a3c:	f7ff ffb8 	bl	179b0 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17a40:	4604      	mov	r4, r0
   17a42:	b940      	cbnz	r0, 17a56 <bt_gatt_is_subscribed+0x82>
   17a44:	493c      	ldr	r1, [pc, #240]	; (17b38 <bt_gatt_is_subscribed+0x164>)
   17a46:	483d      	ldr	r0, [pc, #244]	; (17b3c <bt_gatt_is_subscribed+0x168>)
   17a48:	f640 425d 	movw	r2, #3165	; 0xc5d
   17a4c:	f00b fae7 	bl	2301e <assert_print>
   17a50:	f640 415d 	movw	r1, #3165	; 0xc5d
   17a54:	e7cc      	b.n	179f0 <bt_gatt_is_subscribed+0x1c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17a56:	2300      	movs	r3, #0
   17a58:	6820      	ldr	r0, [r4, #0]
   17a5a:	f88d 300c 	strb.w	r3, [sp, #12]
   17a5e:	a903      	add	r1, sp, #12
   17a60:	f642 1302 	movw	r3, #10498	; 0x2902
   17a64:	f8ad 300e 	strh.w	r3, [sp, #14]
   17a68:	f00b fda7 	bl	235ba <bt_uuid_cmp>
   17a6c:	b168      	cbz	r0, 17a8a <bt_gatt_is_subscribed+0xb6>
		attr = bt_gatt_attr_next(attr);
   17a6e:	4620      	mov	r0, r4
   17a70:	f7ff ff9e 	bl	179b0 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17a74:	4604      	mov	r4, r0
   17a76:	b940      	cbnz	r0, 17a8a <bt_gatt_is_subscribed+0xb6>
   17a78:	492f      	ldr	r1, [pc, #188]	; (17b38 <bt_gatt_is_subscribed+0x164>)
   17a7a:	4830      	ldr	r0, [pc, #192]	; (17b3c <bt_gatt_is_subscribed+0x168>)
   17a7c:	f640 4263 	movw	r2, #3171	; 0xc63
   17a80:	f00b facd 	bl	2301e <assert_print>
   17a84:	f640 4163 	movw	r1, #3171	; 0xc63
   17a88:	e7b2      	b.n	179f0 <bt_gatt_is_subscribed+0x1c>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17a8a:	2600      	movs	r6, #0
   17a8c:	f642 1802 	movw	r8, #10498	; 0x2902
   17a90:	6820      	ldr	r0, [r4, #0]
   17a92:	f88d 6000 	strb.w	r6, [sp]
   17a96:	4669      	mov	r1, sp
   17a98:	f8ad 8002 	strh.w	r8, [sp, #2]
   17a9c:	f00b fd8d 	bl	235ba <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17aa0:	b9f0      	cbnz	r0, 17ae0 <bt_gatt_is_subscribed+0x10c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17aa2:	2300      	movs	r3, #0
   17aa4:	6820      	ldr	r0, [r4, #0]
   17aa6:	f88d 300c 	strb.w	r3, [sp, #12]
   17aaa:	a903      	add	r1, sp, #12
   17aac:	f642 1302 	movw	r3, #10498	; 0x2902
   17ab0:	f8ad 300e 	strh.w	r3, [sp, #14]
   17ab4:	f00b fd81 	bl	235ba <bt_uuid_cmp>
   17ab8:	2800      	cmp	r0, #0
   17aba:	d1ba      	bne.n	17a32 <bt_gatt_is_subscribed+0x5e>
	ccc = attr->user_data;
   17abc:	68e6      	ldr	r6, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   17abe:	1c74      	adds	r4, r6, #1
   17ac0:	3651      	adds	r6, #81	; 0x51
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   17ac2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   17ac6:	4622      	mov	r2, r4
   17ac8:	4628      	mov	r0, r5
   17aca:	f00b fffa 	bl	23ac2 <bt_conn_is_peer_addr_le>
   17ace:	b118      	cbz	r0, 17ad8 <bt_gatt_is_subscribed+0x104>
   17ad0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   17ad4:	421f      	tst	r7, r3
   17ad6:	d1ad      	bne.n	17a34 <bt_gatt_is_subscribed+0x60>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   17ad8:	340a      	adds	r4, #10
   17ada:	42b4      	cmp	r4, r6
   17adc:	d1f1      	bne.n	17ac2 <bt_gatt_is_subscribed+0xee>
   17ade:	e7a8      	b.n	17a32 <bt_gatt_is_subscribed+0x5e>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17ae0:	6820      	ldr	r0, [r4, #0]
   17ae2:	f88d 6004 	strb.w	r6, [sp, #4]
   17ae6:	f642 0303 	movw	r3, #10243	; 0x2803
   17aea:	a901      	add	r1, sp, #4
   17aec:	f8ad 3006 	strh.w	r3, [sp, #6]
   17af0:	f00b fd63 	bl	235ba <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17af4:	2800      	cmp	r0, #0
   17af6:	d0d4      	beq.n	17aa2 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17af8:	6820      	ldr	r0, [r4, #0]
   17afa:	f88d 6008 	strb.w	r6, [sp, #8]
   17afe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17b02:	a902      	add	r1, sp, #8
   17b04:	f8ad 300a 	strh.w	r3, [sp, #10]
   17b08:	f00b fd57 	bl	235ba <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17b0c:	2800      	cmp	r0, #0
   17b0e:	d0c8      	beq.n	17aa2 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17b10:	6820      	ldr	r0, [r4, #0]
   17b12:	f88d 600c 	strb.w	r6, [sp, #12]
   17b16:	f642 0301 	movw	r3, #10241	; 0x2801
   17b1a:	a903      	add	r1, sp, #12
   17b1c:	f8ad 300e 	strh.w	r3, [sp, #14]
   17b20:	f00b fd4b 	bl	235ba <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17b24:	2800      	cmp	r0, #0
   17b26:	d0bc      	beq.n	17aa2 <bt_gatt_is_subscribed+0xce>
		attr = bt_gatt_attr_next(attr);
   17b28:	4620      	mov	r0, r4
   17b2a:	f7ff ff41 	bl	179b0 <bt_gatt_attr_next>
		if (!attr) {
   17b2e:	4604      	mov	r4, r0
   17b30:	2800      	cmp	r0, #0
   17b32:	d1ad      	bne.n	17a90 <bt_gatt_is_subscribed+0xbc>
   17b34:	e77d      	b.n	17a32 <bt_gatt_is_subscribed+0x5e>
   17b36:	bf00      	nop
   17b38:	00027d8b 	.word	0x00027d8b
   17b3c:	00026718 	.word	0x00026718

00017b40 <gatt_indicate>:
{
   17b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17b44:	4615      	mov	r5, r2
   17b46:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17b48:	2294      	movs	r2, #148	; 0x94
   17b4a:	6869      	ldr	r1, [r5, #4]
{
   17b4c:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17b4e:	f00c fe62 	bl	24816 <bt_gatt_check_perm>
   17b52:	4680      	mov	r8, r0
   17b54:	b140      	cbz	r0, 17b68 <gatt_indicate+0x28>
		BT_WARN("Link is not encrypted");
   17b56:	482b      	ldr	r0, [pc, #172]	; (17c04 <gatt_indicate+0xc4>)
   17b58:	2157      	movs	r1, #87	; 0x57
   17b5a:	f00b fa6e 	bl	2303a <z_log_minimal_printk>
		return -EPERM;
   17b5e:	f04f 35ff 	mov.w	r5, #4294967295
}
   17b62:	4628      	mov	r0, r5
   17b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   17b68:	6869      	ldr	r1, [r5, #4]
   17b6a:	2202      	movs	r2, #2
   17b6c:	4630      	mov	r0, r6
   17b6e:	f7ff ff31 	bl	179d4 <bt_gatt_is_subscribed>
   17b72:	b930      	cbnz	r0, 17b82 <gatt_indicate+0x42>
			BT_WARN("Device is not subscribed to characteristic");
   17b74:	4824      	ldr	r0, [pc, #144]	; (17c08 <gatt_indicate+0xc8>)
   17b76:	2157      	movs	r1, #87	; 0x57
   17b78:	f00b fa5f 	bl	2303a <z_log_minimal_printk>
			return -EINVAL;
   17b7c:	f06f 0515 	mvn.w	r5, #21
   17b80:	e7ef      	b.n	17b62 <gatt_indicate+0x22>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17b82:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   17b86:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   17b88:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17b8a:	f7ff fa19 	bl	16fc0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   17b8e:	3702      	adds	r7, #2
	if (!req) {
   17b90:	4604      	mov	r4, r0
   17b92:	b180      	cbz	r0, 17bb6 <gatt_indicate+0x76>
	req->func = func;
   17b94:	4b1d      	ldr	r3, [pc, #116]	; (17c0c <gatt_indicate+0xcc>)
   17b96:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   17b98:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17b9a:	463a      	mov	r2, r7
   17b9c:	211d      	movs	r1, #29
   17b9e:	4630      	mov	r0, r6
   17ba0:	f7fe ff4c 	bl	16a3c <bt_att_create_pdu>
	if (!buf) {
   17ba4:	4607      	mov	r7, r0
   17ba6:	b948      	cbnz	r0, 17bbc <gatt_indicate+0x7c>
		BT_WARN("No buffer available to send indication");
   17ba8:	4819      	ldr	r0, [pc, #100]	; (17c10 <gatt_indicate+0xd0>)
   17baa:	2157      	movs	r1, #87	; 0x57
   17bac:	f00b fa45 	bl	2303a <z_log_minimal_printk>
		bt_att_req_free(req);
   17bb0:	4620      	mov	r0, r4
   17bb2:	f7ff fa27 	bl	17004 <bt_att_req_free>
		return -ENOMEM;
   17bb6:	f06f 050b 	mvn.w	r5, #11
   17bba:	e7d2      	b.n	17b62 <gatt_indicate+0x22>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   17bbc:	2301      	movs	r3, #1
   17bbe:	4642      	mov	r2, r8
   17bc0:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   17bc2:	f107 0a08 	add.w	sl, r7, #8
   17bc6:	f00c fc23 	bl	24410 <bt_att_set_tx_meta_data>
   17bca:	2102      	movs	r1, #2
   17bcc:	4650      	mov	r0, sl
   17bce:	f000 fe93 	bl	188f8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   17bd2:	4680      	mov	r8, r0
   17bd4:	4650      	mov	r0, sl
   17bd6:	f828 9b02 	strh.w	r9, [r8], #2
   17bda:	8aa9      	ldrh	r1, [r5, #20]
   17bdc:	f000 fe8c 	bl	188f8 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   17be0:	8aaa      	ldrh	r2, [r5, #20]
   17be2:	6929      	ldr	r1, [r5, #16]
   17be4:	4640      	mov	r0, r8
   17be6:	f00b fcbf 	bl	23568 <memcpy>
	req->buf = buf;
   17bea:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   17bec:	4621      	mov	r1, r4
   17bee:	4630      	mov	r0, r6
   17bf0:	f7ff fb28 	bl	17244 <bt_att_req_send>
	if (err) {
   17bf4:	4605      	mov	r5, r0
   17bf6:	2800      	cmp	r0, #0
   17bf8:	d0b3      	beq.n	17b62 <gatt_indicate+0x22>
		bt_att_req_free(req);
   17bfa:	4620      	mov	r0, r4
   17bfc:	f7ff fa02 	bl	17004 <bt_att_req_free>
   17c00:	e7af      	b.n	17b62 <gatt_indicate+0x22>
   17c02:	bf00      	nop
   17c04:	00027df7 	.word	0x00027df7
   17c08:	00027e12 	.word	0x00027e12
   17c0c:	00024457 	.word	0x00024457
   17c10:	00027e42 	.word	0x00027e42

00017c14 <bt_gatt_indicate>:
{
   17c14:	b530      	push	{r4, r5, lr}
   17c16:	4605      	mov	r5, r0
   17c18:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   17c1a:	460c      	mov	r4, r1
   17c1c:	b951      	cbnz	r1, 17c34 <bt_gatt_indicate+0x20>
   17c1e:	4944      	ldr	r1, [pc, #272]	; (17d30 <bt_gatt_indicate+0x11c>)
   17c20:	4844      	ldr	r0, [pc, #272]	; (17d34 <bt_gatt_indicate+0x120>)
   17c22:	f640 320b 	movw	r2, #2827	; 0xb0b
   17c26:	f00b f9fa 	bl	2301e <assert_print>
   17c2a:	f640 310b 	movw	r1, #2827	; 0xb0b
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   17c2e:	4840      	ldr	r0, [pc, #256]	; (17d30 <bt_gatt_indicate+0x11c>)
   17c30:	f00b f9ee 	bl	23010 <assert_post_action>
   17c34:	684b      	ldr	r3, [r1, #4]
   17c36:	b953      	cbnz	r3, 17c4e <bt_gatt_indicate+0x3a>
   17c38:	680b      	ldr	r3, [r1, #0]
   17c3a:	b943      	cbnz	r3, 17c4e <bt_gatt_indicate+0x3a>
   17c3c:	493c      	ldr	r1, [pc, #240]	; (17d30 <bt_gatt_indicate+0x11c>)
   17c3e:	483d      	ldr	r0, [pc, #244]	; (17d34 <bt_gatt_indicate+0x120>)
   17c40:	f640 320c 	movw	r2, #2828	; 0xb0c
   17c44:	f00b f9eb 	bl	2301e <assert_print>
   17c48:	f640 310c 	movw	r1, #2828	; 0xb0c
   17c4c:	e7ef      	b.n	17c2e <bt_gatt_indicate+0x1a>
   17c4e:	4b3a      	ldr	r3, [pc, #232]	; (17d38 <bt_gatt_indicate+0x124>)
   17c50:	f3bf 8f5b 	dmb	ish
   17c54:	681b      	ldr	r3, [r3, #0]
   17c56:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17c5a:	075a      	lsls	r2, r3, #29
   17c5c:	d561      	bpl.n	17d22 <bt_gatt_indicate+0x10e>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17c5e:	b115      	cbz	r5, 17c66 <bt_gatt_indicate+0x52>
   17c60:	7aab      	ldrb	r3, [r5, #10]
   17c62:	2b07      	cmp	r3, #7
   17c64:	d160      	bne.n	17d28 <bt_gatt_indicate+0x114>
	data.attr = params->attr;
   17c66:	6860      	ldr	r0, [r4, #4]
   17c68:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17c6a:	f7ff fd71 	bl	17750 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   17c6e:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17c70:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17c74:	b33a      	cbz	r2, 17cc6 <bt_gatt_indicate+0xb2>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17c76:	a905      	add	r1, sp, #20
   17c78:	9102      	str	r1, [sp, #8]
   17c7a:	4930      	ldr	r1, [pc, #192]	; (17d3c <bt_gatt_indicate+0x128>)
   17c7c:	9101      	str	r1, [sp, #4]
   17c7e:	2101      	movs	r1, #1
	found->attr = NULL;
   17c80:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17c82:	9100      	str	r1, [sp, #0]
   17c84:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17c88:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17c8a:	f7ff fda1 	bl	177d0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17c8e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17c90:	b91b      	cbnz	r3, 17c9a <bt_gatt_indicate+0x86>
			return -ENOENT;
   17c92:	f06f 0001 	mvn.w	r0, #1
}
   17c96:	b00b      	add	sp, #44	; 0x2c
   17c98:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17c9a:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17c9c:	9b05      	ldr	r3, [sp, #20]
   17c9e:	6818      	ldr	r0, [r3, #0]
   17ca0:	2300      	movs	r3, #0
   17ca2:	f88d 3010 	strb.w	r3, [sp, #16]
   17ca6:	a904      	add	r1, sp, #16
   17ca8:	f642 0303 	movw	r3, #10243	; 0x2803
   17cac:	f8ad 3012 	strh.w	r3, [sp, #18]
   17cb0:	f00b fc83 	bl	235ba <bt_uuid_cmp>
   17cb4:	b970      	cbnz	r0, 17cd4 <bt_gatt_indicate+0xc0>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17cb6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   17cb8:	68c3      	ldr	r3, [r0, #12]
   17cba:	799b      	ldrb	r3, [r3, #6]
   17cbc:	069b      	lsls	r3, r3, #26
   17cbe:	d405      	bmi.n	17ccc <bt_gatt_indicate+0xb8>
			return -EINVAL;
   17cc0:	f06f 0015 	mvn.w	r0, #21
   17cc4:	e7e7      	b.n	17c96 <bt_gatt_indicate+0x82>
		if (!data.handle) {
   17cc6:	2800      	cmp	r0, #0
   17cc8:	d1e8      	bne.n	17c9c <bt_gatt_indicate+0x88>
   17cca:	e7e2      	b.n	17c92 <bt_gatt_indicate+0x7e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17ccc:	f00c fd48 	bl	24760 <bt_gatt_attr_value_handle>
   17cd0:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   17cd4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   17cd8:	b13d      	cbz	r5, 17cea <bt_gatt_indicate+0xd6>
		params->_ref = 1;
   17cda:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   17cdc:	4601      	mov	r1, r0
		params->_ref = 1;
   17cde:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   17ce0:	4622      	mov	r2, r4
   17ce2:	4628      	mov	r0, r5
   17ce4:	f7ff ff2c 	bl	17b40 <gatt_indicate>
   17ce8:	e7d5      	b.n	17c96 <bt_gatt_indicate+0x82>
	data.err = -ENOTCONN;
   17cea:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   17cee:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   17cf0:	2302      	movs	r3, #2
   17cf2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17cf6:	f642 1302 	movw	r3, #10498	; 0x2902
   17cfa:	f8ad 3012 	strh.w	r3, [sp, #18]
   17cfe:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   17d00:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17d02:	9302      	str	r3, [sp, #8]
   17d04:	4b0e      	ldr	r3, [pc, #56]	; (17d40 <bt_gatt_indicate+0x12c>)
   17d06:	9301      	str	r3, [sp, #4]
   17d08:	2301      	movs	r3, #1
   17d0a:	9300      	str	r3, [sp, #0]
   17d0c:	aa04      	add	r2, sp, #16
   17d0e:	462b      	mov	r3, r5
   17d10:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   17d14:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17d16:	f88d 5010 	strb.w	r5, [sp, #16]
   17d1a:	f7ff fd59 	bl	177d0 <bt_gatt_foreach_attr_type>
	return data.err;
   17d1e:	9807      	ldr	r0, [sp, #28]
   17d20:	e7b9      	b.n	17c96 <bt_gatt_indicate+0x82>
		return -EAGAIN;
   17d22:	f06f 000a 	mvn.w	r0, #10
   17d26:	e7b6      	b.n	17c96 <bt_gatt_indicate+0x82>
		return -ENOTCONN;
   17d28:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17d2c:	e7b3      	b.n	17c96 <bt_gatt_indicate+0x82>
   17d2e:	bf00      	nop
   17d30:	00027d8b 	.word	0x00027d8b
   17d34:	00026718 	.word	0x00026718
   17d38:	20000444 	.word	0x20000444
   17d3c:	0002447d 	.word	0x0002447d
   17d40:	0001807d 	.word	0x0001807d

00017d44 <sc_process>:
{
   17d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17d46:	f3bf 8f5b 	dmb	ish
   17d4a:	6b02      	ldr	r2, [r0, #48]	; 0x30
   17d4c:	f3bf 8f5b 	dmb	ish
   17d50:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   17d52:	f1a0 0120 	sub.w	r1, r0, #32
   17d56:	f100 0430 	add.w	r4, r0, #48	; 0x30
   17d5a:	f3c2 0040 	ubfx	r0, r2, #1, #1
   17d5e:	0792      	lsls	r2, r2, #30
   17d60:	d50a      	bpl.n	17d78 <sc_process+0x34>
   17d62:	4919      	ldr	r1, [pc, #100]	; (17dc8 <sc_process+0x84>)
   17d64:	4819      	ldr	r0, [pc, #100]	; (17dcc <sc_process+0x88>)
   17d66:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
   17d6a:	f00b f958 	bl	2301e <assert_print>
   17d6e:	4816      	ldr	r0, [pc, #88]	; (17dc8 <sc_process+0x84>)
   17d70:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   17d74:	f00b f94c 	bl	23010 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   17d78:	f853 2c08 	ldr.w	r2, [r3, #-8]
   17d7c:	9201      	str	r2, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17d7e:	f3bf 8f5b 	dmb	ish
   17d82:	e854 2f00 	ldrex	r2, [r4]
   17d86:	f022 0201 	bic.w	r2, r2, #1
   17d8a:	e844 2500 	strex	r5, r2, [r4]
   17d8e:	2d00      	cmp	r5, #0
   17d90:	d1f7      	bne.n	17d82 <sc_process+0x3e>
   17d92:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17d96:	4a0e      	ldr	r2, [pc, #56]	; (17dd0 <sc_process+0x8c>)
   17d98:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   17d9c:	4a0d      	ldr	r2, [pc, #52]	; (17dd4 <sc_process+0x90>)
   17d9e:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   17da2:	aa01      	add	r2, sp, #4
   17da4:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   17da8:	2204      	movs	r2, #4
	sc->start = 0U;
   17daa:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   17dae:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   17db2:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17db6:	f7ff ff2d 	bl	17c14 <bt_gatt_indicate>
   17dba:	b918      	cbnz	r0, 17dc4 <sc_process+0x80>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   17dbc:	2101      	movs	r1, #1
   17dbe:	4620      	mov	r0, r4
   17dc0:	f00c fbbe 	bl	24540 <atomic_set_bit>
}
   17dc4:	b003      	add	sp, #12
   17dc6:	bd30      	pop	{r4, r5, pc}
   17dc8:	00027d8b 	.word	0x00027d8b
   17dcc:	00026718 	.word	0x00026718
   17dd0:	00025de8 	.word	0x00025de8
   17dd4:	00017621 	.word	0x00017621

00017dd8 <update_ccc>:
{
   17dd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ddc:	4b2d      	ldr	r3, [pc, #180]	; (17e94 <update_ccc+0xbc>)
	struct bt_conn *conn = data->conn;
   17dde:	6816      	ldr	r6, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   17de0:	6882      	ldr	r2, [r0, #8]
   17de2:	429a      	cmp	r2, r3
{
   17de4:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17de6:	d150      	bne.n	17e8a <update_ccc+0xb2>
	ccc = attr->user_data;
   17de8:	68c7      	ldr	r7, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17dea:	1c7d      	adds	r5, r7, #1
   17dec:	f107 0851 	add.w	r8, r7, #81	; 0x51
		if (!cfg->value ||
   17df0:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   17df4:	b19b      	cbz	r3, 17e1e <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17df6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   17dfa:	462a      	mov	r2, r5
   17dfc:	4630      	mov	r0, r6
   17dfe:	f00b fe60 	bl	23ac2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17e02:	b160      	cbz	r0, 17e1e <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   17e04:	f44f 7295 	mov.w	r2, #298	; 0x12a
   17e08:	4621      	mov	r1, r4
   17e0a:	4630      	mov	r0, r6
   17e0c:	f00c fd03 	bl	24816 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17e10:	2803      	cmp	r0, #3
   17e12:	d108      	bne.n	17e26 <update_ccc+0x4e>
				BT_WARN("CCC %p not writable", attr);
   17e14:	4820      	ldr	r0, [pc, #128]	; (17e98 <update_ccc+0xc0>)
   17e16:	4622      	mov	r2, r4
   17e18:	2157      	movs	r1, #87	; 0x57
   17e1a:	f00b f90e 	bl	2303a <z_log_minimal_printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17e1e:	350a      	adds	r5, #10
   17e20:	4545      	cmp	r5, r8
   17e22:	d1e5      	bne.n	17df0 <update_ccc+0x18>
   17e24:	e031      	b.n	17e8a <update_ccc+0xb2>
		gatt_ccc_changed(attr, ccc);
   17e26:	4639      	mov	r1, r7
   17e28:	4620      	mov	r0, r4
   17e2a:	f00c fafb 	bl	24424 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17e2e:	4b1b      	ldr	r3, [pc, #108]	; (17e9c <update_ccc+0xc4>)
   17e30:	429f      	cmp	r7, r3
   17e32:	d12a      	bne.n	17e8a <update_ccc+0xb2>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17e34:	7a30      	ldrb	r0, [r6, #8]
   17e36:	f106 0190 	add.w	r1, r6, #144	; 0x90
   17e3a:	f7ff fa55 	bl	172e8 <find_sc_cfg>
	if (!cfg) {
   17e3e:	b320      	cbz	r0, 17e8a <update_ccc+0xb2>
	if (!(cfg->data.start || cfg->data.end)) {
   17e40:	8902      	ldrh	r2, [r0, #8]
   17e42:	8943      	ldrh	r3, [r0, #10]
   17e44:	ea52 0103 	orrs.w	r1, r2, r3
   17e48:	d01f      	beq.n	17e8a <update_ccc+0xb2>
	index = bt_conn_index(conn);
   17e4a:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17e4c:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   17e50:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   17e54:	f7fd fd8a 	bl	1596c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17e58:	4911      	ldr	r1, [pc, #68]	; (17ea0 <update_ccc+0xc8>)
   17e5a:	4a12      	ldr	r2, [pc, #72]	; (17ea4 <update_ccc+0xcc>)
   17e5c:	2318      	movs	r3, #24
   17e5e:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17e62:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17e64:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17e66:	4a10      	ldr	r2, [pc, #64]	; (17ea8 <update_ccc+0xd0>)
   17e68:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   17e6a:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17e6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   17e70:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   17e72:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17e74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   17e78:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17e7a:	4630      	mov	r0, r6
   17e7c:	f7ff feca 	bl	17c14 <bt_gatt_indicate>
   17e80:	b118      	cbz	r0, 17e8a <update_ccc+0xb2>
		BT_ERR("SC restore indication failed");
   17e82:	480a      	ldr	r0, [pc, #40]	; (17eac <update_ccc+0xd4>)
   17e84:	2145      	movs	r1, #69	; 0x45
   17e86:	f00b f8d8 	bl	2303a <z_log_minimal_printk>
}
   17e8a:	2001      	movs	r0, #1
   17e8c:	b002      	add	sp, #8
   17e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e92:	bf00      	nop
   17e94:	00017359 	.word	0x00017359
   17e98:	00027e6e 	.word	0x00027e6e
   17e9c:	200006e8 	.word	0x200006e8
   17ea0:	20002a20 	.word	0x20002a20
   17ea4:	00025de8 	.word	0x00025de8
   17ea8:	0002455d 	.word	0x0002455d
   17eac:	00027e87 	.word	0x00027e87

00017eb0 <gatt_notify>:
{
   17eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17eb4:	4614      	mov	r4, r2
   17eb6:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17eb8:	2294      	movs	r2, #148	; 0x94
   17eba:	6861      	ldr	r1, [r4, #4]
{
   17ebc:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17ebe:	f00c fcaa 	bl	24816 <bt_gatt_check_perm>
   17ec2:	b138      	cbz	r0, 17ed4 <gatt_notify+0x24>
		BT_WARN("Link is not encrypted");
   17ec4:	4820      	ldr	r0, [pc, #128]	; (17f48 <gatt_notify+0x98>)
   17ec6:	2157      	movs	r1, #87	; 0x57
   17ec8:	f00b f8b7 	bl	2303a <z_log_minimal_printk>
		return -EPERM;
   17ecc:	f04f 30ff 	mov.w	r0, #4294967295
}
   17ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   17ed4:	6861      	ldr	r1, [r4, #4]
   17ed6:	2201      	movs	r2, #1
   17ed8:	4630      	mov	r0, r6
   17eda:	f7ff fd7b 	bl	179d4 <bt_gatt_is_subscribed>
   17ede:	b930      	cbnz	r0, 17eee <gatt_notify+0x3e>
			BT_WARN("Device is not subscribed to characteristic");
   17ee0:	481a      	ldr	r0, [pc, #104]	; (17f4c <gatt_notify+0x9c>)
   17ee2:	2157      	movs	r1, #87	; 0x57
   17ee4:	f00b f8a9 	bl	2303a <z_log_minimal_printk>
			return -EINVAL;
   17ee8:	f06f 0015 	mvn.w	r0, #21
   17eec:	e7f0      	b.n	17ed0 <gatt_notify+0x20>
				sizeof(*nfy) + params->len);
   17eee:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   17ef0:	211b      	movs	r1, #27
   17ef2:	3202      	adds	r2, #2
   17ef4:	4630      	mov	r0, r6
   17ef6:	f7fe fda1 	bl	16a3c <bt_att_create_pdu>
	if (!buf) {
   17efa:	4605      	mov	r5, r0
   17efc:	b930      	cbnz	r0, 17f0c <gatt_notify+0x5c>
		BT_WARN("No buffer available to send notification");
   17efe:	4814      	ldr	r0, [pc, #80]	; (17f50 <gatt_notify+0xa0>)
   17f00:	2157      	movs	r1, #87	; 0x57
   17f02:	f00b f89a 	bl	2303a <z_log_minimal_printk>
		return -ENOMEM;
   17f06:	f06f 000b 	mvn.w	r0, #11
   17f0a:	e7e1      	b.n	17ed0 <gatt_notify+0x20>
   17f0c:	f100 0908 	add.w	r9, r0, #8
   17f10:	2102      	movs	r1, #2
   17f12:	4648      	mov	r0, r9
   17f14:	f000 fcf0 	bl	188f8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   17f18:	4607      	mov	r7, r0
   17f1a:	4648      	mov	r0, r9
   17f1c:	f827 8b02 	strh.w	r8, [r7], #2
   17f20:	89a1      	ldrh	r1, [r4, #12]
   17f22:	f000 fce9 	bl	188f8 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   17f26:	89a2      	ldrh	r2, [r4, #12]
   17f28:	68a1      	ldr	r1, [r4, #8]
   17f2a:	4638      	mov	r0, r7
   17f2c:	f00b fb1c 	bl	23568 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   17f30:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   17f34:	4628      	mov	r0, r5
   17f36:	2301      	movs	r3, #1
   17f38:	f00c fa6a 	bl	24410 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   17f3c:	4629      	mov	r1, r5
   17f3e:	4630      	mov	r0, r6
}
   17f40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   17f44:	f7ff b926 	b.w	17194 <bt_att_send>
   17f48:	00027df7 	.word	0x00027df7
   17f4c:	00027e12 	.word	0x00027e12
   17f50:	00027ea9 	.word	0x00027ea9

00017f54 <bt_gatt_notify_cb>:
{
   17f54:	b530      	push	{r4, r5, lr}
   17f56:	4605      	mov	r5, r0
   17f58:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   17f5a:	460c      	mov	r4, r1
   17f5c:	b951      	cbnz	r1, 17f74 <bt_gatt_notify_cb+0x20>
   17f5e:	4942      	ldr	r1, [pc, #264]	; (18068 <bt_gatt_notify_cb+0x114>)
   17f60:	4842      	ldr	r0, [pc, #264]	; (1806c <bt_gatt_notify_cb+0x118>)
   17f62:	f640 222b 	movw	r2, #2603	; 0xa2b
   17f66:	f00b f85a 	bl	2301e <assert_print>
   17f6a:	f640 212b 	movw	r1, #2603	; 0xa2b
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   17f6e:	483e      	ldr	r0, [pc, #248]	; (18068 <bt_gatt_notify_cb+0x114>)
   17f70:	f00b f84e 	bl	23010 <assert_post_action>
   17f74:	684b      	ldr	r3, [r1, #4]
   17f76:	b953      	cbnz	r3, 17f8e <bt_gatt_notify_cb+0x3a>
   17f78:	680b      	ldr	r3, [r1, #0]
   17f7a:	b943      	cbnz	r3, 17f8e <bt_gatt_notify_cb+0x3a>
   17f7c:	493a      	ldr	r1, [pc, #232]	; (18068 <bt_gatt_notify_cb+0x114>)
   17f7e:	483b      	ldr	r0, [pc, #236]	; (1806c <bt_gatt_notify_cb+0x118>)
   17f80:	f640 222c 	movw	r2, #2604	; 0xa2c
   17f84:	f00b f84b 	bl	2301e <assert_print>
   17f88:	f640 212c 	movw	r1, #2604	; 0xa2c
   17f8c:	e7ef      	b.n	17f6e <bt_gatt_notify_cb+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17f8e:	4b38      	ldr	r3, [pc, #224]	; (18070 <bt_gatt_notify_cb+0x11c>)
   17f90:	f3bf 8f5b 	dmb	ish
   17f94:	681b      	ldr	r3, [r3, #0]
   17f96:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17f9a:	075a      	lsls	r2, r3, #29
   17f9c:	d55d      	bpl.n	1805a <bt_gatt_notify_cb+0x106>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17f9e:	b115      	cbz	r5, 17fa6 <bt_gatt_notify_cb+0x52>
   17fa0:	7aab      	ldrb	r3, [r5, #10]
   17fa2:	2b07      	cmp	r3, #7
   17fa4:	d15c      	bne.n	18060 <bt_gatt_notify_cb+0x10c>
	data.attr = params->attr;
   17fa6:	6860      	ldr	r0, [r4, #4]
   17fa8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17faa:	f7ff fbd1 	bl	17750 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   17fae:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17fb0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17fb4:	b33a      	cbz	r2, 18006 <bt_gatt_notify_cb+0xb2>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17fb6:	a905      	add	r1, sp, #20
   17fb8:	9102      	str	r1, [sp, #8]
   17fba:	492e      	ldr	r1, [pc, #184]	; (18074 <bt_gatt_notify_cb+0x120>)
   17fbc:	9101      	str	r1, [sp, #4]
   17fbe:	2101      	movs	r1, #1
	found->attr = NULL;
   17fc0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17fc2:	9100      	str	r1, [sp, #0]
   17fc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17fc8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17fca:	f7ff fc01 	bl	177d0 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17fce:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17fd0:	b91b      	cbnz	r3, 17fda <bt_gatt_notify_cb+0x86>
			return -ENOENT;
   17fd2:	f06f 0001 	mvn.w	r0, #1
}
   17fd6:	b00b      	add	sp, #44	; 0x2c
   17fd8:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17fda:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17fdc:	9b05      	ldr	r3, [sp, #20]
   17fde:	6818      	ldr	r0, [r3, #0]
   17fe0:	2300      	movs	r3, #0
   17fe2:	f88d 3010 	strb.w	r3, [sp, #16]
   17fe6:	a904      	add	r1, sp, #16
   17fe8:	f642 0303 	movw	r3, #10243	; 0x2803
   17fec:	f8ad 3012 	strh.w	r3, [sp, #18]
   17ff0:	f00b fae3 	bl	235ba <bt_uuid_cmp>
   17ff4:	b970      	cbnz	r0, 18014 <bt_gatt_notify_cb+0xc0>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17ff6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   17ff8:	68c3      	ldr	r3, [r0, #12]
   17ffa:	799b      	ldrb	r3, [r3, #6]
   17ffc:	06db      	lsls	r3, r3, #27
   17ffe:	d405      	bmi.n	1800c <bt_gatt_notify_cb+0xb8>
			return -EINVAL;
   18000:	f06f 0015 	mvn.w	r0, #21
   18004:	e7e7      	b.n	17fd6 <bt_gatt_notify_cb+0x82>
		if (!data.handle) {
   18006:	2800      	cmp	r0, #0
   18008:	d1e8      	bne.n	17fdc <bt_gatt_notify_cb+0x88>
   1800a:	e7e2      	b.n	17fd2 <bt_gatt_notify_cb+0x7e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1800c:	f00c fba8 	bl	24760 <bt_gatt_attr_value_handle>
   18010:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   18014:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   18018:	b12d      	cbz	r5, 18026 <bt_gatt_notify_cb+0xd2>
		return gatt_notify(conn, data.handle, params);
   1801a:	4601      	mov	r1, r0
   1801c:	4622      	mov	r2, r4
   1801e:	4628      	mov	r0, r5
   18020:	f7ff ff46 	bl	17eb0 <gatt_notify>
   18024:	e7d7      	b.n	17fd6 <bt_gatt_notify_cb+0x82>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18026:	f642 1202 	movw	r2, #10498	; 0x2902
   1802a:	f8ad 2012 	strh.w	r2, [sp, #18]
   1802e:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   18030:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18034:	9202      	str	r2, [sp, #8]
   18036:	4a10      	ldr	r2, [pc, #64]	; (18078 <bt_gatt_notify_cb+0x124>)
	data.err = -ENOTCONN;
   18038:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1803a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1803c:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   18040:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18044:	aa04      	add	r2, sp, #16
   18046:	462b      	mov	r3, r5
   18048:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1804c:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1804e:	f88d 5010 	strb.w	r5, [sp, #16]
   18052:	f7ff fbbd 	bl	177d0 <bt_gatt_foreach_attr_type>
	return data.err;
   18056:	9807      	ldr	r0, [sp, #28]
   18058:	e7bd      	b.n	17fd6 <bt_gatt_notify_cb+0x82>
		return -EAGAIN;
   1805a:	f06f 000a 	mvn.w	r0, #10
   1805e:	e7ba      	b.n	17fd6 <bt_gatt_notify_cb+0x82>
		return -ENOTCONN;
   18060:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18064:	e7b7      	b.n	17fd6 <bt_gatt_notify_cb+0x82>
   18066:	bf00      	nop
   18068:	00027d8b 	.word	0x00027d8b
   1806c:	00026718 	.word	0x00026718
   18070:	20000444 	.word	0x20000444
   18074:	0002447d 	.word	0x0002447d
   18078:	0001807d 	.word	0x0001807d

0001807c <notify_cb>:
{
   1807c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   18080:	4b43      	ldr	r3, [pc, #268]	; (18190 <notify_cb+0x114>)
{
   18082:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18084:	6882      	ldr	r2, [r0, #8]
   18086:	429a      	cmp	r2, r3
{
   18088:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1808a:	d139      	bne.n	18100 <notify_cb+0x84>
	ccc = attr->user_data;
   1808c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   18090:	4b40      	ldr	r3, [pc, #256]	; (18194 <notify_cb+0x118>)
   18092:	459a      	cmp	sl, r3
   18094:	d11c      	bne.n	180d0 <notify_cb+0x54>
   18096:	4c40      	ldr	r4, [pc, #256]	; (18198 <notify_cb+0x11c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   18098:	4f40      	ldr	r7, [pc, #256]	; (1819c <notify_cb+0x120>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1809a:	2600      	movs	r6, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1809c:	4639      	mov	r1, r7
   1809e:	4620      	mov	r0, r4
   180a0:	f00c fa43 	bl	2452a <bt_addr_le_eq>
   180a4:	b978      	cbnz	r0, 180c6 <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   180a6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   180aa:	2207      	movs	r2, #7
   180ac:	4621      	mov	r1, r4
   180ae:	f7fd fdb7 	bl	15c20 <bt_conn_lookup_state_le>
			if (!conn) {
   180b2:	bb40      	cbnz	r0, 18106 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   180b4:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   180b6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   180ba:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   180bc:	4621      	mov	r1, r4
   180be:	8853      	ldrh	r3, [r2, #2]
   180c0:	8812      	ldrh	r2, [r2, #0]
   180c2:	f7ff f9bf 	bl	17444 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   180c6:	3601      	adds	r6, #1
   180c8:	2e08      	cmp	r6, #8
   180ca:	f104 040c 	add.w	r4, r4, #12
   180ce:	d1e5      	bne.n	1809c <notify_cb+0x20>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   180d0:	f10a 0601 	add.w	r6, sl, #1
   180d4:	f10a 0b51 	add.w	fp, sl, #81	; 0x51
		if (cfg->value != data->type) {
   180d8:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   180dc:	89ab      	ldrh	r3, [r5, #12]
   180de:	429a      	cmp	r2, r3
   180e0:	d10b      	bne.n	180fa <notify_cb+0x7e>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   180e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   180e6:	4631      	mov	r1, r6
   180e8:	f7fd fd5a 	bl	15ba0 <bt_conn_lookup_addr_le>
		if (!conn) {
   180ec:	4604      	mov	r4, r0
   180ee:	b120      	cbz	r0, 180fa <notify_cb+0x7e>
		if (conn->state != BT_CONN_CONNECTED) {
   180f0:	7a83      	ldrb	r3, [r0, #10]
   180f2:	2b07      	cmp	r3, #7
   180f4:	d00a      	beq.n	1810c <notify_cb+0x90>
			bt_conn_unref(conn);
   180f6:	f7fd fb27 	bl	15748 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   180fa:	360a      	adds	r6, #10
   180fc:	45b3      	cmp	fp, r6
   180fe:	d1eb      	bne.n	180d8 <notify_cb+0x5c>
		return BT_GATT_ITER_CONTINUE;
   18100:	f04f 0901 	mov.w	r9, #1
   18104:	e040      	b.n	18188 <notify_cb+0x10c>
			bt_conn_unref(conn);
   18106:	f7fd fb1f 	bl	15748 <bt_conn_unref>
   1810a:	e7dc      	b.n	180c6 <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1810c:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
   18110:	b123      	cbz	r3, 1811c <notify_cb+0xa0>
   18112:	4641      	mov	r1, r8
   18114:	4798      	blx	r3
   18116:	b908      	cbnz	r0, 1811c <notify_cb+0xa0>
			bt_conn_unref(conn);
   18118:	4620      	mov	r0, r4
   1811a:	e7ec      	b.n	180f6 <notify_cb+0x7a>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1811c:	2294      	movs	r2, #148	; 0x94
   1811e:	4641      	mov	r1, r8
   18120:	4620      	mov	r0, r4
   18122:	f00c fb78 	bl	24816 <bt_gatt_check_perm>
   18126:	4681      	mov	r9, r0
   18128:	b120      	cbz	r0, 18134 <notify_cb+0xb8>
			BT_WARN("Link is not encrypted");
   1812a:	481d      	ldr	r0, [pc, #116]	; (181a0 <notify_cb+0x124>)
   1812c:	2157      	movs	r1, #87	; 0x57
   1812e:	f00a ff84 	bl	2303a <z_log_minimal_printk>
			bt_conn_unref(conn);
   18132:	e7f1      	b.n	18118 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   18134:	89ab      	ldrh	r3, [r5, #12]
   18136:	2b02      	cmp	r3, #2
   18138:	d115      	bne.n	18166 <notify_cb+0xea>
   1813a:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1813e:	079a      	lsls	r2, r3, #30
   18140:	d405      	bmi.n	1814e <notify_cb+0xd2>
		bt_conn_unref(conn);
   18142:	4620      	mov	r0, r4
   18144:	f7fd fb00 	bl	15748 <bt_conn_unref>
		data->err = 0;
   18148:	2300      	movs	r3, #0
   1814a:	60ab      	str	r3, [r5, #8]
   1814c:	e7d5      	b.n	180fa <notify_cb+0x7e>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1814e:	692a      	ldr	r2, [r5, #16]
   18150:	88a9      	ldrh	r1, [r5, #4]
   18152:	4620      	mov	r0, r4
   18154:	f7ff fcf4 	bl	17b40 <gatt_indicate>
			if (err == 0) {
   18158:	4607      	mov	r7, r0
   1815a:	b980      	cbnz	r0, 1817e <notify_cb+0x102>
				data->ind_params->_ref++;
   1815c:	692a      	ldr	r2, [r5, #16]
   1815e:	7d93      	ldrb	r3, [r2, #22]
   18160:	3301      	adds	r3, #1
   18162:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   18164:	e7ed      	b.n	18142 <notify_cb+0xc6>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   18166:	2b01      	cmp	r3, #1
   18168:	d1eb      	bne.n	18142 <notify_cb+0xc6>
   1816a:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1816e:	07db      	lsls	r3, r3, #31
   18170:	d5e7      	bpl.n	18142 <notify_cb+0xc6>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   18172:	692a      	ldr	r2, [r5, #16]
   18174:	88a9      	ldrh	r1, [r5, #4]
   18176:	4620      	mov	r0, r4
   18178:	f7ff fe9a 	bl	17eb0 <gatt_notify>
   1817c:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   1817e:	4620      	mov	r0, r4
   18180:	f7fd fae2 	bl	15748 <bt_conn_unref>
		if (err < 0) {
   18184:	2f00      	cmp	r7, #0
   18186:	dadf      	bge.n	18148 <notify_cb+0xcc>
}
   18188:	4648      	mov	r0, r9
   1818a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1818e:	bf00      	nop
   18190:	00017359 	.word	0x00017359
   18194:	200006e8 	.word	0x200006e8
   18198:	20003b1d 	.word	0x20003b1d
   1819c:	00026f2f 	.word	0x00026f2f
   181a0:	00027df7 	.word	0x00027df7

000181a4 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   181a4:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   181a6:	4a06      	ldr	r2, [pc, #24]	; (181c0 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   181a8:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   181aa:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   181ac:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   181ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   181b2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   181b6:	f00c fb21 	bl	247fc <bt_gatt_foreach_attr>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   181ba:	b003      	add	sp, #12
   181bc:	f85d fb04 	ldr.w	pc, [sp], #4
   181c0:	00017dd9 	.word	0x00017dd9

000181c4 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   181c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   181c6:	4b08      	ldr	r3, [pc, #32]	; (181e8 <bt_gatt_att_max_mtu_changed+0x24>)
   181c8:	681c      	ldr	r4, [r3, #0]
   181ca:	4605      	mov	r5, r0
   181cc:	460e      	mov	r6, r1
   181ce:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   181d0:	b14c      	cbz	r4, 181e6 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   181d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   181d6:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   181d8:	b11b      	cbz	r3, 181e2 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   181da:	463a      	mov	r2, r7
   181dc:	4631      	mov	r1, r6
   181de:	4628      	mov	r0, r5
   181e0:	4798      	blx	r3
	return node->next;
   181e2:	6864      	ldr	r4, [r4, #4]
   181e4:	e7f4      	b.n	181d0 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   181e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   181e8:	20002b08 	.word	0x20002b08

000181ec <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   181ec:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   181ee:	4603      	mov	r3, r0
   181f0:	4a0f      	ldr	r2, [pc, #60]	; (18230 <bt_gatt_disconnected+0x44>)
{
   181f2:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   181f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   181f8:	2001      	movs	r0, #1
   181fa:	f00c faff 	bl	247fc <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   181fe:	4620      	mov	r0, r4
   18200:	f7ff f850 	bl	172a4 <find_cf_cfg>
	if (!cfg) {
   18204:	4605      	mov	r5, r0
   18206:	b188      	cbz	r0, 1822c <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18208:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1820c:	7a20      	ldrb	r0, [r4, #8]
   1820e:	4631      	mov	r1, r6
   18210:	f00b fae2 	bl	237d8 <bt_addr_le_is_bonded>
   18214:	b920      	cbnz	r0, 18220 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   18216:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   18218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1821c:	f7ff b8f6 	b.w	1740c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18220:	4631      	mov	r1, r6
   18222:	1c68      	adds	r0, r5, #1
}
   18224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18228:	f00c b987 	b.w	2453a <bt_addr_le_copy>
}
   1822c:	bd70      	pop	{r4, r5, r6, pc}
   1822e:	bf00      	nop
   18230:	00017531 	.word	0x00017531

00018234 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   18234:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   18236:	4d0c      	ldr	r5, [pc, #48]	; (18268 <bt_smp_accept+0x34>)
{
   18238:	4602      	mov	r2, r0
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1823a:	2400      	movs	r4, #0
   1823c:	2694      	movs	r6, #148	; 0x94
		if (smp->chan.conn) {
   1823e:	fb06 f304 	mul.w	r3, r6, r4
   18242:	1958      	adds	r0, r3, r5
   18244:	58eb      	ldr	r3, [r5, r3]
   18246:	b14b      	cbz	r3, 1825c <bt_smp_accept+0x28>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   18248:	3401      	adds	r4, #1
   1824a:	2c04      	cmp	r4, #4
   1824c:	d1f7      	bne.n	1823e <bt_smp_accept+0xa>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1824e:	4807      	ldr	r0, [pc, #28]	; (1826c <bt_smp_accept+0x38>)
   18250:	2145      	movs	r1, #69	; 0x45
   18252:	f00a fef2 	bl	2303a <z_log_minimal_printk>
   18256:	f06f 000b 	mvn.w	r0, #11
   1825a:	e003      	b.n	18264 <bt_smp_accept+0x30>
		smp->chan.ops = &ops;
   1825c:	4a04      	ldr	r2, [pc, #16]	; (18270 <bt_smp_accept+0x3c>)
   1825e:	6042      	str	r2, [r0, #4]
		*chan = &smp->chan;
   18260:	6008      	str	r0, [r1, #0]
		return 0;
   18262:	4618      	mov	r0, r3

	return -ENOMEM;
}
   18264:	bd70      	pop	{r4, r5, r6, pc}
   18266:	bf00      	nop
   18268:	20002b10 	.word	0x20002b10
   1826c:	00027ee6 	.word	0x00027ee6
   18270:	00025eec 	.word	0x00025eec

00018274 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   18274:	4b02      	ldr	r3, [pc, #8]	; (18280 <net_buf_pool_get+0xc>)
   18276:	2234      	movs	r2, #52	; 0x34
   18278:	fb02 3000 	mla	r0, r2, r0, r3
   1827c:	4770      	bx	lr
   1827e:	bf00      	nop
   18280:	20000ae8 	.word	0x20000ae8

00018284 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18284:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18286:	4b07      	ldr	r3, [pc, #28]	; (182a4 <net_buf_id+0x20>)
   18288:	2134      	movs	r1, #52	; 0x34
   1828a:	fb01 3302 	mla	r3, r1, r2, r3
   1828e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18290:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   18294:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   18296:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18298:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1829c:	fbb0 f0f3 	udiv	r0, r0, r3
   182a0:	4770      	bx	lr
   182a2:	bf00      	nop
   182a4:	20000ae8 	.word	0x20000ae8

000182a8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   182a8:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   182aa:	4b0a      	ldr	r3, [pc, #40]	; (182d4 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   182ac:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   182ae:	2434      	movs	r4, #52	; 0x34
   182b0:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   182b4:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   182b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   182b8:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   182ba:	681a      	ldr	r2, [r3, #0]
   182bc:	4294      	cmp	r4, r2
   182be:	bf94      	ite	ls
   182c0:	600c      	strls	r4, [r1, #0]
   182c2:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   182c4:	e9d3 5400 	ldrd	r5, r4, [r3]
   182c8:	f7ff ffdc 	bl	18284 <net_buf_id>
}
   182cc:	fb05 4000 	mla	r0, r5, r0, r4
   182d0:	bd38      	pop	{r3, r4, r5, pc}
   182d2:	bf00      	nop
   182d4:	20000ae8 	.word	0x20000ae8

000182d8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   182d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182dc:	b085      	sub	sp, #20
   182de:	4605      	mov	r5, r0
   182e0:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   182e2:	4610      	mov	r0, r2
   182e4:	4619      	mov	r1, r3
{
   182e6:	4691      	mov	r9, r2
   182e8:	4698      	mov	r8, r3
   182ea:	4617      	mov	r7, r2
   182ec:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   182ee:	f00d f8b8 	bl	25462 <sys_clock_timeout_end_calc>
   182f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   182f6:	b93d      	cbnz	r5, 18308 <net_buf_alloc_len+0x30>
   182f8:	495e      	ldr	r1, [pc, #376]	; (18474 <net_buf_alloc_len+0x19c>)
   182fa:	485f      	ldr	r0, [pc, #380]	; (18478 <net_buf_alloc_len+0x1a0>)
   182fc:	22f4      	movs	r2, #244	; 0xf4
   182fe:	f00a fe8e 	bl	2301e <assert_print>
   18302:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   18304:	485b      	ldr	r0, [pc, #364]	; (18474 <net_buf_alloc_len+0x19c>)
   18306:	e014      	b.n	18332 <net_buf_alloc_len+0x5a>
	key = k_spin_lock(&pool->lock);
   18308:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   1830c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18310:	f3ef 8b11 	mrs	fp, BASEPRI
   18314:	f383 8812 	msr	BASEPRI_MAX, r3
   18318:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1831c:	4650      	mov	r0, sl
   1831e:	f004 fb95 	bl	1ca4c <z_spin_lock_valid>
   18322:	b940      	cbnz	r0, 18336 <net_buf_alloc_len+0x5e>
   18324:	4955      	ldr	r1, [pc, #340]	; (1847c <net_buf_alloc_len+0x1a4>)
   18326:	4854      	ldr	r0, [pc, #336]	; (18478 <net_buf_alloc_len+0x1a0>)
   18328:	2294      	movs	r2, #148	; 0x94
   1832a:	f00a fe78 	bl	2301e <assert_print>
   1832e:	2194      	movs	r1, #148	; 0x94
   18330:	4852      	ldr	r0, [pc, #328]	; (1847c <net_buf_alloc_len+0x1a4>)
   18332:	f00a fe6d 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   18336:	4650      	mov	r0, sl
   18338:	f004 fba6 	bl	1ca88 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1833c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1833e:	2b00      	cmp	r3, #0
   18340:	d06a      	beq.n	18418 <net_buf_alloc_len+0x140>
		if (pool->uninit_count < pool->buf_count) {
   18342:	8c2a      	ldrh	r2, [r5, #32]
   18344:	429a      	cmp	r2, r3
   18346:	d947      	bls.n	183d8 <net_buf_alloc_len+0x100>
	return z_impl_k_queue_get(queue, timeout);
   18348:	2200      	movs	r2, #0
   1834a:	2300      	movs	r3, #0
   1834c:	4628      	mov	r0, r5
   1834e:	f004 fdd3 	bl	1cef8 <z_impl_k_queue_get>
			if (buf) {
   18352:	4604      	mov	r4, r0
   18354:	2800      	cmp	r0, #0
   18356:	d03f      	beq.n	183d8 <net_buf_alloc_len+0x100>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18358:	4650      	mov	r0, sl
   1835a:	f004 fb85 	bl	1ca68 <z_spin_unlock_valid>
   1835e:	b930      	cbnz	r0, 1836e <net_buf_alloc_len+0x96>
   18360:	4946      	ldr	r1, [pc, #280]	; (1847c <net_buf_alloc_len+0x1a4>)
   18362:	4845      	ldr	r0, [pc, #276]	; (18478 <net_buf_alloc_len+0x1a0>)
   18364:	22c2      	movs	r2, #194	; 0xc2
   18366:	f00a fe5a 	bl	2301e <assert_print>
   1836a:	21c2      	movs	r1, #194	; 0xc2
   1836c:	e7e0      	b.n	18330 <net_buf_alloc_len+0x58>
	__asm__ volatile(
   1836e:	f38b 8811 	msr	BASEPRI, fp
   18372:	f3bf 8f6f 	isb	sy
	if (size) {
   18376:	9d03      	ldr	r5, [sp, #12]
   18378:	2d00      	cmp	r5, #0
   1837a:	d06f      	beq.n	1845c <net_buf_alloc_len+0x184>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1837c:	ea58 0309 	orrs.w	r3, r8, r9
   18380:	d010      	beq.n	183a4 <net_buf_alloc_len+0xcc>
   18382:	f1b8 3fff 	cmp.w	r8, #4294967295
   18386:	bf08      	it	eq
   18388:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1838c:	d00a      	beq.n	183a4 <net_buf_alloc_len+0xcc>
			int64_t remaining = end - sys_clock_tick_get();
   1838e:	f006 fd17 	bl	1edc0 <sys_clock_tick_get>
   18392:	9b01      	ldr	r3, [sp, #4]
   18394:	1a1f      	subs	r7, r3, r0
   18396:	9b02      	ldr	r3, [sp, #8]
   18398:	eb63 0601 	sbc.w	r6, r3, r1
			if (remaining <= 0) {
   1839c:	2e00      	cmp	r6, #0
   1839e:	bfbc      	itt	lt
   183a0:	2700      	movlt	r7, #0
   183a2:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   183a4:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   183a6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 18480 <net_buf_alloc_len+0x1a8>
   183aa:	f04f 0934 	mov.w	r9, #52	; 0x34
   183ae:	fb09 8303 	mla	r3, r9, r3, r8
   183b2:	463a      	mov	r2, r7
   183b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   183b6:	681b      	ldr	r3, [r3, #0]
   183b8:	a903      	add	r1, sp, #12
   183ba:	f8d3 a000 	ldr.w	sl, [r3]
   183be:	4620      	mov	r0, r4
   183c0:	4633      	mov	r3, r6
   183c2:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   183c4:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   183c6:	2800      	cmp	r0, #0
   183c8:	d13c      	bne.n	18444 <net_buf_alloc_len+0x16c>
	k_lifo_put(&pool->free, buf);
   183ca:	79a0      	ldrb	r0, [r4, #6]
   183cc:	4621      	mov	r1, r4
   183ce:	fb00 8009 	mla	r0, r0, r9, r8
   183d2:	f00c ff8d 	bl	252f0 <k_queue_prepend>
}
   183d6:	e030      	b.n	1843a <net_buf_alloc_len+0x162>
		uninit_count = pool->uninit_count--;
   183d8:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   183da:	1e63      	subs	r3, r4, #1
   183dc:	846b      	strh	r3, [r5, #34]	; 0x22
   183de:	4650      	mov	r0, sl
   183e0:	f004 fb42 	bl	1ca68 <z_spin_unlock_valid>
   183e4:	2800      	cmp	r0, #0
   183e6:	d0bb      	beq.n	18360 <net_buf_alloc_len+0x88>
   183e8:	f38b 8811 	msr	BASEPRI, fp
   183ec:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   183f0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   183f4:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   183f6:	3317      	adds	r3, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   183f8:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   183fa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   183fc:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   18400:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   18404:	4b1e      	ldr	r3, [pc, #120]	; (18480 <net_buf_alloc_len+0x1a8>)
   18406:	4a1f      	ldr	r2, [pc, #124]	; (18484 <net_buf_alloc_len+0x1ac>)
   18408:	1aeb      	subs	r3, r5, r3
   1840a:	109b      	asrs	r3, r3, #2
   1840c:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1840e:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   18410:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   18414:	71e3      	strb	r3, [r4, #7]
		goto success;
   18416:	e7ae      	b.n	18376 <net_buf_alloc_len+0x9e>
   18418:	4650      	mov	r0, sl
   1841a:	f004 fb25 	bl	1ca68 <z_spin_unlock_valid>
   1841e:	2800      	cmp	r0, #0
   18420:	d09e      	beq.n	18360 <net_buf_alloc_len+0x88>
   18422:	f38b 8811 	msr	BASEPRI, fp
   18426:	f3bf 8f6f 	isb	sy
   1842a:	464a      	mov	r2, r9
   1842c:	4643      	mov	r3, r8
   1842e:	4628      	mov	r0, r5
   18430:	f004 fd62 	bl	1cef8 <z_impl_k_queue_get>
	if (!buf) {
   18434:	4604      	mov	r4, r0
   18436:	2800      	cmp	r0, #0
   18438:	d19d      	bne.n	18376 <net_buf_alloc_len+0x9e>
		return NULL;
   1843a:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1843c:	4620      	mov	r0, r4
   1843e:	b005      	add	sp, #20
   18440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   18444:	9b03      	ldr	r3, [sp, #12]
   18446:	429d      	cmp	r5, r3
   18448:	d909      	bls.n	1845e <net_buf_alloc_len+0x186>
   1844a:	490a      	ldr	r1, [pc, #40]	; (18474 <net_buf_alloc_len+0x19c>)
   1844c:	480a      	ldr	r0, [pc, #40]	; (18478 <net_buf_alloc_len+0x1a0>)
   1844e:	f240 1255 	movw	r2, #341	; 0x155
   18452:	f00a fde4 	bl	2301e <assert_print>
   18456:	f240 1155 	movw	r1, #341	; 0x155
   1845a:	e753      	b.n	18304 <net_buf_alloc_len+0x2c>
		buf->__buf = NULL;
   1845c:	6125      	str	r5, [r4, #16]
	buf->frags = NULL;
   1845e:	2300      	movs	r3, #0
   18460:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   18462:	2201      	movs	r2, #1
   18464:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   18466:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   18468:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1846a:	6923      	ldr	r3, [r4, #16]
   1846c:	81e2      	strh	r2, [r4, #14]
   1846e:	60a3      	str	r3, [r4, #8]
}
   18470:	e7e4      	b.n	1843c <net_buf_alloc_len+0x164>
   18472:	bf00      	nop
   18474:	00027f17 	.word	0x00027f17
   18478:	00026718 	.word	0x00026718
   1847c:	0002679f 	.word	0x0002679f
   18480:	20000ae8 	.word	0x20000ae8
   18484:	c4ec4ec5 	.word	0xc4ec4ec5

00018488 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   18488:	b570      	push	{r4, r5, r6, lr}
   1848a:	4606      	mov	r6, r0
   1848c:	f004 fd34 	bl	1cef8 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   18490:	4605      	mov	r5, r0
   18492:	b128      	cbz	r0, 184a0 <net_buf_get+0x18>
   18494:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   18496:	7963      	ldrb	r3, [r4, #5]
   18498:	f013 0301 	ands.w	r3, r3, #1
   1849c:	d102      	bne.n	184a4 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1849e:	6023      	str	r3, [r4, #0]

	return buf;
}
   184a0:	4628      	mov	r0, r5
   184a2:	bd70      	pop	{r4, r5, r6, pc}
   184a4:	2200      	movs	r2, #0
   184a6:	2300      	movs	r3, #0
   184a8:	4630      	mov	r0, r6
   184aa:	f004 fd25 	bl	1cef8 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   184ae:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   184b0:	b950      	cbnz	r0, 184c8 <net_buf_get+0x40>
   184b2:	4908      	ldr	r1, [pc, #32]	; (184d4 <net_buf_get+0x4c>)
   184b4:	4808      	ldr	r0, [pc, #32]	; (184d8 <net_buf_get+0x50>)
   184b6:	f240 12ad 	movw	r2, #429	; 0x1ad
   184ba:	f00a fdb0 	bl	2301e <assert_print>
   184be:	4805      	ldr	r0, [pc, #20]	; (184d4 <net_buf_get+0x4c>)
   184c0:	f240 11ad 	movw	r1, #429	; 0x1ad
   184c4:	f00a fda4 	bl	23010 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   184c8:	7963      	ldrb	r3, [r4, #5]
   184ca:	f023 0301 	bic.w	r3, r3, #1
   184ce:	7163      	strb	r3, [r4, #5]
   184d0:	4604      	mov	r4, r0
   184d2:	e7e0      	b.n	18496 <net_buf_get+0xe>
   184d4:	00027f17 	.word	0x00027f17
   184d8:	00026718 	.word	0x00026718

000184dc <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   184dc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   184de:	b950      	cbnz	r0, 184f6 <net_buf_simple_reserve+0x1a>
   184e0:	490c      	ldr	r1, [pc, #48]	; (18514 <net_buf_simple_reserve+0x38>)
   184e2:	480d      	ldr	r0, [pc, #52]	; (18518 <net_buf_simple_reserve+0x3c>)
   184e4:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   184e8:	f00a fd99 	bl	2301e <assert_print>
   184ec:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
	__ASSERT_NO_MSG(buf->len == 0U);
   184f0:	4808      	ldr	r0, [pc, #32]	; (18514 <net_buf_simple_reserve+0x38>)
   184f2:	f00a fd8d 	bl	23010 <assert_post_action>
   184f6:	8883      	ldrh	r3, [r0, #4]
   184f8:	b143      	cbz	r3, 1850c <net_buf_simple_reserve+0x30>
   184fa:	4906      	ldr	r1, [pc, #24]	; (18514 <net_buf_simple_reserve+0x38>)
   184fc:	4806      	ldr	r0, [pc, #24]	; (18518 <net_buf_simple_reserve+0x3c>)
   184fe:	f240 12c5 	movw	r2, #453	; 0x1c5
   18502:	f00a fd8c 	bl	2301e <assert_print>
   18506:	f240 11c5 	movw	r1, #453	; 0x1c5
   1850a:	e7f1      	b.n	184f0 <net_buf_simple_reserve+0x14>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1850c:	6883      	ldr	r3, [r0, #8]
   1850e:	440b      	add	r3, r1
   18510:	6003      	str	r3, [r0, #0]
}
   18512:	bd08      	pop	{r3, pc}
   18514:	00027f17 	.word	0x00027f17
   18518:	00026718 	.word	0x00026718

0001851c <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1851e:	460d      	mov	r5, r1
	struct net_buf *tail;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   18520:	4604      	mov	r4, r0
   18522:	b950      	cbnz	r0, 1853a <net_buf_slist_put+0x1e>
   18524:	4925      	ldr	r1, [pc, #148]	; (185bc <net_buf_slist_put+0xa0>)
   18526:	4826      	ldr	r0, [pc, #152]	; (185c0 <net_buf_slist_put+0xa4>)
   18528:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1852c:	f00a fd77 	bl	2301e <assert_print>
   18530:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT_NO_MSG(buf);
   18534:	4821      	ldr	r0, [pc, #132]	; (185bc <net_buf_slist_put+0xa0>)
   18536:	f00a fd6b 	bl	23010 <assert_post_action>
   1853a:	bb21      	cbnz	r1, 18586 <net_buf_slist_put+0x6a>
   1853c:	491f      	ldr	r1, [pc, #124]	; (185bc <net_buf_slist_put+0xa0>)
   1853e:	4820      	ldr	r0, [pc, #128]	; (185c0 <net_buf_slist_put+0xa4>)
   18540:	f240 12d3 	movw	r2, #467	; 0x1d3
   18544:	f00a fd6b 	bl	2301e <assert_print>
   18548:	f240 11d3 	movw	r1, #467	; 0x1d3
   1854c:	e7f2      	b.n	18534 <net_buf_slist_put+0x18>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   1854e:	7973      	ldrb	r3, [r6, #5]
   18550:	f043 0301 	orr.w	r3, r3, #1
   18554:	7173      	strb	r3, [r6, #5]
   18556:	4616      	mov	r6, r2
	for (tail = buf; tail->frags; tail = tail->frags) {
   18558:	6832      	ldr	r2, [r6, #0]
   1855a:	2a00      	cmp	r2, #0
   1855c:	d1f7      	bne.n	1854e <net_buf_slist_put+0x32>
	__asm__ volatile(
   1855e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18562:	f3ef 8711 	mrs	r7, BASEPRI
   18566:	f383 8812 	msr	BASEPRI_MAX, r3
   1856a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1856e:	4815      	ldr	r0, [pc, #84]	; (185c4 <net_buf_slist_put+0xa8>)
   18570:	f004 fa6c 	bl	1ca4c <z_spin_lock_valid>
   18574:	b948      	cbnz	r0, 1858a <net_buf_slist_put+0x6e>
   18576:	4914      	ldr	r1, [pc, #80]	; (185c8 <net_buf_slist_put+0xac>)
   18578:	4811      	ldr	r0, [pc, #68]	; (185c0 <net_buf_slist_put+0xa4>)
   1857a:	2294      	movs	r2, #148	; 0x94
   1857c:	f00a fd4f 	bl	2301e <assert_print>
   18580:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18582:	4811      	ldr	r0, [pc, #68]	; (185c8 <net_buf_slist_put+0xac>)
   18584:	e7d7      	b.n	18536 <net_buf_slist_put+0x1a>
   18586:	460e      	mov	r6, r1
   18588:	e7e6      	b.n	18558 <net_buf_slist_put+0x3c>
	z_spin_lock_set_owner(l);
   1858a:	480e      	ldr	r0, [pc, #56]	; (185c4 <net_buf_slist_put+0xa8>)
   1858c:	f004 fa7c 	bl	1ca88 <z_spin_lock_set_owner>
	return list->tail;
   18590:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   18592:	b963      	cbnz	r3, 185ae <net_buf_slist_put+0x92>
	list->head = node;
   18594:	6025      	str	r5, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18596:	480b      	ldr	r0, [pc, #44]	; (185c4 <net_buf_slist_put+0xa8>)
	list->tail = node;
   18598:	6066      	str	r6, [r4, #4]
   1859a:	f004 fa65 	bl	1ca68 <z_spin_unlock_valid>
   1859e:	b940      	cbnz	r0, 185b2 <net_buf_slist_put+0x96>
   185a0:	4909      	ldr	r1, [pc, #36]	; (185c8 <net_buf_slist_put+0xac>)
   185a2:	4807      	ldr	r0, [pc, #28]	; (185c0 <net_buf_slist_put+0xa4>)
   185a4:	22c2      	movs	r2, #194	; 0xc2
   185a6:	f00a fd3a 	bl	2301e <assert_print>
   185aa:	21c2      	movs	r1, #194	; 0xc2
   185ac:	e7e9      	b.n	18582 <net_buf_slist_put+0x66>
	parent->next = child;
   185ae:	601d      	str	r5, [r3, #0]
}
   185b0:	e7f1      	b.n	18596 <net_buf_slist_put+0x7a>
	__asm__ volatile(
   185b2:	f387 8811 	msr	BASEPRI, r7
   185b6:	f3bf 8f6f 	isb	sy
	}

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append_list(list, &buf->node, &tail->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   185ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   185bc:	00027f17 	.word	0x00027f17
   185c0:	00026718 	.word	0x00026718
   185c4:	20002d60 	.word	0x20002d60
   185c8:	0002679f 	.word	0x0002679f

000185cc <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   185cc:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   185ce:	4604      	mov	r4, r0
   185d0:	b948      	cbnz	r0, 185e6 <net_buf_slist_get+0x1a>
   185d2:	492d      	ldr	r1, [pc, #180]	; (18688 <net_buf_slist_get+0xbc>)
   185d4:	482d      	ldr	r0, [pc, #180]	; (1868c <net_buf_slist_get+0xc0>)
   185d6:	f240 12e3 	movw	r2, #483	; 0x1e3
   185da:	f00a fd20 	bl	2301e <assert_print>
   185de:	f240 11e3 	movw	r1, #483	; 0x1e3

	if (buf) {
		/* Get any fragments belonging to this buffer */
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
			frag->frags = (void *)sys_slist_get(list);
			__ASSERT_NO_MSG(frag->frags);
   185e2:	4829      	ldr	r0, [pc, #164]	; (18688 <net_buf_slist_get+0xbc>)
   185e4:	e012      	b.n	1860c <net_buf_slist_get+0x40>
	__asm__ volatile(
   185e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   185ea:	f3ef 8611 	mrs	r6, BASEPRI
   185ee:	f383 8812 	msr	BASEPRI_MAX, r3
   185f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   185f6:	4826      	ldr	r0, [pc, #152]	; (18690 <net_buf_slist_get+0xc4>)
   185f8:	f004 fa28 	bl	1ca4c <z_spin_lock_valid>
   185fc:	b940      	cbnz	r0, 18610 <net_buf_slist_get+0x44>
   185fe:	4925      	ldr	r1, [pc, #148]	; (18694 <net_buf_slist_get+0xc8>)
   18600:	4822      	ldr	r0, [pc, #136]	; (1868c <net_buf_slist_get+0xc0>)
   18602:	2294      	movs	r2, #148	; 0x94
   18604:	f00a fd0b 	bl	2301e <assert_print>
   18608:	2194      	movs	r1, #148	; 0x94
   1860a:	4822      	ldr	r0, [pc, #136]	; (18694 <net_buf_slist_get+0xc8>)
   1860c:	f00a fd00 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   18610:	481f      	ldr	r0, [pc, #124]	; (18690 <net_buf_slist_get+0xc4>)
   18612:	f004 fa39 	bl	1ca88 <z_spin_lock_set_owner>
	return list->head;
   18616:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   18618:	b15d      	cbz	r5, 18632 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1861a:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1861c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1861e:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18620:	4295      	cmp	r5, r2
	list->tail = node;
   18622:	bf08      	it	eq
   18624:	6063      	streq	r3, [r4, #4]
{
   18626:	462b      	mov	r3, r5
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   18628:	795a      	ldrb	r2, [r3, #5]
   1862a:	f012 0201 	ands.w	r2, r2, #1
   1862e:	d10b      	bne.n	18648 <net_buf_slist_get+0x7c>
			/* The fragments flag is only for list-internal usage */
			frag->flags &= ~NET_BUF_FRAGS;
		}

		/* Mark the end of the fragment list */
		frag->frags = NULL;
   18630:	601a      	str	r2, [r3, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18632:	4817      	ldr	r0, [pc, #92]	; (18690 <net_buf_slist_get+0xc4>)
   18634:	f004 fa18 	bl	1ca68 <z_spin_unlock_valid>
   18638:	b9f8      	cbnz	r0, 1867a <net_buf_slist_get+0xae>
   1863a:	4916      	ldr	r1, [pc, #88]	; (18694 <net_buf_slist_get+0xc8>)
   1863c:	4813      	ldr	r0, [pc, #76]	; (1868c <net_buf_slist_get+0xc0>)
   1863e:	22c2      	movs	r2, #194	; 0xc2
   18640:	f00a fced 	bl	2301e <assert_print>
   18644:	21c2      	movs	r1, #194	; 0xc2
   18646:	e7e0      	b.n	1860a <net_buf_slist_get+0x3e>
	return list->head;
   18648:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1864a:	b162      	cbz	r2, 18666 <net_buf_slist_get+0x9a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1864c:	6860      	ldr	r0, [r4, #4]
	return node->next;
   1864e:	6811      	ldr	r1, [r2, #0]
	list->head = node;
   18650:	6021      	str	r1, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18652:	4282      	cmp	r2, r0
   18654:	d100      	bne.n	18658 <net_buf_slist_get+0x8c>
	list->tail = node;
   18656:	6061      	str	r1, [r4, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   18658:	7959      	ldrb	r1, [r3, #5]
			frag->frags = (void *)sys_slist_get(list);
   1865a:	601a      	str	r2, [r3, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   1865c:	f021 0101 	bic.w	r1, r1, #1
   18660:	7159      	strb	r1, [r3, #5]
   18662:	4613      	mov	r3, r2
   18664:	e7e0      	b.n	18628 <net_buf_slist_get+0x5c>
			__ASSERT_NO_MSG(frag->frags);
   18666:	4908      	ldr	r1, [pc, #32]	; (18688 <net_buf_slist_get+0xbc>)
			frag->frags = (void *)sys_slist_get(list);
   18668:	601a      	str	r2, [r3, #0]
			__ASSERT_NO_MSG(frag->frags);
   1866a:	4808      	ldr	r0, [pc, #32]	; (1868c <net_buf_slist_get+0xc0>)
   1866c:	f240 12ed 	movw	r2, #493	; 0x1ed
   18670:	f00a fcd5 	bl	2301e <assert_print>
   18674:	f240 11ed 	movw	r1, #493	; 0x1ed
   18678:	e7b3      	b.n	185e2 <net_buf_slist_get+0x16>
	__asm__ volatile(
   1867a:	f386 8811 	msr	BASEPRI, r6
   1867e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   18682:	4628      	mov	r0, r5
   18684:	bd70      	pop	{r4, r5, r6, pc}
   18686:	bf00      	nop
   18688:	00027f17 	.word	0x00027f17
   1868c:	00026718 	.word	0x00026718
   18690:	20002d60 	.word	0x20002d60
   18694:	0002679f 	.word	0x0002679f

00018698 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   18698:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1869a:	b950      	cbnz	r0, 186b2 <net_buf_put+0x1a>
   1869c:	4911      	ldr	r1, [pc, #68]	; (186e4 <net_buf_put+0x4c>)
   1869e:	4812      	ldr	r0, [pc, #72]	; (186e8 <net_buf_put+0x50>)
   186a0:	f44f 7200 	mov.w	r2, #512	; 0x200
   186a4:	f00a fcbb 	bl	2301e <assert_print>
   186a8:	f44f 7100 	mov.w	r1, #512	; 0x200
	__ASSERT_NO_MSG(buf);
   186ac:	480d      	ldr	r0, [pc, #52]	; (186e4 <net_buf_put+0x4c>)
   186ae:	f00a fcaf 	bl	23010 <assert_post_action>
   186b2:	b9a1      	cbnz	r1, 186de <net_buf_put+0x46>
   186b4:	490b      	ldr	r1, [pc, #44]	; (186e4 <net_buf_put+0x4c>)
   186b6:	480c      	ldr	r0, [pc, #48]	; (186e8 <net_buf_put+0x50>)
   186b8:	f240 2201 	movw	r2, #513	; 0x201
   186bc:	f00a fcaf 	bl	2301e <assert_print>
   186c0:	f240 2101 	movw	r1, #513	; 0x201
   186c4:	e7f2      	b.n	186ac <net_buf_put+0x14>

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
   186c6:	7953      	ldrb	r3, [r2, #5]
   186c8:	f043 0301 	orr.w	r3, r3, #1
   186cc:	7153      	strb	r3, [r2, #5]
   186ce:	4622      	mov	r2, r4
	for (tail = buf; tail->frags; tail = tail->frags) {
   186d0:	6814      	ldr	r4, [r2, #0]
   186d2:	2c00      	cmp	r4, #0
   186d4:	d1f7      	bne.n	186c6 <net_buf_put+0x2e>
	}

	k_fifo_put_list(fifo, buf, tail);
}
   186d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put_list(fifo, buf, tail);
   186da:	f004 bbb9 	b.w	1ce50 <k_queue_append_list>
   186de:	460a      	mov	r2, r1
   186e0:	e7f6      	b.n	186d0 <net_buf_put+0x38>
   186e2:	bf00      	nop
   186e4:	00027f17 	.word	0x00027f17
   186e8:	00026718 	.word	0x00026718

000186ec <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   186ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   186f0:	4605      	mov	r5, r0
   186f2:	b328      	cbz	r0, 18740 <net_buf_unref+0x54>
   186f4:	4e1b      	ldr	r6, [pc, #108]	; (18764 <net_buf_unref+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   186f6:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   186f8:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   186fc:	462c      	mov	r4, r5
   186fe:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   18700:	7923      	ldrb	r3, [r4, #4]
   18702:	3b01      	subs	r3, #1
   18704:	b2db      	uxtb	r3, r3
   18706:	7123      	strb	r3, [r4, #4]
   18708:	b9c3      	cbnz	r3, 1873c <net_buf_unref+0x50>
		if (buf->__buf) {
   1870a:	6921      	ldr	r1, [r4, #16]
   1870c:	b159      	cbz	r1, 18726 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1870e:	7963      	ldrb	r3, [r4, #5]
   18710:	079b      	lsls	r3, r3, #30
   18712:	d407      	bmi.n	18724 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18714:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   18716:	fb08 6303 	mla	r3, r8, r3, r6
   1871a:	4620      	mov	r0, r4
   1871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1871e:	681b      	ldr	r3, [r3, #0]
   18720:	689b      	ldr	r3, [r3, #8]
   18722:	4798      	blx	r3
			buf->__buf = NULL;
   18724:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   18726:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   18728:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1872a:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1872e:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   18730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18732:	b183      	cbz	r3, 18756 <net_buf_unref+0x6a>
			pool->destroy(buf);
   18734:	4620      	mov	r0, r4
   18736:	4798      	blx	r3
	while (buf) {
   18738:	2d00      	cmp	r5, #0
   1873a:	d1df      	bne.n	186fc <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1873c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   18740:	4909      	ldr	r1, [pc, #36]	; (18768 <net_buf_unref+0x7c>)
   18742:	480a      	ldr	r0, [pc, #40]	; (1876c <net_buf_unref+0x80>)
   18744:	f44f 7204 	mov.w	r2, #528	; 0x210
   18748:	f00a fc69 	bl	2301e <assert_print>
   1874c:	4806      	ldr	r0, [pc, #24]	; (18768 <net_buf_unref+0x7c>)
   1874e:	f44f 7104 	mov.w	r1, #528	; 0x210
   18752:	f00a fc5d 	bl	23010 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   18756:	4621      	mov	r1, r4
   18758:	fb00 6008 	mla	r0, r0, r8, r6
   1875c:	f00c fdc8 	bl	252f0 <k_queue_prepend>
}
   18760:	e7ea      	b.n	18738 <net_buf_unref+0x4c>
   18762:	bf00      	nop
   18764:	20000ae8 	.word	0x20000ae8
   18768:	00027f17 	.word	0x00027f17
   1876c:	00026718 	.word	0x00026718

00018770 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   18770:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   18772:	b950      	cbnz	r0, 1878a <net_buf_ref+0x1a>
   18774:	4907      	ldr	r1, [pc, #28]	; (18794 <net_buf_ref+0x24>)
   18776:	4808      	ldr	r0, [pc, #32]	; (18798 <net_buf_ref+0x28>)
   18778:	f240 223f 	movw	r2, #575	; 0x23f
   1877c:	f00a fc4f 	bl	2301e <assert_print>
   18780:	4804      	ldr	r0, [pc, #16]	; (18794 <net_buf_ref+0x24>)
   18782:	f240 213f 	movw	r1, #575	; 0x23f
   18786:	f00a fc43 	bl	23010 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1878a:	7902      	ldrb	r2, [r0, #4]
   1878c:	3201      	adds	r2, #1
   1878e:	7102      	strb	r2, [r0, #4]
	return buf;
}
   18790:	bd08      	pop	{r3, pc}
   18792:	bf00      	nop
   18794:	00027f17 	.word	0x00027f17
   18798:	00026718 	.word	0x00026718

0001879c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1879c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1879e:	4603      	mov	r3, r0
   187a0:	b950      	cbnz	r0, 187b8 <net_buf_frag_last+0x1c>
   187a2:	4908      	ldr	r1, [pc, #32]	; (187c4 <net_buf_frag_last+0x28>)
   187a4:	4808      	ldr	r0, [pc, #32]	; (187c8 <net_buf_frag_last+0x2c>)
   187a6:	f44f 721f 	mov.w	r2, #636	; 0x27c
   187aa:	f00a fc38 	bl	2301e <assert_print>
   187ae:	4805      	ldr	r0, [pc, #20]	; (187c4 <net_buf_frag_last+0x28>)
   187b0:	f44f 711f 	mov.w	r1, #636	; 0x27c
   187b4:	f00a fc2c 	bl	23010 <assert_post_action>

	while (buf->frags) {
   187b8:	4618      	mov	r0, r3
   187ba:	681b      	ldr	r3, [r3, #0]
   187bc:	2b00      	cmp	r3, #0
   187be:	d1fb      	bne.n	187b8 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   187c0:	bd08      	pop	{r3, pc}
   187c2:	bf00      	nop
   187c4:	00027f17 	.word	0x00027f17
   187c8:	00026718 	.word	0x00026718

000187cc <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   187cc:	b570      	push	{r4, r5, r6, lr}
   187ce:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   187d0:	4604      	mov	r4, r0
   187d2:	b950      	cbnz	r0, 187ea <net_buf_frag_insert+0x1e>
   187d4:	490e      	ldr	r1, [pc, #56]	; (18810 <net_buf_frag_insert+0x44>)
   187d6:	480f      	ldr	r0, [pc, #60]	; (18814 <net_buf_frag_insert+0x48>)
   187d8:	f240 2287 	movw	r2, #647	; 0x287
   187dc:	f00a fc1f 	bl	2301e <assert_print>
   187e0:	f240 2187 	movw	r1, #647	; 0x287
	__ASSERT_NO_MSG(frag);
   187e4:	480a      	ldr	r0, [pc, #40]	; (18810 <net_buf_frag_insert+0x44>)
   187e6:	f00a fc13 	bl	23010 <assert_post_action>
   187ea:	b941      	cbnz	r1, 187fe <net_buf_frag_insert+0x32>
   187ec:	4908      	ldr	r1, [pc, #32]	; (18810 <net_buf_frag_insert+0x44>)
   187ee:	4809      	ldr	r0, [pc, #36]	; (18814 <net_buf_frag_insert+0x48>)
   187f0:	f44f 7222 	mov.w	r2, #648	; 0x288
   187f4:	f00a fc13 	bl	2301e <assert_print>
   187f8:	f44f 7122 	mov.w	r1, #648	; 0x288
   187fc:	e7f2      	b.n	187e4 <net_buf_frag_insert+0x18>

	if (parent->frags) {
   187fe:	6806      	ldr	r6, [r0, #0]
   18800:	b11e      	cbz	r6, 1880a <net_buf_frag_insert+0x3e>
		net_buf_frag_last(frag)->frags = parent->frags;
   18802:	4608      	mov	r0, r1
   18804:	f7ff ffca 	bl	1879c <net_buf_frag_last>
   18808:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1880a:	6025      	str	r5, [r4, #0]
}
   1880c:	bd70      	pop	{r4, r5, r6, pc}
   1880e:	bf00      	nop
   18810:	00027f17 	.word	0x00027f17
   18814:	00026718 	.word	0x00026718

00018818 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   18818:	b538      	push	{r3, r4, r5, lr}
   1881a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1881c:	460c      	mov	r4, r1
   1881e:	b951      	cbnz	r1, 18836 <net_buf_frag_add+0x1e>
   18820:	490b      	ldr	r1, [pc, #44]	; (18850 <net_buf_frag_add+0x38>)
   18822:	480c      	ldr	r0, [pc, #48]	; (18854 <net_buf_frag_add+0x3c>)
   18824:	f240 2293 	movw	r2, #659	; 0x293
   18828:	f00a fbf9 	bl	2301e <assert_print>
   1882c:	4808      	ldr	r0, [pc, #32]	; (18850 <net_buf_frag_add+0x38>)
   1882e:	f240 2193 	movw	r1, #659	; 0x293
   18832:	f00a fbed 	bl	23010 <assert_post_action>

	if (!head) {
   18836:	b920      	cbnz	r0, 18842 <net_buf_frag_add+0x2a>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   18838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1883c:	4608      	mov	r0, r1
   1883e:	f7ff bf97 	b.w	18770 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   18842:	f7ff ffab 	bl	1879c <net_buf_frag_last>
   18846:	4621      	mov	r1, r4
   18848:	f7ff ffc0 	bl	187cc <net_buf_frag_insert>
}
   1884c:	4628      	mov	r0, r5
   1884e:	bd38      	pop	{r3, r4, r5, pc}
   18850:	00027f17 	.word	0x00027f17
   18854:	00026718 	.word	0x00026718

00018858 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   18858:	b508      	push	{r3, lr}
   1885a:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1885c:	6800      	ldr	r0, [r0, #0]
   1885e:	689a      	ldr	r2, [r3, #8]
   18860:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   18862:	4291      	cmp	r1, r2
   18864:	d90a      	bls.n	1887c <net_buf_simple_push+0x24>
   18866:	4908      	ldr	r1, [pc, #32]	; (18888 <net_buf_simple_push+0x30>)
   18868:	4808      	ldr	r0, [pc, #32]	; (1888c <net_buf_simple_push+0x34>)
   1886a:	f240 4217 	movw	r2, #1047	; 0x417
   1886e:	f00a fbd6 	bl	2301e <assert_print>
   18872:	4805      	ldr	r0, [pc, #20]	; (18888 <net_buf_simple_push+0x30>)
   18874:	f240 4117 	movw	r1, #1047	; 0x417
   18878:	f00a fbca 	bl	23010 <assert_post_action>
	buf->len += len;
   1887c:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1887e:	1a40      	subs	r0, r0, r1
	buf->len += len;
   18880:	4411      	add	r1, r2
	buf->data -= len;
   18882:	6018      	str	r0, [r3, #0]
	buf->len += len;
   18884:	8099      	strh	r1, [r3, #4]
}
   18886:	bd08      	pop	{r3, pc}
   18888:	00027f17 	.word	0x00027f17
   1888c:	00026718 	.word	0x00026718

00018890 <net_buf_simple_pull>:
{
   18890:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   18892:	8882      	ldrh	r2, [r0, #4]
   18894:	428a      	cmp	r2, r1
{
   18896:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   18898:	d20a      	bcs.n	188b0 <net_buf_simple_pull+0x20>
   1889a:	4908      	ldr	r1, [pc, #32]	; (188bc <net_buf_simple_pull+0x2c>)
   1889c:	4808      	ldr	r0, [pc, #32]	; (188c0 <net_buf_simple_pull+0x30>)
   1889e:	f240 4277 	movw	r2, #1143	; 0x477
   188a2:	f00a fbbc 	bl	2301e <assert_print>
   188a6:	4805      	ldr	r0, [pc, #20]	; (188bc <net_buf_simple_pull+0x2c>)
   188a8:	f240 4177 	movw	r1, #1143	; 0x477
   188ac:	f00a fbb0 	bl	23010 <assert_post_action>
	buf->len -= len;
   188b0:	1a52      	subs	r2, r2, r1
   188b2:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   188b4:	6800      	ldr	r0, [r0, #0]
   188b6:	4408      	add	r0, r1
   188b8:	6018      	str	r0, [r3, #0]
}
   188ba:	bd08      	pop	{r3, pc}
   188bc:	00027f17 	.word	0x00027f17
   188c0:	00026718 	.word	0x00026718

000188c4 <net_buf_simple_pull_mem>:
{
   188c4:	b508      	push	{r3, lr}
   188c6:	4603      	mov	r3, r0
	void *data = buf->data;
   188c8:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   188ca:	889a      	ldrh	r2, [r3, #4]
   188cc:	428a      	cmp	r2, r1
   188ce:	d20a      	bcs.n	188e6 <net_buf_simple_pull_mem+0x22>
   188d0:	4907      	ldr	r1, [pc, #28]	; (188f0 <net_buf_simple_pull_mem+0x2c>)
   188d2:	4808      	ldr	r0, [pc, #32]	; (188f4 <net_buf_simple_pull_mem+0x30>)
   188d4:	f240 4283 	movw	r2, #1155	; 0x483
   188d8:	f00a fba1 	bl	2301e <assert_print>
   188dc:	4804      	ldr	r0, [pc, #16]	; (188f0 <net_buf_simple_pull_mem+0x2c>)
   188de:	f240 4183 	movw	r1, #1155	; 0x483
   188e2:	f00a fb95 	bl	23010 <assert_post_action>
	buf->len -= len;
   188e6:	1a52      	subs	r2, r2, r1
	buf->data += len;
   188e8:	4401      	add	r1, r0
	buf->len -= len;
   188ea:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   188ec:	6019      	str	r1, [r3, #0]
}
   188ee:	bd08      	pop	{r3, pc}
   188f0:	00027f17 	.word	0x00027f17
   188f4:	00026718 	.word	0x00026718

000188f8 <net_buf_simple_add>:
{
   188f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   188fa:	8885      	ldrh	r5, [r0, #4]
   188fc:	6803      	ldr	r3, [r0, #0]
   188fe:	460e      	mov	r6, r1
   18900:	4604      	mov	r4, r0
   18902:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   18904:	f00c f834 	bl	24970 <net_buf_simple_tailroom>
   18908:	42b0      	cmp	r0, r6
   1890a:	d20a      	bcs.n	18922 <net_buf_simple_add+0x2a>
   1890c:	4907      	ldr	r1, [pc, #28]	; (1892c <net_buf_simple_add+0x34>)
   1890e:	4808      	ldr	r0, [pc, #32]	; (18930 <net_buf_simple_add+0x38>)
   18910:	f44f 724a 	mov.w	r2, #808	; 0x328
   18914:	f00a fb83 	bl	2301e <assert_print>
   18918:	4804      	ldr	r0, [pc, #16]	; (1892c <net_buf_simple_add+0x34>)
   1891a:	f44f 714a 	mov.w	r1, #808	; 0x328
   1891e:	f00a fb77 	bl	23010 <assert_post_action>
	buf->len += len;
   18922:	4435      	add	r5, r6
   18924:	80a5      	strh	r5, [r4, #4]
}
   18926:	4638      	mov	r0, r7
   18928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1892a:	bf00      	nop
   1892c:	00027f17 	.word	0x00027f17
   18930:	00026718 	.word	0x00026718

00018934 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   18934:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   18936:	4804      	ldr	r0, [pc, #16]	; (18948 <xoshiro128_initialize+0x14>)
   18938:	f00c fc57 	bl	251ea <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1893c:	2800      	cmp	r0, #0
}
   1893e:	bf0c      	ite	eq
   18940:	f06f 0012 	mvneq.w	r0, #18
   18944:	2000      	movne	r0, #0
   18946:	bd08      	pop	{r3, pc}
   18948:	00025730 	.word	0x00025730

0001894c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1894c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1894e:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   18950:	490a      	ldr	r1, [pc, #40]	; (1897c <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18952:	4a0b      	ldr	r2, [pc, #44]	; (18980 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   18954:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18956:	2340      	movs	r3, #64	; 0x40
   18958:	9300      	str	r3, [sp, #0]
   1895a:	1149      	asrs	r1, r1, #5
{
   1895c:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1895e:	4623      	mov	r3, r4
   18960:	4808      	ldr	r0, [pc, #32]	; (18984 <onoff_start+0x38>)
   18962:	f00c f833 	bl	249cc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   18966:	1e01      	subs	r1, r0, #0
   18968:	da05      	bge.n	18976 <onoff_start+0x2a>
		notify(mgr, err);
   1896a:	4628      	mov	r0, r5
   1896c:	4623      	mov	r3, r4
	}
}
   1896e:	b003      	add	sp, #12
   18970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   18974:	4718      	bx	r3
}
   18976:	b003      	add	sp, #12
   18978:	bd30      	pop	{r4, r5, pc}
   1897a:	bf00      	nop
   1897c:	20002d78 	.word	0x20002d78
   18980:	00024a37 	.word	0x00024a37
   18984:	000256b8 	.word	0x000256b8

00018988 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   18988:	b2c9      	uxtb	r1, r1
   1898a:	2901      	cmp	r1, #1
{
   1898c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1898e:	d908      	bls.n	189a2 <get_status+0x1a>
   18990:	4908      	ldr	r1, [pc, #32]	; (189b4 <get_status+0x2c>)
   18992:	4809      	ldr	r0, [pc, #36]	; (189b8 <get_status+0x30>)
   18994:	227a      	movs	r2, #122	; 0x7a
   18996:	f00a fb42 	bl	2301e <assert_print>
   1899a:	4806      	ldr	r0, [pc, #24]	; (189b4 <get_status+0x2c>)
   1899c:	217a      	movs	r1, #122	; 0x7a
   1899e:	f00a fb37 	bl	23010 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   189a2:	6903      	ldr	r3, [r0, #16]
   189a4:	220c      	movs	r2, #12
   189a6:	fb01 3302 	mla	r3, r1, r2, r3
   189aa:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   189ac:	f000 0007 	and.w	r0, r0, #7
   189b0:	bd08      	pop	{r3, pc}
   189b2:	bf00      	nop
   189b4:	00027f43 	.word	0x00027f43
   189b8:	00026718 	.word	0x00026718

000189bc <stop>:
{
   189bc:	b570      	push	{r4, r5, r6, lr}
   189be:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   189c0:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   189c2:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   189c4:	d90a      	bls.n	189dc <stop+0x20>
   189c6:	4918      	ldr	r1, [pc, #96]	; (18a28 <stop+0x6c>)
   189c8:	4818      	ldr	r0, [pc, #96]	; (18a2c <stop+0x70>)
   189ca:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   189ce:	f00a fb26 	bl	2301e <assert_print>
   189d2:	4815      	ldr	r0, [pc, #84]	; (18a28 <stop+0x6c>)
   189d4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   189d8:	f00a fb1a 	bl	23010 <assert_post_action>
	__asm__ volatile(
   189dc:	f04f 0440 	mov.w	r4, #64	; 0x40
   189e0:	f3ef 8511 	mrs	r5, BASEPRI
   189e4:	f384 8812 	msr	BASEPRI_MAX, r4
   189e8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   189ec:	260c      	movs	r6, #12
   189ee:	fb06 3401 	mla	r4, r6, r1, r3
   189f2:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   189f4:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   189f8:	d008      	beq.n	18a0c <stop+0x50>
   189fa:	42a2      	cmp	r2, r4
   189fc:	d006      	beq.n	18a0c <stop+0x50>
	__asm__ volatile(
   189fe:	f385 8811 	msr	BASEPRI, r5
   18a02:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   18a06:	f04f 30ff 	mov.w	r0, #4294967295
}
   18a0a:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   18a0c:	4371      	muls	r1, r6
   18a0e:	440b      	add	r3, r1
   18a10:	2201      	movs	r2, #1
   18a12:	649a      	str	r2, [r3, #72]	; 0x48
   18a14:	f385 8811 	msr	BASEPRI, r5
   18a18:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   18a1c:	6843      	ldr	r3, [r0, #4]
   18a1e:	440b      	add	r3, r1
   18a20:	685b      	ldr	r3, [r3, #4]
   18a22:	4798      	blx	r3
	return 0;
   18a24:	2000      	movs	r0, #0
   18a26:	e7f0      	b.n	18a0a <stop+0x4e>
   18a28:	00027f43 	.word	0x00027f43
   18a2c:	00026718 	.word	0x00026718

00018a30 <onoff_stop>:
{
   18a30:	b570      	push	{r4, r5, r6, lr}
   18a32:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   18a34:	4906      	ldr	r1, [pc, #24]	; (18a50 <onoff_stop+0x20>)
   18a36:	1a41      	subs	r1, r0, r1
{
   18a38:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   18a3a:	1149      	asrs	r1, r1, #5
   18a3c:	4805      	ldr	r0, [pc, #20]	; (18a54 <onoff_stop+0x24>)
   18a3e:	2240      	movs	r2, #64	; 0x40
   18a40:	f7ff ffbc 	bl	189bc <stop>
	notify(mgr, res);
   18a44:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   18a46:	4601      	mov	r1, r0
	notify(mgr, res);
   18a48:	4620      	mov	r0, r4
}
   18a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   18a4e:	4718      	bx	r3
   18a50:	20002d78 	.word	0x20002d78
   18a54:	000256b8 	.word	0x000256b8

00018a58 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18a58:	2200      	movs	r2, #0
{
   18a5a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18a5c:	2101      	movs	r1, #1
{
   18a5e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18a60:	4610      	mov	r0, r2
   18a62:	f7f9 fe51 	bl	12708 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   18a66:	480f      	ldr	r0, [pc, #60]	; (18aa4 <clk_init+0x4c>)
   18a68:	f002 fa4e 	bl	1af08 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   18a6c:	4b0e      	ldr	r3, [pc, #56]	; (18aa8 <clk_init+0x50>)
   18a6e:	4298      	cmp	r0, r3
   18a70:	d115      	bne.n	18a9e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   18a72:	f00c fafb 	bl	2506c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   18a76:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   18a78:	490c      	ldr	r1, [pc, #48]	; (18aac <clk_init+0x54>)
   18a7a:	4630      	mov	r0, r6
   18a7c:	f00a fa44 	bl	22f08 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   18a80:	2800      	cmp	r0, #0
   18a82:	db0b      	blt.n	18a9c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   18a84:	2501      	movs	r5, #1
   18a86:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   18a88:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   18a8a:	4908      	ldr	r1, [pc, #32]	; (18aac <clk_init+0x54>)
   18a8c:	f104 0020 	add.w	r0, r4, #32
   18a90:	f00a fa3a 	bl	22f08 <onoff_manager_init>
		if (err < 0) {
   18a94:	2800      	cmp	r0, #0
   18a96:	db01      	blt.n	18a9c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   18a98:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   18a9a:	2000      	movs	r0, #0
}
   18a9c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   18a9e:	f06f 0004 	mvn.w	r0, #4
   18aa2:	e7fb      	b.n	18a9c <clk_init+0x44>
   18aa4:	00018ae5 	.word	0x00018ae5
   18aa8:	0bad0000 	.word	0x0bad0000
   18aac:	00025f20 	.word	0x00025f20

00018ab0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   18ab0:	b570      	push	{r4, r5, r6, lr}
   18ab2:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   18ab4:	230c      	movs	r3, #12
   18ab6:	4809      	ldr	r0, [pc, #36]	; (18adc <clkstarted_handle.constprop.0+0x2c>)
   18ab8:	434b      	muls	r3, r1
   18aba:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   18abc:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   18ac0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   18ac2:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   18ac4:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   18ac6:	4418      	add	r0, r3
   18ac8:	f00b ff6d 	bl	249a6 <set_on_state>
	if (callback) {
   18acc:	b12d      	cbz	r5, 18ada <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   18ace:	4632      	mov	r2, r6
   18ad0:	462b      	mov	r3, r5
   18ad2:	4803      	ldr	r0, [pc, #12]	; (18ae0 <clkstarted_handle.constprop.0+0x30>)
}
   18ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   18ad8:	4718      	bx	r3
}
   18ada:	bd70      	pop	{r4, r5, r6, pc}
   18adc:	20002d78 	.word	0x20002d78
   18ae0:	000256b8 	.word	0x000256b8

00018ae4 <clock_event_handler>:
	switch (event) {
   18ae4:	2801      	cmp	r0, #1
{
   18ae6:	b508      	push	{r3, lr}
	switch (event) {
   18ae8:	d006      	beq.n	18af8 <clock_event_handler+0x14>
   18aea:	2803      	cmp	r0, #3
   18aec:	d008      	beq.n	18b00 <clock_event_handler+0x1c>
   18aee:	b990      	cbnz	r0, 18b16 <clock_event_handler+0x32>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   18af0:	4b0e      	ldr	r3, [pc, #56]	; (18b2c <clock_event_handler+0x48>)
   18af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18af4:	075b      	lsls	r3, r3, #29
   18af6:	d117      	bne.n	18b28 <clock_event_handler+0x44>
}
   18af8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   18afc:	f7ff bfd8 	b.w	18ab0 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   18b00:	490b      	ldr	r1, [pc, #44]	; (18b30 <clock_event_handler+0x4c>)
   18b02:	480c      	ldr	r0, [pc, #48]	; (18b34 <clock_event_handler+0x50>)
   18b04:	f240 225f 	movw	r2, #607	; 0x25f
   18b08:	f00a fa89 	bl	2301e <assert_print>
   18b0c:	f240 215f 	movw	r1, #607	; 0x25f
		__ASSERT_NO_MSG(0);
   18b10:	4807      	ldr	r0, [pc, #28]	; (18b30 <clock_event_handler+0x4c>)
   18b12:	f00a fa7d 	bl	23010 <assert_post_action>
   18b16:	4906      	ldr	r1, [pc, #24]	; (18b30 <clock_event_handler+0x4c>)
   18b18:	4806      	ldr	r0, [pc, #24]	; (18b34 <clock_event_handler+0x50>)
   18b1a:	f240 2263 	movw	r2, #611	; 0x263
   18b1e:	f00a fa7e 	bl	2301e <assert_print>
   18b22:	f240 2163 	movw	r1, #611	; 0x263
   18b26:	e7f3      	b.n	18b10 <clock_event_handler+0x2c>
}
   18b28:	bd08      	pop	{r3, pc}
   18b2a:	bf00      	nop
   18b2c:	20002d78 	.word	0x20002d78
   18b30:	00027f43 	.word	0x00027f43
   18b34:	00026718 	.word	0x00026718

00018b38 <generic_hfclk_start>:
{
   18b38:	b508      	push	{r3, lr}
	__asm__ volatile(
   18b3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   18b3e:	f3ef 8111 	mrs	r1, BASEPRI
   18b42:	f383 8812 	msr	BASEPRI_MAX, r3
   18b46:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   18b4a:	4a12      	ldr	r2, [pc, #72]	; (18b94 <generic_hfclk_start+0x5c>)
   18b4c:	6813      	ldr	r3, [r2, #0]
   18b4e:	f043 0002 	orr.w	r0, r3, #2
   18b52:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   18b54:	07da      	lsls	r2, r3, #31
   18b56:	d408      	bmi.n	18b6a <generic_hfclk_start+0x32>
	__asm__ volatile(
   18b58:	f381 8811 	msr	BASEPRI, r1
   18b5c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   18b60:	2001      	movs	r0, #1
}
   18b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   18b66:	f002 b999 	b.w	1ae9c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   18b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18b6e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18b72:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   18b76:	07d3      	lsls	r3, r2, #31
   18b78:	d5ee      	bpl.n	18b58 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   18b7a:	4807      	ldr	r0, [pc, #28]	; (18b98 <generic_hfclk_start+0x60>)
   18b7c:	f00b ff13 	bl	249a6 <set_on_state>
   18b80:	f381 8811 	msr	BASEPRI, r1
   18b84:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   18b88:	2000      	movs	r0, #0
}
   18b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   18b8e:	f7ff bf8f 	b.w	18ab0 <clkstarted_handle.constprop.0>
   18b92:	bf00      	nop
   18b94:	20002dd0 	.word	0x20002dd0
   18b98:	20002dc0 	.word	0x20002dc0

00018b9c <api_blocking_start>:
{
   18b9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   18b9e:	2200      	movs	r2, #0
   18ba0:	2301      	movs	r3, #1
   18ba2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18ba6:	ab04      	add	r3, sp, #16
   18ba8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18bac:	4a09      	ldr	r2, [pc, #36]	; (18bd4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   18bae:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18bb2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   18bb4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18bb8:	f00b ff36 	bl	24a28 <api_start>
	if (err < 0) {
   18bbc:	2800      	cmp	r0, #0
   18bbe:	db05      	blt.n	18bcc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   18bc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   18bc4:	2300      	movs	r3, #0
   18bc6:	4668      	mov	r0, sp
   18bc8:	f004 fa28 	bl	1d01c <z_impl_k_sem_take>
}
   18bcc:	b007      	add	sp, #28
   18bce:	f85d fb04 	ldr.w	pc, [sp], #4
   18bd2:	bf00      	nop
   18bd4:	00024a4f 	.word	0x00024a4f

00018bd8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18bd8:	4b09      	ldr	r3, [pc, #36]	; (18c00 <generic_hfclk_stop+0x28>)
   18bda:	f3bf 8f5b 	dmb	ish
   18bde:	e853 2f00 	ldrex	r2, [r3]
   18be2:	f022 0102 	bic.w	r1, r2, #2
   18be6:	e843 1000 	strex	r0, r1, [r3]
   18bea:	2800      	cmp	r0, #0
   18bec:	d1f7      	bne.n	18bde <generic_hfclk_stop+0x6>
   18bee:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   18bf2:	07d3      	lsls	r3, r2, #31
   18bf4:	d402      	bmi.n	18bfc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   18bf6:	2001      	movs	r0, #1
   18bf8:	f002 b970 	b.w	1aedc <nrfx_clock_stop>
}
   18bfc:	4770      	bx	lr
   18bfe:	bf00      	nop
   18c00:	20002dd0 	.word	0x20002dd0

00018c04 <z_nrf_clock_control_get_onoff>:
}
   18c04:	4b02      	ldr	r3, [pc, #8]	; (18c10 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   18c06:	b2c0      	uxtb	r0, r0
}
   18c08:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   18c0c:	4770      	bx	lr
   18c0e:	bf00      	nop
   18c10:	20002d78 	.word	0x20002d78

00018c14 <z_nrf_clock_control_lf_on>:
{
   18c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18c18:	4944      	ldr	r1, [pc, #272]	; (18d2c <z_nrf_clock_control_lf_on+0x118>)
   18c1a:	f3bf 8f5b 	dmb	ish
   18c1e:	4606      	mov	r6, r0
   18c20:	2201      	movs	r2, #1
   18c22:	e851 3f00 	ldrex	r3, [r1]
   18c26:	e841 2000 	strex	r0, r2, [r1]
   18c2a:	2800      	cmp	r0, #0
   18c2c:	d1f9      	bne.n	18c22 <z_nrf_clock_control_lf_on+0xe>
   18c2e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   18c32:	b99b      	cbnz	r3, 18c5c <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   18c34:	493e      	ldr	r1, [pc, #248]	; (18d30 <z_nrf_clock_control_lf_on+0x11c>)
		err = onoff_request(mgr, &cli);
   18c36:	483f      	ldr	r0, [pc, #252]	; (18d34 <z_nrf_clock_control_lf_on+0x120>)
   18c38:	604b      	str	r3, [r1, #4]
   18c3a:	60cb      	str	r3, [r1, #12]
   18c3c:	608a      	str	r2, [r1, #8]
   18c3e:	f7f8 fc99 	bl	11574 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   18c42:	2800      	cmp	r0, #0
   18c44:	da0a      	bge.n	18c5c <z_nrf_clock_control_lf_on+0x48>
   18c46:	493c      	ldr	r1, [pc, #240]	; (18d38 <z_nrf_clock_control_lf_on+0x124>)
   18c48:	483c      	ldr	r0, [pc, #240]	; (18d3c <z_nrf_clock_control_lf_on+0x128>)
   18c4a:	f240 2221 	movw	r2, #545	; 0x221
   18c4e:	f00a f9e6 	bl	2301e <assert_print>
   18c52:	f240 2121 	movw	r1, #545	; 0x221
		__ASSERT_NO_MSG(false);
   18c56:	4838      	ldr	r0, [pc, #224]	; (18d38 <z_nrf_clock_control_lf_on+0x124>)
   18c58:	f00a f9da 	bl	23010 <assert_post_action>
	switch (start_mode) {
   18c5c:	b376      	cbz	r6, 18cbc <z_nrf_clock_control_lf_on+0xa8>
   18c5e:	1e73      	subs	r3, r6, #1
   18c60:	2b01      	cmp	r3, #1
   18c62:	d859      	bhi.n	18d18 <z_nrf_clock_control_lf_on+0x104>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   18c64:	2e01      	cmp	r6, #1
   18c66:	d107      	bne.n	18c78 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   18c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18c6c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   18c70:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   18c74:	2b01      	cmp	r3, #1
   18c76:	d021      	beq.n	18cbc <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18c78:	f00c faf3 	bl	25262 <k_is_in_isr>
   18c7c:	4605      	mov	r5, r0
   18c7e:	b9f8      	cbnz	r0, 18cc0 <z_nrf_clock_control_lf_on+0xac>
	return !z_sys_post_kernel;
   18c80:	4b2f      	ldr	r3, [pc, #188]	; (18d40 <z_nrf_clock_control_lf_on+0x12c>)
   18c82:	781b      	ldrb	r3, [r3, #0]
   18c84:	b1e3      	cbz	r3, 18cc0 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENCLR = mask;
   18c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18c8a:	2202      	movs	r2, #2
   18c8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   18c90:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18c92:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 18d44 <z_nrf_clock_control_lf_on+0x130>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18c96:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   18c9a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18c9e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   18ca2:	03d2      	lsls	r2, r2, #15
   18ca4:	d516      	bpl.n	18cd4 <z_nrf_clock_control_lf_on+0xc0>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   18ca6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   18caa:	2b01      	cmp	r3, #1
   18cac:	d001      	beq.n	18cb2 <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   18cae:	2e01      	cmp	r6, #1
   18cb0:	d110      	bne.n	18cd4 <z_nrf_clock_control_lf_on+0xc0>
	if (isr_mode) {
   18cb2:	b35d      	cbz	r5, 18d0c <z_nrf_clock_control_lf_on+0xf8>
   18cb4:	f387 8811 	msr	BASEPRI, r7
   18cb8:	f3bf 8f6f 	isb	sy
}
   18cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   18cc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   18cc4:	f3ef 8711 	mrs	r7, BASEPRI
   18cc8:	f383 8812 	msr	BASEPRI_MAX, r3
   18ccc:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18cd0:	2501      	movs	r5, #1
   18cd2:	e7de      	b.n	18c92 <z_nrf_clock_control_lf_on+0x7e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   18cd4:	b1ad      	cbz	r5, 18d02 <z_nrf_clock_control_lf_on+0xee>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   18cd6:	4638      	mov	r0, r7
   18cd8:	f7f9 fcae 	bl	12638 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   18cdc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   18ce0:	2b00      	cmp	r3, #0
   18ce2:	d1da      	bne.n	18c9a <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18ce4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   18ce8:	2a00      	cmp	r2, #0
   18cea:	d0d6      	beq.n	18c9a <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18cec:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   18cf0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   18cf4:	2301      	movs	r3, #1
   18cf6:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   18cfa:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18cfe:	60a3      	str	r3, [r4, #8]
}
   18d00:	e7cb      	b.n	18c9a <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   18d02:	2100      	movs	r1, #0
   18d04:	2021      	movs	r0, #33	; 0x21
   18d06:	f005 fcdb 	bl	1e6c0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   18d0a:	e7e7      	b.n	18cdc <z_nrf_clock_control_lf_on+0xc8>
    p_reg->INTENSET = mask;
   18d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18d10:	2202      	movs	r2, #2
   18d12:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   18d16:	e7d1      	b.n	18cbc <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   18d18:	4907      	ldr	r1, [pc, #28]	; (18d38 <z_nrf_clock_control_lf_on+0x124>)
   18d1a:	4808      	ldr	r0, [pc, #32]	; (18d3c <z_nrf_clock_control_lf_on+0x128>)
   18d1c:	f240 2233 	movw	r2, #563	; 0x233
   18d20:	f00a f97d 	bl	2301e <assert_print>
   18d24:	f240 2133 	movw	r1, #563	; 0x233
   18d28:	e795      	b.n	18c56 <z_nrf_clock_control_lf_on+0x42>
   18d2a:	bf00      	nop
   18d2c:	20002d74 	.word	0x20002d74
   18d30:	20002d64 	.word	0x20002d64
   18d34:	20002d98 	.word	0x20002d98
   18d38:	00027f43 	.word	0x00027f43
   18d3c:	00026718 	.word	0x00026718
   18d40:	200058b7 	.word	0x200058b7
   18d44:	e000e100 	.word	0xe000e100

00018d48 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   18d48:	b508      	push	{r3, lr}
   18d4a:	4807      	ldr	r0, [pc, #28]	; (18d68 <uart_console_init+0x20>)
   18d4c:	f00c fa4d 	bl	251ea <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   18d50:	b138      	cbz	r0, 18d62 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   18d52:	4806      	ldr	r0, [pc, #24]	; (18d6c <uart_console_init+0x24>)
   18d54:	f7fa f9cc 	bl	130f0 <__stdout_hook_install>
	__printk_hook_install(console_out);
   18d58:	4804      	ldr	r0, [pc, #16]	; (18d6c <uart_console_init+0x24>)
   18d5a:	f7f8 f901 	bl	10f60 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   18d5e:	2000      	movs	r0, #0
}
   18d60:	bd08      	pop	{r3, pc}
		return -ENODEV;
   18d62:	f06f 0012 	mvn.w	r0, #18
   18d66:	e7fb      	b.n	18d60 <uart_console_init+0x18>
   18d68:	00025760 	.word	0x00025760
   18d6c:	00018d71 	.word	0x00018d71

00018d70 <console_out>:
	if ('\n' == c) {
   18d70:	280a      	cmp	r0, #10
{
   18d72:	b538      	push	{r3, r4, r5, lr}
   18d74:	4d07      	ldr	r5, [pc, #28]	; (18d94 <console_out+0x24>)
   18d76:	4604      	mov	r4, r0
	if ('\n' == c) {
   18d78:	d104      	bne.n	18d84 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   18d7a:	68ab      	ldr	r3, [r5, #8]
   18d7c:	210d      	movs	r1, #13
   18d7e:	685b      	ldr	r3, [r3, #4]
   18d80:	4628      	mov	r0, r5
   18d82:	4798      	blx	r3
   18d84:	68ab      	ldr	r3, [r5, #8]
   18d86:	4803      	ldr	r0, [pc, #12]	; (18d94 <console_out+0x24>)
   18d88:	685b      	ldr	r3, [r3, #4]
   18d8a:	b2e1      	uxtb	r1, r4
   18d8c:	4798      	blx	r3
}
   18d8e:	4620      	mov	r0, r4
   18d90:	bd38      	pop	{r3, r4, r5, pc}
   18d92:	bf00      	nop
   18d94:	00025760 	.word	0x00025760

00018d98 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   18d98:	b510      	push	{r4, lr}
	return port->data;
   18d9a:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   18d9c:	b941      	cbnz	r1, 18db0 <gpio_nrfx_manage_callback+0x18>
   18d9e:	491c      	ldr	r1, [pc, #112]	; (18e10 <gpio_nrfx_manage_callback+0x78>)
   18da0:	481c      	ldr	r0, [pc, #112]	; (18e14 <gpio_nrfx_manage_callback+0x7c>)
   18da2:	222a      	movs	r2, #42	; 0x2a
   18da4:	f00a f93b 	bl	2301e <assert_print>
   18da8:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   18daa:	4819      	ldr	r0, [pc, #100]	; (18e10 <gpio_nrfx_manage_callback+0x78>)
   18dac:	f00a f930 	bl	23010 <assert_post_action>
   18db0:	6848      	ldr	r0, [r1, #4]
   18db2:	b930      	cbnz	r0, 18dc2 <gpio_nrfx_manage_callback+0x2a>
   18db4:	4916      	ldr	r1, [pc, #88]	; (18e10 <gpio_nrfx_manage_callback+0x78>)
   18db6:	4817      	ldr	r0, [pc, #92]	; (18e14 <gpio_nrfx_manage_callback+0x7c>)
   18db8:	222b      	movs	r2, #43	; 0x2b
   18dba:	f00a f930 	bl	2301e <assert_print>
   18dbe:	212b      	movs	r1, #43	; 0x2b
   18dc0:	e7f3      	b.n	18daa <gpio_nrfx_manage_callback+0x12>
	return list->head;
   18dc2:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   18dc4:	b1f8      	cbz	r0, 18e06 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18dc6:	4288      	cmp	r0, r1
   18dc8:	d119      	bne.n	18dfe <gpio_nrfx_manage_callback+0x66>
Z_GENLIST_REMOVE(slist, snode)
   18dca:	689c      	ldr	r4, [r3, #8]
	return node->next;
   18dcc:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   18dce:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   18dd0:	42a1      	cmp	r1, r4
   18dd2:	d100      	bne.n	18dd6 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   18dd4:	6098      	str	r0, [r3, #8]
	parent->next = child;
   18dd6:	2000      	movs	r0, #0
   18dd8:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   18dda:	b12a      	cbz	r2, 18de8 <gpio_nrfx_manage_callback+0x50>
	return list->head;
   18ddc:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   18dde:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   18de0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   18de2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   18de4:	b902      	cbnz	r2, 18de8 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   18de6:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   18de8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   18dea:	e010      	b.n	18e0e <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18dec:	4281      	cmp	r1, r0
   18dee:	d106      	bne.n	18dfe <gpio_nrfx_manage_callback+0x66>
	return node->next;
   18df0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   18df2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   18df4:	6898      	ldr	r0, [r3, #8]
   18df6:	4281      	cmp	r1, r0
   18df8:	d1ed      	bne.n	18dd6 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   18dfa:	609c      	str	r4, [r3, #8]
}
   18dfc:	e7eb      	b.n	18dd6 <gpio_nrfx_manage_callback+0x3e>
	return node->next;
   18dfe:	4604      	mov	r4, r0
   18e00:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18e02:	2800      	cmp	r0, #0
   18e04:	d1f2      	bne.n	18dec <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   18e06:	2a00      	cmp	r2, #0
   18e08:	d1e8      	bne.n	18ddc <gpio_nrfx_manage_callback+0x44>
				return -EINVAL;
   18e0a:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   18e0e:	bd10      	pop	{r4, pc}
   18e10:	00027fa9 	.word	0x00027fa9
   18e14:	00026718 	.word	0x00026718

00018e18 <gpio_nrfx_pin_interrupt_configure>:
{
   18e18:	b530      	push	{r4, r5, lr}
	return port->config;
   18e1a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   18e1c:	7b05      	ldrb	r5, [r0, #12]
   18e1e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   18e22:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   18e26:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   18e28:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   18e2c:	d105      	bne.n	18e3a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   18e2e:	4620      	mov	r0, r4
   18e30:	f002 fc62 	bl	1b6f8 <nrfx_gpiote_trigger_disable>
		return 0;
   18e34:	2000      	movs	r0, #0
}
   18e36:	b005      	add	sp, #20
   18e38:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   18e3a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   18e3c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   18e40:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   18e44:	d114      	bne.n	18e70 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   18e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   18e4a:	bf0c      	ite	eq
   18e4c:	2304      	moveq	r3, #4
   18e4e:	2305      	movne	r3, #5
   18e50:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   18e54:	2300      	movs	r3, #0
   18e56:	4619      	mov	r1, r3
   18e58:	aa02      	add	r2, sp, #8
   18e5a:	4620      	mov	r0, r4
   18e5c:	f002 fa5e 	bl	1b31c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   18e60:	4b2b      	ldr	r3, [pc, #172]	; (18f10 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   18e62:	4298      	cmp	r0, r3
   18e64:	d150      	bne.n	18f08 <gpio_nrfx_pin_interrupt_configure+0xf0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   18e66:	2101      	movs	r1, #1
   18e68:	4620      	mov	r0, r4
   18e6a:	f002 fbdf 	bl	1b62c <nrfx_gpiote_trigger_enable>
	return 0;
   18e6e:	e7e1      	b.n	18e34 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   18e70:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   18e74:	d023      	beq.n	18ebe <gpio_nrfx_pin_interrupt_configure+0xa6>
   18e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   18e7a:	bf14      	ite	ne
   18e7c:	2301      	movne	r3, #1
   18e7e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   18e80:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   18e84:	6883      	ldr	r3, [r0, #8]
   18e86:	40cb      	lsrs	r3, r1
   18e88:	07d8      	lsls	r0, r3, #31
   18e8a:	d4e3      	bmi.n	18e54 <gpio_nrfx_pin_interrupt_configure+0x3c>
   18e8c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   18e90:	d1e0      	bne.n	18e54 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   18e92:	0962      	lsrs	r2, r4, #5
   18e94:	f004 031f 	and.w	r3, r4, #31
   18e98:	d013      	beq.n	18ec2 <gpio_nrfx_pin_interrupt_configure+0xaa>
   18e9a:	2a01      	cmp	r2, #1
   18e9c:	d104      	bne.n	18ea8 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   18e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18ea2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   18ea4:	07d1      	lsls	r1, r2, #31
   18ea6:	d414      	bmi.n	18ed2 <gpio_nrfx_pin_interrupt_configure+0xba>
   18ea8:	491a      	ldr	r1, [pc, #104]	; (18f14 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   18eaa:	481b      	ldr	r0, [pc, #108]	; (18f18 <gpio_nrfx_pin_interrupt_configure+0x100>)
   18eac:	f240 2247 	movw	r2, #583	; 0x247
   18eb0:	f00a f8b5 	bl	2301e <assert_print>
   18eb4:	4817      	ldr	r0, [pc, #92]	; (18f14 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   18eb6:	f240 2147 	movw	r1, #583	; 0x247
   18eba:	f00a f8a9 	bl	23010 <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   18ebe:	2303      	movs	r3, #3
   18ec0:	e7de      	b.n	18e80 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   18ec2:	f04f 32ff 	mov.w	r2, #4294967295
   18ec6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   18ec8:	07d2      	lsls	r2, r2, #31
   18eca:	d5ed      	bpl.n	18ea8 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   18ecc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18ed0:	e000      	b.n	18ed4 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   18ed2:	4a12      	ldr	r2, [pc, #72]	; (18f1c <gpio_nrfx_pin_interrupt_configure+0x104>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   18ed4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   18edc:	07db      	lsls	r3, r3, #31
   18ede:	d4b9      	bmi.n	18e54 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   18ee0:	f10d 0507 	add.w	r5, sp, #7
   18ee4:	4629      	mov	r1, r5
   18ee6:	4620      	mov	r0, r4
   18ee8:	f002 fb3c 	bl	1b564 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   18eec:	4b0c      	ldr	r3, [pc, #48]	; (18f20 <gpio_nrfx_pin_interrupt_configure+0x108>)
   18eee:	4298      	cmp	r0, r3
   18ef0:	d001      	beq.n	18ef6 <gpio_nrfx_pin_interrupt_configure+0xde>
		trigger_config.p_in_channel = &ch;
   18ef2:	9503      	str	r5, [sp, #12]
   18ef4:	e7ae      	b.n	18e54 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   18ef6:	4628      	mov	r0, r5
   18ef8:	f002 fb92 	bl	1b620 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   18efc:	4b04      	ldr	r3, [pc, #16]	; (18f10 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   18efe:	4298      	cmp	r0, r3
   18f00:	d0f7      	beq.n	18ef2 <gpio_nrfx_pin_interrupt_configure+0xda>
				return -ENOMEM;
   18f02:	f06f 000b 	mvn.w	r0, #11
   18f06:	e796      	b.n	18e36 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   18f08:	f06f 0015 	mvn.w	r0, #21
   18f0c:	e793      	b.n	18e36 <gpio_nrfx_pin_interrupt_configure+0x1e>
   18f0e:	bf00      	nop
   18f10:	0bad0000 	.word	0x0bad0000
   18f14:	00027fe5 	.word	0x00027fe5
   18f18:	00026718 	.word	0x00026718
   18f1c:	50000300 	.word	0x50000300
   18f20:	0bad0004 	.word	0x0bad0004

00018f24 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   18f24:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   18f26:	f002 fb6b 	bl	1b600 <nrfx_gpiote_is_init>
   18f2a:	4604      	mov	r4, r0
   18f2c:	b968      	cbnz	r0, 18f4a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   18f2e:	f002 fb3f 	bl	1b5b0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   18f32:	4b08      	ldr	r3, [pc, #32]	; (18f54 <gpio_nrfx_init+0x30>)
   18f34:	4298      	cmp	r0, r3
   18f36:	d10a      	bne.n	18f4e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   18f38:	4807      	ldr	r0, [pc, #28]	; (18f58 <gpio_nrfx_init+0x34>)
   18f3a:	4621      	mov	r1, r4
   18f3c:	f002 fb0c 	bl	1b558 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   18f40:	4622      	mov	r2, r4
   18f42:	2105      	movs	r1, #5
   18f44:	2006      	movs	r0, #6
   18f46:	f7f9 fbdf 	bl	12708 <z_arm_irq_priority_set>
		return 0;
   18f4a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   18f4c:	bd10      	pop	{r4, pc}
		return -EIO;
   18f4e:	f06f 0004 	mvn.w	r0, #4
   18f52:	e7fb      	b.n	18f4c <gpio_nrfx_init+0x28>
   18f54:	0bad0000 	.word	0x0bad0000
   18f58:	00018f5d 	.word	0x00018f5d

00018f5c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   18f5c:	0942      	lsrs	r2, r0, #5
{
   18f5e:	b570      	push	{r4, r5, r6, lr}
   18f60:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   18f62:	d002      	beq.n	18f6a <nrfx_gpio_handler+0xe>
   18f64:	2a01      	cmp	r2, #1
   18f66:	d01a      	beq.n	18f9e <nrfx_gpio_handler+0x42>
}
   18f68:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   18f6a:	4e12      	ldr	r6, [pc, #72]	; (18fb4 <nrfx_gpio_handler+0x58>)
	gpio_fire_callbacks(list, port, BIT(pin));
   18f6c:	6932      	ldr	r2, [r6, #16]
   18f6e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18f70:	2900      	cmp	r1, #0
   18f72:	d0f9      	beq.n	18f68 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   18f74:	f003 031f 	and.w	r3, r3, #31
   18f78:	2501      	movs	r5, #1
	return node->next;
   18f7a:	680c      	ldr	r4, [r1, #0]
   18f7c:	409d      	lsls	r5, r3
   18f7e:	2900      	cmp	r1, #0
   18f80:	d0f2      	beq.n	18f68 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   18f82:	688a      	ldr	r2, [r1, #8]
   18f84:	402a      	ands	r2, r5
   18f86:	d00e      	beq.n	18fa6 <nrfx_gpio_handler+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
   18f88:	684b      	ldr	r3, [r1, #4]
   18f8a:	b953      	cbnz	r3, 18fa2 <nrfx_gpio_handler+0x46>
   18f8c:	490a      	ldr	r1, [pc, #40]	; (18fb8 <nrfx_gpio_handler+0x5c>)
   18f8e:	480b      	ldr	r0, [pc, #44]	; (18fbc <nrfx_gpio_handler+0x60>)
   18f90:	224d      	movs	r2, #77	; 0x4d
   18f92:	f00a f844 	bl	2301e <assert_print>
   18f96:	4808      	ldr	r0, [pc, #32]	; (18fb8 <nrfx_gpio_handler+0x5c>)
   18f98:	214d      	movs	r1, #77	; 0x4d
   18f9a:	f00a f839 	bl	23010 <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   18f9e:	4e08      	ldr	r6, [pc, #32]	; (18fc0 <nrfx_gpio_handler+0x64>)
   18fa0:	e7e4      	b.n	18f6c <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   18fa2:	4630      	mov	r0, r6
   18fa4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18fa6:	b11c      	cbz	r4, 18fb0 <nrfx_gpio_handler+0x54>
   18fa8:	6823      	ldr	r3, [r4, #0]
   18faa:	4621      	mov	r1, r4
   18fac:	461c      	mov	r4, r3
   18fae:	e7e6      	b.n	18f7e <nrfx_gpio_handler+0x22>
   18fb0:	4623      	mov	r3, r4
   18fb2:	e7fa      	b.n	18faa <nrfx_gpio_handler+0x4e>
   18fb4:	000256e8 	.word	0x000256e8
   18fb8:	00027fa9 	.word	0x00027fa9
   18fbc:	00026718 	.word	0x00026718
   18fc0:	000256d0 	.word	0x000256d0

00018fc4 <gpio_nrfx_pin_configure>:
{
   18fc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   18fc8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   18fcc:	f898 300c 	ldrb.w	r3, [r8, #12]
   18fd0:	f001 051f 	and.w	r5, r1, #31
   18fd4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   18fd8:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   18fda:	4628      	mov	r0, r5
   18fdc:	f10d 0103 	add.w	r1, sp, #3
{
   18fe0:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   18fe2:	f002 fabf 	bl	1b564 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   18fe6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   18fea:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   18fec:	d114      	bne.n	19018 <gpio_nrfx_pin_configure+0x54>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   18fee:	4628      	mov	r0, r5
   18ff0:	f002 fbac 	bl	1b74c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   18ff4:	4b48      	ldr	r3, [pc, #288]	; (19118 <gpio_nrfx_pin_configure+0x154>)
   18ff6:	429e      	cmp	r6, r3
   18ff8:	d16f      	bne.n	190da <gpio_nrfx_pin_configure+0x116>
			err = nrfx_gpiote_channel_free(ch);
   18ffa:	f89d 0003 	ldrb.w	r0, [sp, #3]
   18ffe:	f002 fb09 	bl	1b614 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   19002:	42b0      	cmp	r0, r6
   19004:	d069      	beq.n	190da <gpio_nrfx_pin_configure+0x116>
   19006:	4945      	ldr	r1, [pc, #276]	; (1911c <gpio_nrfx_pin_configure+0x158>)
   19008:	4845      	ldr	r0, [pc, #276]	; (19120 <gpio_nrfx_pin_configure+0x15c>)
   1900a:	226a      	movs	r2, #106	; 0x6a
   1900c:	f00a f807 	bl	2301e <assert_print>
   19010:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   19012:	4842      	ldr	r0, [pc, #264]	; (1911c <gpio_nrfx_pin_configure+0x158>)
   19014:	f009 fffc 	bl	23010 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   19018:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1901a:	4619      	mov	r1, r3
   1901c:	aa02      	add	r2, sp, #8
   1901e:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   19020:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   19024:	f002 f97a 	bl	1b31c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   19028:	4b3b      	ldr	r3, [pc, #236]	; (19118 <gpio_nrfx_pin_configure+0x154>)
   1902a:	4298      	cmp	r0, r3
   1902c:	d004      	beq.n	19038 <gpio_nrfx_pin_configure+0x74>
		return NRF_GPIO_PIN_PULLUP;
   1902e:	f06f 0015 	mvn.w	r0, #21
}
   19032:	b004      	add	sp, #16
   19034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   19038:	4286      	cmp	r6, r0
   1903a:	d10c      	bne.n	19056 <gpio_nrfx_pin_configure+0x92>
		err = nrfx_gpiote_channel_free(ch);
   1903c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   19040:	f002 fae8 	bl	1b614 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   19044:	42b0      	cmp	r0, r6
   19046:	d006      	beq.n	19056 <gpio_nrfx_pin_configure+0x92>
   19048:	4934      	ldr	r1, [pc, #208]	; (1911c <gpio_nrfx_pin_configure+0x158>)
   1904a:	4835      	ldr	r0, [pc, #212]	; (19120 <gpio_nrfx_pin_configure+0x15c>)
   1904c:	227c      	movs	r2, #124	; 0x7c
   1904e:	f009 ffe6 	bl	2301e <assert_print>
   19052:	217c      	movs	r1, #124	; 0x7c
   19054:	e7dd      	b.n	19012 <gpio_nrfx_pin_configure+0x4e>
	if (flags & GPIO_OUTPUT) {
   19056:	03a6      	lsls	r6, r4, #14
   19058:	d54e      	bpl.n	190f8 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1905a:	f240 3306 	movw	r3, #774	; 0x306
   1905e:	4023      	ands	r3, r4
   19060:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   19064:	d019      	beq.n	1909a <gpio_nrfx_pin_configure+0xd6>
   19066:	d80c      	bhi.n	19082 <gpio_nrfx_pin_configure+0xbe>
   19068:	2b06      	cmp	r3, #6
   1906a:	d017      	beq.n	1909c <gpio_nrfx_pin_configure+0xd8>
   1906c:	d804      	bhi.n	19078 <gpio_nrfx_pin_configure+0xb4>
   1906e:	b1ab      	cbz	r3, 1909c <gpio_nrfx_pin_configure+0xd8>
   19070:	2b02      	cmp	r3, #2
   19072:	d1dc      	bne.n	1902e <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_D0S1;
   19074:	2304      	movs	r3, #4
   19076:	e011      	b.n	1909c <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1907c:	d1d7      	bne.n	1902e <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_H0S1;
   1907e:	2301      	movs	r3, #1
   19080:	e00c      	b.n	1909c <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   19082:	f240 2202 	movw	r2, #514	; 0x202
   19086:	4293      	cmp	r3, r2
   19088:	d029      	beq.n	190de <gpio_nrfx_pin_configure+0x11a>
   1908a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1908e:	d028      	beq.n	190e2 <gpio_nrfx_pin_configure+0x11e>
   19090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   19094:	d1cb      	bne.n	1902e <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_S0H1;
   19096:	2302      	movs	r3, #2
   19098:	e000      	b.n	1909c <gpio_nrfx_pin_configure+0xd8>
		*drive = NRF_GPIO_PIN_H0D1;
   1909a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1909c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   190a0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   190a4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   190a8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   190aa:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   190ae:	bf54      	ite	pl
   190b0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   190b4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   190b6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   190b8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   190bc:	d513      	bpl.n	190e6 <gpio_nrfx_pin_configure+0x122>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   190be:	f8d8 2004 	ldr.w	r2, [r8, #4]
   190c2:	2301      	movs	r3, #1
   190c4:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   190c6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   190ca:	2200      	movs	r2, #0
   190cc:	a901      	add	r1, sp, #4
   190ce:	4628      	mov	r0, r5
   190d0:	f002 f9ce 	bl	1b470 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   190d4:	4b10      	ldr	r3, [pc, #64]	; (19118 <gpio_nrfx_pin_configure+0x154>)
   190d6:	4298      	cmp	r0, r3
   190d8:	d1a9      	bne.n	1902e <gpio_nrfx_pin_configure+0x6a>
   190da:	2000      	movs	r0, #0
   190dc:	e7a9      	b.n	19032 <gpio_nrfx_pin_configure+0x6e>
		*drive = NRF_GPIO_PIN_D0H1;
   190de:	2305      	movs	r3, #5
   190e0:	e7dc      	b.n	1909c <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   190e2:	2303      	movs	r3, #3
   190e4:	e7da      	b.n	1909c <gpio_nrfx_pin_configure+0xd8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   190e6:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   190e8:	bf41      	itttt	mi
   190ea:	2301      	movmi	r3, #1
   190ec:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   190f0:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   190f2:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   190f6:	e7e8      	b.n	190ca <gpio_nrfx_pin_configure+0x106>
	if (flags & GPIO_PULL_UP) {
   190f8:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   190fa:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   190fe:	bf54      	ite	pl
   19100:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   19104:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19106:	461a      	mov	r2, r3
   19108:	a901      	add	r1, sp, #4
   1910a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1910c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   19110:	f002 f904 	bl	1b31c <nrfx_gpiote_input_configure>
   19114:	e7de      	b.n	190d4 <gpio_nrfx_pin_configure+0x110>
   19116:	bf00      	nop
   19118:	0bad0000 	.word	0x0bad0000
   1911c:	00028018 	.word	0x00028018
   19120:	00026718 	.word	0x00026718

00019124 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   19124:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   19126:	794b      	ldrb	r3, [r1, #5]
   19128:	2b01      	cmp	r3, #1
   1912a:	d026      	beq.n	1917a <uarte_nrfx_configure+0x56>
   1912c:	2b03      	cmp	r3, #3
   1912e:	d121      	bne.n	19174 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   19130:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   19132:	798b      	ldrb	r3, [r1, #6]
   19134:	2b03      	cmp	r3, #3
   19136:	d11d      	bne.n	19174 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   19138:	79ce      	ldrb	r6, [r1, #7]
   1913a:	b10e      	cbz	r6, 19140 <uarte_nrfx_configure+0x1c>
   1913c:	2e01      	cmp	r6, #1
   1913e:	d119      	bne.n	19174 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   19140:	790a      	ldrb	r2, [r1, #4]
   19142:	b112      	cbz	r2, 1914a <uarte_nrfx_configure+0x26>
   19144:	2a02      	cmp	r2, #2
   19146:	d115      	bne.n	19174 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   19148:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1914a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1914c:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1914e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   19152:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   19154:	d067      	beq.n	19226 <uarte_nrfx_configure+0x102>
   19156:	d82d      	bhi.n	191b4 <uarte_nrfx_configure+0x90>
   19158:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1915c:	d066      	beq.n	1922c <uarte_nrfx_configure+0x108>
   1915e:	d816      	bhi.n	1918e <uarte_nrfx_configure+0x6a>
   19160:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   19164:	d064      	beq.n	19230 <uarte_nrfx_configure+0x10c>
   19166:	d80a      	bhi.n	1917e <uarte_nrfx_configure+0x5a>
   19168:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1916c:	d063      	beq.n	19236 <uarte_nrfx_configure+0x112>
   1916e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   19172:	d063      	beq.n	1923c <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   19174:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19178:	e054      	b.n	19224 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1917a:	2500      	movs	r5, #0
   1917c:	e7d9      	b.n	19132 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1917e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   19182:	d05e      	beq.n	19242 <uarte_nrfx_configure+0x11e>
   19184:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   19188:	d1f4      	bne.n	19174 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1918a:	4b38      	ldr	r3, [pc, #224]	; (1926c <uarte_nrfx_configure+0x148>)
   1918c:	e03c      	b.n	19208 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1918e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   19192:	d059      	beq.n	19248 <uarte_nrfx_configure+0x124>
   19194:	d807      	bhi.n	191a6 <uarte_nrfx_configure+0x82>
   19196:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1919a:	d057      	beq.n	1924c <uarte_nrfx_configure+0x128>
   1919c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   191a0:	d1e8      	bne.n	19174 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   191a2:	4b33      	ldr	r3, [pc, #204]	; (19270 <uarte_nrfx_configure+0x14c>)
   191a4:	e030      	b.n	19208 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   191a6:	f647 2412 	movw	r4, #31250	; 0x7a12
   191aa:	42a3      	cmp	r3, r4
   191ac:	d1e2      	bne.n	19174 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   191ae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   191b2:	e029      	b.n	19208 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   191b4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   191b8:	d04a      	beq.n	19250 <uarte_nrfx_configure+0x12c>
   191ba:	d813      	bhi.n	191e4 <uarte_nrfx_configure+0xc0>
   191bc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   191c0:	d049      	beq.n	19256 <uarte_nrfx_configure+0x132>
   191c2:	d809      	bhi.n	191d8 <uarte_nrfx_configure+0xb4>
   191c4:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   191c8:	42a3      	cmp	r3, r4
   191ca:	d046      	beq.n	1925a <uarte_nrfx_configure+0x136>
   191cc:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   191d0:	d1d0      	bne.n	19174 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   191d2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   191d6:	e017      	b.n	19208 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   191d8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   191dc:	d1ca      	bne.n	19174 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   191de:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   191e2:	e011      	b.n	19208 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   191e4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   191e8:	d03a      	beq.n	19260 <uarte_nrfx_configure+0x13c>
   191ea:	d808      	bhi.n	191fe <uarte_nrfx_configure+0xda>
   191ec:	4c21      	ldr	r4, [pc, #132]	; (19274 <uarte_nrfx_configure+0x150>)
   191ee:	42a3      	cmp	r3, r4
   191f0:	d039      	beq.n	19266 <uarte_nrfx_configure+0x142>
   191f2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   191f6:	d1bd      	bne.n	19174 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   191f8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   191fc:	e004      	b.n	19208 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   191fe:	4c1e      	ldr	r4, [pc, #120]	; (19278 <uarte_nrfx_configure+0x154>)
   19200:	42a3      	cmp	r3, r4
   19202:	d1b7      	bne.n	19174 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   19204:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   19208:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1920a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1920e:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   19210:	4335      	orrs	r5, r6
   19212:	681b      	ldr	r3, [r3, #0]
   19214:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   19216:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1921a:	c903      	ldmia	r1, {r0, r1}
   1921c:	1d23      	adds	r3, r4, #4
   1921e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   19222:	2000      	movs	r0, #0
}
   19224:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   19226:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1922a:	e7ed      	b.n	19208 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1922c:	4b13      	ldr	r3, [pc, #76]	; (1927c <uarte_nrfx_configure+0x158>)
   1922e:	e7eb      	b.n	19208 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   19230:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   19234:	e7e8      	b.n	19208 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   19236:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1923a:	e7e5      	b.n	19208 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1923c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   19240:	e7e2      	b.n	19208 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   19242:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   19246:	e7df      	b.n	19208 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   19248:	4b0d      	ldr	r3, [pc, #52]	; (19280 <uarte_nrfx_configure+0x15c>)
   1924a:	e7dd      	b.n	19208 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1924c:	4b0d      	ldr	r3, [pc, #52]	; (19284 <uarte_nrfx_configure+0x160>)
   1924e:	e7db      	b.n	19208 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   19250:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   19254:	e7d8      	b.n	19208 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   19256:	4b0c      	ldr	r3, [pc, #48]	; (19288 <uarte_nrfx_configure+0x164>)
   19258:	e7d6      	b.n	19208 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1925a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1925e:	e7d3      	b.n	19208 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   19260:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   19264:	e7d0      	b.n	19208 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   19266:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1926a:	e7cd      	b.n	19208 <uarte_nrfx_configure+0xe4>
   1926c:	0013b000 	.word	0x0013b000
   19270:	004ea000 	.word	0x004ea000
   19274:	0003d090 	.word	0x0003d090
   19278:	000f4240 	.word	0x000f4240
   1927c:	00275000 	.word	0x00275000
   19280:	0075c000 	.word	0x0075c000
   19284:	003af000 	.word	0x003af000
   19288:	013a9000 	.word	0x013a9000

0001928c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1928c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   19290:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   19292:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   19294:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   19296:	2100      	movs	r1, #0
   19298:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1929c:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1929e:	f8d7 900c 	ldr.w	r9, [r7, #12]
static int uarte_instance_init(const struct device *dev,
   192a2:	4680      	mov	r8, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   192a4:	aa01      	add	r2, sp, #4
   192a6:	4648      	mov	r0, r9
   192a8:	f00b fcaa 	bl	24c00 <pinctrl_lookup_state>
	if (ret < 0) {
   192ac:	1e05      	subs	r5, r0, #0
   192ae:	db1e      	blt.n	192ee <uarte_instance_init.constprop.0+0x62>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   192b0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   192b2:	f8d9 2000 	ldr.w	r2, [r9]
   192b6:	7919      	ldrb	r1, [r3, #4]
   192b8:	6818      	ldr	r0, [r3, #0]
   192ba:	f00b fcb7 	bl	24c2c <pinctrl_configure_pins>
	if (err < 0) {
   192be:	1e05      	subs	r5, r0, #0
   192c0:	db15      	blt.n	192ee <uarte_instance_init.constprop.0+0x62>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   192c2:	1d31      	adds	r1, r6, #4
   192c4:	4640      	mov	r0, r8
   192c6:	f7ff ff2d 	bl	19124 <uarte_nrfx_configure>
	if (err) {
   192ca:	4605      	mov	r5, r0
   192cc:	b978      	cbnz	r0, 192ee <uarte_instance_init.constprop.0+0x62>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   192ce:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   192d0:	0799      	lsls	r1, r3, #30
   192d2:	d524      	bpl.n	1931e <uarte_instance_init.constprop.0+0x92>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   192d4:	f106 0018 	add.w	r0, r6, #24
   192d8:	f002 fe74 	bl	1bfc4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   192dc:	4b24      	ldr	r3, [pc, #144]	; (19370 <uarte_instance_init.constprop.0+0xe4>)
   192de:	4298      	cmp	r0, r3
   192e0:	d009      	beq.n	192f6 <uarte_instance_init.constprop.0+0x6a>
		LOG_ERR("Failed to allocate PPI Channel");
   192e2:	4824      	ldr	r0, [pc, #144]	; (19374 <uarte_instance_init.constprop.0+0xe8>)
   192e4:	2145      	movs	r1, #69	; 0x45
   192e6:	f009 fea8 	bl	2303a <z_log_minimal_printk>
		return -EIO;
   192ea:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   192ee:	4628      	mov	r0, r5
   192f0:	b003      	add	sp, #12
   192f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   192f6:	7e33      	ldrb	r3, [r6, #24]
   192f8:	00db      	lsls	r3, r3, #3
   192fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   192fe:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   19302:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   19306:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1930a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1930e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   19312:	7e32      	ldrb	r2, [r6, #24]
   19314:	2301      	movs	r3, #1
   19316:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   19318:	4a17      	ldr	r2, [pc, #92]	; (19378 <uarte_instance_init.constprop.0+0xec>)
   1931a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1931e:	2308      	movs	r3, #8
   19320:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   19324:	7a3b      	ldrb	r3, [r7, #8]
   19326:	b953      	cbnz	r3, 1933e <uarte_instance_init.constprop.0+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19328:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1932c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19330:	6973      	ldr	r3, [r6, #20]
   19332:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   19336:	2301      	movs	r3, #1
   19338:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1933c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1933e:	687b      	ldr	r3, [r7, #4]
   19340:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   19342:	bf5c      	itt	pl
   19344:	f44f 7380 	movpl.w	r3, #256	; 0x100
   19348:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1934c:	687b      	ldr	r3, [r7, #4]
   1934e:	06db      	lsls	r3, r3, #27
   19350:	bf44      	itt	mi
   19352:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   19356:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1935a:	6933      	ldr	r3, [r6, #16]
   1935c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19360:	2300      	movs	r3, #0
   19362:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19366:	2301      	movs	r3, #1
   19368:	60a3      	str	r3, [r4, #8]
   1936a:	60e3      	str	r3, [r4, #12]
	return 0;
   1936c:	e7bf      	b.n	192ee <uarte_instance_init.constprop.0+0x62>
   1936e:	bf00      	nop
   19370:	0bad0000 	.word	0x0bad0000
   19374:	00028060 	.word	0x00028060
   19378:	4001f000 	.word	0x4001f000

0001937c <uarte_nrfx_poll_out>:
{
   1937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1937e:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   19380:	6907      	ldr	r7, [r0, #16]
{
   19382:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19384:	f00b ff6d 	bl	25262 <k_is_in_isr>
   19388:	b9b0      	cbnz	r0, 193b8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1938a:	4b2e      	ldr	r3, [pc, #184]	; (19444 <uarte_nrfx_poll_out+0xc8>)
   1938c:	781b      	ldrb	r3, [r3, #0]
   1938e:	b19b      	cbz	r3, 193b8 <uarte_nrfx_poll_out+0x3c>
{
   19390:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   19392:	6860      	ldr	r0, [r4, #4]
   19394:	f00b fbb0 	bl	24af8 <is_tx_ready.isra.0>
   19398:	bb00      	cbnz	r0, 193dc <uarte_nrfx_poll_out+0x60>
   1939a:	2001      	movs	r0, #1
   1939c:	f00b fe75 	bl	2508a <nrfx_busy_wait>
   193a0:	3e01      	subs	r6, #1
   193a2:	d1f6      	bne.n	19392 <uarte_nrfx_poll_out+0x16>
   193a4:	2100      	movs	r1, #0
   193a6:	2021      	movs	r0, #33	; 0x21
   193a8:	f005 f98a 	bl	1e6c0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   193ac:	e7f0      	b.n	19390 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   193ae:	f386 8811 	msr	BASEPRI, r6
   193b2:	f3bf 8f6f 	isb	sy
}
   193b6:	e7f5      	b.n	193a4 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   193b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   193bc:	f3ef 8611 	mrs	r6, BASEPRI
   193c0:	f383 8812 	msr	BASEPRI_MAX, r3
   193c4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   193c8:	6860      	ldr	r0, [r4, #4]
   193ca:	4631      	mov	r1, r6
   193cc:	f00b fb94 	bl	24af8 <is_tx_ready.isra.0>
   193d0:	b990      	cbnz	r0, 193f8 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   193d2:	f386 8811 	msr	BASEPRI, r6
   193d6:	f3bf 8f6f 	isb	sy
}
   193da:	e7ed      	b.n	193b8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   193dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   193e0:	f3ef 8611 	mrs	r6, BASEPRI
   193e4:	f383 8812 	msr	BASEPRI_MAX, r3
   193e8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   193ec:	6860      	ldr	r0, [r4, #4]
   193ee:	4631      	mov	r1, r6
   193f0:	f00b fb82 	bl	24af8 <is_tx_ready.isra.0>
   193f4:	2800      	cmp	r0, #0
   193f6:	d0da      	beq.n	193ae <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   193f8:	693b      	ldr	r3, [r7, #16]
   193fa:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   193fc:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   193fe:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   19400:	6813      	ldr	r3, [r2, #0]
   19402:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19406:	2001      	movs	r0, #1
   19408:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1940c:	2000      	movs	r0, #0
   1940e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   19412:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   19416:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1941a:	6852      	ldr	r2, [r2, #4]
   1941c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   19420:	06d2      	lsls	r2, r2, #27
   19422:	d508      	bpl.n	19436 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   19424:	6862      	ldr	r2, [r4, #4]
   19426:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   19428:	2008      	movs	r0, #8
   1942a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1942e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   19432:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19436:	2201      	movs	r2, #1
   19438:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1943a:	f381 8811 	msr	BASEPRI, r1
   1943e:	f3bf 8f6f 	isb	sy
}
   19442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19444:	200058b7 	.word	0x200058b7

00019448 <random_byte_get>:
	__asm__ volatile(
   19448:	f04f 0340 	mov.w	r3, #64	; 0x40
   1944c:	f3ef 8211 	mrs	r2, BASEPRI
   19450:	f383 8812 	msr	BASEPRI_MAX, r3
   19454:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   19458:	4b09      	ldr	r3, [pc, #36]	; (19480 <random_byte_get+0x38>)
   1945a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1945e:	b161      	cbz	r1, 1947a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19460:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   19462:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19466:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1946a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1946e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   19470:	f382 8811 	msr	BASEPRI, r2
   19474:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   19478:	4770      	bx	lr
	int retval = -EAGAIN;
   1947a:	f06f 000a 	mvn.w	r0, #10
   1947e:	e7f7      	b.n	19470 <random_byte_get+0x28>
   19480:	4000d000 	.word	0x4000d000

00019484 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   19484:	b5f0      	push	{r4, r5, r6, r7, lr}
   19486:	4603      	mov	r3, r0
   19488:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1948a:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1948c:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   19490:	f04f 0540 	mov.w	r5, #64	; 0x40
   19494:	f3ef 8211 	mrs	r2, BASEPRI
   19498:	f385 8812 	msr	BASEPRI_MAX, r5
   1949c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   194a0:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   194a2:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   194a6:	1be4      	subs	r4, r4, r7
   194a8:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   194ac:	42a0      	cmp	r0, r4
		len = available;
   194ae:	bf88      	it	hi
   194b0:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   194b2:	183e      	adds	r6, r7, r0
   194b4:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   194b8:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   194ba:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   194bc:	f382 8811 	msr	BASEPRI, r2
   194c0:	f3bf 8f6f 	isb	sy
   194c4:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   194c6:	428a      	cmp	r2, r1
   194c8:	d117      	bne.n	194fa <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   194ca:	4577      	cmp	r7, lr
   194cc:	d10d      	bne.n	194ea <rng_pool_get+0x66>
	__asm__ volatile(
   194ce:	f04f 0140 	mov.w	r1, #64	; 0x40
   194d2:	f3ef 8211 	mrs	r2, BASEPRI
   194d6:	f381 8812 	msr	BASEPRI_MAX, r1
   194da:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   194de:	7819      	ldrb	r1, [r3, #0]
   194e0:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   194e2:	f382 8811 	msr	BASEPRI, r2
   194e6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   194ea:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   194ec:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   194ee:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   194f0:	bf22      	ittt	cs
   194f2:	4b06      	ldrcs	r3, [pc, #24]	; (1950c <rng_pool_get+0x88>)
   194f4:	2201      	movcs	r2, #1
   194f6:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   194f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   194fa:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   194fc:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   194fe:	7976      	ldrb	r6, [r6, #5]
   19500:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   19504:	ea05 050c 	and.w	r5, r5, ip
   19508:	e7dd      	b.n	194c6 <rng_pool_get+0x42>
   1950a:	bf00      	nop
   1950c:	4000d000 	.word	0x4000d000

00019510 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   19510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   19514:	4d2b      	ldr	r5, [pc, #172]	; (195c4 <entropy_nrf5_get_entropy_isr+0xb4>)
   19516:	6900      	ldr	r0, [r0, #16]
   19518:	42a8      	cmp	r0, r5
{
   1951a:	460e      	mov	r6, r1
   1951c:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1951e:	d00a      	beq.n	19536 <entropy_nrf5_get_entropy_isr+0x26>
   19520:	4929      	ldr	r1, [pc, #164]	; (195c8 <entropy_nrf5_get_entropy_isr+0xb8>)
   19522:	482a      	ldr	r0, [pc, #168]	; (195cc <entropy_nrf5_get_entropy_isr+0xbc>)
   19524:	f240 1207 	movw	r2, #263	; 0x107
   19528:	f009 fd79 	bl	2301e <assert_print>
   1952c:	4826      	ldr	r0, [pc, #152]	; (195c8 <entropy_nrf5_get_entropy_isr+0xb8>)
   1952e:	f240 1107 	movw	r1, #263	; 0x107
   19532:	f009 fd6d 	bl	23010 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   19536:	43db      	mvns	r3, r3
   19538:	f013 0501 	ands.w	r5, r3, #1
   1953c:	d004      	beq.n	19548 <entropy_nrf5_get_entropy_isr+0x38>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1953e:	3030      	adds	r0, #48	; 0x30
   19540:	f7ff ffa0 	bl	19484 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   19544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   19548:	b3a2      	cbz	r2, 195b4 <entropy_nrf5_get_entropy_isr+0xa4>
	__asm__ volatile(
   1954a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1954e:	f3ef 8811 	mrs	r8, BASEPRI
   19552:	f383 8812 	msr	BASEPRI_MAX, r3
   19556:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1955a:	200d      	movs	r0, #13
   1955c:	f7f9 f8c6 	bl	126ec <arch_irq_is_enabled>
   19560:	4607      	mov	r7, r0
		irq_disable(IRQN);
   19562:	200d      	movs	r0, #13
   19564:	f7f9 f8ae 	bl	126c4 <arch_irq_disable>
	__asm__ volatile(
   19568:	f388 8811 	msr	BASEPRI, r8
   1956c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19570:	f8df 805c 	ldr.w	r8, [pc, #92]	; 195d0 <entropy_nrf5_get_entropy_isr+0xc0>
   19574:	f8df 905c 	ldr.w	r9, [pc, #92]	; 195d4 <entropy_nrf5_get_entropy_isr+0xc4>
   19578:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1957c:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   19580:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19584:	2301      	movs	r3, #1
   19586:	f8c8 3000 	str.w	r3, [r8]
   1958a:	4625      	mov	r5, r4
   1958c:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   19590:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   19594:	b183      	cbz	r3, 195b8 <entropy_nrf5_get_entropy_isr+0xa8>
			byte = random_byte_get();
   19596:	f7ff ff57 	bl	19448 <random_byte_get>
			if (byte < 0) {
   1959a:	1e03      	subs	r3, r0, #0
   1959c:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   195a0:	dbf6      	blt.n	19590 <entropy_nrf5_get_entropy_isr+0x80>
			buf[--len] = byte;
   195a2:	3d01      	subs	r5, #1
   195a4:	b2ad      	uxth	r5, r5
   195a6:	5573      	strb	r3, [r6, r5]
		} while (len);
   195a8:	2d00      	cmp	r5, #0
   195aa:	d1f1      	bne.n	19590 <entropy_nrf5_get_entropy_isr+0x80>
		if (irq_enabled) {
   195ac:	b117      	cbz	r7, 195b4 <entropy_nrf5_get_entropy_isr+0xa4>
			irq_enable(IRQN);
   195ae:	200d      	movs	r0, #13
   195b0:	f7f9 f87a 	bl	126a8 <arch_irq_enable>
	return cnt;
   195b4:	4620      	mov	r0, r4
   195b6:	e7c5      	b.n	19544 <entropy_nrf5_get_entropy_isr+0x34>
   195b8:	f3bf 8f4f 	dsb	sy
				__WFE();
   195bc:	bf20      	wfe
				__SEV();
   195be:	bf40      	sev
				__WFE();
   195c0:	bf20      	wfe
   195c2:	e7e5      	b.n	19590 <entropy_nrf5_get_entropy_isr+0x80>
   195c4:	20002dec 	.word	0x20002dec
   195c8:	000280b0 	.word	0x000280b0
   195cc:	00026718 	.word	0x00026718
   195d0:	4000d000 	.word	0x4000d000
   195d4:	e000e100 	.word	0xe000e100

000195d8 <entropy_nrf5_get_entropy>:
{
   195d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   195dc:	4b18      	ldr	r3, [pc, #96]	; (19640 <entropy_nrf5_get_entropy+0x68>)
   195de:	6907      	ldr	r7, [r0, #16]
   195e0:	429f      	cmp	r7, r3
{
   195e2:	460d      	mov	r5, r1
   195e4:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   195e6:	d105      	bne.n	195f4 <entropy_nrf5_get_entropy+0x1c>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   195e8:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   195ec:	b95c      	cbnz	r4, 19606 <entropy_nrf5_get_entropy+0x2e>
}
   195ee:	4620      	mov	r0, r4
   195f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   195f4:	4913      	ldr	r1, [pc, #76]	; (19644 <entropy_nrf5_get_entropy+0x6c>)
   195f6:	4814      	ldr	r0, [pc, #80]	; (19648 <entropy_nrf5_get_entropy+0x70>)
   195f8:	22e9      	movs	r2, #233	; 0xe9
   195fa:	f009 fd10 	bl	2301e <assert_print>
   195fe:	4811      	ldr	r0, [pc, #68]	; (19644 <entropy_nrf5_get_entropy+0x6c>)
   19600:	21e9      	movs	r1, #233	; 0xe9
   19602:	f009 fd05 	bl	23010 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   19606:	f04f 33ff 	mov.w	r3, #4294967295
   1960a:	f04f 32ff 	mov.w	r2, #4294967295
   1960e:	4638      	mov	r0, r7
   19610:	f003 fd04 	bl	1d01c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19614:	4622      	mov	r2, r4
   19616:	4629      	mov	r1, r5
   19618:	4640      	mov	r0, r8
   1961a:	f7ff ff33 	bl	19484 <rng_pool_get>
   1961e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   19620:	4638      	mov	r0, r7
   19622:	f003 fcc1 	bl	1cfa8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   19626:	b93e      	cbnz	r6, 19638 <entropy_nrf5_get_entropy+0x60>
	return z_impl_k_sem_take(sem, timeout);
   19628:	f04f 32ff 	mov.w	r2, #4294967295
   1962c:	f04f 33ff 	mov.w	r3, #4294967295
   19630:	4806      	ldr	r0, [pc, #24]	; (1964c <entropy_nrf5_get_entropy+0x74>)
   19632:	f003 fcf3 	bl	1d01c <z_impl_k_sem_take>
	while (len) {
   19636:	e7e6      	b.n	19606 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   19638:	1ba4      	subs	r4, r4, r6
   1963a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1963c:	4435      	add	r5, r6
   1963e:	e7d5      	b.n	195ec <entropy_nrf5_get_entropy+0x14>
   19640:	20002dec 	.word	0x20002dec
   19644:	000280b0 	.word	0x000280b0
   19648:	00026718 	.word	0x00026718
   1964c:	20002e04 	.word	0x20002e04

00019650 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   19650:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   19652:	4b20      	ldr	r3, [pc, #128]	; (196d4 <entropy_nrf5_init+0x84>)
   19654:	6904      	ldr	r4, [r0, #16]
   19656:	429c      	cmp	r4, r3
   19658:	d00a      	beq.n	19670 <entropy_nrf5_init+0x20>
   1965a:	491f      	ldr	r1, [pc, #124]	; (196d8 <entropy_nrf5_init+0x88>)
   1965c:	481f      	ldr	r0, [pc, #124]	; (196dc <entropy_nrf5_init+0x8c>)
   1965e:	f44f 72ab 	mov.w	r2, #342	; 0x156
   19662:	f009 fcdc 	bl	2301e <assert_print>
   19666:	481c      	ldr	r0, [pc, #112]	; (196d8 <entropy_nrf5_init+0x88>)
   19668:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1966c:	f009 fcd0 	bl	23010 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19670:	2201      	movs	r2, #1
   19672:	4611      	mov	r1, r2
   19674:	4620      	mov	r0, r4
   19676:	f00b fe45 	bl	25304 <z_impl_k_sem_init>
   1967a:	2201      	movs	r2, #1
   1967c:	2100      	movs	r1, #0
   1967e:	f104 0018 	add.w	r0, r4, #24
   19682:	f00b fe3f 	bl	25304 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   19686:	f240 4307 	movw	r3, #1031	; 0x407
   1968a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1968e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   19692:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   19694:	230c      	movs	r3, #12
   19696:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1969a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1969c:	4b10      	ldr	r3, [pc, #64]	; (196e0 <entropy_nrf5_init+0x90>)
   1969e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   196a2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   196a6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   196aa:	f022 0201 	bic.w	r2, r2, #1
   196ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   196b2:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   196b4:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   196b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   196bc:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   196c0:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   196c2:	6019      	str	r1, [r3, #0]
   196c4:	200d      	movs	r0, #13
   196c6:	f7f9 f81f 	bl	12708 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   196ca:	200d      	movs	r0, #13
   196cc:	f7f8 ffec 	bl	126a8 <arch_irq_enable>

	return 0;
}
   196d0:	4628      	mov	r0, r5
   196d2:	bd38      	pop	{r3, r4, r5, pc}
   196d4:	20002dec 	.word	0x20002dec
   196d8:	000280b0 	.word	0x000280b0
   196dc:	00026718 	.word	0x00026718
   196e0:	4000d000 	.word	0x4000d000

000196e4 <isr>:
{
   196e4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   196e6:	f7ff feaf 	bl	19448 <random_byte_get>
	if (byte < 0) {
   196ea:	2800      	cmp	r0, #0
   196ec:	db20      	blt.n	19730 <isr+0x4c>
	uint8_t last  = rngp->last;
   196ee:	4b17      	ldr	r3, [pc, #92]	; (1974c <isr+0x68>)
   196f0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   196f4:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   196f8:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   196fc:	1b14      	subs	r4, r2, r4
   196fe:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   19702:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   19704:	d10d      	bne.n	19722 <isr+0x3e>
	uint8_t last  = rngp->last;
   19706:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1970a:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1970e:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   19712:	1b14      	subs	r4, r2, r4
   19714:	ea31 0404 	bics.w	r4, r1, r4
   19718:	d10b      	bne.n	19732 <isr+0x4e>
   1971a:	4b0d      	ldr	r3, [pc, #52]	; (19750 <isr+0x6c>)
   1971c:	2201      	movs	r2, #1
   1971e:	605a      	str	r2, [r3, #4]
}
   19720:	e00e      	b.n	19740 <isr+0x5c>
	rngp->buffer[last] = byte;
   19722:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   19724:	3201      	adds	r2, #1
   19726:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   19728:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1972c:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   19730:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   19732:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   19734:	3201      	adds	r2, #1
   19736:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   19738:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1973c:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   19740:	4804      	ldr	r0, [pc, #16]	; (19754 <isr+0x70>)
}
   19742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19746:	f003 bc2f 	b.w	1cfa8 <z_impl_k_sem_give>
   1974a:	bf00      	nop
   1974c:	20002dec 	.word	0x20002dec
   19750:	4000d000 	.word	0x4000d000
   19754:	20002e04 	.word	0x20002e04

00019758 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   19758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1975a:	460f      	mov	r7, r1
   1975c:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
   1975e:	b940      	cbnz	r0, 19772 <entropy_cc3xx_rng_get_entropy+0x1a>
   19760:	4917      	ldr	r1, [pc, #92]	; (197c0 <entropy_cc3xx_rng_get_entropy+0x68>)
   19762:	4818      	ldr	r0, [pc, #96]	; (197c4 <entropy_cc3xx_rng_get_entropy+0x6c>)
   19764:	2220      	movs	r2, #32
   19766:	f009 fc5a 	bl	2301e <assert_print>
   1976a:	2120      	movs	r1, #32
	__ASSERT_NO_MSG(buffer != NULL);
   1976c:	4814      	ldr	r0, [pc, #80]	; (197c0 <entropy_cc3xx_rng_get_entropy+0x68>)
   1976e:	f009 fc4f 	bl	23010 <assert_post_action>
   19772:	b9e1      	cbnz	r1, 197ae <entropy_cc3xx_rng_get_entropy+0x56>
   19774:	4912      	ldr	r1, [pc, #72]	; (197c0 <entropy_cc3xx_rng_get_entropy+0x68>)
   19776:	4813      	ldr	r0, [pc, #76]	; (197c4 <entropy_cc3xx_rng_get_entropy+0x6c>)
   19778:	2221      	movs	r2, #33	; 0x21
   1977a:	f009 fc50 	bl	2301e <assert_print>
   1977e:	2121      	movs	r1, #33	; 0x21
   19780:	e7f4      	b.n	1976c <entropy_cc3xx_rng_get_entropy+0x14>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   19782:	1b33      	subs	r3, r6, r4
   19784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   19788:	bf38      	it	cc
   1978a:	461d      	movcc	r5, r3
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   1978c:	462a      	mov	r2, r5
   1978e:	ab01      	add	r3, sp, #4
   19790:	1939      	adds	r1, r7, r4
   19792:	2000      	movs	r0, #0
   19794:	f006 fdb0 	bl	202f8 <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   19798:	b968      	cbnz	r0, 197b6 <entropy_cc3xx_rng_get_entropy+0x5e>
			return -EINVAL;
		}
#endif /* defined(CONFIG_SPM) */
		if (olen != chunk_size) {
   1979a:	9b01      	ldr	r3, [sp, #4]
   1979c:	429d      	cmp	r5, r3
   1979e:	d10a      	bne.n	197b6 <entropy_cc3xx_rng_get_entropy+0x5e>
			return -EINVAL;
		}

		offset += chunk_size;
   197a0:	442c      	add	r4, r5
	while (offset < length) {
   197a2:	42a6      	cmp	r6, r4
   197a4:	d8ed      	bhi.n	19782 <entropy_cc3xx_rng_get_entropy+0x2a>
	}

	if (offset == length) {
   197a6:	d009      	beq.n	197bc <entropy_cc3xx_rng_get_entropy+0x64>
	int err = EINVAL;
   197a8:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   197aa:	b003      	add	sp, #12
   197ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   197ae:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   197b2:	2400      	movs	r4, #0
   197b4:	e7f5      	b.n	197a2 <entropy_cc3xx_rng_get_entropy+0x4a>
			return -EINVAL;
   197b6:	f06f 0015 	mvn.w	r0, #21
   197ba:	e7f6      	b.n	197aa <entropy_cc3xx_rng_get_entropy+0x52>
		err = 0;
   197bc:	2000      	movs	r0, #0
   197be:	e7f4      	b.n	197aa <entropy_cc3xx_rng_get_entropy+0x52>
   197c0:	00028101 	.word	0x00028101
   197c4:	00026718 	.word	0x00026718

000197c8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   197c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   197ca:	491b      	ldr	r1, [pc, #108]	; (19838 <sys_clock_timeout_handler+0x70>)
{
   197cc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   197ce:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   197d2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   197d4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   197d8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   197dc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   197de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   197e2:	d30f      	bcc.n	19804 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   197e4:	f005 fa5e 	bl	1eca4 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   197e8:	00a3      	lsls	r3, r4, #2
   197ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   197ee:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   197f2:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   197f6:	4295      	cmp	r5, r2
   197f8:	d11d      	bne.n	19836 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   197fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   197fe:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   19802:	e012      	b.n	1982a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   19804:	4b0d      	ldr	r3, [pc, #52]	; (1983c <sys_clock_timeout_handler+0x74>)
   19806:	681b      	ldr	r3, [r3, #0]
   19808:	0a1a      	lsrs	r2, r3, #8
   1980a:	061b      	lsls	r3, r3, #24
   1980c:	195e      	adds	r6, r3, r5
   1980e:	4b0c      	ldr	r3, [pc, #48]	; (19840 <sys_clock_timeout_handler+0x78>)
   19810:	f142 0700 	adc.w	r7, r2, #0
   19814:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   19818:	f005 fa44 	bl	1eca4 <sys_clock_announce>
    return p_reg->CC[ch];
   1981c:	4a09      	ldr	r2, [pc, #36]	; (19844 <sys_clock_timeout_handler+0x7c>)
   1981e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   19822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   19826:	429d      	cmp	r5, r3
   19828:	d105      	bne.n	19836 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1982a:	4a06      	ldr	r2, [pc, #24]	; (19844 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1982c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19830:	40a3      	lsls	r3, r4
   19832:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   19836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19838:	20001eb0 	.word	0x20001eb0
   1983c:	20002e48 	.word	0x20002e48
   19840:	20001eb8 	.word	0x20001eb8
   19844:	40011000 	.word	0x40011000

00019848 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   19848:	4b0d      	ldr	r3, [pc, #52]	; (19880 <z_nrf_rtc_timer_read+0x38>)
   1984a:	6818      	ldr	r0, [r3, #0]
   1984c:	0a01      	lsrs	r1, r0, #8
   1984e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   19850:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   19854:	4b0b      	ldr	r3, [pc, #44]	; (19884 <z_nrf_rtc_timer_read+0x3c>)
   19856:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1985a:	1818      	adds	r0, r3, r0
   1985c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   19860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   19864:	d20a      	bcs.n	1987c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   19866:	4b08      	ldr	r3, [pc, #32]	; (19888 <z_nrf_rtc_timer_read+0x40>)
   19868:	e9d3 2300 	ldrd	r2, r3, [r3]
   1986c:	4290      	cmp	r0, r2
   1986e:	eb71 0303 	sbcs.w	r3, r1, r3
   19872:	d203      	bcs.n	1987c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   19874:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   19878:	f141 0100 	adc.w	r1, r1, #0
}
   1987c:	4770      	bx	lr
   1987e:	bf00      	nop
   19880:	20002e48 	.word	0x20002e48
   19884:	40011000 	.word	0x40011000
   19888:	20001eb8 	.word	0x20001eb8

0001988c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1988c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   19890:	4c2b      	ldr	r4, [pc, #172]	; (19940 <rtc_nrf_isr+0xb4>)
   19892:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   19896:	079a      	lsls	r2, r3, #30
   19898:	d50b      	bpl.n	198b2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1989a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1989e:	b143      	cbz	r3, 198b2 <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   198a0:	4a28      	ldr	r2, [pc, #160]	; (19944 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   198a2:	2300      	movs	r3, #0
   198a4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   198a8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   198ac:	6813      	ldr	r3, [r2, #0]
   198ae:	3301      	adds	r3, #1
   198b0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   198b2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   198b6:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   198b8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   198bc:	03db      	lsls	r3, r3, #15
   198be:	d522      	bpl.n	19906 <rtc_nrf_isr+0x7a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   198c0:	f3bf 8f5b 	dmb	ish
   198c4:	4b20      	ldr	r3, [pc, #128]	; (19948 <rtc_nrf_isr+0xbc>)
   198c6:	e853 1f00 	ldrex	r1, [r3]
   198ca:	f021 0001 	bic.w	r0, r1, #1
   198ce:	e843 0500 	strex	r5, r0, [r3]
   198d2:	2d00      	cmp	r5, #0
   198d4:	d1f7      	bne.n	198c6 <rtc_nrf_isr+0x3a>
   198d6:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   198da:	b911      	cbnz	r1, 198e2 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   198dc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   198e0:	b18b      	cbz	r3, 19906 <rtc_nrf_isr+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   198e2:	2500      	movs	r5, #0
   198e4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   198e8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   198ec:	f382 8810 	msr	PRIMASK, r2
		curr_time = z_nrf_rtc_timer_read();
   198f0:	f7ff ffaa 	bl	19848 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   198f4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   198f8:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   198fa:	4b14      	ldr	r3, [pc, #80]	; (1994c <rtc_nrf_isr+0xc0>)
   198fc:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   19900:	42b0      	cmp	r0, r6
   19902:	41b9      	sbcs	r1, r7
   19904:	d204      	bcs.n	19910 <rtc_nrf_isr+0x84>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19906:	f382 8810 	msr	PRIMASK, r2
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   1990a:	b003      	add	sp, #12
   1990c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   19910:	f04f 38ff 	mov.w	r8, #4294967295
   19914:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
   19918:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1991c:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   19920:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   19922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19926:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   1992a:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1992e:	2900      	cmp	r1, #0
   19930:	d0eb      	beq.n	1990a <rtc_nrf_isr+0x7e>
			handler(chan, expire_time, user_context);
   19932:	9000      	str	r0, [sp, #0]
   19934:	4632      	mov	r2, r6
   19936:	463b      	mov	r3, r7
   19938:	4628      	mov	r0, r5
   1993a:	4788      	blx	r1
}
   1993c:	e7e5      	b.n	1990a <rtc_nrf_isr+0x7e>
   1993e:	bf00      	nop
   19940:	40011000 	.word	0x40011000
   19944:	20002e48 	.word	0x20002e48
   19948:	20002e40 	.word	0x20002e40
   1994c:	20001ea0 	.word	0x20001ea0

00019950 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   19950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19954:	4f53      	ldr	r7, [pc, #332]	; (19aa4 <compare_set.constprop.0.isra.0+0x154>)
   19956:	f3bf 8f5b 	dmb	ish
   1995a:	4604      	mov	r4, r0
   1995c:	460d      	mov	r5, r1
   1995e:	e857 8f00 	ldrex	r8, [r7]
   19962:	f028 0301 	bic.w	r3, r8, #1
   19966:	e847 3200 	strex	r2, r3, [r7]
   1996a:	2a00      	cmp	r2, #0
   1996c:	d1f7      	bne.n	1995e <compare_set.constprop.0.isra.0+0xe>
   1996e:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   19972:	f8df 9134 	ldr.w	r9, [pc, #308]	; 19aa8 <compare_set.constprop.0.isra.0+0x158>
   19976:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
   1997a:	f8c9 a308 	str.w	sl, [r9, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1997e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19982:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   19986:	f7ff ff5f 	bl	19848 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1998a:	42a0      	cmp	r0, r4
   1998c:	eb71 0305 	sbcs.w	r3, r1, r5
	return prev & BIT(chan);
   19990:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   19994:	d277      	bcs.n	19a86 <compare_set.constprop.0.isra.0+0x136>
		if (target_time - curr_time > COUNTER_SPAN) {
   19996:	4b45      	ldr	r3, [pc, #276]	; (19aac <compare_set.constprop.0.isra.0+0x15c>)
   19998:	1a20      	subs	r0, r4, r0
   1999a:	eb65 0101 	sbc.w	r1, r5, r1
   1999e:	4298      	cmp	r0, r3
   199a0:	f171 0100 	sbcs.w	r1, r1, #0
   199a4:	d24a      	bcs.n	19a3c <compare_set.constprop.0.isra.0+0xec>
		if (target_time != cc_data[chan].target_time) {
   199a6:	4b42      	ldr	r3, [pc, #264]	; (19ab0 <compare_set.constprop.0.isra.0+0x160>)
   199a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   199ac:	429d      	cmp	r5, r3
   199ae:	bf08      	it	eq
   199b0:	4294      	cmpeq	r4, r2
   199b2:	d03c      	beq.n	19a2e <compare_set.constprop.0.isra.0+0xde>
	return absolute_time & COUNTER_MAX;
   199b4:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
    return p_reg->CC[ch];
   199b8:	f8d9 3540 	ldr.w	r3, [r9, #1344]	; 0x540
	uint32_t cc_val = abs_val & COUNTER_MAX;
   199bc:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   199be:	2200      	movs	r2, #0
     return p_reg->COUNTER;
   199c0:	f8d9 1504 	ldr.w	r1, [r9, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   199c4:	1a5b      	subs	r3, r3, r1
   199c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   199ca:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   199ce:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   199d0:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
   199d4:	d105      	bne.n	199e2 <compare_set.constprop.0.isra.0+0x92>
   199d6:	9101      	str	r1, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   199d8:	2013      	movs	r0, #19
   199da:	f00b fd3e 	bl	2545a <z_impl_k_busy_wait>
   199de:	9901      	ldr	r1, [sp, #4]
   199e0:	2200      	movs	r2, #0
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   199e2:	1c88      	adds	r0, r1, #2
	return (a - b) & COUNTER_MAX;
   199e4:	1a33      	subs	r3, r6, r0
   199e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   199ea:	f8c9 2140 	str.w	r2, [r9, #320]	; 0x140
			cc_val = now + 2;
   199ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   199f2:	bf88      	it	hi
   199f4:	4606      	movhi	r6, r0
   199f6:	f8d9 3140 	ldr.w	r3, [r9, #320]	; 0x140
    p_reg->EVTENSET = mask;
   199fa:	f8c9 a344 	str.w	sl, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   199fe:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   19a02:	f8c9 3540 	str.w	r3, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   19a06:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
	} while ((now2 != now) &&
   19a0a:	4299      	cmp	r1, r3
   19a0c:	d006      	beq.n	19a1c <compare_set.constprop.0.isra.0+0xcc>
	return (a - b) & COUNTER_MAX;
   19a0e:	1af3      	subs	r3, r6, r3
   19a10:	3b02      	subs	r3, #2
   19a12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   19a16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   19a1a:	d832      	bhi.n	19a82 <compare_set.constprop.0.isra.0+0x132>
	return (a - b) & COUNTER_MAX;
   19a1c:	eba6 060b 	sub.w	r6, r6, fp
   19a20:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   19a24:	1936      	adds	r6, r6, r4
   19a26:	f145 0300 	adc.w	r3, r5, #0
   19a2a:	4634      	mov	r4, r6
   19a2c:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   19a2e:	4b20      	ldr	r3, [pc, #128]	; (19ab0 <compare_set.constprop.0.isra.0+0x160>)
	cc_data[chan].callback = handler;
   19a30:	4a20      	ldr	r2, [pc, #128]	; (19ab4 <compare_set.constprop.0.isra.0+0x164>)
   19a32:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
   19a34:	e9c3 4502 	strd	r4, r5, [r3, #8]
	cc_data[chan].user_context = user_data;
   19a38:	2200      	movs	r2, #0
   19a3a:	605a      	str	r2, [r3, #4]
	if (key) {
   19a3c:	f1b8 0f00 	cmp.w	r8, #0
   19a40:	d01c      	beq.n	19a7c <compare_set.constprop.0.isra.0+0x12c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19a42:	f3bf 8f5b 	dmb	ish
   19a46:	e857 3f00 	ldrex	r3, [r7]
   19a4a:	f043 0301 	orr.w	r3, r3, #1
   19a4e:	e847 3200 	strex	r2, r3, [r7]
   19a52:	2a00      	cmp	r2, #0
   19a54:	d1f7      	bne.n	19a46 <compare_set.constprop.0.isra.0+0xf6>
   19a56:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   19a5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19a5e:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19a62:	4b15      	ldr	r3, [pc, #84]	; (19ab8 <compare_set.constprop.0.isra.0+0x168>)
   19a64:	f3bf 8f5b 	dmb	ish
   19a68:	681b      	ldr	r3, [r3, #0]
   19a6a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   19a6e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19a70:	bf42      	ittt	mi
   19a72:	4b12      	ldrmi	r3, [pc, #72]	; (19abc <compare_set.constprop.0.isra.0+0x16c>)
   19a74:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   19a78:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   19a7c:	b003      	add	sp, #12
   19a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a82:	4633      	mov	r3, r6
   19a84:	e79c      	b.n	199c0 <compare_set.constprop.0.isra.0+0x70>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19a86:	4b0c      	ldr	r3, [pc, #48]	; (19ab8 <compare_set.constprop.0.isra.0+0x168>)
   19a88:	f3bf 8f5b 	dmb	ish
   19a8c:	e853 1f00 	ldrex	r1, [r3]
   19a90:	f041 0101 	orr.w	r1, r1, #1
   19a94:	e843 1200 	strex	r2, r1, [r3]
   19a98:	2a00      	cmp	r2, #0
   19a9a:	d1f7      	bne.n	19a8c <compare_set.constprop.0.isra.0+0x13c>
   19a9c:	f3bf 8f5b 	dmb	ish
   19aa0:	e7c5      	b.n	19a2e <compare_set.constprop.0.isra.0+0xde>
   19aa2:	bf00      	nop
   19aa4:	20002e44 	.word	0x20002e44
   19aa8:	40011000 	.word	0x40011000
   19aac:	01000001 	.word	0x01000001
   19ab0:	20001ea0 	.word	0x20001ea0
   19ab4:	000197c9 	.word	0x000197c9
   19ab8:	20002e40 	.word	0x20002e40
   19abc:	e000e100 	.word	0xe000e100

00019ac0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   19ac0:	b570      	push	{r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   19ac2:	4b16      	ldr	r3, [pc, #88]	; (19b1c <sys_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   19ac4:	4c16      	ldr	r4, [pc, #88]	; (19b20 <sys_clock_driver_init+0x60>)
   19ac6:	2500      	movs	r5, #0
   19ac8:	f04f 30ff 	mov.w	r0, #4294967295
   19acc:	f04f 31ff 	mov.w	r1, #4294967295
   19ad0:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   19ad4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   19ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19adc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19ae0:	4b10      	ldr	r3, [pc, #64]	; (19b24 <sys_clock_driver_init+0x64>)
   19ae2:	2602      	movs	r6, #2
   19ae4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   19ae8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   19aec:	2101      	movs	r1, #1
   19aee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   19af2:	2011      	movs	r0, #17
   19af4:	462a      	mov	r2, r5
   19af6:	f7f8 fe07 	bl	12708 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   19afa:	2011      	movs	r0, #17
   19afc:	f7f8 fdd4 	bl	126a8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   19b00:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   19b02:	4a09      	ldr	r2, [pc, #36]	; (19b28 <sys_clock_driver_init+0x68>)
   19b04:	60a3      	str	r3, [r4, #8]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   19b06:	2100      	movs	r1, #0
   19b08:	6023      	str	r3, [r4, #0]
   19b0a:	4808      	ldr	r0, [pc, #32]	; (19b2c <sys_clock_driver_init+0x6c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   19b0c:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   19b0e:	f7ff ff1f 	bl	19950 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   19b12:	4630      	mov	r0, r6
   19b14:	f7ff f87e 	bl	18c14 <z_nrf_clock_control_lf_on>

	return 0;
}
   19b18:	4628      	mov	r0, r5
   19b1a:	bd70      	pop	{r4, r5, r6, pc}
   19b1c:	20001ea0 	.word	0x20001ea0
   19b20:	40011000 	.word	0x40011000
   19b24:	e000e100 	.word	0xe000e100
   19b28:	20002e44 	.word	0x20002e44
   19b2c:	007fffff 	.word	0x007fffff

00019b30 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   19b30:	1c43      	adds	r3, r0, #1
{
   19b32:	b510      	push	{r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   19b34:	d01c      	beq.n	19b70 <sys_clock_set_timeout+0x40>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   19b36:	2801      	cmp	r0, #1
   19b38:	dd1c      	ble.n	19b74 <sys_clock_set_timeout+0x44>
   19b3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   19b3e:	da1b      	bge.n	19b78 <sys_clock_set_timeout+0x48>
   19b40:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   19b42:	f7ff fe81 	bl	19848 <z_nrf_rtc_timer_read>
   19b46:	4a0d      	ldr	r2, [pc, #52]	; (19b7c <sys_clock_set_timeout+0x4c>)
   19b48:	e9d2 3100 	ldrd	r3, r1, [r2]
   19b4c:	1ac0      	subs	r0, r0, r3
		ticks = 0;
   19b4e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   19b52:	bf28      	it	cs
   19b54:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   19b56:	4a0a      	ldr	r2, [pc, #40]	; (19b80 <sys_clock_set_timeout+0x50>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   19b58:	3001      	adds	r0, #1
   19b5a:	4420      	add	r0, r4
	if (cyc > MAX_CYCLES) {
   19b5c:	4290      	cmp	r0, r2
   19b5e:	bf28      	it	cs
   19b60:	4610      	movcs	r0, r2
	uint64_t target_time = cyc + last_count;
   19b62:	18c0      	adds	r0, r0, r3
}
   19b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   19b68:	f141 0100 	adc.w	r1, r1, #0
   19b6c:	f7ff bef0 	b.w	19950 <compare_set.constprop.0.isra.0>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   19b70:	4803      	ldr	r0, [pc, #12]	; (19b80 <sys_clock_set_timeout+0x50>)
   19b72:	e7e5      	b.n	19b40 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   19b74:	2400      	movs	r4, #0
   19b76:	e7e4      	b.n	19b42 <sys_clock_set_timeout+0x12>
   19b78:	4c01      	ldr	r4, [pc, #4]	; (19b80 <sys_clock_set_timeout+0x50>)
   19b7a:	e7e2      	b.n	19b42 <sys_clock_set_timeout+0x12>
   19b7c:	20001eb0 	.word	0x20001eb0
   19b80:	007fffff 	.word	0x007fffff

00019b84 <sys_clock_elapsed>:
{
   19b84:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   19b86:	f7ff fe5f 	bl	19848 <z_nrf_rtc_timer_read>
   19b8a:	4b02      	ldr	r3, [pc, #8]	; (19b94 <sys_clock_elapsed+0x10>)
   19b8c:	681b      	ldr	r3, [r3, #0]
}
   19b8e:	1ac0      	subs	r0, r0, r3
   19b90:	bd08      	pop	{r3, pc}
   19b92:	bf00      	nop
   19b94:	20001eb0 	.word	0x20001eb0

00019b98 <nrf_gpio_pin_port_decode>:
{
   19b98:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   19b9a:	6803      	ldr	r3, [r0, #0]
    switch (port)
   19b9c:	095a      	lsrs	r2, r3, #5
   19b9e:	d00c      	beq.n	19bba <nrf_gpio_pin_port_decode+0x22>
   19ba0:	2a01      	cmp	r2, #1
   19ba2:	d013      	beq.n	19bcc <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   19ba4:	490e      	ldr	r1, [pc, #56]	; (19be0 <nrf_gpio_pin_port_decode+0x48>)
   19ba6:	480f      	ldr	r0, [pc, #60]	; (19be4 <nrf_gpio_pin_port_decode+0x4c>)
   19ba8:	f240 2247 	movw	r2, #583	; 0x247
   19bac:	f009 fa37 	bl	2301e <assert_print>
   19bb0:	480b      	ldr	r0, [pc, #44]	; (19be0 <nrf_gpio_pin_port_decode+0x48>)
   19bb2:	f240 2147 	movw	r1, #583	; 0x247
   19bb6:	f009 fa2b 	bl	23010 <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   19bba:	f04f 32ff 	mov.w	r2, #4294967295
   19bbe:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   19bc2:	07d9      	lsls	r1, r3, #31
   19bc4:	d5ee      	bpl.n	19ba4 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   19bc6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   19bca:	e008      	b.n	19bde <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   19bcc:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   19bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19bd4:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   19bd6:	07d2      	lsls	r2, r2, #31
   19bd8:	d5e4      	bpl.n	19ba4 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   19bda:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   19bdc:	4802      	ldr	r0, [pc, #8]	; (19be8 <nrf_gpio_pin_port_decode+0x50>)
}
   19bde:	bd08      	pop	{r3, pc}
   19be0:	00027fe5 	.word	0x00027fe5
   19be4:	00026718 	.word	0x00026718
   19be8:	50000300 	.word	0x50000300

00019bec <z_impl_gpio_pin_configure>:
{
   19bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   19bf0:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
	__unused const struct gpio_driver_config *const cfg =
   19bf4:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   19bf8:	6906      	ldr	r6, [r0, #16]
{
   19bfa:	4613      	mov	r3, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   19bfc:	d00a      	beq.n	19c14 <z_impl_gpio_pin_configure+0x28>
   19bfe:	4935      	ldr	r1, [pc, #212]	; (19cd4 <z_impl_gpio_pin_configure+0xe8>)
   19c00:	4835      	ldr	r0, [pc, #212]	; (19cd8 <z_impl_gpio_pin_configure+0xec>)
   19c02:	f240 22be 	movw	r2, #702	; 0x2be
   19c06:	f009 fa0a 	bl	2301e <assert_print>
   19c0a:	f240 21be 	movw	r1, #702	; 0x2be
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   19c0e:	4831      	ldr	r0, [pc, #196]	; (19cd4 <z_impl_gpio_pin_configure+0xe8>)
   19c10:	f009 f9fe 	bl	23010 <assert_post_action>
   19c14:	f002 0230 	and.w	r2, r2, #48	; 0x30
   19c18:	2a30      	cmp	r2, #48	; 0x30
   19c1a:	d108      	bne.n	19c2e <z_impl_gpio_pin_configure+0x42>
   19c1c:	492d      	ldr	r1, [pc, #180]	; (19cd4 <z_impl_gpio_pin_configure+0xe8>)
   19c1e:	482e      	ldr	r0, [pc, #184]	; (19cd8 <z_impl_gpio_pin_configure+0xec>)
   19c20:	f240 22c1 	movw	r2, #705	; 0x2c1
   19c24:	f009 f9fb 	bl	2301e <assert_print>
   19c28:	f240 21c1 	movw	r1, #705	; 0x2c1
   19c2c:	e7ef      	b.n	19c0e <z_impl_gpio_pin_configure+0x22>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   19c2e:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   19c32:	2a02      	cmp	r2, #2
   19c34:	d108      	bne.n	19c48 <z_impl_gpio_pin_configure+0x5c>
   19c36:	4927      	ldr	r1, [pc, #156]	; (19cd4 <z_impl_gpio_pin_configure+0xe8>)
   19c38:	4827      	ldr	r0, [pc, #156]	; (19cd8 <z_impl_gpio_pin_configure+0xec>)
   19c3a:	f240 22c5 	movw	r2, #709	; 0x2c5
   19c3e:	f009 f9ee 	bl	2301e <assert_print>
   19c42:	f240 21c5 	movw	r1, #709	; 0x2c5
   19c46:	e7e2      	b.n	19c0e <z_impl_gpio_pin_configure+0x22>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   19c48:	f003 0206 	and.w	r2, r3, #6
   19c4c:	2a04      	cmp	r2, #4
   19c4e:	d108      	bne.n	19c62 <z_impl_gpio_pin_configure+0x76>
   19c50:	4920      	ldr	r1, [pc, #128]	; (19cd4 <z_impl_gpio_pin_configure+0xe8>)
   19c52:	4821      	ldr	r0, [pc, #132]	; (19cd8 <z_impl_gpio_pin_configure+0xec>)
   19c54:	f240 22c9 	movw	r2, #713	; 0x2c9
   19c58:	f009 f9e1 	bl	2301e <assert_print>
   19c5c:	f240 21c9 	movw	r1, #713	; 0x2c9
   19c60:	e7d5      	b.n	19c0e <z_impl_gpio_pin_configure+0x22>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   19c62:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   19c66:	d012      	beq.n	19c8e <z_impl_gpio_pin_configure+0xa2>
   19c68:	039d      	lsls	r5, r3, #14
   19c6a:	d408      	bmi.n	19c7e <z_impl_gpio_pin_configure+0x92>
   19c6c:	4919      	ldr	r1, [pc, #100]	; (19cd4 <z_impl_gpio_pin_configure+0xe8>)
   19c6e:	481a      	ldr	r0, [pc, #104]	; (19cd8 <z_impl_gpio_pin_configure+0xec>)
   19c70:	f44f 7233 	mov.w	r2, #716	; 0x2cc
   19c74:	f009 f9d3 	bl	2301e <assert_print>
   19c78:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   19c7c:	e7c7      	b.n	19c0e <z_impl_gpio_pin_configure+0x22>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   19c7e:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   19c82:	d014      	beq.n	19cae <z_impl_gpio_pin_configure+0xc2>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   19c84:	4a15      	ldr	r2, [pc, #84]	; (19cdc <z_impl_gpio_pin_configure+0xf0>)
   19c86:	439a      	bics	r2, r3
   19c88:	d101      	bne.n	19c8e <z_impl_gpio_pin_configure+0xa2>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   19c8a:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   19c8e:	6824      	ldr	r4, [r4, #0]
   19c90:	2501      	movs	r5, #1
   19c92:	408d      	lsls	r5, r1
   19c94:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   19c96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   19c9a:	d111      	bne.n	19cc0 <z_impl_gpio_pin_configure+0xd4>
   19c9c:	490d      	ldr	r1, [pc, #52]	; (19cd4 <z_impl_gpio_pin_configure+0xe8>)
   19c9e:	480e      	ldr	r0, [pc, #56]	; (19cd8 <z_impl_gpio_pin_configure+0xec>)
   19ca0:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   19ca4:	f009 f9bb 	bl	2301e <assert_print>
   19ca8:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   19cac:	e7af      	b.n	19c0e <z_impl_gpio_pin_configure+0x22>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   19cae:	4909      	ldr	r1, [pc, #36]	; (19cd4 <z_impl_gpio_pin_configure+0xe8>)
   19cb0:	4809      	ldr	r0, [pc, #36]	; (19cd8 <z_impl_gpio_pin_configure+0xec>)
   19cb2:	f44f 7234 	mov.w	r2, #720	; 0x2d0
   19cb6:	f009 f9b2 	bl	2301e <assert_print>
   19cba:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   19cbe:	e7a6      	b.n	19c0e <z_impl_gpio_pin_configure+0x22>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   19cc0:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   19cc2:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   19cc4:	bf4c      	ite	mi
   19cc6:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   19cc8:	43ac      	bicpl	r4, r5
   19cca:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   19ccc:	683b      	ldr	r3, [r7, #0]
}
   19cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   19cd2:	4718      	bx	r3
   19cd4:	000266e7 	.word	0x000266e7
   19cd8:	00026718 	.word	0x00026718
   19cdc:	00100001 	.word	0x00100001

00019ce0 <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   19ce0:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   19ce2:	2301      	movs	r3, #1
   19ce4:	fa03 f101 	lsl.w	r1, r3, r1
   19ce8:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   19cea:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   19cec:	681b      	ldr	r3, [r3, #0]
   19cee:	4219      	tst	r1, r3
   19cf0:	d10a      	bne.n	19d08 <gpio_pin_set+0x28>
   19cf2:	490c      	ldr	r1, [pc, #48]	; (19d24 <gpio_pin_set+0x44>)
   19cf4:	480c      	ldr	r0, [pc, #48]	; (19d28 <gpio_pin_set+0x48>)
   19cf6:	f240 5227 	movw	r2, #1319	; 0x527
   19cfa:	f009 f990 	bl	2301e <assert_print>
   19cfe:	4809      	ldr	r0, [pc, #36]	; (19d24 <gpio_pin_set+0x44>)
   19d00:	f240 5127 	movw	r1, #1319	; 0x527
   19d04:	f009 f984 	bl	23010 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   19d08:	6823      	ldr	r3, [r4, #0]
   19d0a:	4219      	tst	r1, r3
   19d0c:	d003      	beq.n	19d16 <gpio_pin_set+0x36>
	if (value != 0)	{
   19d0e:	b122      	cbz	r2, 19d1a <gpio_pin_set+0x3a>
	return api->port_clear_bits_raw(port, pins);
   19d10:	6883      	ldr	r3, [r0, #8]
   19d12:	691b      	ldr	r3, [r3, #16]
   19d14:	e003      	b.n	19d1e <gpio_pin_set+0x3e>
	if (value != 0)	{
   19d16:	2a00      	cmp	r2, #0
   19d18:	d0fa      	beq.n	19d10 <gpio_pin_set+0x30>
	return api->port_set_bits_raw(port, pins);
   19d1a:	6883      	ldr	r3, [r0, #8]
   19d1c:	68db      	ldr	r3, [r3, #12]
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   19d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   19d22:	4718      	bx	r3
   19d24:	000266e7 	.word	0x000266e7
   19d28:	00026718 	.word	0x00026718

00019d2c <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   19d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d30:	4e11      	ldr	r6, [pc, #68]	; (19d78 <dk_set_leds_state.part.0+0x4c>)
   19d32:	4607      	mov	r7, r0
   19d34:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   19d36:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   19d38:	fa27 f205 	lsr.w	r2, r7, r5
   19d3c:	f012 0201 	ands.w	r2, r2, #1
   19d40:	d110      	bne.n	19d64 <dk_set_leds_state.part.0+0x38>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   19d42:	fa28 f305 	lsr.w	r3, r8, r5
   19d46:	07db      	lsls	r3, r3, #31
   19d48:	d50e      	bpl.n	19d68 <dk_set_leds_state.part.0+0x3c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   19d4a:	7931      	ldrb	r1, [r6, #4]
   19d4c:	6830      	ldr	r0, [r6, #0]
   19d4e:	f7ff ffc7 	bl	19ce0 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   19d52:	4604      	mov	r4, r0
   19d54:	b140      	cbz	r0, 19d68 <dk_set_leds_state.part.0+0x3c>
			LOG_ERR("Cannot write LED gpio");
   19d56:	4809      	ldr	r0, [pc, #36]	; (19d7c <dk_set_leds_state.part.0+0x50>)
   19d58:	2145      	movs	r1, #69	; 0x45
   19d5a:	f009 f96e 	bl	2303a <z_log_minimal_printk>
			return err;
		}
	}

	return 0;
}
   19d5e:	4620      	mov	r0, r4
   19d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   19d64:	2201      	movs	r2, #1
   19d66:	e7f0      	b.n	19d4a <dk_set_leds_state.part.0+0x1e>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   19d68:	3501      	adds	r5, #1
   19d6a:	2d04      	cmp	r5, #4
   19d6c:	f106 0608 	add.w	r6, r6, #8
   19d70:	d1e2      	bne.n	19d38 <dk_set_leds_state.part.0+0xc>
	return 0;
   19d72:	2400      	movs	r4, #0
   19d74:	e7f3      	b.n	19d5e <dk_set_leds_state.part.0+0x32>
   19d76:	bf00      	nop
   19d78:	00026030 	.word	0x00026030
   19d7c:	00028141 	.word	0x00028141

00019d80 <dk_leds_init>:
{
   19d80:	b570      	push	{r4, r5, r6, lr}
   19d82:	4c0d      	ldr	r4, [pc, #52]	; (19db8 <dk_leds_init+0x38>)
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   19d84:	2600      	movs	r6, #0
				  spec->dt_flags | extra_flags);
   19d86:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   19d88:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   19d8a:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   19d8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   19d90:	f7ff ff2c 	bl	19bec <z_impl_gpio_pin_configure>
		if (err) {
   19d94:	4605      	mov	r5, r0
   19d96:	b948      	cbnz	r0, 19dac <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   19d98:	3601      	adds	r6, #1
   19d9a:	2e04      	cmp	r6, #4
   19d9c:	f104 0408 	add.w	r4, r4, #8
   19da0:	d1f1      	bne.n	19d86 <dk_leds_init+0x6>
}
   19da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   19da6:	210f      	movs	r1, #15
   19da8:	f7ff bfc0 	b.w	19d2c <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   19dac:	4803      	ldr	r0, [pc, #12]	; (19dbc <dk_leds_init+0x3c>)
   19dae:	2145      	movs	r1, #69	; 0x45
   19db0:	f009 f943 	bl	2303a <z_log_minimal_printk>
}
   19db4:	4628      	mov	r0, r5
   19db6:	bd70      	pop	{r4, r5, r6, pc}
   19db8:	00026030 	.word	0x00026030
   19dbc:	0002815c 	.word	0x0002815c

00019dc0 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   19dc0:	2803      	cmp	r0, #3
{
   19dc2:	b510      	push	{r4, lr}
   19dc4:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   19dc6:	d907      	bls.n	19dd8 <dk_set_led+0x18>
		LOG_ERR("LED index out of the range");
   19dc8:	480b      	ldr	r0, [pc, #44]	; (19df8 <dk_set_led+0x38>)
   19dca:	2145      	movs	r1, #69	; 0x45
   19dcc:	f009 f935 	bl	2303a <z_log_minimal_printk>
   19dd0:	f06f 0415 	mvn.w	r4, #21
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   19dd4:	4620      	mov	r0, r4
   19dd6:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   19dd8:	4b08      	ldr	r3, [pc, #32]	; (19dfc <dk_set_led+0x3c>)
   19dda:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   19dde:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   19de2:	7909      	ldrb	r1, [r1, #4]
   19de4:	f7ff ff7c 	bl	19ce0 <gpio_pin_set>
	if (err) {
   19de8:	4604      	mov	r4, r0
   19dea:	2800      	cmp	r0, #0
   19dec:	d0f2      	beq.n	19dd4 <dk_set_led+0x14>
		LOG_ERR("Cannot write LED gpio");
   19dee:	4804      	ldr	r0, [pc, #16]	; (19e00 <dk_set_led+0x40>)
   19df0:	2145      	movs	r1, #69	; 0x45
   19df2:	f009 f922 	bl	2303a <z_log_minimal_printk>
   19df6:	e7ed      	b.n	19dd4 <dk_set_led+0x14>
   19df8:	0002817b 	.word	0x0002817b
   19dfc:	00026030 	.word	0x00026030
   19e00:	00028141 	.word	0x00028141

00019e04 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   19e04:	4602      	mov	r2, r0
   19e06:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   19e08:	4801      	ldr	r0, [pc, #4]	; (19e10 <multithreading_lock_acquire+0xc>)
   19e0a:	f002 be73 	b.w	1caf4 <z_impl_k_mutex_lock>
   19e0e:	bf00      	nop
   19e10:	20000a48 	.word	0x20000a48

00019e14 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   19e14:	4801      	ldr	r0, [pc, #4]	; (19e1c <multithreading_lock_release+0x8>)
   19e16:	f002 bf23 	b.w	1cc60 <z_impl_k_mutex_unlock>
   19e1a:	bf00      	nop
   19e1c:	20000a48 	.word	0x20000a48

00019e20 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   19e20:	4803      	ldr	r0, [pc, #12]	; (19e30 <k_sys_fatal_error_handler+0x10>)
{
   19e22:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   19e24:	2145      	movs	r1, #69	; 0x45
   19e26:	f009 f908 	bl	2303a <z_log_minimal_printk>
		sys_arch_reboot(0);
   19e2a:	2000      	movs	r0, #0
   19e2c:	f7f9 f996 	bl	1315c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   19e30:	000281af 	.word	0x000281af

00019e34 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   19e34:	b508      	push	{r3, lr}
   19e36:	4602      	mov	r2, r0
   19e38:	460b      	mov	r3, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   19e3a:	4805      	ldr	r0, [pc, #20]	; (19e50 <sdc_assertion_handler+0x1c>)
   19e3c:	2145      	movs	r1, #69	; 0x45
   19e3e:	f009 f8fc 	bl	2303a <z_log_minimal_printk>
	k_oops();
   19e42:	4040      	eors	r0, r0
   19e44:	f380 8811 	msr	BASEPRI, r0
   19e48:	f04f 0003 	mov.w	r0, #3
   19e4c:	df02      	svc	2
}
   19e4e:	bd08      	pop	{r3, pc}
   19e50:	000281d1 	.word	0x000281d1

00019e54 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   19e54:	b510      	push	{r4, lr}
	BT_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   19e56:	4921      	ldr	r1, [pc, #132]	; (19edc <hci_driver_open+0x88>)
   19e58:	4821      	ldr	r0, [pc, #132]	; (19ee0 <hci_driver_open+0x8c>)
{
   19e5a:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   19e5c:	f003 fafe 	bl	1d45c <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   19e60:	f000 fe80 	bl	1ab64 <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   19e64:	a803      	add	r0, sp, #12
   19e66:	f7ea fd3d 	bl	48e4 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   19e6a:	4a1e      	ldr	r2, [pc, #120]	; (19ee4 <hci_driver_open+0x90>)
   19e6c:	481e      	ldr	r0, [pc, #120]	; (19ee8 <hci_driver_open+0x94>)
   19e6e:	2149      	movs	r1, #73	; 0x49
   19e70:	f009 f8e3 	bl	2303a <z_log_minimal_printk>
   19e74:	2214      	movs	r2, #20
   19e76:	a903      	add	r1, sp, #12
   19e78:	2003      	movs	r0, #3
   19e7a:	f7f8 f899 	bl	11fb0 <z_log_minimal_hexdump_print>
   19e7e:	481b      	ldr	r0, [pc, #108]	; (19eec <hci_driver_open+0x98>)
   19e80:	f00b f9b3 	bl	251ea <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   19e84:	b940      	cbnz	r0, 19e98 <hci_driver_open+0x44>
		BT_ERR("Entropy source device not ready");
   19e86:	481a      	ldr	r0, [pc, #104]	; (19ef0 <hci_driver_open+0x9c>)
   19e88:	2145      	movs	r1, #69	; 0x45
   19e8a:	f009 f8d6 	bl	2303a <z_log_minimal_printk>
		return -ENODEV;
   19e8e:	f06f 0412 	mvn.w	r4, #18
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   19e92:	4620      	mov	r0, r4
   19e94:	b008      	add	sp, #32
   19e96:	bd10      	pop	{r4, pc}
	sdc_rand_source_t rand_functions = {
   19e98:	4a16      	ldr	r2, [pc, #88]	; (19ef4 <hci_driver_open+0xa0>)
   19e9a:	ca07      	ldmia	r2, {r0, r1, r2}
   19e9c:	466b      	mov	r3, sp
   19e9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   19ea2:	4618      	mov	r0, r3
   19ea4:	f7ea fecc 	bl	4c40 <sdc_rand_source_register>
	if (err) {
   19ea8:	4602      	mov	r2, r0
   19eaa:	b130      	cbz	r0, 19eba <hci_driver_open+0x66>
		BT_ERR("Failed to register rand source (%d)", err);
   19eac:	4812      	ldr	r0, [pc, #72]	; (19ef8 <hci_driver_open+0xa4>)
   19eae:	2145      	movs	r1, #69	; 0x45
   19eb0:	f009 f8c3 	bl	2303a <z_log_minimal_printk>
		return -EINVAL;
   19eb4:	f06f 0415 	mvn.w	r4, #21
   19eb8:	e7eb      	b.n	19e92 <hci_driver_open+0x3e>
	err = MULTITHREADING_LOCK_ACQUIRE();
   19eba:	f04f 30ff 	mov.w	r0, #4294967295
   19ebe:	f04f 31ff 	mov.w	r1, #4294967295
   19ec2:	f7ff ff9f 	bl	19e04 <multithreading_lock_acquire>
	if (err) {
   19ec6:	4604      	mov	r4, r0
   19ec8:	2800      	cmp	r0, #0
   19eca:	d1e2      	bne.n	19e92 <hci_driver_open+0x3e>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   19ecc:	490b      	ldr	r1, [pc, #44]	; (19efc <hci_driver_open+0xa8>)
   19ece:	480c      	ldr	r0, [pc, #48]	; (19f00 <hci_driver_open+0xac>)
   19ed0:	f7ea fd7a 	bl	49c8 <sdc_enable>
	if (err) {
   19ed4:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   19ed6:	f7ff ff9d 	bl	19e14 <multithreading_lock_release>
	return 0;
   19eda:	e7da      	b.n	19e92 <hci_driver_open+0x3e>
   19edc:	00024e27 	.word	0x00024e27
   19ee0:	20002e4c 	.word	0x20002e4c
   19ee4:	000281fb 	.word	0x000281fb
   19ee8:	00028222 	.word	0x00028222
   19eec:	00025700 	.word	0x00025700
   19ef0:	0002822a 	.word	0x0002822a
   19ef4:	00025a98 	.word	0x00025a98
   19ef8:	0002824f 	.word	0x0002824f
   19efc:	20003d61 	.word	0x20003d61
   19f00:	0001a085 	.word	0x0001a085

00019f04 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   19f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   19f06:	4838      	ldr	r0, [pc, #224]	; (19fe8 <hci_driver_init+0xe4>)
   19f08:	f7fa f9c6 	bl	14298 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   19f0c:	4837      	ldr	r0, [pc, #220]	; (19fec <hci_driver_init+0xe8>)
   19f0e:	f7ea fd83 	bl	4a18 <sdc_init>
			err = sdc_support_adv();
   19f12:	f7ea fdff 	bl	4b14 <sdc_support_adv>
			if (err) {
   19f16:	b118      	cbz	r0, 19f20 <hci_driver_init+0x1c>
				return -ENOTSUP;
   19f18:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   19f1c:	b003      	add	sp, #12
   19f1e:	bd30      	pop	{r4, r5, pc}
		err = sdc_support_peripheral();
   19f20:	f7ea fe28 	bl	4b74 <sdc_support_peripheral>
		if (err) {
   19f24:	2800      	cmp	r0, #0
   19f26:	d1f7      	bne.n	19f18 <hci_driver_init+0x14>
			err = sdc_support_dle_peripheral();
   19f28:	f7ea fe04 	bl	4b34 <sdc_support_dle_peripheral>
			if (err) {
   19f2c:	2800      	cmp	r0, #0
   19f2e:	d1f3      	bne.n	19f18 <hci_driver_init+0x14>
		err = sdc_support_le_2m_phy();
   19f30:	f7ea fe10 	bl	4b54 <sdc_support_le_2m_phy>
		if (err) {
   19f34:	2800      	cmp	r0, #0
   19f36:	d1ef      	bne.n	19f18 <hci_driver_init+0x14>
			err = sdc_support_phy_update_peripheral();
   19f38:	f7ea fe2c 	bl	4b94 <sdc_support_phy_update_peripheral>
			if (err) {
   19f3c:	4604      	mov	r4, r0
   19f3e:	2800      	cmp	r0, #0
   19f40:	d1ea      	bne.n	19f18 <hci_driver_init+0x14>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19f42:	aa01      	add	r2, sp, #4
   19f44:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   19f46:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19f4a:	f7ea fcd9 	bl	4900 <sdc_cfg_set>
	if (required_memory < 0) {
   19f4e:	2800      	cmp	r0, #0
   19f50:	dbe4      	blt.n	19f1c <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   19f52:	2504      	movs	r5, #4
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19f54:	eb0d 0205 	add.w	r2, sp, r5
   19f58:	2102      	movs	r1, #2
   19f5a:	4620      	mov	r0, r4
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   19f5c:	f88d 5004 	strb.w	r5, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19f60:	f7ea fcce 	bl	4900 <sdc_cfg_set>
	if (required_memory < 0) {
   19f64:	2800      	cmp	r0, #0
   19f66:	dbd9      	blt.n	19f1c <hci_driver_init+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   19f68:	4b21      	ldr	r3, [pc, #132]	; (19ff0 <hci_driver_init+0xec>)
   19f6a:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19f6c:	eb0d 0205 	add.w	r2, sp, r5
   19f70:	2103      	movs	r1, #3
   19f72:	4620      	mov	r0, r4
   19f74:	f7ea fcc4 	bl	4900 <sdc_cfg_set>
	if (required_memory < 0) {
   19f78:	2800      	cmp	r0, #0
   19f7a:	dbcf      	blt.n	19f1c <hci_driver_init+0x18>
	cfg.event_length.event_length_us =
   19f7c:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19f80:	eb0d 0205 	add.w	r2, sp, r5
   19f84:	4629      	mov	r1, r5
   19f86:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   19f88:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19f8a:	f7ea fcb9 	bl	4900 <sdc_cfg_set>
	if (required_memory < 0) {
   19f8e:	2800      	cmp	r0, #0
   19f90:	dbc4      	blt.n	19f1c <hci_driver_init+0x18>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   19f92:	2301      	movs	r3, #1
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19f94:	eb0d 0205 	add.w	r2, sp, r5
   19f98:	2105      	movs	r1, #5
   19f9a:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   19f9c:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19fa0:	f7ea fcae 	bl	4900 <sdc_cfg_set>
	if (required_memory < 0) {
   19fa4:	2800      	cmp	r0, #0
   19fa6:	dbb9      	blt.n	19f1c <hci_driver_init+0x18>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   19fa8:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19faa:	eb0d 0205 	add.w	r2, sp, r5
   19fae:	2107      	movs	r1, #7
   19fb0:	2000      	movs	r0, #0
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   19fb2:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19fb6:	f7ea fca3 	bl	4900 <sdc_cfg_set>
		if (required_memory < 0) {
   19fba:	2800      	cmp	r0, #0
   19fbc:	dbae      	blt.n	19f1c <hci_driver_init+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   19fbe:	f241 629e 	movw	r2, #5790	; 0x169e
   19fc2:	4290      	cmp	r0, r2
   19fc4:	dd0d      	ble.n	19fe2 <hci_driver_init+0xde>
		BT_ERR("Allocated memory too low: %u < %u",
   19fc6:	4603      	mov	r3, r0
   19fc8:	2145      	movs	r1, #69	; 0x45
   19fca:	480a      	ldr	r0, [pc, #40]	; (19ff4 <hci_driver_init+0xf0>)
   19fcc:	f009 f835 	bl	2303a <z_log_minimal_printk>
		k_panic();
   19fd0:	4040      	eors	r0, r0
   19fd2:	f380 8811 	msr	BASEPRI, r0
   19fd6:	f04f 0004 	mov.w	r0, #4
   19fda:	df02      	svc	2
		return -ENOMEM;
   19fdc:	f06f 000b 	mvn.w	r0, #11
   19fe0:	e79c      	b.n	19f1c <hci_driver_init+0x18>
	return 0;
   19fe2:	2000      	movs	r0, #0
	if (err) {
   19fe4:	e79a      	b.n	19f1c <hci_driver_init+0x18>
   19fe6:	bf00      	nop
   19fe8:	00026050 	.word	0x00026050
   19fec:	00019e35 	.word	0x00019e35
   19ff0:	02031b1b 	.word	0x02031b1b
   19ff4:	00028278 	.word	0x00028278

00019ff8 <rand_prio_low_vector_get_blocking>:
{
   19ff8:	b510      	push	{r4, lr}
   19ffa:	4603      	mov	r3, r0
   19ffc:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   19ffe:	480d      	ldr	r0, [pc, #52]	; (1a034 <rand_prio_low_vector_get_blocking+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1a000:	6881      	ldr	r1, [r0, #8]
   1a002:	680c      	ldr	r4, [r1, #0]
   1a004:	b944      	cbnz	r4, 1a018 <rand_prio_low_vector_get_blocking+0x20>
   1a006:	490c      	ldr	r1, [pc, #48]	; (1a038 <rand_prio_low_vector_get_blocking+0x40>)
   1a008:	480c      	ldr	r0, [pc, #48]	; (1a03c <rand_prio_low_vector_get_blocking+0x44>)
   1a00a:	224d      	movs	r2, #77	; 0x4d
   1a00c:	f009 f807 	bl	2301e <assert_print>
   1a010:	4809      	ldr	r0, [pc, #36]	; (1a038 <rand_prio_low_vector_get_blocking+0x40>)
   1a012:	214d      	movs	r1, #77	; 0x4d
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1a014:	f008 fffc 	bl	23010 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1a018:	4619      	mov	r1, r3
   1a01a:	47a0      	blx	r4
   1a01c:	b148      	cbz	r0, 1a032 <rand_prio_low_vector_get_blocking+0x3a>
   1a01e:	4908      	ldr	r1, [pc, #32]	; (1a040 <rand_prio_low_vector_get_blocking+0x48>)
   1a020:	4806      	ldr	r0, [pc, #24]	; (1a03c <rand_prio_low_vector_get_blocking+0x44>)
   1a022:	f240 12a9 	movw	r2, #425	; 0x1a9
   1a026:	f008 fffa 	bl	2301e <assert_print>
   1a02a:	4805      	ldr	r0, [pc, #20]	; (1a040 <rand_prio_low_vector_get_blocking+0x48>)
   1a02c:	f240 11a9 	movw	r1, #425	; 0x1a9
   1a030:	e7f0      	b.n	1a014 <rand_prio_low_vector_get_blocking+0x1c>
}
   1a032:	bd10      	pop	{r4, pc}
   1a034:	00025700 	.word	0x00025700
   1a038:	0002829f 	.word	0x0002829f
   1a03c:	00026718 	.word	0x00026718
   1a040:	000282d3 	.word	0x000282d3

0001a044 <rand_prio_low_vector_get>:
{
   1a044:	b538      	push	{r3, r4, r5, lr}
   1a046:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1a048:	480b      	ldr	r0, [pc, #44]	; (1a078 <rand_prio_low_vector_get+0x34>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1a04a:	6883      	ldr	r3, [r0, #8]
   1a04c:	685d      	ldr	r5, [r3, #4]
   1a04e:	460a      	mov	r2, r1
   1a050:	b955      	cbnz	r5, 1a068 <rand_prio_low_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1a052:	490a      	ldr	r1, [pc, #40]	; (1a07c <rand_prio_low_vector_get+0x38>)
   1a054:	480a      	ldr	r0, [pc, #40]	; (1a080 <rand_prio_low_vector_get+0x3c>)
   1a056:	f240 1299 	movw	r2, #409	; 0x199
   1a05a:	f008 ffe0 	bl	2301e <assert_print>
   1a05e:	4807      	ldr	r0, [pc, #28]	; (1a07c <rand_prio_low_vector_get+0x38>)
   1a060:	f240 1199 	movw	r1, #409	; 0x199
   1a064:	f008 ffd4 	bl	23010 <assert_post_action>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1a068:	2300      	movs	r3, #0
   1a06a:	4621      	mov	r1, r4
   1a06c:	47a8      	blx	r5
   1a06e:	2800      	cmp	r0, #0
   1a070:	dbef      	blt.n	1a052 <rand_prio_low_vector_get+0xe>
}
   1a072:	b2c0      	uxtb	r0, r0
   1a074:	bd38      	pop	{r3, r4, r5, pc}
   1a076:	bf00      	nop
   1a078:	00025700 	.word	0x00025700
   1a07c:	000282d3 	.word	0x000282d3
   1a080:	00026718 	.word	0x00026718

0001a084 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1a084:	4901      	ldr	r1, [pc, #4]	; (1a08c <receive_signal_raise+0x8>)
   1a086:	4802      	ldr	r0, [pc, #8]	; (1a090 <receive_signal_raise+0xc>)
   1a088:	f00b b99f 	b.w	253ca <k_work_submit_to_queue>
   1a08c:	20002e4c 	.word	0x20002e4c
   1a090:	20001f40 	.word	0x20001f40

0001a094 <rand_prio_high_vector_get>:
{
   1a094:	b538      	push	{r3, r4, r5, lr}
   1a096:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1a098:	480b      	ldr	r0, [pc, #44]	; (1a0c8 <rand_prio_high_vector_get+0x34>)
	if (unlikely(!api->get_entropy_isr)) {
   1a09a:	6883      	ldr	r3, [r0, #8]
   1a09c:	685d      	ldr	r5, [r3, #4]
   1a09e:	460a      	mov	r2, r1
   1a0a0:	b955      	cbnz	r5, 1a0b8 <rand_prio_high_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1a0a2:	490a      	ldr	r1, [pc, #40]	; (1a0cc <rand_prio_high_vector_get+0x38>)
   1a0a4:	480a      	ldr	r0, [pc, #40]	; (1a0d0 <rand_prio_high_vector_get+0x3c>)
   1a0a6:	f240 12a1 	movw	r2, #417	; 0x1a1
   1a0aa:	f008 ffb8 	bl	2301e <assert_print>
   1a0ae:	4807      	ldr	r0, [pc, #28]	; (1a0cc <rand_prio_high_vector_get+0x38>)
   1a0b0:	f240 11a1 	movw	r1, #417	; 0x1a1
   1a0b4:	f008 ffac 	bl	23010 <assert_post_action>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1a0b8:	2300      	movs	r3, #0
   1a0ba:	4621      	mov	r1, r4
   1a0bc:	47a8      	blx	r5
   1a0be:	2800      	cmp	r0, #0
   1a0c0:	dbef      	blt.n	1a0a2 <rand_prio_high_vector_get+0xe>
}
   1a0c2:	b2c0      	uxtb	r0, r0
   1a0c4:	bd38      	pop	{r3, r4, r5, pc}
   1a0c6:	bf00      	nop
   1a0c8:	00025700 	.word	0x00025700
   1a0cc:	000282d3 	.word	0x000282d3
   1a0d0:	00026718 	.word	0x00026718

0001a0d4 <hci_driver_receive_process>:
{
   1a0d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a0d6:	f04f 30ff 	mov.w	r0, #4294967295
   1a0da:	f04f 31ff 	mov.w	r1, #4294967295
   1a0de:	f7ff fe91 	bl	19e04 <multithreading_lock_acquire>
	if (!errcode) {
   1a0e2:	2800      	cmp	r0, #0
   1a0e4:	d15b      	bne.n	1a19e <hci_driver_receive_process+0xca>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1a0e6:	4d2f      	ldr	r5, [pc, #188]	; (1a1a4 <hci_driver_receive_process+0xd0>)
   1a0e8:	f10d 0107 	add.w	r1, sp, #7
   1a0ec:	4628      	mov	r0, r5
   1a0ee:	f000 fbed 	bl	1a8cc <hci_internal_msg_get>
   1a0f2:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1a0f4:	f7ff fe8e 	bl	19e14 <multithreading_lock_release>
	if (errcode) {
   1a0f8:	2c00      	cmp	r4, #0
   1a0fa:	d150      	bne.n	1a19e <hci_driver_receive_process+0xca>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1a0fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a100:	2b04      	cmp	r3, #4
   1a102:	d12b      	bne.n	1a15c <hci_driver_receive_process+0x88>
	switch (hdr->evt) {
   1a104:	7828      	ldrb	r0, [r5, #0]
   1a106:	283e      	cmp	r0, #62	; 0x3e
   1a108:	d014      	beq.n	1a134 <hci_driver_receive_process+0x60>
   1a10a:	28ff      	cmp	r0, #255	; 0xff
   1a10c:	d019      	beq.n	1a142 <hci_driver_receive_process+0x6e>
		switch (subevent) {
   1a10e:	f04f 32ff 	mov.w	r2, #4294967295
   1a112:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1a116:	4621      	mov	r1, r4
   1a118:	f7f9 f936 	bl	13388 <bt_buf_get_evt>
	if (!evt_buf) {
   1a11c:	4606      	mov	r6, r0
   1a11e:	b998      	cbnz	r0, 1a148 <hci_driver_receive_process+0x74>
		if (discardable) {
   1a120:	b91c      	cbnz	r4, 1a12a <hci_driver_receive_process+0x56>
		BT_ERR("No event buffer available");
   1a122:	4821      	ldr	r0, [pc, #132]	; (1a1a8 <hci_driver_receive_process+0xd4>)
   1a124:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No data buffer available");
   1a126:	f008 ff88 	bl	2303a <z_log_minimal_printk>
}
   1a12a:	b002      	add	sp, #8
   1a12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1a130:	f7ff bfa8 	b.w	1a084 <receive_signal_raise>
		switch (me->subevent) {
   1a134:	78ab      	ldrb	r3, [r5, #2]
   1a136:	2b02      	cmp	r3, #2
		switch (subevent) {
   1a138:	d1e9      	bne.n	1a10e <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1a13a:	2200      	movs	r2, #0
   1a13c:	2300      	movs	r3, #0
			return true;
   1a13e:	2401      	movs	r4, #1
   1a140:	e7e9      	b.n	1a116 <hci_driver_receive_process+0x42>
		switch (subevent) {
   1a142:	78ab      	ldrb	r3, [r5, #2]
   1a144:	2b80      	cmp	r3, #128	; 0x80
   1a146:	e7f7      	b.n	1a138 <hci_driver_receive_process+0x64>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1a148:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a14a:	4916      	ldr	r1, [pc, #88]	; (1a1a4 <hci_driver_receive_process+0xd0>)
   1a14c:	3202      	adds	r2, #2
   1a14e:	3008      	adds	r0, #8
   1a150:	f00a fc16 	bl	24980 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1a154:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1a156:	f7fa f879 	bl	1424c <bt_recv>
   1a15a:	e7e6      	b.n	1a12a <hci_driver_receive_process+0x56>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1a15c:	2b02      	cmp	r3, #2
   1a15e:	d113      	bne.n	1a188 <hci_driver_receive_process+0xb4>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1a160:	f04f 32ff 	mov.w	r2, #4294967295
   1a164:	f04f 33ff 	mov.w	r3, #4294967295
   1a168:	2003      	movs	r0, #3
   1a16a:	f7f9 f8cf 	bl	1330c <bt_buf_get_rx>
	if (!data_buf) {
   1a16e:	4604      	mov	r4, r0
   1a170:	b910      	cbnz	r0, 1a178 <hci_driver_receive_process+0xa4>
		BT_ERR("No data buffer available");
   1a172:	480e      	ldr	r0, [pc, #56]	; (1a1ac <hci_driver_receive_process+0xd8>)
   1a174:	2145      	movs	r1, #69	; 0x45
   1a176:	e7d6      	b.n	1a126 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1a178:	886a      	ldrh	r2, [r5, #2]
   1a17a:	4629      	mov	r1, r5
   1a17c:	3204      	adds	r2, #4
   1a17e:	3008      	adds	r0, #8
   1a180:	f00a fbfe 	bl	24980 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1a184:	4620      	mov	r0, r4
   1a186:	e7e6      	b.n	1a156 <hci_driver_receive_process+0x82>
		__ASSERT(false, "sdc_hci_msg_type_t has changed. This if-else needs a new branch");
   1a188:	4909      	ldr	r1, [pc, #36]	; (1a1b0 <hci_driver_receive_process+0xdc>)
   1a18a:	480a      	ldr	r0, [pc, #40]	; (1a1b4 <hci_driver_receive_process+0xe0>)
   1a18c:	f44f 72bb 	mov.w	r2, #374	; 0x176
   1a190:	f008 ff45 	bl	2301e <assert_print>
   1a194:	4806      	ldr	r0, [pc, #24]	; (1a1b0 <hci_driver_receive_process+0xdc>)
   1a196:	f44f 71bb 	mov.w	r1, #374	; 0x176
   1a19a:	f008 ff39 	bl	23010 <assert_post_action>
}
   1a19e:	b002      	add	sp, #8
   1a1a0:	bd70      	pop	{r4, r5, r6, pc}
   1a1a2:	bf00      	nop
   1a1a4:	20003d1b 	.word	0x20003d1b
   1a1a8:	0002830c 	.word	0x0002830c
   1a1ac:	0002832b 	.word	0x0002832b
   1a1b0:	000282d3 	.word	0x000282d3
   1a1b4:	00026718 	.word	0x00026718

0001a1b8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1a1b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1a1ba:	4db2      	ldr	r5, [pc, #712]	; (1a484 <hci_internal_cmd_put+0x2cc>)
   1a1bc:	782b      	ldrb	r3, [r5, #0]
{
   1a1be:	4606      	mov	r6, r0
	if (cmd_complete_or_status.occurred) {
   1a1c0:	2b00      	cmp	r3, #0
   1a1c2:	f040 8380 	bne.w	1a8c6 <hci_internal_cmd_put+0x70e>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1a1c6:	2304      	movs	r3, #4
   1a1c8:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1a1cc:	4bae      	ldr	r3, [pc, #696]	; (1a488 <hci_internal_cmd_put+0x2d0>)
   1a1ce:	8804      	ldrh	r4, [r0, #0]
   1a1d0:	681f      	ldr	r7, [r3, #0]
   1a1d2:	b1a7      	cbz	r7, 1a1fe <hci_internal_cmd_put+0x46>
		status = user_cmd_handler(cmd_in,
   1a1d4:	f10d 0306 	add.w	r3, sp, #6
   1a1d8:	f10d 0207 	add.w	r2, sp, #7
   1a1dc:	1c69      	adds	r1, r5, #1
   1a1de:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1a1e0:	2801      	cmp	r0, #1
   1a1e2:	d00c      	beq.n	1a1fe <hci_internal_cmd_put+0x46>
	if (generate_command_status_event ||
   1a1e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1a1e8:	bbab      	cbnz	r3, 1a256 <hci_internal_cmd_put+0x9e>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1a1ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1a1ee:	70ab      	strb	r3, [r5, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1a1f0:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1a1f2:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1a1f4:	706a      	strb	r2, [r5, #1]
	evt_data->ncmd = 1;
   1a1f6:	70eb      	strb	r3, [r5, #3]
	evt_data->opcode = hci_opcode;
   1a1f8:	80ac      	strh	r4, [r5, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1a1fa:	71a8      	strb	r0, [r5, #6]
}
   1a1fc:	e034      	b.n	1a268 <hci_internal_cmd_put+0xb0>
		switch (BT_OGF(opcode)) {
   1a1fe:	f5b4 5f10 	cmp.w	r4, #9216	; 0x2400
   1a202:	ea4f 2394 	mov.w	r3, r4, lsr #10
   1a206:	d20d      	bcs.n	1a224 <hci_internal_cmd_put+0x6c>
   1a208:	b17b      	cbz	r3, 1a22a <hci_internal_cmd_put+0x72>
   1a20a:	3b01      	subs	r3, #1
   1a20c:	2b07      	cmp	r3, #7
   1a20e:	d819      	bhi.n	1a244 <hci_internal_cmd_put+0x8c>
   1a210:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a214:	0018000d 	.word	0x0018000d
   1a218:	0081003f 	.word	0x0081003f
   1a21c:	00180018 	.word	0x00180018
   1a220:	01400018 	.word	0x01400018
   1a224:	2b3f      	cmp	r3, #63	; 0x3f
   1a226:	f000 8290 	beq.w	1a74a <hci_internal_cmd_put+0x592>
	switch (opcode)	{
   1a22a:	2001      	movs	r0, #1
   1a22c:	e013      	b.n	1a256 <hci_internal_cmd_put+0x9e>
	return ((uint16_t)src[1] << 8) | src[0];
   1a22e:	4630      	mov	r0, r6
	switch (opcode)	{
   1a230:	f240 4206 	movw	r2, #1030	; 0x406
   1a234:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1a238:	4293      	cmp	r3, r2
   1a23a:	d005      	beq.n	1a248 <hci_internal_cmd_put+0x90>
   1a23c:	f240 421d 	movw	r2, #1053	; 0x41d
   1a240:	4293      	cmp	r3, r2
   1a242:	d016      	beq.n	1a272 <hci_internal_cmd_put+0xba>
		switch (BT_OGF(opcode)) {
   1a244:	2001      	movs	r0, #1
   1a246:	e001      	b.n	1a24c <hci_internal_cmd_put+0x94>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1a248:	f7f2 fe84 	bl	cf54 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1a24c:	f240 4306 	movw	r3, #1030	; 0x406
   1a250:	429c      	cmp	r4, r3
   1a252:	f040 832b 	bne.w	1a8ac <hci_internal_cmd_put+0x6f4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1a256:	230f      	movs	r3, #15
   1a258:	706b      	strb	r3, [r5, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1a25a:	2304      	movs	r3, #4
   1a25c:	70ab      	strb	r3, [r5, #2]
	evt_data->ncmd = 1;
   1a25e:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1a260:	70e8      	strb	r0, [r5, #3]
	evt_data->ncmd = 1;
   1a262:	712b      	strb	r3, [r5, #4]
	evt_data->opcode = hci_opcode;
   1a264:	f8a5 4005 	strh.w	r4, [r5, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1a268:	2301      	movs	r3, #1
   1a26a:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   1a26c:	2000      	movs	r0, #0
}
   1a26e:	b003      	add	sp, #12
   1a270:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1a272:	f7f2 fe71 	bl	cf58 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1a276:	f242 030c 	movw	r3, #8204	; 0x200c
   1a27a:	429c      	cmp	r4, r3
   1a27c:	d9e6      	bls.n	1a24c <hci_internal_cmd_put+0x94>
   1a27e:	f5a4 5300 	sub.w	r3, r4, #8192	; 0x2000
   1a282:	4a82      	ldr	r2, [pc, #520]	; (1a48c <hci_internal_cmd_put+0x2d4>)
   1a284:	3b0d      	subs	r3, #13
   1a286:	b29b      	uxth	r3, r3
   1a288:	fa22 f303 	lsr.w	r3, r2, r3
   1a28c:	07db      	lsls	r3, r3, #31
   1a28e:	d516      	bpl.n	1a2be <hci_internal_cmd_put+0x106>
   1a290:	e7e1      	b.n	1a256 <hci_internal_cmd_put+0x9e>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a292:	4630      	mov	r0, r6
	switch (opcode)	{
   1a294:	f640 4263 	movw	r2, #3171	; 0xc63
   1a298:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1a29c:	4293      	cmp	r3, r2
   1a29e:	d02e      	beq.n	1a2fe <hci_internal_cmd_put+0x146>
   1a2a0:	dc10      	bgt.n	1a2c4 <hci_internal_cmd_put+0x10c>
   1a2a2:	f640 4203 	movw	r2, #3075	; 0xc03
   1a2a6:	4293      	cmp	r3, r2
   1a2a8:	d01d      	beq.n	1a2e6 <hci_internal_cmd_put+0x12e>
   1a2aa:	f640 422d 	movw	r2, #3117	; 0xc2d
   1a2ae:	4293      	cmp	r3, r2
   1a2b0:	d01c      	beq.n	1a2ec <hci_internal_cmd_put+0x134>
   1a2b2:	f640 4201 	movw	r2, #3073	; 0xc01
   1a2b6:	4293      	cmp	r3, r2
   1a2b8:	d1b7      	bne.n	1a22a <hci_internal_cmd_put+0x72>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1a2ba:	f7f2 fd33 	bl	cd24 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1a2be:	2801      	cmp	r0, #1
   1a2c0:	d0b3      	beq.n	1a22a <hci_internal_cmd_put+0x72>
   1a2c2:	e792      	b.n	1a1ea <hci_internal_cmd_put+0x32>
	switch (opcode)	{
   1a2c4:	f640 427b 	movw	r2, #3195	; 0xc7b
   1a2c8:	4293      	cmp	r3, r2
   1a2ca:	d01b      	beq.n	1a304 <hci_internal_cmd_put+0x14c>
   1a2cc:	f640 427c 	movw	r2, #3196	; 0xc7c
   1a2d0:	4293      	cmp	r3, r2
   1a2d2:	d1aa      	bne.n	1a22a <hci_internal_cmd_put+0x72>
		*param_length_out +=
   1a2d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1a2d8:	496d      	ldr	r1, [pc, #436]	; (1a490 <hci_internal_cmd_put+0x2d8>)
		*param_length_out +=
   1a2da:	3302      	adds	r3, #2
   1a2dc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1a2e0:	f7f2 fd2a 	bl	cd38 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1a2e4:	e7eb      	b.n	1a2be <hci_internal_cmd_put+0x106>
		return sdc_hci_cmd_cb_reset();
   1a2e6:	f7ea fdad 	bl	4e44 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1a2ea:	e7e8      	b.n	1a2be <hci_internal_cmd_put+0x106>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1a2ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1a2f0:	4967      	ldr	r1, [pc, #412]	; (1a490 <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1a2f2:	3303      	adds	r3, #3
   1a2f4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1a2f8:	f7f2 fd12 	bl	cd20 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1a2fc:	e7df      	b.n	1a2be <hci_internal_cmd_put+0x106>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1a2fe:	f7f2 fd16 	bl	cd2e <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1a302:	e7dc      	b.n	1a2be <hci_internal_cmd_put+0x106>
		*param_length_out +=
   1a304:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1a308:	4961      	ldr	r1, [pc, #388]	; (1a490 <hci_internal_cmd_put+0x2d8>)
		*param_length_out +=
   1a30a:	3304      	adds	r3, #4
   1a30c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1a310:	f7f2 fd04 	bl	cd1c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1a314:	e7d3      	b.n	1a2be <hci_internal_cmd_put+0x106>
	switch (opcode)	{
   1a316:	8833      	ldrh	r3, [r6, #0]
   1a318:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1a31c:	3b01      	subs	r3, #1
   1a31e:	2b08      	cmp	r3, #8
   1a320:	d883      	bhi.n	1a22a <hci_internal_cmd_put+0x72>
   1a322:	a201      	add	r2, pc, #4	; (adr r2, 1a328 <hci_internal_cmd_put+0x170>)
   1a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a328:	0001a34d 	.word	0x0001a34d
   1a32c:	0001a35f 	.word	0x0001a35f
   1a330:	0001a44f 	.word	0x0001a44f
   1a334:	0001a22b 	.word	0x0001a22b
   1a338:	0001a22b 	.word	0x0001a22b
   1a33c:	0001a22b 	.word	0x0001a22b
   1a340:	0001a22b 	.word	0x0001a22b
   1a344:	0001a22b 	.word	0x0001a22b
   1a348:	0001a471 	.word	0x0001a471
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1a34c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1a350:	484f      	ldr	r0, [pc, #316]	; (1a490 <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1a352:	3308      	adds	r3, #8
   1a354:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1a358:	f7f2 fdbd 	bl	ced6 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1a35c:	e7af      	b.n	1a2be <hci_internal_cmd_put+0x106>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1a35e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a362:	484b      	ldr	r0, [pc, #300]	; (1a490 <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1a364:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1a366:	222f      	movs	r2, #47	; 0x2f
   1a368:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1a36a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a36e:	f009 f906 	bl	2357e <memset>
	cmds->hci_disconnect = 1;
   1a372:	79eb      	ldrb	r3, [r5, #7]
   1a374:	f043 0320 	orr.w	r3, r3, #32
   1a378:	71eb      	strb	r3, [r5, #7]
	cmds->hci_read_remote_version_information = 1;
   1a37a:	7a6b      	ldrb	r3, [r5, #9]
   1a37c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a380:	726b      	strb	r3, [r5, #9]
	cmds->hci_set_event_mask = 1;
   1a382:	7b2b      	ldrb	r3, [r5, #12]
   1a384:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a388:	732b      	strb	r3, [r5, #12]
	cmds->hci_read_transmit_power_level = 1;
   1a38a:	7c6b      	ldrb	r3, [r5, #17]
   1a38c:	f043 0304 	orr.w	r3, r3, #4
   1a390:	746b      	strb	r3, [r5, #17]
	cmds->hci_read_local_version_information = 1;
   1a392:	7d6b      	ldrb	r3, [r5, #21]
   1a394:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1a398:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1a39c:	756b      	strb	r3, [r5, #21]
	cmds->hci_read_bd_addr = 1;
   1a39e:	7dab      	ldrb	r3, [r5, #22]
   1a3a0:	f043 0302 	orr.w	r3, r3, #2
   1a3a4:	75ab      	strb	r3, [r5, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1a3a6:	7f6b      	ldrb	r3, [r5, #29]
   1a3a8:	f043 0304 	orr.w	r3, r3, #4
   1a3ac:	776b      	strb	r3, [r5, #29]
	cmds->hci_le_set_event_mask = 1;
   1a3ae:	f895 3020 	ldrb.w	r3, [r5, #32]
   1a3b2:	f063 0308 	orn	r3, r3, #8
   1a3b6:	f885 3020 	strb.w	r3, [r5, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1a3ba:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1a3be:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1a3c2:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1a3c6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1a3ca:	f063 030c 	orn	r3, r3, #12
   1a3ce:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1a3d2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1a3d6:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1a3da:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1a3de:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1a3e2:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   1a3e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1a3ea:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1a3ee:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1a3f2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1a3f6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a3fa:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1a3fe:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1a402:	f023 0307 	bic.w	r3, r3, #7
   1a406:	f043 0307 	orr.w	r3, r3, #7
   1a40a:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1a40e:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   1a412:	f063 0307 	orn	r3, r3, #7
   1a416:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1a41a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1a41e:	f043 0301 	orr.w	r3, r3, #1
   1a422:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1a426:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1a42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a42e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1a432:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1a436:	f043 0304 	orr.w	r3, r3, #4
   1a43a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   1a43e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   1a442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a446:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		return 0;
   1a44a:	2000      	movs	r0, #0
   1a44c:	e6cd      	b.n	1a1ea <hci_internal_cmd_put+0x32>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1a44e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1a452:	480f      	ldr	r0, [pc, #60]	; (1a490 <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1a454:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1a456:	2208      	movs	r2, #8
   1a458:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1a45a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1a45e:	f009 f88e 	bl	2357e <memset>
	features->bdedr_not_supported = 1;
   1a462:	7aeb      	ldrb	r3, [r5, #11]
   1a464:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1a468:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1a46c:	72eb      	strb	r3, [r5, #11]
	if (generate_command_status_event ||
   1a46e:	e7ec      	b.n	1a44a <hci_internal_cmd_put+0x292>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1a470:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1a474:	4806      	ldr	r0, [pc, #24]	; (1a490 <hci_internal_cmd_put+0x2d8>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1a476:	3306      	adds	r3, #6
   1a478:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1a47c:	f7f2 fd29 	bl	ced2 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1a480:	e71d      	b.n	1a2be <hci_internal_cmd_put+0x106>
   1a482:	bf00      	nop
   1a484:	200053ff 	.word	0x200053ff
   1a488:	20002e5c 	.word	0x20002e5c
   1a48c:	03001241 	.word	0x03001241
   1a490:	20005406 	.word	0x20005406
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a494:	4630      	mov	r0, r6
	switch (opcode)	{
   1a496:	f242 014b 	movw	r1, #8267	; 0x204b
   1a49a:	f830 3b03 	ldrh.w	r3, [r0], #3
   1a49e:	b21a      	sxth	r2, r3
   1a4a0:	428a      	cmp	r2, r1
   1a4a2:	dc56      	bgt.n	1a552 <hci_internal_cmd_put+0x39a>
   1a4a4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1a4a8:	f242 0626 	movw	r6, #8230	; 0x2026
   1a4ac:	dd5c      	ble.n	1a568 <hci_internal_cmd_put+0x3b0>
   1a4ae:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1a4b2:	3b01      	subs	r3, #1
   1a4b4:	2b4a      	cmp	r3, #74	; 0x4a
   1a4b6:	d857      	bhi.n	1a568 <hci_internal_cmd_put+0x3b0>
   1a4b8:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a4bc:	0061005d 	.word	0x0061005d
   1a4c0:	00560084 	.word	0x00560084
   1a4c4:	00a400a1 	.word	0x00a400a1
   1a4c8:	00b000a7 	.word	0x00b000a7
   1a4cc:	00b600b3 	.word	0x00b600b3
   1a4d0:	00560056 	.word	0x00560056
   1a4d4:	00560056 	.word	0x00560056
   1a4d8:	00c500bc 	.word	0x00c500bc
   1a4dc:	00cb00c8 	.word	0x00cb00c8
   1a4e0:	00560056 	.word	0x00560056
   1a4e4:	00d700ce 	.word	0x00d700ce
   1a4e8:	00e300da 	.word	0x00e300da
   1a4ec:	00ec0056 	.word	0x00ec0056
   1a4f0:	00fe00f5 	.word	0x00fe00f5
   1a4f4:	00560056 	.word	0x00560056
   1a4f8:	00560056 	.word	0x00560056
   1a4fc:	01080056 	.word	0x01080056
   1a500:	011a0111 	.word	0x011a0111
   1a504:	0120011d 	.word	0x0120011d
   1a508:	00560056 	.word	0x00560056
   1a50c:	00560056 	.word	0x00560056
   1a510:	00560056 	.word	0x00560056
   1a514:	00560056 	.word	0x00560056
   1a518:	012f0126 	.word	0x012f0126
   1a51c:	013b0138 	.word	0x013b0138
   1a520:	00560056 	.word	0x00560056
   1a524:	00560056 	.word	0x00560056
   1a528:	00560056 	.word	0x00560056
   1a52c:	00560056 	.word	0x00560056
   1a530:	00560056 	.word	0x00560056
   1a534:	00560056 	.word	0x00560056
   1a538:	00560056 	.word	0x00560056
   1a53c:	00560056 	.word	0x00560056
   1a540:	00560056 	.word	0x00560056
   1a544:	00560056 	.word	0x00560056
   1a548:	00560056 	.word	0x00560056
   1a54c:	00560056 	.word	0x00560056
   1a550:	013e      	.short	0x013e
   1a552:	f242 035e 	movw	r3, #8286	; 0x205e
   1a556:	429a      	cmp	r2, r3
   1a558:	f242 0626 	movw	r6, #8230	; 0x2026
   1a55c:	f000 80d1 	beq.w	1a702 <hci_internal_cmd_put+0x54a>
   1a560:	f242 037c 	movw	r3, #8316	; 0x207c
   1a564:	429a      	cmp	r2, r3
   1a566:	d062      	beq.n	1a62e <hci_internal_cmd_put+0x476>
	switch (hci_opcode) {
   1a568:	42b4      	cmp	r4, r6
   1a56a:	f200 81a8 	bhi.w	1a8be <hci_internal_cmd_put+0x706>
   1a56e:	f242 030c 	movw	r3, #8204	; 0x200c
   1a572:	2001      	movs	r0, #1
   1a574:	e197      	b.n	1a8a6 <hci_internal_cmd_put+0x6ee>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1a576:	f7f2 fce0 	bl	cf3a <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1a57a:	42b4      	cmp	r4, r6
   1a57c:	e00a      	b.n	1a594 <hci_internal_cmd_put+0x3dc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1a57e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1a582:	48c6      	ldr	r0, [pc, #792]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1a584:	3303      	adds	r3, #3
   1a586:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1a58a:	f7f2 fcb8 	bl	cefe <sdc_hci_cmd_le_read_buffer_size>
	switch (hci_opcode) {
   1a58e:	f242 0326 	movw	r3, #8230	; 0x2026
   1a592:	429c      	cmp	r4, r3
   1a594:	f240 8190 	bls.w	1a8b8 <hci_internal_cmd_put+0x700>
   1a598:	f242 0377 	movw	r3, #8311	; 0x2077
   1a59c:	429c      	cmp	r4, r3
   1a59e:	f43f ae5a 	beq.w	1a256 <hci_internal_cmd_put+0x9e>
   1a5a2:	f242 0377 	movw	r3, #8311	; 0x2077
   1a5a6:	429c      	cmp	r4, r3
   1a5a8:	f200 8115 	bhi.w	1a7d6 <hci_internal_cmd_put+0x61e>
   1a5ac:	f242 0332 	movw	r3, #8242	; 0x2032
   1a5b0:	429c      	cmp	r4, r3
   1a5b2:	f43f ae50 	beq.w	1a256 <hci_internal_cmd_put+0x9e>
   1a5b6:	f5a4 5301 	sub.w	r3, r4, #8256	; 0x2040
   1a5ba:	3b03      	subs	r3, #3
   1a5bc:	2b01      	cmp	r3, #1
   1a5be:	f63f ae7e 	bhi.w	1a2be <hci_internal_cmd_put+0x106>
   1a5c2:	e648      	b.n	1a256 <hci_internal_cmd_put+0x9e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1a5c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1a5c8:	48b4      	ldr	r0, [pc, #720]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1a5ca:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1a5cc:	2205      	movs	r2, #5
   1a5ce:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1a5d0:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1a5d4:	f008 ffd3 	bl	2357e <memset>
	features->le_encryption = 1;
   1a5d8:	79eb      	ldrb	r3, [r5, #7]
   1a5da:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1a5de:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1a5e2:	71eb      	strb	r3, [r5, #7]
	features->le_2m_phy = 1;
   1a5e4:	7a2b      	ldrb	r3, [r5, #8]
   1a5e6:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1a5ea:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1a5ee:	722b      	strb	r3, [r5, #8]
	switch (hci_opcode) {
   1a5f0:	f242 0326 	movw	r3, #8230	; 0x2026
   1a5f4:	429c      	cmp	r4, r3
   1a5f6:	f240 8153 	bls.w	1a8a0 <hci_internal_cmd_put+0x6e8>
		return 0;
   1a5fa:	2000      	movs	r0, #0
   1a5fc:	e7cc      	b.n	1a598 <hci_internal_cmd_put+0x3e0>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1a5fe:	f7f2 fca3 	bl	cf48 <sdc_hci_cmd_le_set_random_address>
	switch (hci_opcode) {
   1a602:	e7ba      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1a604:	f7f2 fc91 	bl	cf2a <sdc_hci_cmd_le_set_adv_params>
	switch (hci_opcode) {
   1a608:	e7b7      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		*param_length_out +=
   1a60a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1a60e:	48a3      	ldr	r0, [pc, #652]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1a610:	3301      	adds	r3, #1
   1a612:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1a616:	f7f2 fc70 	bl	cefa <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
	switch (hci_opcode) {
   1a61a:	e7b8      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1a61c:	f7f2 fc81 	bl	cf22 <sdc_hci_cmd_le_set_adv_data>
	switch (hci_opcode) {
   1a620:	e7ab      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1a622:	f7f2 fc93 	bl	cf4c <sdc_hci_cmd_le_set_scan_response_data>
	switch (hci_opcode) {
   1a626:	e7a8      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1a628:	f7f2 fc7d 	bl	cf26 <sdc_hci_cmd_le_set_adv_enable>
	switch (hci_opcode) {
   1a62c:	e7a5      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1a62e:	f7f2 fc80 	bl	cf32 <sdc_hci_cmd_le_set_data_related_address_changes>
	switch (hci_opcode) {
   1a632:	e7a2      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1a634:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1a638:	4898      	ldr	r0, [pc, #608]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1a63a:	3301      	adds	r3, #1
   1a63c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1a640:	f7f2 fc61 	bl	cf06 <sdc_hci_cmd_le_read_filter_accept_list_size>
	switch (hci_opcode) {
   1a644:	e7a3      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1a646:	f7f2 fc4a 	bl	cede <sdc_hci_cmd_le_clear_filter_accept_list>
	switch (hci_opcode) {
   1a64a:	e796      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1a64c:	f7f2 fc45 	bl	ceda <sdc_hci_cmd_le_add_device_to_filter_accept_list>
	switch (hci_opcode) {
   1a650:	e793      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1a652:	f7f2 fc64 	bl	cf1e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1a656:	e790      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1a658:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1a65c:	498f      	ldr	r1, [pc, #572]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1a65e:	3307      	adds	r3, #7
   1a660:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1a664:	f7f2 fc4d 	bl	cf02 <sdc_hci_cmd_le_read_channel_map>
	switch (hci_opcode) {
   1a668:	e791      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1a66a:	f7f2 fc52 	bl	cf12 <sdc_hci_cmd_le_read_remote_features>
	switch (hci_opcode) {
   1a66e:	e784      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1a670:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1a674:	4989      	ldr	r1, [pc, #548]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1a676:	3310      	adds	r3, #16
   1a678:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1a67c:	f7f2 fc31 	bl	cee2 <sdc_hci_cmd_le_encrypt>
	switch (hci_opcode) {
   1a680:	e785      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1a682:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1a686:	4885      	ldr	r0, [pc, #532]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1a688:	3308      	adds	r3, #8
   1a68a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1a68e:	f7f2 fc32 	bl	cef6 <sdc_hci_cmd_le_rand>
	switch (hci_opcode) {
   1a692:	e77c      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1a694:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1a698:	4980      	ldr	r1, [pc, #512]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1a69a:	3302      	adds	r3, #2
   1a69c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1a6a0:	f7f2 fc25 	bl	ceee <sdc_hci_cmd_le_long_term_key_request_reply>
	switch (hci_opcode) {
   1a6a4:	e773      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
		*param_length_out +=
   1a6a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1a6aa:	497c      	ldr	r1, [pc, #496]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1a6ac:	3302      	adds	r3, #2
   1a6ae:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1a6b2:	f7f2 fc18 	bl	cee6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
	switch (hci_opcode) {
   1a6b6:	e76a      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1a6b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a6bc:	3308      	adds	r3, #8
   1a6be:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1a6c2:	238f      	movs	r3, #143	; 0x8f
   1a6c4:	71eb      	strb	r3, [r5, #7]
	*(buf + 4) = states2;
   1a6c6:	23c0      	movs	r3, #192	; 0xc0
   1a6c8:	72eb      	strb	r3, [r5, #11]
   1a6ca:	e791      	b.n	1a5f0 <hci_internal_cmd_put+0x438>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1a6cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1a6d0:	4972      	ldr	r1, [pc, #456]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1a6d2:	3302      	adds	r3, #2
   1a6d4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1a6d8:	f7f2 fc29 	bl	cf2e <sdc_hci_cmd_le_set_data_length>
	switch (hci_opcode) {
   1a6dc:	e757      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
		*param_length_out +=
   1a6de:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1a6e2:	486e      	ldr	r0, [pc, #440]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1a6e4:	3304      	adds	r3, #4
   1a6e6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1a6ea:	f7f2 fc14 	bl	cf16 <sdc_hci_cmd_le_read_suggested_default_data_length>
	switch (hci_opcode) {
   1a6ee:	e74e      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1a6f0:	f7f2 fc2e 	bl	cf50 <sdc_hci_cmd_le_write_suggested_default_data_length>
	switch (hci_opcode) {
   1a6f4:	e741      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		return hci_cmd_le_read_local_p256_public_key();
   1a6f6:	f000 fa65 	bl	1abc4 <hci_cmd_le_read_local_p256_public_key>
	switch (hci_opcode) {
   1a6fa:	e73e      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1a6fc:	f00a fb95 	bl	24e2a <hci_cmd_le_generate_dhkey>
	switch (hci_opcode) {
   1a700:	e73b      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1a702:	f00a fb95 	bl	24e30 <hci_cmd_le_generate_dhkey_v2>
	switch (hci_opcode) {
   1a706:	e738      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1a708:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1a70c:	4863      	ldr	r0, [pc, #396]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1a70e:	3308      	adds	r3, #8
   1a710:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1a714:	f7f2 fbf9 	bl	cf0a <sdc_hci_cmd_le_read_max_data_length>
	switch (hci_opcode) {
   1a718:	e739      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1a71a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1a71e:	495f      	ldr	r1, [pc, #380]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1a720:	3304      	adds	r3, #4
   1a722:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1a726:	f7f2 fbf2 	bl	cf0e <sdc_hci_cmd_le_read_phy>
	switch (hci_opcode) {
   1a72a:	e730      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1a72c:	f7f2 fc03 	bl	cf36 <sdc_hci_cmd_le_set_default_phy>
	switch (hci_opcode) {
   1a730:	e723      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1a732:	f7f2 fc07 	bl	cf44 <sdc_hci_cmd_le_set_phy>
	switch (hci_opcode) {
   1a736:	e720      	b.n	1a57a <hci_internal_cmd_put+0x3c2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1a738:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1a73c:	4857      	ldr	r0, [pc, #348]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1a73e:	3302      	adds	r3, #2
   1a740:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1a744:	f7f2 fbe9 	bl	cf1a <sdc_hci_cmd_le_read_transmit_power>
	switch (hci_opcode) {
   1a748:	e721      	b.n	1a58e <hci_internal_cmd_put+0x3d6>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a74a:	4630      	mov	r0, r6
	switch (opcode)	{
   1a74c:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1a750:	f830 3b03 	ldrh.w	r3, [r0], #3
   1a754:	4293      	cmp	r3, r2
   1a756:	d823      	bhi.n	1a7a0 <hci_internal_cmd_put+0x5e8>
   1a758:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1a75c:	d801      	bhi.n	1a762 <hci_internal_cmd_put+0x5aa>
   1a75e:	2001      	movs	r0, #1
   1a760:	e039      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
   1a762:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1a766:	3b01      	subs	r3, #1
   1a768:	2b0a      	cmp	r3, #10
   1a76a:	d8f8      	bhi.n	1a75e <hci_internal_cmd_put+0x5a6>
   1a76c:	a201      	add	r2, pc, #4	; (adr r2, 1a774 <hci_internal_cmd_put+0x5bc>)
   1a76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a772:	bf00      	nop
   1a774:	0001a7c7 	.word	0x0001a7c7
   1a778:	0001a7e3 	.word	0x0001a7e3
   1a77c:	0001a75f 	.word	0x0001a75f
   1a780:	0001a75f 	.word	0x0001a75f
   1a784:	0001a75f 	.word	0x0001a75f
   1a788:	0001a837 	.word	0x0001a837
   1a78c:	0001a75f 	.word	0x0001a75f
   1a790:	0001a75f 	.word	0x0001a75f
   1a794:	0001a813 	.word	0x0001a813
   1a798:	0001a825 	.word	0x0001a825
   1a79c:	0001a83d 	.word	0x0001a83d
   1a7a0:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1a7a4:	b292      	uxth	r2, r2
   1a7a6:	2a0c      	cmp	r2, #12
   1a7a8:	d8d9      	bhi.n	1a75e <hci_internal_cmd_put+0x5a6>
   1a7aa:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1a7ae:	2b0c      	cmp	r3, #12
   1a7b0:	f200 8087 	bhi.w	1a8c2 <hci_internal_cmd_put+0x70a>
   1a7b4:	e8df f003 	tbb	[pc, r3]
   1a7b8:	625f5c4b 	.word	0x625f5c4b
   1a7bc:	85856865 	.word	0x85856865
   1a7c0:	85856b85 	.word	0x85856b85
   1a7c4:	6e          	.byte	0x6e
   1a7c5:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1a7c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1a7ca:	4834      	ldr	r0, [pc, #208]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1a7cc:	330c      	adds	r3, #12
   1a7ce:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1a7d2:	f7ea fb4b 	bl	4e6c <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1a7d6:	f024 0308 	bic.w	r3, r4, #8
   1a7da:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1a7de:	4293      	cmp	r3, r2
   1a7e0:	e067      	b.n	1a8b2 <hci_internal_cmd_put+0x6fa>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1a7e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a7e6:	482d      	ldr	r0, [pc, #180]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1a7e8:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1a7ea:	2202      	movs	r2, #2
   1a7ec:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1a7ee:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a7f2:	f008 fec4 	bl	2357e <memset>
	cmds->read_version_info = 1;
   1a7f6:	79eb      	ldrb	r3, [r5, #7]
   1a7f8:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1a7fc:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1a800:	71eb      	strb	r3, [r5, #7]
	cmds->read_static_addresses = 1;
   1a802:	7a2b      	ldrb	r3, [r5, #8]
   1a804:	f023 0307 	bic.w	r3, r3, #7
   1a808:	f043 0307 	orr.w	r3, r3, #7
   1a80c:	722b      	strb	r3, [r5, #8]
		return 0;
   1a80e:	2000      	movs	r0, #0
   1a810:	e7e1      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1a812:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1a816:	4821      	ldr	r0, [pc, #132]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1a818:	3317      	adds	r3, #23
   1a81a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1a81e:	f7f2 fb07 	bl	ce30 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1a822:	e7d8      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
		*param_length_out +=
   1a824:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1a828:	481c      	ldr	r0, [pc, #112]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1a82a:	3320      	adds	r3, #32
   1a82c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1a830:	f7f2 fab1 	bl	cd96 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1a834:	e7cf      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1a836:	f7f2 fb4a 	bl	cece <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1a83a:	e7cc      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1a83c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1a840:	4816      	ldr	r0, [pc, #88]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1a842:	3301      	adds	r3, #1
   1a844:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1a848:	f7f2 fa91 	bl	cd6e <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1a84c:	e7c3      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1a84e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a852:	4812      	ldr	r0, [pc, #72]	; (1a89c <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1a854:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1a856:	2202      	movs	r2, #2
   1a858:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1a85a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a85e:	f008 fe8e 	bl	2357e <memset>
	cmds->read_supported_vs_commands = 1;
   1a862:	79eb      	ldrb	r3, [r5, #7]
   1a864:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1a868:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1a86c:	71eb      	strb	r3, [r5, #7]
}
   1a86e:	e7ce      	b.n	1a80e <hci_internal_cmd_put+0x656>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1a870:	f7f2 fa70 	bl	cd54 <sdc_hci_cmd_vs_llpm_mode_set>
   1a874:	e7af      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1a876:	f7f2 fa69 	bl	cd4c <sdc_hci_cmd_vs_conn_update>
   1a87a:	e7ac      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1a87c:	f7f2 fa5e 	bl	cd3c <sdc_hci_cmd_vs_conn_event_extend>
   1a880:	e7a9      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1a882:	f7f2 fa6d 	bl	cd60 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1a886:	e7a6      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1a888:	f7f2 fa62 	bl	cd50 <sdc_hci_cmd_vs_event_length_set>
   1a88c:	e7a3      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1a88e:	f7f2 fa63 	bl	cd58 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1a892:	e7a0      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1a894:	f7f2 fa69 	bl	cd6a <sdc_hci_cmd_vs_set_adv_randomness>
   1a898:	e79d      	b.n	1a7d6 <hci_internal_cmd_put+0x61e>
   1a89a:	bf00      	nop
   1a89c:	20005406 	.word	0x20005406
	switch (hci_opcode) {
   1a8a0:	f242 030c 	movw	r3, #8204	; 0x200c
		return 0;
   1a8a4:	2000      	movs	r0, #0
	switch (hci_opcode) {
   1a8a6:	429c      	cmp	r4, r3
   1a8a8:	f63f ace9 	bhi.w	1a27e <hci_internal_cmd_put+0xc6>
   1a8ac:	f240 431d 	movw	r3, #1053	; 0x41d
   1a8b0:	429c      	cmp	r4, r3
   1a8b2:	f47f ad04 	bne.w	1a2be <hci_internal_cmd_put+0x106>
   1a8b6:	e4ce      	b.n	1a256 <hci_internal_cmd_put+0x9e>
   1a8b8:	f242 030c 	movw	r3, #8204	; 0x200c
   1a8bc:	e7f3      	b.n	1a8a6 <hci_internal_cmd_put+0x6ee>
   1a8be:	2001      	movs	r0, #1
   1a8c0:	e66a      	b.n	1a598 <hci_internal_cmd_put+0x3e0>
	switch (opcode)	{
   1a8c2:	2001      	movs	r0, #1
   1a8c4:	e66d      	b.n	1a5a2 <hci_internal_cmd_put+0x3ea>
		return -NRF_EPERM;
   1a8c6:	f04f 30ff 	mov.w	r0, #4294967295
   1a8ca:	e4d0      	b.n	1a26e <hci_internal_cmd_put+0xb6>

0001a8cc <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1a8cc:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1a8ce:	4c09      	ldr	r4, [pc, #36]	; (1a8f4 <hci_internal_msg_get+0x28>)
   1a8d0:	7823      	ldrb	r3, [r4, #0]
{
   1a8d2:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1a8d4:	b91b      	cbnz	r3, 1a8de <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1a8d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1a8da:	f7f2 ba0f 	b.w	ccfc <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1a8de:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1a8e0:	1c61      	adds	r1, r4, #1
   1a8e2:	3202      	adds	r2, #2
   1a8e4:	f008 fe40 	bl	23568 <memcpy>
		cmd_complete_or_status.occurred = false;
   1a8e8:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1a8ea:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1a8ec:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1a8ee:	702b      	strb	r3, [r5, #0]
}
   1a8f0:	bd38      	pop	{r3, r4, r5, pc}
   1a8f2:	bf00      	nop
   1a8f4:	200053ff 	.word	0x200053ff

0001a8f8 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1a8f8:	b570      	push	{r4, r5, r6, lr}
   1a8fa:	4606      	mov	r6, r0
   1a8fc:	460c      	mov	r4, r1
   1a8fe:	4d0d      	ldr	r5, [pc, #52]	; (1a934 <bt_rand+0x3c>)
   1a900:	4628      	mov	r0, r5
   1a902:	f00a fc72 	bl	251ea <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1a906:	b188      	cbz	r0, 1a92c <bt_rand+0x34>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1a908:	b2a2      	uxth	r2, r4
	__ASSERT(api->get_entropy != NULL,
   1a90a:	68ab      	ldr	r3, [r5, #8]
   1a90c:	681b      	ldr	r3, [r3, #0]
   1a90e:	b943      	cbnz	r3, 1a922 <bt_rand+0x2a>
   1a910:	4909      	ldr	r1, [pc, #36]	; (1a938 <bt_rand+0x40>)
   1a912:	480a      	ldr	r0, [pc, #40]	; (1a93c <bt_rand+0x44>)
   1a914:	224d      	movs	r2, #77	; 0x4d
   1a916:	f008 fb82 	bl	2301e <assert_print>
   1a91a:	4807      	ldr	r0, [pc, #28]	; (1a938 <bt_rand+0x40>)
   1a91c:	214d      	movs	r1, #77	; 0x4d
   1a91e:	f008 fb77 	bl	23010 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1a922:	4631      	mov	r1, r6
   1a924:	4628      	mov	r0, r5
}
   1a926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a92a:	4718      	bx	r3
   1a92c:	f06f 0012 	mvn.w	r0, #18
   1a930:	bd70      	pop	{r4, r5, r6, pc}
   1a932:	bf00      	nop
   1a934:	00025700 	.word	0x00025700
   1a938:	0002829f 	.word	0x0002829f
   1a93c:	00026718 	.word	0x00026718

0001a940 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a940:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1a942:	b508      	push	{r3, lr}
   1a944:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a948:	d90c      	bls.n	1a964 <sys_memcpy_swap.constprop.0+0x24>
   1a94a:	4298      	cmp	r0, r3
   1a94c:	d20f      	bcs.n	1a96e <sys_memcpy_swap.constprop.0+0x2e>
   1a94e:	490c      	ldr	r1, [pc, #48]	; (1a980 <sys_memcpy_swap.constprop.0+0x40>)
   1a950:	480c      	ldr	r0, [pc, #48]	; (1a984 <sys_memcpy_swap.constprop.0+0x44>)
   1a952:	f240 2215 	movw	r2, #533	; 0x215
   1a956:	f008 fb62 	bl	2301e <assert_print>
   1a95a:	4809      	ldr	r0, [pc, #36]	; (1a980 <sys_memcpy_swap.constprop.0+0x40>)
   1a95c:	f240 2115 	movw	r1, #533	; 0x215
   1a960:	f008 fb56 	bl	23010 <assert_post_action>
   1a964:	d0f3      	beq.n	1a94e <sys_memcpy_swap.constprop.0+0xe>
   1a966:	f100 0220 	add.w	r2, r0, #32
   1a96a:	4291      	cmp	r1, r2
   1a96c:	e7ee      	b.n	1a94c <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   1a96e:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1a970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1a974:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1a978:	428b      	cmp	r3, r1
   1a97a:	d1f9      	bne.n	1a970 <sys_memcpy_swap.constprop.0+0x30>
}
   1a97c:	bd08      	pop	{r3, pc}
   1a97e:	bf00      	nop
   1a980:	0002837f 	.word	0x0002837f
   1a984:	00026718 	.word	0x00026718

0001a988 <ecdh_p256_common_secret>:

static uint8_t common_secret(bool use_debug)
{
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1a988:	4b1e      	ldr	r3, [pc, #120]	; (1aa04 <ecdh_p256_common_secret+0x7c>)
   1a98a:	491f      	ldr	r1, [pc, #124]	; (1aa08 <ecdh_p256_common_secret+0x80>)
   1a98c:	f103 0220 	add.w	r2, r3, #32
   1a990:	2800      	cmp	r0, #0
   1a992:	bf08      	it	eq
   1a994:	4619      	moveq	r1, r3

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1a996:	b570      	push	{r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1a998:	4610      	mov	r0, r2
   1a99a:	f004 fd19 	bl	1f3d0 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1a99e:	4602      	mov	r2, r0
   1a9a0:	b348      	cbz	r0, 1a9f6 <ecdh_p256_common_secret+0x6e>
		BT_ERR("public key is not valid (err %d)", err);
   1a9a2:	481a      	ldr	r0, [pc, #104]	; (1aa0c <ecdh_p256_common_secret+0x84>)
   1a9a4:	2145      	movs	r1, #69	; 0x45
   1a9a6:	f008 fb48 	bl	2303a <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   1a9aa:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1a9ac:	f04f 32ff 	mov.w	r2, #4294967295
   1a9b0:	f04f 33ff 	mov.w	r3, #4294967295
   1a9b4:	2001      	movs	r0, #1
   1a9b6:	f7f8 fca9 	bl	1330c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1a9ba:	f100 0608 	add.w	r6, r0, #8
   1a9be:	2102      	movs	r1, #2
   1a9c0:	4605      	mov	r5, r0
   1a9c2:	4630      	mov	r0, r6
   1a9c4:	f7fd ff98 	bl	188f8 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1a9c8:	233e      	movs	r3, #62	; 0x3e
   1a9ca:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1a9cc:	2322      	movs	r3, #34	; 0x22
   1a9ce:	7043      	strb	r3, [r0, #1]
   1a9d0:	2101      	movs	r1, #1
   1a9d2:	4630      	mov	r0, r6
   1a9d4:	f7fd ff90 	bl	188f8 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1a9d8:	2309      	movs	r3, #9
   1a9da:	7003      	strb	r3, [r0, #0]
   1a9dc:	2121      	movs	r1, #33	; 0x21
   1a9de:	4630      	mov	r0, r6
   1a9e0:	f7fd ff8a 	bl	188f8 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1a9e4:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1a9e8:	b13c      	cbz	r4, 1a9fa <ecdh_p256_common_secret+0x72>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1a9ea:	2220      	movs	r2, #32
   1a9ec:	21ff      	movs	r1, #255	; 0xff
   1a9ee:	f008 fdc6 	bl	2357e <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1a9f2:	4628      	mov	r0, r5
   1a9f4:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1a9f6:	4604      	mov	r4, r0
   1a9f8:	e7d8      	b.n	1a9ac <ecdh_p256_common_secret+0x24>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1a9fa:	4905      	ldr	r1, [pc, #20]	; (1aa10 <ecdh_p256_common_secret+0x88>)
   1a9fc:	f7ff ffa0 	bl	1a940 <sys_memcpy_swap.constprop.0>
   1aa00:	e7f7      	b.n	1a9f2 <ecdh_p256_common_secret+0x6a>
   1aa02:	bf00      	nop
   1aa04:	20005446 	.word	0x20005446
   1aa08:	00028404 	.word	0x00028404
   1aa0c:	000283bc 	.word	0x000283bc
   1aa10:	20005466 	.word	0x20005466

0001aa14 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1aa16:	4c3d      	ldr	r4, [pc, #244]	; (1ab0c <ecdh_cmd_process+0xf8>)
   1aa18:	f3bf 8f5b 	dmb	ish
   1aa1c:	6823      	ldr	r3, [r4, #0]
   1aa1e:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1aa22:	2b02      	cmp	r3, #2
   1aa24:	4627      	mov	r7, r4
   1aa26:	d059      	beq.n	1aadc <ecdh_cmd_process+0xc8>
   1aa28:	2b04      	cmp	r3, #4
   1aa2a:	d05c      	beq.n	1aae6 <ecdh_cmd_process+0xd2>
   1aa2c:	2b01      	cmp	r3, #1
   1aa2e:	d15c      	bne.n	1aaea <ecdh_cmd_process+0xd6>
		err = bt_rand(ecdh.private_key_be, 32);
   1aa30:	4c37      	ldr	r4, [pc, #220]	; (1ab10 <ecdh_cmd_process+0xfc>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1aa32:	4e38      	ldr	r6, [pc, #224]	; (1ab14 <ecdh_cmd_process+0x100>)
		err = bt_rand(ecdh.private_key_be, 32);
   1aa34:	2120      	movs	r1, #32
   1aa36:	4620      	mov	r0, r4
   1aa38:	f7ff ff5e 	bl	1a8f8 <bt_rand>
		if (err) {
   1aa3c:	2800      	cmp	r0, #0
   1aa3e:	d142      	bne.n	1aac6 <ecdh_cmd_process+0xb2>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1aa40:	2220      	movs	r2, #32
   1aa42:	4631      	mov	r1, r6
   1aa44:	4620      	mov	r0, r4
   1aa46:	f008 fd68 	bl	2351a <memcmp>
   1aa4a:	2800      	cmp	r0, #0
   1aa4c:	d0f2      	beq.n	1aa34 <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1aa4e:	4832      	ldr	r0, [pc, #200]	; (1ab18 <ecdh_cmd_process+0x104>)
   1aa50:	4621      	mov	r1, r4
   1aa52:	f004 fca9 	bl	1f3a8 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1aa56:	4605      	mov	r5, r0
   1aa58:	2800      	cmp	r0, #0
   1aa5a:	d1eb      	bne.n	1aa34 <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1aa5c:	f04f 32ff 	mov.w	r2, #4294967295
   1aa60:	f04f 33ff 	mov.w	r3, #4294967295
   1aa64:	2001      	movs	r0, #1
   1aa66:	f7f8 fc51 	bl	1330c <bt_buf_get_rx>
   1aa6a:	f100 0608 	add.w	r6, r0, #8
   1aa6e:	2102      	movs	r1, #2
   1aa70:	4604      	mov	r4, r0
   1aa72:	4630      	mov	r0, r6
   1aa74:	f7fd ff40 	bl	188f8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1aa78:	233e      	movs	r3, #62	; 0x3e
   1aa7a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1aa7c:	2342      	movs	r3, #66	; 0x42
   1aa7e:	7043      	strb	r3, [r0, #1]
   1aa80:	2101      	movs	r1, #1
   1aa82:	4630      	mov	r0, r6
   1aa84:	f7fd ff38 	bl	188f8 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1aa88:	2308      	movs	r3, #8
   1aa8a:	7003      	strb	r3, [r0, #0]
   1aa8c:	2141      	movs	r1, #65	; 0x41
   1aa8e:	4630      	mov	r0, r6
   1aa90:	f7fd ff32 	bl	188f8 <net_buf_simple_add>
   1aa94:	4606      	mov	r6, r0
	evt->status = status;
   1aa96:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1aa9a:	b1b5      	cbz	r5, 1aaca <ecdh_cmd_process+0xb6>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1aa9c:	2240      	movs	r2, #64	; 0x40
   1aa9e:	2100      	movs	r1, #0
   1aaa0:	f008 fd6d 	bl	2357e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1aaa4:	f3bf 8f5b 	dmb	ish
   1aaa8:	2300      	movs	r3, #0
   1aaaa:	e857 2f00 	ldrex	r2, [r7]
   1aaae:	e847 3100 	strex	r1, r3, [r7]
   1aab2:	2900      	cmp	r1, #0
   1aab4:	d1f9      	bne.n	1aaaa <ecdh_cmd_process+0x96>
   1aab6:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1aaba:	b32c      	cbz	r4, 1ab08 <ecdh_cmd_process+0xf4>
		bt_recv(buf);
   1aabc:	4620      	mov	r0, r4
	}
}
   1aabe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   1aac2:	f7f9 bbc3 	b.w	1424c <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1aac6:	251f      	movs	r5, #31
   1aac8:	e7c8      	b.n	1aa5c <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1aaca:	4913      	ldr	r1, [pc, #76]	; (1ab18 <ecdh_cmd_process+0x104>)
   1aacc:	f7ff ff38 	bl	1a940 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1aad0:	4912      	ldr	r1, [pc, #72]	; (1ab1c <ecdh_cmd_process+0x108>)
   1aad2:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1aad6:	f7ff ff33 	bl	1a940 <sys_memcpy_swap.constprop.0>
		break;
   1aada:	e7e3      	b.n	1aaa4 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   1aadc:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1aade:	f7ff ff53 	bl	1a988 <ecdh_p256_common_secret>
   1aae2:	4604      	mov	r4, r0
		break;
   1aae4:	e7de      	b.n	1aaa4 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   1aae6:	2001      	movs	r0, #1
   1aae8:	e7f9      	b.n	1aade <ecdh_cmd_process+0xca>
		BT_WARN("Unknown command");
   1aaea:	480d      	ldr	r0, [pc, #52]	; (1ab20 <ecdh_cmd_process+0x10c>)
   1aaec:	2157      	movs	r1, #87	; 0x57
   1aaee:	f008 faa4 	bl	2303a <z_log_minimal_printk>
   1aaf2:	f3bf 8f5b 	dmb	ish
   1aaf6:	2300      	movs	r3, #0
   1aaf8:	e854 2f00 	ldrex	r2, [r4]
   1aafc:	e844 3100 	strex	r1, r3, [r4]
   1ab00:	2900      	cmp	r1, #0
   1ab02:	d1f9      	bne.n	1aaf8 <ecdh_cmd_process+0xe4>
   1ab04:	f3bf 8f5b 	dmb	ish
}
   1ab08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ab0a:	bf00      	nop
   1ab0c:	20002e70 	.word	0x20002e70
   1ab10:	20005446 	.word	0x20005446
   1ab14:	00028404 	.word	0x00028404
   1ab18:	20005466 	.word	0x20005466
   1ab1c:	20005486 	.word	0x20005486
   1ab20:	000283e2 	.word	0x000283e2

0001ab24 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1ab24:	b510      	push	{r4, lr}
   1ab26:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1ab28:	2210      	movs	r2, #16
   1ab2a:	2100      	movs	r1, #0
   1ab2c:	a801      	add	r0, sp, #4
   1ab2e:	f008 fd26 	bl	2357e <memset>
   1ab32:	4c0b      	ldr	r4, [pc, #44]	; (1ab60 <ecdh_thread+0x3c>)
   1ab34:	9405      	str	r4, [sp, #20]
   1ab36:	2301      	movs	r3, #1
   1ab38:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1ab3c:	f04f 32ff 	mov.w	r2, #4294967295
   1ab40:	f04f 33ff 	mov.w	r3, #4294967295
   1ab44:	2101      	movs	r1, #1
   1ab46:	a801      	add	r0, sp, #4
   1ab48:	f004 fafe 	bl	1f148 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1ab4c:	4620      	mov	r0, r4
   1ab4e:	f00a fd48 	bl	255e2 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1ab52:	9b04      	ldr	r3, [sp, #16]
   1ab54:	f36f 3394 	bfc	r3, #14, #7
   1ab58:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1ab5a:	f7ff ff5b 	bl	1aa14 <ecdh_cmd_process>
	while (true) {
   1ab5e:	e7ed      	b.n	1ab3c <ecdh_thread+0x18>
   1ab60:	20002e60 	.word	0x20002e60

0001ab64 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1ab64:	b510      	push	{r4, lr}
   1ab66:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1ab68:	480e      	ldr	r0, [pc, #56]	; (1aba4 <hci_ecdh_init+0x40>)
   1ab6a:	f00a fd35 	bl	255d8 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ab6e:	4c0e      	ldr	r4, [pc, #56]	; (1aba8 <hci_ecdh_init+0x44>)
   1ab70:	490e      	ldr	r1, [pc, #56]	; (1abac <hci_ecdh_init+0x48>)
   1ab72:	2200      	movs	r2, #0
   1ab74:	2300      	movs	r3, #0
   1ab76:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ab7a:	2300      	movs	r3, #0
   1ab7c:	220a      	movs	r2, #10
   1ab7e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1ab82:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1ab86:	9300      	str	r3, [sp, #0]
   1ab88:	f44f 7262 	mov.w	r2, #904	; 0x388
   1ab8c:	4b08      	ldr	r3, [pc, #32]	; (1abb0 <hci_ecdh_init+0x4c>)
   1ab8e:	4620      	mov	r0, r4
   1ab90:	f001 fea6 	bl	1c8e0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1ab94:	4907      	ldr	r1, [pc, #28]	; (1abb4 <hci_ecdh_init+0x50>)
   1ab96:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1ab98:	b008      	add	sp, #32
   1ab9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ab9e:	f00a bb66 	b.w	2526e <z_impl_k_thread_name_set>
   1aba2:	bf00      	nop
   1aba4:	20002e60 	.word	0x20002e60
   1aba8:	20001ec0 	.word	0x20001ec0
   1abac:	200068c0 	.word	0x200068c0
   1abb0:	0001ab25 	.word	0x0001ab25
   1abb4:	000283f7 	.word	0x000283f7

0001abb8 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1abb8:	4801      	ldr	r0, [pc, #4]	; (1abc0 <hci_ecdh_uninit+0x8>)
   1abba:	f7f8 b971 	b.w	12ea0 <z_impl_k_thread_abort>
   1abbe:	bf00      	nop
   1abc0:	20001ec0 	.word	0x20001ec0

0001abc4 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1abc4:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1abc6:	4b0b      	ldr	r3, [pc, #44]	; (1abf4 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1abc8:	f3bf 8f5b 	dmb	ish
   1abcc:	2201      	movs	r2, #1
   1abce:	e853 1f00 	ldrex	r1, [r3]
   1abd2:	2900      	cmp	r1, #0
   1abd4:	d103      	bne.n	1abde <hci_cmd_le_read_local_p256_public_key+0x1a>
   1abd6:	e843 2000 	strex	r0, r2, [r3]
   1abda:	2800      	cmp	r0, #0
   1abdc:	d1f7      	bne.n	1abce <hci_cmd_le_read_local_p256_public_key+0xa>
   1abde:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1abe2:	d105      	bne.n	1abf0 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1abe4:	4804      	ldr	r0, [pc, #16]	; (1abf8 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1abe6:	2100      	movs	r1, #0
   1abe8:	f004 fb60 	bl	1f2ac <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1abec:	2000      	movs	r0, #0
}
   1abee:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1abf0:	200c      	movs	r0, #12
   1abf2:	e7fc      	b.n	1abee <hci_cmd_le_read_local_p256_public_key+0x2a>
   1abf4:	20002e70 	.word	0x20002e70
   1abf8:	20002e60 	.word	0x20002e60

0001abfc <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1abfc:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1abfe:	2900      	cmp	r1, #0
   1ac00:	4b11      	ldr	r3, [pc, #68]	; (1ac48 <cmd_le_generate_dhkey+0x4c>)
   1ac02:	f3bf 8f5b 	dmb	ish
{
   1ac06:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1ac08:	bf0c      	ite	eq
   1ac0a:	2202      	moveq	r2, #2
   1ac0c:	2204      	movne	r2, #4
   1ac0e:	e853 1f00 	ldrex	r1, [r3]
   1ac12:	2900      	cmp	r1, #0
   1ac14:	d103      	bne.n	1ac1e <cmd_le_generate_dhkey+0x22>
   1ac16:	e843 2000 	strex	r0, r2, [r3]
   1ac1a:	2800      	cmp	r0, #0
   1ac1c:	d1f7      	bne.n	1ac0e <cmd_le_generate_dhkey+0x12>
   1ac1e:	f3bf 8f5b 	dmb	ish
   1ac22:	d10e      	bne.n	1ac42 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1ac24:	4621      	mov	r1, r4
   1ac26:	4809      	ldr	r0, [pc, #36]	; (1ac4c <cmd_le_generate_dhkey+0x50>)
   1ac28:	f7ff fe8a 	bl	1a940 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1ac2c:	4808      	ldr	r0, [pc, #32]	; (1ac50 <cmd_le_generate_dhkey+0x54>)
   1ac2e:	f104 0120 	add.w	r1, r4, #32
   1ac32:	f7ff fe85 	bl	1a940 <sys_memcpy_swap.constprop.0>
   1ac36:	4807      	ldr	r0, [pc, #28]	; (1ac54 <cmd_le_generate_dhkey+0x58>)
   1ac38:	2100      	movs	r1, #0
   1ac3a:	f004 fb37 	bl	1f2ac <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1ac3e:	2000      	movs	r0, #0
}
   1ac40:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ac42:	200c      	movs	r0, #12
   1ac44:	e7fc      	b.n	1ac40 <cmd_le_generate_dhkey+0x44>
   1ac46:	bf00      	nop
   1ac48:	20002e70 	.word	0x20002e70
   1ac4c:	20005466 	.word	0x20005466
   1ac50:	20005486 	.word	0x20005486
   1ac54:	20002e60 	.word	0x20002e60

0001ac58 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1ac58:	b508      	push	{r3, lr}
   1ac5a:	4602      	mov	r2, r0
   1ac5c:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1ac5e:	4805      	ldr	r0, [pc, #20]	; (1ac74 <m_assert_handler+0x1c>)
   1ac60:	2145      	movs	r1, #69	; 0x45
   1ac62:	f008 f9ea 	bl	2303a <z_log_minimal_printk>
	k_oops();
   1ac66:	4040      	eors	r0, r0
   1ac68:	f380 8811 	msr	BASEPRI, r0
   1ac6c:	f04f 0003 	mov.w	r0, #3
   1ac70:	df02      	svc	2
}
   1ac72:	bd08      	pop	{r3, pc}
   1ac74:	0002842c 	.word	0x0002842c

0001ac78 <mpsl_low_prio_irq_handler>:
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1ac78:	4901      	ldr	r1, [pc, #4]	; (1ac80 <mpsl_low_prio_irq_handler+0x8>)
   1ac7a:	4802      	ldr	r0, [pc, #8]	; (1ac84 <mpsl_low_prio_irq_handler+0xc>)
   1ac7c:	f00a bba5 	b.w	253ca <k_work_submit_to_queue>
   1ac80:	20002e74 	.word	0x20002e74
   1ac84:	20001f40 	.word	0x20001f40

0001ac88 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   1ac88:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1ac8a:	2332      	movs	r3, #50	; 0x32
   1ac8c:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ac90:	4a10      	ldr	r2, [pc, #64]	; (1acd4 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1ac92:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1ac94:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ac96:	2119      	movs	r1, #25
   1ac98:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1ac9a:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1ac9e:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1aca2:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1aca6:	f7e9 fc47 	bl	4538 <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1acaa:	4604      	mov	r4, r0
   1acac:	b970      	cbnz	r0, 1accc <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1acae:	4601      	mov	r1, r0
   1acb0:	462a      	mov	r2, r5
   1acb2:	2008      	movs	r0, #8
   1acb4:	f7f7 fd28 	bl	12708 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1acb8:	462a      	mov	r2, r5
   1acba:	4621      	mov	r1, r4
   1acbc:	200b      	movs	r0, #11
   1acbe:	f7f7 fd23 	bl	12708 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1acc2:	462a      	mov	r2, r5
   1acc4:	4621      	mov	r1, r4
   1acc6:	4628      	mov	r0, r5
   1acc8:	f7f7 fd1e 	bl	12708 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1accc:	4620      	mov	r0, r4
   1acce:	b003      	add	sp, #12
   1acd0:	bd30      	pop	{r4, r5, pc}
   1acd2:	bf00      	nop
   1acd4:	0001ac59 	.word	0x0001ac59

0001acd8 <mpsl_low_prio_work_handler>:
{
   1acd8:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1acda:	f04f 30ff 	mov.w	r0, #4294967295
   1acde:	f04f 31ff 	mov.w	r1, #4294967295
   1ace2:	f7ff f88f 	bl	19e04 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1ace6:	b140      	cbz	r0, 1acfa <mpsl_low_prio_work_handler+0x22>
   1ace8:	4907      	ldr	r1, [pc, #28]	; (1ad08 <mpsl_low_prio_work_handler+0x30>)
   1acea:	4808      	ldr	r0, [pc, #32]	; (1ad0c <mpsl_low_prio_work_handler+0x34>)
   1acec:	2247      	movs	r2, #71	; 0x47
   1acee:	f008 f996 	bl	2301e <assert_print>
   1acf2:	4805      	ldr	r0, [pc, #20]	; (1ad08 <mpsl_low_prio_work_handler+0x30>)
   1acf4:	2147      	movs	r1, #71	; 0x47
   1acf6:	f008 f98b 	bl	23010 <assert_post_action>
	mpsl_low_priority_process();
   1acfa:	f7f1 fbb5 	bl	c468 <mpsl_low_priority_process>
}
   1acfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1ad02:	f7ff b887 	b.w	19e14 <multithreading_lock_release>
   1ad06:	bf00      	nop
   1ad08:	00028445 	.word	0x00028445
   1ad0c:	00026718 	.word	0x00026718

0001ad10 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1ad10:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1ad12:	4d0d      	ldr	r5, [pc, #52]	; (1ad48 <mpsl_low_prio_init+0x38>)
   1ad14:	490d      	ldr	r1, [pc, #52]	; (1ad4c <mpsl_low_prio_init+0x3c>)
   1ad16:	2400      	movs	r4, #0
   1ad18:	9400      	str	r4, [sp, #0]
   1ad1a:	f06f 0309 	mvn.w	r3, #9
   1ad1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ad22:	4628      	mov	r0, r5
   1ad24:	f002 fc50 	bl	1d5c8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1ad28:	4909      	ldr	r1, [pc, #36]	; (1ad50 <mpsl_low_prio_init+0x40>)
   1ad2a:	4628      	mov	r0, r5
   1ad2c:	f00a fa9f 	bl	2526e <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1ad30:	4908      	ldr	r1, [pc, #32]	; (1ad54 <mpsl_low_prio_init+0x44>)
   1ad32:	4809      	ldr	r0, [pc, #36]	; (1ad58 <mpsl_low_prio_init+0x48>)
   1ad34:	f002 fb92 	bl	1d45c <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1ad38:	4622      	mov	r2, r4
   1ad3a:	2104      	movs	r1, #4
   1ad3c:	2019      	movs	r0, #25
   1ad3e:	f7f7 fce3 	bl	12708 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1ad42:	4620      	mov	r0, r4
   1ad44:	b003      	add	sp, #12
   1ad46:	bd30      	pop	{r4, r5, pc}
   1ad48:	20001f40 	.word	0x20001f40
   1ad4c:	20006cc0 	.word	0x20006cc0
   1ad50:	00028472 	.word	0x00028472
   1ad54:	0001acd9 	.word	0x0001acd9
   1ad58:	20002e74 	.word	0x20002e74

0001ad5c <nfc_platform_setup>:
	/* Activate NFCT only when HFXO is running */
	nrfx_nfct_state_force(NRFX_NFCT_STATE_ACTIVATED);
}

nrfx_err_t nfc_platform_setup(void)
{
   1ad5c:	b508      	push	{r3, lr}
	hf_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   1ad5e:	2000      	movs	r0, #0
   1ad60:	f7fd ff50 	bl	18c04 <z_nrf_clock_control_get_onoff>
   1ad64:	4b0b      	ldr	r3, [pc, #44]	; (1ad94 <nfc_platform_setup+0x38>)
   1ad66:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG(hf_mgr);
   1ad68:	b940      	cbnz	r0, 1ad7c <nfc_platform_setup+0x20>
   1ad6a:	490b      	ldr	r1, [pc, #44]	; (1ad98 <nfc_platform_setup+0x3c>)
   1ad6c:	480b      	ldr	r0, [pc, #44]	; (1ad9c <nfc_platform_setup+0x40>)
   1ad6e:	2238      	movs	r2, #56	; 0x38
   1ad70:	f008 f955 	bl	2301e <assert_print>
   1ad74:	4808      	ldr	r0, [pc, #32]	; (1ad98 <nfc_platform_setup+0x3c>)
   1ad76:	2138      	movs	r1, #56	; 0x38
   1ad78:	f008 f94a 	bl	23010 <assert_post_action>

	IRQ_DIRECT_CONNECT(NFCT_IRQn, CONFIG_NFCT_IRQ_PRIORITY,
   1ad7c:	2200      	movs	r2, #0
   1ad7e:	2101      	movs	r1, #1
   1ad80:	2005      	movs	r0, #5
   1ad82:	f7f7 fcc1 	bl	12708 <z_arm_irq_priority_set>
			   nfc_isr_wrapper, 0);
	IRQ_CONNECT(NFC_TIMER_IRQn, CONFIG_NFCT_IRQ_PRIORITY,
   1ad86:	2200      	movs	r2, #0
   1ad88:	2101      	movs	r1, #1
   1ad8a:	201b      	movs	r0, #27
   1ad8c:	f7f7 fcbc 	bl	12708 <z_arm_irq_priority_set>
			   nfc_timer_irq_handler, NULL,  0);

	LOG_DBG("NFC platform initialized");
	return NRFX_SUCCESS;
}
   1ad90:	4803      	ldr	r0, [pc, #12]	; (1ada0 <nfc_platform_setup+0x44>)
   1ad92:	bd08      	pop	{r3, pc}
   1ad94:	20002e94 	.word	0x20002e94
   1ad98:	00028487 	.word	0x00028487
   1ad9c:	00026718 	.word	0x00026718
   1ada0:	0bad0000 	.word	0x0bad0000

0001ada4 <nfc_platform_nfcid1_default_bytes_get>:
	return NRFX_SUCCESS;
}

nrfx_err_t nfc_platform_nfcid1_default_bytes_get(uint8_t * const buf,
						 uint32_t        buf_len)
{
   1ada4:	b530      	push	{r4, r5, lr}
	if (!buf) {
   1ada6:	b350      	cbz	r0, 1adfe <nfc_platform_nfcid1_default_bytes_get+0x5a>
		return NRFX_ERROR_INVALID_PARAM;
	}

	if ((buf_len != NRFX_NFCT_NFCID1_SINGLE_SIZE) &&
   1ada8:	290a      	cmp	r1, #10
   1adaa:	d82a      	bhi.n	1ae02 <nfc_platform_nfcid1_default_bytes_get+0x5e>
   1adac:	f44f 6392 	mov.w	r3, #1168	; 0x490
   1adb0:	40cb      	lsrs	r3, r1
   1adb2:	07db      	lsls	r3, r3, #31
   1adb4:	d525      	bpl.n	1ae02 <nfc_platform_nfcid1_default_bytes_get+0x5e>
	tag_header[0] = ficr_nfc->TAGHEADER0;
   1adb6:	4a14      	ldr	r2, [pc, #80]	; (1ae08 <nfc_platform_nfcid1_default_bytes_get+0x64>)
   1adb8:	6d14      	ldr	r4, [r2, #80]	; 0x50
	tag_header[1] = ficr_nfc->TAGHEADER1;
   1adba:	6d53      	ldr	r3, [r2, #84]	; 0x54
	tag_header[2] = ficr_nfc->TAGHEADER2;
   1adbc:	6d92      	ldr	r2, [r2, #88]	; 0x58
	err = nfc_platform_tagheaders_get(nfc_tag_header);
	if (err != NRFX_SUCCESS) {
		return err;
	}

	buf[0] = (uint8_t) (nfc_tag_header[0] >> 0);
   1adbe:	7004      	strb	r4, [r0, #0]
	buf[1] = (uint8_t) (nfc_tag_header[0] >> 8);
   1adc0:	0a25      	lsrs	r5, r4, #8
	buf[2] = (uint8_t) (nfc_tag_header[0] >> 16);
   1adc2:	0c24      	lsrs	r4, r4, #16
   1adc4:	7084      	strb	r4, [r0, #2]
	buf[3] = (uint8_t) (nfc_tag_header[1] >> 0);

	if (buf_len != NRFX_NFCT_NFCID1_SINGLE_SIZE) {
   1adc6:	2904      	cmp	r1, #4
	buf[3] = (uint8_t) (nfc_tag_header[1] >> 0);
   1adc8:	b2dc      	uxtb	r4, r3
	buf[1] = (uint8_t) (nfc_tag_header[0] >> 8);
   1adca:	7045      	strb	r5, [r0, #1]
	buf[3] = (uint8_t) (nfc_tag_header[1] >> 0);
   1adcc:	70c4      	strb	r4, [r0, #3]
	if (buf_len != NRFX_NFCT_NFCID1_SINGLE_SIZE) {
   1adce:	d101      	bne.n	1add4 <nfc_platform_nfcid1_default_bytes_get+0x30>
		else if (buf[3] == 0x88) {
			buf[3] |= 0x11;
		}
	}

	return NRFX_SUCCESS;
   1add0:	480e      	ldr	r0, [pc, #56]	; (1ae0c <nfc_platform_nfcid1_default_bytes_get+0x68>)
}
   1add2:	bd30      	pop	{r4, r5, pc}
		buf[4] = (uint8_t) (nfc_tag_header[1] >> 8);
   1add4:	0a1d      	lsrs	r5, r3, #8
   1add6:	7105      	strb	r5, [r0, #4]
		if (buf_len == NRFX_NFCT_NFCID1_TRIPLE_SIZE) {
   1add8:	290a      	cmp	r1, #10
		buf[5] = (uint8_t) (nfc_tag_header[1] >> 16);
   1adda:	ea4f 4513 	mov.w	r5, r3, lsr #16
		buf[6] = (uint8_t) (nfc_tag_header[1] >> 24);
   1adde:	ea4f 6313 	mov.w	r3, r3, lsr #24
		buf[5] = (uint8_t) (nfc_tag_header[1] >> 16);
   1ade2:	7145      	strb	r5, [r0, #5]
		buf[6] = (uint8_t) (nfc_tag_header[1] >> 24);
   1ade4:	7183      	strb	r3, [r0, #6]
		if (buf_len == NRFX_NFCT_NFCID1_TRIPLE_SIZE) {
   1ade6:	d105      	bne.n	1adf4 <nfc_platform_nfcid1_default_bytes_get+0x50>
			buf[8] = (uint8_t) (nfc_tag_header[2] >> 8);
   1ade8:	0a13      	lsrs	r3, r2, #8
			buf[7] = (uint8_t) (nfc_tag_header[2] >> 0);
   1adea:	71c2      	strb	r2, [r0, #7]
			buf[9] = (uint8_t) (nfc_tag_header[2] >> 16);
   1adec:	0c12      	lsrs	r2, r2, #16
			buf[8] = (uint8_t) (nfc_tag_header[2] >> 8);
   1adee:	7203      	strb	r3, [r0, #8]
			buf[9] = (uint8_t) (nfc_tag_header[2] >> 16);
   1adf0:	7242      	strb	r2, [r0, #9]
   1adf2:	e7ed      	b.n	1add0 <nfc_platform_nfcid1_default_bytes_get+0x2c>
		else if (buf[3] == 0x88) {
   1adf4:	2c88      	cmp	r4, #136	; 0x88
   1adf6:	d1eb      	bne.n	1add0 <nfc_platform_nfcid1_default_bytes_get+0x2c>
			buf[3] |= 0x11;
   1adf8:	2399      	movs	r3, #153	; 0x99
   1adfa:	70c3      	strb	r3, [r0, #3]
   1adfc:	e7e8      	b.n	1add0 <nfc_platform_nfcid1_default_bytes_get+0x2c>
		return NRFX_ERROR_INVALID_PARAM;
   1adfe:	4804      	ldr	r0, [pc, #16]	; (1ae10 <nfc_platform_nfcid1_default_bytes_get+0x6c>)
   1ae00:	e7e7      	b.n	1add2 <nfc_platform_nfcid1_default_bytes_get+0x2e>
	if (!buf) {
   1ae02:	4804      	ldr	r0, [pc, #16]	; (1ae14 <nfc_platform_nfcid1_default_bytes_get+0x70>)
   1ae04:	e7e5      	b.n	1add2 <nfc_platform_nfcid1_default_bytes_get+0x2e>
   1ae06:	bf00      	nop
   1ae08:	10000400 	.word	0x10000400
   1ae0c:	0bad0000 	.word	0x0bad0000
   1ae10:	0bad0004 	.word	0x0bad0004
   1ae14:	0bad0006 	.word	0x0bad0006

0001ae18 <nfc_platform_event_handler>:


void nfc_platform_event_handler(nrfx_nfct_evt_t const *event)
{
   1ae18:	b510      	push	{r4, lr}
	int err;

	switch (event->evt_id) {
   1ae1a:	6803      	ldr	r3, [r0, #0]
   1ae1c:	2b02      	cmp	r3, #2
   1ae1e:	d002      	beq.n	1ae26 <nfc_platform_event_handler+0xe>
   1ae20:	2b04      	cmp	r3, #4
   1ae22:	d016      	beq.n	1ae52 <nfc_platform_event_handler+0x3a>

	default:
		/* No implementation required */
		break;
	}
}
   1ae24:	bd10      	pop	{r4, pc}
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1ae26:	4915      	ldr	r1, [pc, #84]	; (1ae7c <nfc_platform_event_handler+0x64>)
   1ae28:	2300      	movs	r3, #0
   1ae2a:	60cb      	str	r3, [r1, #12]
   1ae2c:	4b14      	ldr	r3, [pc, #80]	; (1ae80 <nfc_platform_event_handler+0x68>)
   1ae2e:	604b      	str	r3, [r1, #4]
   1ae30:	2303      	movs	r3, #3
   1ae32:	608b      	str	r3, [r1, #8]
		err = onoff_request(hf_mgr, &cli);
   1ae34:	4b13      	ldr	r3, [pc, #76]	; (1ae84 <nfc_platform_event_handler+0x6c>)
   1ae36:	6818      	ldr	r0, [r3, #0]
   1ae38:	f7f6 fb9c 	bl	11574 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1ae3c:	2800      	cmp	r0, #0
   1ae3e:	daf1      	bge.n	1ae24 <nfc_platform_event_handler+0xc>
   1ae40:	4911      	ldr	r1, [pc, #68]	; (1ae88 <nfc_platform_event_handler+0x70>)
   1ae42:	4812      	ldr	r0, [pc, #72]	; (1ae8c <nfc_platform_event_handler+0x74>)
   1ae44:	22b0      	movs	r2, #176	; 0xb0
   1ae46:	f008 f8ea 	bl	2301e <assert_print>
   1ae4a:	21b0      	movs	r1, #176	; 0xb0
		__ASSERT_NO_MSG(err >= 0);
   1ae4c:	480e      	ldr	r0, [pc, #56]	; (1ae88 <nfc_platform_event_handler+0x70>)
   1ae4e:	f008 f8df 	bl	23010 <assert_post_action>
		err = onoff_cancel_or_release(hf_mgr, &cli);
   1ae52:	4b0c      	ldr	r3, [pc, #48]	; (1ae84 <nfc_platform_event_handler+0x6c>)
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   1ae54:	4909      	ldr	r1, [pc, #36]	; (1ae7c <nfc_platform_event_handler+0x64>)
   1ae56:	681c      	ldr	r4, [r3, #0]
   1ae58:	4620      	mov	r0, r4
   1ae5a:	f7f6 fc63 	bl	11724 <onoff_cancel>

	if (rv == -EALREADY) {
   1ae5e:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1ae62:	d102      	bne.n	1ae6a <nfc_platform_event_handler+0x52>
		rv = onoff_release(mgr);
   1ae64:	4620      	mov	r0, r4
   1ae66:	f7f6 fc07 	bl	11678 <onoff_release>
		__ASSERT_NO_MSG(err >= 0);
   1ae6a:	2800      	cmp	r0, #0
   1ae6c:	dada      	bge.n	1ae24 <nfc_platform_event_handler+0xc>
   1ae6e:	4906      	ldr	r1, [pc, #24]	; (1ae88 <nfc_platform_event_handler+0x70>)
   1ae70:	4806      	ldr	r0, [pc, #24]	; (1ae8c <nfc_platform_event_handler+0x74>)
   1ae72:	22b8      	movs	r2, #184	; 0xb8
   1ae74:	f008 f8d3 	bl	2301e <assert_print>
   1ae78:	21b8      	movs	r1, #184	; 0xb8
   1ae7a:	e7e7      	b.n	1ae4c <nfc_platform_event_handler+0x34>
   1ae7c:	20002e84 	.word	0x20002e84
   1ae80:	00025049 	.word	0x00025049
   1ae84:	20002e94 	.word	0x20002e94
   1ae88:	00028487 	.word	0x00028487
   1ae8c:	00026718 	.word	0x00026718

0001ae90 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1ae90:	4b01      	ldr	r3, [pc, #4]	; (1ae98 <mpsl_hfclk_callback+0x8>)
   1ae92:	2000      	movs	r0, #0
   1ae94:	681b      	ldr	r3, [r3, #0]
   1ae96:	4718      	bx	r3
   1ae98:	20002e98 	.word	0x20002e98

0001ae9c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1ae9c:	b510      	push	{r4, lr}
	switch (domain) {
   1ae9e:	b130      	cbz	r0, 1aeae <nrfx_clock_start+0x12>
   1aea0:	2801      	cmp	r0, #1
   1aea2:	d10a      	bne.n	1aeba <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1aea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1aea8:	4808      	ldr	r0, [pc, #32]	; (1aecc <nrfx_clock_start+0x30>)
   1aeaa:	f7e9 b9bb 	b.w	4224 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1aeae:	4b08      	ldr	r3, [pc, #32]	; (1aed0 <nrfx_clock_start+0x34>)
}
   1aeb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1aeb4:	681b      	ldr	r3, [r3, #0]
   1aeb6:	2001      	movs	r0, #1
   1aeb8:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1aeba:	4906      	ldr	r1, [pc, #24]	; (1aed4 <nrfx_clock_start+0x38>)
   1aebc:	4806      	ldr	r0, [pc, #24]	; (1aed8 <nrfx_clock_start+0x3c>)
   1aebe:	221c      	movs	r2, #28
   1aec0:	f008 f8ad 	bl	2301e <assert_print>
   1aec4:	4803      	ldr	r0, [pc, #12]	; (1aed4 <nrfx_clock_start+0x38>)
   1aec6:	211c      	movs	r1, #28
   1aec8:	f008 f8a2 	bl	23010 <assert_post_action>
   1aecc:	0001ae91 	.word	0x0001ae91
   1aed0:	20002e98 	.word	0x20002e98
   1aed4:	000284be 	.word	0x000284be
   1aed8:	00026718 	.word	0x00026718

0001aedc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1aedc:	b508      	push	{r3, lr}
	switch (domain) {
   1aede:	b170      	cbz	r0, 1aefe <nrfx_clock_stop+0x22>
   1aee0:	2801      	cmp	r0, #1
   1aee2:	d103      	bne.n	1aeec <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1aee4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1aee8:	f7e9 b98e 	b.w	4208 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1aeec:	4904      	ldr	r1, [pc, #16]	; (1af00 <nrfx_clock_stop+0x24>)
   1aeee:	4805      	ldr	r0, [pc, #20]	; (1af04 <nrfx_clock_stop+0x28>)
   1aef0:	222a      	movs	r2, #42	; 0x2a
   1aef2:	f008 f894 	bl	2301e <assert_print>
   1aef6:	4802      	ldr	r0, [pc, #8]	; (1af00 <nrfx_clock_stop+0x24>)
   1aef8:	212a      	movs	r1, #42	; 0x2a
   1aefa:	f008 f889 	bl	23010 <assert_post_action>
}
   1aefe:	bd08      	pop	{r3, pc}
   1af00:	000284be 	.word	0x000284be
   1af04:	00026718 	.word	0x00026718

0001af08 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1af08:	4b01      	ldr	r3, [pc, #4]	; (1af10 <nrfx_clock_init+0x8>)
   1af0a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1af0c:	4801      	ldr	r0, [pc, #4]	; (1af14 <nrfx_clock_init+0xc>)
   1af0e:	4770      	bx	lr
   1af10:	20002e98 	.word	0x20002e98
   1af14:	0bad0000 	.word	0x0bad0000

0001af18 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1af18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1af1c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1af20:	2a08      	cmp	r2, #8
   1af22:	d106      	bne.n	1af32 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1af24:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1af28:	2b05      	cmp	r3, #5
   1af2a:	d802      	bhi.n	1af32 <nrf52_errata_103+0x1a>
   1af2c:	4a02      	ldr	r2, [pc, #8]	; (1af38 <nrf52_errata_103+0x20>)
   1af2e:	5cd0      	ldrb	r0, [r2, r3]
   1af30:	4770      	bx	lr
                        return false;
   1af32:	2000      	movs	r0, #0
}
   1af34:	4770      	bx	lr
   1af36:	bf00      	nop
   1af38:	00028501 	.word	0x00028501

0001af3c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1af3c:	4a02      	ldr	r2, [pc, #8]	; (1af48 <nvmc_wait+0xc>)
   1af3e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1af42:	2b00      	cmp	r3, #0
   1af44:	d0fb      	beq.n	1af3e <nvmc_wait+0x2>
}
   1af46:	4770      	bx	lr
   1af48:	4001e000 	.word	0x4001e000

0001af4c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1af4c:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1af4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1af52:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1af56:	2a08      	cmp	r2, #8
   1af58:	d14e      	bne.n	1aff8 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1af5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1af5e:	2100      	movs	r1, #0
   1af60:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1af64:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1af68:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1af6c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   1af70:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   1af74:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1af78:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   1af7c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1af80:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   1af84:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1af88:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   1af8c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1af90:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   1af94:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1af98:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1af9c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1afa0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   1afa4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1afa8:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   1afac:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1afb0:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   1afb4:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1afb8:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   1afbc:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1afc0:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   1afc4:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1afc8:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   1afcc:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1afd0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   1afd4:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1afd8:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   1afdc:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1afe0:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   1afe4:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1afe8:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   1afec:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1aff0:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   1aff4:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1aff8:	f7ff ff8e 	bl	1af18 <nrf52_errata_103>
   1affc:	b118      	cbz	r0, 1b006 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1affe:	4b3b      	ldr	r3, [pc, #236]	; (1b0ec <SystemInit+0x1a0>)
   1b000:	4a3b      	ldr	r2, [pc, #236]	; (1b0f0 <SystemInit+0x1a4>)
   1b002:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1b006:	f7ff ff87 	bl	1af18 <nrf52_errata_103>
   1b00a:	b118      	cbz	r0, 1b014 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1b00c:	4b39      	ldr	r3, [pc, #228]	; (1b0f4 <SystemInit+0x1a8>)
   1b00e:	22fb      	movs	r2, #251	; 0xfb
   1b010:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1b014:	f7ff ff80 	bl	1af18 <nrf52_errata_103>
   1b018:	b170      	cbz	r0, 1b038 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1b01a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1b01e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b022:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1b026:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1b02a:	f022 020f 	bic.w	r2, r2, #15
   1b02e:	f003 030f 	and.w	r3, r3, #15
   1b032:	4313      	orrs	r3, r2
   1b034:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1b038:	f7ff ff6e 	bl	1af18 <nrf52_errata_103>
   1b03c:	b120      	cbz	r0, 1b048 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1b03e:	4b2e      	ldr	r3, [pc, #184]	; (1b0f8 <SystemInit+0x1ac>)
   1b040:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b044:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b048:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1b04c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1b050:	2b08      	cmp	r3, #8
   1b052:	d11a      	bne.n	1b08a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1b054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b058:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1b05c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1b05e:	bf44      	itt	mi
   1b060:	f06f 0201 	mvnmi.w	r2, #1
   1b064:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1b068:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b06c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   1b070:	2b05      	cmp	r3, #5
   1b072:	d802      	bhi.n	1b07a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1b074:	4a21      	ldr	r2, [pc, #132]	; (1b0fc <SystemInit+0x1b0>)
   1b076:	5cd3      	ldrb	r3, [r2, r3]
   1b078:	b13b      	cbz	r3, 1b08a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1b07a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1b07e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1b082:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b086:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1b08a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1b08e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1b092:	2a00      	cmp	r2, #0
   1b094:	db03      	blt.n	1b09e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1b096:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1b09a:	2b00      	cmp	r3, #0
   1b09c:	da22      	bge.n	1b0e4 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b09e:	4918      	ldr	r1, [pc, #96]	; (1b100 <SystemInit+0x1b4>)
   1b0a0:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1b0a2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b0a6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1b0aa:	2412      	movs	r4, #18
    nvmc_wait();
   1b0ac:	f7ff ff46 	bl	1af3c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1b0b0:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1b0b4:	f7ff ff42 	bl	1af3c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1b0b8:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1b0bc:	f7ff ff3e 	bl	1af3c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b0c0:	2300      	movs	r3, #0
   1b0c2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1b0c6:	f7ff ff39 	bl	1af3c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1b0ca:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1b0ce:	490d      	ldr	r1, [pc, #52]	; (1b104 <SystemInit+0x1b8>)
   1b0d0:	4b0d      	ldr	r3, [pc, #52]	; (1b108 <SystemInit+0x1bc>)
   1b0d2:	68ca      	ldr	r2, [r1, #12]
   1b0d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1b0d8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1b0da:	60cb      	str	r3, [r1, #12]
   1b0dc:	f3bf 8f4f 	dsb	sy
    __NOP();
   1b0e0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1b0e2:	e7fd      	b.n	1b0e0 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1b0e4:	4b09      	ldr	r3, [pc, #36]	; (1b10c <SystemInit+0x1c0>)
   1b0e6:	4a0a      	ldr	r2, [pc, #40]	; (1b110 <SystemInit+0x1c4>)
   1b0e8:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1b0ea:	bd10      	pop	{r4, pc}
   1b0ec:	40005000 	.word	0x40005000
   1b0f0:	00038148 	.word	0x00038148
   1b0f4:	4000f000 	.word	0x4000f000
   1b0f8:	40029000 	.word	0x40029000
   1b0fc:	000284fb 	.word	0x000284fb
   1b100:	4001e000 	.word	0x4001e000
   1b104:	e000ed00 	.word	0xe000ed00
   1b108:	05fa0004 	.word	0x05fa0004
   1b10c:	20000798 	.word	0x20000798
   1b110:	03d09000 	.word	0x03d09000

0001b114 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1b114:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1b116:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1b118:	6802      	ldr	r2, [r0, #0]
   1b11a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1b11e:	fab2 f382 	clz	r3, r2
   1b122:	f1c3 031f 	rsb	r3, r3, #31
   1b126:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1b128:	fa05 f403 	lsl.w	r4, r5, r3
   1b12c:	ea22 0404 	bic.w	r4, r2, r4
   1b130:	e850 6f00 	ldrex	r6, [r0]
   1b134:	4296      	cmp	r6, r2
   1b136:	d104      	bne.n	1b142 <nrfx_flag32_alloc+0x2e>
   1b138:	e840 4c00 	strex	ip, r4, [r0]
   1b13c:	f1bc 0f00 	cmp.w	ip, #0
   1b140:	d1f6      	bne.n	1b130 <nrfx_flag32_alloc+0x1c>
   1b142:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1b146:	d1e7      	bne.n	1b118 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1b148:	4801      	ldr	r0, [pc, #4]	; (1b150 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1b14a:	700b      	strb	r3, [r1, #0]
}
   1b14c:	bd70      	pop	{r4, r5, r6, pc}
   1b14e:	bf00      	nop
   1b150:	0bad0000 	.word	0x0bad0000

0001b154 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1b154:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1b156:	6803      	ldr	r3, [r0, #0]
   1b158:	40cb      	lsrs	r3, r1
   1b15a:	07db      	lsls	r3, r3, #31
   1b15c:	d414      	bmi.n	1b188 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1b15e:	2301      	movs	r3, #1
   1b160:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1b162:	6802      	ldr	r2, [r0, #0]
   1b164:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1b168:	ea43 0102 	orr.w	r1, r3, r2
   1b16c:	e850 4f00 	ldrex	r4, [r0]
   1b170:	4294      	cmp	r4, r2
   1b172:	d104      	bne.n	1b17e <nrfx_flag32_free+0x2a>
   1b174:	e840 1c00 	strex	ip, r1, [r0]
   1b178:	f1bc 0f00 	cmp.w	ip, #0
   1b17c:	d1f6      	bne.n	1b16c <nrfx_flag32_free+0x18>
   1b17e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1b182:	d1ee      	bne.n	1b162 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1b184:	4801      	ldr	r0, [pc, #4]	; (1b18c <nrfx_flag32_free+0x38>)
}
   1b186:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1b188:	4801      	ldr	r0, [pc, #4]	; (1b190 <nrfx_flag32_free+0x3c>)
   1b18a:	e7fc      	b.n	1b186 <nrfx_flag32_free+0x32>
   1b18c:	0bad0000 	.word	0x0bad0000
   1b190:	0bad0004 	.word	0x0bad0004

0001b194 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1b194:	4b03      	ldr	r3, [pc, #12]	; (1b1a4 <pin_in_use_by_te+0x10>)
   1b196:	3008      	adds	r0, #8
   1b198:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1b19c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1b1a0:	4770      	bx	lr
   1b1a2:	bf00      	nop
   1b1a4:	2000079c 	.word	0x2000079c

0001b1a8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1b1a8:	4b04      	ldr	r3, [pc, #16]	; (1b1bc <pin_has_trigger+0x14>)
   1b1aa:	3008      	adds	r0, #8
   1b1ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1b1b0:	f010 001c 	ands.w	r0, r0, #28
   1b1b4:	bf18      	it	ne
   1b1b6:	2001      	movne	r0, #1
   1b1b8:	4770      	bx	lr
   1b1ba:	bf00      	nop
   1b1bc:	2000079c 	.word	0x2000079c

0001b1c0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b1c0:	4b03      	ldr	r3, [pc, #12]	; (1b1d0 <pin_is_output+0x10>)
   1b1c2:	3008      	adds	r0, #8
   1b1c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1b1c8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1b1cc:	4770      	bx	lr
   1b1ce:	bf00      	nop
   1b1d0:	2000079c 	.word	0x2000079c

0001b1d4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1b1d4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1b1d6:	f100 0308 	add.w	r3, r0, #8
   1b1da:	4c0c      	ldr	r4, [pc, #48]	; (1b20c <call_handler+0x38>)
   1b1dc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1b1e0:	05da      	lsls	r2, r3, #23
{
   1b1e2:	4605      	mov	r5, r0
   1b1e4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1b1e6:	d507      	bpl.n	1b1f8 <call_handler+0x24>
   1b1e8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1b1ec:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1b1f0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1b1f4:	6852      	ldr	r2, [r2, #4]
   1b1f6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1b1f8:	68a3      	ldr	r3, [r4, #8]
   1b1fa:	b12b      	cbz	r3, 1b208 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1b1fc:	68e2      	ldr	r2, [r4, #12]
   1b1fe:	4631      	mov	r1, r6
   1b200:	4628      	mov	r0, r5
    }
}
   1b202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1b206:	4718      	bx	r3
}
   1b208:	bd70      	pop	{r4, r5, r6, pc}
   1b20a:	bf00      	nop
   1b20c:	2000079c 	.word	0x2000079c

0001b210 <release_handler>:
{
   1b210:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1b212:	4a18      	ldr	r2, [pc, #96]	; (1b274 <release_handler+0x64>)
   1b214:	3008      	adds	r0, #8
   1b216:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1b21a:	05d9      	lsls	r1, r3, #23
   1b21c:	d51d      	bpl.n	1b25a <release_handler+0x4a>
   1b21e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1b222:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1b226:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1b22a:	f102 040e 	add.w	r4, r2, #14
   1b22e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1b230:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1b234:	f413 7f80 	tst.w	r3, #256	; 0x100
   1b238:	d003      	beq.n	1b242 <release_handler+0x32>
   1b23a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1b23e:	4299      	cmp	r1, r3
   1b240:	d00b      	beq.n	1b25a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1b242:	3001      	adds	r0, #1
   1b244:	2830      	cmp	r0, #48	; 0x30
   1b246:	d1f3      	bne.n	1b230 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1b248:	2300      	movs	r3, #0
   1b24a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1b24e:	480a      	ldr	r0, [pc, #40]	; (1b278 <release_handler+0x68>)
   1b250:	f7ff ff80 	bl	1b154 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1b254:	4b09      	ldr	r3, [pc, #36]	; (1b27c <release_handler+0x6c>)
   1b256:	4298      	cmp	r0, r3
   1b258:	d100      	bne.n	1b25c <release_handler+0x4c>
}
   1b25a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1b25c:	4908      	ldr	r1, [pc, #32]	; (1b280 <release_handler+0x70>)
   1b25e:	4809      	ldr	r0, [pc, #36]	; (1b284 <release_handler+0x74>)
   1b260:	f44f 7299 	mov.w	r2, #306	; 0x132
   1b264:	f007 fedb 	bl	2301e <assert_print>
   1b268:	4805      	ldr	r0, [pc, #20]	; (1b280 <release_handler+0x70>)
   1b26a:	f44f 7199 	mov.w	r1, #306	; 0x132
   1b26e:	f007 fecf 	bl	23010 <assert_post_action>
   1b272:	bf00      	nop
   1b274:	2000079c 	.word	0x2000079c
   1b278:	20000810 	.word	0x20000810
   1b27c:	0bad0000 	.word	0x0bad0000
   1b280:	00028507 	.word	0x00028507
   1b284:	00026718 	.word	0x00026718

0001b288 <pin_handler_trigger_uninit>:
{
   1b288:	b538      	push	{r3, r4, r5, lr}
   1b28a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1b28c:	f7ff ff82 	bl	1b194 <pin_in_use_by_te>
   1b290:	4c09      	ldr	r4, [pc, #36]	; (1b2b8 <pin_handler_trigger_uninit+0x30>)
   1b292:	f102 0508 	add.w	r5, r2, #8
   1b296:	b140      	cbz	r0, 1b2aa <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b298:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1b29c:	4907      	ldr	r1, [pc, #28]	; (1b2bc <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1b29e:	0b5b      	lsrs	r3, r3, #13
   1b2a0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1b2a4:	2000      	movs	r0, #0
   1b2a6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1b2aa:	4610      	mov	r0, r2
   1b2ac:	f7ff ffb0 	bl	1b210 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1b2b0:	2300      	movs	r3, #0
   1b2b2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1b2b6:	bd38      	pop	{r3, r4, r5, pc}
   1b2b8:	2000079c 	.word	0x2000079c
   1b2bc:	40006000 	.word	0x40006000

0001b2c0 <nrf_gpio_pin_port_decode>:
{
   1b2c0:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b2c2:	6802      	ldr	r2, [r0, #0]
{
   1b2c4:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1b2c6:	4610      	mov	r0, r2
   1b2c8:	f009 fee1 	bl	2508e <nrf_gpio_pin_present_check>
   1b2cc:	b950      	cbnz	r0, 1b2e4 <nrf_gpio_pin_port_decode+0x24>
   1b2ce:	4910      	ldr	r1, [pc, #64]	; (1b310 <nrf_gpio_pin_port_decode+0x50>)
   1b2d0:	4810      	ldr	r0, [pc, #64]	; (1b314 <nrf_gpio_pin_port_decode+0x54>)
   1b2d2:	f240 2247 	movw	r2, #583	; 0x247
   1b2d6:	f007 fea2 	bl	2301e <assert_print>
   1b2da:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1b2de:	480c      	ldr	r0, [pc, #48]	; (1b310 <nrf_gpio_pin_port_decode+0x50>)
   1b2e0:	f007 fe96 	bl	23010 <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1b2e4:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b2e8:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1b2ea:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b2ec:	d00a      	beq.n	1b304 <nrf_gpio_pin_port_decode+0x44>
   1b2ee:	2a01      	cmp	r2, #1
   1b2f0:	d00b      	beq.n	1b30a <nrf_gpio_pin_port_decode+0x4a>
            NRFX_ASSERT(0);
   1b2f2:	4907      	ldr	r1, [pc, #28]	; (1b310 <nrf_gpio_pin_port_decode+0x50>)
   1b2f4:	4807      	ldr	r0, [pc, #28]	; (1b314 <nrf_gpio_pin_port_decode+0x54>)
   1b2f6:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1b2fa:	f007 fe90 	bl	2301e <assert_print>
   1b2fe:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1b302:	e7ec      	b.n	1b2de <nrf_gpio_pin_port_decode+0x1e>
        case 0: return NRF_P0;
   1b304:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1b308:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b30a:	4803      	ldr	r0, [pc, #12]	; (1b318 <nrf_gpio_pin_port_decode+0x58>)
   1b30c:	e7fc      	b.n	1b308 <nrf_gpio_pin_port_decode+0x48>
   1b30e:	bf00      	nop
   1b310:	00027fe5 	.word	0x00027fe5
   1b314:	00026718 	.word	0x00026718
   1b318:	50000300 	.word	0x50000300

0001b31c <nrfx_gpiote_input_configure>:
{
   1b31c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b31e:	4604      	mov	r4, r0
   1b320:	b085      	sub	sp, #20
   1b322:	4617      	mov	r7, r2
   1b324:	461d      	mov	r5, r3
    if (p_input_config)
   1b326:	b1d9      	cbz	r1, 1b360 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1b328:	f009 fec2 	bl	250b0 <pin_is_task_output>
   1b32c:	bb00      	cbnz	r0, 1b370 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1b32e:	460b      	mov	r3, r1
   1b330:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1b334:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1b338:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1b33c:	f10d 020f 	add.w	r2, sp, #15
   1b340:	f10d 010e 	add.w	r1, sp, #14
   1b344:	4620      	mov	r0, r4
   1b346:	f009 febe 	bl	250c6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1b34a:	4a44      	ldr	r2, [pc, #272]	; (1b45c <nrfx_gpiote_input_configure+0x140>)
   1b34c:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1b350:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1b354:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1b358:	f043 0301 	orr.w	r3, r3, #1
   1b35c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1b360:	b34f      	cbz	r7, 1b3b6 <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
   1b362:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1b364:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1b366:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1b368:	f7ff ff2a 	bl	1b1c0 <pin_is_output>
   1b36c:	b110      	cbz	r0, 1b374 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1b36e:	b1ba      	cbz	r2, 1b3a0 <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
   1b370:	483b      	ldr	r0, [pc, #236]	; (1b460 <nrfx_gpiote_input_configure+0x144>)
   1b372:	e022      	b.n	1b3ba <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1b374:	4b39      	ldr	r3, [pc, #228]	; (1b45c <nrfx_gpiote_input_configure+0x140>)
   1b376:	f104 0c08 	add.w	ip, r4, #8
   1b37a:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
   1b37e:	f021 0120 	bic.w	r1, r1, #32
   1b382:	04c9      	lsls	r1, r1, #19
   1b384:	0cc9      	lsrs	r1, r1, #19
   1b386:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
   1b38a:	b14a      	cbz	r2, 1b3a0 <nrfx_gpiote_input_configure+0x84>
                if (!edge)
   1b38c:	2e03      	cmp	r6, #3
   1b38e:	d8ef      	bhi.n	1b370 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1b390:	687a      	ldr	r2, [r7, #4]
   1b392:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1b394:	b99e      	cbnz	r6, 1b3be <nrfx_gpiote_input_configure+0xa2>
   1b396:	4b33      	ldr	r3, [pc, #204]	; (1b464 <nrfx_gpiote_input_configure+0x148>)
   1b398:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   1b39c:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1b3a0:	4a2e      	ldr	r2, [pc, #184]	; (1b45c <nrfx_gpiote_input_configure+0x140>)
   1b3a2:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1b3a6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1b3aa:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1b3ae:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1b3b2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1b3b6:	bb3d      	cbnz	r5, 1b408 <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
   1b3b8:	482b      	ldr	r0, [pc, #172]	; (1b468 <nrfx_gpiote_input_configure+0x14c>)
}
   1b3ba:	b005      	add	sp, #20
   1b3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1b3be:	00ba      	lsls	r2, r7, #2
   1b3c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1b3c4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1b3c8:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1b3cc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1b3d0:	f020 0003 	bic.w	r0, r0, #3
   1b3d4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1b3d8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1b3dc:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1b3e0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1b3e4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b3e8:	0220      	lsls	r0, r4, #8
   1b3ea:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1b3ee:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1b3f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1b3f6:	ea40 000e 	orr.w	r0, r0, lr
   1b3fa:	f041 0120 	orr.w	r1, r1, #32
   1b3fe:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
   1b402:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1b406:	e7cb      	b.n	1b3a0 <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1b408:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1b40c:	4620      	mov	r0, r4
   1b40e:	f7ff feff 	bl	1b210 <release_handler>
    if (!handler)
   1b412:	2e00      	cmp	r6, #0
   1b414:	d0d0      	beq.n	1b3b8 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1b416:	4d11      	ldr	r5, [pc, #68]	; (1b45c <nrfx_gpiote_input_configure+0x140>)
   1b418:	e9d5 2300 	ldrd	r2, r3, [r5]
   1b41c:	4296      	cmp	r6, r2
   1b41e:	d101      	bne.n	1b424 <nrfx_gpiote_input_configure+0x108>
   1b420:	429f      	cmp	r7, r3
   1b422:	d018      	beq.n	1b456 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1b424:	4811      	ldr	r0, [pc, #68]	; (1b46c <nrfx_gpiote_input_configure+0x150>)
   1b426:	f10d 010f 	add.w	r1, sp, #15
   1b42a:	f7ff fe73 	bl	1b114 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1b42e:	4b0e      	ldr	r3, [pc, #56]	; (1b468 <nrfx_gpiote_input_configure+0x14c>)
   1b430:	4298      	cmp	r0, r3
   1b432:	d1c2      	bne.n	1b3ba <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
   1b434:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1b438:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1b43c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1b440:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1b442:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1b444:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1b448:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1b44c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1b450:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1b454:	e7b0      	b.n	1b3b8 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1b456:	2200      	movs	r2, #0
   1b458:	e7ee      	b.n	1b438 <nrfx_gpiote_input_configure+0x11c>
   1b45a:	bf00      	nop
   1b45c:	2000079c 	.word	0x2000079c
   1b460:	0bad0004 	.word	0x0bad0004
   1b464:	40006000 	.word	0x40006000
   1b468:	0bad0000 	.word	0x0bad0000
   1b46c:	20000810 	.word	0x20000810

0001b470 <nrfx_gpiote_output_configure>:
{
   1b470:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b472:	4604      	mov	r4, r0
   1b474:	b085      	sub	sp, #20
   1b476:	4615      	mov	r5, r2
    if (p_config)
   1b478:	b321      	cbz	r1, 1b4c4 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1b47a:	f7ff fea1 	bl	1b1c0 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1b47e:	b920      	cbnz	r0, 1b48a <nrfx_gpiote_output_configure+0x1a>
   1b480:	4620      	mov	r0, r4
   1b482:	f7ff fe87 	bl	1b194 <pin_in_use_by_te>
   1b486:	2800      	cmp	r0, #0
   1b488:	d15e      	bne.n	1b548 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1b48a:	4620      	mov	r0, r4
   1b48c:	f7ff fe8c 	bl	1b1a8 <pin_has_trigger>
   1b490:	b110      	cbz	r0, 1b498 <nrfx_gpiote_output_configure+0x28>
   1b492:	784b      	ldrb	r3, [r1, #1]
   1b494:	2b01      	cmp	r3, #1
   1b496:	d057      	beq.n	1b548 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1b498:	2301      	movs	r3, #1
   1b49a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1b49e:	2300      	movs	r3, #0
   1b4a0:	e9cd 1300 	strd	r1, r3, [sp]
   1b4a4:	1c4a      	adds	r2, r1, #1
   1b4a6:	1c8b      	adds	r3, r1, #2
   1b4a8:	4620      	mov	r0, r4
   1b4aa:	f10d 010f 	add.w	r1, sp, #15
   1b4ae:	f009 fe0a 	bl	250c6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1b4b2:	4a26      	ldr	r2, [pc, #152]	; (1b54c <nrfx_gpiote_output_configure+0xdc>)
   1b4b4:	f104 0108 	add.w	r1, r4, #8
   1b4b8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1b4bc:	f043 0303 	orr.w	r3, r3, #3
   1b4c0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1b4c4:	b915      	cbnz	r5, 1b4cc <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1b4c6:	4822      	ldr	r0, [pc, #136]	; (1b550 <nrfx_gpiote_output_configure+0xe0>)
}
   1b4c8:	b005      	add	sp, #20
   1b4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1b4cc:	4620      	mov	r0, r4
   1b4ce:	f7ff fe77 	bl	1b1c0 <pin_is_output>
        if (pin_is_input(pin))
   1b4d2:	b3c8      	cbz	r0, 1b548 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1b4d4:	4e1d      	ldr	r6, [pc, #116]	; (1b54c <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   1b4d6:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1b4da:	f104 0708 	add.w	r7, r4, #8
   1b4de:	4661      	mov	r1, ip
   1b4e0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1b4e4:	0089      	lsls	r1, r1, #2
   1b4e6:	f020 0020 	bic.w	r0, r0, #32
   1b4ea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1b4ee:	04c0      	lsls	r0, r0, #19
   1b4f0:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1b4f4:	0cc0      	lsrs	r0, r0, #19
   1b4f6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1b4fa:	2300      	movs	r3, #0
   1b4fc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1b500:	786a      	ldrb	r2, [r5, #1]
   1b502:	2a00      	cmp	r2, #0
   1b504:	d0df      	beq.n	1b4c6 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1b506:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1b50a:	78ad      	ldrb	r5, [r5, #2]
   1b50c:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1b510:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1b514:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b518:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1b51c:	0223      	lsls	r3, r4, #8
   1b51e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1b522:	0412      	lsls	r2, r2, #16
   1b524:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b528:	ea43 030e 	orr.w	r3, r3, lr
   1b52c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1b52e:	052a      	lsls	r2, r5, #20
   1b530:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1b534:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b538:	4313      	orrs	r3, r2
   1b53a:	f040 0020 	orr.w	r0, r0, #32
   1b53e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1b542:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1b546:	e7be      	b.n	1b4c6 <nrfx_gpiote_output_configure+0x56>
{
   1b548:	4802      	ldr	r0, [pc, #8]	; (1b554 <nrfx_gpiote_output_configure+0xe4>)
   1b54a:	e7bd      	b.n	1b4c8 <nrfx_gpiote_output_configure+0x58>
   1b54c:	2000079c 	.word	0x2000079c
   1b550:	0bad0000 	.word	0x0bad0000
   1b554:	0bad0004 	.word	0x0bad0004

0001b558 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1b558:	4b01      	ldr	r3, [pc, #4]	; (1b560 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1b55a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1b55e:	4770      	bx	lr
   1b560:	2000079c 	.word	0x2000079c

0001b564 <nrfx_gpiote_channel_get>:
{
   1b564:	b508      	push	{r3, lr}
   1b566:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
   1b568:	b951      	cbnz	r1, 1b580 <nrfx_gpiote_channel_get+0x1c>
   1b56a:	490c      	ldr	r1, [pc, #48]	; (1b59c <nrfx_gpiote_channel_get+0x38>)
   1b56c:	480c      	ldr	r0, [pc, #48]	; (1b5a0 <nrfx_gpiote_channel_get+0x3c>)
   1b56e:	f240 2235 	movw	r2, #565	; 0x235
   1b572:	f007 fd54 	bl	2301e <assert_print>
   1b576:	4809      	ldr	r0, [pc, #36]	; (1b59c <nrfx_gpiote_channel_get+0x38>)
   1b578:	f240 2135 	movw	r1, #565	; 0x235
   1b57c:	f007 fd48 	bl	23010 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1b580:	f7ff fe08 	bl	1b194 <pin_in_use_by_te>
   1b584:	b138      	cbz	r0, 1b596 <nrfx_gpiote_channel_get+0x32>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b586:	4b07      	ldr	r3, [pc, #28]	; (1b5a4 <nrfx_gpiote_channel_get+0x40>)
        return NRFX_SUCCESS;
   1b588:	4807      	ldr	r0, [pc, #28]	; (1b5a8 <nrfx_gpiote_channel_get+0x44>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b58a:	3208      	adds	r2, #8
   1b58c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1b590:	0b5b      	lsrs	r3, r3, #13
   1b592:	700b      	strb	r3, [r1, #0]
}
   1b594:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1b596:	4805      	ldr	r0, [pc, #20]	; (1b5ac <nrfx_gpiote_channel_get+0x48>)
   1b598:	e7fc      	b.n	1b594 <nrfx_gpiote_channel_get+0x30>
   1b59a:	bf00      	nop
   1b59c:	00028507 	.word	0x00028507
   1b5a0:	00026718 	.word	0x00026718
   1b5a4:	2000079c 	.word	0x2000079c
   1b5a8:	0bad0000 	.word	0x0bad0000
   1b5ac:	0bad0004 	.word	0x0bad0004

0001b5b0 <nrfx_gpiote_init>:
{
   1b5b0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1b5b2:	4c0f      	ldr	r4, [pc, #60]	; (1b5f0 <nrfx_gpiote_init+0x40>)
   1b5b4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1b5b8:	b9bd      	cbnz	r5, 1b5ea <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1b5ba:	2260      	movs	r2, #96	; 0x60
   1b5bc:	4629      	mov	r1, r5
   1b5be:	f104 0010 	add.w	r0, r4, #16
   1b5c2:	f007 ffdc 	bl	2357e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1b5c6:	2006      	movs	r0, #6
   1b5c8:	f7f7 f86e 	bl	126a8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b5cc:	4b09      	ldr	r3, [pc, #36]	; (1b5f4 <nrfx_gpiote_init+0x44>)
    return err_code;
   1b5ce:	480a      	ldr	r0, [pc, #40]	; (1b5f8 <nrfx_gpiote_init+0x48>)
   1b5d0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1b5d4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1b5d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b5dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1b5e0:	2301      	movs	r3, #1
   1b5e2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1b5e6:	6763      	str	r3, [r4, #116]	; 0x74
}
   1b5e8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1b5ea:	4804      	ldr	r0, [pc, #16]	; (1b5fc <nrfx_gpiote_init+0x4c>)
   1b5ec:	e7fc      	b.n	1b5e8 <nrfx_gpiote_init+0x38>
   1b5ee:	bf00      	nop
   1b5f0:	2000079c 	.word	0x2000079c
   1b5f4:	40006000 	.word	0x40006000
   1b5f8:	0bad0000 	.word	0x0bad0000
   1b5fc:	0bad0005 	.word	0x0bad0005

0001b600 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1b600:	4b03      	ldr	r3, [pc, #12]	; (1b610 <nrfx_gpiote_is_init+0x10>)
   1b602:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1b606:	3800      	subs	r0, #0
   1b608:	bf18      	it	ne
   1b60a:	2001      	movne	r0, #1
   1b60c:	4770      	bx	lr
   1b60e:	bf00      	nop
   1b610:	2000079c 	.word	0x2000079c

0001b614 <nrfx_gpiote_channel_free>:
{
   1b614:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1b616:	4801      	ldr	r0, [pc, #4]	; (1b61c <nrfx_gpiote_channel_free+0x8>)
   1b618:	f7ff bd9c 	b.w	1b154 <nrfx_flag32_free>
   1b61c:	2000080c 	.word	0x2000080c

0001b620 <nrfx_gpiote_channel_alloc>:
{
   1b620:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1b622:	4801      	ldr	r0, [pc, #4]	; (1b628 <nrfx_gpiote_channel_alloc+0x8>)
   1b624:	f7ff bd76 	b.w	1b114 <nrfx_flag32_alloc>
   1b628:	2000080c 	.word	0x2000080c

0001b62c <nrfx_gpiote_trigger_enable>:
{
   1b62c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b62e:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1b630:	f7ff fdba 	bl	1b1a8 <pin_has_trigger>
   1b634:	b950      	cbnz	r0, 1b64c <nrfx_gpiote_trigger_enable+0x20>
   1b636:	492c      	ldr	r1, [pc, #176]	; (1b6e8 <nrfx_gpiote_trigger_enable+0xbc>)
   1b638:	482c      	ldr	r0, [pc, #176]	; (1b6ec <nrfx_gpiote_trigger_enable+0xc0>)
   1b63a:	f240 32df 	movw	r2, #991	; 0x3df
   1b63e:	f007 fcee 	bl	2301e <assert_print>
   1b642:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1b646:	4828      	ldr	r0, [pc, #160]	; (1b6e8 <nrfx_gpiote_trigger_enable+0xbc>)
   1b648:	f007 fce2 	bl	23010 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b64c:	4620      	mov	r0, r4
   1b64e:	f7ff fda1 	bl	1b194 <pin_in_use_by_te>
   1b652:	4a27      	ldr	r2, [pc, #156]	; (1b6f0 <nrfx_gpiote_trigger_enable+0xc4>)
   1b654:	f104 0508 	add.w	r5, r4, #8
   1b658:	b1f8      	cbz	r0, 1b69a <nrfx_gpiote_trigger_enable+0x6e>
    return !pin_is_output(pin);
   1b65a:	4620      	mov	r0, r4
   1b65c:	f7ff fdb0 	bl	1b1c0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b660:	b9d8      	cbnz	r0, 1b69a <nrfx_gpiote_trigger_enable+0x6e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b662:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
   1b666:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1b668:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   1b66a:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   1b66e:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
   1b672:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b676:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b67a:	6020      	str	r0, [r4, #0]
   1b67c:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1b67e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1b682:	f040 0001 	orr.w	r0, r0, #1
   1b686:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1b68a:	b121      	cbz	r1, 1b696 <nrfx_gpiote_trigger_enable+0x6a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1b68c:	2301      	movs	r3, #1
   1b68e:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1b690:	4a18      	ldr	r2, [pc, #96]	; (1b6f4 <nrfx_gpiote_trigger_enable+0xc8>)
   1b692:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1b696:	b003      	add	sp, #12
   1b698:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1b69a:	b941      	cbnz	r1, 1b6ae <nrfx_gpiote_trigger_enable+0x82>
   1b69c:	4912      	ldr	r1, [pc, #72]	; (1b6e8 <nrfx_gpiote_trigger_enable+0xbc>)
   1b69e:	4813      	ldr	r0, [pc, #76]	; (1b6ec <nrfx_gpiote_trigger_enable+0xc0>)
   1b6a0:	f240 32ee 	movw	r2, #1006	; 0x3ee
   1b6a4:	f007 fcbb 	bl	2301e <assert_print>
   1b6a8:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1b6ac:	e7cb      	b.n	1b646 <nrfx_gpiote_trigger_enable+0x1a>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b6ae:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1b6b2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1b6b6:	2b04      	cmp	r3, #4
   1b6b8:	d012      	beq.n	1b6e0 <nrfx_gpiote_trigger_enable+0xb4>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1b6ba:	2b05      	cmp	r3, #5
   1b6bc:	d012      	beq.n	1b6e4 <nrfx_gpiote_trigger_enable+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b6be:	a801      	add	r0, sp, #4
   1b6c0:	9401      	str	r4, [sp, #4]
   1b6c2:	f7ff fdfd 	bl	1b2c0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b6c6:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1b6c8:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b6cc:	40d9      	lsrs	r1, r3
   1b6ce:	f001 0101 	and.w	r1, r1, #1
   1b6d2:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1b6d4:	4620      	mov	r0, r4
}
   1b6d6:	b003      	add	sp, #12
   1b6d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1b6dc:	f009 bd40 	b.w	25160 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1b6e0:	2103      	movs	r1, #3
   1b6e2:	e7f7      	b.n	1b6d4 <nrfx_gpiote_trigger_enable+0xa8>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1b6e4:	2102      	movs	r1, #2
   1b6e6:	e7f5      	b.n	1b6d4 <nrfx_gpiote_trigger_enable+0xa8>
   1b6e8:	00028507 	.word	0x00028507
   1b6ec:	00026718 	.word	0x00026718
   1b6f0:	2000079c 	.word	0x2000079c
   1b6f4:	40006000 	.word	0x40006000

0001b6f8 <nrfx_gpiote_trigger_disable>:
{
   1b6f8:	b508      	push	{r3, lr}
   1b6fa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b6fc:	f7ff fd4a 	bl	1b194 <pin_in_use_by_te>
   1b700:	b1c8      	cbz	r0, 1b736 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1b702:	4610      	mov	r0, r2
   1b704:	f7ff fd5c 	bl	1b1c0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b708:	b9a8      	cbnz	r0, 1b736 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b70a:	3208      	adds	r2, #8
   1b70c:	4b0d      	ldr	r3, [pc, #52]	; (1b744 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   1b70e:	490e      	ldr	r1, [pc, #56]	; (1b748 <nrfx_gpiote_trigger_disable+0x50>)
   1b710:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1b714:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b716:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1b718:	409a      	lsls	r2, r3
   1b71a:	009b      	lsls	r3, r3, #2
   1b71c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b720:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1b724:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1b728:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1b72c:	f022 0203 	bic.w	r2, r2, #3
   1b730:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1b734:	bd08      	pop	{r3, pc}
   1b736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1b73a:	2100      	movs	r1, #0
   1b73c:	4610      	mov	r0, r2
   1b73e:	f009 bd0f 	b.w	25160 <nrf_gpio_cfg_sense_set>
   1b742:	bf00      	nop
   1b744:	2000079c 	.word	0x2000079c
   1b748:	40006000 	.word	0x40006000

0001b74c <nrfx_gpiote_pin_uninit>:
{
   1b74c:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1b74e:	4b0e      	ldr	r3, [pc, #56]	; (1b788 <nrfx_gpiote_pin_uninit+0x3c>)
   1b750:	f100 0208 	add.w	r2, r0, #8
{
   1b754:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1b756:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1b75a:	07db      	lsls	r3, r3, #31
   1b75c:	d511      	bpl.n	1b782 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1b75e:	f7ff ffcb 	bl	1b6f8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1b762:	4620      	mov	r0, r4
   1b764:	f7ff fd90 	bl	1b288 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b768:	a801      	add	r0, sp, #4
   1b76a:	9401      	str	r4, [sp, #4]
   1b76c:	f7ff fda8 	bl	1b2c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1b770:	9b01      	ldr	r3, [sp, #4]
   1b772:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b776:	2202      	movs	r2, #2
   1b778:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1b77c:	4803      	ldr	r0, [pc, #12]	; (1b78c <nrfx_gpiote_pin_uninit+0x40>)
}
   1b77e:	b002      	add	sp, #8
   1b780:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1b782:	4803      	ldr	r0, [pc, #12]	; (1b790 <nrfx_gpiote_pin_uninit+0x44>)
   1b784:	e7fb      	b.n	1b77e <nrfx_gpiote_pin_uninit+0x32>
   1b786:	bf00      	nop
   1b788:	2000079c 	.word	0x2000079c
   1b78c:	0bad0000 	.word	0x0bad0000
   1b790:	0bad0004 	.word	0x0bad0004

0001b794 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1b794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b798:	4b69      	ldr	r3, [pc, #420]	; (1b940 <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
   1b79a:	486a      	ldr	r0, [pc, #424]	; (1b944 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b79c:	496a      	ldr	r1, [pc, #424]	; (1b948 <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
   1b79e:	2600      	movs	r6, #0
{
   1b7a0:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1b7a2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b7a4:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b7a6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1b7a8:	b135      	cbz	r5, 1b7b8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1b7aa:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1b7ae:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b7b0:	bf1e      	ittt	ne
   1b7b2:	601c      	strne	r4, [r3, #0]
   1b7b4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1b7b6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b7b8:	3304      	adds	r3, #4
   1b7ba:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1b7bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b7c0:	d1f1      	bne.n	1b7a6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b7c2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1b944 <nrfx_gpiote_irq_handler+0x1b0>
   1b7c6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1b7ca:	2b00      	cmp	r3, #0
   1b7cc:	f000 809b 	beq.w	1b906 <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
   1b7d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b7d4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1b7d8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1b7da:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1b7de:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1b7e2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1b7e4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1b7e8:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   1b7ec:	f10d 0a10 	add.w	sl, sp, #16
   1b7f0:	ea4f 1348 	mov.w	r3, r8, lsl #5
   1b7f4:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1b7f6:	f04f 0b01 	mov.w	fp, #1
   1b7fa:	e04b      	b.n	1b894 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
   1b7fc:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b7fe:	4a53      	ldr	r2, [pc, #332]	; (1b94c <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1b800:	fa94 f4a4 	rbit	r4, r4
   1b804:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1b808:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1b80a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b80c:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   1b810:	f004 0107 	and.w	r1, r4, #7
   1b814:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1b818:	f81a 3000 	ldrb.w	r3, [sl, r0]
   1b81c:	9403      	str	r4, [sp, #12]
   1b81e:	fa0b f101 	lsl.w	r1, fp, r1
   1b822:	ea23 0301 	bic.w	r3, r3, r1
   1b826:	08ba      	lsrs	r2, r7, #2
   1b828:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b82c:	a803      	add	r0, sp, #12
   1b82e:	9201      	str	r2, [sp, #4]
   1b830:	f7ff fd46 	bl	1b2c0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1b834:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1b836:	9a01      	ldr	r2, [sp, #4]
   1b838:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b83c:	f3c7 0582 	ubfx	r5, r7, #2, #3
   1b840:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
   1b844:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b846:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1b848:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1b84c:	d52c      	bpl.n	1b8a8 <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
   1b84e:	4639      	mov	r1, r7
   1b850:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1b852:	b2dd      	uxtb	r5, r3
   1b854:	f7ff fcbe 	bl	1b1d4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b858:	a803      	add	r0, sp, #12
   1b85a:	9403      	str	r4, [sp, #12]
   1b85c:	f7ff fd30 	bl	1b2c0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1b860:	9b03      	ldr	r3, [sp, #12]
   1b862:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b866:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1b86a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1b86e:	429d      	cmp	r5, r3
   1b870:	d107      	bne.n	1b882 <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1b872:	2100      	movs	r1, #0
   1b874:	4620      	mov	r0, r4
   1b876:	f009 fc73 	bl	25160 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1b87a:	4629      	mov	r1, r5
   1b87c:	4620      	mov	r0, r4
   1b87e:	f009 fc6f 	bl	25160 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b882:	a803      	add	r0, sp, #12
   1b884:	9403      	str	r4, [sp, #12]
   1b886:	f7ff fd1b 	bl	1b2c0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1b88a:	9b03      	ldr	r3, [sp, #12]
   1b88c:	fa0b f303 	lsl.w	r3, fp, r3
   1b890:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1b894:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   1b898:	2c00      	cmp	r4, #0
   1b89a:	d1af      	bne.n	1b7fc <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1b89c:	f1b8 0f00 	cmp.w	r8, #0
   1b8a0:	d11d      	bne.n	1b8de <nrfx_gpiote_irq_handler+0x14a>
   1b8a2:	f04f 0801 	mov.w	r8, #1
   1b8a6:	e7a3      	b.n	1b7f0 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1b8a8:	2b02      	cmp	r3, #2
   1b8aa:	d10c      	bne.n	1b8c6 <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1b8ac:	2103      	movs	r1, #3
   1b8ae:	4620      	mov	r0, r4
   1b8b0:	f009 fc56 	bl	25160 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1b8b4:	f005 0305 	and.w	r3, r5, #5
   1b8b8:	2b01      	cmp	r3, #1
   1b8ba:	d1e2      	bne.n	1b882 <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
   1b8bc:	4639      	mov	r1, r7
   1b8be:	4620      	mov	r0, r4
   1b8c0:	f7ff fc88 	bl	1b1d4 <call_handler>
   1b8c4:	e7dd      	b.n	1b882 <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1b8c6:	2102      	movs	r1, #2
   1b8c8:	4620      	mov	r0, r4
   1b8ca:	9301      	str	r3, [sp, #4]
   1b8cc:	f009 fc48 	bl	25160 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1b8d0:	2d03      	cmp	r5, #3
   1b8d2:	d0f3      	beq.n	1b8bc <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1b8d4:	9b01      	ldr	r3, [sp, #4]
   1b8d6:	2b03      	cmp	r3, #3
   1b8d8:	d1d3      	bne.n	1b882 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1b8da:	2d02      	cmp	r5, #2
   1b8dc:	e7ed      	b.n	1b8ba <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
   1b8de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b8e2:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   1b8e6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1b8ea:	4919      	ldr	r1, [pc, #100]	; (1b950 <nrfx_gpiote_irq_handler+0x1bc>)
   1b8ec:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1b8f0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1b8f2:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1b8f6:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1b8fa:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1b8fc:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1b8fe:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   1b902:	f47f af71 	bne.w	1b7e8 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1b906:	2401      	movs	r4, #1
    while (mask)
   1b908:	b916      	cbnz	r6, 1b910 <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1b90a:	b007      	add	sp, #28
   1b90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1b910:	fa96 f3a6 	rbit	r3, r6
   1b914:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1b918:	fa04 f203 	lsl.w	r2, r4, r3
   1b91c:	009b      	lsls	r3, r3, #2
   1b91e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b922:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1b926:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1b92a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1b92e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1b932:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1b936:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1b93a:	f7ff fc4b 	bl	1b1d4 <call_handler>
   1b93e:	e7e3      	b.n	1b908 <nrfx_gpiote_irq_handler+0x174>
   1b940:	40006100 	.word	0x40006100
   1b944:	40006000 	.word	0x40006000
   1b948:	40006120 	.word	0x40006120
   1b94c:	2000079c 	.word	0x2000079c
   1b950:	50000300 	.word	0x50000300

0001b954 <nrfx_nfct_init>:
{
    nrf_nfct_int_enable(NRF_NFCT, rxtx_int_mask & m_nfct_cb.config.rxtx_int_mask);
}

nrfx_err_t nrfx_nfct_init(nrfx_nfct_config_t const * p_config)
{
   1b954:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b956:	b085      	sub	sp, #20
    NRFX_ASSERT(p_config);
   1b958:	b950      	cbnz	r0, 1b970 <nrfx_nfct_init+0x1c>
   1b95a:	4926      	ldr	r1, [pc, #152]	; (1b9f4 <nrfx_nfct_init+0xa0>)
   1b95c:	4826      	ldr	r0, [pc, #152]	; (1b9f8 <nrfx_nfct_init+0xa4>)
   1b95e:	f240 12a9 	movw	r2, #425	; 0x1a9
   1b962:	f007 fb5c 	bl	2301e <assert_print>
   1b966:	4823      	ldr	r0, [pc, #140]	; (1b9f4 <nrfx_nfct_init+0xa0>)
   1b968:	f240 11a9 	movw	r1, #425	; 0x1a9
   1b96c:	f007 fb50 	bl	23010 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (m_nfct_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1b970:	4d22      	ldr	r5, [pc, #136]	; (1b9fc <nrfx_nfct_init+0xa8>)
   1b972:	7a2f      	ldrb	r7, [r5, #8]
   1b974:	2f00      	cmp	r7, #0
   1b976:	d13b      	bne.n	1b9f0 <nrfx_nfct_init+0x9c>
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    m_nfct_cb.config = *p_config;
   1b978:	c803      	ldmia	r0, {r0, r1}
}

NRF_STATIC_INLINE void nrf_nfct_frame_delay_mode_set(NRF_NFCT_Type *             p_reg,
                                                     nrf_nfct_frame_delay_mode_t frame_delay_mode)
{
    p_reg->FRAMEDELAYMODE = (uint32_t)frame_delay_mode;
   1b97a:	4a21      	ldr	r2, [pc, #132]	; (1ba00 <nrfx_nfct_init+0xac>)
    err_code = nrfx_timer_init(&m_timer_workaround.timer,
   1b97c:	4e21      	ldr	r6, [pc, #132]	; (1ba04 <nrfx_nfct_init+0xb0>)
    m_nfct_cb.config = *p_config;
   1b97e:	e9c5 0100 	strd	r0, r1, [r5]
   1b982:	2303      	movs	r3, #3
   1b984:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c

NRF_STATIC_INLINE
void nrf_nfct_sensres_bit_frame_sdd_set(NRF_NFCT_Type * p_reg,
                                        nrf_nfct_sensres_bit_frame_sdd_t bit_frame_sdd)
{
    p_reg->SENSRES = ((p_reg->SENSRES & ~(NFCT_SENSRES_BITFRAMESDD_Msk)) | (uint32_t)bit_frame_sdd);
   1b988:	f8d2 35a0 	ldr.w	r3, [r2, #1440]	; 0x5a0
   1b98c:	f023 031f 	bic.w	r3, r3, #31
   1b990:	f043 0304 	orr.w	r3, r3, #4
   1b994:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b998:	4b1b      	ldr	r3, [pc, #108]	; (1ba08 <nrfx_nfct_init+0xb4>)
   1b99a:	2220      	movs	r2, #32
   1b99c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    nrfx_nfct_hw_init_setup();

    NRFX_IRQ_PENDING_CLEAR(NFCT_IRQn);
    NRFX_IRQ_PRIORITY_SET(NFCT_IRQn, NRFX_NFCT_DEFAULT_CONFIG_IRQ_PRIORITY);
    NRFX_IRQ_ENABLE(NFCT_IRQn);
   1b9a0:	2005      	movs	r0, #5
   1b9a2:	f7f6 fe81 	bl	126a8 <arch_irq_enable>
    nrfx_timer_config_t timer_cfg =
   1b9a6:	4b19      	ldr	r3, [pc, #100]	; (1ba0c <nrfx_nfct_init+0xb8>)
    err_code = nrfx_timer_init(&m_timer_workaround.timer,
   1b9a8:	4a19      	ldr	r2, [pc, #100]	; (1ba10 <nrfx_nfct_init+0xbc>)
   1b9aa:	a902      	add	r1, sp, #8
   1b9ac:	4630      	mov	r0, r6
    nrfx_timer_config_t timer_cfg =
   1b9ae:	e9cd 3702 	strd	r3, r7, [sp, #8]
    err_code = nrfx_timer_init(&m_timer_workaround.timer,
   1b9b2:	f000 fb0d 	bl	1bfd0 <nrfx_timer_init>
    if (err_code != NRFX_SUCCESS)
   1b9b6:	4b17      	ldr	r3, [pc, #92]	; (1ba14 <nrfx_nfct_init+0xc0>)
   1b9b8:	4298      	cmp	r0, r3
    err_code = nrfx_timer_init(&m_timer_workaround.timer,
   1b9ba:	4604      	mov	r4, r0
    if (err_code != NRFX_SUCCESS)
   1b9bc:	d10d      	bne.n	1b9da <nrfx_nfct_init+0x86>
}

NRFX_STATIC_INLINE uint32_t nrfx_timer_us_to_ticks(nrfx_timer_t const * p_instance,
                                                   uint32_t             timer_us)
{
    return nrf_timer_us_to_ticks(timer_us, nrf_timer_frequency_get(p_instance->p_reg));
   1b9be:	6833      	ldr	r3, [r6, #0]
                              TIMER_PRESCALER_PRESCALER_Msk);
}

NRF_STATIC_INLINE nrf_timer_frequency_t nrf_timer_frequency_get(NRF_TIMER_Type const * p_reg)
{
    return (nrf_timer_frequency_t)(p_reg->PRESCALER);
   1b9c0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    nrfx_timer_extended_compare(&m_timer_workaround.timer,
   1b9c4:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
                                                 nrf_timer_frequency_t frequency)
{
    // The "frequency" parameter here is actually the prescaler value, and the
    // timer runs at the following frequency: f = 16 MHz / 2^prescaler.
    uint32_t prescaler = (uint32_t)frequency;
    uint64_t ticks = ((time_us * 16ULL) >> prescaler);
   1b9c8:	b2d2      	uxtb	r2, r2
   1b9ca:	2301      	movs	r3, #1
   1b9cc:	fa21 f202 	lsr.w	r2, r1, r2
   1b9d0:	9300      	str	r3, [sp, #0]
   1b9d2:	4639      	mov	r1, r7
   1b9d4:	4630      	mov	r0, r6
   1b9d6:	f009 fbea 	bl	251ae <nrfx_timer_extended_compare>
#if NRFX_CHECK(NFCT_WORKAROUND_USES_TIMER)
    /* Initialize Timer module as the workaround for NFCT HW issues. */
    err_code = nrfx_nfct_field_timer_config();
#endif // NRFX_CHECK(NFCT_WORKAROUND_USES_TIMER)

    m_nfct_cb.state           = NRFX_DRV_STATE_INITIALIZED;
   1b9da:	2301      	movs	r3, #1
   1b9dc:	722b      	strb	r3, [r5, #8]
    m_nfct_cb.frame_delay_max = NFCT_FRAMEDELAYMAX_DEFAULT;
    m_nfct_cb.frame_delay_min = NFCT_FRAMEDELAYMIN_DEFAULT;
   1b9de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b9e2:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1b9e6:	e9c5 2303 	strd	r2, r3, [r5, #12]

    NRFX_LOG_INFO("Initialized");
    return err_code;
}
   1b9ea:	4620      	mov	r0, r4
   1b9ec:	b005      	add	sp, #20
   1b9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
   1b9f0:	4c09      	ldr	r4, [pc, #36]	; (1ba18 <nrfx_nfct_init+0xc4>)
   1b9f2:	e7fa      	b.n	1b9ea <nrfx_nfct_init+0x96>
   1b9f4:	00028545 	.word	0x00028545
   1b9f8:	00026718 	.word	0x00026718
   1b9fc:	20002e9c 	.word	0x20002e9c
   1ba00:	40005000 	.word	0x40005000
   1ba04:	20000818 	.word	0x20000818
   1ba08:	e000e100 	.word	0xe000e100
   1ba0c:	07000004 	.word	0x07000004
   1ba10:	0001bb29 	.word	0x0001bb29
   1ba14:	0bad0000 	.word	0x0bad0000
   1ba18:	0bad0005 	.word	0x0bad0005

0001ba1c <nrfx_nfct_enable>:
    p_reg->ERRORSTATUS = error_flags;
   1ba1c:	4b05      	ldr	r3, [pc, #20]	; (1ba34 <nrfx_nfct_enable+0x18>)
   1ba1e:	2201      	movs	r2, #1
   1ba20:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 1UL;
   1ba24:	609a      	str	r2, [r3, #8]
    p_reg->INTENSET = mask;
   1ba26:	4a04      	ldr	r2, [pc, #16]	; (1ba38 <nrfx_nfct_enable+0x1c>)
   1ba28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1ba2c:	2204      	movs	r2, #4
   1ba2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if !NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_79)
    nrf_nfct_int_enable(NRF_NFCT, NRF_NFCT_INT_FIELDLOST_MASK);
#endif // !NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_79)

    NRFX_LOG_INFO("Start");
}
   1ba32:	4770      	bx	lr
   1ba34:	40005000 	.word	0x40005000
   1ba38:	00080082 	.word	0x00080082

0001ba3c <nrfx_nfct_field_check>:
    return (uint8_t)(p_reg->FIELDPRESENT);
   1ba3c:	4b03      	ldr	r3, [pc, #12]	; (1ba4c <nrfx_nfct_field_check+0x10>)
   1ba3e:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
        /* Field is not active */
        return false;
    }

    return true;
}
   1ba42:	f010 0003 	ands.w	r0, r0, #3
   1ba46:	bf18      	it	ne
   1ba48:	2001      	movne	r0, #1
   1ba4a:	4770      	bx	lr
   1ba4c:	40005000 	.word	0x40005000

0001ba50 <nrfx_nfct_field_event_handler>:
{
   1ba50:	b570      	push	{r4, r5, r6, lr}
    if(m_timer_workaround.fieldevents_filter_active)
   1ba52:	4a20      	ldr	r2, [pc, #128]	; (1bad4 <nrfx_nfct_field_event_handler+0x84>)
{
   1ba54:	b086      	sub	sp, #24
    if(m_timer_workaround.fieldevents_filter_active)
   1ba56:	7a13      	ldrb	r3, [r2, #8]
{
   1ba58:	f88d 0007 	strb.w	r0, [sp, #7]
    if(m_timer_workaround.fieldevents_filter_active)
   1ba5c:	bb23      	cbnz	r3, 1baa8 <nrfx_nfct_field_event_handler+0x58>
    if (field_state == NRFX_NFC_FIELD_STATE_UNKNOWN)
   1ba5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ba62:	2b03      	cmp	r3, #3
   1ba64:	d105      	bne.n	1ba72 <nrfx_nfct_field_event_handler+0x22>
        field_state = (nrfx_nfct_field_check()) ? NRFX_NFC_FIELD_STATE_ON :
   1ba66:	f7ff ffe9 	bl	1ba3c <nrfx_nfct_field_check>
   1ba6a:	3001      	adds	r0, #1
   1ba6c:	b2c0      	uxtb	r0, r0
   1ba6e:	f88d 0007 	strb.w	r0, [sp, #7]
    switch (field_state)
   1ba72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ba76:	2b01      	cmp	r3, #1
   1ba78:	b2dc      	uxtb	r4, r3
   1ba7a:	d017      	beq.n	1baac <nrfx_nfct_field_event_handler+0x5c>
   1ba7c:	2c02      	cmp	r4, #2
   1ba7e:	d113      	bne.n	1baa8 <nrfx_nfct_field_event_handler+0x58>
            if (!m_nfct_cb.field_on)
   1ba80:	4d15      	ldr	r5, [pc, #84]	; (1bad8 <nrfx_nfct_field_event_handler+0x88>)
   1ba82:	7a6b      	ldrb	r3, [r5, #9]
   1ba84:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   1ba88:	b973      	cbnz	r3, 1baa8 <nrfx_nfct_field_event_handler+0x58>
                m_timer_workaround.fieldevents_filter_active = true;
   1ba8a:	2601      	movs	r6, #1
                nrfx_timer_clear(&m_timer_workaround.timer);
   1ba8c:	4811      	ldr	r0, [pc, #68]	; (1bad4 <nrfx_nfct_field_event_handler+0x84>)
                m_timer_workaround.fieldevents_filter_active = true;
   1ba8e:	8116      	strh	r6, [r2, #8]
                m_timer_workaround.is_delayed                = false;
   1ba90:	7291      	strb	r1, [r2, #10]
                nrfx_timer_clear(&m_timer_workaround.timer);
   1ba92:	f000 fb67 	bl	1c164 <nrfx_timer_clear>
                nrfx_timer_enable(&m_timer_workaround.timer);
   1ba96:	480f      	ldr	r0, [pc, #60]	; (1bad4 <nrfx_nfct_field_event_handler+0x84>)
   1ba98:	f000 fb24 	bl	1c0e4 <nrfx_timer_enable>
                NRFX_NFCT_CB_HANDLE(m_nfct_cb.config.cb, nfct_evt);
   1ba9c:	686b      	ldr	r3, [r5, #4]
                m_nfct_cb.field_on = true;
   1ba9e:	726e      	strb	r6, [r5, #9]
                nfct_evt.evt_id    = NRFX_NFCT_EVT_FIELD_DETECTED;
   1baa0:	9402      	str	r4, [sp, #8]
                NRFX_NFCT_CB_HANDLE(m_nfct_cb.config.cb, nfct_evt);
   1baa2:	b10b      	cbz	r3, 1baa8 <nrfx_nfct_field_event_handler+0x58>
   1baa4:	a802      	add	r0, sp, #8
   1baa6:	4798      	blx	r3
}
   1baa8:	b006      	add	sp, #24
   1baaa:	bd70      	pop	{r4, r5, r6, pc}
            if (m_nfct_cb.field_on)
   1baac:	4b0a      	ldr	r3, [pc, #40]	; (1bad8 <nrfx_nfct_field_event_handler+0x88>)
   1baae:	7a5a      	ldrb	r2, [r3, #9]
   1bab0:	2a00      	cmp	r2, #0
   1bab2:	d0f9      	beq.n	1baa8 <nrfx_nfct_field_event_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 1UL;
   1bab4:	4a09      	ldr	r2, [pc, #36]	; (1badc <nrfx_nfct_field_event_handler+0x8c>)
    p_reg->INTENCLR = mask;
   1bab6:	f44f 618f 	mov.w	r1, #1144	; 0x478
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 1UL;
   1baba:	6094      	str	r4, [r2, #8]
    p_reg->INTENCLR = mask;
   1babc:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
                m_nfct_cb.field_on = false;
   1bac0:	2100      	movs	r1, #0
   1bac2:	7259      	strb	r1, [r3, #9]
                nfct_evt.evt_id    = NRFX_NFCT_EVT_FIELD_LOST;
   1bac4:	2104      	movs	r1, #4
   1bac6:	9102      	str	r1, [sp, #8]
    p_reg->FRAMEDELAYMAX =
   1bac8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1bacc:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
                NRFX_NFCT_CB_HANDLE(m_nfct_cb.config.cb, nfct_evt);
   1bad0:	685b      	ldr	r3, [r3, #4]
   1bad2:	e7e6      	b.n	1baa2 <nrfx_nfct_field_event_handler+0x52>
   1bad4:	20000818 	.word	0x20000818
   1bad8:	20002e9c 	.word	0x20002e9c
   1badc:	40005000 	.word	0x40005000

0001bae0 <nrfx_nfct_activate_check>:
{
   1bae0:	b510      	push	{r4, lr}
    if (is_field_validation_pending)
   1bae2:	4b0e      	ldr	r3, [pc, #56]	; (1bb1c <nrfx_nfct_activate_check+0x3c>)
   1bae4:	4c0e      	ldr	r4, [pc, #56]	; (1bb20 <nrfx_nfct_activate_check+0x40>)
   1bae6:	781a      	ldrb	r2, [r3, #0]
   1bae8:	b13a      	cbz	r2, 1bafa <nrfx_nfct_activate_check+0x1a>
        is_field_validation_pending                  = false;
   1baea:	2200      	movs	r2, #0
   1baec:	701a      	strb	r2, [r3, #0]
        m_timer_workaround.fieldevents_filter_active = false;
   1baee:	7222      	strb	r2, [r4, #8]
}
   1baf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_nfct_field_event_handler(NRFX_NFC_FIELD_STATE_UNKNOWN);
   1baf4:	2003      	movs	r0, #3
   1baf6:	f7ff bfab 	b.w	1ba50 <nrfx_nfct_field_event_handler>
    if ((m_timer_workaround.is_hfclk_on) && (m_timer_workaround.is_delayed))
   1bafa:	7a62      	ldrb	r2, [r4, #9]
   1bafc:	b16a      	cbz	r2, 1bb1a <nrfx_nfct_activate_check+0x3a>
   1bafe:	7aa2      	ldrb	r2, [r4, #10]
   1bb00:	b15a      	cbz	r2, 1bb1a <nrfx_nfct_activate_check+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 1UL;
   1bb02:	4908      	ldr	r1, [pc, #32]	; (1bb24 <nrfx_nfct_activate_check+0x44>)
   1bb04:	2201      	movs	r2, #1
        nrfx_timer_clear(&m_timer_workaround.timer);
   1bb06:	4620      	mov	r0, r4
   1bb08:	600a      	str	r2, [r1, #0]
        is_field_validation_pending = true;
   1bb0a:	701a      	strb	r2, [r3, #0]
        nrfx_timer_clear(&m_timer_workaround.timer);
   1bb0c:	f000 fb2a 	bl	1c164 <nrfx_timer_clear>
        nrfx_timer_enable(&m_timer_workaround.timer);
   1bb10:	4620      	mov	r0, r4
}
   1bb12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_timer_enable(&m_timer_workaround.timer);
   1bb16:	f000 bae5 	b.w	1c0e4 <nrfx_timer_enable>
}
   1bb1a:	bd10      	pop	{r4, pc}
   1bb1c:	200054a6 	.word	0x200054a6
   1bb20:	20000818 	.word	0x20000818
   1bb24:	40005000 	.word	0x40005000

0001bb28 <nrfx_nfct_field_timer_handler>:
    if (event_type != NRF_TIMER_EVENT_COMPARE0)
   1bb28:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
{
   1bb2c:	b508      	push	{r3, lr}
    if (event_type != NRF_TIMER_EVENT_COMPARE0)
   1bb2e:	d108      	bne.n	1bb42 <nrfx_nfct_field_timer_handler+0x1a>
    m_timer_workaround.is_delayed = true;
   1bb30:	4804      	ldr	r0, [pc, #16]	; (1bb44 <nrfx_nfct_field_timer_handler+0x1c>)
   1bb32:	2301      	movs	r3, #1
   1bb34:	7283      	strb	r3, [r0, #10]
    nrfx_timer_disable(&m_timer_workaround.timer);
   1bb36:	f000 faf5 	bl	1c124 <nrfx_timer_disable>
}
   1bb3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_nfct_activate_check();
   1bb3e:	f7ff bfcf 	b.w	1bae0 <nrfx_nfct_activate_check>
}
   1bb42:	bd08      	pop	{r3, pc}
   1bb44:	20000818 	.word	0x20000818

0001bb48 <nrfx_nfct_rx>:

void nrfx_nfct_rx(nrfx_nfct_data_desc_t const * p_tx_data)
{
   1bb48:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_tx_data);
   1bb4a:	b950      	cbnz	r0, 1bb62 <nrfx_nfct_rx+0x1a>
   1bb4c:	490e      	ldr	r1, [pc, #56]	; (1bb88 <nrfx_nfct_rx+0x40>)
   1bb4e:	480f      	ldr	r0, [pc, #60]	; (1bb8c <nrfx_nfct_rx+0x44>)
   1bb50:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
   1bb54:	f007 fa63 	bl	2301e <assert_print>
   1bb58:	480b      	ldr	r0, [pc, #44]	; (1bb88 <nrfx_nfct_rx+0x40>)
   1bb5a:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   1bb5e:	f007 fa57 	bl	23010 <assert_post_action>

    nrf_nfct_rxtx_buffer_set(NRF_NFCT, (uint8_t *) p_tx_data->p_data, p_tx_data->data_size);
   1bb62:	8802      	ldrh	r2, [r0, #0]
    p_reg->PACKETPTR = (uint32_t)p_rxtx_buf;
   1bb64:	4b0a      	ldr	r3, [pc, #40]	; (1bb90 <nrfx_nfct_rx+0x48>)
   1bb66:	6841      	ldr	r1, [r0, #4]
   1bb68:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->MAXLEN    = ((uint32_t)max_txrx_len << NFCT_MAXLEN_MAXLEN_Pos) & NFCT_MAXLEN_MAXLEN_Msk;
   1bb6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
   1bb70:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    nrf_nfct_int_enable(NRF_NFCT, rxtx_int_mask & m_nfct_cb.config.rxtx_int_mask);
   1bb74:	4a07      	ldr	r2, [pc, #28]	; (1bb94 <nrfx_nfct_rx+0x4c>)
   1bb76:	6812      	ldr	r2, [r2, #0]
   1bb78:	f402 628c 	and.w	r2, r2, #1120	; 0x460
    p_reg->INTENSET = mask;
   1bb7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 1UL;
   1bb80:	2201      	movs	r2, #1
   1bb82:	61da      	str	r2, [r3, #28]

    nrfx_nfct_rxtx_int_enable(NRFX_NFCT_RX_INT_MASK);
    nrf_nfct_task_trigger(NRF_NFCT, NRF_NFCT_TASK_ENABLERXDATA);
}
   1bb84:	bd08      	pop	{r3, pc}
   1bb86:	bf00      	nop
   1bb88:	00028545 	.word	0x00028545
   1bb8c:	00026718 	.word	0x00026718
   1bb90:	40005000 	.word	0x40005000
   1bb94:	20002e9c 	.word	0x20002e9c

0001bb98 <nrfx_nfct_tx>:

nrfx_err_t nrfx_nfct_tx(nrfx_nfct_data_desc_t const * p_tx_data,
                        nrf_nfct_frame_delay_mode_t   delay_mode)
{
   1bb98:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_tx_data);
   1bb9a:	b950      	cbnz	r0, 1bbb2 <nrfx_nfct_tx+0x1a>
   1bb9c:	4928      	ldr	r1, [pc, #160]	; (1bc40 <nrfx_nfct_tx+0xa8>)
   1bb9e:	4829      	ldr	r0, [pc, #164]	; (1bc44 <nrfx_nfct_tx+0xac>)
   1bba0:	f240 2207 	movw	r2, #519	; 0x207
   1bba4:	f007 fa3b 	bl	2301e <assert_print>
   1bba8:	f240 2107 	movw	r1, #519	; 0x207
    NRFX_ASSERT(p_tx_data->p_data);
   1bbac:	4824      	ldr	r0, [pc, #144]	; (1bc40 <nrfx_nfct_tx+0xa8>)
   1bbae:	f007 fa2f 	bl	23010 <assert_post_action>
   1bbb2:	6843      	ldr	r3, [r0, #4]
   1bbb4:	b943      	cbnz	r3, 1bbc8 <nrfx_nfct_tx+0x30>
   1bbb6:	4922      	ldr	r1, [pc, #136]	; (1bc40 <nrfx_nfct_tx+0xa8>)
   1bbb8:	4822      	ldr	r0, [pc, #136]	; (1bc44 <nrfx_nfct_tx+0xac>)
   1bbba:	f44f 7202 	mov.w	r2, #520	; 0x208
   1bbbe:	f007 fa2e 	bl	2301e <assert_print>
   1bbc2:	f44f 7102 	mov.w	r1, #520	; 0x208
   1bbc6:	e7f1      	b.n	1bbac <nrfx_nfct_tx+0x14>

    nrfx_err_t err = NRFX_SUCCESS;

    if (p_tx_data->data_size == 0)
   1bbc8:	6803      	ldr	r3, [r0, #0]
   1bbca:	2b00      	cmp	r3, #0
   1bbcc:	d036      	beq.n	1bc3c <nrfx_nfct_tx+0xa4>
	__asm__ volatile(
   1bbce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bbd2:	f3ef 8411 	mrs	r4, BASEPRI
   1bbd6:	f383 8812 	msr	BASEPRI_MAX, r3
   1bbda:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile const uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bbde:	4b1a      	ldr	r3, [pc, #104]	; (1bc48 <nrfx_nfct_tx+0xb0>)
   1bbe0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    }

    NRFX_CRITICAL_SECTION_ENTER();

    /* In case when NFC frame transmission has already started, it returns an error. */
    if (NRFX_NFCT_EVT_ACTIVE(TXFRAMESTART))
   1bbe4:	b11a      	cbz	r2, 1bbee <nrfx_nfct_tx+0x56>
    return p_reg->INTENSET & mask;
   1bbe6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   1bbea:	0712      	lsls	r2, r2, #28
   1bbec:	d424      	bmi.n	1bc38 <nrfx_nfct_tx+0xa0>
    }
    else
    {
        /* In case when Tx operation was scheduled with delay, stop scheduled Tx operation. */
#if defined(NRF52_SERIES)
        *(volatile uint32_t *)0x40005010 = 0x01;
   1bbee:	2501      	movs	r5, #1
   1bbf0:	611d      	str	r5, [r3, #16]
#elif defined(NRF5340_XXAA_APPLICATION) && defined(NRF_TRUSTZONE_NONSECURE)
        *(volatile uint32_t *)0x4002D010 = 0x01;
#elif defined(NRF5340_XXAA_APPLICATION)
        *(volatile uint32_t *)0x5002D010 = 0x01;
#endif
        nrf_nfct_rxtx_buffer_set(NRF_NFCT, (uint8_t *) p_tx_data->p_data, p_tx_data->data_size);
   1bbf2:	8802      	ldrh	r2, [r0, #0]
    p_reg->PACKETPTR = (uint32_t)p_rxtx_buf;
   1bbf4:	6846      	ldr	r6, [r0, #4]
   1bbf6:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    p_reg->MAXLEN    = ((uint32_t)max_txrx_len << NFCT_MAXLEN_MAXLEN_Pos) & NFCT_MAXLEN_MAXLEN_Msk;
   1bbfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
   1bbfe:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
        nrf_nfct_tx_bits_set(NRF_NFCT, NRFX_NFCT_BYTES_TO_BITS(p_tx_data->data_size));
   1bc02:	6802      	ldr	r2, [r0, #0]
    nrfx_err_t err = NRFX_SUCCESS;
   1bc04:	4811      	ldr	r0, [pc, #68]	; (1bc4c <nrfx_nfct_tx+0xb4>)
        nrf_nfct_tx_bits_set(NRF_NFCT, NRFX_NFCT_BYTES_TO_BITS(p_tx_data->data_size));
   1bc06:	00d2      	lsls	r2, r2, #3
    p_reg->TXD.AMOUNT = (tx_bits & (NFCT_TXD_AMOUNT_TXDATABITS_Msk |
   1bc08:	f3c2 020b 	ubfx	r2, r2, #0, #12
   1bc0c:	b292      	uxth	r2, r2
   1bc0e:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->FRAMEDELAYMODE = (uint32_t)frame_delay_mode;
   1bc12:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
        nrf_nfct_frame_delay_max_set(NRF_NFCT, m_nfct_cb.frame_delay_max);
   1bc16:	490e      	ldr	r1, [pc, #56]	; (1bc50 <nrfx_nfct_tx+0xb8>)
        ((uint32_t)frame_delay_max << NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos) &
   1bc18:	68ca      	ldr	r2, [r1, #12]
   1bc1a:	f3c2 0213 	ubfx	r2, r2, #0, #20
    p_reg->FRAMEDELAYMAX =
   1bc1e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_nfct_int_enable(NRF_NFCT, rxtx_int_mask & m_nfct_cb.config.rxtx_int_mask);
   1bc22:	680a      	ldr	r2, [r1, #0]
   1bc24:	f002 0218 	and.w	r2, r2, #24
    p_reg->INTENSET = mask;
   1bc28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 1UL;
   1bc2c:	60dd      	str	r5, [r3, #12]
	__asm__ volatile(
   1bc2e:	f384 8811 	msr	BASEPRI, r4
   1bc32:	f3bf 8f6f 	isb	sy
    {
        NRFX_LOG_INFO("Tx start");
    }

    return err;
}
   1bc36:	bd70      	pop	{r4, r5, r6, pc}
        err = NRFX_ERROR_BUSY;
   1bc38:	4806      	ldr	r0, [pc, #24]	; (1bc54 <nrfx_nfct_tx+0xbc>)
   1bc3a:	e7f8      	b.n	1bc2e <nrfx_nfct_tx+0x96>
        return NRFX_ERROR_INVALID_LENGTH;
   1bc3c:	4806      	ldr	r0, [pc, #24]	; (1bc58 <nrfx_nfct_tx+0xc0>)
   1bc3e:	e7fa      	b.n	1bc36 <nrfx_nfct_tx+0x9e>
   1bc40:	00028545 	.word	0x00028545
   1bc44:	00026718 	.word	0x00026718
   1bc48:	40005000 	.word	0x40005000
   1bc4c:	0bad0000 	.word	0x0bad0000
   1bc50:	20002e9c 	.word	0x20002e9c
   1bc54:	0bad000b 	.word	0x0bad000b
   1bc58:	0bad0006 	.word	0x0bad0006

0001bc5c <nrfx_nfct_state_force>:
}

void nrfx_nfct_state_force(nrfx_nfct_state_t state)
{
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_190)
    if (state == NRFX_NFCT_STATE_ACTIVATED)
   1bc5c:	2301      	movs	r3, #1
   1bc5e:	b918      	cbnz	r0, 1bc68 <nrfx_nfct_state_force+0xc>
    {
        m_timer_workaround.is_hfclk_on = true;
   1bc60:	4a04      	ldr	r2, [pc, #16]	; (1bc74 <nrfx_nfct_state_force+0x18>)
   1bc62:	7253      	strb	r3, [r2, #9]
        /* NFCT will be activated based on additional conditions */
        nrfx_nfct_activate_check();
   1bc64:	f7ff bf3c 	b.w	1bae0 <nrfx_nfct_activate_check>
   1bc68:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1bc6c:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
   1bc70:	6003      	str	r3, [r0, #0]
        return;
    }
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_190)
    nrf_nfct_task_trigger(NRF_NFCT, (nrf_nfct_task_t) state);
}
   1bc72:	4770      	bx	lr
   1bc74:	20000818 	.word	0x20000818

0001bc78 <nrfx_nfct_init_substate_force>:

void nrfx_nfct_init_substate_force(nrfx_nfct_active_state_t sub_state)
{
    if (sub_state == NRFX_NFCT_ACTIVE_STATE_DEFAULT)
   1bc78:	2829      	cmp	r0, #41	; 0x29
   1bc7a:	d113      	bne.n	1bca4 <nrfx_nfct_init_substate_force+0x2c>
    return (nrf_nfct_sleep_state_t)((p_reg->SLEEPSTATE & NFCT_SLEEPSTATE_SLEEPSTATE_Msk) >>
   1bc7c:	4b0d      	ldr	r3, [pc, #52]	; (1bcb4 <nrfx_nfct_init_substate_force+0x3c>)
   1bc7e:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
    {
#if defined(NRF52832_XXAA) || defined(NRF52832_XXAB)
        if (((*(uint32_t volatile *)(0x40005420)) & 0x1UL) == (1UL))
#else
        if (nrf_nfct_sleep_state_get(NRF_NFCT) == NRF_NFCT_SLEEP_STATE_SLEEP_A)
   1bc82:	f012 0f01 	tst.w	r2, #1
   1bc86:	f04f 0201 	mov.w	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 1UL;
   1bc8a:	bf14      	ite	ne
   1bc8c:	629a      	strne	r2, [r3, #40]	; 0x28
   1bc8e:	625a      	streq	r2, [r3, #36]	; 0x24
    p_reg->FRAMEDELAYMAX =
   1bc90:	4b08      	ldr	r3, [pc, #32]	; (1bcb4 <nrfx_nfct_init_substate_force+0x3c>)
   1bc92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1bc96:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->INTENCLR = mask;
   1bc9a:	f44f 628f 	mov.w	r2, #1144	; 0x478
   1bc9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    nrfx_nfct_frame_delay_max_set(true);

    /* Disable TX/RX here (will be enabled at SELECTED) */
    nrf_nfct_int_disable(NRF_NFCT, NRFX_NFCT_RX_INT_MASK | NRFX_NFCT_TX_INT_MASK);
}
   1bca2:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 1UL;
   1bca4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1bca8:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
   1bcac:	2301      	movs	r3, #1
   1bcae:	6003      	str	r3, [r0, #0]
}
   1bcb0:	e7ee      	b.n	1bc90 <nrfx_nfct_init_substate_force+0x18>
   1bcb2:	bf00      	nop
   1bcb4:	40005000 	.word	0x40005000

0001bcb8 <nrfx_nfct_parameter_set>:

nrfx_err_t nrfx_nfct_parameter_set(nrfx_nfct_param_t const * p_param)
{
   1bcb8:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_param);
   1bcba:	b950      	cbnz	r0, 1bcd2 <nrfx_nfct_parameter_set+0x1a>
   1bcbc:	4934      	ldr	r1, [pc, #208]	; (1bd90 <nrfx_nfct_parameter_set+0xd8>)
   1bcbe:	4835      	ldr	r0, [pc, #212]	; (1bd94 <nrfx_nfct_parameter_set+0xdc>)
   1bcc0:	f240 229b 	movw	r2, #667	; 0x29b
   1bcc4:	f007 f9ab 	bl	2301e <assert_print>
   1bcc8:	4831      	ldr	r0, [pc, #196]	; (1bd90 <nrfx_nfct_parameter_set+0xd8>)
   1bcca:	f240 219b 	movw	r1, #667	; 0x29b
   1bcce:	f007 f99f 	bl	23010 <assert_post_action>

    switch (p_param->id)
   1bcd2:	7803      	ldrb	r3, [r0, #0]
   1bcd4:	2b03      	cmp	r3, #3
   1bcd6:	d80d      	bhi.n	1bcf4 <nrfx_nfct_parameter_set+0x3c>
   1bcd8:	e8df f003 	tbb	[pc, r3]
   1bcdc:	2a1d0e02 	.word	0x2a1d0e02
        {
            uint32_t delay     = p_param->data.fdt;
            uint32_t delay_thr = NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Msk;
            uint32_t delay_max;

            delay_max = (delay > delay_thr) ? delay_thr : delay;
   1bce0:	6843      	ldr	r3, [r0, #4]
   1bce2:	4a2d      	ldr	r2, [pc, #180]	; (1bd98 <nrfx_nfct_parameter_set+0xe0>)
   1bce4:	4293      	cmp	r3, r2
   1bce6:	bf28      	it	cs
   1bce8:	4613      	movcs	r3, r2
            if (delay_max < m_nfct_cb.frame_delay_min)
   1bcea:	4a2c      	ldr	r2, [pc, #176]	; (1bd9c <nrfx_nfct_parameter_set+0xe4>)
   1bcec:	6911      	ldr	r1, [r2, #16]
   1bcee:	4299      	cmp	r1, r3
   1bcf0:	d84c      	bhi.n	1bd8c <nrfx_nfct_parameter_set+0xd4>
            {
                return NRFX_ERROR_INVALID_PARAM;
            }

            m_nfct_cb.frame_delay_max = delay_max;
   1bcf2:	60d3      	str	r3, [r2, #12]
    switch (nfcid1_size)
   1bcf4:	482a      	ldr	r0, [pc, #168]	; (1bda0 <nrfx_nfct_parameter_set+0xe8>)
        default:
            break;
    }

    return NRFX_SUCCESS;
}
   1bcf6:	bd08      	pop	{r3, pc}
            delay_min = (delay > delay_thr) ? delay_thr : delay;
   1bcf8:	6843      	ldr	r3, [r0, #4]
   1bcfa:	4a27      	ldr	r2, [pc, #156]	; (1bd98 <nrfx_nfct_parameter_set+0xe0>)
   1bcfc:	4293      	cmp	r3, r2
   1bcfe:	bf28      	it	cs
   1bd00:	4613      	movcs	r3, r2
            if (delay_min > m_nfct_cb.frame_delay_max)
   1bd02:	4a26      	ldr	r2, [pc, #152]	; (1bd9c <nrfx_nfct_parameter_set+0xe4>)
   1bd04:	68d1      	ldr	r1, [r2, #12]
   1bd06:	4299      	cmp	r1, r3
   1bd08:	d340      	bcc.n	1bd8c <nrfx_nfct_parameter_set+0xd4>
            m_nfct_cb.frame_delay_min = delay_min;
   1bd0a:	6113      	str	r3, [r2, #16]
    p_reg->FRAMEDELAYMIN =
   1bd0c:	4a25      	ldr	r2, [pc, #148]	; (1bda4 <nrfx_nfct_parameter_set+0xec>)
   1bd0e:	b29b      	uxth	r3, r3
   1bd10:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1bd14:	e7ee      	b.n	1bcf4 <nrfx_nfct_parameter_set+0x3c>
            if (p_param->data.sel_res_protocol > NRF_NFCT_SELRES_PROTOCOL_NFCDEP_T4AT)
   1bd16:	7901      	ldrb	r1, [r0, #4]
   1bd18:	2903      	cmp	r1, #3
   1bd1a:	d837      	bhi.n	1bd8c <nrfx_nfct_parameter_set+0xd4>
}

NRF_STATIC_INLINE void nrf_nfct_selres_protocol_set(NRF_NFCT_Type *            p_reg,
                                                    nrf_nfct_selres_protocol_t sel_res_protocol)
{
    p_reg->SELRES = (p_reg->SELRES & ~NFCT_SELRES_PROTOCOL_Msk) |
   1bd1c:	4a21      	ldr	r2, [pc, #132]	; (1bda4 <nrfx_nfct_parameter_set+0xec>)
   1bd1e:	f8d2 35a4 	ldr.w	r3, [r2, #1444]	; 0x5a4
   1bd22:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1bd26:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1bd2a:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
                    ((uint32_t)sel_res_protocol << NFCT_SELRES_PROTOCOL_Pos);
}
   1bd2e:	e7e1      	b.n	1bcf4 <nrfx_nfct_parameter_set+0x3c>
            id_size_mask = nrf_nfct_nfcid1_size_to_sensres_size(p_param->data.nfcid1.id_size);
   1bd30:	7a02      	ldrb	r2, [r0, #8]
            uint32_t delay     = p_param->data.fdt;
   1bd32:	6843      	ldr	r3, [r0, #4]
    switch (nfcid1_size)
   1bd34:	2a04      	cmp	r2, #4
   1bd36:	d027      	beq.n	1bd88 <nrfx_nfct_parameter_set+0xd0>
   1bd38:	2a0a      	cmp	r2, #10
   1bd3a:	d123      	bne.n	1bd84 <nrfx_nfct_parameter_set+0xcc>
                                        ((uint32_t)p_nfcid1_buf[1] << 8UL)  |
   1bd3c:	785a      	ldrb	r2, [r3, #1]
            p_reg->NFCID1_3RD_LAST = ((uint32_t)p_nfcid1_buf[0] << 16UL) |
   1bd3e:	7819      	ldrb	r1, [r3, #0]
                                        ((uint32_t)p_nfcid1_buf[1] << 8UL)  |
   1bd40:	0212      	lsls	r2, r2, #8
            p_reg->NFCID1_3RD_LAST = ((uint32_t)p_nfcid1_buf[0] << 16UL) |
   1bd42:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                                        ((uint32_t)p_nfcid1_buf[2] << 0UL);
   1bd46:	7899      	ldrb	r1, [r3, #2]
                                        ((uint32_t)p_nfcid1_buf[1] << 8UL)  |
   1bd48:	430a      	orrs	r2, r1
            p_reg->NFCID1_3RD_LAST = ((uint32_t)p_nfcid1_buf[0] << 16UL) |
   1bd4a:	4916      	ldr	r1, [pc, #88]	; (1bda4 <nrfx_nfct_parameter_set+0xec>)
            p_nfcid1_buf += 3UL;
   1bd4c:	3303      	adds	r3, #3
            p_reg->NFCID1_3RD_LAST = ((uint32_t)p_nfcid1_buf[0] << 16UL) |
   1bd4e:	f8c1 2598 	str.w	r2, [r1, #1432]	; 0x598
            p_nfcid1_buf += 3UL;
   1bd52:	2180      	movs	r1, #128	; 0x80
                                    ((uint32_t)p_nfcid1_buf[1] << 8UL)  |
   1bd54:	785a      	ldrb	r2, [r3, #1]
        p_reg->NFCID1_2ND_LAST = ((uint32_t)p_nfcid1_buf[0] << 16UL) |
   1bd56:	7818      	ldrb	r0, [r3, #0]
                                    ((uint32_t)p_nfcid1_buf[1] << 8UL)  |
   1bd58:	0212      	lsls	r2, r2, #8
        p_reg->NFCID1_2ND_LAST = ((uint32_t)p_nfcid1_buf[0] << 16UL) |
   1bd5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
                                    ((uint32_t)p_nfcid1_buf[2] << 0UL);
   1bd5e:	7898      	ldrb	r0, [r3, #2]
                                    ((uint32_t)p_nfcid1_buf[1] << 8UL)  |
   1bd60:	4302      	orrs	r2, r0
        p_reg->NFCID1_2ND_LAST = ((uint32_t)p_nfcid1_buf[0] << 16UL) |
   1bd62:	4810      	ldr	r0, [pc, #64]	; (1bda4 <nrfx_nfct_parameter_set+0xec>)
        p_nfcid1_buf += 3UL;
   1bd64:	3303      	adds	r3, #3
        p_reg->NFCID1_2ND_LAST = ((uint32_t)p_nfcid1_buf[0] << 16UL) |
   1bd66:	f8c0 2594 	str.w	r2, [r0, #1428]	; 0x594
    p_reg->NFCID1_LAST = ((uint32_t)p_nfcid1_buf[0] << 24UL) |
   1bd6a:	681b      	ldr	r3, [r3, #0]
   1bd6c:	4a0d      	ldr	r2, [pc, #52]	; (1bda4 <nrfx_nfct_parameter_set+0xec>)
   1bd6e:	ba1b      	rev	r3, r3
   1bd70:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
    p_reg->SENSRES = ((p_reg->SENSRES & ~NFCT_SENSRES_NFCIDSIZE_Msk) |
   1bd74:	f8d2 35a0 	ldr.w	r3, [r2, #1440]	; 0x5a0
   1bd78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   1bd7c:	430b      	orrs	r3, r1
   1bd7e:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
}
   1bd82:	e7b7      	b.n	1bcf4 <nrfx_nfct_parameter_set+0x3c>
   1bd84:	2140      	movs	r1, #64	; 0x40
   1bd86:	e7e5      	b.n	1bd54 <nrfx_nfct_parameter_set+0x9c>
   1bd88:	2100      	movs	r1, #0
   1bd8a:	e7ee      	b.n	1bd6a <nrfx_nfct_parameter_set+0xb2>
                return NRFX_ERROR_INVALID_PARAM;
   1bd8c:	4806      	ldr	r0, [pc, #24]	; (1bda8 <nrfx_nfct_parameter_set+0xf0>)
   1bd8e:	e7b2      	b.n	1bcf6 <nrfx_nfct_parameter_set+0x3e>
   1bd90:	00028545 	.word	0x00028545
   1bd94:	00026718 	.word	0x00026718
   1bd98:	000fffff 	.word	0x000fffff
   1bd9c:	20002e9c 	.word	0x20002e9c
   1bda0:	0bad0000 	.word	0x0bad0000
   1bda4:	40005000 	.word	0x40005000
   1bda8:	0bad0004 	.word	0x0bad0004

0001bdac <nrfx_nfct_irq_handler>:
    nrf_nfct_autocolres_disable(NRF_NFCT);
#endif //defined(NRF52832_XXAA) || defined(NRF52832_XXAB)
}

void nrfx_nfct_irq_handler(void)
{
   1bdac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (bool)*(volatile const uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bdae:	4b83      	ldr	r3, [pc, #524]	; (1bfbc <nrfx_nfct_irq_handler+0x210>)
   1bdb0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    nrfx_nfct_field_state_t current_field = NRFX_NFC_FIELD_STATE_NONE;

    if (NRFX_NFCT_EVT_ACTIVE(FIELDDETECTED))
   1bdb4:	b962      	cbnz	r2, 1bdd0 <nrfx_nfct_irq_handler+0x24>
   1bdb6:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108

        NRFX_LOG_DEBUG("Field detected");
    }

#if !NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_79)
    if (NRFX_NFCT_EVT_ACTIVE(FIELDLOST))
   1bdba:	b321      	cbz	r1, 1be06 <nrfx_nfct_irq_handler+0x5a>
    return p_reg->INTENSET & mask;
   1bdbc:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
   1bdc0:	0749      	lsls	r1, r1, #29
   1bdc2:	d520      	bpl.n	1be06 <nrfx_nfct_irq_handler+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0UL;
   1bdc4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1bdc8:	f3bf 8f4f 	dsb	sy
    {
        nrf_nfct_event_clear(NRF_NFCT, NRF_NFCT_EVENT_FIELDLOST);
        current_field = (current_field == NRFX_NFC_FIELD_STATE_NONE) ?
                        NRFX_NFC_FIELD_STATE_OFF : NRFX_NFC_FIELD_STATE_UNKNOWN;
   1bdcc:	2001      	movs	r0, #1
   1bdce:	e018      	b.n	1be02 <nrfx_nfct_irq_handler+0x56>
    return p_reg->INTENSET & mask;
   1bdd0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    if (NRFX_NFCT_EVT_ACTIVE(FIELDDETECTED))
   1bdd4:	f012 0202 	ands.w	r2, r2, #2
   1bdd8:	d0ed      	beq.n	1bdb6 <nrfx_nfct_irq_handler+0xa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0UL;
   1bdda:	2200      	movs	r2, #0
   1bddc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1bde0:	f3bf 8f4f 	dsb	sy
    return (bool)*(volatile const uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bde4:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
    if (NRFX_NFCT_EVT_ACTIVE(FIELDLOST))
   1bde8:	2900      	cmp	r1, #0
   1bdea:	f000 80e5 	beq.w	1bfb8 <nrfx_nfct_irq_handler+0x20c>
    return p_reg->INTENSET & mask;
   1bdee:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
   1bdf2:	0748      	lsls	r0, r1, #29
   1bdf4:	f140 80e0 	bpl.w	1bfb8 <nrfx_nfct_irq_handler+0x20c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0UL;
   1bdf8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1bdfc:	f3bf 8f4f 	dsb	sy
                        NRFX_NFC_FIELD_STATE_OFF : NRFX_NFC_FIELD_STATE_UNKNOWN;
   1be00:	2003      	movs	r0, #3
#endif //!NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_79)

    /* Perform actions if any FIELD event is active */
    if (current_field != NRFX_NFC_FIELD_STATE_NONE)
    {
        nrfx_nfct_field_event_handler(current_field);
   1be02:	f7ff fe25 	bl	1ba50 <nrfx_nfct_field_event_handler>
    return (bool)*(volatile const uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1be06:	4a6d      	ldr	r2, [pc, #436]	; (1bfbc <nrfx_nfct_irq_handler+0x210>)
   1be08:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
    }

    if (NRFX_NFCT_EVT_ACTIVE(RXFRAMESTART))
   1be0c:	b193      	cbz	r3, 1be34 <nrfx_nfct_irq_handler+0x88>
    return p_reg->INTENSET & mask;
   1be0e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   1be12:	0699      	lsls	r1, r3, #26
   1be14:	d50e      	bpl.n	1be34 <nrfx_nfct_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0UL;
   1be16:	2300      	movs	r3, #0
   1be18:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
   1be1c:	f3bf 8f4f 	dsb	sy
    {
        nrf_nfct_event_clear(NRF_NFCT, NRF_NFCT_EVENT_RXFRAMESTART);

        nrfx_nfct_evt_t nfct_evt =
   1be20:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1be24:	9303      	str	r3, [sp, #12]
   1be26:	2320      	movs	r3, #32
   1be28:	9300      	str	r3, [sp, #0]
        {
            .evt_id = NRFX_NFCT_EVT_RX_FRAMESTART
        };

        NRFX_NFCT_CB_HANDLE(m_nfct_cb.config.cb, nfct_evt);
   1be2a:	4b65      	ldr	r3, [pc, #404]	; (1bfc0 <nrfx_nfct_irq_handler+0x214>)
   1be2c:	685b      	ldr	r3, [r3, #4]
   1be2e:	b10b      	cbz	r3, 1be34 <nrfx_nfct_irq_handler+0x88>
   1be30:	4668      	mov	r0, sp
   1be32:	4798      	blx	r3
    return (bool)*(volatile const uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1be34:	4b61      	ldr	r3, [pc, #388]	; (1bfbc <nrfx_nfct_irq_handler+0x210>)
   1be36:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    }

    if (NRFX_NFCT_EVT_ACTIVE(RXFRAMEEND))
   1be3a:	b372      	cbz	r2, 1be9a <nrfx_nfct_irq_handler+0xee>
    return p_reg->INTENSET & mask;
   1be3c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   1be40:	0652      	lsls	r2, r2, #25
   1be42:	d52a      	bpl.n	1be9a <nrfx_nfct_irq_handler+0xee>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0UL;
   1be44:	2100      	movs	r1, #0
   1be46:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
   1be4a:	f3bf 8f4f 	dsb	sy
    {
        nrf_nfct_event_clear(NRF_NFCT, NRF_NFCT_EVENT_RXFRAMEEND);

        nrfx_nfct_evt_t nfct_evt =
   1be4e:	2240      	movs	r2, #64	; 0x40
   1be50:	9101      	str	r1, [sp, #4]
   1be52:	9200      	str	r2, [sp, #0]
    return (uint8_t *)(p_reg->PACKETPTR);
   1be54:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
            .evt_id = NRFX_NFCT_EVT_RX_FRAMEEND
        };

        /* Take into account only the number of whole bytes. */
        nfct_evt.params.rx_frameend.rx_status         = 0;
        nfct_evt.params.rx_frameend.rx_data.p_data    = nrf_nfct_rxtx_buffer_get(NRF_NFCT);
   1be58:	9203      	str	r2, [sp, #12]
    uint16_t rx_bits = p_reg->RXD.AMOUNT & (NFCT_RXD_AMOUNT_RXDATABITS_Msk |
   1be5a:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
   1be5e:	f3c2 020b 	ubfx	r2, r2, #0, #12
    return rx_bits - (crc_excluded ? (8u * NRF_NFCT_CRC_SIZE) : 0);
   1be62:	3a10      	subs	r2, #16
        nfct_evt.params.rx_frameend.rx_data.data_size =
            NRFX_NFCT_BITS_TO_BYTES(nrf_nfct_rx_bits_get(NRF_NFCT, true));
   1be64:	f3c2 02cc 	ubfx	r2, r2, #3, #13
   1be68:	9202      	str	r2, [sp, #8]
    return (bool)*(volatile const uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1be6a:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128

        if (NRFX_NFCT_EVT_ACTIVE(RXERROR))
   1be6e:	b17a      	cbz	r2, 1be90 <nrfx_nfct_irq_handler+0xe4>
    return p_reg->INTENSET & mask;
   1be70:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   1be74:	0550      	lsls	r0, r2, #21
   1be76:	d50b      	bpl.n	1be90 <nrfx_nfct_irq_handler+0xe4>
    return p_reg->FRAMESTATUS.RX;
   1be78:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
        {
            nfct_evt.params.rx_frameend.rx_status =
                (nrf_nfct_rx_frame_status_get(NRF_NFCT) & NRFX_NFCT_FRAME_STATUS_RX_ALL_MASK);
   1be7c:	f002 020d 	and.w	r2, r2, #13
            nfct_evt.params.rx_frameend.rx_status =
   1be80:	9201      	str	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0UL;
   1be82:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
   1be86:	f3bf 8f4f 	dsb	sy
    p_reg->FRAMESTATUS.RX = framestatus_flags;
   1be8a:	220d      	movs	r2, #13
   1be8c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

            /* Clear rx frame status */
            nrf_nfct_rx_frame_status_clear(NRF_NFCT, NRFX_NFCT_FRAME_STATUS_RX_ALL_MASK);
        }

        NRFX_NFCT_CB_HANDLE(m_nfct_cb.config.cb, nfct_evt);
   1be90:	4b4b      	ldr	r3, [pc, #300]	; (1bfc0 <nrfx_nfct_irq_handler+0x214>)
   1be92:	685b      	ldr	r3, [r3, #4]
   1be94:	b10b      	cbz	r3, 1be9a <nrfx_nfct_irq_handler+0xee>
   1be96:	4668      	mov	r0, sp
   1be98:	4798      	blx	r3
    return (bool)*(volatile const uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1be9a:	4b48      	ldr	r3, [pc, #288]	; (1bfbc <nrfx_nfct_irq_handler+0x210>)
   1be9c:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c

        NRFX_LOG_DEBUG("Rx fend");
    }

    if (NRFX_NFCT_EVT_ACTIVE(SELECTED))
   1bea0:	b372      	cbz	r2, 1bf00 <nrfx_nfct_irq_handler+0x154>
    return p_reg->INTENSET & mask;
   1bea2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   1bea6:	0311      	lsls	r1, r2, #12
   1bea8:	d52a      	bpl.n	1bf00 <nrfx_nfct_irq_handler+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0UL;
   1beaa:	2200      	movs	r2, #0
   1beac:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1beb0:	f3bf 8f4f 	dsb	sy
   1beb4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   1beb8:	f3bf 8f4f 	dsb	sy
   1bebc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
   1bec0:	f3bf 8f4f 	dsb	sy
   1bec4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   1bec8:	f3bf 8f4f 	dsb	sy
   1becc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1bed0:	f3bf 8f4f 	dsb	sy
        nrf_nfct_frame_delay_max_set(NRF_NFCT, m_nfct_cb.frame_delay_max);
   1bed4:	483a      	ldr	r0, [pc, #232]	; (1bfc0 <nrfx_nfct_irq_handler+0x214>)
        ((uint32_t)frame_delay_max << NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos) &
   1bed6:	68c1      	ldr	r1, [r0, #12]
   1bed8:	f3c1 0113 	ubfx	r1, r1, #0, #20
    p_reg->FRAMEDELAYMAX =
   1bedc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->FRAMESTATUS.RX = framestatus_flags;
   1bee0:	210d      	movs	r1, #13
   1bee2:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
    p_reg->ERRORSTATUS = error_flags;
   1bee6:	2101      	movs	r1, #1
   1bee8:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404

        /* At this point any previous error status can be ignored. */
        nrf_nfct_rx_frame_status_clear(NRF_NFCT, NRFX_NFCT_FRAME_STATUS_RX_ALL_MASK);
        nrf_nfct_error_status_clear(NRF_NFCT, NRFX_NFCT_ERROR_STATUS_ALL_MASK);

        nrfx_nfct_evt_t nfct_evt =
   1beec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bef0:	9300      	str	r3, [sp, #0]
        {
            .evt_id = NRFX_NFCT_EVT_SELECTED
        };
        NRFX_NFCT_CB_HANDLE(m_nfct_cb.config.cb, nfct_evt);
   1bef2:	6843      	ldr	r3, [r0, #4]
        nrfx_nfct_evt_t nfct_evt =
   1bef4:	9203      	str	r2, [sp, #12]
   1bef6:	e9cd 2201 	strd	r2, r2, [sp, #4]
        NRFX_NFCT_CB_HANDLE(m_nfct_cb.config.cb, nfct_evt);
   1befa:	b10b      	cbz	r3, 1bf00 <nrfx_nfct_irq_handler+0x154>
   1befc:	4668      	mov	r0, sp
   1befe:	4798      	blx	r3
    return (bool)*(volatile const uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bf00:	4b2e      	ldr	r3, [pc, #184]	; (1bfbc <nrfx_nfct_irq_handler+0x210>)
   1bf02:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c

        NRFX_LOG_DEBUG("Selected");
    }

    if (NRFX_NFCT_EVT_ACTIVE(ERROR))
   1bf06:	b1f2      	cbz	r2, 1bf46 <nrfx_nfct_irq_handler+0x19a>
    return p_reg->INTENSET & mask;
   1bf08:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   1bf0c:	0612      	lsls	r2, r2, #24
   1bf0e:	d51a      	bpl.n	1bf46 <nrfx_nfct_irq_handler+0x19a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0UL;
   1bf10:	2200      	movs	r2, #0
    return p_reg->ERRORSTATUS;
   1bf12:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0UL;
   1bf16:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   1bf1a:	f3bf 8f4f 	dsb	sy
    {
        uint32_t err_status = nrf_nfct_error_status_get(NRF_NFCT);
        nrf_nfct_event_clear(NRF_NFCT, NRF_NFCT_EVENT_ERROR);

        nrfx_nfct_evt_t nfct_evt =
   1bf1e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1bf22:	9203      	str	r2, [sp, #12]
        {
            .evt_id = NRFX_NFCT_EVT_ERROR
        };

        /* Clear FRAMEDELAYTIMEOUT error (expected HW behaviour) when SLP_REQ command was received. */
        if (err_status & NRF_NFCT_ERROR_FRAMEDELAYTIMEOUT_MASK)
   1bf24:	07c8      	lsls	r0, r1, #31
        nrfx_nfct_evt_t nfct_evt =
   1bf26:	f04f 0280 	mov.w	r2, #128	; 0x80
   1bf2a:	9200      	str	r2, [sp, #0]
        if (err_status & NRF_NFCT_ERROR_FRAMEDELAYTIMEOUT_MASK)
   1bf2c:	d507      	bpl.n	1bf3e <nrfx_nfct_irq_handler+0x192>
    p_reg->ERRORSTATUS = error_flags;
   1bf2e:	2201      	movs	r2, #1
   1bf30:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        {
            nrf_nfct_error_status_clear(NRF_NFCT, NRF_NFCT_ERROR_FRAMEDELAYTIMEOUT_MASK);

            nfct_evt.params.error.reason = NRFX_NFCT_ERROR_FRAMEDELAYTIMEOUT;
            NRFX_NFCT_CB_HANDLE(m_nfct_cb.config.cb, nfct_evt);
   1bf34:	4b22      	ldr	r3, [pc, #136]	; (1bfc0 <nrfx_nfct_irq_handler+0x214>)
   1bf36:	685b      	ldr	r3, [r3, #4]
   1bf38:	b10b      	cbz	r3, 1bf3e <nrfx_nfct_irq_handler+0x192>
   1bf3a:	4668      	mov	r0, sp
   1bf3c:	4798      	blx	r3
   1bf3e:	4b1f      	ldr	r3, [pc, #124]	; (1bfbc <nrfx_nfct_irq_handler+0x210>)
   1bf40:	2201      	movs	r2, #1
   1bf42:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    return (bool)*(volatile const uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bf46:	4b1d      	ldr	r3, [pc, #116]	; (1bfbc <nrfx_nfct_irq_handler+0x210>)
   1bf48:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        /* Clear error status. */
        nrf_nfct_error_status_clear(NRF_NFCT, NRFX_NFCT_ERROR_STATUS_ALL_MASK);
    }

    if (NRFX_NFCT_EVT_ACTIVE(TXFRAMESTART))
   1bf4c:	b1ba      	cbz	r2, 1bf7e <nrfx_nfct_irq_handler+0x1d2>
    return p_reg->INTENSET & mask;
   1bf4e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   1bf52:	0711      	lsls	r1, r2, #28
   1bf54:	d513      	bpl.n	1bf7e <nrfx_nfct_irq_handler+0x1d2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0UL;
   1bf56:	2200      	movs	r2, #0
   1bf58:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   1bf5c:	f3bf 8f4f 	dsb	sy
    {
        nrf_nfct_event_clear(NRF_NFCT, NRF_NFCT_EVENT_TXFRAMESTART);

        if (m_nfct_cb.config.cb != NULL)
   1bf60:	4a17      	ldr	r2, [pc, #92]	; (1bfc0 <nrfx_nfct_irq_handler+0x214>)
   1bf62:	6852      	ldr	r2, [r2, #4]
   1bf64:	b15a      	cbz	r2, 1bf7e <nrfx_nfct_irq_handler+0x1d2>
        {
            nrfx_nfct_evt_t nfct_evt;

            nfct_evt.evt_id                                 = NRFX_NFCT_EVT_TX_FRAMESTART;
   1bf66:	2108      	movs	r1, #8
   1bf68:	9100      	str	r1, [sp, #0]
    return (uint8_t *)(p_reg->PACKETPTR);
   1bf6a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
            nfct_evt.params.tx_framestart.tx_data.p_data    = nrf_nfct_rxtx_buffer_get(NRF_NFCT);
   1bf6e:	9102      	str	r1, [sp, #8]
    return (uint16_t)(p_reg->TXD.AMOUNT & (NFCT_TXD_AMOUNT_TXDATABITS_Msk |
   1bf70:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
            nfct_evt.params.tx_framestart.tx_data.data_size =
                NRFX_NFCT_BITS_TO_BYTES(nrf_nfct_tx_bits_get(NRF_NFCT));
   1bf74:	f3c3 03c8 	ubfx	r3, r3, #3, #9
   1bf78:	9301      	str	r3, [sp, #4]

            m_nfct_cb.config.cb(&nfct_evt);
   1bf7a:	4668      	mov	r0, sp
   1bf7c:	4790      	blx	r2
    return (bool)*(volatile const uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bf7e:	4b0f      	ldr	r3, [pc, #60]	; (1bfbc <nrfx_nfct_irq_handler+0x210>)
   1bf80:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
        }
    }

    if (NRFX_NFCT_EVT_ACTIVE(TXFRAMEEND))
   1bf84:	b1aa      	cbz	r2, 1bfb2 <nrfx_nfct_irq_handler+0x206>
    return p_reg->INTENSET & mask;
   1bf86:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   1bf8a:	06d2      	lsls	r2, r2, #27
   1bf8c:	d511      	bpl.n	1bfb2 <nrfx_nfct_irq_handler+0x206>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0UL;
   1bf8e:	2200      	movs	r2, #0
   1bf90:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1bf94:	f3bf 8f4f 	dsb	sy
    {
        nrf_nfct_event_clear(NRF_NFCT, NRF_NFCT_EVENT_TXFRAMEEND);

        nrfx_nfct_evt_t nfct_evt =
   1bf98:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1bf9c:	9203      	str	r2, [sp, #12]
   1bf9e:	2210      	movs	r2, #16
   1bfa0:	9200      	str	r2, [sp, #0]
    p_reg->INTENCLR = mask;
   1bfa2:	2218      	movs	r2, #24
   1bfa4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        };

        /* Ignore any frame transmission until a new TX is scheduled by nrfx_nfct_tx() */
        nrf_nfct_int_disable(NRF_NFCT, NRFX_NFCT_TX_INT_MASK);

        NRFX_NFCT_CB_HANDLE(m_nfct_cb.config.cb, nfct_evt);
   1bfa8:	4b05      	ldr	r3, [pc, #20]	; (1bfc0 <nrfx_nfct_irq_handler+0x214>)
   1bfaa:	685b      	ldr	r3, [r3, #4]
   1bfac:	b10b      	cbz	r3, 1bfb2 <nrfx_nfct_irq_handler+0x206>
   1bfae:	4668      	mov	r0, sp
   1bfb0:	4798      	blx	r3

        NRFX_LOG_DEBUG("Tx fend");
    }
}
   1bfb2:	b005      	add	sp, #20
   1bfb4:	f85d fb04 	ldr.w	pc, [sp], #4
    if (NRFX_NFCT_EVT_ACTIVE(FIELDLOST))
   1bfb8:	2002      	movs	r0, #2
   1bfba:	e722      	b.n	1be02 <nrfx_nfct_irq_handler+0x56>
   1bfbc:	40005000 	.word	0x40005000
   1bfc0:	20002e9c 	.word	0x20002e9c

0001bfc4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1bfc4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1bfc6:	4801      	ldr	r0, [pc, #4]	; (1bfcc <nrfx_ppi_channel_alloc+0x8>)
   1bfc8:	f7ff b8a4 	b.w	1b114 <nrfx_flag32_alloc>
   1bfcc:	20000824 	.word	0x20000824

0001bfd0 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   1bfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bfd2:	4604      	mov	r4, r0
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   1bfd4:	7907      	ldrb	r7, [r0, #4]
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
   1bfd6:	460d      	mov	r5, r1
   1bfd8:	b941      	cbnz	r1, 1bfec <nrfx_timer_init+0x1c>
   1bfda:	493b      	ldr	r1, [pc, #236]	; (1c0c8 <nrfx_timer_init+0xf8>)
   1bfdc:	483b      	ldr	r0, [pc, #236]	; (1c0cc <nrfx_timer_init+0xfc>)
   1bfde:	2253      	movs	r2, #83	; 0x53
   1bfe0:	f007 f81d 	bl	2301e <assert_print>
   1bfe4:	2153      	movs	r1, #83	; 0x53
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   1bfe6:	4838      	ldr	r0, [pc, #224]	; (1c0c8 <nrfx_timer_init+0xf8>)
   1bfe8:	f007 f812 	bl	23010 <assert_post_action>
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1bfec:	4e38      	ldr	r6, [pc, #224]	; (1c0d0 <nrfx_timer_init+0x100>)
   1bfee:	230c      	movs	r3, #12
   1bff0:	fb03 6307 	mla	r3, r3, r7, r6
   1bff4:	7a1b      	ldrb	r3, [r3, #8]
   1bff6:	2b00      	cmp	r3, #0
   1bff8:	d163      	bne.n	1c0c2 <nrfx_timer_init+0xf2>
    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   1bffa:	6803      	ldr	r3, [r0, #0]
   1bffc:	4935      	ldr	r1, [pc, #212]	; (1c0d4 <nrfx_timer_init+0x104>)
   1bffe:	428b      	cmp	r3, r1
   1c000:	d00f      	beq.n	1c022 <nrfx_timer_init+0x52>
   1c002:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   1c006:	428b      	cmp	r3, r1
   1c008:	d00b      	beq.n	1c022 <nrfx_timer_init+0x52>
   1c00a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   1c00e:	428b      	cmp	r3, r1
   1c010:	d007      	beq.n	1c022 <nrfx_timer_init+0x52>
   1c012:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
   1c016:	428b      	cmp	r3, r1
   1c018:	d003      	beq.n	1c022 <nrfx_timer_init+0x52>
   1c01a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   1c01e:	428b      	cmp	r3, r1
   1c020:	d102      	bne.n	1c028 <nrfx_timer_init+0x58>
   1c022:	78ab      	ldrb	r3, [r5, #2]
   1c024:	2b03      	cmp	r3, #3
   1c026:	d906      	bls.n	1c036 <nrfx_timer_init+0x66>
   1c028:	4927      	ldr	r1, [pc, #156]	; (1c0c8 <nrfx_timer_init+0xf8>)
   1c02a:	4828      	ldr	r0, [pc, #160]	; (1c0cc <nrfx_timer_init+0xfc>)
   1c02c:	2260      	movs	r2, #96	; 0x60
   1c02e:	f006 fff6 	bl	2301e <assert_print>
   1c032:	2160      	movs	r1, #96	; 0x60
   1c034:	e7d7      	b.n	1bfe6 <nrfx_timer_init+0x16>

    p_cb->handler = timer_event_handler;
   1c036:	230c      	movs	r3, #12
   1c038:	437b      	muls	r3, r7
   1c03a:	18f1      	adds	r1, r6, r3
   1c03c:	50f2      	str	r2, [r6, r3]
    p_cb->context = p_config->p_context;
   1c03e:	686b      	ldr	r3, [r5, #4]
   1c040:	604b      	str	r3, [r1, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   1c042:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c044:	4694      	mov	ip, r2
   1c046:	7961      	ldrb	r1, [r4, #5]
    {
        nrf_timer_event_clear(p_instance->p_reg,
   1c048:	6820      	ldr	r0, [r4, #0]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   1c04a:	b2d3      	uxtb	r3, r2
   1c04c:	4299      	cmp	r1, r3
   1c04e:	d827      	bhi.n	1c0a0 <nrfx_timer_init+0xd0>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1c050:	f340 3007 	sbfx	r0, r0, #12, #8
   1c054:	f7f6 fb28 	bl	126a8 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   1c058:	6821      	ldr	r1, [r4, #0]
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   1c05a:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   1c05c:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   1c060:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   1c064:	f022 0203 	bic.w	r2, r2, #3
   1c068:	4313      	orrs	r3, r2
   1c06a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
   1c06e:	6821      	ldr	r1, [r4, #0]
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   1c070:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   1c072:	f8d1 2508 	ldr.w	r2, [r1, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   1c076:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   1c07a:	f022 0203 	bic.w	r2, r2, #3
   1c07e:	4313      	orrs	r3, r2
   1c080:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
    // nrf_timer_frequency_t is mapped to prescaler for 16MHz base clock frequency timers
    nrf_timer_prescaler_set(p_instance->p_reg, (uint32_t)p_config->frequency);
   1c084:	782b      	ldrb	r3, [r5, #0]
   1c086:	6822      	ldr	r2, [r4, #0]
    NRFX_ASSERT(prescaler_factor <= NRF_TIMER_PRESCALER_MAX);
   1c088:	2b09      	cmp	r3, #9
   1c08a:	d911      	bls.n	1c0b0 <nrfx_timer_init+0xe0>
   1c08c:	4912      	ldr	r1, [pc, #72]	; (1c0d8 <nrfx_timer_init+0x108>)
   1c08e:	480f      	ldr	r0, [pc, #60]	; (1c0cc <nrfx_timer_init+0xfc>)
   1c090:	f240 3255 	movw	r2, #853	; 0x355
   1c094:	f006 ffc3 	bl	2301e <assert_print>
   1c098:	480f      	ldr	r0, [pc, #60]	; (1c0d8 <nrfx_timer_init+0x108>)
   1c09a:	f240 3155 	movw	r1, #853	; 0x355
   1c09e:	e7a3      	b.n	1bfe8 <nrfx_timer_init+0x18>
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
   1c0a0:	009b      	lsls	r3, r3, #2
   1c0a2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   1c0a6:	3201      	adds	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c0a8:	f840 c003 	str.w	ip, [r0, r3]
   1c0ac:	58c3      	ldr	r3, [r0, r3]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   1c0ae:	e7ca      	b.n	1c046 <nrfx_timer_init+0x76>
    p_reg->PRESCALER = prescaler_factor;
   1c0b0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1c0b4:	230c      	movs	r3, #12
   1c0b6:	fb03 6607 	mla	r6, r3, r7, r6

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1c0ba:	4808      	ldr	r0, [pc, #32]	; (1c0dc <nrfx_timer_init+0x10c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1c0bc:	2301      	movs	r3, #1
   1c0be:	7233      	strb	r3, [r6, #8]
}
   1c0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   1c0c2:	4807      	ldr	r0, [pc, #28]	; (1c0e0 <nrfx_timer_init+0x110>)
   1c0c4:	e7fc      	b.n	1c0c0 <nrfx_timer_init+0xf0>
   1c0c6:	bf00      	nop
   1c0c8:	00028581 	.word	0x00028581
   1c0cc:	00026718 	.word	0x00026718
   1c0d0:	20002eb0 	.word	0x20002eb0
   1c0d4:	40008000 	.word	0x40008000
   1c0d8:	000285be 	.word	0x000285be
   1c0dc:	0bad0000 	.word	0x0bad0000
   1c0e0:	0bad0005 	.word	0x0bad0005

0001c0e4 <nrfx_timer_enable>:
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
}

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
   1c0e4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   1c0e6:	4b0c      	ldr	r3, [pc, #48]	; (1c118 <nrfx_timer_enable+0x34>)
   1c0e8:	7902      	ldrb	r2, [r0, #4]
   1c0ea:	210c      	movs	r1, #12
   1c0ec:	fb01 3202 	mla	r2, r1, r2, r3
   1c0f0:	7a12      	ldrb	r2, [r2, #8]
   1c0f2:	2a01      	cmp	r2, #1
   1c0f4:	d008      	beq.n	1c108 <nrfx_timer_enable+0x24>
   1c0f6:	4909      	ldr	r1, [pc, #36]	; (1c11c <nrfx_timer_enable+0x38>)
   1c0f8:	4809      	ldr	r0, [pc, #36]	; (1c120 <nrfx_timer_enable+0x3c>)
   1c0fa:	228f      	movs	r2, #143	; 0x8f
   1c0fc:	f006 ff8f 	bl	2301e <assert_print>
   1c100:	4806      	ldr	r0, [pc, #24]	; (1c11c <nrfx_timer_enable+0x38>)
   1c102:	218f      	movs	r1, #143	; 0x8f
   1c104:	f006 ff84 	bl	23010 <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   1c108:	6804      	ldr	r4, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c10a:	6022      	str	r2, [r4, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   1c10c:	7902      	ldrb	r2, [r0, #4]
   1c10e:	fb01 3302 	mla	r3, r1, r2, r3
   1c112:	2202      	movs	r2, #2
   1c114:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   1c116:	bd10      	pop	{r4, pc}
   1c118:	20002eb0 	.word	0x20002eb0
   1c11c:	00028581 	.word	0x00028581
   1c120:	00026718 	.word	0x00026718

0001c124 <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
   1c124:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   1c126:	4b0c      	ldr	r3, [pc, #48]	; (1c158 <nrfx_timer_disable+0x34>)
   1c128:	7902      	ldrb	r2, [r0, #4]
   1c12a:	210c      	movs	r1, #12
   1c12c:	fb01 3202 	mla	r2, r1, r2, r3
   1c130:	7a12      	ldrb	r2, [r2, #8]
   1c132:	b942      	cbnz	r2, 1c146 <nrfx_timer_disable+0x22>
   1c134:	4909      	ldr	r1, [pc, #36]	; (1c15c <nrfx_timer_disable+0x38>)
   1c136:	480a      	ldr	r0, [pc, #40]	; (1c160 <nrfx_timer_disable+0x3c>)
   1c138:	2297      	movs	r2, #151	; 0x97
   1c13a:	f006 ff70 	bl	2301e <assert_print>
   1c13e:	4807      	ldr	r0, [pc, #28]	; (1c15c <nrfx_timer_disable+0x38>)
   1c140:	2197      	movs	r1, #151	; 0x97
   1c142:	f006 ff65 	bl	23010 <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   1c146:	6804      	ldr	r4, [r0, #0]
   1c148:	2201      	movs	r2, #1
   1c14a:	6122      	str	r2, [r4, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   1c14c:	7900      	ldrb	r0, [r0, #4]
   1c14e:	fb01 3300 	mla	r3, r1, r0, r3
   1c152:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   1c154:	bd10      	pop	{r4, pc}
   1c156:	bf00      	nop
   1c158:	20002eb0 	.word	0x20002eb0
   1c15c:	00028581 	.word	0x00028581
   1c160:	00026718 	.word	0x00026718

0001c164 <nrfx_timer_clear>:
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_STOP);
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
   1c164:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   1c166:	4b0a      	ldr	r3, [pc, #40]	; (1c190 <nrfx_timer_clear+0x2c>)
   1c168:	7902      	ldrb	r2, [r0, #4]
   1c16a:	210c      	movs	r1, #12
   1c16c:	fb01 3302 	mla	r3, r1, r2, r3
   1c170:	7a1b      	ldrb	r3, [r3, #8]
   1c172:	b943      	cbnz	r3, 1c186 <nrfx_timer_clear+0x22>
   1c174:	4907      	ldr	r1, [pc, #28]	; (1c194 <nrfx_timer_clear+0x30>)
   1c176:	4808      	ldr	r0, [pc, #32]	; (1c198 <nrfx_timer_clear+0x34>)
   1c178:	22b3      	movs	r2, #179	; 0xb3
   1c17a:	f006 ff50 	bl	2301e <assert_print>
   1c17e:	4805      	ldr	r0, [pc, #20]	; (1c194 <nrfx_timer_clear+0x30>)
   1c180:	21b3      	movs	r1, #179	; 0xb3
   1c182:	f006 ff45 	bl	23010 <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   1c186:	6803      	ldr	r3, [r0, #0]
   1c188:	2201      	movs	r2, #1
   1c18a:	60da      	str	r2, [r3, #12]
}
   1c18c:	bd08      	pop	{r3, pc}
   1c18e:	bf00      	nop
   1c190:	20002eb0 	.word	0x20002eb0
   1c194:	00028581 	.word	0x00028581
   1c198:	00026718 	.word	0x00026718

0001c19c <nrfx_timer_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TIMER4_ENABLED)
void nrfx_timer_4_irq_handler(void)
{
   1c19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1a0:	4c0f      	ldr	r4, [pc, #60]	; (1c1e0 <nrfx_timer_4_irq_handler+0x44>)
    return p_reg->INTENSET & mask;
   1c1a2:	4f10      	ldr	r7, [pc, #64]	; (1c1e4 <nrfx_timer_4_irq_handler+0x48>)
            if (p_cb->handler)
   1c1a4:	4e10      	ldr	r6, [pc, #64]	; (1c1e8 <nrfx_timer_4_irq_handler+0x4c>)
{
   1c1a6:	2500      	movs	r5, #0
    return (nrf_timer_int_mask_t)
   1c1a8:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c1ac:	6823      	ldr	r3, [r4, #0]
        if (nrf_timer_event_check(p_reg, event) &&
   1c1ae:	b17b      	cbz	r3, 1c1d0 <nrfx_timer_4_irq_handler+0x34>
    return p_reg->INTENSET & mask;
   1c1b0:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
    return (nrf_timer_int_mask_t)
   1c1b4:	fa08 f205 	lsl.w	r2, r8, r5
   1c1b8:	421a      	tst	r2, r3
   1c1ba:	d009      	beq.n	1c1d0 <nrfx_timer_4_irq_handler+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c1bc:	2300      	movs	r3, #0
   1c1be:	6023      	str	r3, [r4, #0]
   1c1c0:	6823      	ldr	r3, [r4, #0]
            if (p_cb->handler)
   1c1c2:	6833      	ldr	r3, [r6, #0]
   1c1c4:	b123      	cbz	r3, 1c1d0 <nrfx_timer_4_irq_handler+0x34>
                p_cb->handler(event, p_cb->context);
   1c1c6:	f504 40a0 	add.w	r0, r4, #20480	; 0x5000
   1c1ca:	6871      	ldr	r1, [r6, #4]
   1c1cc:	b280      	uxth	r0, r0
   1c1ce:	4798      	blx	r3
    for (i = 0; i < channel_count; ++i)
   1c1d0:	3501      	adds	r5, #1
   1c1d2:	2d06      	cmp	r5, #6
   1c1d4:	f104 0404 	add.w	r4, r4, #4
   1c1d8:	d1e8      	bne.n	1c1ac <nrfx_timer_4_irq_handler+0x10>
    irq_handler(NRF_TIMER4, &m_cb[NRFX_TIMER4_INST_IDX],
        NRF_TIMER_CC_CHANNEL_COUNT(4));
}
   1c1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c1de:	bf00      	nop
   1c1e0:	4001b140 	.word	0x4001b140
   1c1e4:	4001b000 	.word	0x4001b000
   1c1e8:	20002eb0 	.word	0x20002eb0

0001c1ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1c1ec:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1c1ee:	4c14      	ldr	r4, [pc, #80]	; (1c240 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1c1f0:	4a14      	ldr	r2, [pc, #80]	; (1c244 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1c1f2:	4915      	ldr	r1, [pc, #84]	; (1c248 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1c1f4:	2303      	movs	r3, #3
   1c1f6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1c1f8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c1fa:	4b14      	ldr	r3, [pc, #80]	; (1c24c <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   1c1fc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1c1fe:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1c200:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1c204:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1c206:	2300      	movs	r3, #0
   1c208:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1c20a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c20c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1c20e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1c210:	4a0f      	ldr	r2, [pc, #60]	; (1c250 <_DoInit+0x64>)
   1c212:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1c214:	2210      	movs	r2, #16
   1c216:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   1c218:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   1c21a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1c21c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1c21e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1c220:	f007 f955 	bl	234ce <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1c224:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1c228:	490a      	ldr	r1, [pc, #40]	; (1c254 <_DoInit+0x68>)
   1c22a:	4620      	mov	r0, r4
   1c22c:	f007 f94f 	bl	234ce <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1c230:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1c234:	2320      	movs	r3, #32
   1c236:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1c238:	f3bf 8f5f 	dmb	sy
}
   1c23c:	bd10      	pop	{r4, pc}
   1c23e:	bf00      	nop
   1c240:	20002ebc 	.word	0x20002ebc
   1c244:	000285f2 	.word	0x000285f2
   1c248:	000285fb 	.word	0x000285fb
   1c24c:	200054b7 	.word	0x200054b7
   1c250:	200054a7 	.word	0x200054a7
   1c254:	000285ff 	.word	0x000285ff

0001c258 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1c258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c25a:	4604      	mov	r4, r0
   1c25c:	460e      	mov	r6, r1
	__asm__ volatile(
   1c25e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c262:	f3ef 8711 	mrs	r7, BASEPRI
   1c266:	f383 8812 	msr	BASEPRI_MAX, r3
   1c26a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1c26e:	f002 fa53 	bl	1e718 <z_impl_z_current_get>
   1c272:	2c04      	cmp	r4, #4
   1c274:	bf96      	itet	ls
   1c276:	4b1e      	ldrls	r3, [pc, #120]	; (1c2f0 <z_fatal_error+0x98>)
   1c278:	4b1e      	ldrhi	r3, [pc, #120]	; (1c2f4 <z_fatal_error+0x9c>)
   1c27a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1c27e:	2200      	movs	r2, #0
   1c280:	4605      	mov	r5, r0
   1c282:	9200      	str	r2, [sp, #0]
   1c284:	481c      	ldr	r0, [pc, #112]	; (1c2f8 <z_fatal_error+0xa0>)
   1c286:	4622      	mov	r2, r4
   1c288:	2145      	movs	r1, #69	; 0x45
   1c28a:	f006 fed6 	bl	2303a <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1c28e:	b13e      	cbz	r6, 1c2a0 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1c290:	69f3      	ldr	r3, [r6, #28]
   1c292:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1c296:	b11b      	cbz	r3, 1c2a0 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   1c298:	4818      	ldr	r0, [pc, #96]	; (1c2fc <z_fatal_error+0xa4>)
   1c29a:	2145      	movs	r1, #69	; 0x45
   1c29c:	f006 fecd 	bl	2303a <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1c2a0:	b135      	cbz	r5, 1c2b0 <z_fatal_error+0x58>
   1c2a2:	4628      	mov	r0, r5
   1c2a4:	f008 ffe6 	bl	25274 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1c2a8:	4603      	mov	r3, r0
   1c2aa:	b108      	cbz	r0, 1c2b0 <z_fatal_error+0x58>
   1c2ac:	7802      	ldrb	r2, [r0, #0]
   1c2ae:	b902      	cbnz	r2, 1c2b2 <z_fatal_error+0x5a>
		thread_name = "unknown";
   1c2b0:	4b13      	ldr	r3, [pc, #76]	; (1c300 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1c2b2:	4814      	ldr	r0, [pc, #80]	; (1c304 <z_fatal_error+0xac>)
   1c2b4:	462a      	mov	r2, r5
   1c2b6:	2145      	movs	r1, #69	; 0x45
   1c2b8:	f006 febf 	bl	2303a <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1c2bc:	4631      	mov	r1, r6
   1c2be:	4620      	mov	r0, r4
   1c2c0:	f7fd fdae 	bl	19e20 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1c2c4:	2c04      	cmp	r4, #4
   1c2c6:	d108      	bne.n	1c2da <z_fatal_error+0x82>
   1c2c8:	490f      	ldr	r1, [pc, #60]	; (1c308 <z_fatal_error+0xb0>)
   1c2ca:	4810      	ldr	r0, [pc, #64]	; (1c30c <z_fatal_error+0xb4>)
   1c2cc:	2293      	movs	r2, #147	; 0x93
   1c2ce:	f006 fea6 	bl	2301e <assert_print>
   1c2d2:	480d      	ldr	r0, [pc, #52]	; (1c308 <z_fatal_error+0xb0>)
   1c2d4:	2193      	movs	r1, #147	; 0x93
   1c2d6:	f006 fe9b 	bl	23010 <assert_post_action>
	__asm__ volatile(
   1c2da:	f387 8811 	msr	BASEPRI, r7
   1c2de:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1c2e2:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1c2e4:	b003      	add	sp, #12
   1c2e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c2ea:	f7f6 bdd9 	b.w	12ea0 <z_impl_k_thread_abort>
   1c2ee:	bf00      	nop
   1c2f0:	0002606c 	.word	0x0002606c
   1c2f4:	00028606 	.word	0x00028606
   1c2f8:	0002861c 	.word	0x0002861c
   1c2fc:	00028649 	.word	0x00028649
   1c300:	00028614 	.word	0x00028614
   1c304:	0002866f 	.word	0x0002866f
   1c308:	0002868c 	.word	0x0002868c
   1c30c:	00026718 	.word	0x00026718

0001c310 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c310:	4b0f      	ldr	r3, [pc, #60]	; (1c350 <z_sys_init_run_level+0x40>)
{
   1c312:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c314:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1c318:	3001      	adds	r0, #1
   1c31a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1c31e:	42a6      	cmp	r6, r4
   1c320:	d800      	bhi.n	1c324 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1c322:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1c324:	e9d4 3500 	ldrd	r3, r5, [r4]
   1c328:	4628      	mov	r0, r5
   1c32a:	4798      	blx	r3
		if (dev != NULL) {
   1c32c:	b16d      	cbz	r5, 1c34a <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1c32e:	b138      	cbz	r0, 1c340 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1c330:	2800      	cmp	r0, #0
   1c332:	bfb8      	it	lt
   1c334:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1c336:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1c338:	28ff      	cmp	r0, #255	; 0xff
   1c33a:	bfa8      	it	ge
   1c33c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1c33e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1c340:	68ea      	ldr	r2, [r5, #12]
   1c342:	7853      	ldrb	r3, [r2, #1]
   1c344:	f043 0301 	orr.w	r3, r3, #1
   1c348:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c34a:	3408      	adds	r4, #8
   1c34c:	e7e7      	b.n	1c31e <z_sys_init_run_level+0xe>
   1c34e:	bf00      	nop
   1c350:	00026080 	.word	0x00026080

0001c354 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1c354:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1c356:	4b0a      	ldr	r3, [pc, #40]	; (1c380 <bg_thread_main+0x2c>)
   1c358:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1c35a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1c35c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1c35e:	f7ff ffd7 	bl	1c310 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1c362:	f003 f81b 	bl	1f39c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1c366:	2004      	movs	r0, #4
   1c368:	f7ff ffd2 	bl	1c310 <z_sys_init_run_level>

	z_init_static_threads();
   1c36c:	f000 faf6 	bl	1c95c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1c370:	f7f4 fc58 	bl	10c24 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1c374:	4a03      	ldr	r2, [pc, #12]	; (1c384 <bg_thread_main+0x30>)
   1c376:	7b13      	ldrb	r3, [r2, #12]
   1c378:	f023 0301 	bic.w	r3, r3, #1
   1c37c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1c37e:	bd08      	pop	{r3, pc}
   1c380:	200058b7 	.word	0x200058b7
   1c384:	20002060 	.word	0x20002060

0001c388 <z_bss_zero>:
{
   1c388:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1c38a:	4803      	ldr	r0, [pc, #12]	; (1c398 <z_bss_zero+0x10>)
   1c38c:	4a03      	ldr	r2, [pc, #12]	; (1c39c <z_bss_zero+0x14>)
   1c38e:	2100      	movs	r1, #0
   1c390:	1a12      	subs	r2, r2, r0
   1c392:	f008 ff35 	bl	25200 <z_early_memset>
}
   1c396:	bd08      	pop	{r3, pc}
   1c398:	20000c20 	.word	0x20000c20
   1c39c:	200058bc 	.word	0x200058bc

0001c3a0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1c3a0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1c3a2:	2300      	movs	r3, #0
{
   1c3a4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1c3a6:	2201      	movs	r2, #1
   1c3a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1c3ac:	4e13      	ldr	r6, [pc, #76]	; (1c3fc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1c3ae:	4d14      	ldr	r5, [pc, #80]	; (1c400 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1c3b0:	9301      	str	r3, [sp, #4]
   1c3b2:	220f      	movs	r2, #15
   1c3b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1c3b8:	4912      	ldr	r1, [pc, #72]	; (1c404 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1c3ba:	2318      	movs	r3, #24
   1c3bc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1c3c0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1c3c4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1c3c6:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1c3ca:	fb00 1104 	mla	r1, r0, r4, r1
   1c3ce:	4b0e      	ldr	r3, [pc, #56]	; (1c408 <z_init_cpu+0x68>)
   1c3d0:	9500      	str	r5, [sp, #0]
   1c3d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1c3d6:	4630      	mov	r0, r6
   1c3d8:	f000 fa36 	bl	1c848 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c3dc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1c3de:	4a0b      	ldr	r2, [pc, #44]	; (1c40c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1c3e0:	60ee      	str	r6, [r5, #12]
   1c3e2:	f023 0304 	bic.w	r3, r3, #4
   1c3e6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1c3e8:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1c3ec:	fb04 3303 	mla	r3, r4, r3, r3
   1c3f0:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1c3f2:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   1c3f4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1c3f6:	b006      	add	sp, #24
   1c3f8:	bd70      	pop	{r4, r5, r6, pc}
   1c3fa:	bf00      	nop
   1c3fc:	20001fe0 	.word	0x20001fe0
   1c400:	20002f64 	.word	0x20002f64
   1c404:	20007940 	.word	0x20007940
   1c408:	0001ca99 	.word	0x0001ca99
   1c40c:	20007100 	.word	0x20007100

0001c410 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1c410:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1c412:	2000      	movs	r0, #0
{
   1c414:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1c416:	f7ff ff7b 	bl	1c310 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1c41a:	4b2d      	ldr	r3, [pc, #180]	; (1c4d0 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1c41c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1c420:	4d2c      	ldr	r5, [pc, #176]	; (1c4d4 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1c422:	4e2d      	ldr	r6, [pc, #180]	; (1c4d8 <z_cstart+0xc8>)
   1c424:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c426:	4f2d      	ldr	r7, [pc, #180]	; (1c4dc <z_cstart+0xcc>)
   1c428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1c42c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c42e:	23e0      	movs	r3, #224	; 0xe0
   1c430:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1c434:	2400      	movs	r4, #0
   1c436:	2320      	movs	r3, #32
   1c438:	77eb      	strb	r3, [r5, #31]
   1c43a:	762c      	strb	r4, [r5, #24]
   1c43c:	766c      	strb	r4, [r5, #25]
   1c43e:	76ac      	strb	r4, [r5, #26]
   1c440:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1c444:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1c446:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1c44a:	626b      	str	r3, [r5, #36]	; 0x24
   1c44c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1c450:	f7f6 fc9a 	bl	12d88 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1c454:	f7f6 f8dc 	bl	12610 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1c458:	f04f 33ff 	mov.w	r3, #4294967295
   1c45c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1c45e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1c460:	f7f6 fdfa 	bl	13058 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1c464:	f7f6 fd32 	bl	12ecc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1c468:	f240 1301 	movw	r3, #257	; 0x101
   1c46c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1c470:	ab06      	add	r3, sp, #24
   1c472:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1c474:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1c478:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1c47a:	f008 feb5 	bl	251e8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1c47e:	2001      	movs	r0, #1
   1c480:	f7ff ff46 	bl	1c310 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1c484:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1c486:	4d16      	ldr	r5, [pc, #88]	; (1c4e0 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1c488:	f7ff ff42 	bl	1c310 <z_sys_init_run_level>
	z_sched_init();
   1c48c:	f002 f80e 	bl	1e4ac <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c490:	4b14      	ldr	r3, [pc, #80]	; (1c4e4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   1c492:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c494:	9305      	str	r3, [sp, #20]
   1c496:	2301      	movs	r3, #1
   1c498:	4913      	ldr	r1, [pc, #76]	; (1c4e8 <z_cstart+0xd8>)
   1c49a:	9400      	str	r4, [sp, #0]
   1c49c:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1c4a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1c4a4:	463b      	mov	r3, r7
   1c4a6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1c4aa:	4628      	mov	r0, r5
   1c4ac:	f000 f9cc 	bl	1c848 <z_setup_new_thread>
   1c4b0:	7b6a      	ldrb	r2, [r5, #13]
   1c4b2:	4606      	mov	r6, r0
   1c4b4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1c4b8:	4628      	mov	r0, r5
   1c4ba:	736a      	strb	r2, [r5, #13]
   1c4bc:	f001 fb68 	bl	1db90 <z_ready_thread>
	z_init_cpu(0);
   1c4c0:	4620      	mov	r0, r4
   1c4c2:	f7ff ff6d 	bl	1c3a0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1c4c6:	463a      	mov	r2, r7
   1c4c8:	4631      	mov	r1, r6
   1c4ca:	4628      	mov	r0, r5
   1c4cc:	f7f6 f9fa 	bl	128c4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1c4d0:	20007940 	.word	0x20007940
   1c4d4:	e000ed00 	.word	0xe000ed00
   1c4d8:	20002f64 	.word	0x20002f64
   1c4dc:	0001c355 	.word	0x0001c355
   1c4e0:	20002060 	.word	0x20002060
   1c4e4:	000286f8 	.word	0x000286f8
   1c4e8:	20007ac0 	.word	0x20007ac0

0001c4ec <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1c4ec:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1c4ee:	4c0b      	ldr	r4, [pc, #44]	; (1c51c <statics_init+0x30>)
   1c4f0:	4d0b      	ldr	r5, [pc, #44]	; (1c520 <statics_init+0x34>)
   1c4f2:	42ac      	cmp	r4, r5
   1c4f4:	d90f      	bls.n	1c516 <statics_init+0x2a>
   1c4f6:	490b      	ldr	r1, [pc, #44]	; (1c524 <statics_init+0x38>)
   1c4f8:	480b      	ldr	r0, [pc, #44]	; (1c528 <statics_init+0x3c>)
   1c4fa:	2218      	movs	r2, #24
   1c4fc:	f006 fd8f 	bl	2301e <assert_print>
   1c500:	4808      	ldr	r0, [pc, #32]	; (1c524 <statics_init+0x38>)
   1c502:	2118      	movs	r1, #24
   1c504:	f006 fd84 	bl	23010 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1c508:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1c50c:	4620      	mov	r0, r4
   1c50e:	f008 fe7b 	bl	25208 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1c512:	3418      	adds	r4, #24
   1c514:	e7ed      	b.n	1c4f2 <statics_init+0x6>
   1c516:	d3f7      	bcc.n	1c508 <statics_init+0x1c>
		}
	}
	return 0;
}
   1c518:	2000      	movs	r0, #0
   1c51a:	bd38      	pop	{r3, r4, r5, pc}
   1c51c:	20000a34 	.word	0x20000a34
   1c520:	20000a34 	.word	0x20000a34
   1c524:	00028700 	.word	0x00028700
   1c528:	00026718 	.word	0x00026718

0001c52c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1c52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c530:	b085      	sub	sp, #20
   1c532:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   1c536:	4680      	mov	r8, r0
   1c538:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1c53a:	4648      	mov	r0, r9
   1c53c:	4659      	mov	r1, fp
{
   1c53e:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1c540:	f008 ff8f 	bl	25462 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1c544:	f1bb 3fff 	cmp.w	fp, #4294967295
   1c548:	bf08      	it	eq
   1c54a:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1c54e:	4605      	mov	r5, r0
   1c550:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1c552:	bf04      	itt	eq
   1c554:	f04f 35ff 	moveq.w	r5, #4294967295
   1c558:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1c55c:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   1c560:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c564:	f3ef 8411 	mrs	r4, BASEPRI
   1c568:	f383 8812 	msr	BASEPRI_MAX, r3
   1c56c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c570:	4630      	mov	r0, r6
   1c572:	f000 fa6b 	bl	1ca4c <z_spin_lock_valid>
   1c576:	b938      	cbnz	r0, 1c588 <k_heap_aligned_alloc+0x5c>
   1c578:	492c      	ldr	r1, [pc, #176]	; (1c62c <k_heap_aligned_alloc+0x100>)
   1c57a:	482d      	ldr	r0, [pc, #180]	; (1c630 <k_heap_aligned_alloc+0x104>)
   1c57c:	2294      	movs	r2, #148	; 0x94
   1c57e:	f006 fd4e 	bl	2301e <assert_print>
   1c582:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c584:	4829      	ldr	r0, [pc, #164]	; (1c62c <k_heap_aligned_alloc+0x100>)
   1c586:	e027      	b.n	1c5d8 <k_heap_aligned_alloc+0xac>
	z_spin_lock_set_owner(l);
   1c588:	4630      	mov	r0, r6
   1c58a:	f000 fa7d 	bl	1ca88 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c58e:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1c592:	b113      	cbz	r3, 1c59a <k_heap_aligned_alloc+0x6e>
   1c594:	ea5b 0909 	orrs.w	r9, fp, r9
   1c598:	d117      	bne.n	1c5ca <k_heap_aligned_alloc+0x9e>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1c59a:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1c59e:	9903      	ldr	r1, [sp, #12]
   1c5a0:	4652      	mov	r2, sl
   1c5a2:	4640      	mov	r0, r8
   1c5a4:	f7f4 fd38 	bl	11018 <sys_heap_aligned_alloc>
   1c5a8:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   1c5aa:	f002 fc09 	bl	1edc0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1c5ae:	f1b9 0f00 	cmp.w	r9, #0
   1c5b2:	d013      	beq.n	1c5dc <k_heap_aligned_alloc+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c5b4:	4630      	mov	r0, r6
   1c5b6:	f000 fa57 	bl	1ca68 <z_spin_unlock_valid>
   1c5ba:	bb70      	cbnz	r0, 1c61a <k_heap_aligned_alloc+0xee>
   1c5bc:	491b      	ldr	r1, [pc, #108]	; (1c62c <k_heap_aligned_alloc+0x100>)
   1c5be:	481c      	ldr	r0, [pc, #112]	; (1c630 <k_heap_aligned_alloc+0x104>)
   1c5c0:	22c2      	movs	r2, #194	; 0xc2
   1c5c2:	f006 fd2c 	bl	2301e <assert_print>
   1c5c6:	21c2      	movs	r1, #194	; 0xc2
   1c5c8:	e7dc      	b.n	1c584 <k_heap_aligned_alloc+0x58>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1c5ca:	491a      	ldr	r1, [pc, #104]	; (1c634 <k_heap_aligned_alloc+0x108>)
   1c5cc:	4818      	ldr	r0, [pc, #96]	; (1c630 <k_heap_aligned_alloc+0x104>)
   1c5ce:	224c      	movs	r2, #76	; 0x4c
   1c5d0:	f006 fd25 	bl	2301e <assert_print>
   1c5d4:	4817      	ldr	r0, [pc, #92]	; (1c634 <k_heap_aligned_alloc+0x108>)
   1c5d6:	214c      	movs	r1, #76	; 0x4c
   1c5d8:	f006 fd1a 	bl	23010 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   1c5dc:	1a28      	subs	r0, r5, r0
   1c5de:	eb67 0101 	sbc.w	r1, r7, r1
   1c5e2:	2801      	cmp	r0, #1
   1c5e4:	f171 0300 	sbcs.w	r3, r1, #0
   1c5e8:	dbe4      	blt.n	1c5b4 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1c5ea:	e9cd 0100 	strd	r0, r1, [sp]
   1c5ee:	465a      	mov	r2, fp
   1c5f0:	4621      	mov	r1, r4
   1c5f2:	4630      	mov	r0, r6
   1c5f4:	f001 fd54 	bl	1e0a0 <z_pend_curr>
   1c5f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c5fc:	f3ef 8411 	mrs	r4, BASEPRI
   1c600:	f383 8812 	msr	BASEPRI_MAX, r3
   1c604:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c608:	4630      	mov	r0, r6
   1c60a:	f000 fa1f 	bl	1ca4c <z_spin_lock_valid>
   1c60e:	2800      	cmp	r0, #0
   1c610:	d0b2      	beq.n	1c578 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   1c612:	4630      	mov	r0, r6
   1c614:	f000 fa38 	bl	1ca88 <z_spin_lock_set_owner>
	return k;
   1c618:	e7c1      	b.n	1c59e <k_heap_aligned_alloc+0x72>
	__asm__ volatile(
   1c61a:	f384 8811 	msr	BASEPRI, r4
   1c61e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1c622:	4648      	mov	r0, r9
   1c624:	b005      	add	sp, #20
   1c626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c62a:	bf00      	nop
   1c62c:	0002679f 	.word	0x0002679f
   1c630:	00026718 	.word	0x00026718
   1c634:	00028700 	.word	0x00028700

0001c638 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c63a:	4604      	mov	r4, r0
   1c63c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1c63e:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   1c642:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c646:	f3ef 8711 	mrs	r7, BASEPRI
   1c64a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c64e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c652:	4628      	mov	r0, r5
   1c654:	f000 f9fa 	bl	1ca4c <z_spin_lock_valid>
   1c658:	b940      	cbnz	r0, 1c66c <k_heap_free+0x34>
   1c65a:	4915      	ldr	r1, [pc, #84]	; (1c6b0 <k_heap_free+0x78>)
   1c65c:	4815      	ldr	r0, [pc, #84]	; (1c6b4 <k_heap_free+0x7c>)
   1c65e:	2294      	movs	r2, #148	; 0x94
   1c660:	f006 fcdd 	bl	2301e <assert_print>
   1c664:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c666:	4812      	ldr	r0, [pc, #72]	; (1c6b0 <k_heap_free+0x78>)
   1c668:	f006 fcd2 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c66c:	4628      	mov	r0, r5
   1c66e:	f000 fa0b 	bl	1ca88 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1c672:	4620      	mov	r0, r4
   1c674:	4631      	mov	r1, r6
   1c676:	f7f4 fc9d 	bl	10fb4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1c67a:	f104 000c 	add.w	r0, r4, #12
   1c67e:	f008 fed6 	bl	2542e <z_unpend_all>
   1c682:	b128      	cbz	r0, 1c690 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   1c684:	4639      	mov	r1, r7
   1c686:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1c688:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1c68c:	f001 bab4 	b.w	1dbf8 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c690:	4628      	mov	r0, r5
   1c692:	f000 f9e9 	bl	1ca68 <z_spin_unlock_valid>
   1c696:	b930      	cbnz	r0, 1c6a6 <k_heap_free+0x6e>
   1c698:	4905      	ldr	r1, [pc, #20]	; (1c6b0 <k_heap_free+0x78>)
   1c69a:	4806      	ldr	r0, [pc, #24]	; (1c6b4 <k_heap_free+0x7c>)
   1c69c:	22c2      	movs	r2, #194	; 0xc2
   1c69e:	f006 fcbe 	bl	2301e <assert_print>
   1c6a2:	21c2      	movs	r1, #194	; 0xc2
   1c6a4:	e7df      	b.n	1c666 <k_heap_free+0x2e>
	__asm__ volatile(
   1c6a6:	f387 8811 	msr	BASEPRI, r7
   1c6aa:	f3bf 8f6f 	isb	sy
}
   1c6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c6b0:	0002679f 	.word	0x0002679f
   1c6b4:	00026718 	.word	0x00026718

0001c6b8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1c6b8:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c6ba:	4c0b      	ldr	r4, [pc, #44]	; (1c6e8 <init_mem_slab_module+0x30>)
   1c6bc:	4d0b      	ldr	r5, [pc, #44]	; (1c6ec <init_mem_slab_module+0x34>)
	int rc = 0;
   1c6be:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c6c0:	42ac      	cmp	r4, r5
   1c6c2:	d90f      	bls.n	1c6e4 <init_mem_slab_module+0x2c>
   1c6c4:	490a      	ldr	r1, [pc, #40]	; (1c6f0 <init_mem_slab_module+0x38>)
   1c6c6:	480b      	ldr	r0, [pc, #44]	; (1c6f4 <init_mem_slab_module+0x3c>)
   1c6c8:	223d      	movs	r2, #61	; 0x3d
   1c6ca:	f006 fca8 	bl	2301e <assert_print>
   1c6ce:	4808      	ldr	r0, [pc, #32]	; (1c6f0 <init_mem_slab_module+0x38>)
   1c6d0:	213d      	movs	r1, #61	; 0x3d
   1c6d2:	f006 fc9d 	bl	23010 <assert_post_action>
		rc = create_free_list(slab);
   1c6d6:	4620      	mov	r0, r4
   1c6d8:	f008 fd9e 	bl	25218 <create_free_list>
		if (rc < 0) {
   1c6dc:	2800      	cmp	r0, #0
   1c6de:	db02      	blt.n	1c6e6 <init_mem_slab_module+0x2e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c6e0:	3420      	adds	r4, #32
   1c6e2:	e7ed      	b.n	1c6c0 <init_mem_slab_module+0x8>
   1c6e4:	d3f7      	bcc.n	1c6d6 <init_mem_slab_module+0x1e>
		z_object_init(slab);
	}

out:
	return rc;
}
   1c6e6:	bd38      	pop	{r3, r4, r5, pc}
   1c6e8:	200009d4 	.word	0x200009d4
   1c6ec:	20000a34 	.word	0x20000a34
   1c6f0:	00028722 	.word	0x00028722
   1c6f4:	00026718 	.word	0x00026718

0001c6f8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1c6f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c6fc:	4604      	mov	r4, r0
   1c6fe:	460d      	mov	r5, r1
   1c700:	4690      	mov	r8, r2
   1c702:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1c704:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1c708:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c70c:	f3ef 8911 	mrs	r9, BASEPRI
   1c710:	f383 8812 	msr	BASEPRI_MAX, r3
   1c714:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c718:	4630      	mov	r0, r6
   1c71a:	f000 f997 	bl	1ca4c <z_spin_lock_valid>
   1c71e:	b940      	cbnz	r0, 1c732 <k_mem_slab_alloc+0x3a>
   1c720:	491e      	ldr	r1, [pc, #120]	; (1c79c <k_mem_slab_alloc+0xa4>)
   1c722:	481f      	ldr	r0, [pc, #124]	; (1c7a0 <k_mem_slab_alloc+0xa8>)
   1c724:	2294      	movs	r2, #148	; 0x94
   1c726:	f006 fc7a 	bl	2301e <assert_print>
   1c72a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c72c:	481b      	ldr	r0, [pc, #108]	; (1c79c <k_mem_slab_alloc+0xa4>)
   1c72e:	f006 fc6f 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c732:	4630      	mov	r0, r6
   1c734:	f000 f9a8 	bl	1ca88 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1c738:	69a3      	ldr	r3, [r4, #24]
   1c73a:	b18b      	cbz	r3, 1c760 <k_mem_slab_alloc+0x68>
		/* take a free block */
		*mem = slab->free_list;
   1c73c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1c73e:	681b      	ldr	r3, [r3, #0]
   1c740:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1c742:	69e3      	ldr	r3, [r4, #28]
   1c744:	3301      	adds	r3, #1
   1c746:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1c748:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c74a:	4630      	mov	r0, r6
   1c74c:	f000 f98c 	bl	1ca68 <z_spin_unlock_valid>
   1c750:	b9f0      	cbnz	r0, 1c790 <k_mem_slab_alloc+0x98>
   1c752:	4912      	ldr	r1, [pc, #72]	; (1c79c <k_mem_slab_alloc+0xa4>)
   1c754:	4812      	ldr	r0, [pc, #72]	; (1c7a0 <k_mem_slab_alloc+0xa8>)
   1c756:	22c2      	movs	r2, #194	; 0xc2
   1c758:	f006 fc61 	bl	2301e <assert_print>
   1c75c:	21c2      	movs	r1, #194	; 0xc2
   1c75e:	e7e5      	b.n	1c72c <k_mem_slab_alloc+0x34>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1c760:	ea58 0207 	orrs.w	r2, r8, r7
   1c764:	d103      	bne.n	1c76e <k_mem_slab_alloc+0x76>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   1c766:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   1c768:	f06f 040b 	mvn.w	r4, #11
   1c76c:	e7ed      	b.n	1c74a <k_mem_slab_alloc+0x52>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1c76e:	4622      	mov	r2, r4
   1c770:	e9cd 8700 	strd	r8, r7, [sp]
   1c774:	4649      	mov	r1, r9
   1c776:	4630      	mov	r0, r6
   1c778:	f001 fc92 	bl	1e0a0 <z_pend_curr>
		if (result == 0) {
   1c77c:	4604      	mov	r4, r0
   1c77e:	b918      	cbnz	r0, 1c788 <k_mem_slab_alloc+0x90>
			*mem = _current->base.swap_data;
   1c780:	4b08      	ldr	r3, [pc, #32]	; (1c7a4 <k_mem_slab_alloc+0xac>)
   1c782:	689b      	ldr	r3, [r3, #8]
   1c784:	695b      	ldr	r3, [r3, #20]
   1c786:	602b      	str	r3, [r5, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1c788:	4620      	mov	r0, r4
   1c78a:	b003      	add	sp, #12
   1c78c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   1c790:	f389 8811 	msr	BASEPRI, r9
   1c794:	f3bf 8f6f 	isb	sy
	return result;
   1c798:	e7f6      	b.n	1c788 <k_mem_slab_alloc+0x90>
   1c79a:	bf00      	nop
   1c79c:	0002679f 	.word	0x0002679f
   1c7a0:	00026718 	.word	0x00026718
   1c7a4:	20002f64 	.word	0x20002f64

0001c7a8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1c7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7ac:	4604      	mov	r4, r0
   1c7ae:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1c7b0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1c7b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c7b8:	f3ef 8711 	mrs	r7, BASEPRI
   1c7bc:	f383 8812 	msr	BASEPRI_MAX, r3
   1c7c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c7c4:	4630      	mov	r0, r6
   1c7c6:	f000 f941 	bl	1ca4c <z_spin_lock_valid>
   1c7ca:	b940      	cbnz	r0, 1c7de <k_mem_slab_free+0x36>
   1c7cc:	491c      	ldr	r1, [pc, #112]	; (1c840 <k_mem_slab_free+0x98>)
   1c7ce:	481d      	ldr	r0, [pc, #116]	; (1c844 <k_mem_slab_free+0x9c>)
   1c7d0:	2294      	movs	r2, #148	; 0x94
   1c7d2:	f006 fc24 	bl	2301e <assert_print>
   1c7d6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c7d8:	4819      	ldr	r0, [pc, #100]	; (1c840 <k_mem_slab_free+0x98>)
   1c7da:	f006 fc19 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c7de:	4630      	mov	r0, r6
   1c7e0:	f000 f952 	bl	1ca88 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c7e4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1c7e8:	f1b8 0f00 	cmp.w	r8, #0
   1c7ec:	d10f      	bne.n	1c80e <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1c7ee:	4620      	mov	r0, r4
   1c7f0:	f001 fe1e 	bl	1e430 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1c7f4:	b158      	cbz	r0, 1c80e <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1c7f6:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1c7f8:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1c7fa:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1c7fe:	f001 f9c7 	bl	1db90 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1c802:	4639      	mov	r1, r7
   1c804:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1c806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1c80a:	f001 b9f5 	b.w	1dbf8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1c80e:	682b      	ldr	r3, [r5, #0]
   1c810:	69a2      	ldr	r2, [r4, #24]
   1c812:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1c814:	682b      	ldr	r3, [r5, #0]
   1c816:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1c818:	69e3      	ldr	r3, [r4, #28]
   1c81a:	3b01      	subs	r3, #1
   1c81c:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c81e:	4630      	mov	r0, r6
   1c820:	f000 f922 	bl	1ca68 <z_spin_unlock_valid>
   1c824:	b930      	cbnz	r0, 1c834 <k_mem_slab_free+0x8c>
   1c826:	4906      	ldr	r1, [pc, #24]	; (1c840 <k_mem_slab_free+0x98>)
   1c828:	4806      	ldr	r0, [pc, #24]	; (1c844 <k_mem_slab_free+0x9c>)
   1c82a:	22c2      	movs	r2, #194	; 0xc2
   1c82c:	f006 fbf7 	bl	2301e <assert_print>
   1c830:	21c2      	movs	r1, #194	; 0xc2
   1c832:	e7d1      	b.n	1c7d8 <k_mem_slab_free+0x30>
	__asm__ volatile(
   1c834:	f387 8811 	msr	BASEPRI, r7
   1c838:	f3bf 8f6f 	isb	sy
}
   1c83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c840:	0002679f 	.word	0x0002679f
   1c844:	00026718 	.word	0x00026718

0001c848 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1c848:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c84a:	b085      	sub	sp, #20
   1c84c:	4604      	mov	r4, r0
   1c84e:	980d      	ldr	r0, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   1c850:	280f      	cmp	r0, #15
   1c852:	d12e      	bne.n	1c8b2 <z_setup_new_thread+0x6a>
   1c854:	4d1e      	ldr	r5, [pc, #120]	; (1c8d0 <z_setup_new_thread+0x88>)
   1c856:	42ab      	cmp	r3, r5
   1c858:	d12f      	bne.n	1c8ba <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1c85a:	f104 0558 	add.w	r5, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1c85e:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1c862:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c864:	7325      	strb	r5, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c866:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   1c868:	2504      	movs	r5, #4
   1c86a:	7365      	strb	r5, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c86c:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1c870:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   1c874:	e9c4 251a 	strd	r2, r5, [r4, #104]	; 0x68
	thread_base->pended_on = NULL;
   1c878:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c87a:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->prio = priority;
   1c87c:	73a0      	strb	r0, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1c87e:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   1c882:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   1c884:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   1c886:	6726      	str	r6, [r4, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c888:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c88c:	9202      	str	r2, [sp, #8]
   1c88e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c890:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1c892:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c896:	9200      	str	r2, [sp, #0]
   1c898:	4620      	mov	r0, r4
   1c89a:	463a      	mov	r2, r7
   1c89c:	f7f5 ffe0 	bl	12860 <arch_new_thread>
	if (!_current) {
   1c8a0:	4b0c      	ldr	r3, [pc, #48]	; (1c8d4 <z_setup_new_thread+0x8c>)
	new_thread->init_data = NULL;
   1c8a2:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   1c8a4:	689b      	ldr	r3, [r3, #8]
   1c8a6:	b103      	cbz	r3, 1c8aa <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
   1c8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1c8aa:	6763      	str	r3, [r4, #116]	; 0x74
}
   1c8ac:	4638      	mov	r0, r7
   1c8ae:	b005      	add	sp, #20
   1c8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1c8b2:	f100 0510 	add.w	r5, r0, #16
   1c8b6:	2d1e      	cmp	r5, #30
   1c8b8:	d9cf      	bls.n	1c85a <z_setup_new_thread+0x12>
   1c8ba:	4907      	ldr	r1, [pc, #28]	; (1c8d8 <z_setup_new_thread+0x90>)
   1c8bc:	4807      	ldr	r0, [pc, #28]	; (1c8dc <z_setup_new_thread+0x94>)
   1c8be:	f44f 7206 	mov.w	r2, #536	; 0x218
   1c8c2:	f006 fbac 	bl	2301e <assert_print>
   1c8c6:	4804      	ldr	r0, [pc, #16]	; (1c8d8 <z_setup_new_thread+0x90>)
   1c8c8:	f44f 7106 	mov.w	r1, #536	; 0x218
   1c8cc:	f006 fba0 	bl	23010 <assert_post_action>
   1c8d0:	0001ca99 	.word	0x0001ca99
   1c8d4:	20002f64 	.word	0x20002f64
   1c8d8:	00028747 	.word	0x00028747
   1c8dc:	00026718 	.word	0x00026718

0001c8e0 <z_impl_k_thread_create>:
{
   1c8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c8e2:	b087      	sub	sp, #28
   1c8e4:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   1c8e8:	4604      	mov	r4, r0
   1c8ea:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1c8ee:	b155      	cbz	r5, 1c906 <z_impl_k_thread_create+0x26>
   1c8f0:	4917      	ldr	r1, [pc, #92]	; (1c950 <z_impl_k_thread_create+0x70>)
   1c8f2:	4818      	ldr	r0, [pc, #96]	; (1c954 <z_impl_k_thread_create+0x74>)
   1c8f4:	f240 2287 	movw	r2, #647	; 0x287
   1c8f8:	f006 fb91 	bl	2301e <assert_print>
   1c8fc:	4814      	ldr	r0, [pc, #80]	; (1c950 <z_impl_k_thread_create+0x70>)
   1c8fe:	f240 2187 	movw	r1, #647	; 0x287
   1c902:	f006 fb85 	bl	23010 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c906:	9505      	str	r5, [sp, #20]
   1c908:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1c90a:	9504      	str	r5, [sp, #16]
   1c90c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1c90e:	9503      	str	r5, [sp, #12]
   1c910:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c912:	9502      	str	r5, [sp, #8]
   1c914:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1c916:	9501      	str	r5, [sp, #4]
   1c918:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1c91a:	9500      	str	r5, [sp, #0]
   1c91c:	f7ff ff94 	bl	1c848 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1c920:	f1b6 3fff 	cmp.w	r6, #4294967295
   1c924:	bf08      	it	eq
   1c926:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1c92a:	d005      	beq.n	1c938 <z_impl_k_thread_create+0x58>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c92c:	ea56 0307 	orrs.w	r3, r6, r7
   1c930:	d105      	bne.n	1c93e <z_impl_k_thread_create+0x5e>
	z_sched_start(thread);
   1c932:	4620      	mov	r0, r4
   1c934:	f001 f994 	bl	1dc60 <z_sched_start>
}
   1c938:	4620      	mov	r0, r4
   1c93a:	b007      	add	sp, #28
   1c93c:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c93e:	4906      	ldr	r1, [pc, #24]	; (1c958 <z_impl_k_thread_create+0x78>)
   1c940:	463a      	mov	r2, r7
   1c942:	4633      	mov	r3, r6
   1c944:	f104 0018 	add.w	r0, r4, #24
   1c948:	f002 f854 	bl	1e9f4 <z_add_timeout>
   1c94c:	e7f4      	b.n	1c938 <z_impl_k_thread_create+0x58>
   1c94e:	bf00      	nop
   1c950:	00028747 	.word	0x00028747
   1c954:	00026718 	.word	0x00026718
   1c958:	0001e3a5 	.word	0x0001e3a5

0001c95c <z_init_static_threads>:
{
   1c95c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c960:	4c35      	ldr	r4, [pc, #212]	; (1ca38 <z_init_static_threads+0xdc>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1c962:	4d36      	ldr	r5, [pc, #216]	; (1ca3c <z_init_static_threads+0xe0>)
{
   1c964:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1c966:	42ac      	cmp	r4, r5
   1c968:	4626      	mov	r6, r4
   1c96a:	d926      	bls.n	1c9ba <z_init_static_threads+0x5e>
   1c96c:	4934      	ldr	r1, [pc, #208]	; (1ca40 <z_init_static_threads+0xe4>)
   1c96e:	4835      	ldr	r0, [pc, #212]	; (1ca44 <z_init_static_threads+0xe8>)
   1c970:	f240 22ee 	movw	r2, #750	; 0x2ee
   1c974:	f006 fb53 	bl	2301e <assert_print>
   1c978:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   1c97c:	4830      	ldr	r0, [pc, #192]	; (1ca40 <z_init_static_threads+0xe4>)
   1c97e:	f006 fb47 	bl	23010 <assert_post_action>
		z_setup_new_thread(
   1c982:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c986:	9305      	str	r3, [sp, #20]
   1c988:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1c98c:	9304      	str	r3, [sp, #16]
   1c98e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c992:	9303      	str	r3, [sp, #12]
   1c994:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1c998:	9302      	str	r3, [sp, #8]
   1c99a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1c99e:	9301      	str	r3, [sp, #4]
   1c9a0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1c9a4:	9300      	str	r3, [sp, #0]
   1c9a6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1c9aa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1c9ae:	f7ff ff4b 	bl	1c848 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1c9b2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1c9b6:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1c9b8:	e7d5      	b.n	1c966 <z_init_static_threads+0xa>
   1c9ba:	42ae      	cmp	r6, r5
   1c9bc:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1c9c0:	d3df      	bcc.n	1c982 <z_init_static_threads+0x26>
	k_sched_lock();
   1c9c2:	f001 f98d 	bl	1dce0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c9c6:	4c1c      	ldr	r4, [pc, #112]	; (1ca38 <z_init_static_threads+0xdc>)
   1c9c8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1ca48 <z_init_static_threads+0xec>
			return ((t * to_hz + off) / from_hz);
   1c9cc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1c9d0:	f240 37e7 	movw	r7, #999	; 0x3e7
   1c9d4:	42ac      	cmp	r4, r5
   1c9d6:	d928      	bls.n	1ca2a <z_init_static_threads+0xce>
   1c9d8:	4919      	ldr	r1, [pc, #100]	; (1ca40 <z_init_static_threads+0xe4>)
   1c9da:	481a      	ldr	r0, [pc, #104]	; (1ca44 <z_init_static_threads+0xe8>)
   1c9dc:	f240 320d 	movw	r2, #781	; 0x30d
   1c9e0:	f006 fb1d 	bl	2301e <assert_print>
   1c9e4:	f240 310d 	movw	r1, #781	; 0x30d
   1c9e8:	e7c8      	b.n	1c97c <z_init_static_threads+0x20>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1c9ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c9ec:	1c5a      	adds	r2, r3, #1
   1c9ee:	d00d      	beq.n	1ca0c <z_init_static_threads+0xb0>
					    K_MSEC(thread_data->init_delay));
   1c9f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c9f4:	2100      	movs	r1, #0
   1c9f6:	4638      	mov	r0, r7
   1c9f8:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c9fc:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1ca00:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ca04:	d104      	bne.n	1ca10 <z_init_static_threads+0xb4>
	z_sched_start(thread);
   1ca06:	4640      	mov	r0, r8
   1ca08:	f001 f92a 	bl	1dc60 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ca0c:	3430      	adds	r4, #48	; 0x30
   1ca0e:	e7e1      	b.n	1c9d4 <z_init_static_threads+0x78>
   1ca10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ca14:	2300      	movs	r3, #0
   1ca16:	f7e3 feb7 	bl	788 <__aeabi_uldivmod>
   1ca1a:	4602      	mov	r2, r0
   1ca1c:	460b      	mov	r3, r1
   1ca1e:	f108 0018 	add.w	r0, r8, #24
   1ca22:	4649      	mov	r1, r9
   1ca24:	f001 ffe6 	bl	1e9f4 <z_add_timeout>
   1ca28:	e7f0      	b.n	1ca0c <z_init_static_threads+0xb0>
   1ca2a:	d3de      	bcc.n	1c9ea <z_init_static_threads+0x8e>
}
   1ca2c:	b007      	add	sp, #28
   1ca2e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1ca32:	f001 b9a1 	b.w	1dd78 <k_sched_unlock>
   1ca36:	bf00      	nop
   1ca38:	000258f8 	.word	0x000258f8
   1ca3c:	000258f8 	.word	0x000258f8
   1ca40:	00028747 	.word	0x00028747
   1ca44:	00026718 	.word	0x00026718
   1ca48:	0001e3a5 	.word	0x0001e3a5

0001ca4c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1ca4c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1ca4e:	b138      	cbz	r0, 1ca60 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1ca50:	4b04      	ldr	r3, [pc, #16]	; (1ca64 <z_spin_lock_valid+0x18>)
   1ca52:	7d1b      	ldrb	r3, [r3, #20]
   1ca54:	f000 0003 	and.w	r0, r0, #3
   1ca58:	1ac0      	subs	r0, r0, r3
   1ca5a:	bf18      	it	ne
   1ca5c:	2001      	movne	r0, #1
   1ca5e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1ca60:	2001      	movs	r0, #1
}
   1ca62:	4770      	bx	lr
   1ca64:	20002f64 	.word	0x20002f64

0001ca68 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1ca68:	4a06      	ldr	r2, [pc, #24]	; (1ca84 <z_spin_unlock_valid+0x1c>)
   1ca6a:	7d11      	ldrb	r1, [r2, #20]
   1ca6c:	6892      	ldr	r2, [r2, #8]
   1ca6e:	430a      	orrs	r2, r1
   1ca70:	6801      	ldr	r1, [r0, #0]
{
   1ca72:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1ca74:	4291      	cmp	r1, r2
   1ca76:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   1ca7a:	bf04      	itt	eq
   1ca7c:	6018      	streq	r0, [r3, #0]
	return true;
   1ca7e:	2001      	moveq	r0, #1
}
   1ca80:	4770      	bx	lr
   1ca82:	bf00      	nop
   1ca84:	20002f64 	.word	0x20002f64

0001ca88 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1ca88:	4b02      	ldr	r3, [pc, #8]	; (1ca94 <z_spin_lock_set_owner+0xc>)
   1ca8a:	7d1a      	ldrb	r2, [r3, #20]
   1ca8c:	689b      	ldr	r3, [r3, #8]
   1ca8e:	4313      	orrs	r3, r2
   1ca90:	6003      	str	r3, [r0, #0]
}
   1ca92:	4770      	bx	lr
   1ca94:	20002f64 	.word	0x20002f64

0001ca98 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1ca98:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1ca9a:	4c12      	ldr	r4, [pc, #72]	; (1cae4 <idle+0x4c>)
   1ca9c:	68a3      	ldr	r3, [r4, #8]
   1ca9e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1caa2:	2b00      	cmp	r3, #0
   1caa4:	db10      	blt.n	1cac8 <idle+0x30>
	return !z_sys_post_kernel;
   1caa6:	4d10      	ldr	r5, [pc, #64]	; (1cae8 <idle+0x50>)
	__asm__ volatile(
   1caa8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1caac:	f3ef 8311 	mrs	r3, BASEPRI
   1cab0:	f382 8812 	msr	BASEPRI_MAX, r2
   1cab4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1cab8:	f002 f882 	bl	1ebc0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1cabc:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1cabe:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1cac0:	b95b      	cbnz	r3, 1cada <idle+0x42>
	arch_cpu_idle();
   1cac2:	f7f5 fdab 	bl	1261c <arch_cpu_idle>
}
   1cac6:	e7ef      	b.n	1caa8 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1cac8:	4908      	ldr	r1, [pc, #32]	; (1caec <idle+0x54>)
   1caca:	4809      	ldr	r0, [pc, #36]	; (1caf0 <idle+0x58>)
   1cacc:	2227      	movs	r2, #39	; 0x27
   1cace:	f006 faa6 	bl	2301e <assert_print>
   1cad2:	4806      	ldr	r0, [pc, #24]	; (1caec <idle+0x54>)
   1cad4:	2127      	movs	r1, #39	; 0x27
   1cad6:	f006 fa9b 	bl	23010 <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1cada:	f7f5 fb53 	bl	12184 <pm_system_suspend>
   1cade:	2800      	cmp	r0, #0
   1cae0:	d1e2      	bne.n	1caa8 <idle+0x10>
   1cae2:	e7ee      	b.n	1cac2 <idle+0x2a>
   1cae4:	20002f64 	.word	0x20002f64
   1cae8:	200058b7 	.word	0x200058b7
   1caec:	0002876a 	.word	0x0002876a
   1caf0:	00026718 	.word	0x00026718

0001caf4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1caf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1caf8:	4604      	mov	r4, r0
   1cafa:	4617      	mov	r7, r2
   1cafc:	461e      	mov	r6, r3
   1cafe:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1cb02:	b145      	cbz	r5, 1cb16 <z_impl_k_mutex_lock+0x22>
   1cb04:	4951      	ldr	r1, [pc, #324]	; (1cc4c <z_impl_k_mutex_lock+0x158>)
   1cb06:	4852      	ldr	r0, [pc, #328]	; (1cc50 <z_impl_k_mutex_lock+0x15c>)
   1cb08:	2265      	movs	r2, #101	; 0x65
   1cb0a:	f006 fa88 	bl	2301e <assert_print>
   1cb0e:	484f      	ldr	r0, [pc, #316]	; (1cc4c <z_impl_k_mutex_lock+0x158>)
   1cb10:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cb12:	f006 fa7d 	bl	23010 <assert_post_action>
   1cb16:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb1a:	f3ef 8811 	mrs	r8, BASEPRI
   1cb1e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb22:	f3bf 8f6f 	isb	sy
   1cb26:	484b      	ldr	r0, [pc, #300]	; (1cc54 <z_impl_k_mutex_lock+0x160>)
   1cb28:	f7ff ff90 	bl	1ca4c <z_spin_lock_valid>
   1cb2c:	b938      	cbnz	r0, 1cb3e <z_impl_k_mutex_lock+0x4a>
   1cb2e:	494a      	ldr	r1, [pc, #296]	; (1cc58 <z_impl_k_mutex_lock+0x164>)
   1cb30:	4847      	ldr	r0, [pc, #284]	; (1cc50 <z_impl_k_mutex_lock+0x15c>)
   1cb32:	2294      	movs	r2, #148	; 0x94
   1cb34:	f006 fa73 	bl	2301e <assert_print>
   1cb38:	2194      	movs	r1, #148	; 0x94
   1cb3a:	4847      	ldr	r0, [pc, #284]	; (1cc58 <z_impl_k_mutex_lock+0x164>)
   1cb3c:	e7e9      	b.n	1cb12 <z_impl_k_mutex_lock+0x1e>
	z_spin_lock_set_owner(l);
   1cb3e:	4845      	ldr	r0, [pc, #276]	; (1cc54 <z_impl_k_mutex_lock+0x160>)
   1cb40:	f7ff ffa2 	bl	1ca88 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1cb44:	68e3      	ldr	r3, [r4, #12]
   1cb46:	4a45      	ldr	r2, [pc, #276]	; (1cc5c <z_impl_k_mutex_lock+0x168>)
   1cb48:	b19b      	cbz	r3, 1cb72 <z_impl_k_mutex_lock+0x7e>
   1cb4a:	68a0      	ldr	r0, [r4, #8]
   1cb4c:	6891      	ldr	r1, [r2, #8]
   1cb4e:	4288      	cmp	r0, r1
   1cb50:	d022      	beq.n	1cb98 <z_impl_k_mutex_lock+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1cb52:	ea57 0306 	orrs.w	r3, r7, r6
   1cb56:	d127      	bne.n	1cba8 <z_impl_k_mutex_lock+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cb58:	483e      	ldr	r0, [pc, #248]	; (1cc54 <z_impl_k_mutex_lock+0x160>)
   1cb5a:	f7ff ff85 	bl	1ca68 <z_spin_unlock_valid>
   1cb5e:	b1a0      	cbz	r0, 1cb8a <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   1cb60:	f388 8811 	msr	BASEPRI, r8
   1cb64:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1cb68:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1cb6c:	b002      	add	sp, #8
   1cb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1cb72:	6891      	ldr	r1, [r2, #8]
   1cb74:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1cb78:	4836      	ldr	r0, [pc, #216]	; (1cc54 <z_impl_k_mutex_lock+0x160>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1cb7a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1cb7c:	3301      	adds	r3, #1
   1cb7e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1cb80:	6893      	ldr	r3, [r2, #8]
   1cb82:	60a3      	str	r3, [r4, #8]
   1cb84:	f7ff ff70 	bl	1ca68 <z_spin_unlock_valid>
   1cb88:	b940      	cbnz	r0, 1cb9c <z_impl_k_mutex_lock+0xa8>
   1cb8a:	4933      	ldr	r1, [pc, #204]	; (1cc58 <z_impl_k_mutex_lock+0x164>)
   1cb8c:	4830      	ldr	r0, [pc, #192]	; (1cc50 <z_impl_k_mutex_lock+0x15c>)
   1cb8e:	22c2      	movs	r2, #194	; 0xc2
   1cb90:	f006 fa45 	bl	2301e <assert_print>
   1cb94:	21c2      	movs	r1, #194	; 0xc2
   1cb96:	e7d0      	b.n	1cb3a <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
   1cb98:	6921      	ldr	r1, [r4, #16]
   1cb9a:	e7ed      	b.n	1cb78 <z_impl_k_mutex_lock+0x84>
   1cb9c:	f388 8811 	msr	BASEPRI, r8
   1cba0:	f3bf 8f6f 	isb	sy
		return 0;
   1cba4:	2000      	movs	r0, #0
   1cba6:	e7e1      	b.n	1cb6c <z_impl_k_mutex_lock+0x78>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1cba8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1cbac:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1cbb0:	4299      	cmp	r1, r3
   1cbb2:	bfa8      	it	ge
   1cbb4:	4619      	movge	r1, r3
   1cbb6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1cbba:	4291      	cmp	r1, r2
   1cbbc:	bfb8      	it	lt
   1cbbe:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1cbc0:	428b      	cmp	r3, r1
   1cbc2:	dd02      	ble.n	1cbca <z_impl_k_mutex_lock+0xd6>
		resched = adjust_owner_prio(mutex, new_prio);
   1cbc4:	f008 fb61 	bl	2528a <adjust_owner_prio.isra.0>
   1cbc8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1cbca:	e9cd 7600 	strd	r7, r6, [sp]
   1cbce:	4821      	ldr	r0, [pc, #132]	; (1cc54 <z_impl_k_mutex_lock+0x160>)
   1cbd0:	4622      	mov	r2, r4
   1cbd2:	4641      	mov	r1, r8
   1cbd4:	f001 fa64 	bl	1e0a0 <z_pend_curr>
	if (got_mutex == 0) {
   1cbd8:	2800      	cmp	r0, #0
   1cbda:	d0e3      	beq.n	1cba4 <z_impl_k_mutex_lock+0xb0>
	__asm__ volatile(
   1cbdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cbe0:	f3ef 8611 	mrs	r6, BASEPRI
   1cbe4:	f383 8812 	msr	BASEPRI_MAX, r3
   1cbe8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cbec:	4819      	ldr	r0, [pc, #100]	; (1cc54 <z_impl_k_mutex_lock+0x160>)
   1cbee:	f7ff ff2d 	bl	1ca4c <z_spin_lock_valid>
   1cbf2:	2800      	cmp	r0, #0
   1cbf4:	d09b      	beq.n	1cb2e <z_impl_k_mutex_lock+0x3a>
	z_spin_lock_set_owner(l);
   1cbf6:	4817      	ldr	r0, [pc, #92]	; (1cc54 <z_impl_k_mutex_lock+0x160>)
   1cbf8:	f7ff ff46 	bl	1ca88 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   1cbfc:	68a0      	ldr	r0, [r4, #8]
   1cbfe:	b1c0      	cbz	r0, 1cc32 <z_impl_k_mutex_lock+0x13e>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1cc00:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1cc02:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cc04:	429c      	cmp	r4, r3
   1cc06:	d00a      	beq.n	1cc1e <z_impl_k_mutex_lock+0x12a>
   1cc08:	b14b      	cbz	r3, 1cc1e <z_impl_k_mutex_lock+0x12a>
   1cc0a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1cc0e:	4299      	cmp	r1, r3
   1cc10:	bfa8      	it	ge
   1cc12:	4619      	movge	r1, r3
   1cc14:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1cc18:	4299      	cmp	r1, r3
   1cc1a:	bfb8      	it	lt
   1cc1c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1cc1e:	f008 fb34 	bl	2528a <adjust_owner_prio.isra.0>
   1cc22:	b130      	cbz	r0, 1cc32 <z_impl_k_mutex_lock+0x13e>
		z_reschedule(&lock, key);
   1cc24:	480b      	ldr	r0, [pc, #44]	; (1cc54 <z_impl_k_mutex_lock+0x160>)
   1cc26:	4631      	mov	r1, r6
   1cc28:	f000 ffe6 	bl	1dbf8 <z_reschedule>
	return -EAGAIN;
   1cc2c:	f06f 000a 	mvn.w	r0, #10
   1cc30:	e79c      	b.n	1cb6c <z_impl_k_mutex_lock+0x78>
	if (resched) {
   1cc32:	2d00      	cmp	r5, #0
   1cc34:	d1f6      	bne.n	1cc24 <z_impl_k_mutex_lock+0x130>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cc36:	4807      	ldr	r0, [pc, #28]	; (1cc54 <z_impl_k_mutex_lock+0x160>)
   1cc38:	f7ff ff16 	bl	1ca68 <z_spin_unlock_valid>
   1cc3c:	2800      	cmp	r0, #0
   1cc3e:	d0a4      	beq.n	1cb8a <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   1cc40:	f386 8811 	msr	BASEPRI, r6
   1cc44:	f3bf 8f6f 	isb	sy
   1cc48:	e7f0      	b.n	1cc2c <z_impl_k_mutex_lock+0x138>
   1cc4a:	bf00      	nop
   1cc4c:	0002878b 	.word	0x0002878b
   1cc50:	00026718 	.word	0x00026718
   1cc54:	20002f8c 	.word	0x20002f8c
   1cc58:	0002679f 	.word	0x0002679f
   1cc5c:	20002f64 	.word	0x20002f64

0001cc60 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1cc60:	b570      	push	{r4, r5, r6, lr}
   1cc62:	4604      	mov	r4, r0
   1cc64:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1cc68:	b146      	cbz	r6, 1cc7c <z_impl_k_mutex_unlock+0x1c>
   1cc6a:	4930      	ldr	r1, [pc, #192]	; (1cd2c <z_impl_k_mutex_unlock+0xcc>)
   1cc6c:	4830      	ldr	r0, [pc, #192]	; (1cd30 <z_impl_k_mutex_unlock+0xd0>)
   1cc6e:	22cd      	movs	r2, #205	; 0xcd
   1cc70:	f006 f9d5 	bl	2301e <assert_print>
   1cc74:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1cc76:	482d      	ldr	r0, [pc, #180]	; (1cd2c <z_impl_k_mutex_unlock+0xcc>)
   1cc78:	f006 f9ca 	bl	23010 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   1cc7c:	6883      	ldr	r3, [r0, #8]
   1cc7e:	2b00      	cmp	r3, #0
   1cc80:	d04e      	beq.n	1cd20 <z_impl_k_mutex_unlock+0xc0>
	CHECKIF(mutex->owner != _current) {
   1cc82:	4a2c      	ldr	r2, [pc, #176]	; (1cd34 <z_impl_k_mutex_unlock+0xd4>)
   1cc84:	6892      	ldr	r2, [r2, #8]
   1cc86:	4293      	cmp	r3, r2
   1cc88:	d14d      	bne.n	1cd26 <z_impl_k_mutex_unlock+0xc6>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1cc8a:	68c3      	ldr	r3, [r0, #12]
   1cc8c:	b933      	cbnz	r3, 1cc9c <z_impl_k_mutex_unlock+0x3c>
   1cc8e:	4927      	ldr	r1, [pc, #156]	; (1cd2c <z_impl_k_mutex_unlock+0xcc>)
   1cc90:	4827      	ldr	r0, [pc, #156]	; (1cd30 <z_impl_k_mutex_unlock+0xd0>)
   1cc92:	22e5      	movs	r2, #229	; 0xe5
   1cc94:	f006 f9c3 	bl	2301e <assert_print>
   1cc98:	21e5      	movs	r1, #229	; 0xe5
   1cc9a:	e7ec      	b.n	1cc76 <z_impl_k_mutex_unlock+0x16>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1cc9c:	2b01      	cmp	r3, #1
   1cc9e:	d003      	beq.n	1cca8 <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count--;
   1cca0:	3b01      	subs	r3, #1
   1cca2:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1cca4:	2000      	movs	r0, #0
}
   1cca6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1cca8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ccac:	f3ef 8511 	mrs	r5, BASEPRI
   1ccb0:	f383 8812 	msr	BASEPRI_MAX, r3
   1ccb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ccb8:	481f      	ldr	r0, [pc, #124]	; (1cd38 <z_impl_k_mutex_unlock+0xd8>)
   1ccba:	f7ff fec7 	bl	1ca4c <z_spin_lock_valid>
   1ccbe:	b938      	cbnz	r0, 1ccd0 <z_impl_k_mutex_unlock+0x70>
   1ccc0:	491e      	ldr	r1, [pc, #120]	; (1cd3c <z_impl_k_mutex_unlock+0xdc>)
   1ccc2:	481b      	ldr	r0, [pc, #108]	; (1cd30 <z_impl_k_mutex_unlock+0xd0>)
   1ccc4:	2294      	movs	r2, #148	; 0x94
   1ccc6:	f006 f9aa 	bl	2301e <assert_print>
   1ccca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cccc:	481b      	ldr	r0, [pc, #108]	; (1cd3c <z_impl_k_mutex_unlock+0xdc>)
   1ccce:	e7d3      	b.n	1cc78 <z_impl_k_mutex_unlock+0x18>
	z_spin_lock_set_owner(l);
   1ccd0:	4819      	ldr	r0, [pc, #100]	; (1cd38 <z_impl_k_mutex_unlock+0xd8>)
   1ccd2:	f7ff fed9 	bl	1ca88 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1ccd6:	6921      	ldr	r1, [r4, #16]
   1ccd8:	68a0      	ldr	r0, [r4, #8]
   1ccda:	f008 fad6 	bl	2528a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1ccde:	4620      	mov	r0, r4
   1cce0:	f001 fba6 	bl	1e430 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1cce4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1cce6:	b150      	cbz	r0, 1ccfe <z_impl_k_mutex_unlock+0x9e>
		mutex->owner_orig_prio = new_owner->base.prio;
   1cce8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1ccec:	6122      	str	r2, [r4, #16]
   1ccee:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1ccf0:	f000 ff4e 	bl	1db90 <z_ready_thread>
		z_reschedule(&lock, key);
   1ccf4:	4810      	ldr	r0, [pc, #64]	; (1cd38 <z_impl_k_mutex_unlock+0xd8>)
   1ccf6:	4629      	mov	r1, r5
   1ccf8:	f000 ff7e 	bl	1dbf8 <z_reschedule>
   1ccfc:	e7d2      	b.n	1cca4 <z_impl_k_mutex_unlock+0x44>
		mutex->lock_count = 0U;
   1ccfe:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cd00:	480d      	ldr	r0, [pc, #52]	; (1cd38 <z_impl_k_mutex_unlock+0xd8>)
   1cd02:	f7ff feb1 	bl	1ca68 <z_spin_unlock_valid>
   1cd06:	b930      	cbnz	r0, 1cd16 <z_impl_k_mutex_unlock+0xb6>
   1cd08:	490c      	ldr	r1, [pc, #48]	; (1cd3c <z_impl_k_mutex_unlock+0xdc>)
   1cd0a:	4809      	ldr	r0, [pc, #36]	; (1cd30 <z_impl_k_mutex_unlock+0xd0>)
   1cd0c:	22c2      	movs	r2, #194	; 0xc2
   1cd0e:	f006 f986 	bl	2301e <assert_print>
   1cd12:	21c2      	movs	r1, #194	; 0xc2
   1cd14:	e7da      	b.n	1cccc <z_impl_k_mutex_unlock+0x6c>
	__asm__ volatile(
   1cd16:	f385 8811 	msr	BASEPRI, r5
   1cd1a:	f3bf 8f6f 	isb	sy
   1cd1e:	e7c1      	b.n	1cca4 <z_impl_k_mutex_unlock+0x44>
		return -EINVAL;
   1cd20:	f06f 0015 	mvn.w	r0, #21
   1cd24:	e7bf      	b.n	1cca6 <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
   1cd26:	f04f 30ff 	mov.w	r0, #4294967295
   1cd2a:	e7bc      	b.n	1cca6 <z_impl_k_mutex_unlock+0x46>
   1cd2c:	0002878b 	.word	0x0002878b
   1cd30:	00026718 	.word	0x00026718
   1cd34:	20002f64 	.word	0x20002f64
   1cd38:	20002f8c 	.word	0x20002f8c
   1cd3c:	0002679f 	.word	0x0002679f

0001cd40 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1cd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cd44:	4604      	mov	r4, r0
   1cd46:	f89d a020 	ldrb.w	sl, [sp, #32]
   1cd4a:	460d      	mov	r5, r1
   1cd4c:	4690      	mov	r8, r2
   1cd4e:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1cd50:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1cd54:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd58:	f3ef 8711 	mrs	r7, BASEPRI
   1cd5c:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cd64:	4630      	mov	r0, r6
   1cd66:	f7ff fe71 	bl	1ca4c <z_spin_lock_valid>
   1cd6a:	b940      	cbnz	r0, 1cd7e <queue_insert+0x3e>
   1cd6c:	4936      	ldr	r1, [pc, #216]	; (1ce48 <queue_insert+0x108>)
   1cd6e:	4837      	ldr	r0, [pc, #220]	; (1ce4c <queue_insert+0x10c>)
   1cd70:	2294      	movs	r2, #148	; 0x94
   1cd72:	f006 f954 	bl	2301e <assert_print>
   1cd76:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cd78:	4833      	ldr	r0, [pc, #204]	; (1ce48 <queue_insert+0x108>)
   1cd7a:	f006 f949 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cd7e:	4630      	mov	r0, r6
   1cd80:	f7ff fe82 	bl	1ca88 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   1cd84:	f1ba 0f00 	cmp.w	sl, #0
   1cd88:	d000      	beq.n	1cd8c <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1cd8a:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1cd8c:	f104 000c 	add.w	r0, r4, #12
   1cd90:	f001 fb4e 	bl	1e430 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1cd94:	b158      	cbz	r0, 1cdae <queue_insert+0x6e>
   1cd96:	2300      	movs	r3, #0
   1cd98:	67c3      	str	r3, [r0, #124]	; 0x7c
   1cd9a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1cd9e:	f000 fef7 	bl	1db90 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1cda2:	4630      	mov	r0, r6
   1cda4:	4639      	mov	r1, r7
   1cda6:	f000 ff27 	bl	1dbf8 <z_reschedule>
		return 0;
   1cdaa:	2000      	movs	r0, #0
   1cdac:	e017      	b.n	1cdde <queue_insert+0x9e>
	if (alloc) {
   1cdae:	f1b9 0f00 	cmp.w	r9, #0
   1cdb2:	d026      	beq.n	1ce02 <queue_insert+0xc2>
	return z_thread_aligned_alloc(0, size);
   1cdb4:	2108      	movs	r1, #8
   1cdb6:	f002 fac1 	bl	1f33c <z_thread_aligned_alloc>
		if (anode == NULL) {
   1cdba:	b990      	cbnz	r0, 1cde2 <queue_insert+0xa2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cdbc:	4630      	mov	r0, r6
   1cdbe:	f7ff fe53 	bl	1ca68 <z_spin_unlock_valid>
   1cdc2:	b930      	cbnz	r0, 1cdd2 <queue_insert+0x92>
   1cdc4:	4920      	ldr	r1, [pc, #128]	; (1ce48 <queue_insert+0x108>)
   1cdc6:	4821      	ldr	r0, [pc, #132]	; (1ce4c <queue_insert+0x10c>)
   1cdc8:	22c2      	movs	r2, #194	; 0xc2
   1cdca:	f006 f928 	bl	2301e <assert_print>
   1cdce:	21c2      	movs	r1, #194	; 0xc2
   1cdd0:	e7d2      	b.n	1cd78 <queue_insert+0x38>
	__asm__ volatile(
   1cdd2:	f387 8811 	msr	BASEPRI, r7
   1cdd6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1cdda:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   1cdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1cde2:	2201      	movs	r2, #1
		anode->data = data;
   1cde4:	f8c0 8004 	str.w	r8, [r0, #4]
   1cde8:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cdea:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cdec:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1cdf0:	b95d      	cbnz	r5, 1ce0a <queue_insert+0xca>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cdf2:	6822      	ldr	r2, [r4, #0]
   1cdf4:	430a      	orrs	r2, r1
   1cdf6:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1cdf8:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1cdfa:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1cdfc:	b96a      	cbnz	r2, 1ce1a <queue_insert+0xda>
	list->tail = node;
   1cdfe:	6060      	str	r0, [r4, #4]
}
   1ce00:	e00b      	b.n	1ce1a <queue_insert+0xda>
	node->next_and_flags = flags;
   1ce02:	f8c8 9000 	str.w	r9, [r8]
}
   1ce06:	4640      	mov	r0, r8
   1ce08:	e7ef      	b.n	1cdea <queue_insert+0xaa>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ce0a:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1ce0c:	2a03      	cmp	r2, #3
   1ce0e:	d810      	bhi.n	1ce32 <queue_insert+0xf2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ce10:	6001      	str	r1, [r0, #0]
	return list->tail;
   1ce12:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1ce14:	b939      	cbnz	r1, 1ce26 <queue_insert+0xe6>
	list->head = node;
   1ce16:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1ce1a:	2104      	movs	r1, #4
   1ce1c:	f104 0014 	add.w	r0, r4, #20
   1ce20:	f008 fbcc 	bl	255bc <z_handle_obj_poll_events>
   1ce24:	e7bd      	b.n	1cda2 <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ce26:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ce28:	f002 0203 	and.w	r2, r2, #3
   1ce2c:	4302      	orrs	r2, r0
   1ce2e:	600a      	str	r2, [r1, #0]
   1ce30:	e7e5      	b.n	1cdfe <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ce32:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ce36:	430a      	orrs	r2, r1
   1ce38:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ce3a:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ce3c:	f002 0203 	and.w	r2, r2, #3
   1ce40:	ea40 0302 	orr.w	r3, r0, r2
   1ce44:	602b      	str	r3, [r5, #0]
}
   1ce46:	e7e8      	b.n	1ce1a <queue_insert+0xda>
   1ce48:	0002679f 	.word	0x0002679f
   1ce4c:	00026718 	.word	0x00026718

0001ce50 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1ce50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ce54:	4605      	mov	r5, r0
   1ce56:	4616      	mov	r6, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   1ce58:	460c      	mov	r4, r1
   1ce5a:	2900      	cmp	r1, #0
   1ce5c:	d045      	beq.n	1ceea <k_queue_append_list+0x9a>
   1ce5e:	2a00      	cmp	r2, #0
   1ce60:	d043      	beq.n	1ceea <k_queue_append_list+0x9a>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1ce62:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1ce66:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce6a:	f3ef 8911 	mrs	r9, BASEPRI
   1ce6e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ce76:	4638      	mov	r0, r7
   1ce78:	f7ff fde8 	bl	1ca4c <z_spin_lock_valid>
   1ce7c:	b940      	cbnz	r0, 1ce90 <k_queue_append_list+0x40>
   1ce7e:	491c      	ldr	r1, [pc, #112]	; (1cef0 <k_queue_append_list+0xa0>)
   1ce80:	481c      	ldr	r0, [pc, #112]	; (1cef4 <k_queue_append_list+0xa4>)
   1ce82:	2294      	movs	r2, #148	; 0x94
   1ce84:	f006 f8cb 	bl	2301e <assert_print>
   1ce88:	4819      	ldr	r0, [pc, #100]	; (1cef0 <k_queue_append_list+0xa0>)
   1ce8a:	2194      	movs	r1, #148	; 0x94
   1ce8c:	f006 f8c0 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ce90:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   1ce92:	f105 080c 	add.w	r8, r5, #12
   1ce96:	f7ff fdf7 	bl	1ca88 <z_spin_lock_set_owner>
   1ce9a:	4640      	mov	r0, r8
   1ce9c:	f001 fac8 	bl	1e430 <z_unpend_first_thread>
	}

	while ((head != NULL) && (thread != NULL)) {
   1cea0:	b168      	cbz	r0, 1cebe <k_queue_append_list+0x6e>
   1cea2:	f04f 0a00 	mov.w	sl, #0
	thread->base.swap_data = data;
   1cea6:	6144      	str	r4, [r0, #20]
   1cea8:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1ceac:	f000 fe70 	bl	1db90 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   1ceb0:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1ceb2:	4640      	mov	r0, r8
   1ceb4:	f001 fabc 	bl	1e430 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1ceb8:	b12c      	cbz	r4, 1cec6 <k_queue_append_list+0x76>
   1ceba:	2800      	cmp	r0, #0
   1cebc:	d1f3      	bne.n	1cea6 <k_queue_append_list+0x56>
	return list->tail;
   1cebe:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1cec0:	b96b      	cbnz	r3, 1cede <k_queue_append_list+0x8e>
	list->head = node;
   1cec2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1cec4:	606e      	str	r6, [r5, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1cec6:	2104      	movs	r1, #4
   1cec8:	f105 0014 	add.w	r0, r5, #20
   1cecc:	f008 fb76 	bl	255bc <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1ced0:	4638      	mov	r0, r7
   1ced2:	4649      	mov	r1, r9
   1ced4:	f000 fe90 	bl	1dbf8 <z_reschedule>
	return 0;
   1ced8:	2000      	movs	r0, #0
}
   1ceda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cede:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cee0:	f002 0203 	and.w	r2, r2, #3
   1cee4:	4314      	orrs	r4, r2
   1cee6:	601c      	str	r4, [r3, #0]
}
   1cee8:	e7ec      	b.n	1cec4 <k_queue_append_list+0x74>
		return -EINVAL;
   1ceea:	f06f 0015 	mvn.w	r0, #21
   1ceee:	e7f4      	b.n	1ceda <k_queue_append_list+0x8a>
   1cef0:	0002679f 	.word	0x0002679f
   1cef4:	00026718 	.word	0x00026718

0001cef8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1cef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1cefc:	4605      	mov	r5, r0
   1cefe:	4691      	mov	r9, r2
   1cf00:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1cf02:	f100 0608 	add.w	r6, r0, #8
   1cf06:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf0a:	f3ef 8811 	mrs	r8, BASEPRI
   1cf0e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cf16:	4630      	mov	r0, r6
   1cf18:	f7ff fd98 	bl	1ca4c <z_spin_lock_valid>
   1cf1c:	b940      	cbnz	r0, 1cf30 <z_impl_k_queue_get+0x38>
   1cf1e:	491f      	ldr	r1, [pc, #124]	; (1cf9c <z_impl_k_queue_get+0xa4>)
   1cf20:	481f      	ldr	r0, [pc, #124]	; (1cfa0 <z_impl_k_queue_get+0xa8>)
   1cf22:	2294      	movs	r2, #148	; 0x94
   1cf24:	f006 f87b 	bl	2301e <assert_print>
   1cf28:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cf2a:	481c      	ldr	r0, [pc, #112]	; (1cf9c <z_impl_k_queue_get+0xa4>)
   1cf2c:	f006 f870 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cf30:	4630      	mov	r0, r6
   1cf32:	f7ff fda9 	bl	1ca88 <z_spin_lock_set_owner>
	return list->head;
   1cf36:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1cf38:	b1bc      	cbz	r4, 1cf6a <z_impl_k_queue_get+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cf3a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1cf3c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cf3e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1cf42:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1cf44:	4620      	mov	r0, r4
	list->head = node;
   1cf46:	602b      	str	r3, [r5, #0]
	list->tail = node;
   1cf48:	bf08      	it	eq
   1cf4a:	606b      	streq	r3, [r5, #4]
   1cf4c:	2101      	movs	r1, #1
   1cf4e:	f008 f9ab 	bl	252a8 <z_queue_node_peek>
   1cf52:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cf54:	4630      	mov	r0, r6
   1cf56:	f7ff fd87 	bl	1ca68 <z_spin_unlock_valid>
   1cf5a:	b9b0      	cbnz	r0, 1cf8a <z_impl_k_queue_get+0x92>
   1cf5c:	490f      	ldr	r1, [pc, #60]	; (1cf9c <z_impl_k_queue_get+0xa4>)
   1cf5e:	4810      	ldr	r0, [pc, #64]	; (1cfa0 <z_impl_k_queue_get+0xa8>)
   1cf60:	22c2      	movs	r2, #194	; 0xc2
   1cf62:	f006 f85c 	bl	2301e <assert_print>
   1cf66:	21c2      	movs	r1, #194	; 0xc2
   1cf68:	e7df      	b.n	1cf2a <z_impl_k_queue_get+0x32>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1cf6a:	ea59 0307 	orrs.w	r3, r9, r7
   1cf6e:	d0f1      	beq.n	1cf54 <z_impl_k_queue_get+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1cf70:	e9cd 9700 	strd	r9, r7, [sp]
   1cf74:	f105 020c 	add.w	r2, r5, #12
   1cf78:	4641      	mov	r1, r8
   1cf7a:	4630      	mov	r0, r6
   1cf7c:	f001 f890 	bl	1e0a0 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   1cf80:	b938      	cbnz	r0, 1cf92 <z_impl_k_queue_get+0x9a>
   1cf82:	4b08      	ldr	r3, [pc, #32]	; (1cfa4 <z_impl_k_queue_get+0xac>)
   1cf84:	689b      	ldr	r3, [r3, #8]
   1cf86:	695c      	ldr	r4, [r3, #20]
   1cf88:	e003      	b.n	1cf92 <z_impl_k_queue_get+0x9a>
	__asm__ volatile(
   1cf8a:	f388 8811 	msr	BASEPRI, r8
   1cf8e:	f3bf 8f6f 	isb	sy
}
   1cf92:	4620      	mov	r0, r4
   1cf94:	b003      	add	sp, #12
   1cf96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cf9a:	bf00      	nop
   1cf9c:	0002679f 	.word	0x0002679f
   1cfa0:	00026718 	.word	0x00026718
   1cfa4:	20002f64 	.word	0x20002f64

0001cfa8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1cfa8:	b538      	push	{r3, r4, r5, lr}
   1cfaa:	4604      	mov	r4, r0
	__asm__ volatile(
   1cfac:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cfb0:	f3ef 8511 	mrs	r5, BASEPRI
   1cfb4:	f383 8812 	msr	BASEPRI_MAX, r3
   1cfb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cfbc:	4814      	ldr	r0, [pc, #80]	; (1d010 <z_impl_k_sem_give+0x68>)
   1cfbe:	f7ff fd45 	bl	1ca4c <z_spin_lock_valid>
   1cfc2:	b940      	cbnz	r0, 1cfd6 <z_impl_k_sem_give+0x2e>
   1cfc4:	4913      	ldr	r1, [pc, #76]	; (1d014 <z_impl_k_sem_give+0x6c>)
   1cfc6:	4814      	ldr	r0, [pc, #80]	; (1d018 <z_impl_k_sem_give+0x70>)
   1cfc8:	2294      	movs	r2, #148	; 0x94
   1cfca:	f006 f828 	bl	2301e <assert_print>
   1cfce:	4811      	ldr	r0, [pc, #68]	; (1d014 <z_impl_k_sem_give+0x6c>)
   1cfd0:	2194      	movs	r1, #148	; 0x94
   1cfd2:	f006 f81d 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cfd6:	480e      	ldr	r0, [pc, #56]	; (1d010 <z_impl_k_sem_give+0x68>)
   1cfd8:	f7ff fd56 	bl	1ca88 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1cfdc:	4620      	mov	r0, r4
   1cfde:	f001 fa27 	bl	1e430 <z_unpend_first_thread>

	if (thread != NULL) {
   1cfe2:	b148      	cbz	r0, 1cff8 <z_impl_k_sem_give+0x50>
   1cfe4:	2200      	movs	r2, #0
   1cfe6:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1cfe8:	f000 fdd2 	bl	1db90 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1cfec:	4629      	mov	r1, r5
   1cfee:	4808      	ldr	r0, [pc, #32]	; (1d010 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1cff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1cff4:	f000 be00 	b.w	1dbf8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1cff8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1cffc:	429a      	cmp	r2, r3
   1cffe:	bf18      	it	ne
   1d000:	3301      	addne	r3, #1
   1d002:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1d004:	2102      	movs	r1, #2
   1d006:	f104 0010 	add.w	r0, r4, #16
   1d00a:	f008 fad7 	bl	255bc <z_handle_obj_poll_events>
}
   1d00e:	e7ed      	b.n	1cfec <z_impl_k_sem_give+0x44>
   1d010:	20002f90 	.word	0x20002f90
   1d014:	0002679f 	.word	0x0002679f
   1d018:	00026718 	.word	0x00026718

0001d01c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1d01c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d01e:	4604      	mov	r4, r0
   1d020:	4616      	mov	r6, r2
   1d022:	461d      	mov	r5, r3
   1d024:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1d028:	b15b      	cbz	r3, 1d042 <z_impl_k_sem_take+0x26>
   1d02a:	ea52 0305 	orrs.w	r3, r2, r5
   1d02e:	d008      	beq.n	1d042 <z_impl_k_sem_take+0x26>
   1d030:	4926      	ldr	r1, [pc, #152]	; (1d0cc <z_impl_k_sem_take+0xb0>)
   1d032:	4827      	ldr	r0, [pc, #156]	; (1d0d0 <z_impl_k_sem_take+0xb4>)
   1d034:	2279      	movs	r2, #121	; 0x79
   1d036:	f005 fff2 	bl	2301e <assert_print>
   1d03a:	4824      	ldr	r0, [pc, #144]	; (1d0cc <z_impl_k_sem_take+0xb0>)
   1d03c:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d03e:	f005 ffe7 	bl	23010 <assert_post_action>
   1d042:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d046:	f3ef 8711 	mrs	r7, BASEPRI
   1d04a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d04e:	f3bf 8f6f 	isb	sy
   1d052:	4820      	ldr	r0, [pc, #128]	; (1d0d4 <z_impl_k_sem_take+0xb8>)
   1d054:	f7ff fcfa 	bl	1ca4c <z_spin_lock_valid>
   1d058:	b938      	cbnz	r0, 1d06a <z_impl_k_sem_take+0x4e>
   1d05a:	491f      	ldr	r1, [pc, #124]	; (1d0d8 <z_impl_k_sem_take+0xbc>)
   1d05c:	481c      	ldr	r0, [pc, #112]	; (1d0d0 <z_impl_k_sem_take+0xb4>)
   1d05e:	2294      	movs	r2, #148	; 0x94
   1d060:	f005 ffdd 	bl	2301e <assert_print>
   1d064:	2194      	movs	r1, #148	; 0x94
   1d066:	481c      	ldr	r0, [pc, #112]	; (1d0d8 <z_impl_k_sem_take+0xbc>)
   1d068:	e7e9      	b.n	1d03e <z_impl_k_sem_take+0x22>
	z_spin_lock_set_owner(l);
   1d06a:	481a      	ldr	r0, [pc, #104]	; (1d0d4 <z_impl_k_sem_take+0xb8>)
   1d06c:	f7ff fd0c 	bl	1ca88 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1d070:	68a3      	ldr	r3, [r4, #8]
   1d072:	b19b      	cbz	r3, 1d09c <z_impl_k_sem_take+0x80>
		sem->count--;
   1d074:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d076:	4817      	ldr	r0, [pc, #92]	; (1d0d4 <z_impl_k_sem_take+0xb8>)
   1d078:	60a3      	str	r3, [r4, #8]
   1d07a:	f7ff fcf5 	bl	1ca68 <z_spin_unlock_valid>
   1d07e:	b930      	cbnz	r0, 1d08e <z_impl_k_sem_take+0x72>
   1d080:	4915      	ldr	r1, [pc, #84]	; (1d0d8 <z_impl_k_sem_take+0xbc>)
   1d082:	4813      	ldr	r0, [pc, #76]	; (1d0d0 <z_impl_k_sem_take+0xb4>)
   1d084:	22c2      	movs	r2, #194	; 0xc2
   1d086:	f005 ffca 	bl	2301e <assert_print>
   1d08a:	21c2      	movs	r1, #194	; 0xc2
   1d08c:	e7eb      	b.n	1d066 <z_impl_k_sem_take+0x4a>
	__asm__ volatile(
   1d08e:	f387 8811 	msr	BASEPRI, r7
   1d092:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1d096:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1d098:	b003      	add	sp, #12
   1d09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d09c:	ea56 0305 	orrs.w	r3, r6, r5
   1d0a0:	d10b      	bne.n	1d0ba <z_impl_k_sem_take+0x9e>
   1d0a2:	480c      	ldr	r0, [pc, #48]	; (1d0d4 <z_impl_k_sem_take+0xb8>)
   1d0a4:	f7ff fce0 	bl	1ca68 <z_spin_unlock_valid>
   1d0a8:	2800      	cmp	r0, #0
   1d0aa:	d0e9      	beq.n	1d080 <z_impl_k_sem_take+0x64>
   1d0ac:	f387 8811 	msr	BASEPRI, r7
   1d0b0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1d0b4:	f06f 000f 	mvn.w	r0, #15
   1d0b8:	e7ee      	b.n	1d098 <z_impl_k_sem_take+0x7c>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1d0ba:	e9cd 6500 	strd	r6, r5, [sp]
   1d0be:	4622      	mov	r2, r4
   1d0c0:	4639      	mov	r1, r7
   1d0c2:	4804      	ldr	r0, [pc, #16]	; (1d0d4 <z_impl_k_sem_take+0xb8>)
   1d0c4:	f000 ffec 	bl	1e0a0 <z_pend_curr>
	return ret;
   1d0c8:	e7e6      	b.n	1d098 <z_impl_k_sem_take+0x7c>
   1d0ca:	bf00      	nop
   1d0cc:	000287ad 	.word	0x000287ad
   1d0d0:	00026718 	.word	0x00026718
   1d0d4:	20002f90 	.word	0x20002f90
   1d0d8:	0002679f 	.word	0x0002679f

0001d0dc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1d0dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1d0de:	4b09      	ldr	r3, [pc, #36]	; (1d104 <k_sys_work_q_init+0x28>)
   1d0e0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1d0e2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1d0e4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1d0e6:	9300      	str	r3, [sp, #0]
   1d0e8:	4907      	ldr	r1, [pc, #28]	; (1d108 <k_sys_work_q_init+0x2c>)
   1d0ea:	4808      	ldr	r0, [pc, #32]	; (1d10c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1d0ec:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1d0f0:	f04f 33ff 	mov.w	r3, #4294967295
   1d0f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d0f8:	f000 fa66 	bl	1d5c8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1d0fc:	4620      	mov	r0, r4
   1d0fe:	b004      	add	sp, #16
   1d100:	bd10      	pop	{r4, pc}
   1d102:	bf00      	nop
   1d104:	000287cd 	.word	0x000287cd
   1d108:	20008300 	.word	0x20008300
   1d10c:	200020e0 	.word	0x200020e0

0001d110 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d114:	4e68      	ldr	r6, [pc, #416]	; (1d2b8 <work_queue_main+0x1a8>)
	return list->head;
   1d116:	4f69      	ldr	r7, [pc, #420]	; (1d2bc <work_queue_main+0x1ac>)
   1d118:	b085      	sub	sp, #20
   1d11a:	4604      	mov	r4, r0
	__asm__ volatile(
   1d11c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d120:	f3ef 8811 	mrs	r8, BASEPRI
   1d124:	f383 8812 	msr	BASEPRI_MAX, r3
   1d128:	f3bf 8f6f 	isb	sy
   1d12c:	4630      	mov	r0, r6
   1d12e:	f7ff fc8d 	bl	1ca4c <z_spin_lock_valid>
   1d132:	b940      	cbnz	r0, 1d146 <work_queue_main+0x36>
   1d134:	4962      	ldr	r1, [pc, #392]	; (1d2c0 <work_queue_main+0x1b0>)
   1d136:	4863      	ldr	r0, [pc, #396]	; (1d2c4 <work_queue_main+0x1b4>)
   1d138:	2294      	movs	r2, #148	; 0x94
   1d13a:	f005 ff70 	bl	2301e <assert_print>
   1d13e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d140:	485f      	ldr	r0, [pc, #380]	; (1d2c0 <work_queue_main+0x1b0>)
   1d142:	f005 ff65 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d146:	4630      	mov	r0, r6
   1d148:	f7ff fc9e 	bl	1ca88 <z_spin_lock_set_owner>
   1d14c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1d150:	b9a5      	cbnz	r5, 1d17c <work_queue_main+0x6c>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1d152:	2102      	movs	r1, #2
   1d154:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1d158:	f008 f8e4 	bl	25324 <flag_test_and_clear>
   1d15c:	bb80      	cbnz	r0, 1d1c0 <work_queue_main+0xb0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1d15e:	2300      	movs	r3, #0
   1d160:	9302      	str	r3, [sp, #8]
   1d162:	f04f 32ff 	mov.w	r2, #4294967295
   1d166:	f04f 33ff 	mov.w	r3, #4294967295
   1d16a:	e9cd 2300 	strd	r2, r3, [sp]
   1d16e:	4641      	mov	r1, r8
   1d170:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1d174:	4630      	mov	r0, r6
   1d176:	f001 fbc3 	bl	1e900 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   1d17a:	e7cf      	b.n	1d11c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d17c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1d180:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1d182:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d186:	4295      	cmp	r5, r2
	list->tail = node;
   1d188:	bf08      	it	eq
   1d18a:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1d18e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1d192:	f043 0302 	orr.w	r3, r3, #2
   1d196:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1d19a:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   1d19c:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   1d1a0:	f023 0304 	bic.w	r3, r3, #4
   1d1a4:	f043 0301 	orr.w	r3, r3, #1
   1d1a8:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d1aa:	4630      	mov	r0, r6
   1d1ac:	f7ff fc5c 	bl	1ca68 <z_spin_unlock_valid>
   1d1b0:	b980      	cbnz	r0, 1d1d4 <work_queue_main+0xc4>
   1d1b2:	4943      	ldr	r1, [pc, #268]	; (1d2c0 <work_queue_main+0x1b0>)
   1d1b4:	4843      	ldr	r0, [pc, #268]	; (1d2c4 <work_queue_main+0x1b4>)
   1d1b6:	22c2      	movs	r2, #194	; 0xc2
   1d1b8:	f005 ff31 	bl	2301e <assert_print>
   1d1bc:	21c2      	movs	r1, #194	; 0xc2
   1d1be:	e7bf      	b.n	1d140 <work_queue_main+0x30>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1d1c0:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1d1c4:	2200      	movs	r2, #0
   1d1c6:	2101      	movs	r1, #1
   1d1c8:	4628      	mov	r0, r5
   1d1ca:	f001 fb4d 	bl	1e868 <z_sched_wake>
   1d1ce:	2800      	cmp	r0, #0
   1d1d0:	d1f8      	bne.n	1d1c4 <work_queue_main+0xb4>
   1d1d2:	e7c4      	b.n	1d15e <work_queue_main+0x4e>
	__asm__ volatile(
   1d1d4:	f388 8811 	msr	BASEPRI, r8
   1d1d8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   1d1dc:	f1b9 0f00 	cmp.w	r9, #0
   1d1e0:	d109      	bne.n	1d1f6 <work_queue_main+0xe6>
   1d1e2:	4939      	ldr	r1, [pc, #228]	; (1d2c8 <work_queue_main+0x1b8>)
   1d1e4:	4837      	ldr	r0, [pc, #220]	; (1d2c4 <work_queue_main+0x1b4>)
   1d1e6:	f240 229b 	movw	r2, #667	; 0x29b
   1d1ea:	f005 ff18 	bl	2301e <assert_print>
   1d1ee:	4836      	ldr	r0, [pc, #216]	; (1d2c8 <work_queue_main+0x1b8>)
   1d1f0:	f240 219b 	movw	r1, #667	; 0x29b
   1d1f4:	e7a5      	b.n	1d142 <work_queue_main+0x32>
		handler(work);
   1d1f6:	4628      	mov	r0, r5
   1d1f8:	47c8      	blx	r9
	__asm__ volatile(
   1d1fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d1fe:	f3ef 8a11 	mrs	sl, BASEPRI
   1d202:	f383 8812 	msr	BASEPRI_MAX, r3
   1d206:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d20a:	4630      	mov	r0, r6
   1d20c:	f7ff fc1e 	bl	1ca4c <z_spin_lock_valid>
   1d210:	2800      	cmp	r0, #0
   1d212:	d08f      	beq.n	1d134 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   1d214:	4630      	mov	r0, r6
   1d216:	f7ff fc37 	bl	1ca88 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   1d21a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d21c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1d21e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d222:	d417      	bmi.n	1d254 <work_queue_main+0x144>
	*flagp &= ~BIT(bit);
   1d224:	60ea      	str	r2, [r5, #12]
   1d226:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1d22a:	f023 0302 	bic.w	r3, r3, #2
   1d22e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d232:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   1d234:	f3c3 2500 	ubfx	r5, r3, #8, #1
   1d238:	f7ff fc16 	bl	1ca68 <z_spin_unlock_valid>
   1d23c:	2800      	cmp	r0, #0
   1d23e:	d0b8      	beq.n	1d1b2 <work_queue_main+0xa2>
	__asm__ volatile(
   1d240:	f38a 8811 	msr	BASEPRI, sl
   1d244:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1d248:	2d00      	cmp	r5, #0
   1d24a:	f47f af67 	bne.w	1d11c <work_queue_main+0xc>
	z_impl_k_yield();
   1d24e:	f001 f939 	bl	1e4c4 <z_impl_k_yield>
}
   1d252:	e763      	b.n	1d11c <work_queue_main+0xc>
	return list->head;
   1d254:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   1d256:	f023 0303 	bic.w	r3, r3, #3
   1d25a:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d25c:	2800      	cmp	r0, #0
   1d25e:	d0e2      	beq.n	1d226 <work_queue_main+0x116>
	return node->next;
   1d260:	f04f 0800 	mov.w	r8, #0
   1d264:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   1d268:	46c3      	mov	fp, r8
   1d26a:	2800      	cmp	r0, #0
   1d26c:	d0db      	beq.n	1d226 <work_queue_main+0x116>
		if (wc->work == work) {
   1d26e:	6843      	ldr	r3, [r0, #4]
   1d270:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1d272:	4602      	mov	r2, r0
		if (wc->work == work) {
   1d274:	d10d      	bne.n	1d292 <work_queue_main+0x182>
	return node->next;
   1d276:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d278:	f1b8 0f00 	cmp.w	r8, #0
   1d27c:	d112      	bne.n	1d2a4 <work_queue_main+0x194>
   1d27e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   1d280:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d282:	4283      	cmp	r3, r0
   1d284:	d100      	bne.n	1d288 <work_queue_main+0x178>
	list->tail = node;
   1d286:	607a      	str	r2, [r7, #4]
	parent->next = child;
   1d288:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   1d28c:	f7ff fe8c 	bl	1cfa8 <z_impl_k_sem_give>
}
   1d290:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d292:	f1b9 0f00 	cmp.w	r9, #0
   1d296:	d00d      	beq.n	1d2b4 <work_queue_main+0x1a4>
	return node->next;
   1d298:	f8d9 3000 	ldr.w	r3, [r9]
   1d29c:	4648      	mov	r0, r9
   1d29e:	4690      	mov	r8, r2
   1d2a0:	4699      	mov	r9, r3
   1d2a2:	e7e2      	b.n	1d26a <work_queue_main+0x15a>
	parent->next = child;
   1d2a4:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   1d2a8:	687b      	ldr	r3, [r7, #4]
   1d2aa:	4283      	cmp	r3, r0
	list->tail = node;
   1d2ac:	bf08      	it	eq
   1d2ae:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   1d2b2:	e7e9      	b.n	1d288 <work_queue_main+0x178>
   1d2b4:	464b      	mov	r3, r9
   1d2b6:	e7f1      	b.n	1d29c <work_queue_main+0x18c>
   1d2b8:	20002f9c 	.word	0x20002f9c
   1d2bc:	20002f94 	.word	0x20002f94
   1d2c0:	0002679f 	.word	0x0002679f
   1d2c4:	00026718 	.word	0x00026718
   1d2c8:	000287d6 	.word	0x000287d6

0001d2cc <cancel_sync_locked>:
{
   1d2cc:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1d2ce:	68c3      	ldr	r3, [r0, #12]
   1d2d0:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1d2d4:	079b      	lsls	r3, r3, #30
{
   1d2d6:	4605      	mov	r5, r0
   1d2d8:	460c      	mov	r4, r1
	if (ret) {
   1d2da:	d50d      	bpl.n	1d2f8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d2dc:	2201      	movs	r2, #1
   1d2de:	2100      	movs	r1, #0
   1d2e0:	f104 0008 	add.w	r0, r4, #8
   1d2e4:	f008 f80e 	bl	25304 <z_impl_k_sem_init>
	parent->next = child;
   1d2e8:	2300      	movs	r3, #0
   1d2ea:	6023      	str	r3, [r4, #0]
	return list->tail;
   1d2ec:	4b05      	ldr	r3, [pc, #20]	; (1d304 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1d2ee:	6065      	str	r5, [r4, #4]
   1d2f0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1d2f2:	b91a      	cbnz	r2, 1d2fc <cancel_sync_locked+0x30>
	list->head = node;
   1d2f4:	e9c3 4400 	strd	r4, r4, [r3]
}
   1d2f8:	4630      	mov	r0, r6
   1d2fa:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1d2fc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1d2fe:	605c      	str	r4, [r3, #4]
}
   1d300:	e7fa      	b.n	1d2f8 <cancel_sync_locked+0x2c>
   1d302:	bf00      	nop
   1d304:	20002f94 	.word	0x20002f94

0001d308 <submit_to_queue_locked>:
{
   1d308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1d30a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d30c:	079a      	lsls	r2, r3, #30
{
   1d30e:	4604      	mov	r4, r0
   1d310:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d312:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1d316:	d438      	bmi.n	1d38a <submit_to_queue_locked+0x82>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1d318:	075b      	lsls	r3, r3, #29
   1d31a:	d424      	bmi.n	1d366 <submit_to_queue_locked+0x5e>
		if (*queuep == NULL) {
   1d31c:	680b      	ldr	r3, [r1, #0]
   1d31e:	b90b      	cbnz	r3, 1d324 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1d320:	6883      	ldr	r3, [r0, #8]
   1d322:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1d324:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1d326:	07dd      	lsls	r5, r3, #31
   1d328:	d520      	bpl.n	1d36c <submit_to_queue_locked+0x64>
			__ASSERT_NO_MSG(work->queue != NULL);
   1d32a:	68a3      	ldr	r3, [r4, #8]
   1d32c:	b953      	cbnz	r3, 1d344 <submit_to_queue_locked+0x3c>
   1d32e:	4928      	ldr	r1, [pc, #160]	; (1d3d0 <submit_to_queue_locked+0xc8>)
   1d330:	4828      	ldr	r0, [pc, #160]	; (1d3d4 <submit_to_queue_locked+0xcc>)
   1d332:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   1d336:	f005 fe72 	bl	2301e <assert_print>
   1d33a:	4825      	ldr	r0, [pc, #148]	; (1d3d0 <submit_to_queue_locked+0xc8>)
   1d33c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1d340:	f005 fe66 	bl	23010 <assert_post_action>
			*queuep = work->queue;
   1d344:	603b      	str	r3, [r7, #0]
			ret = 2;
   1d346:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   1d348:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   1d34a:	2d00      	cmp	r5, #0
   1d34c:	d03c      	beq.n	1d3c8 <submit_to_queue_locked+0xc0>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d34e:	4b22      	ldr	r3, [pc, #136]	; (1d3d8 <submit_to_queue_locked+0xd0>)
   1d350:	689b      	ldr	r3, [r3, #8]
   1d352:	42ab      	cmp	r3, r5
   1d354:	d00c      	beq.n	1d370 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   1d356:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d35a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1d35c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d360:	d416      	bmi.n	1d390 <submit_to_queue_locked+0x88>
		ret = -EBUSY;
   1d362:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1d366:	2300      	movs	r3, #0
   1d368:	603b      	str	r3, [r7, #0]
	return ret;
   1d36a:	e027      	b.n	1d3bc <submit_to_queue_locked+0xb4>
		ret = 1;
   1d36c:	2601      	movs	r6, #1
   1d36e:	e7eb      	b.n	1d348 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d370:	f007 ff77 	bl	25262 <k_is_in_isr>
   1d374:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1d378:	2800      	cmp	r0, #0
   1d37a:	d1ee      	bne.n	1d35a <submit_to_queue_locked+0x52>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d37c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1d37e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d382:	d5ee      	bpl.n	1d362 <submit_to_queue_locked+0x5a>
	} else if (plugged && !draining) {
   1d384:	b152      	cbz	r2, 1d39c <submit_to_queue_locked+0x94>
   1d386:	075b      	lsls	r3, r3, #29
   1d388:	d408      	bmi.n	1d39c <submit_to_queue_locked+0x94>
		ret = -EBUSY;
   1d38a:	f06f 060f 	mvn.w	r6, #15
   1d38e:	e7ea      	b.n	1d366 <submit_to_queue_locked+0x5e>
	} else if (draining && !chained) {
   1d390:	2a00      	cmp	r2, #0
   1d392:	d1fa      	bne.n	1d38a <submit_to_queue_locked+0x82>
	return (*flagp & BIT(bit)) != 0U;
   1d394:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1d398:	2b00      	cmp	r3, #0
   1d39a:	d1f6      	bne.n	1d38a <submit_to_queue_locked+0x82>
	parent->next = child;
   1d39c:	2300      	movs	r3, #0
   1d39e:	6023      	str	r3, [r4, #0]
	return list->tail;
   1d3a0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1d3a4:	b963      	cbnz	r3, 1d3c0 <submit_to_queue_locked+0xb8>
	list->head = node;
   1d3a6:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1d3aa:	4628      	mov	r0, r5
   1d3ac:	f007 ffd3 	bl	25356 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1d3b0:	68e3      	ldr	r3, [r4, #12]
   1d3b2:	f043 0304 	orr.w	r3, r3, #4
   1d3b6:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1d3b8:	683b      	ldr	r3, [r7, #0]
   1d3ba:	60a3      	str	r3, [r4, #8]
}
   1d3bc:	4630      	mov	r0, r6
   1d3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1d3c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d3c2:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   1d3c6:	e7f0      	b.n	1d3aa <submit_to_queue_locked+0xa2>
		return -EINVAL;
   1d3c8:	f06f 0615 	mvn.w	r6, #21
   1d3cc:	e7cb      	b.n	1d366 <submit_to_queue_locked+0x5e>
   1d3ce:	bf00      	nop
   1d3d0:	000287d6 	.word	0x000287d6
   1d3d4:	00026718 	.word	0x00026718
   1d3d8:	20002f64 	.word	0x20002f64

0001d3dc <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   1d3dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d3de:	4604      	mov	r4, r0
	__asm__ volatile(
   1d3e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d3e4:	f3ef 8511 	mrs	r5, BASEPRI
   1d3e8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d3f0:	4817      	ldr	r0, [pc, #92]	; (1d450 <work_timeout+0x74>)
   1d3f2:	f7ff fb2b 	bl	1ca4c <z_spin_lock_valid>
   1d3f6:	b940      	cbnz	r0, 1d40a <work_timeout+0x2e>
   1d3f8:	4916      	ldr	r1, [pc, #88]	; (1d454 <work_timeout+0x78>)
   1d3fa:	4817      	ldr	r0, [pc, #92]	; (1d458 <work_timeout+0x7c>)
   1d3fc:	2294      	movs	r2, #148	; 0x94
   1d3fe:	f005 fe0e 	bl	2301e <assert_print>
   1d402:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d404:	4813      	ldr	r0, [pc, #76]	; (1d454 <work_timeout+0x78>)
   1d406:	f005 fe03 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d40a:	4811      	ldr	r0, [pc, #68]	; (1d450 <work_timeout+0x74>)
   1d40c:	f7ff fb3c 	bl	1ca88 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   1d410:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1d412:	2103      	movs	r1, #3
   1d414:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   1d416:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1d418:	f1a4 0610 	sub.w	r6, r4, #16
   1d41c:	f007 ff82 	bl	25324 <flag_test_and_clear>
   1d420:	b128      	cbz	r0, 1d42e <work_timeout+0x52>
		queue = dw->queue;
   1d422:	69a3      	ldr	r3, [r4, #24]
   1d424:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1d426:	a901      	add	r1, sp, #4
   1d428:	4630      	mov	r0, r6
   1d42a:	f7ff ff6d 	bl	1d308 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d42e:	4808      	ldr	r0, [pc, #32]	; (1d450 <work_timeout+0x74>)
   1d430:	f7ff fb1a 	bl	1ca68 <z_spin_unlock_valid>
   1d434:	b930      	cbnz	r0, 1d444 <work_timeout+0x68>
   1d436:	4907      	ldr	r1, [pc, #28]	; (1d454 <work_timeout+0x78>)
   1d438:	4807      	ldr	r0, [pc, #28]	; (1d458 <work_timeout+0x7c>)
   1d43a:	22c2      	movs	r2, #194	; 0xc2
   1d43c:	f005 fdef 	bl	2301e <assert_print>
   1d440:	21c2      	movs	r1, #194	; 0xc2
   1d442:	e7df      	b.n	1d404 <work_timeout+0x28>
	__asm__ volatile(
   1d444:	f385 8811 	msr	BASEPRI, r5
   1d448:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   1d44c:	b002      	add	sp, #8
   1d44e:	bd70      	pop	{r4, r5, r6, pc}
   1d450:	20002f9c 	.word	0x20002f9c
   1d454:	0002679f 	.word	0x0002679f
   1d458:	00026718 	.word	0x00026718

0001d45c <k_work_init>:
{
   1d45c:	b538      	push	{r3, r4, r5, lr}
   1d45e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   1d460:	4604      	mov	r4, r0
   1d462:	b940      	cbnz	r0, 1d476 <k_work_init+0x1a>
   1d464:	490b      	ldr	r1, [pc, #44]	; (1d494 <k_work_init+0x38>)
   1d466:	480c      	ldr	r0, [pc, #48]	; (1d498 <k_work_init+0x3c>)
   1d468:	2289      	movs	r2, #137	; 0x89
   1d46a:	f005 fdd8 	bl	2301e <assert_print>
   1d46e:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   1d470:	4808      	ldr	r0, [pc, #32]	; (1d494 <k_work_init+0x38>)
   1d472:	f005 fdcd 	bl	23010 <assert_post_action>
   1d476:	b931      	cbnz	r1, 1d486 <k_work_init+0x2a>
   1d478:	4906      	ldr	r1, [pc, #24]	; (1d494 <k_work_init+0x38>)
   1d47a:	4807      	ldr	r0, [pc, #28]	; (1d498 <k_work_init+0x3c>)
   1d47c:	228a      	movs	r2, #138	; 0x8a
   1d47e:	f005 fdce 	bl	2301e <assert_print>
   1d482:	218a      	movs	r1, #138	; 0x8a
   1d484:	e7f4      	b.n	1d470 <k_work_init+0x14>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1d486:	2210      	movs	r2, #16
   1d488:	2100      	movs	r1, #0
   1d48a:	f006 f878 	bl	2357e <memset>
   1d48e:	6065      	str	r5, [r4, #4]
}
   1d490:	bd38      	pop	{r3, r4, r5, pc}
   1d492:	bf00      	nop
   1d494:	000287d6 	.word	0x000287d6
   1d498:	00026718 	.word	0x00026718

0001d49c <k_work_busy_get>:
{
   1d49c:	b538      	push	{r3, r4, r5, lr}
   1d49e:	4604      	mov	r4, r0
	__asm__ volatile(
   1d4a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d4a4:	f3ef 8511 	mrs	r5, BASEPRI
   1d4a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d4ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d4b0:	4811      	ldr	r0, [pc, #68]	; (1d4f8 <k_work_busy_get+0x5c>)
   1d4b2:	f7ff facb 	bl	1ca4c <z_spin_lock_valid>
   1d4b6:	b940      	cbnz	r0, 1d4ca <k_work_busy_get+0x2e>
   1d4b8:	4910      	ldr	r1, [pc, #64]	; (1d4fc <k_work_busy_get+0x60>)
   1d4ba:	4811      	ldr	r0, [pc, #68]	; (1d500 <k_work_busy_get+0x64>)
   1d4bc:	2294      	movs	r2, #148	; 0x94
   1d4be:	f005 fdae 	bl	2301e <assert_print>
   1d4c2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d4c4:	480d      	ldr	r0, [pc, #52]	; (1d4fc <k_work_busy_get+0x60>)
   1d4c6:	f005 fda3 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d4ca:	480b      	ldr	r0, [pc, #44]	; (1d4f8 <k_work_busy_get+0x5c>)
   1d4cc:	f7ff fadc 	bl	1ca88 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   1d4d0:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d4d2:	4809      	ldr	r0, [pc, #36]	; (1d4f8 <k_work_busy_get+0x5c>)
   1d4d4:	f004 040f 	and.w	r4, r4, #15
   1d4d8:	f7ff fac6 	bl	1ca68 <z_spin_unlock_valid>
   1d4dc:	b930      	cbnz	r0, 1d4ec <k_work_busy_get+0x50>
   1d4de:	4907      	ldr	r1, [pc, #28]	; (1d4fc <k_work_busy_get+0x60>)
   1d4e0:	4807      	ldr	r0, [pc, #28]	; (1d500 <k_work_busy_get+0x64>)
   1d4e2:	22c2      	movs	r2, #194	; 0xc2
   1d4e4:	f005 fd9b 	bl	2301e <assert_print>
   1d4e8:	21c2      	movs	r1, #194	; 0xc2
   1d4ea:	e7eb      	b.n	1d4c4 <k_work_busy_get+0x28>
	__asm__ volatile(
   1d4ec:	f385 8811 	msr	BASEPRI, r5
   1d4f0:	f3bf 8f6f 	isb	sy
}
   1d4f4:	4620      	mov	r0, r4
   1d4f6:	bd38      	pop	{r3, r4, r5, pc}
   1d4f8:	20002f9c 	.word	0x20002f9c
   1d4fc:	0002679f 	.word	0x0002679f
   1d500:	00026718 	.word	0x00026718

0001d504 <z_work_submit_to_queue>:
{
   1d504:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   1d506:	460c      	mov	r4, r1
{
   1d508:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   1d50a:	b951      	cbnz	r1, 1d522 <z_work_submit_to_queue+0x1e>
   1d50c:	491c      	ldr	r1, [pc, #112]	; (1d580 <z_work_submit_to_queue+0x7c>)
   1d50e:	481d      	ldr	r0, [pc, #116]	; (1d584 <z_work_submit_to_queue+0x80>)
   1d510:	f44f 72ba 	mov.w	r2, #372	; 0x174
   1d514:	f005 fd83 	bl	2301e <assert_print>
   1d518:	4819      	ldr	r0, [pc, #100]	; (1d580 <z_work_submit_to_queue+0x7c>)
   1d51a:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d51e:	f005 fd77 	bl	23010 <assert_post_action>
	__asm__ volatile(
   1d522:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d526:	f3ef 8511 	mrs	r5, BASEPRI
   1d52a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d52e:	f3bf 8f6f 	isb	sy
   1d532:	4815      	ldr	r0, [pc, #84]	; (1d588 <z_work_submit_to_queue+0x84>)
   1d534:	f7ff fa8a 	bl	1ca4c <z_spin_lock_valid>
   1d538:	b938      	cbnz	r0, 1d54a <z_work_submit_to_queue+0x46>
   1d53a:	4914      	ldr	r1, [pc, #80]	; (1d58c <z_work_submit_to_queue+0x88>)
   1d53c:	4811      	ldr	r0, [pc, #68]	; (1d584 <z_work_submit_to_queue+0x80>)
   1d53e:	2294      	movs	r2, #148	; 0x94
   1d540:	f005 fd6d 	bl	2301e <assert_print>
   1d544:	2194      	movs	r1, #148	; 0x94
   1d546:	4811      	ldr	r0, [pc, #68]	; (1d58c <z_work_submit_to_queue+0x88>)
   1d548:	e7e9      	b.n	1d51e <z_work_submit_to_queue+0x1a>
	z_spin_lock_set_owner(l);
   1d54a:	480f      	ldr	r0, [pc, #60]	; (1d588 <z_work_submit_to_queue+0x84>)
   1d54c:	f7ff fa9c 	bl	1ca88 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   1d550:	4620      	mov	r0, r4
   1d552:	a901      	add	r1, sp, #4
   1d554:	f7ff fed8 	bl	1d308 <submit_to_queue_locked>
   1d558:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d55a:	480b      	ldr	r0, [pc, #44]	; (1d588 <z_work_submit_to_queue+0x84>)
   1d55c:	f7ff fa84 	bl	1ca68 <z_spin_unlock_valid>
   1d560:	b930      	cbnz	r0, 1d570 <z_work_submit_to_queue+0x6c>
   1d562:	490a      	ldr	r1, [pc, #40]	; (1d58c <z_work_submit_to_queue+0x88>)
   1d564:	4807      	ldr	r0, [pc, #28]	; (1d584 <z_work_submit_to_queue+0x80>)
   1d566:	22c2      	movs	r2, #194	; 0xc2
   1d568:	f005 fd59 	bl	2301e <assert_print>
   1d56c:	21c2      	movs	r1, #194	; 0xc2
   1d56e:	e7ea      	b.n	1d546 <z_work_submit_to_queue+0x42>
	__asm__ volatile(
   1d570:	f385 8811 	msr	BASEPRI, r5
   1d574:	f3bf 8f6f 	isb	sy
}
   1d578:	4620      	mov	r0, r4
   1d57a:	b003      	add	sp, #12
   1d57c:	bd30      	pop	{r4, r5, pc}
   1d57e:	bf00      	nop
   1d580:	000287d6 	.word	0x000287d6
   1d584:	00026718 	.word	0x00026718
   1d588:	20002f9c 	.word	0x20002f9c
   1d58c:	0002679f 	.word	0x0002679f

0001d590 <k_work_submit>:
{
   1d590:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1d592:	4801      	ldr	r0, [pc, #4]	; (1d598 <k_work_submit+0x8>)
   1d594:	f007 bf19 	b.w	253ca <k_work_submit_to_queue>
   1d598:	200020e0 	.word	0x200020e0

0001d59c <k_work_queue_init>:
{
   1d59c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   1d59e:	b950      	cbnz	r0, 1d5b6 <k_work_queue_init+0x1a>
   1d5a0:	4907      	ldr	r1, [pc, #28]	; (1d5c0 <k_work_queue_init+0x24>)
   1d5a2:	4808      	ldr	r0, [pc, #32]	; (1d5c4 <k_work_queue_init+0x28>)
   1d5a4:	f240 22b9 	movw	r2, #697	; 0x2b9
   1d5a8:	f005 fd39 	bl	2301e <assert_print>
   1d5ac:	4804      	ldr	r0, [pc, #16]	; (1d5c0 <k_work_queue_init+0x24>)
   1d5ae:	f240 21b9 	movw	r1, #697	; 0x2b9
   1d5b2:	f005 fd2d 	bl	23010 <assert_post_action>
	*queue = (struct k_work_q) {
   1d5b6:	22a0      	movs	r2, #160	; 0xa0
   1d5b8:	2100      	movs	r1, #0
   1d5ba:	f005 ffe0 	bl	2357e <memset>
}
   1d5be:	bd08      	pop	{r3, pc}
   1d5c0:	000287d6 	.word	0x000287d6
   1d5c4:	00026718 	.word	0x00026718

0001d5c8 <k_work_queue_start>:
{
   1d5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d5ca:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   1d5cc:	4604      	mov	r4, r0
{
   1d5ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   1d5d0:	b950      	cbnz	r0, 1d5e8 <k_work_queue_start+0x20>
   1d5d2:	492a      	ldr	r1, [pc, #168]	; (1d67c <k_work_queue_start+0xb4>)
   1d5d4:	482a      	ldr	r0, [pc, #168]	; (1d680 <k_work_queue_start+0xb8>)
   1d5d6:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   1d5da:	f005 fd20 	bl	2301e <assert_print>
   1d5de:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   1d5e2:	4826      	ldr	r0, [pc, #152]	; (1d67c <k_work_queue_start+0xb4>)
   1d5e4:	f005 fd14 	bl	23010 <assert_post_action>
   1d5e8:	b941      	cbnz	r1, 1d5fc <k_work_queue_start+0x34>
   1d5ea:	4924      	ldr	r1, [pc, #144]	; (1d67c <k_work_queue_start+0xb4>)
   1d5ec:	4824      	ldr	r0, [pc, #144]	; (1d680 <k_work_queue_start+0xb8>)
   1d5ee:	f240 22c9 	movw	r2, #713	; 0x2c9
   1d5f2:	f005 fd14 	bl	2301e <assert_print>
   1d5f6:	f240 21c9 	movw	r1, #713	; 0x2c9
   1d5fa:	e7f2      	b.n	1d5e2 <k_work_queue_start+0x1a>
	return (*flagp & BIT(bit)) != 0U;
   1d5fc:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   1d600:	f010 0001 	ands.w	r0, r0, #1
   1d604:	d008      	beq.n	1d618 <k_work_queue_start+0x50>
   1d606:	491d      	ldr	r1, [pc, #116]	; (1d67c <k_work_queue_start+0xb4>)
   1d608:	481d      	ldr	r0, [pc, #116]	; (1d680 <k_work_queue_start+0xb8>)
   1d60a:	f240 22ca 	movw	r2, #714	; 0x2ca
   1d60e:	f005 fd06 	bl	2301e <assert_print>
   1d612:	f240 21ca 	movw	r1, #714	; 0x2ca
   1d616:	e7e4      	b.n	1d5e2 <k_work_queue_start+0x1a>
	list->tail = NULL;
   1d618:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1d61c:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1d620:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1d624:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d628:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   1d62c:	b31d      	cbz	r5, 1d676 <k_work_queue_start+0xae>
   1d62e:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1d630:	2800      	cmp	r0, #0
   1d632:	f240 1001 	movw	r0, #257	; 0x101
   1d636:	bf08      	it	eq
   1d638:	2001      	moveq	r0, #1
	*flagp = flags;
   1d63a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d63e:	2000      	movs	r0, #0
   1d640:	f04f 36ff 	mov.w	r6, #4294967295
   1d644:	f04f 37ff 	mov.w	r7, #4294967295
   1d648:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1d64c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1d650:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1d654:	4b0b      	ldr	r3, [pc, #44]	; (1d684 <k_work_queue_start+0xbc>)
   1d656:	9400      	str	r4, [sp, #0]
   1d658:	4620      	mov	r0, r4
   1d65a:	f7ff f941 	bl	1c8e0 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1d65e:	b125      	cbz	r5, 1d66a <k_work_queue_start+0xa2>
   1d660:	6829      	ldr	r1, [r5, #0]
   1d662:	b111      	cbz	r1, 1d66a <k_work_queue_start+0xa2>
	return z_impl_k_thread_name_set(thread, str);
   1d664:	4620      	mov	r0, r4
   1d666:	f007 fe02 	bl	2526e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1d66a:	4620      	mov	r0, r4
}
   1d66c:	b009      	add	sp, #36	; 0x24
   1d66e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d672:	f007 be01 	b.w	25278 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1d676:	2001      	movs	r0, #1
   1d678:	e7df      	b.n	1d63a <k_work_queue_start+0x72>
   1d67a:	bf00      	nop
   1d67c:	000287d6 	.word	0x000287d6
   1d680:	00026718 	.word	0x00026718
   1d684:	0001d111 	.word	0x0001d111

0001d688 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   1d688:	b538      	push	{r3, r4, r5, lr}
   1d68a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1d68c:	4604      	mov	r4, r0
   1d68e:	b950      	cbnz	r0, 1d6a6 <k_work_init_delayable+0x1e>
   1d690:	490e      	ldr	r1, [pc, #56]	; (1d6cc <k_work_init_delayable+0x44>)
   1d692:	480f      	ldr	r0, [pc, #60]	; (1d6d0 <k_work_init_delayable+0x48>)
   1d694:	f44f 7250 	mov.w	r2, #832	; 0x340
   1d698:	f005 fcc1 	bl	2301e <assert_print>
   1d69c:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   1d6a0:	480a      	ldr	r0, [pc, #40]	; (1d6cc <k_work_init_delayable+0x44>)
   1d6a2:	f005 fcb5 	bl	23010 <assert_post_action>
   1d6a6:	b941      	cbnz	r1, 1d6ba <k_work_init_delayable+0x32>
   1d6a8:	4908      	ldr	r1, [pc, #32]	; (1d6cc <k_work_init_delayable+0x44>)
   1d6aa:	4809      	ldr	r0, [pc, #36]	; (1d6d0 <k_work_init_delayable+0x48>)
   1d6ac:	f240 3241 	movw	r2, #833	; 0x341
   1d6b0:	f005 fcb5 	bl	2301e <assert_print>
   1d6b4:	f240 3141 	movw	r1, #833	; 0x341
   1d6b8:	e7f2      	b.n	1d6a0 <k_work_init_delayable+0x18>

	*dwork = (struct k_work_delayable){
   1d6ba:	2230      	movs	r2, #48	; 0x30
   1d6bc:	2100      	movs	r1, #0
   1d6be:	f005 ff5e 	bl	2357e <memset>
   1d6c2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1d6c6:	6065      	str	r5, [r4, #4]
   1d6c8:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   1d6ca:	bd38      	pop	{r3, r4, r5, pc}
   1d6cc:	000287d6 	.word	0x000287d6
   1d6d0:	00026718 	.word	0x00026718

0001d6d4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1d6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d6d6:	4616      	mov	r6, r2
   1d6d8:	9001      	str	r0, [sp, #4]
   1d6da:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1d6dc:	460c      	mov	r4, r1
   1d6de:	b951      	cbnz	r1, 1d6f6 <k_work_schedule_for_queue+0x22>
   1d6e0:	4927      	ldr	r1, [pc, #156]	; (1d780 <k_work_schedule_for_queue+0xac>)
   1d6e2:	4828      	ldr	r0, [pc, #160]	; (1d784 <k_work_schedule_for_queue+0xb0>)
   1d6e4:	f240 32b7 	movw	r2, #951	; 0x3b7
   1d6e8:	f005 fc99 	bl	2301e <assert_print>
   1d6ec:	4824      	ldr	r0, [pc, #144]	; (1d780 <k_work_schedule_for_queue+0xac>)
   1d6ee:	f240 31b7 	movw	r1, #951	; 0x3b7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d6f2:	f005 fc8d 	bl	23010 <assert_post_action>
	__asm__ volatile(
   1d6f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d6fa:	f3ef 8711 	mrs	r7, BASEPRI
   1d6fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1d702:	f3bf 8f6f 	isb	sy
   1d706:	4820      	ldr	r0, [pc, #128]	; (1d788 <k_work_schedule_for_queue+0xb4>)
   1d708:	f7ff f9a0 	bl	1ca4c <z_spin_lock_valid>
   1d70c:	b938      	cbnz	r0, 1d71e <k_work_schedule_for_queue+0x4a>
   1d70e:	491f      	ldr	r1, [pc, #124]	; (1d78c <k_work_schedule_for_queue+0xb8>)
   1d710:	481c      	ldr	r0, [pc, #112]	; (1d784 <k_work_schedule_for_queue+0xb0>)
   1d712:	2294      	movs	r2, #148	; 0x94
   1d714:	f005 fc83 	bl	2301e <assert_print>
   1d718:	2194      	movs	r1, #148	; 0x94
   1d71a:	481c      	ldr	r0, [pc, #112]	; (1d78c <k_work_schedule_for_queue+0xb8>)
   1d71c:	e7e9      	b.n	1d6f2 <k_work_schedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   1d71e:	481a      	ldr	r0, [pc, #104]	; (1d788 <k_work_schedule_for_queue+0xb4>)
   1d720:	f7ff f9b2 	bl	1ca88 <z_spin_lock_set_owner>
	return *flagp;
   1d724:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1d726:	f013 0f0e 	tst.w	r3, #14
   1d72a:	d120      	bne.n	1d76e <k_work_schedule_for_queue+0x9a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d72c:	ea55 0206 	orrs.w	r2, r5, r6
   1d730:	d10f      	bne.n	1d752 <k_work_schedule_for_queue+0x7e>
		return submit_to_queue_locked(work, queuep);
   1d732:	4620      	mov	r0, r4
   1d734:	a901      	add	r1, sp, #4
   1d736:	f7ff fde7 	bl	1d308 <submit_to_queue_locked>
   1d73a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d73c:	4812      	ldr	r0, [pc, #72]	; (1d788 <k_work_schedule_for_queue+0xb4>)
   1d73e:	f7ff f993 	bl	1ca68 <z_spin_unlock_valid>
   1d742:	b9b0      	cbnz	r0, 1d772 <k_work_schedule_for_queue+0x9e>
   1d744:	4911      	ldr	r1, [pc, #68]	; (1d78c <k_work_schedule_for_queue+0xb8>)
   1d746:	480f      	ldr	r0, [pc, #60]	; (1d784 <k_work_schedule_for_queue+0xb0>)
   1d748:	22c2      	movs	r2, #194	; 0xc2
   1d74a:	f005 fc68 	bl	2301e <assert_print>
   1d74e:	21c2      	movs	r1, #194	; 0xc2
   1d750:	e7e3      	b.n	1d71a <k_work_schedule_for_queue+0x46>
	*flagp |= BIT(bit);
   1d752:	f043 0308 	orr.w	r3, r3, #8
   1d756:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1d758:	9b01      	ldr	r3, [sp, #4]
   1d75a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d75c:	f104 0010 	add.w	r0, r4, #16
   1d760:	490b      	ldr	r1, [pc, #44]	; (1d790 <k_work_schedule_for_queue+0xbc>)
   1d762:	4632      	mov	r2, r6
   1d764:	462b      	mov	r3, r5
   1d766:	f001 f945 	bl	1e9f4 <z_add_timeout>
	return ret;
   1d76a:	2401      	movs	r4, #1
   1d76c:	e7e6      	b.n	1d73c <k_work_schedule_for_queue+0x68>
	int ret = 0;
   1d76e:	2400      	movs	r4, #0
   1d770:	e7e4      	b.n	1d73c <k_work_schedule_for_queue+0x68>
	__asm__ volatile(
   1d772:	f387 8811 	msr	BASEPRI, r7
   1d776:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1d77a:	4620      	mov	r0, r4
   1d77c:	b003      	add	sp, #12
   1d77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d780:	000287d6 	.word	0x000287d6
   1d784:	00026718 	.word	0x00026718
   1d788:	20002f9c 	.word	0x20002f9c
   1d78c:	0002679f 	.word	0x0002679f
   1d790:	0001d3dd 	.word	0x0001d3dd

0001d794 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1d794:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1d796:	4801      	ldr	r0, [pc, #4]	; (1d79c <k_work_schedule+0x8>)
   1d798:	f7ff bf9c 	b.w	1d6d4 <k_work_schedule_for_queue>
   1d79c:	200020e0 	.word	0x200020e0

0001d7a0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1d7a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d7a2:	4616      	mov	r6, r2
   1d7a4:	9001      	str	r0, [sp, #4]
   1d7a6:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1d7a8:	460c      	mov	r4, r1
   1d7aa:	b951      	cbnz	r1, 1d7c2 <k_work_reschedule_for_queue+0x22>
   1d7ac:	4926      	ldr	r1, [pc, #152]	; (1d848 <k_work_reschedule_for_queue+0xa8>)
   1d7ae:	4827      	ldr	r0, [pc, #156]	; (1d84c <k_work_reschedule_for_queue+0xac>)
   1d7b0:	f240 32db 	movw	r2, #987	; 0x3db
   1d7b4:	f005 fc33 	bl	2301e <assert_print>
   1d7b8:	4823      	ldr	r0, [pc, #140]	; (1d848 <k_work_reschedule_for_queue+0xa8>)
   1d7ba:	f240 31db 	movw	r1, #987	; 0x3db
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d7be:	f005 fc27 	bl	23010 <assert_post_action>
	__asm__ volatile(
   1d7c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d7c6:	f3ef 8711 	mrs	r7, BASEPRI
   1d7ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1d7ce:	f3bf 8f6f 	isb	sy
   1d7d2:	481f      	ldr	r0, [pc, #124]	; (1d850 <k_work_reschedule_for_queue+0xb0>)
   1d7d4:	f7ff f93a 	bl	1ca4c <z_spin_lock_valid>
   1d7d8:	b938      	cbnz	r0, 1d7ea <k_work_reschedule_for_queue+0x4a>
   1d7da:	491e      	ldr	r1, [pc, #120]	; (1d854 <k_work_reschedule_for_queue+0xb4>)
   1d7dc:	481b      	ldr	r0, [pc, #108]	; (1d84c <k_work_reschedule_for_queue+0xac>)
   1d7de:	2294      	movs	r2, #148	; 0x94
   1d7e0:	f005 fc1d 	bl	2301e <assert_print>
   1d7e4:	2194      	movs	r1, #148	; 0x94
   1d7e6:	481b      	ldr	r0, [pc, #108]	; (1d854 <k_work_reschedule_for_queue+0xb4>)
   1d7e8:	e7e9      	b.n	1d7be <k_work_reschedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   1d7ea:	4819      	ldr	r0, [pc, #100]	; (1d850 <k_work_reschedule_for_queue+0xb0>)
   1d7ec:	f7ff f94c 	bl	1ca88 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1d7f0:	4620      	mov	r0, r4
   1d7f2:	f007 fda2 	bl	2533a <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d7f6:	ea55 0306 	orrs.w	r3, r5, r6
   1d7fa:	d10f      	bne.n	1d81c <k_work_reschedule_for_queue+0x7c>
		return submit_to_queue_locked(work, queuep);
   1d7fc:	4620      	mov	r0, r4
   1d7fe:	a901      	add	r1, sp, #4
   1d800:	f7ff fd82 	bl	1d308 <submit_to_queue_locked>
   1d804:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d806:	4812      	ldr	r0, [pc, #72]	; (1d850 <k_work_reschedule_for_queue+0xb0>)
   1d808:	f7ff f92e 	bl	1ca68 <z_spin_unlock_valid>
   1d80c:	b9a8      	cbnz	r0, 1d83a <k_work_reschedule_for_queue+0x9a>
   1d80e:	4911      	ldr	r1, [pc, #68]	; (1d854 <k_work_reschedule_for_queue+0xb4>)
   1d810:	480e      	ldr	r0, [pc, #56]	; (1d84c <k_work_reschedule_for_queue+0xac>)
   1d812:	22c2      	movs	r2, #194	; 0xc2
   1d814:	f005 fc03 	bl	2301e <assert_print>
   1d818:	21c2      	movs	r1, #194	; 0xc2
   1d81a:	e7e4      	b.n	1d7e6 <k_work_reschedule_for_queue+0x46>
	*flagp |= BIT(bit);
   1d81c:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d81e:	490e      	ldr	r1, [pc, #56]	; (1d858 <k_work_reschedule_for_queue+0xb8>)
	*flagp |= BIT(bit);
   1d820:	f043 0308 	orr.w	r3, r3, #8
   1d824:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1d826:	9b01      	ldr	r3, [sp, #4]
   1d828:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d82a:	f104 0010 	add.w	r0, r4, #16
   1d82e:	4632      	mov	r2, r6
   1d830:	462b      	mov	r3, r5
   1d832:	f001 f8df 	bl	1e9f4 <z_add_timeout>
	return ret;
   1d836:	2401      	movs	r4, #1
   1d838:	e7e5      	b.n	1d806 <k_work_reschedule_for_queue+0x66>
	__asm__ volatile(
   1d83a:	f387 8811 	msr	BASEPRI, r7
   1d83e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1d842:	4620      	mov	r0, r4
   1d844:	b003      	add	sp, #12
   1d846:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d848:	000287d6 	.word	0x000287d6
   1d84c:	00026718 	.word	0x00026718
   1d850:	20002f9c 	.word	0x20002f9c
   1d854:	0002679f 	.word	0x0002679f
   1d858:	0001d3dd 	.word	0x0001d3dd

0001d85c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1d85c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1d85e:	4801      	ldr	r0, [pc, #4]	; (1d864 <k_work_reschedule+0x8>)
   1d860:	f7ff bf9e 	b.w	1d7a0 <k_work_reschedule_for_queue>
   1d864:	200020e0 	.word	0x200020e0

0001d868 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1d868:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   1d86a:	4604      	mov	r4, r0
   1d86c:	b950      	cbnz	r0, 1d884 <k_work_cancel_delayable+0x1c>
   1d86e:	491d      	ldr	r1, [pc, #116]	; (1d8e4 <k_work_cancel_delayable+0x7c>)
   1d870:	481d      	ldr	r0, [pc, #116]	; (1d8e8 <k_work_cancel_delayable+0x80>)
   1d872:	f240 32fd 	movw	r2, #1021	; 0x3fd
   1d876:	f005 fbd2 	bl	2301e <assert_print>
   1d87a:	481a      	ldr	r0, [pc, #104]	; (1d8e4 <k_work_cancel_delayable+0x7c>)
   1d87c:	f240 31fd 	movw	r1, #1021	; 0x3fd
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d880:	f005 fbc6 	bl	23010 <assert_post_action>
	__asm__ volatile(
   1d884:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d888:	f3ef 8511 	mrs	r5, BASEPRI
   1d88c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d890:	f3bf 8f6f 	isb	sy
   1d894:	4815      	ldr	r0, [pc, #84]	; (1d8ec <k_work_cancel_delayable+0x84>)
   1d896:	f7ff f8d9 	bl	1ca4c <z_spin_lock_valid>
   1d89a:	b938      	cbnz	r0, 1d8ac <k_work_cancel_delayable+0x44>
   1d89c:	4914      	ldr	r1, [pc, #80]	; (1d8f0 <k_work_cancel_delayable+0x88>)
   1d89e:	4812      	ldr	r0, [pc, #72]	; (1d8e8 <k_work_cancel_delayable+0x80>)
   1d8a0:	2294      	movs	r2, #148	; 0x94
   1d8a2:	f005 fbbc 	bl	2301e <assert_print>
   1d8a6:	2194      	movs	r1, #148	; 0x94
   1d8a8:	4811      	ldr	r0, [pc, #68]	; (1d8f0 <k_work_cancel_delayable+0x88>)
   1d8aa:	e7e9      	b.n	1d880 <k_work_cancel_delayable+0x18>
	z_spin_lock_set_owner(l);
   1d8ac:	480f      	ldr	r0, [pc, #60]	; (1d8ec <k_work_cancel_delayable+0x84>)
   1d8ae:	f7ff f8eb 	bl	1ca88 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   1d8b2:	4620      	mov	r0, r4
   1d8b4:	f007 fd41 	bl	2533a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1d8b8:	4620      	mov	r0, r4
   1d8ba:	f007 fd53 	bl	25364 <cancel_async_locked>
   1d8be:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d8c0:	480a      	ldr	r0, [pc, #40]	; (1d8ec <k_work_cancel_delayable+0x84>)
   1d8c2:	f7ff f8d1 	bl	1ca68 <z_spin_unlock_valid>
   1d8c6:	b930      	cbnz	r0, 1d8d6 <k_work_cancel_delayable+0x6e>
   1d8c8:	4909      	ldr	r1, [pc, #36]	; (1d8f0 <k_work_cancel_delayable+0x88>)
   1d8ca:	4807      	ldr	r0, [pc, #28]	; (1d8e8 <k_work_cancel_delayable+0x80>)
   1d8cc:	22c2      	movs	r2, #194	; 0xc2
   1d8ce:	f005 fba6 	bl	2301e <assert_print>
   1d8d2:	21c2      	movs	r1, #194	; 0xc2
   1d8d4:	e7e8      	b.n	1d8a8 <k_work_cancel_delayable+0x40>
	__asm__ volatile(
   1d8d6:	f385 8811 	msr	BASEPRI, r5
   1d8da:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1d8de:	4620      	mov	r0, r4
   1d8e0:	bd38      	pop	{r3, r4, r5, pc}
   1d8e2:	bf00      	nop
   1d8e4:	000287d6 	.word	0x000287d6
   1d8e8:	00026718 	.word	0x00026718
   1d8ec:	20002f9c 	.word	0x20002f9c
   1d8f0:	0002679f 	.word	0x0002679f

0001d8f4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1d8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d8f8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1d8fa:	4605      	mov	r5, r0
   1d8fc:	b950      	cbnz	r0, 1d914 <k_work_cancel_delayable_sync+0x20>
   1d8fe:	4933      	ldr	r1, [pc, #204]	; (1d9cc <k_work_cancel_delayable_sync+0xd8>)
   1d900:	4833      	ldr	r0, [pc, #204]	; (1d9d0 <k_work_cancel_delayable_sync+0xdc>)
   1d902:	f240 420e 	movw	r2, #1038	; 0x40e
   1d906:	f005 fb8a 	bl	2301e <assert_print>
   1d90a:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   1d90e:	482f      	ldr	r0, [pc, #188]	; (1d9cc <k_work_cancel_delayable_sync+0xd8>)
   1d910:	f005 fb7e 	bl	23010 <assert_post_action>
   1d914:	b941      	cbnz	r1, 1d928 <k_work_cancel_delayable_sync+0x34>
   1d916:	492d      	ldr	r1, [pc, #180]	; (1d9cc <k_work_cancel_delayable_sync+0xd8>)
   1d918:	482d      	ldr	r0, [pc, #180]	; (1d9d0 <k_work_cancel_delayable_sync+0xdc>)
   1d91a:	f240 420f 	movw	r2, #1039	; 0x40f
   1d91e:	f005 fb7e 	bl	2301e <assert_print>
   1d922:	f240 410f 	movw	r1, #1039	; 0x40f
   1d926:	e7f2      	b.n	1d90e <k_work_cancel_delayable_sync+0x1a>
	__ASSERT_NO_MSG(!k_is_in_isr());
   1d928:	f007 fc9b 	bl	25262 <k_is_in_isr>
   1d92c:	4604      	mov	r4, r0
   1d92e:	b140      	cbz	r0, 1d942 <k_work_cancel_delayable_sync+0x4e>
   1d930:	4926      	ldr	r1, [pc, #152]	; (1d9cc <k_work_cancel_delayable_sync+0xd8>)
   1d932:	4827      	ldr	r0, [pc, #156]	; (1d9d0 <k_work_cancel_delayable_sync+0xdc>)
   1d934:	f44f 6282 	mov.w	r2, #1040	; 0x410
   1d938:	f005 fb71 	bl	2301e <assert_print>
   1d93c:	f44f 6182 	mov.w	r1, #1040	; 0x410
   1d940:	e7e5      	b.n	1d90e <k_work_cancel_delayable_sync+0x1a>
	__asm__ volatile(
   1d942:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d946:	f3ef 8811 	mrs	r8, BASEPRI
   1d94a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d94e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d952:	4820      	ldr	r0, [pc, #128]	; (1d9d4 <k_work_cancel_delayable_sync+0xe0>)
   1d954:	f7ff f87a 	bl	1ca4c <z_spin_lock_valid>
   1d958:	b938      	cbnz	r0, 1d96a <k_work_cancel_delayable_sync+0x76>
   1d95a:	491f      	ldr	r1, [pc, #124]	; (1d9d8 <k_work_cancel_delayable_sync+0xe4>)
   1d95c:	481c      	ldr	r0, [pc, #112]	; (1d9d0 <k_work_cancel_delayable_sync+0xdc>)
   1d95e:	2294      	movs	r2, #148	; 0x94
   1d960:	f005 fb5d 	bl	2301e <assert_print>
   1d964:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d966:	481c      	ldr	r0, [pc, #112]	; (1d9d8 <k_work_cancel_delayable_sync+0xe4>)
   1d968:	e7d2      	b.n	1d910 <k_work_cancel_delayable_sync+0x1c>
	z_spin_lock_set_owner(l);
   1d96a:	481a      	ldr	r0, [pc, #104]	; (1d9d4 <k_work_cancel_delayable_sync+0xe0>)
   1d96c:	f7ff f88c 	bl	1ca88 <z_spin_lock_set_owner>
	return *flagp;
   1d970:	68eb      	ldr	r3, [r5, #12]
   1d972:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1d976:	2b00      	cmp	r3, #0
   1d978:	bf14      	ite	ne
   1d97a:	2701      	movne	r7, #1
   1d97c:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1d97e:	d00a      	beq.n	1d996 <k_work_cancel_delayable_sync+0xa2>
	(void)unschedule_locked(dwork);
   1d980:	4628      	mov	r0, r5
   1d982:	f007 fcda 	bl	2533a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1d986:	4628      	mov	r0, r5
   1d988:	f007 fcec 	bl	25364 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1d98c:	4631      	mov	r1, r6
   1d98e:	4628      	mov	r0, r5
   1d990:	f7ff fc9c 	bl	1d2cc <cancel_sync_locked>
   1d994:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d996:	480f      	ldr	r0, [pc, #60]	; (1d9d4 <k_work_cancel_delayable_sync+0xe0>)
   1d998:	f7ff f866 	bl	1ca68 <z_spin_unlock_valid>
   1d99c:	b930      	cbnz	r0, 1d9ac <k_work_cancel_delayable_sync+0xb8>
   1d99e:	490e      	ldr	r1, [pc, #56]	; (1d9d8 <k_work_cancel_delayable_sync+0xe4>)
   1d9a0:	480b      	ldr	r0, [pc, #44]	; (1d9d0 <k_work_cancel_delayable_sync+0xdc>)
   1d9a2:	22c2      	movs	r2, #194	; 0xc2
   1d9a4:	f005 fb3b 	bl	2301e <assert_print>
   1d9a8:	21c2      	movs	r1, #194	; 0xc2
   1d9aa:	e7dc      	b.n	1d966 <k_work_cancel_delayable_sync+0x72>
	__asm__ volatile(
   1d9ac:	f388 8811 	msr	BASEPRI, r8
   1d9b0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1d9b4:	b13c      	cbz	r4, 1d9c6 <k_work_cancel_delayable_sync+0xd2>
	return z_impl_k_sem_take(sem, timeout);
   1d9b6:	f04f 32ff 	mov.w	r2, #4294967295
   1d9ba:	f04f 33ff 	mov.w	r3, #4294967295
   1d9be:	f106 0008 	add.w	r0, r6, #8
   1d9c2:	f7ff fb2b 	bl	1d01c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1d9c6:	4638      	mov	r0, r7
   1d9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d9cc:	000287d6 	.word	0x000287d6
   1d9d0:	00026718 	.word	0x00026718
   1d9d4:	20002f9c 	.word	0x20002f9c
   1d9d8:	0002679f 	.word	0x0002679f

0001d9dc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1d9dc:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1d9de:	4d07      	ldr	r5, [pc, #28]	; (1d9fc <z_reset_time_slice+0x20>)
   1d9e0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1d9e2:	b154      	cbz	r4, 1d9fa <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1d9e4:	f7fc f8ce 	bl	19b84 <sys_clock_elapsed>
   1d9e8:	4b05      	ldr	r3, [pc, #20]	; (1da00 <z_reset_time_slice+0x24>)
   1d9ea:	4404      	add	r4, r0
   1d9ec:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1d9ee:	6828      	ldr	r0, [r5, #0]
   1d9f0:	2100      	movs	r1, #0
	}
}
   1d9f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1d9f6:	f001 b917 	b.w	1ec28 <z_set_timeout_expiry>
}
   1d9fa:	bd38      	pop	{r3, r4, r5, pc}
   1d9fc:	20002fa8 	.word	0x20002fa8
   1da00:	20002f64 	.word	0x20002f64

0001da04 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1da04:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1da06:	4d12      	ldr	r5, [pc, #72]	; (1da50 <update_cache+0x4c>)
   1da08:	462b      	mov	r3, r5
   1da0a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1da0e:	429c      	cmp	r4, r3
   1da10:	d000      	beq.n	1da14 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1da12:	b904      	cbnz	r4, 1da16 <update_cache+0x12>
   1da14:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   1da16:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1da18:	b988      	cbnz	r0, 1da3e <update_cache+0x3a>
	__ASSERT(_current != NULL, "");
   1da1a:	b943      	cbnz	r3, 1da2e <update_cache+0x2a>
   1da1c:	490d      	ldr	r1, [pc, #52]	; (1da54 <update_cache+0x50>)
   1da1e:	480e      	ldr	r0, [pc, #56]	; (1da58 <update_cache+0x54>)
   1da20:	2289      	movs	r2, #137	; 0x89
   1da22:	f005 fafc 	bl	2301e <assert_print>
   1da26:	480b      	ldr	r0, [pc, #44]	; (1da54 <update_cache+0x50>)
   1da28:	2189      	movs	r1, #137	; 0x89
   1da2a:	f005 faf1 	bl	23010 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1da2e:	7b5a      	ldrb	r2, [r3, #13]
   1da30:	06d2      	lsls	r2, r2, #27
   1da32:	d104      	bne.n	1da3e <update_cache+0x3a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1da34:	69a2      	ldr	r2, [r4, #24]
   1da36:	b912      	cbnz	r2, 1da3e <update_cache+0x3a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1da38:	89da      	ldrh	r2, [r3, #14]
   1da3a:	2a7f      	cmp	r2, #127	; 0x7f
   1da3c:	d805      	bhi.n	1da4a <update_cache+0x46>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1da3e:	429c      	cmp	r4, r3
   1da40:	d002      	beq.n	1da48 <update_cache+0x44>
			z_reset_time_slice(thread);
   1da42:	4620      	mov	r0, r4
   1da44:	f7ff ffca 	bl	1d9dc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1da48:	4623      	mov	r3, r4
   1da4a:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1da4c:	bd38      	pop	{r3, r4, r5, pc}
   1da4e:	bf00      	nop
   1da50:	20002f64 	.word	0x20002f64
   1da54:	000287f7 	.word	0x000287f7
   1da58:	00026718 	.word	0x00026718

0001da5c <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   1da5c:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1da5e:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1da62:	7b42      	ldrb	r2, [r0, #13]
   1da64:	2b00      	cmp	r3, #0
   1da66:	db37      	blt.n	1dad8 <ready_thread+0x7c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1da68:	06d3      	lsls	r3, r2, #27
   1da6a:	d135      	bne.n	1dad8 <ready_thread+0x7c>
	return node->next != NULL;
   1da6c:	6983      	ldr	r3, [r0, #24]
   1da6e:	2b00      	cmp	r3, #0
   1da70:	d132      	bne.n	1dad8 <ready_thread+0x7c>
	thread->base.thread_state |= _THREAD_QUEUED;
   1da72:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1da76:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1da78:	4a18      	ldr	r2, [pc, #96]	; (1dadc <ready_thread+0x80>)
   1da7a:	4290      	cmp	r0, r2
   1da7c:	d108      	bne.n	1da90 <ready_thread+0x34>
   1da7e:	4918      	ldr	r1, [pc, #96]	; (1dae0 <ready_thread+0x84>)
   1da80:	4818      	ldr	r0, [pc, #96]	; (1dae4 <ready_thread+0x88>)
   1da82:	22ba      	movs	r2, #186	; 0xba
   1da84:	f005 facb 	bl	2301e <assert_print>
   1da88:	4815      	ldr	r0, [pc, #84]	; (1dae0 <ready_thread+0x84>)
   1da8a:	21ba      	movs	r1, #186	; 0xba
   1da8c:	f005 fac0 	bl	23010 <assert_post_action>
	return list->head == list;
   1da90:	4915      	ldr	r1, [pc, #84]	; (1dae8 <ready_thread+0x8c>)
   1da92:	460a      	mov	r2, r1
   1da94:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1da98:	4294      	cmp	r4, r2
   1da9a:	bf18      	it	ne
   1da9c:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1da9e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1daa0:	b923      	cbnz	r3, 1daac <ready_thread+0x50>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1daa2:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   1daa6:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1daa8:	6248      	str	r0, [r1, #36]	; 0x24
}
   1daaa:	e00c      	b.n	1dac6 <ready_thread+0x6a>
	int32_t b1 = thread_1->base.prio;
   1daac:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1dab0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1dab4:	42b5      	cmp	r5, r6
   1dab6:	d00b      	beq.n	1dad0 <ready_thread+0x74>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1dab8:	42ae      	cmp	r6, r5
   1daba:	dd09      	ble.n	1dad0 <ready_thread+0x74>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1dabc:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1dabe:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1dac2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1dac4:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
   1dac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1daca:	2000      	movs	r0, #0
   1dacc:	f7ff bf9a 	b.w	1da04 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1dad0:	42a3      	cmp	r3, r4
   1dad2:	d0e6      	beq.n	1daa2 <ready_thread+0x46>
   1dad4:	681b      	ldr	r3, [r3, #0]
   1dad6:	e7e3      	b.n	1daa0 <ready_thread+0x44>
}
   1dad8:	bd70      	pop	{r4, r5, r6, pc}
   1dada:	bf00      	nop
   1dadc:	20001fe0 	.word	0x20001fe0
   1dae0:	000287f7 	.word	0x000287f7
   1dae4:	00026718 	.word	0x00026718
   1dae8:	20002f64 	.word	0x20002f64

0001daec <k_sched_time_slice_set>:
{
   1daec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1daee:	4604      	mov	r4, r0
   1daf0:	460d      	mov	r5, r1
	__asm__ volatile(
   1daf2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1daf6:	f3ef 8711 	mrs	r7, BASEPRI
   1dafa:	f383 8812 	msr	BASEPRI_MAX, r3
   1dafe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1db02:	481d      	ldr	r0, [pc, #116]	; (1db78 <k_sched_time_slice_set+0x8c>)
   1db04:	f7fe ffa2 	bl	1ca4c <z_spin_lock_valid>
   1db08:	b940      	cbnz	r0, 1db1c <k_sched_time_slice_set+0x30>
   1db0a:	491c      	ldr	r1, [pc, #112]	; (1db7c <k_sched_time_slice_set+0x90>)
   1db0c:	481c      	ldr	r0, [pc, #112]	; (1db80 <k_sched_time_slice_set+0x94>)
   1db0e:	2294      	movs	r2, #148	; 0x94
   1db10:	f005 fa85 	bl	2301e <assert_print>
   1db14:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1db16:	4819      	ldr	r0, [pc, #100]	; (1db7c <k_sched_time_slice_set+0x90>)
   1db18:	f005 fa7a 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1db1c:	4816      	ldr	r0, [pc, #88]	; (1db78 <k_sched_time_slice_set+0x8c>)
			return (uint32_t)((t * to_hz + off) / from_hz);
   1db1e:	2600      	movs	r6, #0
   1db20:	f7fe ffb2 	bl	1ca88 <z_spin_lock_set_owner>
   1db24:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1db28:	f240 30e7 	movw	r0, #999	; 0x3e7
   1db2c:	4631      	mov	r1, r6
   1db2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1db32:	2300      	movs	r3, #0
   1db34:	fbe4 010c 	umlal	r0, r1, r4, ip
   1db38:	f7e2 fe26 	bl	788 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1db3c:	42b4      	cmp	r4, r6
   1db3e:	dd02      	ble.n	1db46 <k_sched_time_slice_set+0x5a>
			slice_ticks = MAX(2, slice_ticks);
   1db40:	2802      	cmp	r0, #2
   1db42:	bfb8      	it	lt
   1db44:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1db46:	4a0f      	ldr	r2, [pc, #60]	; (1db84 <k_sched_time_slice_set+0x98>)
		_current_cpu->slice_ticks = 0;
   1db48:	4b0f      	ldr	r3, [pc, #60]	; (1db88 <k_sched_time_slice_set+0x9c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1db4a:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   1db4c:	4a0f      	ldr	r2, [pc, #60]	; (1db8c <k_sched_time_slice_set+0xa0>)
		z_reset_time_slice(_current);
   1db4e:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   1db50:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   1db52:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   1db54:	f7ff ff42 	bl	1d9dc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1db58:	4807      	ldr	r0, [pc, #28]	; (1db78 <k_sched_time_slice_set+0x8c>)
   1db5a:	f7fe ff85 	bl	1ca68 <z_spin_unlock_valid>
   1db5e:	b930      	cbnz	r0, 1db6e <k_sched_time_slice_set+0x82>
   1db60:	4906      	ldr	r1, [pc, #24]	; (1db7c <k_sched_time_slice_set+0x90>)
   1db62:	4807      	ldr	r0, [pc, #28]	; (1db80 <k_sched_time_slice_set+0x94>)
   1db64:	22c2      	movs	r2, #194	; 0xc2
   1db66:	f005 fa5a 	bl	2301e <assert_print>
   1db6a:	21c2      	movs	r1, #194	; 0xc2
   1db6c:	e7d3      	b.n	1db16 <k_sched_time_slice_set+0x2a>
	__asm__ volatile(
   1db6e:	f387 8811 	msr	BASEPRI, r7
   1db72:	f3bf 8f6f 	isb	sy
}
   1db76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1db78:	20002fac 	.word	0x20002fac
   1db7c:	0002679f 	.word	0x0002679f
   1db80:	00026718 	.word	0x00026718
   1db84:	20002fa8 	.word	0x20002fa8
   1db88:	20002f64 	.word	0x20002f64
   1db8c:	20002fa4 	.word	0x20002fa4

0001db90 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   1db90:	b538      	push	{r3, r4, r5, lr}
   1db92:	4604      	mov	r4, r0
	__asm__ volatile(
   1db94:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db98:	f3ef 8511 	mrs	r5, BASEPRI
   1db9c:	f383 8812 	msr	BASEPRI_MAX, r3
   1dba0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dba4:	4811      	ldr	r0, [pc, #68]	; (1dbec <z_ready_thread+0x5c>)
   1dba6:	f7fe ff51 	bl	1ca4c <z_spin_lock_valid>
   1dbaa:	b940      	cbnz	r0, 1dbbe <z_ready_thread+0x2e>
   1dbac:	4910      	ldr	r1, [pc, #64]	; (1dbf0 <z_ready_thread+0x60>)
   1dbae:	4811      	ldr	r0, [pc, #68]	; (1dbf4 <z_ready_thread+0x64>)
   1dbb0:	2294      	movs	r2, #148	; 0x94
   1dbb2:	f005 fa34 	bl	2301e <assert_print>
   1dbb6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dbb8:	480d      	ldr	r0, [pc, #52]	; (1dbf0 <z_ready_thread+0x60>)
   1dbba:	f005 fa29 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1dbbe:	480b      	ldr	r0, [pc, #44]	; (1dbec <z_ready_thread+0x5c>)
   1dbc0:	f7fe ff62 	bl	1ca88 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   1dbc4:	4620      	mov	r0, r4
   1dbc6:	f7ff ff49 	bl	1da5c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dbca:	4808      	ldr	r0, [pc, #32]	; (1dbec <z_ready_thread+0x5c>)
   1dbcc:	f7fe ff4c 	bl	1ca68 <z_spin_unlock_valid>
   1dbd0:	b930      	cbnz	r0, 1dbe0 <z_ready_thread+0x50>
   1dbd2:	4907      	ldr	r1, [pc, #28]	; (1dbf0 <z_ready_thread+0x60>)
   1dbd4:	4807      	ldr	r0, [pc, #28]	; (1dbf4 <z_ready_thread+0x64>)
   1dbd6:	22c2      	movs	r2, #194	; 0xc2
   1dbd8:	f005 fa21 	bl	2301e <assert_print>
   1dbdc:	21c2      	movs	r1, #194	; 0xc2
   1dbde:	e7eb      	b.n	1dbb8 <z_ready_thread+0x28>
	__asm__ volatile(
   1dbe0:	f385 8811 	msr	BASEPRI, r5
   1dbe4:	f3bf 8f6f 	isb	sy
		}
	}
}
   1dbe8:	bd38      	pop	{r3, r4, r5, pc}
   1dbea:	bf00      	nop
   1dbec:	20002fac 	.word	0x20002fac
   1dbf0:	0002679f 	.word	0x0002679f
   1dbf4:	00026718 	.word	0x00026718

0001dbf8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1dbf8:	b538      	push	{r3, r4, r5, lr}
   1dbfa:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1dbfc:	460c      	mov	r4, r1
   1dbfe:	b9c1      	cbnz	r1, 1dc32 <z_reschedule+0x3a>
   1dc00:	f3ef 8505 	mrs	r5, IPSR
   1dc04:	b9ad      	cbnz	r5, 1dc32 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   1dc06:	4a13      	ldr	r2, [pc, #76]	; (1dc54 <z_reschedule+0x5c>)
	if (resched(key.key) && need_swap()) {
   1dc08:	69d1      	ldr	r1, [r2, #28]
   1dc0a:	6892      	ldr	r2, [r2, #8]
   1dc0c:	4291      	cmp	r1, r2
   1dc0e:	d010      	beq.n	1dc32 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dc10:	f7fe ff2a 	bl	1ca68 <z_spin_unlock_valid>
   1dc14:	b940      	cbnz	r0, 1dc28 <z_reschedule+0x30>
   1dc16:	4910      	ldr	r1, [pc, #64]	; (1dc58 <z_reschedule+0x60>)
   1dc18:	4810      	ldr	r0, [pc, #64]	; (1dc5c <z_reschedule+0x64>)
   1dc1a:	22e1      	movs	r2, #225	; 0xe1
   1dc1c:	f005 f9ff 	bl	2301e <assert_print>
   1dc20:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dc22:	480d      	ldr	r0, [pc, #52]	; (1dc58 <z_reschedule+0x60>)
   1dc24:	f005 f9f4 	bl	23010 <assert_post_action>
	ret = arch_swap(key);
   1dc28:	4628      	mov	r0, r5
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   1dc2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1dc2e:	f7f4 bdc3 	b.w	127b8 <arch_swap>
   1dc32:	4618      	mov	r0, r3
   1dc34:	f7fe ff18 	bl	1ca68 <z_spin_unlock_valid>
   1dc38:	b930      	cbnz	r0, 1dc48 <z_reschedule+0x50>
   1dc3a:	4907      	ldr	r1, [pc, #28]	; (1dc58 <z_reschedule+0x60>)
   1dc3c:	4807      	ldr	r0, [pc, #28]	; (1dc5c <z_reschedule+0x64>)
   1dc3e:	22c2      	movs	r2, #194	; 0xc2
   1dc40:	f005 f9ed 	bl	2301e <assert_print>
   1dc44:	21c2      	movs	r1, #194	; 0xc2
   1dc46:	e7ec      	b.n	1dc22 <z_reschedule+0x2a>
   1dc48:	f384 8811 	msr	BASEPRI, r4
   1dc4c:	f3bf 8f6f 	isb	sy
   1dc50:	bd38      	pop	{r3, r4, r5, pc}
   1dc52:	bf00      	nop
   1dc54:	20002f64 	.word	0x20002f64
   1dc58:	0002679f 	.word	0x0002679f
   1dc5c:	00026718 	.word	0x00026718

0001dc60 <z_sched_start>:
{
   1dc60:	b538      	push	{r3, r4, r5, lr}
   1dc62:	4604      	mov	r4, r0
	__asm__ volatile(
   1dc64:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dc68:	f3ef 8511 	mrs	r5, BASEPRI
   1dc6c:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dc74:	4817      	ldr	r0, [pc, #92]	; (1dcd4 <z_sched_start+0x74>)
   1dc76:	f7fe fee9 	bl	1ca4c <z_spin_lock_valid>
   1dc7a:	b940      	cbnz	r0, 1dc8e <z_sched_start+0x2e>
   1dc7c:	4916      	ldr	r1, [pc, #88]	; (1dcd8 <z_sched_start+0x78>)
   1dc7e:	4817      	ldr	r0, [pc, #92]	; (1dcdc <z_sched_start+0x7c>)
   1dc80:	2294      	movs	r2, #148	; 0x94
   1dc82:	f005 f9cc 	bl	2301e <assert_print>
   1dc86:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dc88:	4813      	ldr	r0, [pc, #76]	; (1dcd8 <z_sched_start+0x78>)
   1dc8a:	f005 f9c1 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1dc8e:	4811      	ldr	r0, [pc, #68]	; (1dcd4 <z_sched_start+0x74>)
   1dc90:	f7fe fefa 	bl	1ca88 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1dc94:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   1dc96:	075a      	lsls	r2, r3, #29
   1dc98:	d40f      	bmi.n	1dcba <z_sched_start+0x5a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dc9a:	480e      	ldr	r0, [pc, #56]	; (1dcd4 <z_sched_start+0x74>)
   1dc9c:	f7fe fee4 	bl	1ca68 <z_spin_unlock_valid>
   1dca0:	b930      	cbnz	r0, 1dcb0 <z_sched_start+0x50>
   1dca2:	490d      	ldr	r1, [pc, #52]	; (1dcd8 <z_sched_start+0x78>)
   1dca4:	480d      	ldr	r0, [pc, #52]	; (1dcdc <z_sched_start+0x7c>)
   1dca6:	22c2      	movs	r2, #194	; 0xc2
   1dca8:	f005 f9b9 	bl	2301e <assert_print>
   1dcac:	21c2      	movs	r1, #194	; 0xc2
   1dcae:	e7eb      	b.n	1dc88 <z_sched_start+0x28>
	__asm__ volatile(
   1dcb0:	f385 8811 	msr	BASEPRI, r5
   1dcb4:	f3bf 8f6f 	isb	sy
}
   1dcb8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1dcba:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1dcbe:	4620      	mov	r0, r4
   1dcc0:	7363      	strb	r3, [r4, #13]
   1dcc2:	f7ff fecb 	bl	1da5c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1dcc6:	4629      	mov	r1, r5
   1dcc8:	4802      	ldr	r0, [pc, #8]	; (1dcd4 <z_sched_start+0x74>)
}
   1dcca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   1dcce:	f7ff bf93 	b.w	1dbf8 <z_reschedule>
   1dcd2:	bf00      	nop
   1dcd4:	20002fac 	.word	0x20002fac
   1dcd8:	0002679f 	.word	0x0002679f
   1dcdc:	00026718 	.word	0x00026718

0001dce0 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   1dce0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1dce2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dce6:	f3ef 8411 	mrs	r4, BASEPRI
   1dcea:	f383 8812 	msr	BASEPRI_MAX, r3
   1dcee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dcf2:	481c      	ldr	r0, [pc, #112]	; (1dd64 <k_sched_lock+0x84>)
   1dcf4:	f7fe feaa 	bl	1ca4c <z_spin_lock_valid>
   1dcf8:	b938      	cbnz	r0, 1dd0a <k_sched_lock+0x2a>
   1dcfa:	491b      	ldr	r1, [pc, #108]	; (1dd68 <k_sched_lock+0x88>)
   1dcfc:	481b      	ldr	r0, [pc, #108]	; (1dd6c <k_sched_lock+0x8c>)
   1dcfe:	2294      	movs	r2, #148	; 0x94
   1dd00:	f005 f98d 	bl	2301e <assert_print>
   1dd04:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dd06:	4818      	ldr	r0, [pc, #96]	; (1dd68 <k_sched_lock+0x88>)
   1dd08:	e00c      	b.n	1dd24 <k_sched_lock+0x44>
	z_spin_lock_set_owner(l);
   1dd0a:	4816      	ldr	r0, [pc, #88]	; (1dd64 <k_sched_lock+0x84>)
   1dd0c:	f7fe febc 	bl	1ca88 <z_spin_lock_set_owner>
   1dd10:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1dd14:	b143      	cbz	r3, 1dd28 <k_sched_lock+0x48>
   1dd16:	4916      	ldr	r1, [pc, #88]	; (1dd70 <k_sched_lock+0x90>)
   1dd18:	4814      	ldr	r0, [pc, #80]	; (1dd6c <k_sched_lock+0x8c>)
   1dd1a:	22fd      	movs	r2, #253	; 0xfd
   1dd1c:	f005 f97f 	bl	2301e <assert_print>
   1dd20:	21fd      	movs	r1, #253	; 0xfd
   1dd22:	4813      	ldr	r0, [pc, #76]	; (1dd70 <k_sched_lock+0x90>)
   1dd24:	f005 f974 	bl	23010 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1dd28:	4b12      	ldr	r3, [pc, #72]	; (1dd74 <k_sched_lock+0x94>)
   1dd2a:	689a      	ldr	r2, [r3, #8]
   1dd2c:	7bd3      	ldrb	r3, [r2, #15]
   1dd2e:	2b01      	cmp	r3, #1
   1dd30:	d106      	bne.n	1dd40 <k_sched_lock+0x60>
   1dd32:	490f      	ldr	r1, [pc, #60]	; (1dd70 <k_sched_lock+0x90>)
   1dd34:	480d      	ldr	r0, [pc, #52]	; (1dd6c <k_sched_lock+0x8c>)
   1dd36:	22fe      	movs	r2, #254	; 0xfe
   1dd38:	f005 f971 	bl	2301e <assert_print>
   1dd3c:	21fe      	movs	r1, #254	; 0xfe
   1dd3e:	e7f0      	b.n	1dd22 <k_sched_lock+0x42>
	--_current->base.sched_locked;
   1dd40:	3b01      	subs	r3, #1
   1dd42:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dd44:	4807      	ldr	r0, [pc, #28]	; (1dd64 <k_sched_lock+0x84>)
   1dd46:	f7fe fe8f 	bl	1ca68 <z_spin_unlock_valid>
   1dd4a:	b930      	cbnz	r0, 1dd5a <k_sched_lock+0x7a>
   1dd4c:	4906      	ldr	r1, [pc, #24]	; (1dd68 <k_sched_lock+0x88>)
   1dd4e:	4807      	ldr	r0, [pc, #28]	; (1dd6c <k_sched_lock+0x8c>)
   1dd50:	22c2      	movs	r2, #194	; 0xc2
   1dd52:	f005 f964 	bl	2301e <assert_print>
   1dd56:	21c2      	movs	r1, #194	; 0xc2
   1dd58:	e7d5      	b.n	1dd06 <k_sched_lock+0x26>
	__asm__ volatile(
   1dd5a:	f384 8811 	msr	BASEPRI, r4
   1dd5e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1dd62:	bd10      	pop	{r4, pc}
   1dd64:	20002fac 	.word	0x20002fac
   1dd68:	0002679f 	.word	0x0002679f
   1dd6c:	00026718 	.word	0x00026718
   1dd70:	00028819 	.word	0x00028819
   1dd74:	20002f64 	.word	0x20002f64

0001dd78 <k_sched_unlock>:

void k_sched_unlock(void)
{
   1dd78:	b510      	push	{r4, lr}
	__asm__ volatile(
   1dd7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dd7e:	f3ef 8411 	mrs	r4, BASEPRI
   1dd82:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dd8a:	4820      	ldr	r0, [pc, #128]	; (1de0c <k_sched_unlock+0x94>)
   1dd8c:	f7fe fe5e 	bl	1ca4c <z_spin_lock_valid>
   1dd90:	b938      	cbnz	r0, 1dda2 <k_sched_unlock+0x2a>
   1dd92:	491f      	ldr	r1, [pc, #124]	; (1de10 <k_sched_unlock+0x98>)
   1dd94:	481f      	ldr	r0, [pc, #124]	; (1de14 <k_sched_unlock+0x9c>)
   1dd96:	2294      	movs	r2, #148	; 0x94
   1dd98:	f005 f941 	bl	2301e <assert_print>
   1dd9c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dd9e:	481c      	ldr	r0, [pc, #112]	; (1de10 <k_sched_unlock+0x98>)
   1dda0:	e00f      	b.n	1ddc2 <k_sched_unlock+0x4a>
	z_spin_lock_set_owner(l);
   1dda2:	481a      	ldr	r0, [pc, #104]	; (1de0c <k_sched_unlock+0x94>)
   1dda4:	f7fe fe70 	bl	1ca88 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   1dda8:	4b1b      	ldr	r3, [pc, #108]	; (1de18 <k_sched_unlock+0xa0>)
   1ddaa:	689a      	ldr	r2, [r3, #8]
   1ddac:	7bd3      	ldrb	r3, [r2, #15]
   1ddae:	b953      	cbnz	r3, 1ddc6 <k_sched_unlock+0x4e>
   1ddb0:	491a      	ldr	r1, [pc, #104]	; (1de1c <k_sched_unlock+0xa4>)
   1ddb2:	4818      	ldr	r0, [pc, #96]	; (1de14 <k_sched_unlock+0x9c>)
   1ddb4:	f240 32e7 	movw	r2, #999	; 0x3e7
   1ddb8:	f005 f931 	bl	2301e <assert_print>
   1ddbc:	f240 31e7 	movw	r1, #999	; 0x3e7
   1ddc0:	4816      	ldr	r0, [pc, #88]	; (1de1c <k_sched_unlock+0xa4>)
   1ddc2:	f005 f925 	bl	23010 <assert_post_action>
   1ddc6:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1ddca:	b140      	cbz	r0, 1ddde <k_sched_unlock+0x66>
   1ddcc:	4913      	ldr	r1, [pc, #76]	; (1de1c <k_sched_unlock+0xa4>)
   1ddce:	4811      	ldr	r0, [pc, #68]	; (1de14 <k_sched_unlock+0x9c>)
   1ddd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ddd4:	f005 f923 	bl	2301e <assert_print>
   1ddd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1dddc:	e7f0      	b.n	1ddc0 <k_sched_unlock+0x48>

		++_current->base.sched_locked;
   1ddde:	3301      	adds	r3, #1
   1dde0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1dde2:	f7ff fe0f 	bl	1da04 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dde6:	4809      	ldr	r0, [pc, #36]	; (1de0c <k_sched_unlock+0x94>)
   1dde8:	f7fe fe3e 	bl	1ca68 <z_spin_unlock_valid>
   1ddec:	b930      	cbnz	r0, 1ddfc <k_sched_unlock+0x84>
   1ddee:	4908      	ldr	r1, [pc, #32]	; (1de10 <k_sched_unlock+0x98>)
   1ddf0:	4808      	ldr	r0, [pc, #32]	; (1de14 <k_sched_unlock+0x9c>)
   1ddf2:	22c2      	movs	r2, #194	; 0xc2
   1ddf4:	f005 f913 	bl	2301e <assert_print>
   1ddf8:	21c2      	movs	r1, #194	; 0xc2
   1ddfa:	e7d0      	b.n	1dd9e <k_sched_unlock+0x26>
	__asm__ volatile(
   1ddfc:	f384 8811 	msr	BASEPRI, r4
   1de00:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1de04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1de08:	f007 bb07 	b.w	2541a <z_reschedule_unlocked>
   1de0c:	20002fac 	.word	0x20002fac
   1de10:	0002679f 	.word	0x0002679f
   1de14:	00026718 	.word	0x00026718
   1de18:	20002f64 	.word	0x20002f64
   1de1c:	000287f7 	.word	0x000287f7

0001de20 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   1de20:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1de22:	4b0b      	ldr	r3, [pc, #44]	; (1de50 <z_priq_dumb_remove+0x30>)
   1de24:	4299      	cmp	r1, r3
   1de26:	d10a      	bne.n	1de3e <z_priq_dumb_remove+0x1e>
   1de28:	490a      	ldr	r1, [pc, #40]	; (1de54 <z_priq_dumb_remove+0x34>)
   1de2a:	480b      	ldr	r0, [pc, #44]	; (1de58 <z_priq_dumb_remove+0x38>)
   1de2c:	f240 4273 	movw	r2, #1139	; 0x473
   1de30:	f005 f8f5 	bl	2301e <assert_print>
   1de34:	4807      	ldr	r0, [pc, #28]	; (1de54 <z_priq_dumb_remove+0x34>)
   1de36:	f240 4173 	movw	r1, #1139	; 0x473
   1de3a:	f005 f8e9 	bl	23010 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1de3e:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   1de42:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1de44:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1de46:	2300      	movs	r3, #0
	node->prev = NULL;
   1de48:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1de4c:	bd08      	pop	{r3, pc}
   1de4e:	bf00      	nop
   1de50:	20001fe0 	.word	0x20001fe0
   1de54:	000287f7 	.word	0x000287f7
   1de58:	00026718 	.word	0x00026718

0001de5c <move_thread_to_end_of_prio_q>:
{
   1de5c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1de5e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1de62:	7b43      	ldrb	r3, [r0, #13]
   1de64:	2a00      	cmp	r2, #0
{
   1de66:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1de68:	da06      	bge.n	1de78 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1de6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1de6e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1de70:	4601      	mov	r1, r0
   1de72:	481d      	ldr	r0, [pc, #116]	; (1dee8 <move_thread_to_end_of_prio_q+0x8c>)
   1de74:	f7ff ffd4 	bl	1de20 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1de78:	7b63      	ldrb	r3, [r4, #13]
   1de7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1de7e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1de80:	4b1a      	ldr	r3, [pc, #104]	; (1deec <move_thread_to_end_of_prio_q+0x90>)
   1de82:	429c      	cmp	r4, r3
   1de84:	d108      	bne.n	1de98 <move_thread_to_end_of_prio_q+0x3c>
   1de86:	491a      	ldr	r1, [pc, #104]	; (1def0 <move_thread_to_end_of_prio_q+0x94>)
   1de88:	481a      	ldr	r0, [pc, #104]	; (1def4 <move_thread_to_end_of_prio_q+0x98>)
   1de8a:	22ba      	movs	r2, #186	; 0xba
   1de8c:	f005 f8c7 	bl	2301e <assert_print>
   1de90:	4817      	ldr	r0, [pc, #92]	; (1def0 <move_thread_to_end_of_prio_q+0x94>)
   1de92:	21ba      	movs	r1, #186	; 0xba
   1de94:	f005 f8bc 	bl	23010 <assert_post_action>
	return list->head == list;
   1de98:	4a17      	ldr	r2, [pc, #92]	; (1def8 <move_thread_to_end_of_prio_q+0x9c>)
   1de9a:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
   1de9c:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
   1de9e:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dea2:	428b      	cmp	r3, r1
   1dea4:	bf08      	it	eq
   1dea6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dea8:	b923      	cbnz	r3, 1deb4 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   1deaa:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   1deae:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1deb0:	6254      	str	r4, [r2, #36]	; 0x24
}
   1deb2:	e00c      	b.n	1dece <move_thread_to_end_of_prio_q+0x72>
	int32_t b1 = thread_1->base.prio;
   1deb4:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1deb8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1debc:	42b5      	cmp	r5, r6
   1debe:	d00e      	beq.n	1dede <move_thread_to_end_of_prio_q+0x82>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1dec0:	42ae      	cmp	r6, r5
   1dec2:	dd0c      	ble.n	1dede <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   1dec4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1dec6:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1deca:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1decc:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   1dece:	6890      	ldr	r0, [r2, #8]
   1ded0:	1b03      	subs	r3, r0, r4
   1ded2:	4258      	negs	r0, r3
}
   1ded4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1ded8:	4158      	adcs	r0, r3
   1deda:	f7ff bd93 	b.w	1da04 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1dede:	4298      	cmp	r0, r3
   1dee0:	d0e3      	beq.n	1deaa <move_thread_to_end_of_prio_q+0x4e>
   1dee2:	681b      	ldr	r3, [r3, #0]
   1dee4:	e7e0      	b.n	1dea8 <move_thread_to_end_of_prio_q+0x4c>
   1dee6:	bf00      	nop
   1dee8:	20002f84 	.word	0x20002f84
   1deec:	20001fe0 	.word	0x20001fe0
   1def0:	000287f7 	.word	0x000287f7
   1def4:	00026718 	.word	0x00026718
   1def8:	20002f64 	.word	0x20002f64

0001defc <z_time_slice>:
{
   1defc:	b570      	push	{r4, r5, r6, lr}
   1defe:	4605      	mov	r5, r0
	__asm__ volatile(
   1df00:	f04f 0340 	mov.w	r3, #64	; 0x40
   1df04:	f3ef 8611 	mrs	r6, BASEPRI
   1df08:	f383 8812 	msr	BASEPRI_MAX, r3
   1df0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1df10:	4824      	ldr	r0, [pc, #144]	; (1dfa4 <z_time_slice+0xa8>)
   1df12:	f7fe fd9b 	bl	1ca4c <z_spin_lock_valid>
   1df16:	b940      	cbnz	r0, 1df2a <z_time_slice+0x2e>
   1df18:	4923      	ldr	r1, [pc, #140]	; (1dfa8 <z_time_slice+0xac>)
   1df1a:	4824      	ldr	r0, [pc, #144]	; (1dfac <z_time_slice+0xb0>)
   1df1c:	2294      	movs	r2, #148	; 0x94
   1df1e:	f005 f87e 	bl	2301e <assert_print>
   1df22:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1df24:	4820      	ldr	r0, [pc, #128]	; (1dfa8 <z_time_slice+0xac>)
   1df26:	f005 f873 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1df2a:	481e      	ldr	r0, [pc, #120]	; (1dfa4 <z_time_slice+0xa8>)
   1df2c:	f7fe fdac 	bl	1ca88 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1df30:	4b1f      	ldr	r3, [pc, #124]	; (1dfb0 <z_time_slice+0xb4>)
   1df32:	4a20      	ldr	r2, [pc, #128]	; (1dfb4 <z_time_slice+0xb8>)
   1df34:	689c      	ldr	r4, [r3, #8]
   1df36:	6811      	ldr	r1, [r2, #0]
   1df38:	428c      	cmp	r4, r1
   1df3a:	d10d      	bne.n	1df58 <z_time_slice+0x5c>
		z_reset_time_slice(_current);
   1df3c:	4620      	mov	r0, r4
   1df3e:	f7ff fd4d 	bl	1d9dc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1df42:	4818      	ldr	r0, [pc, #96]	; (1dfa4 <z_time_slice+0xa8>)
   1df44:	f7fe fd90 	bl	1ca68 <z_spin_unlock_valid>
   1df48:	bb30      	cbnz	r0, 1df98 <z_time_slice+0x9c>
   1df4a:	4917      	ldr	r1, [pc, #92]	; (1dfa8 <z_time_slice+0xac>)
   1df4c:	4817      	ldr	r0, [pc, #92]	; (1dfac <z_time_slice+0xb0>)
   1df4e:	22c2      	movs	r2, #194	; 0xc2
   1df50:	f005 f865 	bl	2301e <assert_print>
   1df54:	21c2      	movs	r1, #194	; 0xc2
   1df56:	e7e5      	b.n	1df24 <z_time_slice+0x28>
	pending_current = NULL;
   1df58:	2100      	movs	r1, #0
   1df5a:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1df5c:	4a16      	ldr	r2, [pc, #88]	; (1dfb8 <z_time_slice+0xbc>)
	if (slice_time(_current) && sliceable(_current)) {
   1df5e:	6812      	ldr	r2, [r2, #0]
   1df60:	b1c2      	cbz	r2, 1df94 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   1df62:	89e2      	ldrh	r2, [r4, #14]
   1df64:	2a7f      	cmp	r2, #127	; 0x7f
   1df66:	d815      	bhi.n	1df94 <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
   1df68:	7b62      	ldrb	r2, [r4, #13]
   1df6a:	06d2      	lsls	r2, r2, #27
   1df6c:	d112      	bne.n	1df94 <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1df6e:	4a13      	ldr	r2, [pc, #76]	; (1dfbc <z_time_slice+0xc0>)
   1df70:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1df74:	6812      	ldr	r2, [r2, #0]
   1df76:	4291      	cmp	r1, r2
   1df78:	db0c      	blt.n	1df94 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   1df7a:	4a11      	ldr	r2, [pc, #68]	; (1dfc0 <z_time_slice+0xc4>)
   1df7c:	4294      	cmp	r4, r2
   1df7e:	d009      	beq.n	1df94 <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
   1df80:	691a      	ldr	r2, [r3, #16]
   1df82:	42aa      	cmp	r2, r5
   1df84:	dc03      	bgt.n	1df8e <z_time_slice+0x92>
		move_thread_to_end_of_prio_q(curr);
   1df86:	4620      	mov	r0, r4
   1df88:	f7ff ff68 	bl	1de5c <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   1df8c:	e7d6      	b.n	1df3c <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   1df8e:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   1df90:	611a      	str	r2, [r3, #16]
   1df92:	e7d6      	b.n	1df42 <z_time_slice+0x46>
   1df94:	2200      	movs	r2, #0
   1df96:	e7fb      	b.n	1df90 <z_time_slice+0x94>
	__asm__ volatile(
   1df98:	f386 8811 	msr	BASEPRI, r6
   1df9c:	f3bf 8f6f 	isb	sy
}
   1dfa0:	bd70      	pop	{r4, r5, r6, pc}
   1dfa2:	bf00      	nop
   1dfa4:	20002fac 	.word	0x20002fac
   1dfa8:	0002679f 	.word	0x0002679f
   1dfac:	00026718 	.word	0x00026718
   1dfb0:	20002f64 	.word	0x20002f64
   1dfb4:	20002fa0 	.word	0x20002fa0
   1dfb8:	20002fa8 	.word	0x20002fa8
   1dfbc:	20002fa4 	.word	0x20002fa4
   1dfc0:	20001fe0 	.word	0x20001fe0

0001dfc4 <unready_thread>:
{
   1dfc4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1dfc6:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1dfca:	7b43      	ldrb	r3, [r0, #13]
   1dfcc:	2a00      	cmp	r2, #0
{
   1dfce:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1dfd0:	da06      	bge.n	1dfe0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1dfd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dfd6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1dfd8:	4601      	mov	r1, r0
   1dfda:	4806      	ldr	r0, [pc, #24]	; (1dff4 <unready_thread+0x30>)
   1dfdc:	f7ff ff20 	bl	1de20 <z_priq_dumb_remove>
	update_cache(thread == _current);
   1dfe0:	4b05      	ldr	r3, [pc, #20]	; (1dff8 <unready_thread+0x34>)
   1dfe2:	6898      	ldr	r0, [r3, #8]
   1dfe4:	1b03      	subs	r3, r0, r4
   1dfe6:	4258      	negs	r0, r3
}
   1dfe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1dfec:	4158      	adcs	r0, r3
   1dfee:	f7ff bd09 	b.w	1da04 <update_cache>
   1dff2:	bf00      	nop
   1dff4:	20002f84 	.word	0x20002f84
   1dff8:	20002f64 	.word	0x20002f64

0001dffc <add_to_waitq_locked>:
{
   1dffc:	b538      	push	{r3, r4, r5, lr}
   1dffe:	4604      	mov	r4, r0
   1e000:	460d      	mov	r5, r1
	unready_thread(thread);
   1e002:	f7ff ffdf 	bl	1dfc4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1e006:	7b63      	ldrb	r3, [r4, #13]
   1e008:	f043 0302 	orr.w	r3, r3, #2
   1e00c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1e00e:	b345      	cbz	r5, 1e062 <add_to_waitq_locked+0x66>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1e010:	4b14      	ldr	r3, [pc, #80]	; (1e064 <add_to_waitq_locked+0x68>)
		thread->base.pended_on = wait_q;
   1e012:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1e014:	429c      	cmp	r4, r3
   1e016:	d108      	bne.n	1e02a <add_to_waitq_locked+0x2e>
   1e018:	4913      	ldr	r1, [pc, #76]	; (1e068 <add_to_waitq_locked+0x6c>)
   1e01a:	4814      	ldr	r0, [pc, #80]	; (1e06c <add_to_waitq_locked+0x70>)
   1e01c:	22ba      	movs	r2, #186	; 0xba
   1e01e:	f004 fffe 	bl	2301e <assert_print>
   1e022:	4811      	ldr	r0, [pc, #68]	; (1e068 <add_to_waitq_locked+0x6c>)
   1e024:	21ba      	movs	r1, #186	; 0xba
   1e026:	f004 fff3 	bl	23010 <assert_post_action>
	return list->head == list;
   1e02a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e02c:	429d      	cmp	r5, r3
   1e02e:	d109      	bne.n	1e044 <add_to_waitq_locked+0x48>
	sys_dnode_t *const tail = list->tail;
   1e030:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1e032:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1e036:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1e038:	606c      	str	r4, [r5, #4]
}
   1e03a:	e012      	b.n	1e062 <add_to_waitq_locked+0x66>
	return (node == list->tail) ? NULL : node->next;
   1e03c:	686a      	ldr	r2, [r5, #4]
   1e03e:	4293      	cmp	r3, r2
   1e040:	d0f6      	beq.n	1e030 <add_to_waitq_locked+0x34>
   1e042:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e044:	2b00      	cmp	r3, #0
   1e046:	d0f3      	beq.n	1e030 <add_to_waitq_locked+0x34>
	int32_t b1 = thread_1->base.prio;
   1e048:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1e04c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1e050:	428a      	cmp	r2, r1
   1e052:	d0f3      	beq.n	1e03c <add_to_waitq_locked+0x40>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e054:	4291      	cmp	r1, r2
   1e056:	ddf1      	ble.n	1e03c <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
   1e058:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e05a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1e05e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1e060:	605c      	str	r4, [r3, #4]
}
   1e062:	bd38      	pop	{r3, r4, r5, pc}
   1e064:	20001fe0 	.word	0x20001fe0
   1e068:	000287f7 	.word	0x000287f7
   1e06c:	00026718 	.word	0x00026718

0001e070 <pend_locked>:
{
   1e070:	b570      	push	{r4, r5, r6, lr}
   1e072:	4615      	mov	r5, r2
   1e074:	461c      	mov	r4, r3
   1e076:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1e078:	f7ff ffc0 	bl	1dffc <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e07c:	f1b4 3fff 	cmp.w	r4, #4294967295
   1e080:	bf08      	it	eq
   1e082:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1e086:	d008      	beq.n	1e09a <pend_locked+0x2a>
   1e088:	462a      	mov	r2, r5
   1e08a:	4623      	mov	r3, r4
   1e08c:	f106 0018 	add.w	r0, r6, #24
   1e090:	4902      	ldr	r1, [pc, #8]	; (1e09c <pend_locked+0x2c>)
}
   1e092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e096:	f000 bcad 	b.w	1e9f4 <z_add_timeout>
   1e09a:	bd70      	pop	{r4, r5, r6, pc}
   1e09c:	0001e3a5 	.word	0x0001e3a5

0001e0a0 <z_pend_curr>:
{
   1e0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
   1e0a4:	f8df a094 	ldr.w	sl, [pc, #148]	; 1e13c <z_pend_curr+0x9c>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   1e0a8:	4c25      	ldr	r4, [pc, #148]	; (1e140 <z_pend_curr+0xa0>)
	pending_current = _current;
   1e0aa:	4b26      	ldr	r3, [pc, #152]	; (1e144 <z_pend_curr+0xa4>)
{
   1e0ac:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   1e0ae:	42a0      	cmp	r0, r4
	pending_current = _current;
   1e0b0:	f8da 2008 	ldr.w	r2, [sl, #8]
   1e0b4:	601a      	str	r2, [r3, #0]
{
   1e0b6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   1e0ba:	4605      	mov	r5, r0
   1e0bc:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   1e0be:	d10a      	bne.n	1e0d6 <z_pend_curr+0x36>
   1e0c0:	4921      	ldr	r1, [pc, #132]	; (1e148 <z_pend_curr+0xa8>)
   1e0c2:	4822      	ldr	r0, [pc, #136]	; (1e14c <z_pend_curr+0xac>)
   1e0c4:	f240 324e 	movw	r2, #846	; 0x34e
   1e0c8:	f004 ffa9 	bl	2301e <assert_print>
   1e0cc:	481e      	ldr	r0, [pc, #120]	; (1e148 <z_pend_curr+0xa8>)
   1e0ce:	f240 314e 	movw	r1, #846	; 0x34e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e0d2:	f004 ff9d 	bl	23010 <assert_post_action>
	__asm__ volatile(
   1e0d6:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e0da:	f3ef 8311 	mrs	r3, BASEPRI
   1e0de:	f382 8812 	msr	BASEPRI_MAX, r2
   1e0e2:	f3bf 8f6f 	isb	sy
   1e0e6:	4620      	mov	r0, r4
   1e0e8:	f7fe fcb0 	bl	1ca4c <z_spin_lock_valid>
   1e0ec:	b938      	cbnz	r0, 1e0fe <z_pend_curr+0x5e>
   1e0ee:	4918      	ldr	r1, [pc, #96]	; (1e150 <z_pend_curr+0xb0>)
   1e0f0:	4816      	ldr	r0, [pc, #88]	; (1e14c <z_pend_curr+0xac>)
   1e0f2:	2294      	movs	r2, #148	; 0x94
   1e0f4:	f004 ff93 	bl	2301e <assert_print>
   1e0f8:	2194      	movs	r1, #148	; 0x94
   1e0fa:	4815      	ldr	r0, [pc, #84]	; (1e150 <z_pend_curr+0xb0>)
   1e0fc:	e7e9      	b.n	1e0d2 <z_pend_curr+0x32>
	z_spin_lock_set_owner(l);
   1e0fe:	4620      	mov	r0, r4
   1e100:	f7fe fcc2 	bl	1ca88 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   1e104:	f8da 0008 	ldr.w	r0, [sl, #8]
   1e108:	4642      	mov	r2, r8
   1e10a:	464b      	mov	r3, r9
   1e10c:	4639      	mov	r1, r7
   1e10e:	f7ff ffaf 	bl	1e070 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e112:	4628      	mov	r0, r5
   1e114:	f7fe fca8 	bl	1ca68 <z_spin_unlock_valid>
   1e118:	b930      	cbnz	r0, 1e128 <z_pend_curr+0x88>
   1e11a:	490d      	ldr	r1, [pc, #52]	; (1e150 <z_pend_curr+0xb0>)
   1e11c:	480b      	ldr	r0, [pc, #44]	; (1e14c <z_pend_curr+0xac>)
   1e11e:	22e1      	movs	r2, #225	; 0xe1
   1e120:	f004 ff7d 	bl	2301e <assert_print>
   1e124:	21e1      	movs	r1, #225	; 0xe1
   1e126:	e7e8      	b.n	1e0fa <z_pend_curr+0x5a>
   1e128:	4620      	mov	r0, r4
   1e12a:	f7fe fc9d 	bl	1ca68 <z_spin_unlock_valid>
   1e12e:	2800      	cmp	r0, #0
   1e130:	d0f3      	beq.n	1e11a <z_pend_curr+0x7a>
   1e132:	4630      	mov	r0, r6
}
   1e134:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e138:	f7f4 bb3e 	b.w	127b8 <arch_swap>
   1e13c:	20002f64 	.word	0x20002f64
   1e140:	20002fac 	.word	0x20002fac
   1e144:	20002fa0 	.word	0x20002fa0
   1e148:	000287f7 	.word	0x000287f7
   1e14c:	00026718 	.word	0x00026718
   1e150:	0002679f 	.word	0x0002679f

0001e154 <z_set_prio>:
{
   1e154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e158:	4604      	mov	r4, r0
   1e15a:	460e      	mov	r6, r1
   1e15c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e160:	f3ef 8911 	mrs	r9, BASEPRI
   1e164:	f383 8812 	msr	BASEPRI_MAX, r3
   1e168:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e16c:	4831      	ldr	r0, [pc, #196]	; (1e234 <z_set_prio+0xe0>)
   1e16e:	f7fe fc6d 	bl	1ca4c <z_spin_lock_valid>
   1e172:	4607      	mov	r7, r0
   1e174:	b938      	cbnz	r0, 1e186 <z_set_prio+0x32>
   1e176:	4930      	ldr	r1, [pc, #192]	; (1e238 <z_set_prio+0xe4>)
   1e178:	4830      	ldr	r0, [pc, #192]	; (1e23c <z_set_prio+0xe8>)
   1e17a:	2294      	movs	r2, #148	; 0x94
   1e17c:	f004 ff4f 	bl	2301e <assert_print>
   1e180:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e182:	482d      	ldr	r0, [pc, #180]	; (1e238 <z_set_prio+0xe4>)
   1e184:	e020      	b.n	1e1c8 <z_set_prio+0x74>
	z_spin_lock_set_owner(l);
   1e186:	482b      	ldr	r0, [pc, #172]	; (1e234 <z_set_prio+0xe0>)
   1e188:	f7fe fc7e 	bl	1ca88 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   1e18c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e18e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1e190:	b276      	sxtb	r6, r6
   1e192:	d11b      	bne.n	1e1cc <z_set_prio+0x78>
	return node->next != NULL;
   1e194:	69a5      	ldr	r5, [r4, #24]
   1e196:	b9cd      	cbnz	r5, 1e1cc <z_set_prio+0x78>
	_priq_run_remove(thread_runq(thread), thread);
   1e198:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1e240 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e19c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e1a0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1e1a2:	4621      	mov	r1, r4
   1e1a4:	4640      	mov	r0, r8
   1e1a6:	f7ff fe3b 	bl	1de20 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1e1aa:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1e1ac:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1e1ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e1b2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1e1b4:	4b23      	ldr	r3, [pc, #140]	; (1e244 <z_set_prio+0xf0>)
   1e1b6:	429c      	cmp	r4, r3
   1e1b8:	d115      	bne.n	1e1e6 <z_set_prio+0x92>
   1e1ba:	4923      	ldr	r1, [pc, #140]	; (1e248 <z_set_prio+0xf4>)
   1e1bc:	481f      	ldr	r0, [pc, #124]	; (1e23c <z_set_prio+0xe8>)
   1e1be:	22ba      	movs	r2, #186	; 0xba
   1e1c0:	f004 ff2d 	bl	2301e <assert_print>
   1e1c4:	4820      	ldr	r0, [pc, #128]	; (1e248 <z_set_prio+0xf4>)
   1e1c6:	21ba      	movs	r1, #186	; 0xba
   1e1c8:	f004 ff22 	bl	23010 <assert_post_action>
			thread->base.prio = prio;
   1e1cc:	73a6      	strb	r6, [r4, #14]
   1e1ce:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e1d0:	4818      	ldr	r0, [pc, #96]	; (1e234 <z_set_prio+0xe0>)
   1e1d2:	f7fe fc49 	bl	1ca68 <z_spin_unlock_valid>
   1e1d6:	bb30      	cbnz	r0, 1e226 <z_set_prio+0xd2>
   1e1d8:	4917      	ldr	r1, [pc, #92]	; (1e238 <z_set_prio+0xe4>)
   1e1da:	4818      	ldr	r0, [pc, #96]	; (1e23c <z_set_prio+0xe8>)
   1e1dc:	22c2      	movs	r2, #194	; 0xc2
   1e1de:	f004 ff1e 	bl	2301e <assert_print>
   1e1e2:	21c2      	movs	r1, #194	; 0xc2
   1e1e4:	e7cd      	b.n	1e182 <z_set_prio+0x2e>
	return list->head == list;
   1e1e6:	4643      	mov	r3, r8
   1e1e8:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e1ec:	4542      	cmp	r2, r8
   1e1ee:	bf18      	it	ne
   1e1f0:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   1e1f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e1f4:	b925      	cbnz	r5, 1e200 <z_set_prio+0xac>
	node->prev = tail;
   1e1f6:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   1e1fa:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1e1fc:	625c      	str	r4, [r3, #36]	; 0x24
}
   1e1fe:	e00a      	b.n	1e216 <z_set_prio+0xc2>
	int32_t b2 = thread_2->base.prio;
   1e200:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   1e204:	428e      	cmp	r6, r1
   1e206:	d00a      	beq.n	1e21e <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e208:	42b1      	cmp	r1, r6
   1e20a:	dd08      	ble.n	1e21e <z_set_prio+0xca>
	sys_dnode_t *const prev = successor->prev;
   1e20c:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1e20e:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   1e212:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e214:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1e216:	2001      	movs	r0, #1
   1e218:	f7ff fbf4 	bl	1da04 <update_cache>
   1e21c:	e7d8      	b.n	1e1d0 <z_set_prio+0x7c>
	return (node == list->tail) ? NULL : node->next;
   1e21e:	42aa      	cmp	r2, r5
   1e220:	d0e9      	beq.n	1e1f6 <z_set_prio+0xa2>
   1e222:	682d      	ldr	r5, [r5, #0]
   1e224:	e7e6      	b.n	1e1f4 <z_set_prio+0xa0>
	__asm__ volatile(
   1e226:	f389 8811 	msr	BASEPRI, r9
   1e22a:	f3bf 8f6f 	isb	sy
}
   1e22e:	4638      	mov	r0, r7
   1e230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e234:	20002fac 	.word	0x20002fac
   1e238:	0002679f 	.word	0x0002679f
   1e23c:	00026718 	.word	0x00026718
   1e240:	20002f84 	.word	0x20002f84
   1e244:	20001fe0 	.word	0x20001fe0
   1e248:	000287f7 	.word	0x000287f7

0001e24c <z_impl_k_thread_suspend>:
{
   1e24c:	b570      	push	{r4, r5, r6, lr}
   1e24e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1e250:	3018      	adds	r0, #24
   1e252:	f000 fc7b 	bl	1eb4c <z_abort_timeout>
	__asm__ volatile(
   1e256:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e25a:	f3ef 8611 	mrs	r6, BASEPRI
   1e25e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e262:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e266:	481f      	ldr	r0, [pc, #124]	; (1e2e4 <z_impl_k_thread_suspend+0x98>)
   1e268:	f7fe fbf0 	bl	1ca4c <z_spin_lock_valid>
   1e26c:	b940      	cbnz	r0, 1e280 <z_impl_k_thread_suspend+0x34>
   1e26e:	491e      	ldr	r1, [pc, #120]	; (1e2e8 <z_impl_k_thread_suspend+0x9c>)
   1e270:	481e      	ldr	r0, [pc, #120]	; (1e2ec <z_impl_k_thread_suspend+0xa0>)
   1e272:	2294      	movs	r2, #148	; 0x94
   1e274:	f004 fed3 	bl	2301e <assert_print>
   1e278:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e27a:	481b      	ldr	r0, [pc, #108]	; (1e2e8 <z_impl_k_thread_suspend+0x9c>)
   1e27c:	f004 fec8 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e280:	4818      	ldr	r0, [pc, #96]	; (1e2e4 <z_impl_k_thread_suspend+0x98>)
   1e282:	f7fe fc01 	bl	1ca88 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1e286:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1e28a:	7b63      	ldrb	r3, [r4, #13]
   1e28c:	2a00      	cmp	r2, #0
   1e28e:	da06      	bge.n	1e29e <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   1e294:	4816      	ldr	r0, [pc, #88]	; (1e2f0 <z_impl_k_thread_suspend+0xa4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e296:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1e298:	4621      	mov	r1, r4
   1e29a:	f7ff fdc1 	bl	1de20 <z_priq_dumb_remove>
		update_cache(thread == _current);
   1e29e:	4d15      	ldr	r5, [pc, #84]	; (1e2f4 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1e2a0:	7b63      	ldrb	r3, [r4, #13]
   1e2a2:	68a8      	ldr	r0, [r5, #8]
   1e2a4:	f043 0310 	orr.w	r3, r3, #16
   1e2a8:	7363      	strb	r3, [r4, #13]
   1e2aa:	1b03      	subs	r3, r0, r4
   1e2ac:	4258      	negs	r0, r3
   1e2ae:	4158      	adcs	r0, r3
   1e2b0:	f7ff fba8 	bl	1da04 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e2b4:	480b      	ldr	r0, [pc, #44]	; (1e2e4 <z_impl_k_thread_suspend+0x98>)
   1e2b6:	f7fe fbd7 	bl	1ca68 <z_spin_unlock_valid>
   1e2ba:	b930      	cbnz	r0, 1e2ca <z_impl_k_thread_suspend+0x7e>
   1e2bc:	490a      	ldr	r1, [pc, #40]	; (1e2e8 <z_impl_k_thread_suspend+0x9c>)
   1e2be:	480b      	ldr	r0, [pc, #44]	; (1e2ec <z_impl_k_thread_suspend+0xa0>)
   1e2c0:	22c2      	movs	r2, #194	; 0xc2
   1e2c2:	f004 feac 	bl	2301e <assert_print>
   1e2c6:	21c2      	movs	r1, #194	; 0xc2
   1e2c8:	e7d7      	b.n	1e27a <z_impl_k_thread_suspend+0x2e>
	__asm__ volatile(
   1e2ca:	f386 8811 	msr	BASEPRI, r6
   1e2ce:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1e2d2:	68ab      	ldr	r3, [r5, #8]
   1e2d4:	42a3      	cmp	r3, r4
   1e2d6:	d103      	bne.n	1e2e0 <z_impl_k_thread_suspend+0x94>
}
   1e2d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1e2dc:	f007 b89d 	b.w	2541a <z_reschedule_unlocked>
}
   1e2e0:	bd70      	pop	{r4, r5, r6, pc}
   1e2e2:	bf00      	nop
   1e2e4:	20002fac 	.word	0x20002fac
   1e2e8:	0002679f 	.word	0x0002679f
   1e2ec:	00026718 	.word	0x00026718
   1e2f0:	20002f84 	.word	0x20002f84
   1e2f4:	20002f64 	.word	0x20002f64

0001e2f8 <unpend_thread_no_timeout>:
{
   1e2f8:	b510      	push	{r4, lr}
   1e2fa:	4604      	mov	r4, r0
   1e2fc:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   1e2fe:	b950      	cbnz	r0, 1e316 <unpend_thread_no_timeout+0x1e>
   1e300:	490a      	ldr	r1, [pc, #40]	; (1e32c <unpend_thread_no_timeout+0x34>)
   1e302:	480b      	ldr	r0, [pc, #44]	; (1e330 <unpend_thread_no_timeout+0x38>)
   1e304:	f240 22d6 	movw	r2, #726	; 0x2d6
   1e308:	f004 fe89 	bl	2301e <assert_print>
   1e30c:	4807      	ldr	r0, [pc, #28]	; (1e32c <unpend_thread_no_timeout+0x34>)
   1e30e:	f240 21d6 	movw	r1, #726	; 0x2d6
   1e312:	f004 fe7d 	bl	23010 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1e316:	4621      	mov	r1, r4
   1e318:	f7ff fd82 	bl	1de20 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e31c:	7b63      	ldrb	r3, [r4, #13]
   1e31e:	f023 0302 	bic.w	r3, r3, #2
   1e322:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1e324:	2300      	movs	r3, #0
   1e326:	60a3      	str	r3, [r4, #8]
}
   1e328:	bd10      	pop	{r4, pc}
   1e32a:	bf00      	nop
   1e32c:	000287f7 	.word	0x000287f7
   1e330:	00026718 	.word	0x00026718

0001e334 <z_unpend_thread>:
{
   1e334:	b538      	push	{r3, r4, r5, lr}
   1e336:	4604      	mov	r4, r0
	__asm__ volatile(
   1e338:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e33c:	f3ef 8511 	mrs	r5, BASEPRI
   1e340:	f383 8812 	msr	BASEPRI_MAX, r3
   1e344:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e348:	4813      	ldr	r0, [pc, #76]	; (1e398 <z_unpend_thread+0x64>)
   1e34a:	f7fe fb7f 	bl	1ca4c <z_spin_lock_valid>
   1e34e:	b940      	cbnz	r0, 1e362 <z_unpend_thread+0x2e>
   1e350:	4912      	ldr	r1, [pc, #72]	; (1e39c <z_unpend_thread+0x68>)
   1e352:	4813      	ldr	r0, [pc, #76]	; (1e3a0 <z_unpend_thread+0x6c>)
   1e354:	2294      	movs	r2, #148	; 0x94
   1e356:	f004 fe62 	bl	2301e <assert_print>
   1e35a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e35c:	480f      	ldr	r0, [pc, #60]	; (1e39c <z_unpend_thread+0x68>)
   1e35e:	f004 fe57 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e362:	480d      	ldr	r0, [pc, #52]	; (1e398 <z_unpend_thread+0x64>)
   1e364:	f7fe fb90 	bl	1ca88 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1e368:	4620      	mov	r0, r4
   1e36a:	f7ff ffc5 	bl	1e2f8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e36e:	480a      	ldr	r0, [pc, #40]	; (1e398 <z_unpend_thread+0x64>)
   1e370:	f7fe fb7a 	bl	1ca68 <z_spin_unlock_valid>
   1e374:	b930      	cbnz	r0, 1e384 <z_unpend_thread+0x50>
   1e376:	4909      	ldr	r1, [pc, #36]	; (1e39c <z_unpend_thread+0x68>)
   1e378:	4809      	ldr	r0, [pc, #36]	; (1e3a0 <z_unpend_thread+0x6c>)
   1e37a:	22c2      	movs	r2, #194	; 0xc2
   1e37c:	f004 fe4f 	bl	2301e <assert_print>
   1e380:	21c2      	movs	r1, #194	; 0xc2
   1e382:	e7eb      	b.n	1e35c <z_unpend_thread+0x28>
	__asm__ volatile(
   1e384:	f385 8811 	msr	BASEPRI, r5
   1e388:	f3bf 8f6f 	isb	sy
   1e38c:	f104 0018 	add.w	r0, r4, #24
}
   1e390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e394:	f000 bbda 	b.w	1eb4c <z_abort_timeout>
   1e398:	20002fac 	.word	0x20002fac
   1e39c:	0002679f 	.word	0x0002679f
   1e3a0:	00026718 	.word	0x00026718

0001e3a4 <z_thread_timeout>:
{
   1e3a4:	b570      	push	{r4, r5, r6, lr}
   1e3a6:	4604      	mov	r4, r0
	__asm__ volatile(
   1e3a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e3ac:	f3ef 8611 	mrs	r6, BASEPRI
   1e3b0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e3b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e3b8:	481a      	ldr	r0, [pc, #104]	; (1e424 <z_thread_timeout+0x80>)
   1e3ba:	f7fe fb47 	bl	1ca4c <z_spin_lock_valid>
   1e3be:	b940      	cbnz	r0, 1e3d2 <z_thread_timeout+0x2e>
   1e3c0:	4919      	ldr	r1, [pc, #100]	; (1e428 <z_thread_timeout+0x84>)
   1e3c2:	481a      	ldr	r0, [pc, #104]	; (1e42c <z_thread_timeout+0x88>)
   1e3c4:	2294      	movs	r2, #148	; 0x94
   1e3c6:	f004 fe2a 	bl	2301e <assert_print>
   1e3ca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e3cc:	4816      	ldr	r0, [pc, #88]	; (1e428 <z_thread_timeout+0x84>)
   1e3ce:	f004 fe1f 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e3d2:	4814      	ldr	r0, [pc, #80]	; (1e424 <z_thread_timeout+0x80>)
   1e3d4:	f7fe fb58 	bl	1ca88 <z_spin_lock_set_owner>
		if (!killed) {
   1e3d8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1e3dc:	f013 0f28 	tst.w	r3, #40	; 0x28
   1e3e0:	d110      	bne.n	1e404 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   1e3e2:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1e3e6:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   1e3ea:	b113      	cbz	r3, 1e3f2 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   1e3ec:	4628      	mov	r0, r5
   1e3ee:	f7ff ff83 	bl	1e2f8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1e3f2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1e3f6:	f023 0314 	bic.w	r3, r3, #20
   1e3fa:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1e3fe:	4628      	mov	r0, r5
   1e400:	f7ff fb2c 	bl	1da5c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e404:	4807      	ldr	r0, [pc, #28]	; (1e424 <z_thread_timeout+0x80>)
   1e406:	f7fe fb2f 	bl	1ca68 <z_spin_unlock_valid>
   1e40a:	b930      	cbnz	r0, 1e41a <z_thread_timeout+0x76>
   1e40c:	4906      	ldr	r1, [pc, #24]	; (1e428 <z_thread_timeout+0x84>)
   1e40e:	4807      	ldr	r0, [pc, #28]	; (1e42c <z_thread_timeout+0x88>)
   1e410:	22c2      	movs	r2, #194	; 0xc2
   1e412:	f004 fe04 	bl	2301e <assert_print>
   1e416:	21c2      	movs	r1, #194	; 0xc2
   1e418:	e7d8      	b.n	1e3cc <z_thread_timeout+0x28>
	__asm__ volatile(
   1e41a:	f386 8811 	msr	BASEPRI, r6
   1e41e:	f3bf 8f6f 	isb	sy
}
   1e422:	bd70      	pop	{r4, r5, r6, pc}
   1e424:	20002fac 	.word	0x20002fac
   1e428:	0002679f 	.word	0x0002679f
   1e42c:	00026718 	.word	0x00026718

0001e430 <z_unpend_first_thread>:
{
   1e430:	b570      	push	{r4, r5, r6, lr}
   1e432:	4605      	mov	r5, r0
	__asm__ volatile(
   1e434:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e438:	f3ef 8611 	mrs	r6, BASEPRI
   1e43c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e440:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e444:	4816      	ldr	r0, [pc, #88]	; (1e4a0 <z_unpend_first_thread+0x70>)
   1e446:	f7fe fb01 	bl	1ca4c <z_spin_lock_valid>
   1e44a:	b940      	cbnz	r0, 1e45e <z_unpend_first_thread+0x2e>
   1e44c:	4915      	ldr	r1, [pc, #84]	; (1e4a4 <z_unpend_first_thread+0x74>)
   1e44e:	4816      	ldr	r0, [pc, #88]	; (1e4a8 <z_unpend_first_thread+0x78>)
   1e450:	2294      	movs	r2, #148	; 0x94
   1e452:	f004 fde4 	bl	2301e <assert_print>
   1e456:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e458:	4812      	ldr	r0, [pc, #72]	; (1e4a4 <z_unpend_first_thread+0x74>)
   1e45a:	f004 fdd9 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e45e:	4810      	ldr	r0, [pc, #64]	; (1e4a0 <z_unpend_first_thread+0x70>)
   1e460:	f7fe fb12 	bl	1ca88 <z_spin_lock_set_owner>
	return list->head == list;
   1e464:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e466:	42a5      	cmp	r5, r4
   1e468:	d012      	beq.n	1e490 <z_unpend_first_thread+0x60>
		if (thread != NULL) {
   1e46a:	b134      	cbz	r4, 1e47a <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   1e46c:	4620      	mov	r0, r4
   1e46e:	f7ff ff43 	bl	1e2f8 <unpend_thread_no_timeout>
   1e472:	f104 0018 	add.w	r0, r4, #24
   1e476:	f000 fb69 	bl	1eb4c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e47a:	4809      	ldr	r0, [pc, #36]	; (1e4a0 <z_unpend_first_thread+0x70>)
   1e47c:	f7fe faf4 	bl	1ca68 <z_spin_unlock_valid>
   1e480:	b940      	cbnz	r0, 1e494 <z_unpend_first_thread+0x64>
   1e482:	4908      	ldr	r1, [pc, #32]	; (1e4a4 <z_unpend_first_thread+0x74>)
   1e484:	4808      	ldr	r0, [pc, #32]	; (1e4a8 <z_unpend_first_thread+0x78>)
   1e486:	22c2      	movs	r2, #194	; 0xc2
   1e488:	f004 fdc9 	bl	2301e <assert_print>
   1e48c:	21c2      	movs	r1, #194	; 0xc2
   1e48e:	e7e3      	b.n	1e458 <z_unpend_first_thread+0x28>
   1e490:	2400      	movs	r4, #0
   1e492:	e7f2      	b.n	1e47a <z_unpend_first_thread+0x4a>
	__asm__ volatile(
   1e494:	f386 8811 	msr	BASEPRI, r6
   1e498:	f3bf 8f6f 	isb	sy
}
   1e49c:	4620      	mov	r0, r4
   1e49e:	bd70      	pop	{r4, r5, r6, pc}
   1e4a0:	20002fac 	.word	0x20002fac
   1e4a4:	0002679f 	.word	0x0002679f
   1e4a8:	00026718 	.word	0x00026718

0001e4ac <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1e4ac:	4b04      	ldr	r3, [pc, #16]	; (1e4c0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1e4ae:	2100      	movs	r1, #0
   1e4b0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1e4b4:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1e4b8:	4608      	mov	r0, r1
   1e4ba:	f7ff bb17 	b.w	1daec <k_sched_time_slice_set>
   1e4be:	bf00      	nop
   1e4c0:	20002f64 	.word	0x20002f64

0001e4c4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1e4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4c6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1e4ca:	b14b      	cbz	r3, 1e4e0 <z_impl_k_yield+0x1c>
   1e4cc:	4935      	ldr	r1, [pc, #212]	; (1e5a4 <z_impl_k_yield+0xe0>)
   1e4ce:	4836      	ldr	r0, [pc, #216]	; (1e5a8 <z_impl_k_yield+0xe4>)
   1e4d0:	f44f 62ae 	mov.w	r2, #1392	; 0x570
   1e4d4:	f004 fda3 	bl	2301e <assert_print>
   1e4d8:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1e4dc:	4831      	ldr	r0, [pc, #196]	; (1e5a4 <z_impl_k_yield+0xe0>)
   1e4de:	e012      	b.n	1e506 <z_impl_k_yield+0x42>
	__asm__ volatile(
   1e4e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e4e4:	f3ef 8611 	mrs	r6, BASEPRI
   1e4e8:	f383 8812 	msr	BASEPRI_MAX, r3
   1e4ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e4f0:	482e      	ldr	r0, [pc, #184]	; (1e5ac <z_impl_k_yield+0xe8>)
   1e4f2:	f7fe faab 	bl	1ca4c <z_spin_lock_valid>
   1e4f6:	b940      	cbnz	r0, 1e50a <z_impl_k_yield+0x46>
   1e4f8:	492d      	ldr	r1, [pc, #180]	; (1e5b0 <z_impl_k_yield+0xec>)
   1e4fa:	482b      	ldr	r0, [pc, #172]	; (1e5a8 <z_impl_k_yield+0xe4>)
   1e4fc:	2294      	movs	r2, #148	; 0x94
   1e4fe:	f004 fd8e 	bl	2301e <assert_print>
   1e502:	2194      	movs	r1, #148	; 0x94
   1e504:	482a      	ldr	r0, [pc, #168]	; (1e5b0 <z_impl_k_yield+0xec>)
   1e506:	f004 fd83 	bl	23010 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1e50a:	4c2a      	ldr	r4, [pc, #168]	; (1e5b4 <z_impl_k_yield+0xf0>)
	z_spin_lock_set_owner(l);
   1e50c:	4827      	ldr	r0, [pc, #156]	; (1e5ac <z_impl_k_yield+0xe8>)
   1e50e:	f7fe fabb 	bl	1ca88 <z_spin_lock_set_owner>
   1e512:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e514:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1e516:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e51e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1e520:	4628      	mov	r0, r5
   1e522:	f7ff fc7d 	bl	1de20 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   1e526:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1e528:	7b5a      	ldrb	r2, [r3, #13]
   1e52a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1e52e:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1e530:	4a21      	ldr	r2, [pc, #132]	; (1e5b8 <z_impl_k_yield+0xf4>)
   1e532:	4293      	cmp	r3, r2
   1e534:	d106      	bne.n	1e544 <z_impl_k_yield+0x80>
   1e536:	491b      	ldr	r1, [pc, #108]	; (1e5a4 <z_impl_k_yield+0xe0>)
   1e538:	481b      	ldr	r0, [pc, #108]	; (1e5a8 <z_impl_k_yield+0xe4>)
   1e53a:	22ba      	movs	r2, #186	; 0xba
   1e53c:	f004 fd6f 	bl	2301e <assert_print>
   1e540:	21ba      	movs	r1, #186	; 0xba
   1e542:	e7cb      	b.n	1e4dc <z_impl_k_yield+0x18>
	return list->head == list;
   1e544:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   1e546:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e548:	42aa      	cmp	r2, r5
   1e54a:	bf08      	it	eq
   1e54c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e54e:	b922      	cbnz	r2, 1e55a <z_impl_k_yield+0x96>
	node->prev = tail;
   1e550:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   1e554:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1e556:	6263      	str	r3, [r4, #36]	; 0x24
}
   1e558:	e00c      	b.n	1e574 <z_impl_k_yield+0xb0>
	int32_t b1 = thread_1->base.prio;
   1e55a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1e55e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1e562:	42b8      	cmp	r0, r7
   1e564:	d014      	beq.n	1e590 <z_impl_k_yield+0xcc>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e566:	4287      	cmp	r7, r0
   1e568:	dd12      	ble.n	1e590 <z_impl_k_yield+0xcc>
	sys_dnode_t *const prev = successor->prev;
   1e56a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1e56c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1e570:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1e572:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1e574:	2001      	movs	r0, #1
   1e576:	f7ff fa45 	bl	1da04 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e57a:	480c      	ldr	r0, [pc, #48]	; (1e5ac <z_impl_k_yield+0xe8>)
   1e57c:	f7fe fa74 	bl	1ca68 <z_spin_unlock_valid>
   1e580:	b950      	cbnz	r0, 1e598 <z_impl_k_yield+0xd4>
   1e582:	490b      	ldr	r1, [pc, #44]	; (1e5b0 <z_impl_k_yield+0xec>)
   1e584:	4808      	ldr	r0, [pc, #32]	; (1e5a8 <z_impl_k_yield+0xe4>)
   1e586:	22e1      	movs	r2, #225	; 0xe1
   1e588:	f004 fd49 	bl	2301e <assert_print>
   1e58c:	21e1      	movs	r1, #225	; 0xe1
   1e58e:	e7b9      	b.n	1e504 <z_impl_k_yield+0x40>
	return (node == list->tail) ? NULL : node->next;
   1e590:	428a      	cmp	r2, r1
   1e592:	d0dd      	beq.n	1e550 <z_impl_k_yield+0x8c>
   1e594:	6812      	ldr	r2, [r2, #0]
   1e596:	e7da      	b.n	1e54e <z_impl_k_yield+0x8a>
   1e598:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   1e59a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e59e:	f7f4 b90b 	b.w	127b8 <arch_swap>
   1e5a2:	bf00      	nop
   1e5a4:	000287f7 	.word	0x000287f7
   1e5a8:	00026718 	.word	0x00026718
   1e5ac:	20002fac 	.word	0x20002fac
   1e5b0:	0002679f 	.word	0x0002679f
   1e5b4:	20002f64 	.word	0x20002f64
   1e5b8:	20001fe0 	.word	0x20001fe0

0001e5bc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e5c0:	4605      	mov	r5, r0
   1e5c2:	460e      	mov	r6, r1
   1e5c4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1e5c8:	b14b      	cbz	r3, 1e5de <z_tick_sleep+0x22>
   1e5ca:	4936      	ldr	r1, [pc, #216]	; (1e6a4 <z_tick_sleep+0xe8>)
   1e5cc:	4836      	ldr	r0, [pc, #216]	; (1e6a8 <z_tick_sleep+0xec>)
   1e5ce:	f240 528c 	movw	r2, #1420	; 0x58c
   1e5d2:	f004 fd24 	bl	2301e <assert_print>
   1e5d6:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1e5da:	4832      	ldr	r0, [pc, #200]	; (1e6a4 <z_tick_sleep+0xe8>)
   1e5dc:	e020      	b.n	1e620 <z_tick_sleep+0x64>
	if (ticks == 0) {
   1e5de:	ea50 0301 	orrs.w	r3, r0, r1
   1e5e2:	d103      	bne.n	1e5ec <z_tick_sleep+0x30>
	z_impl_k_yield();
   1e5e4:	f7ff ff6e 	bl	1e4c4 <z_impl_k_yield>
		return 0;
   1e5e8:	2000      	movs	r0, #0
   1e5ea:	e058      	b.n	1e69e <z_tick_sleep+0xe2>
	if (Z_TICK_ABS(ticks) <= 0) {
   1e5ec:	1c82      	adds	r2, r0, #2
   1e5ee:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1e5f2:	db17      	blt.n	1e624 <z_tick_sleep+0x68>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1e5f4:	f006 ff2b 	bl	2544e <sys_clock_tick_get_32>
   1e5f8:	1944      	adds	r4, r0, r5
   1e5fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e5fe:	f3ef 8811 	mrs	r8, BASEPRI
   1e602:	f383 8812 	msr	BASEPRI_MAX, r3
   1e606:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e60a:	4828      	ldr	r0, [pc, #160]	; (1e6ac <z_tick_sleep+0xf0>)
   1e60c:	f7fe fa1e 	bl	1ca4c <z_spin_lock_valid>
   1e610:	b960      	cbnz	r0, 1e62c <z_tick_sleep+0x70>
   1e612:	4927      	ldr	r1, [pc, #156]	; (1e6b0 <z_tick_sleep+0xf4>)
   1e614:	4824      	ldr	r0, [pc, #144]	; (1e6a8 <z_tick_sleep+0xec>)
   1e616:	2294      	movs	r2, #148	; 0x94
   1e618:	f004 fd01 	bl	2301e <assert_print>
   1e61c:	2194      	movs	r1, #148	; 0x94
   1e61e:	4824      	ldr	r0, [pc, #144]	; (1e6b0 <z_tick_sleep+0xf4>)
   1e620:	f004 fcf6 	bl	23010 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1e624:	f06f 0401 	mvn.w	r4, #1
   1e628:	1a24      	subs	r4, r4, r0
   1e62a:	e7e6      	b.n	1e5fa <z_tick_sleep+0x3e>
	pending_current = _current;
   1e62c:	4f21      	ldr	r7, [pc, #132]	; (1e6b4 <z_tick_sleep+0xf8>)
	z_spin_lock_set_owner(l);
   1e62e:	481f      	ldr	r0, [pc, #124]	; (1e6ac <z_tick_sleep+0xf0>)
   1e630:	f7fe fa2a 	bl	1ca88 <z_spin_lock_set_owner>
   1e634:	4b20      	ldr	r3, [pc, #128]	; (1e6b8 <z_tick_sleep+0xfc>)
   1e636:	68b8      	ldr	r0, [r7, #8]
   1e638:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1e63a:	f7ff fcc3 	bl	1dfc4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1e63e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1e640:	491e      	ldr	r1, [pc, #120]	; (1e6bc <z_tick_sleep+0x100>)
   1e642:	462a      	mov	r2, r5
   1e644:	4633      	mov	r3, r6
   1e646:	3018      	adds	r0, #24
   1e648:	f000 f9d4 	bl	1e9f4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1e64c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e64e:	4817      	ldr	r0, [pc, #92]	; (1e6ac <z_tick_sleep+0xf0>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1e650:	7b53      	ldrb	r3, [r2, #13]
   1e652:	f043 0310 	orr.w	r3, r3, #16
   1e656:	7353      	strb	r3, [r2, #13]
   1e658:	f7fe fa06 	bl	1ca68 <z_spin_unlock_valid>
   1e65c:	b930      	cbnz	r0, 1e66c <z_tick_sleep+0xb0>
   1e65e:	4914      	ldr	r1, [pc, #80]	; (1e6b0 <z_tick_sleep+0xf4>)
   1e660:	4811      	ldr	r0, [pc, #68]	; (1e6a8 <z_tick_sleep+0xec>)
   1e662:	22e1      	movs	r2, #225	; 0xe1
   1e664:	f004 fcdb 	bl	2301e <assert_print>
   1e668:	21e1      	movs	r1, #225	; 0xe1
   1e66a:	e7d8      	b.n	1e61e <z_tick_sleep+0x62>
   1e66c:	4640      	mov	r0, r8
   1e66e:	f7f4 f8a3 	bl	127b8 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   1e672:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1e674:	7b5b      	ldrb	r3, [r3, #13]
   1e676:	06db      	lsls	r3, r3, #27
   1e678:	d508      	bpl.n	1e68c <z_tick_sleep+0xd0>
   1e67a:	490a      	ldr	r1, [pc, #40]	; (1e6a4 <z_tick_sleep+0xe8>)
   1e67c:	480a      	ldr	r0, [pc, #40]	; (1e6a8 <z_tick_sleep+0xec>)
   1e67e:	f240 52ad 	movw	r2, #1453	; 0x5ad
   1e682:	f004 fccc 	bl	2301e <assert_print>
   1e686:	f240 51ad 	movw	r1, #1453	; 0x5ad
   1e68a:	e7a6      	b.n	1e5da <z_tick_sleep+0x1e>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1e68c:	f006 fedf 	bl	2544e <sys_clock_tick_get_32>
   1e690:	1a20      	subs	r0, r4, r0
   1e692:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1e696:	2801      	cmp	r0, #1
   1e698:	f173 0300 	sbcs.w	r3, r3, #0
   1e69c:	dba4      	blt.n	1e5e8 <z_tick_sleep+0x2c>
		return ticks;
	}
#endif

	return 0;
}
   1e69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6a2:	bf00      	nop
   1e6a4:	000287f7 	.word	0x000287f7
   1e6a8:	00026718 	.word	0x00026718
   1e6ac:	20002fac 	.word	0x20002fac
   1e6b0:	0002679f 	.word	0x0002679f
   1e6b4:	20002f64 	.word	0x20002f64
   1e6b8:	20002fa0 	.word	0x20002fa0
   1e6bc:	0001e3a5 	.word	0x0001e3a5

0001e6c0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1e6c0:	b508      	push	{r3, lr}
   1e6c2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1e6c6:	b153      	cbz	r3, 1e6de <z_impl_k_sleep+0x1e>
   1e6c8:	4910      	ldr	r1, [pc, #64]	; (1e70c <z_impl_k_sleep+0x4c>)
   1e6ca:	4811      	ldr	r0, [pc, #68]	; (1e710 <z_impl_k_sleep+0x50>)
   1e6cc:	f240 52bc 	movw	r2, #1468	; 0x5bc
   1e6d0:	f004 fca5 	bl	2301e <assert_print>
   1e6d4:	480d      	ldr	r0, [pc, #52]	; (1e70c <z_impl_k_sleep+0x4c>)
   1e6d6:	f240 51bc 	movw	r1, #1468	; 0x5bc
   1e6da:	f004 fc99 	bl	23010 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e6de:	f1b1 3fff 	cmp.w	r1, #4294967295
   1e6e2:	bf08      	it	eq
   1e6e4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1e6e8:	d106      	bne.n	1e6f8 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   1e6ea:	4b0a      	ldr	r3, [pc, #40]	; (1e714 <z_impl_k_sleep+0x54>)
   1e6ec:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1e6ee:	f7ff fdad 	bl	1e24c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1e6f2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1e6f6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1e6f8:	f7ff ff60 	bl	1e5bc <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1e6fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e700:	fb80 0303 	smull	r0, r3, r0, r3
   1e704:	0bc0      	lsrs	r0, r0, #15
   1e706:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1e70a:	e7f4      	b.n	1e6f6 <z_impl_k_sleep+0x36>
   1e70c:	000287f7 	.word	0x000287f7
   1e710:	00026718 	.word	0x00026718
   1e714:	20002f64 	.word	0x20002f64

0001e718 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1e718:	4b01      	ldr	r3, [pc, #4]	; (1e720 <z_impl_z_current_get+0x8>)
   1e71a:	6898      	ldr	r0, [r3, #8]
   1e71c:	4770      	bx	lr
   1e71e:	bf00      	nop
   1e720:	20002f64 	.word	0x20002f64

0001e724 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1e724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e728:	4604      	mov	r4, r0
   1e72a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e72e:	f3ef 8611 	mrs	r6, BASEPRI
   1e732:	f383 8812 	msr	BASEPRI_MAX, r3
   1e736:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e73a:	4845      	ldr	r0, [pc, #276]	; (1e850 <z_thread_abort+0x12c>)
   1e73c:	f7fe f986 	bl	1ca4c <z_spin_lock_valid>
   1e740:	b940      	cbnz	r0, 1e754 <z_thread_abort+0x30>
   1e742:	4944      	ldr	r1, [pc, #272]	; (1e854 <z_thread_abort+0x130>)
   1e744:	4844      	ldr	r0, [pc, #272]	; (1e858 <z_thread_abort+0x134>)
   1e746:	2294      	movs	r2, #148	; 0x94
   1e748:	f004 fc69 	bl	2301e <assert_print>
   1e74c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e74e:	4841      	ldr	r0, [pc, #260]	; (1e854 <z_thread_abort+0x130>)
   1e750:	f004 fc5e 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e754:	483e      	ldr	r0, [pc, #248]	; (1e850 <z_thread_abort+0x12c>)
   1e756:	f7fe f997 	bl	1ca88 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1e75a:	7b23      	ldrb	r3, [r4, #12]
   1e75c:	07d9      	lsls	r1, r3, #31
   1e75e:	d518      	bpl.n	1e792 <z_thread_abort+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e760:	483b      	ldr	r0, [pc, #236]	; (1e850 <z_thread_abort+0x12c>)
   1e762:	f7fe f981 	bl	1ca68 <z_spin_unlock_valid>
   1e766:	b930      	cbnz	r0, 1e776 <z_thread_abort+0x52>
   1e768:	493a      	ldr	r1, [pc, #232]	; (1e854 <z_thread_abort+0x130>)
   1e76a:	483b      	ldr	r0, [pc, #236]	; (1e858 <z_thread_abort+0x134>)
   1e76c:	22c2      	movs	r2, #194	; 0xc2
   1e76e:	f004 fc56 	bl	2301e <assert_print>
   1e772:	21c2      	movs	r1, #194	; 0xc2
   1e774:	e7eb      	b.n	1e74e <z_thread_abort+0x2a>
	__asm__ volatile(
   1e776:	f386 8811 	msr	BASEPRI, r6
   1e77a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   1e77e:	4937      	ldr	r1, [pc, #220]	; (1e85c <z_thread_abort+0x138>)
   1e780:	4835      	ldr	r0, [pc, #212]	; (1e858 <z_thread_abort+0x134>)
   1e782:	f44f 62d9 	mov.w	r2, #1736	; 0x6c8
   1e786:	f004 fc4a 	bl	2301e <assert_print>
   1e78a:	f44f 61d9 	mov.w	r1, #1736	; 0x6c8
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   1e78e:	4833      	ldr	r0, [pc, #204]	; (1e85c <z_thread_abort+0x138>)
   1e790:	e7de      	b.n	1e750 <z_thread_abort+0x2c>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1e792:	7b63      	ldrb	r3, [r4, #13]
   1e794:	071a      	lsls	r2, r3, #28
   1e796:	d50a      	bpl.n	1e7ae <z_thread_abort+0x8a>
   1e798:	482d      	ldr	r0, [pc, #180]	; (1e850 <z_thread_abort+0x12c>)
   1e79a:	f7fe f965 	bl	1ca68 <z_spin_unlock_valid>
   1e79e:	2800      	cmp	r0, #0
   1e7a0:	d0e2      	beq.n	1e768 <z_thread_abort+0x44>
   1e7a2:	f386 8811 	msr	BASEPRI, r6
   1e7a6:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1e7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1e7ae:	f023 0220 	bic.w	r2, r3, #32
   1e7b2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1e7b6:	09d2      	lsrs	r2, r2, #7
   1e7b8:	d127      	bne.n	1e80a <z_thread_abort+0xe6>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1e7ba:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   1e7bc:	68a3      	ldr	r3, [r4, #8]
   1e7be:	b113      	cbz	r3, 1e7c6 <z_thread_abort+0xa2>
			unpend_thread_no_timeout(thread);
   1e7c0:	4620      	mov	r0, r4
   1e7c2:	f7ff fd99 	bl	1e2f8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1e7c6:	f104 0018 	add.w	r0, r4, #24
   1e7ca:	f000 f9bf 	bl	1eb4c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1e7ce:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1e7d2:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1e7d6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e7d8:	42bd      	cmp	r5, r7
   1e7da:	d000      	beq.n	1e7de <z_thread_abort+0xba>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e7dc:	b9fd      	cbnz	r5, 1e81e <z_thread_abort+0xfa>
		update_cache(1);
   1e7de:	2001      	movs	r0, #1
   1e7e0:	f7ff f910 	bl	1da04 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1e7e4:	4b1e      	ldr	r3, [pc, #120]	; (1e860 <z_thread_abort+0x13c>)
   1e7e6:	689b      	ldr	r3, [r3, #8]
   1e7e8:	42a3      	cmp	r3, r4
   1e7ea:	d1d5      	bne.n	1e798 <z_thread_abort+0x74>
   1e7ec:	f3ef 8305 	mrs	r3, IPSR
   1e7f0:	2b00      	cmp	r3, #0
   1e7f2:	d1d1      	bne.n	1e798 <z_thread_abort+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e7f4:	4816      	ldr	r0, [pc, #88]	; (1e850 <z_thread_abort+0x12c>)
   1e7f6:	f7fe f937 	bl	1ca68 <z_spin_unlock_valid>
   1e7fa:	b9e8      	cbnz	r0, 1e838 <z_thread_abort+0x114>
   1e7fc:	4915      	ldr	r1, [pc, #84]	; (1e854 <z_thread_abort+0x130>)
   1e7fe:	4816      	ldr	r0, [pc, #88]	; (1e858 <z_thread_abort+0x134>)
   1e800:	22e1      	movs	r2, #225	; 0xe1
   1e802:	f004 fc0c 	bl	2301e <assert_print>
   1e806:	21e1      	movs	r1, #225	; 0xe1
   1e808:	e7a1      	b.n	1e74e <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e80a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1e80e:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   1e812:	4814      	ldr	r0, [pc, #80]	; (1e864 <z_thread_abort+0x140>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e814:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1e816:	4621      	mov	r1, r4
   1e818:	f7ff fb02 	bl	1de20 <z_priq_dumb_remove>
}
   1e81c:	e7ce      	b.n	1e7bc <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
   1e81e:	4628      	mov	r0, r5
   1e820:	f7ff fd6a 	bl	1e2f8 <unpend_thread_no_timeout>
   1e824:	f105 0018 	add.w	r0, r5, #24
   1e828:	f000 f990 	bl	1eb4c <z_abort_timeout>
   1e82c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1e830:	4628      	mov	r0, r5
   1e832:	f7ff f913 	bl	1da5c <ready_thread>
   1e836:	e7ce      	b.n	1e7d6 <z_thread_abort+0xb2>
   1e838:	4630      	mov	r0, r6
   1e83a:	f7f3 ffbd 	bl	127b8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   1e83e:	4907      	ldr	r1, [pc, #28]	; (1e85c <z_thread_abort+0x138>)
   1e840:	4805      	ldr	r0, [pc, #20]	; (1e858 <z_thread_abort+0x134>)
   1e842:	f240 62f7 	movw	r2, #1783	; 0x6f7
   1e846:	f004 fbea 	bl	2301e <assert_print>
   1e84a:	f240 61f7 	movw	r1, #1783	; 0x6f7
   1e84e:	e79e      	b.n	1e78e <z_thread_abort+0x6a>
   1e850:	20002fac 	.word	0x20002fac
   1e854:	0002679f 	.word	0x0002679f
   1e858:	00026718 	.word	0x00026718
   1e85c:	000287f7 	.word	0x000287f7
   1e860:	20002f64 	.word	0x20002f64
   1e864:	20002f84 	.word	0x20002f84

0001e868 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   1e868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e86c:	4606      	mov	r6, r0
   1e86e:	4688      	mov	r8, r1
   1e870:	4617      	mov	r7, r2
	__asm__ volatile(
   1e872:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e876:	f3ef 8911 	mrs	r9, BASEPRI
   1e87a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e87e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e882:	481c      	ldr	r0, [pc, #112]	; (1e8f4 <z_sched_wake+0x8c>)
   1e884:	f7fe f8e2 	bl	1ca4c <z_spin_lock_valid>
   1e888:	4605      	mov	r5, r0
   1e88a:	b940      	cbnz	r0, 1e89e <z_sched_wake+0x36>
   1e88c:	491a      	ldr	r1, [pc, #104]	; (1e8f8 <z_sched_wake+0x90>)
   1e88e:	481b      	ldr	r0, [pc, #108]	; (1e8fc <z_sched_wake+0x94>)
   1e890:	2294      	movs	r2, #148	; 0x94
   1e892:	f004 fbc4 	bl	2301e <assert_print>
   1e896:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e898:	4817      	ldr	r0, [pc, #92]	; (1e8f8 <z_sched_wake+0x90>)
   1e89a:	f004 fbb9 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e89e:	4815      	ldr	r0, [pc, #84]	; (1e8f4 <z_sched_wake+0x8c>)
   1e8a0:	f7fe f8f2 	bl	1ca88 <z_spin_lock_set_owner>
	return list->head == list;
   1e8a4:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e8a6:	42a6      	cmp	r6, r4
   1e8a8:	d018      	beq.n	1e8dc <z_sched_wake+0x74>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   1e8aa:	b1cc      	cbz	r4, 1e8e0 <z_sched_wake+0x78>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   1e8ac:	4620      	mov	r0, r4
   1e8ae:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
   1e8b2:	6167      	str	r7, [r4, #20]
   1e8b4:	f7ff fd20 	bl	1e2f8 <unpend_thread_no_timeout>
   1e8b8:	f104 0018 	add.w	r0, r4, #24
   1e8bc:	f000 f946 	bl	1eb4c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   1e8c0:	4620      	mov	r0, r4
   1e8c2:	f7ff f8cb 	bl	1da5c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e8c6:	480b      	ldr	r0, [pc, #44]	; (1e8f4 <z_sched_wake+0x8c>)
   1e8c8:	f7fe f8ce 	bl	1ca68 <z_spin_unlock_valid>
   1e8cc:	b950      	cbnz	r0, 1e8e4 <z_sched_wake+0x7c>
   1e8ce:	490a      	ldr	r1, [pc, #40]	; (1e8f8 <z_sched_wake+0x90>)
   1e8d0:	480a      	ldr	r0, [pc, #40]	; (1e8fc <z_sched_wake+0x94>)
   1e8d2:	22c2      	movs	r2, #194	; 0xc2
   1e8d4:	f004 fba3 	bl	2301e <assert_print>
   1e8d8:	21c2      	movs	r1, #194	; 0xc2
   1e8da:	e7dd      	b.n	1e898 <z_sched_wake+0x30>
	bool ret = false;
   1e8dc:	2500      	movs	r5, #0
   1e8de:	e7f2      	b.n	1e8c6 <z_sched_wake+0x5e>
   1e8e0:	4625      	mov	r5, r4
   1e8e2:	e7f0      	b.n	1e8c6 <z_sched_wake+0x5e>
	__asm__ volatile(
   1e8e4:	f389 8811 	msr	BASEPRI, r9
   1e8e8:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   1e8ec:	4628      	mov	r0, r5
   1e8ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e8f2:	bf00      	nop
   1e8f4:	20002fac 	.word	0x20002fac
   1e8f8:	0002679f 	.word	0x0002679f
   1e8fc:	00026718 	.word	0x00026718

0001e900 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1e900:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1e902:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1e906:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1e908:	e9cd 6700 	strd	r6, r7, [sp]
   1e90c:	f7ff fbc8 	bl	1e0a0 <z_pend_curr>

	if (data != NULL) {
   1e910:	b11c      	cbz	r4, 1e91a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1e912:	4b03      	ldr	r3, [pc, #12]	; (1e920 <z_sched_wait+0x20>)
   1e914:	689b      	ldr	r3, [r3, #8]
   1e916:	695b      	ldr	r3, [r3, #20]
   1e918:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1e91a:	b002      	add	sp, #8
   1e91c:	bdd0      	pop	{r4, r6, r7, pc}
   1e91e:	bf00      	nop
   1e920:	20002f64 	.word	0x20002f64

0001e924 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1e924:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1e926:	4806      	ldr	r0, [pc, #24]	; (1e940 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1e928:	4a06      	ldr	r2, [pc, #24]	; (1e944 <z_data_copy+0x20>)
   1e92a:	4907      	ldr	r1, [pc, #28]	; (1e948 <z_data_copy+0x24>)
   1e92c:	1a12      	subs	r2, r2, r0
   1e92e:	f006 fc69 	bl	25204 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1e932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1e936:	4a05      	ldr	r2, [pc, #20]	; (1e94c <z_data_copy+0x28>)
   1e938:	4905      	ldr	r1, [pc, #20]	; (1e950 <z_data_copy+0x2c>)
   1e93a:	4806      	ldr	r0, [pc, #24]	; (1e954 <z_data_copy+0x30>)
   1e93c:	f006 bc62 	b.w	25204 <z_early_memcpy>
   1e940:	20000000 	.word	0x20000000
   1e944:	20000c20 	.word	0x20000c20
   1e948:	000288dc 	.word	0x000288dc
   1e94c:	00000000 	.word	0x00000000
   1e950:	000288dc 	.word	0x000288dc
   1e954:	20000000 	.word	0x20000000

0001e958 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1e958:	4b03      	ldr	r3, [pc, #12]	; (1e968 <elapsed+0x10>)
   1e95a:	681b      	ldr	r3, [r3, #0]
   1e95c:	b90b      	cbnz	r3, 1e962 <elapsed+0xa>
   1e95e:	f7fb b911 	b.w	19b84 <sys_clock_elapsed>
}
   1e962:	2000      	movs	r0, #0
   1e964:	4770      	bx	lr
   1e966:	bf00      	nop
   1e968:	20002fb0 	.word	0x20002fb0

0001e96c <next_timeout>:

static int32_t next_timeout(void)
{
   1e96c:	b510      	push	{r4, lr}
	return list->head == list;
   1e96e:	4b11      	ldr	r3, [pc, #68]	; (1e9b4 <next_timeout+0x48>)
   1e970:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e972:	429c      	cmp	r4, r3
   1e974:	d10a      	bne.n	1e98c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1e976:	f7ff ffef 	bl	1e958 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   1e97a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1e97e:	4b0e      	ldr	r3, [pc, #56]	; (1e9b8 <next_timeout+0x4c>)
   1e980:	691b      	ldr	r3, [r3, #16]
   1e982:	b113      	cbz	r3, 1e98a <next_timeout+0x1e>
   1e984:	4298      	cmp	r0, r3
   1e986:	bfa8      	it	ge
   1e988:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1e98a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1e98c:	f7ff ffe4 	bl	1e958 <elapsed>
	if ((to == NULL) ||
   1e990:	2c00      	cmp	r4, #0
   1e992:	d0f2      	beq.n	1e97a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1e994:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1e998:	1a1b      	subs	r3, r3, r0
   1e99a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1e99e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1e9a2:	f172 0100 	sbcs.w	r1, r2, #0
   1e9a6:	dae8      	bge.n	1e97a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1e9a8:	2a00      	cmp	r2, #0
   1e9aa:	bfac      	ite	ge
   1e9ac:	4618      	movge	r0, r3
   1e9ae:	2000      	movlt	r0, #0
   1e9b0:	e7e5      	b.n	1e97e <next_timeout+0x12>
   1e9b2:	bf00      	nop
   1e9b4:	20000828 	.word	0x20000828
   1e9b8:	20002f64 	.word	0x20002f64

0001e9bc <remove_timeout>:
{
   1e9bc:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e9be:	b170      	cbz	r0, 1e9de <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1e9c0:	4b0b      	ldr	r3, [pc, #44]	; (1e9f0 <remove_timeout+0x34>)
   1e9c2:	685b      	ldr	r3, [r3, #4]
   1e9c4:	4298      	cmp	r0, r3
   1e9c6:	d00a      	beq.n	1e9de <remove_timeout+0x22>
   1e9c8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   1e9ca:	b143      	cbz	r3, 1e9de <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1e9cc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1e9d0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1e9d4:	1912      	adds	r2, r2, r4
   1e9d6:	eb41 0105 	adc.w	r1, r1, r5
   1e9da:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   1e9de:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e9e2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e9e4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e9e6:	2300      	movs	r3, #0
	node->prev = NULL;
   1e9e8:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e9ec:	bd30      	pop	{r4, r5, pc}
   1e9ee:	bf00      	nop
   1e9f0:	20000828 	.word	0x20000828

0001e9f4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e9f8:	bf08      	it	eq
   1e9fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1e9fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ea02:	4604      	mov	r4, r0
   1ea04:	4692      	mov	sl, r2
   1ea06:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ea08:	f000 8090 	beq.w	1eb2c <z_add_timeout+0x138>
	return node->next != NULL;
   1ea0c:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1ea0e:	b146      	cbz	r6, 1ea22 <z_add_timeout+0x2e>
   1ea10:	4947      	ldr	r1, [pc, #284]	; (1eb30 <z_add_timeout+0x13c>)
   1ea12:	4848      	ldr	r0, [pc, #288]	; (1eb34 <z_add_timeout+0x140>)
   1ea14:	2263      	movs	r2, #99	; 0x63
   1ea16:	f004 fb02 	bl	2301e <assert_print>
   1ea1a:	4845      	ldr	r0, [pc, #276]	; (1eb30 <z_add_timeout+0x13c>)
   1ea1c:	2163      	movs	r1, #99	; 0x63
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ea1e:	f004 faf7 	bl	23010 <assert_post_action>
	to->fn = fn;
   1ea22:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1ea24:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ea28:	f3ef 8711 	mrs	r7, BASEPRI
   1ea2c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea30:	f3bf 8f6f 	isb	sy
   1ea34:	4840      	ldr	r0, [pc, #256]	; (1eb38 <z_add_timeout+0x144>)
   1ea36:	f7fe f809 	bl	1ca4c <z_spin_lock_valid>
   1ea3a:	b938      	cbnz	r0, 1ea4c <z_add_timeout+0x58>
   1ea3c:	493f      	ldr	r1, [pc, #252]	; (1eb3c <z_add_timeout+0x148>)
   1ea3e:	483d      	ldr	r0, [pc, #244]	; (1eb34 <z_add_timeout+0x140>)
   1ea40:	2294      	movs	r2, #148	; 0x94
   1ea42:	f004 faec 	bl	2301e <assert_print>
   1ea46:	2194      	movs	r1, #148	; 0x94
   1ea48:	483c      	ldr	r0, [pc, #240]	; (1eb3c <z_add_timeout+0x148>)
   1ea4a:	e7e8      	b.n	1ea1e <z_add_timeout+0x2a>
	z_spin_lock_set_owner(l);
   1ea4c:	483a      	ldr	r0, [pc, #232]	; (1eb38 <z_add_timeout+0x144>)
   1ea4e:	f7fe f81b 	bl	1ca88 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1ea52:	f1ba 3fff 	cmp.w	sl, #4294967295
   1ea56:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1ea5a:	da23      	bge.n	1eaa4 <z_add_timeout+0xb0>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1ea5c:	4938      	ldr	r1, [pc, #224]	; (1eb40 <z_add_timeout+0x14c>)
   1ea5e:	e9d1 2000 	ldrd	r2, r0, [r1]
   1ea62:	f06f 0301 	mvn.w	r3, #1
   1ea66:	1a9b      	subs	r3, r3, r2
   1ea68:	f04f 32ff 	mov.w	r2, #4294967295
   1ea6c:	eb62 0000 	sbc.w	r0, r2, r0
   1ea70:	ebb3 030a 	subs.w	r3, r3, sl
   1ea74:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   1ea78:	2b01      	cmp	r3, #1
   1ea7a:	f170 0200 	sbcs.w	r2, r0, #0
   1ea7e:	da01      	bge.n	1ea84 <z_add_timeout+0x90>
   1ea80:	2301      	movs	r3, #1
   1ea82:	4630      	mov	r0, r6
   1ea84:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   1ea88:	4b2e      	ldr	r3, [pc, #184]	; (1eb44 <z_add_timeout+0x150>)
   1ea8a:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   1ea8c:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ea90:	429a      	cmp	r2, r3
   1ea92:	bf18      	it	ne
   1ea94:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1ea96:	b986      	cbnz	r6, 1eaba <z_add_timeout+0xc6>
	node->prev = tail;
   1ea98:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   1ea9c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1eaa0:	605c      	str	r4, [r3, #4]
}
   1eaa2:	e01c      	b.n	1eade <z_add_timeout+0xea>
			to->dticks = timeout.ticks + 1 + elapsed();
   1eaa4:	f7ff ff58 	bl	1e958 <elapsed>
   1eaa8:	f11a 0801 	adds.w	r8, sl, #1
   1eaac:	f145 0500 	adc.w	r5, r5, #0
   1eab0:	eb18 0300 	adds.w	r3, r8, r0
   1eab4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1eab8:	e7e4      	b.n	1ea84 <z_add_timeout+0x90>
			if (t->dticks > to->dticks) {
   1eaba:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   1eabe:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   1eac2:	428a      	cmp	r2, r1
   1eac4:	eb70 0e05 	sbcs.w	lr, r0, r5
   1eac8:	da23      	bge.n	1eb12 <z_add_timeout+0x11e>
				t->dticks -= to->dticks;
   1eaca:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   1eacc:	6872      	ldr	r2, [r6, #4]
   1eace:	eb65 0500 	sbc.w	r5, r5, r0
   1ead2:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   1ead6:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   1eada:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1eadc:	6074      	str	r4, [r6, #4]
	return list->head == list;
   1eade:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1eae0:	429a      	cmp	r2, r3
   1eae2:	d00b      	beq.n	1eafc <z_add_timeout+0x108>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1eae4:	4294      	cmp	r4, r2
   1eae6:	d109      	bne.n	1eafc <z_add_timeout+0x108>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1eae8:	f7ff ff40 	bl	1e96c <next_timeout>

			if (next_time == 0 ||
   1eaec:	b118      	cbz	r0, 1eaf6 <z_add_timeout+0x102>
			    _current_cpu->slice_ticks != next_time) {
   1eaee:	4b16      	ldr	r3, [pc, #88]	; (1eb48 <z_add_timeout+0x154>)
			if (next_time == 0 ||
   1eaf0:	691b      	ldr	r3, [r3, #16]
   1eaf2:	4283      	cmp	r3, r0
   1eaf4:	d002      	beq.n	1eafc <z_add_timeout+0x108>
				sys_clock_set_timeout(next_time, false);
   1eaf6:	2100      	movs	r1, #0
   1eaf8:	f7fb f81a 	bl	19b30 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eafc:	480e      	ldr	r0, [pc, #56]	; (1eb38 <z_add_timeout+0x144>)
   1eafe:	f7fd ffb3 	bl	1ca68 <z_spin_unlock_valid>
   1eb02:	b978      	cbnz	r0, 1eb24 <z_add_timeout+0x130>
   1eb04:	490d      	ldr	r1, [pc, #52]	; (1eb3c <z_add_timeout+0x148>)
   1eb06:	480b      	ldr	r0, [pc, #44]	; (1eb34 <z_add_timeout+0x140>)
   1eb08:	22c2      	movs	r2, #194	; 0xc2
   1eb0a:	f004 fa88 	bl	2301e <assert_print>
   1eb0e:	21c2      	movs	r1, #194	; 0xc2
   1eb10:	e79a      	b.n	1ea48 <z_add_timeout+0x54>
			to->dticks -= t->dticks;
   1eb12:	1a52      	subs	r2, r2, r1
   1eb14:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   1eb18:	4566      	cmp	r6, ip
   1eb1a:	e9c4 2004 	strd	r2, r0, [r4, #16]
   1eb1e:	d0bb      	beq.n	1ea98 <z_add_timeout+0xa4>
   1eb20:	6836      	ldr	r6, [r6, #0]
   1eb22:	e7b8      	b.n	1ea96 <z_add_timeout+0xa2>
	__asm__ volatile(
   1eb24:	f387 8811 	msr	BASEPRI, r7
   1eb28:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1eb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eb30:	00028844 	.word	0x00028844
   1eb34:	00026718 	.word	0x00026718
   1eb38:	20002fb4 	.word	0x20002fb4
   1eb3c:	0002679f 	.word	0x0002679f
   1eb40:	20002180 	.word	0x20002180
   1eb44:	20000828 	.word	0x20000828
   1eb48:	20002f64 	.word	0x20002f64

0001eb4c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1eb4c:	b538      	push	{r3, r4, r5, lr}
   1eb4e:	4604      	mov	r4, r0
	__asm__ volatile(
   1eb50:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eb54:	f3ef 8511 	mrs	r5, BASEPRI
   1eb58:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1eb60:	4814      	ldr	r0, [pc, #80]	; (1ebb4 <z_abort_timeout+0x68>)
   1eb62:	f7fd ff73 	bl	1ca4c <z_spin_lock_valid>
   1eb66:	b940      	cbnz	r0, 1eb7a <z_abort_timeout+0x2e>
   1eb68:	4913      	ldr	r1, [pc, #76]	; (1ebb8 <z_abort_timeout+0x6c>)
   1eb6a:	4814      	ldr	r0, [pc, #80]	; (1ebbc <z_abort_timeout+0x70>)
   1eb6c:	2294      	movs	r2, #148	; 0x94
   1eb6e:	f004 fa56 	bl	2301e <assert_print>
   1eb72:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eb74:	4810      	ldr	r0, [pc, #64]	; (1ebb8 <z_abort_timeout+0x6c>)
   1eb76:	f004 fa4b 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1eb7a:	480e      	ldr	r0, [pc, #56]	; (1ebb4 <z_abort_timeout+0x68>)
   1eb7c:	f7fd ff84 	bl	1ca88 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1eb80:	6823      	ldr	r3, [r4, #0]
   1eb82:	b173      	cbz	r3, 1eba2 <z_abort_timeout+0x56>
			remove_timeout(to);
   1eb84:	4620      	mov	r0, r4
   1eb86:	f7ff ff19 	bl	1e9bc <remove_timeout>
			ret = 0;
   1eb8a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eb8c:	4809      	ldr	r0, [pc, #36]	; (1ebb4 <z_abort_timeout+0x68>)
   1eb8e:	f7fd ff6b 	bl	1ca68 <z_spin_unlock_valid>
   1eb92:	b948      	cbnz	r0, 1eba8 <z_abort_timeout+0x5c>
   1eb94:	4908      	ldr	r1, [pc, #32]	; (1ebb8 <z_abort_timeout+0x6c>)
   1eb96:	4809      	ldr	r0, [pc, #36]	; (1ebbc <z_abort_timeout+0x70>)
   1eb98:	22c2      	movs	r2, #194	; 0xc2
   1eb9a:	f004 fa40 	bl	2301e <assert_print>
   1eb9e:	21c2      	movs	r1, #194	; 0xc2
   1eba0:	e7e8      	b.n	1eb74 <z_abort_timeout+0x28>
	int ret = -EINVAL;
   1eba2:	f06f 0415 	mvn.w	r4, #21
   1eba6:	e7f1      	b.n	1eb8c <z_abort_timeout+0x40>
	__asm__ volatile(
   1eba8:	f385 8811 	msr	BASEPRI, r5
   1ebac:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1ebb0:	4620      	mov	r0, r4
   1ebb2:	bd38      	pop	{r3, r4, r5, pc}
   1ebb4:	20002fb4 	.word	0x20002fb4
   1ebb8:	0002679f 	.word	0x0002679f
   1ebbc:	00026718 	.word	0x00026718

0001ebc0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1ebc0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ebc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ebc6:	f3ef 8511 	mrs	r5, BASEPRI
   1ebca:	f383 8812 	msr	BASEPRI_MAX, r3
   1ebce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ebd2:	4812      	ldr	r0, [pc, #72]	; (1ec1c <z_get_next_timeout_expiry+0x5c>)
   1ebd4:	f7fd ff3a 	bl	1ca4c <z_spin_lock_valid>
   1ebd8:	b940      	cbnz	r0, 1ebec <z_get_next_timeout_expiry+0x2c>
   1ebda:	4911      	ldr	r1, [pc, #68]	; (1ec20 <z_get_next_timeout_expiry+0x60>)
   1ebdc:	4811      	ldr	r0, [pc, #68]	; (1ec24 <z_get_next_timeout_expiry+0x64>)
   1ebde:	2294      	movs	r2, #148	; 0x94
   1ebe0:	f004 fa1d 	bl	2301e <assert_print>
   1ebe4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ebe6:	480e      	ldr	r0, [pc, #56]	; (1ec20 <z_get_next_timeout_expiry+0x60>)
   1ebe8:	f004 fa12 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ebec:	480b      	ldr	r0, [pc, #44]	; (1ec1c <z_get_next_timeout_expiry+0x5c>)
   1ebee:	f7fd ff4b 	bl	1ca88 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1ebf2:	f7ff febb 	bl	1e96c <next_timeout>
   1ebf6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ebf8:	4808      	ldr	r0, [pc, #32]	; (1ec1c <z_get_next_timeout_expiry+0x5c>)
   1ebfa:	f7fd ff35 	bl	1ca68 <z_spin_unlock_valid>
   1ebfe:	b930      	cbnz	r0, 1ec0e <z_get_next_timeout_expiry+0x4e>
   1ec00:	4907      	ldr	r1, [pc, #28]	; (1ec20 <z_get_next_timeout_expiry+0x60>)
   1ec02:	4808      	ldr	r0, [pc, #32]	; (1ec24 <z_get_next_timeout_expiry+0x64>)
   1ec04:	22c2      	movs	r2, #194	; 0xc2
   1ec06:	f004 fa0a 	bl	2301e <assert_print>
   1ec0a:	21c2      	movs	r1, #194	; 0xc2
   1ec0c:	e7eb      	b.n	1ebe6 <z_get_next_timeout_expiry+0x26>
	__asm__ volatile(
   1ec0e:	f385 8811 	msr	BASEPRI, r5
   1ec12:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1ec16:	4620      	mov	r0, r4
   1ec18:	bd38      	pop	{r3, r4, r5, pc}
   1ec1a:	bf00      	nop
   1ec1c:	20002fb4 	.word	0x20002fb4
   1ec20:	0002679f 	.word	0x0002679f
   1ec24:	00026718 	.word	0x00026718

0001ec28 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1ec28:	b570      	push	{r4, r5, r6, lr}
   1ec2a:	4604      	mov	r4, r0
   1ec2c:	460d      	mov	r5, r1
	__asm__ volatile(
   1ec2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ec32:	f3ef 8611 	mrs	r6, BASEPRI
   1ec36:	f383 8812 	msr	BASEPRI_MAX, r3
   1ec3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ec3e:	4816      	ldr	r0, [pc, #88]	; (1ec98 <z_set_timeout_expiry+0x70>)
   1ec40:	f7fd ff04 	bl	1ca4c <z_spin_lock_valid>
   1ec44:	b940      	cbnz	r0, 1ec58 <z_set_timeout_expiry+0x30>
   1ec46:	4915      	ldr	r1, [pc, #84]	; (1ec9c <z_set_timeout_expiry+0x74>)
   1ec48:	4815      	ldr	r0, [pc, #84]	; (1eca0 <z_set_timeout_expiry+0x78>)
   1ec4a:	2294      	movs	r2, #148	; 0x94
   1ec4c:	f004 f9e7 	bl	2301e <assert_print>
   1ec50:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ec52:	4812      	ldr	r0, [pc, #72]	; (1ec9c <z_set_timeout_expiry+0x74>)
   1ec54:	f004 f9dc 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ec58:	480f      	ldr	r0, [pc, #60]	; (1ec98 <z_set_timeout_expiry+0x70>)
   1ec5a:	f7fd ff15 	bl	1ca88 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1ec5e:	f7ff fe85 	bl	1e96c <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   1ec62:	2801      	cmp	r0, #1
   1ec64:	dd07      	ble.n	1ec76 <z_set_timeout_expiry+0x4e>
   1ec66:	42a0      	cmp	r0, r4
   1ec68:	db05      	blt.n	1ec76 <z_set_timeout_expiry+0x4e>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1ec6a:	42a0      	cmp	r0, r4
   1ec6c:	4629      	mov	r1, r5
   1ec6e:	bfa8      	it	ge
   1ec70:	4620      	movge	r0, r4
   1ec72:	f7fa ff5d 	bl	19b30 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ec76:	4808      	ldr	r0, [pc, #32]	; (1ec98 <z_set_timeout_expiry+0x70>)
   1ec78:	f7fd fef6 	bl	1ca68 <z_spin_unlock_valid>
   1ec7c:	b930      	cbnz	r0, 1ec8c <z_set_timeout_expiry+0x64>
   1ec7e:	4907      	ldr	r1, [pc, #28]	; (1ec9c <z_set_timeout_expiry+0x74>)
   1ec80:	4807      	ldr	r0, [pc, #28]	; (1eca0 <z_set_timeout_expiry+0x78>)
   1ec82:	22c2      	movs	r2, #194	; 0xc2
   1ec84:	f004 f9cb 	bl	2301e <assert_print>
   1ec88:	21c2      	movs	r1, #194	; 0xc2
   1ec8a:	e7e2      	b.n	1ec52 <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
   1ec8c:	f386 8811 	msr	BASEPRI, r6
   1ec90:	f3bf 8f6f 	isb	sy
		}
	}
}
   1ec94:	bd70      	pop	{r4, r5, r6, pc}
   1ec96:	bf00      	nop
   1ec98:	20002fb4 	.word	0x20002fb4
   1ec9c:	0002679f 	.word	0x0002679f
   1eca0:	00026718 	.word	0x00026718

0001eca4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   1eca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1eca8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1ecaa:	f7ff f927 	bl	1defc <z_time_slice>
	__asm__ volatile(
   1ecae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ecb2:	f3ef 8711 	mrs	r7, BASEPRI
   1ecb6:	f383 8812 	msr	BASEPRI_MAX, r3
   1ecba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ecbe:	483a      	ldr	r0, [pc, #232]	; (1eda8 <sys_clock_announce+0x104>)
   1ecc0:	f7fd fec4 	bl	1ca4c <z_spin_lock_valid>
   1ecc4:	b940      	cbnz	r0, 1ecd8 <sys_clock_announce+0x34>
   1ecc6:	4939      	ldr	r1, [pc, #228]	; (1edac <sys_clock_announce+0x108>)
   1ecc8:	4839      	ldr	r0, [pc, #228]	; (1edb0 <sys_clock_announce+0x10c>)
   1ecca:	2294      	movs	r2, #148	; 0x94
   1eccc:	f004 f9a7 	bl	2301e <assert_print>
   1ecd0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ecd2:	4836      	ldr	r0, [pc, #216]	; (1edac <sys_clock_announce+0x108>)
   1ecd4:	f004 f99c 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ecd8:	4833      	ldr	r0, [pc, #204]	; (1eda8 <sys_clock_announce+0x104>)
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1ecda:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1edb4 <sys_clock_announce+0x110>
	return list->head == list;
   1ecde:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1edb8 <sys_clock_announce+0x114>
   1ece2:	f7fd fed1 	bl	1ca88 <z_spin_lock_set_owner>
   1ece6:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1ecea:	4a34      	ldr	r2, [pc, #208]	; (1edbc <sys_clock_announce+0x118>)
	announce_remaining = ticks;
   1ecec:	f8c8 4000 	str.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ecf0:	454d      	cmp	r5, r9
		curr_tick += dt;
   1ecf2:	e9d2 3c00 	ldrd	r3, ip, [r2]
   1ecf6:	ea4f 71e4 	mov.w	r1, r4, asr #31
   1ecfa:	d00b      	beq.n	1ed14 <sys_clock_announce+0x70>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1ecfc:	b155      	cbz	r5, 1ed14 <sys_clock_announce+0x70>
   1ecfe:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   1ed02:	42b4      	cmp	r4, r6
   1ed04:	eb71 0e00 	sbcs.w	lr, r1, r0
   1ed08:	da1b      	bge.n	1ed42 <sys_clock_announce+0x9e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1ed0a:	1b36      	subs	r6, r6, r4
   1ed0c:	eb60 0001 	sbc.w	r0, r0, r1
   1ed10:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   1ed14:	18e3      	adds	r3, r4, r3
   1ed16:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
   1ed1a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1ed1c:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   1ed20:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   1ed24:	f7ff fe22 	bl	1e96c <next_timeout>
   1ed28:	4621      	mov	r1, r4
   1ed2a:	f7fa ff01 	bl	19b30 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ed2e:	481e      	ldr	r0, [pc, #120]	; (1eda8 <sys_clock_announce+0x104>)
   1ed30:	f7fd fe9a 	bl	1ca68 <z_spin_unlock_valid>
   1ed34:	b1a8      	cbz	r0, 1ed62 <sys_clock_announce+0xbe>
	__asm__ volatile(
   1ed36:	f387 8811 	msr	BASEPRI, r7
   1ed3a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1ed3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1ed42:	18f3      	adds	r3, r6, r3
   1ed44:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   1ed48:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   1ed4c:	2200      	movs	r2, #0
   1ed4e:	2300      	movs	r3, #0
		remove_timeout(t);
   1ed50:	4628      	mov	r0, r5
		t->dticks = 0;
   1ed52:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   1ed56:	f7ff fe31 	bl	1e9bc <remove_timeout>
   1ed5a:	4813      	ldr	r0, [pc, #76]	; (1eda8 <sys_clock_announce+0x104>)
   1ed5c:	f7fd fe84 	bl	1ca68 <z_spin_unlock_valid>
   1ed60:	b930      	cbnz	r0, 1ed70 <sys_clock_announce+0xcc>
   1ed62:	4912      	ldr	r1, [pc, #72]	; (1edac <sys_clock_announce+0x108>)
   1ed64:	4812      	ldr	r0, [pc, #72]	; (1edb0 <sys_clock_announce+0x10c>)
   1ed66:	22c2      	movs	r2, #194	; 0xc2
   1ed68:	f004 f959 	bl	2301e <assert_print>
   1ed6c:	21c2      	movs	r1, #194	; 0xc2
   1ed6e:	e7b0      	b.n	1ecd2 <sys_clock_announce+0x2e>
   1ed70:	f387 8811 	msr	BASEPRI, r7
   1ed74:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1ed78:	68ab      	ldr	r3, [r5, #8]
   1ed7a:	4628      	mov	r0, r5
   1ed7c:	4798      	blx	r3
	__asm__ volatile(
   1ed7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ed82:	f3ef 8711 	mrs	r7, BASEPRI
   1ed86:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ed8e:	4806      	ldr	r0, [pc, #24]	; (1eda8 <sys_clock_announce+0x104>)
   1ed90:	f7fd fe5c 	bl	1ca4c <z_spin_lock_valid>
   1ed94:	2800      	cmp	r0, #0
   1ed96:	d096      	beq.n	1ecc6 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   1ed98:	4803      	ldr	r0, [pc, #12]	; (1eda8 <sys_clock_announce+0x104>)
   1ed9a:	f7fd fe75 	bl	1ca88 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   1ed9e:	f8d8 4000 	ldr.w	r4, [r8]
   1eda2:	1ba4      	subs	r4, r4, r6
   1eda4:	e79f      	b.n	1ece6 <sys_clock_announce+0x42>
   1eda6:	bf00      	nop
   1eda8:	20002fb4 	.word	0x20002fb4
   1edac:	0002679f 	.word	0x0002679f
   1edb0:	00026718 	.word	0x00026718
   1edb4:	20002fb0 	.word	0x20002fb0
   1edb8:	20000828 	.word	0x20000828
   1edbc:	20002180 	.word	0x20002180

0001edc0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1edc0:	b570      	push	{r4, r5, r6, lr}
   1edc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1edc6:	f3ef 8611 	mrs	r6, BASEPRI
   1edca:	f383 8812 	msr	BASEPRI_MAX, r3
   1edce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1edd2:	4815      	ldr	r0, [pc, #84]	; (1ee28 <sys_clock_tick_get+0x68>)
   1edd4:	f7fd fe3a 	bl	1ca4c <z_spin_lock_valid>
   1edd8:	b940      	cbnz	r0, 1edec <sys_clock_tick_get+0x2c>
   1edda:	4914      	ldr	r1, [pc, #80]	; (1ee2c <sys_clock_tick_get+0x6c>)
   1eddc:	4814      	ldr	r0, [pc, #80]	; (1ee30 <sys_clock_tick_get+0x70>)
   1edde:	2294      	movs	r2, #148	; 0x94
   1ede0:	f004 f91d 	bl	2301e <assert_print>
   1ede4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ede6:	4811      	ldr	r0, [pc, #68]	; (1ee2c <sys_clock_tick_get+0x6c>)
   1ede8:	f004 f912 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1edec:	480e      	ldr	r0, [pc, #56]	; (1ee28 <sys_clock_tick_get+0x68>)
   1edee:	f7fd fe4b 	bl	1ca88 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1edf2:	f7ff fdb1 	bl	1e958 <elapsed>
   1edf6:	4a0f      	ldr	r2, [pc, #60]	; (1ee34 <sys_clock_tick_get+0x74>)
   1edf8:	e9d2 4500 	ldrd	r4, r5, [r2]
   1edfc:	1904      	adds	r4, r0, r4
   1edfe:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ee02:	4809      	ldr	r0, [pc, #36]	; (1ee28 <sys_clock_tick_get+0x68>)
   1ee04:	f7fd fe30 	bl	1ca68 <z_spin_unlock_valid>
   1ee08:	b930      	cbnz	r0, 1ee18 <sys_clock_tick_get+0x58>
   1ee0a:	4908      	ldr	r1, [pc, #32]	; (1ee2c <sys_clock_tick_get+0x6c>)
   1ee0c:	4808      	ldr	r0, [pc, #32]	; (1ee30 <sys_clock_tick_get+0x70>)
   1ee0e:	22c2      	movs	r2, #194	; 0xc2
   1ee10:	f004 f905 	bl	2301e <assert_print>
   1ee14:	21c2      	movs	r1, #194	; 0xc2
   1ee16:	e7e6      	b.n	1ede6 <sys_clock_tick_get+0x26>
	__asm__ volatile(
   1ee18:	f386 8811 	msr	BASEPRI, r6
   1ee1c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1ee20:	4620      	mov	r0, r4
   1ee22:	4629      	mov	r1, r5
   1ee24:	bd70      	pop	{r4, r5, r6, pc}
   1ee26:	bf00      	nop
   1ee28:	20002fb4 	.word	0x20002fb4
   1ee2c:	0002679f 	.word	0x0002679f
   1ee30:	00026718 	.word	0x00026718
   1ee34:	20002180 	.word	0x20002180

0001ee38 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   1ee38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   1ee3c:	2500      	movs	r5, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ee3e:	f8df 9194 	ldr.w	r9, [pc, #404]	; 1efd4 <register_events+0x19c>
{
   1ee42:	9301      	str	r3, [sp, #4]
   1ee44:	460f      	mov	r7, r1
   1ee46:	4614      	mov	r4, r2
	for (int ii = 0; ii < num_events; ii++) {
   1ee48:	4680      	mov	r8, r0
	int events_registered = 0;
   1ee4a:	462e      	mov	r6, r5
	event->poller = NULL;
   1ee4c:	46aa      	mov	sl, r5
	for (int ii = 0; ii < num_events; ii++) {
   1ee4e:	42bd      	cmp	r5, r7
   1ee50:	db03      	blt.n	1ee5a <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   1ee52:	4630      	mov	r0, r6
   1ee54:	b003      	add	sp, #12
   1ee56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1ee5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ee5e:	f3ef 8b11 	mrs	fp, BASEPRI
   1ee62:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee66:	f3bf 8f6f 	isb	sy
   1ee6a:	4648      	mov	r0, r9
   1ee6c:	f7fd fdee 	bl	1ca4c <z_spin_lock_valid>
   1ee70:	b938      	cbnz	r0, 1ee82 <register_events+0x4a>
   1ee72:	4959      	ldr	r1, [pc, #356]	; (1efd8 <register_events+0x1a0>)
   1ee74:	4859      	ldr	r0, [pc, #356]	; (1efdc <register_events+0x1a4>)
   1ee76:	2294      	movs	r2, #148	; 0x94
   1ee78:	f004 f8d1 	bl	2301e <assert_print>
   1ee7c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ee7e:	4856      	ldr	r0, [pc, #344]	; (1efd8 <register_events+0x1a0>)
   1ee80:	e05b      	b.n	1ef3a <register_events+0x102>
	z_spin_lock_set_owner(l);
   1ee82:	4648      	mov	r0, r9
   1ee84:	f7fd fe00 	bl	1ca88 <z_spin_lock_set_owner>
	switch (event->type) {
   1ee88:	f898 300d 	ldrb.w	r3, [r8, #13]
   1ee8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ee90:	2b08      	cmp	r3, #8
   1ee92:	d84b      	bhi.n	1ef2c <register_events+0xf4>
   1ee94:	e8df f003 	tbb	[pc, r3]
   1ee98:	4a053c29 	.word	0x4a053c29
   1ee9c:	4a4a4a25 	.word	0x4a4a4a25
   1eea0:	43          	.byte	0x43
   1eea1:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1eea2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1eea6:	689b      	ldr	r3, [r3, #8]
   1eea8:	b1fb      	cbz	r3, 1eeea <register_events+0xb2>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1eeaa:	2302      	movs	r3, #2
	event->state |= state;
   1eeac:	f8d8 200c 	ldr.w	r2, [r8, #12]
	event->poller = NULL;
   1eeb0:	f8c8 a008 	str.w	sl, [r8, #8]
	event->state |= state;
   1eeb4:	f3c2 3086 	ubfx	r0, r2, #14, #7
   1eeb8:	4303      	orrs	r3, r0
   1eeba:	f363 3294 	bfi	r2, r3, #14, #7
   1eebe:	f8c8 200c 	str.w	r2, [r8, #12]
			poller->is_polling = false;
   1eec2:	f884 a000 	strb.w	sl, [r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eec6:	4648      	mov	r0, r9
   1eec8:	f7fd fdce 	bl	1ca68 <z_spin_unlock_valid>
   1eecc:	f108 0814 	add.w	r8, r8, #20
   1eed0:	2800      	cmp	r0, #0
   1eed2:	d179      	bne.n	1efc8 <register_events+0x190>
   1eed4:	4940      	ldr	r1, [pc, #256]	; (1efd8 <register_events+0x1a0>)
   1eed6:	4841      	ldr	r0, [pc, #260]	; (1efdc <register_events+0x1a4>)
   1eed8:	22c2      	movs	r2, #194	; 0xc2
   1eeda:	f004 f8a0 	bl	2301e <assert_print>
   1eede:	21c2      	movs	r1, #194	; 0xc2
   1eee0:	e7cd      	b.n	1ee7e <register_events+0x46>
		if (!k_queue_is_empty(event->queue)) {
   1eee2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1eee6:	681b      	ldr	r3, [r3, #0]
   1eee8:	bb4b      	cbnz	r3, 1ef3e <register_events+0x106>
		} else if (!just_check && poller->is_polling) {
   1eeea:	9b01      	ldr	r3, [sp, #4]
   1eeec:	2b00      	cmp	r3, #0
   1eeee:	d1ea      	bne.n	1eec6 <register_events+0x8e>
   1eef0:	7823      	ldrb	r3, [r4, #0]
   1eef2:	2b00      	cmp	r3, #0
   1eef4:	d0e7      	beq.n	1eec6 <register_events+0x8e>
	switch (event->type) {
   1eef6:	f898 300d 	ldrb.w	r3, [r8, #13]
   1eefa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1eefe:	2b08      	cmp	r3, #8
   1ef00:	d85b      	bhi.n	1efba <register_events+0x182>
   1ef02:	e8df f003 	tbb	[pc, r3]
   1ef06:	3f2d      	.short	0x3f2d
   1ef08:	5a315a1e 	.word	0x5a315a1e
   1ef0c:	5a5a      	.short	0x5a5a
   1ef0e:	4c          	.byte	0x4c
   1ef0f:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1ef10:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1ef14:	689b      	ldr	r3, [r3, #8]
   1ef16:	2b00      	cmp	r3, #0
   1ef18:	d0e7      	beq.n	1eeea <register_events+0xb2>
			*state = K_POLL_STATE_SIGNALED;
   1ef1a:	2301      	movs	r3, #1
   1ef1c:	e7c6      	b.n	1eeac <register_events+0x74>
		if (event->msgq->used_msgs > 0) {
   1ef1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1ef22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ef24:	2b00      	cmp	r3, #0
   1ef26:	d0e0      	beq.n	1eeea <register_events+0xb2>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1ef28:	2310      	movs	r3, #16
   1ef2a:	e7bf      	b.n	1eeac <register_events+0x74>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1ef2c:	492c      	ldr	r1, [pc, #176]	; (1efe0 <register_events+0x1a8>)
   1ef2e:	482b      	ldr	r0, [pc, #172]	; (1efdc <register_events+0x1a4>)
   1ef30:	2263      	movs	r2, #99	; 0x63
   1ef32:	f004 f874 	bl	2301e <assert_print>
   1ef36:	2163      	movs	r1, #99	; 0x63
   1ef38:	4829      	ldr	r0, [pc, #164]	; (1efe0 <register_events+0x1a8>)
   1ef3a:	f004 f869 	bl	23010 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1ef3e:	2304      	movs	r3, #4
   1ef40:	e7b4      	b.n	1eeac <register_events+0x74>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1ef42:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1ef46:	b930      	cbnz	r0, 1ef56 <register_events+0x11e>
   1ef48:	4925      	ldr	r1, [pc, #148]	; (1efe0 <register_events+0x1a8>)
   1ef4a:	4824      	ldr	r0, [pc, #144]	; (1efdc <register_events+0x1a4>)
   1ef4c:	228d      	movs	r2, #141	; 0x8d
   1ef4e:	f004 f866 	bl	2301e <assert_print>
   1ef52:	218d      	movs	r1, #141	; 0x8d
   1ef54:	e7f0      	b.n	1ef38 <register_events+0x100>
		add_event(&event->sem->poll_events, event, poller);
   1ef56:	4622      	mov	r2, r4
   1ef58:	4641      	mov	r1, r8
   1ef5a:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1ef5c:	f006 faa3 	bl	254a6 <add_event>
	event->poller = poller;
   1ef60:	f8c8 4008 	str.w	r4, [r8, #8]
			events_registered += 1;
   1ef64:	3601      	adds	r6, #1
   1ef66:	e7ae      	b.n	1eec6 <register_events+0x8e>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1ef68:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1ef6c:	b930      	cbnz	r0, 1ef7c <register_events+0x144>
   1ef6e:	491c      	ldr	r1, [pc, #112]	; (1efe0 <register_events+0x1a8>)
   1ef70:	481a      	ldr	r0, [pc, #104]	; (1efdc <register_events+0x1a4>)
   1ef72:	2291      	movs	r2, #145	; 0x91
   1ef74:	f004 f853 	bl	2301e <assert_print>
   1ef78:	2191      	movs	r1, #145	; 0x91
   1ef7a:	e7dd      	b.n	1ef38 <register_events+0x100>
		add_event(&event->queue->poll_events, event, poller);
   1ef7c:	4622      	mov	r2, r4
   1ef7e:	4641      	mov	r1, r8
   1ef80:	3014      	adds	r0, #20
   1ef82:	e7eb      	b.n	1ef5c <register_events+0x124>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1ef84:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1ef88:	b930      	cbnz	r0, 1ef98 <register_events+0x160>
   1ef8a:	4915      	ldr	r1, [pc, #84]	; (1efe0 <register_events+0x1a8>)
   1ef8c:	4813      	ldr	r0, [pc, #76]	; (1efdc <register_events+0x1a4>)
   1ef8e:	2295      	movs	r2, #149	; 0x95
   1ef90:	f004 f845 	bl	2301e <assert_print>
   1ef94:	2195      	movs	r1, #149	; 0x95
   1ef96:	e7cf      	b.n	1ef38 <register_events+0x100>
		add_event(&event->signal->poll_events, event, poller);
   1ef98:	4622      	mov	r2, r4
   1ef9a:	4641      	mov	r1, r8
   1ef9c:	e7de      	b.n	1ef5c <register_events+0x124>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1ef9e:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1efa2:	b930      	cbnz	r0, 1efb2 <register_events+0x17a>
   1efa4:	490e      	ldr	r1, [pc, #56]	; (1efe0 <register_events+0x1a8>)
   1efa6:	480d      	ldr	r0, [pc, #52]	; (1efdc <register_events+0x1a4>)
   1efa8:	2299      	movs	r2, #153	; 0x99
   1efaa:	f004 f838 	bl	2301e <assert_print>
   1efae:	2199      	movs	r1, #153	; 0x99
   1efb0:	e7c2      	b.n	1ef38 <register_events+0x100>
		add_event(&event->msgq->poll_events, event, poller);
   1efb2:	4622      	mov	r2, r4
   1efb4:	4641      	mov	r1, r8
   1efb6:	3028      	adds	r0, #40	; 0x28
   1efb8:	e7d0      	b.n	1ef5c <register_events+0x124>
		__ASSERT(false, "invalid event type\n");
   1efba:	4909      	ldr	r1, [pc, #36]	; (1efe0 <register_events+0x1a8>)
   1efbc:	4807      	ldr	r0, [pc, #28]	; (1efdc <register_events+0x1a4>)
   1efbe:	22a6      	movs	r2, #166	; 0xa6
   1efc0:	f004 f82d 	bl	2301e <assert_print>
   1efc4:	21a6      	movs	r1, #166	; 0xa6
   1efc6:	e7b7      	b.n	1ef38 <register_events+0x100>
	__asm__ volatile(
   1efc8:	f38b 8811 	msr	BASEPRI, fp
   1efcc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1efd0:	3501      	adds	r5, #1
   1efd2:	e73c      	b.n	1ee4e <register_events+0x16>
   1efd4:	20002fb8 	.word	0x20002fb8
   1efd8:	0002679f 	.word	0x0002679f
   1efdc:	00026718 	.word	0x00026718
   1efe0:	00028868 	.word	0x00028868

0001efe4 <clear_event_registrations>:
{
   1efe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1efe8:	2314      	movs	r3, #20
   1efea:	4f3e      	ldr	r7, [pc, #248]	; (1f0e4 <clear_event_registrations+0x100>)
   1efec:	4615      	mov	r5, r2
	while (num_events--) {
   1efee:	460c      	mov	r4, r1
   1eff0:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1eff4:	2600      	movs	r6, #0
	while (num_events--) {
   1eff6:	b90c      	cbnz	r4, 1effc <clear_event_registrations+0x18>
}
   1eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   1effc:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1f000:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   1f004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f008:	f1a0 0814 	sub.w	r8, r0, #20
   1f00c:	2b08      	cmp	r3, #8
   1f00e:	d830      	bhi.n	1f072 <clear_event_registrations+0x8e>
   1f010:	e8df f003 	tbb	[pc, r3]
   1f014:	2f051b3f 	.word	0x2f051b3f
   1f018:	2f2f2f11 	.word	0x2f2f2f11
   1f01c:	25          	.byte	0x25
   1f01d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1f01e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1f022:	bb6b      	cbnz	r3, 1f080 <clear_event_registrations+0x9c>
   1f024:	4930      	ldr	r1, [pc, #192]	; (1f0e8 <clear_event_registrations+0x104>)
   1f026:	4831      	ldr	r0, [pc, #196]	; (1f0ec <clear_event_registrations+0x108>)
   1f028:	22b6      	movs	r2, #182	; 0xb6
   1f02a:	f003 fff8 	bl	2301e <assert_print>
   1f02e:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1f030:	482d      	ldr	r0, [pc, #180]	; (1f0e8 <clear_event_registrations+0x104>)
   1f032:	f003 ffed 	bl	23010 <assert_post_action>
   1f036:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1f03a:	bb0b      	cbnz	r3, 1f080 <clear_event_registrations+0x9c>
   1f03c:	492a      	ldr	r1, [pc, #168]	; (1f0e8 <clear_event_registrations+0x104>)
   1f03e:	482b      	ldr	r0, [pc, #172]	; (1f0ec <clear_event_registrations+0x108>)
   1f040:	22ba      	movs	r2, #186	; 0xba
   1f042:	f003 ffec 	bl	2301e <assert_print>
   1f046:	21ba      	movs	r1, #186	; 0xba
   1f048:	e7f2      	b.n	1f030 <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1f04a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1f04e:	b9bb      	cbnz	r3, 1f080 <clear_event_registrations+0x9c>
   1f050:	4925      	ldr	r1, [pc, #148]	; (1f0e8 <clear_event_registrations+0x104>)
   1f052:	4826      	ldr	r0, [pc, #152]	; (1f0ec <clear_event_registrations+0x108>)
   1f054:	22be      	movs	r2, #190	; 0xbe
   1f056:	f003 ffe2 	bl	2301e <assert_print>
   1f05a:	21be      	movs	r1, #190	; 0xbe
   1f05c:	e7e8      	b.n	1f030 <clear_event_registrations+0x4c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1f05e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1f062:	b96b      	cbnz	r3, 1f080 <clear_event_registrations+0x9c>
   1f064:	4920      	ldr	r1, [pc, #128]	; (1f0e8 <clear_event_registrations+0x104>)
   1f066:	4821      	ldr	r0, [pc, #132]	; (1f0ec <clear_event_registrations+0x108>)
   1f068:	22c2      	movs	r2, #194	; 0xc2
   1f06a:	f003 ffd8 	bl	2301e <assert_print>
   1f06e:	21c2      	movs	r1, #194	; 0xc2
   1f070:	e7de      	b.n	1f030 <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   1f072:	491d      	ldr	r1, [pc, #116]	; (1f0e8 <clear_event_registrations+0x104>)
   1f074:	481d      	ldr	r0, [pc, #116]	; (1f0ec <clear_event_registrations+0x108>)
   1f076:	22cf      	movs	r2, #207	; 0xcf
   1f078:	f003 ffd1 	bl	2301e <assert_print>
   1f07c:	21cf      	movs	r1, #207	; 0xcf
   1f07e:	e7d7      	b.n	1f030 <clear_event_registrations+0x4c>
	return node->next != NULL;
   1f080:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1f084:	b12b      	cbz	r3, 1f092 <clear_event_registrations+0xae>
	sys_dnode_t *const prev = node->prev;
   1f086:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   1f08a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f08c:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   1f08e:	e940 6605 	strd	r6, r6, [r0, #-20]
   1f092:	4638      	mov	r0, r7
   1f094:	f7fd fce8 	bl	1ca68 <z_spin_unlock_valid>
   1f098:	b938      	cbnz	r0, 1f0aa <clear_event_registrations+0xc6>
   1f09a:	4915      	ldr	r1, [pc, #84]	; (1f0f0 <clear_event_registrations+0x10c>)
   1f09c:	4813      	ldr	r0, [pc, #76]	; (1f0ec <clear_event_registrations+0x108>)
   1f09e:	22c2      	movs	r2, #194	; 0xc2
   1f0a0:	f003 ffbd 	bl	2301e <assert_print>
   1f0a4:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f0a6:	4812      	ldr	r0, [pc, #72]	; (1f0f0 <clear_event_registrations+0x10c>)
   1f0a8:	e7c3      	b.n	1f032 <clear_event_registrations+0x4e>
   1f0aa:	f385 8811 	msr	BASEPRI, r5
   1f0ae:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1f0b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f0b6:	f3ef 8511 	mrs	r5, BASEPRI
   1f0ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1f0be:	f3bf 8f6f 	isb	sy
   1f0c2:	4638      	mov	r0, r7
   1f0c4:	f7fd fcc2 	bl	1ca4c <z_spin_lock_valid>
   1f0c8:	3c01      	subs	r4, #1
   1f0ca:	b930      	cbnz	r0, 1f0da <clear_event_registrations+0xf6>
   1f0cc:	4908      	ldr	r1, [pc, #32]	; (1f0f0 <clear_event_registrations+0x10c>)
   1f0ce:	4807      	ldr	r0, [pc, #28]	; (1f0ec <clear_event_registrations+0x108>)
   1f0d0:	2294      	movs	r2, #148	; 0x94
   1f0d2:	f003 ffa4 	bl	2301e <assert_print>
   1f0d6:	2194      	movs	r1, #148	; 0x94
   1f0d8:	e7e5      	b.n	1f0a6 <clear_event_registrations+0xc2>
	z_spin_lock_set_owner(l);
   1f0da:	4638      	mov	r0, r7
   1f0dc:	f7fd fcd4 	bl	1ca88 <z_spin_lock_set_owner>
	return k;
   1f0e0:	4640      	mov	r0, r8
   1f0e2:	e788      	b.n	1eff6 <clear_event_registrations+0x12>
   1f0e4:	20002fb8 	.word	0x20002fb8
   1f0e8:	00028868 	.word	0x00028868
   1f0ec:	00026718 	.word	0x00026718
   1f0f0:	0002679f 	.word	0x0002679f

0001f0f4 <k_poll_event_init>:
{
   1f0f4:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1f0f6:	b142      	cbz	r2, 1f10a <k_poll_event_init+0x16>
   1f0f8:	4911      	ldr	r1, [pc, #68]	; (1f140 <k_poll_event_init+0x4c>)
   1f0fa:	4812      	ldr	r0, [pc, #72]	; (1f144 <k_poll_event_init+0x50>)
   1f0fc:	222d      	movs	r2, #45	; 0x2d
   1f0fe:	f003 ff8e 	bl	2301e <assert_print>
   1f102:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1f104:	480e      	ldr	r0, [pc, #56]	; (1f140 <k_poll_event_init+0x4c>)
   1f106:	f003 ff83 	bl	23010 <assert_post_action>
   1f10a:	293f      	cmp	r1, #63	; 0x3f
   1f10c:	d906      	bls.n	1f11c <k_poll_event_init+0x28>
   1f10e:	490c      	ldr	r1, [pc, #48]	; (1f140 <k_poll_event_init+0x4c>)
   1f110:	480c      	ldr	r0, [pc, #48]	; (1f144 <k_poll_event_init+0x50>)
   1f112:	222f      	movs	r2, #47	; 0x2f
   1f114:	f003 ff83 	bl	2301e <assert_print>
   1f118:	212f      	movs	r1, #47	; 0x2f
   1f11a:	e7f3      	b.n	1f104 <k_poll_event_init+0x10>
	__ASSERT(obj != NULL, "must provide an object\n");
   1f11c:	b933      	cbnz	r3, 1f12c <k_poll_event_init+0x38>
   1f11e:	4908      	ldr	r1, [pc, #32]	; (1f140 <k_poll_event_init+0x4c>)
   1f120:	4808      	ldr	r0, [pc, #32]	; (1f144 <k_poll_event_init+0x50>)
   1f122:	2230      	movs	r2, #48	; 0x30
   1f124:	f003 ff7b 	bl	2301e <assert_print>
   1f128:	2130      	movs	r1, #48	; 0x30
   1f12a:	e7eb      	b.n	1f104 <k_poll_event_init+0x10>
	event->poller = NULL;
   1f12c:	6082      	str	r2, [r0, #8]
	event->type = type;
   1f12e:	0209      	lsls	r1, r1, #8
   1f130:	7b02      	ldrb	r2, [r0, #12]
   1f132:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1f136:	4311      	orrs	r1, r2
	event->obj = obj;
   1f138:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   1f13c:	bd08      	pop	{r3, pc}
   1f13e:	bf00      	nop
   1f140:	00028868 	.word	0x00028868
   1f144:	00026718 	.word	0x00026718

0001f148 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1f148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f14c:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1f14e:	4b51      	ldr	r3, [pc, #324]	; (1f294 <z_impl_k_poll+0x14c>)
   1f150:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   1f154:	2301      	movs	r3, #1
{
   1f156:	4617      	mov	r7, r2
   1f158:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   1f15a:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   1f15e:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   1f162:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   1f166:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   1f16a:	f1bb 0f00 	cmp.w	fp, #0
   1f16e:	d00a      	beq.n	1f186 <z_impl_k_poll+0x3e>
   1f170:	4949      	ldr	r1, [pc, #292]	; (1f298 <z_impl_k_poll+0x150>)
   1f172:	484a      	ldr	r0, [pc, #296]	; (1f29c <z_impl_k_poll+0x154>)
   1f174:	f240 122d 	movw	r2, #301	; 0x12d
   1f178:	f003 ff51 	bl	2301e <assert_print>
   1f17c:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   1f180:	4845      	ldr	r0, [pc, #276]	; (1f298 <z_impl_k_poll+0x150>)
   1f182:	f003 ff45 	bl	23010 <assert_post_action>
   1f186:	b940      	cbnz	r0, 1f19a <z_impl_k_poll+0x52>
   1f188:	4943      	ldr	r1, [pc, #268]	; (1f298 <z_impl_k_poll+0x150>)
   1f18a:	4844      	ldr	r0, [pc, #272]	; (1f29c <z_impl_k_poll+0x154>)
   1f18c:	f44f 7297 	mov.w	r2, #302	; 0x12e
   1f190:	f003 ff45 	bl	2301e <assert_print>
   1f194:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1f198:	e7f2      	b.n	1f180 <z_impl_k_poll+0x38>
	__ASSERT(num_events >= 0, "<0 events\n");
   1f19a:	2900      	cmp	r1, #0
   1f19c:	da08      	bge.n	1f1b0 <z_impl_k_poll+0x68>
   1f19e:	493e      	ldr	r1, [pc, #248]	; (1f298 <z_impl_k_poll+0x150>)
   1f1a0:	483e      	ldr	r0, [pc, #248]	; (1f29c <z_impl_k_poll+0x154>)
   1f1a2:	f240 122f 	movw	r2, #303	; 0x12f
   1f1a6:	f003 ff3a 	bl	2301e <assert_print>
   1f1aa:	f240 112f 	movw	r1, #303	; 0x12f
   1f1ae:	e7e7      	b.n	1f180 <z_impl_k_poll+0x38>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1f1b0:	ea57 0306 	orrs.w	r3, r7, r6
   1f1b4:	bf0c      	ite	eq
   1f1b6:	2301      	moveq	r3, #1
   1f1b8:	2300      	movne	r3, #0
   1f1ba:	f7ff fe3d 	bl	1ee38 <register_events>
   1f1be:	4681      	mov	r9, r0
   1f1c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f1c4:	f3ef 8a11 	mrs	sl, BASEPRI
   1f1c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f1cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f1d0:	4833      	ldr	r0, [pc, #204]	; (1f2a0 <z_impl_k_poll+0x158>)
   1f1d2:	f7fd fc3b 	bl	1ca4c <z_spin_lock_valid>
   1f1d6:	b938      	cbnz	r0, 1f1e8 <z_impl_k_poll+0xa0>
   1f1d8:	4932      	ldr	r1, [pc, #200]	; (1f2a4 <z_impl_k_poll+0x15c>)
   1f1da:	4830      	ldr	r0, [pc, #192]	; (1f29c <z_impl_k_poll+0x154>)
   1f1dc:	2294      	movs	r2, #148	; 0x94
   1f1de:	f003 ff1e 	bl	2301e <assert_print>
   1f1e2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f1e4:	482f      	ldr	r0, [pc, #188]	; (1f2a4 <z_impl_k_poll+0x15c>)
   1f1e6:	e7cc      	b.n	1f182 <z_impl_k_poll+0x3a>
	z_spin_lock_set_owner(l);
   1f1e8:	482d      	ldr	r0, [pc, #180]	; (1f2a0 <z_impl_k_poll+0x158>)
   1f1ea:	f7fd fc4d 	bl	1ca88 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1f1ee:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   1f1f2:	b9bc      	cbnz	r4, 1f224 <z_impl_k_poll+0xdc>
		clear_event_registrations(events, events_registered, key);
   1f1f4:	4628      	mov	r0, r5
   1f1f6:	4652      	mov	r2, sl
   1f1f8:	4649      	mov	r1, r9
   1f1fa:	f7ff fef3 	bl	1efe4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f1fe:	4828      	ldr	r0, [pc, #160]	; (1f2a0 <z_impl_k_poll+0x158>)
   1f200:	f7fd fc32 	bl	1ca68 <z_spin_unlock_valid>
   1f204:	b930      	cbnz	r0, 1f214 <z_impl_k_poll+0xcc>
   1f206:	4927      	ldr	r1, [pc, #156]	; (1f2a4 <z_impl_k_poll+0x15c>)
   1f208:	4824      	ldr	r0, [pc, #144]	; (1f29c <z_impl_k_poll+0x154>)
   1f20a:	22c2      	movs	r2, #194	; 0xc2
   1f20c:	f003 ff07 	bl	2301e <assert_print>
   1f210:	21c2      	movs	r1, #194	; 0xc2
   1f212:	e7e7      	b.n	1f1e4 <z_impl_k_poll+0x9c>
	__asm__ volatile(
   1f214:	f38a 8811 	msr	BASEPRI, sl
   1f218:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1f21c:	4620      	mov	r0, r4
   1f21e:	b003      	add	sp, #12
   1f220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f224:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   1f228:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f22c:	d10b      	bne.n	1f246 <z_impl_k_poll+0xfe>
   1f22e:	481c      	ldr	r0, [pc, #112]	; (1f2a0 <z_impl_k_poll+0x158>)
   1f230:	f7fd fc1a 	bl	1ca68 <z_spin_unlock_valid>
   1f234:	2800      	cmp	r0, #0
   1f236:	d0e6      	beq.n	1f206 <z_impl_k_poll+0xbe>
   1f238:	f38a 8811 	msr	BASEPRI, sl
   1f23c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1f240:	f06f 040a 	mvn.w	r4, #10
   1f244:	e7ea      	b.n	1f21c <z_impl_k_poll+0xd4>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1f246:	e9cd 7600 	strd	r7, r6, [sp]
   1f24a:	4a17      	ldr	r2, [pc, #92]	; (1f2a8 <z_impl_k_poll+0x160>)
   1f24c:	4814      	ldr	r0, [pc, #80]	; (1f2a0 <z_impl_k_poll+0x158>)
   1f24e:	4651      	mov	r1, sl
   1f250:	f7fe ff26 	bl	1e0a0 <z_pend_curr>
   1f254:	4604      	mov	r4, r0
	__asm__ volatile(
   1f256:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f25a:	f3ef 8611 	mrs	r6, BASEPRI
   1f25e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f262:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f266:	480e      	ldr	r0, [pc, #56]	; (1f2a0 <z_impl_k_poll+0x158>)
   1f268:	f7fd fbf0 	bl	1ca4c <z_spin_lock_valid>
   1f26c:	2800      	cmp	r0, #0
   1f26e:	d0b3      	beq.n	1f1d8 <z_impl_k_poll+0x90>
	z_spin_lock_set_owner(l);
   1f270:	480b      	ldr	r0, [pc, #44]	; (1f2a0 <z_impl_k_poll+0x158>)
   1f272:	f7fd fc09 	bl	1ca88 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1f276:	4628      	mov	r0, r5
   1f278:	4632      	mov	r2, r6
   1f27a:	4649      	mov	r1, r9
   1f27c:	f7ff feb2 	bl	1efe4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f280:	4807      	ldr	r0, [pc, #28]	; (1f2a0 <z_impl_k_poll+0x158>)
   1f282:	f7fd fbf1 	bl	1ca68 <z_spin_unlock_valid>
   1f286:	2800      	cmp	r0, #0
   1f288:	d0bd      	beq.n	1f206 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   1f28a:	f386 8811 	msr	BASEPRI, r6
   1f28e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1f292:	e7c3      	b.n	1f21c <z_impl_k_poll+0xd4>
   1f294:	20002f64 	.word	0x20002f64
   1f298:	00028868 	.word	0x00028868
   1f29c:	00026718 	.word	0x00026718
   1f2a0:	20002fb8 	.word	0x20002fb8
   1f2a4:	0002679f 	.word	0x0002679f
   1f2a8:	20000830 	.word	0x20000830

0001f2ac <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1f2ac:	b570      	push	{r4, r5, r6, lr}
   1f2ae:	4604      	mov	r4, r0
   1f2b0:	460d      	mov	r5, r1
	__asm__ volatile(
   1f2b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f2b6:	f3ef 8611 	mrs	r6, BASEPRI
   1f2ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f2c2:	481b      	ldr	r0, [pc, #108]	; (1f330 <z_impl_k_poll_signal_raise+0x84>)
   1f2c4:	f7fd fbc2 	bl	1ca4c <z_spin_lock_valid>
   1f2c8:	b940      	cbnz	r0, 1f2dc <z_impl_k_poll_signal_raise+0x30>
   1f2ca:	491a      	ldr	r1, [pc, #104]	; (1f334 <z_impl_k_poll_signal_raise+0x88>)
   1f2cc:	481a      	ldr	r0, [pc, #104]	; (1f338 <z_impl_k_poll_signal_raise+0x8c>)
   1f2ce:	2294      	movs	r2, #148	; 0x94
   1f2d0:	f003 fea5 	bl	2301e <assert_print>
   1f2d4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f2d6:	4817      	ldr	r0, [pc, #92]	; (1f334 <z_impl_k_poll_signal_raise+0x88>)
   1f2d8:	f003 fe9a 	bl	23010 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f2dc:	4814      	ldr	r0, [pc, #80]	; (1f330 <z_impl_k_poll_signal_raise+0x84>)
   1f2de:	f7fd fbd3 	bl	1ca88 <z_spin_lock_set_owner>
	return list->head == list;
   1f2e2:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1f2e4:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   1f2e6:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1f2e8:	4284      	cmp	r4, r0
   1f2ea:	60a1      	str	r1, [r4, #8]
   1f2ec:	d10a      	bne.n	1f304 <z_impl_k_poll_signal_raise+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f2ee:	4810      	ldr	r0, [pc, #64]	; (1f330 <z_impl_k_poll_signal_raise+0x84>)
   1f2f0:	f7fd fbba 	bl	1ca68 <z_spin_unlock_valid>
   1f2f4:	b9b0      	cbnz	r0, 1f324 <z_impl_k_poll_signal_raise+0x78>
   1f2f6:	490f      	ldr	r1, [pc, #60]	; (1f334 <z_impl_k_poll_signal_raise+0x88>)
   1f2f8:	480f      	ldr	r0, [pc, #60]	; (1f338 <z_impl_k_poll_signal_raise+0x8c>)
   1f2fa:	22c2      	movs	r2, #194	; 0xc2
   1f2fc:	f003 fe8f 	bl	2301e <assert_print>
   1f300:	21c2      	movs	r1, #194	; 0xc2
   1f302:	e7e8      	b.n	1f2d6 <z_impl_k_poll_signal_raise+0x2a>
	sys_dnode_t *const next = node->next;
   1f304:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1f308:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1f30a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f30c:	2300      	movs	r3, #0
	node->prev = NULL;
   1f30e:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f312:	f006 f8f9 	bl	25508 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1f316:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1f318:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1f31a:	4805      	ldr	r0, [pc, #20]	; (1f330 <z_impl_k_poll_signal_raise+0x84>)
   1f31c:	f7fe fc6c 	bl	1dbf8 <z_reschedule>
	return rc;
}
   1f320:	4620      	mov	r0, r4
   1f322:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1f324:	f386 8811 	msr	BASEPRI, r6
   1f328:	f3bf 8f6f 	isb	sy
		return 0;
   1f32c:	2400      	movs	r4, #0
   1f32e:	e7f7      	b.n	1f320 <z_impl_k_poll_signal_raise+0x74>
   1f330:	20002fb8 	.word	0x20002fb8
   1f334:	0002679f 	.word	0x0002679f
   1f338:	00026718 	.word	0x00026718

0001f33c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1f33c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f33e:	4605      	mov	r5, r0
   1f340:	460e      	mov	r6, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1f342:	f005 ff8e 	bl	25262 <k_is_in_isr>
   1f346:	b9f0      	cbnz	r0, 1f386 <z_thread_aligned_alloc+0x4a>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1f348:	4b11      	ldr	r3, [pc, #68]	; (1f390 <z_thread_aligned_alloc+0x54>)
   1f34a:	689b      	ldr	r3, [r3, #8]
   1f34c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1f34e:	b1dc      	cbz	r4, 1f388 <z_thread_aligned_alloc+0x4c>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1f350:	1d32      	adds	r2, r6, #4
   1f352:	d218      	bcs.n	1f386 <z_thread_aligned_alloc+0x4a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1f354:	2000      	movs	r0, #0
   1f356:	2100      	movs	r1, #0
   1f358:	e9cd 0100 	strd	r0, r1, [sp]
   1f35c:	f045 0104 	orr.w	r1, r5, #4
   1f360:	4620      	mov	r0, r4
   1f362:	f7fd f8e3 	bl	1c52c <k_heap_aligned_alloc>
	if (mem == NULL) {
   1f366:	b170      	cbz	r0, 1f386 <z_thread_aligned_alloc+0x4a>
	*heap_ref = heap;
   1f368:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1f36a:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   1f36c:	b165      	cbz	r5, 1f388 <z_thread_aligned_alloc+0x4c>
   1f36e:	3d01      	subs	r5, #1
   1f370:	422c      	tst	r4, r5
   1f372:	d009      	beq.n	1f388 <z_thread_aligned_alloc+0x4c>
   1f374:	4907      	ldr	r1, [pc, #28]	; (1f394 <z_thread_aligned_alloc+0x58>)
   1f376:	4808      	ldr	r0, [pc, #32]	; (1f398 <z_thread_aligned_alloc+0x5c>)
   1f378:	2225      	movs	r2, #37	; 0x25
   1f37a:	f003 fe50 	bl	2301e <assert_print>
   1f37e:	4805      	ldr	r0, [pc, #20]	; (1f394 <z_thread_aligned_alloc+0x58>)
   1f380:	2125      	movs	r1, #37	; 0x25
   1f382:	f003 fe45 	bl	23010 <assert_post_action>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1f386:	2400      	movs	r4, #0
	}

	return ret;
}
   1f388:	4620      	mov	r0, r4
   1f38a:	b002      	add	sp, #8
   1f38c:	bd70      	pop	{r4, r5, r6, pc}
   1f38e:	bf00      	nop
   1f390:	20002f64 	.word	0x20002f64
   1f394:	00028889 	.word	0x00028889
   1f398:	00026718 	.word	0x00026718

0001f39c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1f39c:	4801      	ldr	r0, [pc, #4]	; (1f3a4 <boot_banner+0x8>)
   1f39e:	f003 bc1b 	b.w	22bd8 <printk>
   1f3a2:	bf00      	nop
   1f3a4:	000288ad 	.word	0x000288ad

0001f3a8 <ocrypto_ecdh_p256_public_key>:
   1f3a8:	b530      	push	{r4, r5, lr}
   1f3aa:	b099      	sub	sp, #100	; 0x64
   1f3ac:	4605      	mov	r5, r0
   1f3ae:	4668      	mov	r0, sp
   1f3b0:	f000 f828 	bl	1f404 <ocrypto_sc_p256_from32bytes>
   1f3b4:	4669      	mov	r1, sp
   1f3b6:	4604      	mov	r4, r0
   1f3b8:	a808      	add	r0, sp, #32
   1f3ba:	f000 fa53 	bl	1f864 <ocrypto_curve_p256_scalarmult_base>
   1f3be:	a908      	add	r1, sp, #32
   1f3c0:	4304      	orrs	r4, r0
   1f3c2:	4628      	mov	r0, r5
   1f3c4:	f000 f98a 	bl	1f6dc <ocrypto_curve_p256_to64bytes>
   1f3c8:	4620      	mov	r0, r4
   1f3ca:	b019      	add	sp, #100	; 0x64
   1f3cc:	bd30      	pop	{r4, r5, pc}
   1f3ce:	bf00      	nop

0001f3d0 <ocrypto_ecdh_p256_common_secret>:
   1f3d0:	b570      	push	{r4, r5, r6, lr}
   1f3d2:	b098      	sub	sp, #96	; 0x60
   1f3d4:	4605      	mov	r5, r0
   1f3d6:	4668      	mov	r0, sp
   1f3d8:	4616      	mov	r6, r2
   1f3da:	f000 f813 	bl	1f404 <ocrypto_sc_p256_from32bytes>
   1f3de:	4631      	mov	r1, r6
   1f3e0:	4604      	mov	r4, r0
   1f3e2:	a808      	add	r0, sp, #32
   1f3e4:	f000 f946 	bl	1f674 <ocrypto_curve_p256_from64bytes>
   1f3e8:	a908      	add	r1, sp, #32
   1f3ea:	466a      	mov	r2, sp
   1f3ec:	4304      	orrs	r4, r0
   1f3ee:	4608      	mov	r0, r1
   1f3f0:	f000 f982 	bl	1f6f8 <ocrypto_curve_p256_scalarmult>
   1f3f4:	a908      	add	r1, sp, #32
   1f3f6:	4304      	orrs	r4, r0
   1f3f8:	4628      	mov	r0, r5
   1f3fa:	f000 f96d 	bl	1f6d8 <ocrypto_curve_p256_to32bytes>
   1f3fe:	4620      	mov	r0, r4
   1f400:	b018      	add	sp, #96	; 0x60
   1f402:	bd70      	pop	{r4, r5, r6, pc}

0001f404 <ocrypto_sc_p256_from32bytes>:
   1f404:	b570      	push	{r4, r5, r6, lr}
   1f406:	680b      	ldr	r3, [r1, #0]
   1f408:	4e12      	ldr	r6, [pc, #72]	; (1f454 <ocrypto_sc_p256_from32bytes+0x50>)
   1f40a:	ba1b      	rev	r3, r3
   1f40c:	61c3      	str	r3, [r0, #28]
   1f40e:	684b      	ldr	r3, [r1, #4]
   1f410:	ba1b      	rev	r3, r3
   1f412:	6183      	str	r3, [r0, #24]
   1f414:	688b      	ldr	r3, [r1, #8]
   1f416:	ba1b      	rev	r3, r3
   1f418:	6143      	str	r3, [r0, #20]
   1f41a:	68cb      	ldr	r3, [r1, #12]
   1f41c:	ba1b      	rev	r3, r3
   1f41e:	6103      	str	r3, [r0, #16]
   1f420:	690b      	ldr	r3, [r1, #16]
   1f422:	ba1b      	rev	r3, r3
   1f424:	60c3      	str	r3, [r0, #12]
   1f426:	694b      	ldr	r3, [r1, #20]
   1f428:	ba1b      	rev	r3, r3
   1f42a:	6083      	str	r3, [r0, #8]
   1f42c:	698b      	ldr	r3, [r1, #24]
   1f42e:	ba1b      	rev	r3, r3
   1f430:	6043      	str	r3, [r0, #4]
   1f432:	69cb      	ldr	r3, [r1, #28]
   1f434:	ba1b      	rev	r3, r3
   1f436:	4632      	mov	r2, r6
   1f438:	6003      	str	r3, [r0, #0]
   1f43a:	4601      	mov	r1, r0
   1f43c:	4604      	mov	r4, r0
   1f43e:	f7e1 f9dd 	bl	7fc <ocrypto_bigint_sub256>
   1f442:	4631      	mov	r1, r6
   1f444:	4605      	mov	r5, r0
   1f446:	4602      	mov	r2, r0
   1f448:	4620      	mov	r0, r4
   1f44a:	f7e1 f9f7 	bl	83c <ocrypto_bigint_cadd256>
   1f44e:	1e68      	subs	r0, r5, #1
   1f450:	bd70      	pop	{r4, r5, r6, pc}
   1f452:	bf00      	nop
   1f454:	00026098 	.word	0x00026098

0001f458 <p256_zdblu>:
   1f458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f45c:	b088      	sub	sp, #32
   1f45e:	460c      	mov	r4, r1
   1f460:	4606      	mov	r6, r0
   1f462:	f102 0120 	add.w	r1, r2, #32
   1f466:	4668      	mov	r0, sp
   1f468:	f106 0720 	add.w	r7, r6, #32
   1f46c:	4690      	mov	r8, r2
   1f46e:	f7e1 fccf 	bl	e10 <ocrypto_mod_p256_sqr>
   1f472:	466a      	mov	r2, sp
   1f474:	4669      	mov	r1, sp
   1f476:	4668      	mov	r0, sp
   1f478:	f7e1 fbdc 	bl	c34 <ocrypto_mod_p256_add>
   1f47c:	4669      	mov	r1, sp
   1f47e:	4638      	mov	r0, r7
   1f480:	f7e1 fcc6 	bl	e10 <ocrypto_mod_p256_sqr>
   1f484:	463a      	mov	r2, r7
   1f486:	4639      	mov	r1, r7
   1f488:	4638      	mov	r0, r7
   1f48a:	f104 0520 	add.w	r5, r4, #32
   1f48e:	f7e1 fbd1 	bl	c34 <ocrypto_mod_p256_add>
   1f492:	466a      	mov	r2, sp
   1f494:	4669      	mov	r1, sp
   1f496:	4668      	mov	r0, sp
   1f498:	f7e1 fbcc 	bl	c34 <ocrypto_mod_p256_add>
   1f49c:	4641      	mov	r1, r8
   1f49e:	4628      	mov	r0, r5
   1f4a0:	f7e1 fcb6 	bl	e10 <ocrypto_mod_p256_sqr>
   1f4a4:	466a      	mov	r2, sp
   1f4a6:	4641      	mov	r1, r8
   1f4a8:	4630      	mov	r0, r6
   1f4aa:	f7e1 fc99 	bl	de0 <ocrypto_mod_p256_mul>
   1f4ae:	462a      	mov	r2, r5
   1f4b0:	4629      	mov	r1, r5
   1f4b2:	4668      	mov	r0, sp
   1f4b4:	f7e1 fbbe 	bl	c34 <ocrypto_mod_p256_add>
   1f4b8:	462a      	mov	r2, r5
   1f4ba:	4669      	mov	r1, sp
   1f4bc:	4668      	mov	r0, sp
   1f4be:	f7e1 fbb9 	bl	c34 <ocrypto_mod_p256_add>
   1f4c2:	4a12      	ldr	r2, [pc, #72]	; (1f50c <p256_zdblu+0xb4>)
   1f4c4:	4669      	mov	r1, sp
   1f4c6:	4668      	mov	r0, sp
   1f4c8:	f7e1 fbb4 	bl	c34 <ocrypto_mod_p256_add>
   1f4cc:	4669      	mov	r1, sp
   1f4ce:	4620      	mov	r0, r4
   1f4d0:	f7e1 fc9e 	bl	e10 <ocrypto_mod_p256_sqr>
   1f4d4:	4632      	mov	r2, r6
   1f4d6:	4621      	mov	r1, r4
   1f4d8:	4620      	mov	r0, r4
   1f4da:	f7e1 fbe9 	bl	cb0 <ocrypto_mod_p256_sub>
   1f4de:	4632      	mov	r2, r6
   1f4e0:	4621      	mov	r1, r4
   1f4e2:	4620      	mov	r0, r4
   1f4e4:	f7e1 fbe4 	bl	cb0 <ocrypto_mod_p256_sub>
   1f4e8:	4622      	mov	r2, r4
   1f4ea:	4631      	mov	r1, r6
   1f4ec:	4628      	mov	r0, r5
   1f4ee:	f7e1 fbdf 	bl	cb0 <ocrypto_mod_p256_sub>
   1f4f2:	466a      	mov	r2, sp
   1f4f4:	4629      	mov	r1, r5
   1f4f6:	4628      	mov	r0, r5
   1f4f8:	f7e1 fc72 	bl	de0 <ocrypto_mod_p256_mul>
   1f4fc:	463a      	mov	r2, r7
   1f4fe:	4629      	mov	r1, r5
   1f500:	4628      	mov	r0, r5
   1f502:	f7e1 fbd5 	bl	cb0 <ocrypto_mod_p256_sub>
   1f506:	b008      	add	sp, #32
   1f508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f50c:	00026138 	.word	0x00026138

0001f510 <p256_zaddc>:
   1f510:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f512:	b099      	sub	sp, #100	; 0x64
   1f514:	4604      	mov	r4, r0
   1f516:	460d      	mov	r5, r1
   1f518:	460a      	mov	r2, r1
   1f51a:	4601      	mov	r1, r0
   1f51c:	4668      	mov	r0, sp
   1f51e:	f7e1 fbc7 	bl	cb0 <ocrypto_mod_p256_sub>
   1f522:	4669      	mov	r1, sp
   1f524:	4668      	mov	r0, sp
   1f526:	f7e1 fc73 	bl	e10 <ocrypto_mod_p256_sqr>
   1f52a:	466a      	mov	r2, sp
   1f52c:	4621      	mov	r1, r4
   1f52e:	a808      	add	r0, sp, #32
   1f530:	f105 0620 	add.w	r6, r5, #32
   1f534:	f104 0720 	add.w	r7, r4, #32
   1f538:	f7e1 fc52 	bl	de0 <ocrypto_mod_p256_mul>
   1f53c:	466a      	mov	r2, sp
   1f53e:	4629      	mov	r1, r5
   1f540:	4668      	mov	r0, sp
   1f542:	f7e1 fc4d 	bl	de0 <ocrypto_mod_p256_mul>
   1f546:	4632      	mov	r2, r6
   1f548:	4639      	mov	r1, r7
   1f54a:	a810      	add	r0, sp, #64	; 0x40
   1f54c:	f7e1 fb72 	bl	c34 <ocrypto_mod_p256_add>
   1f550:	4632      	mov	r2, r6
   1f552:	4639      	mov	r1, r7
   1f554:	4630      	mov	r0, r6
   1f556:	f7e1 fbab 	bl	cb0 <ocrypto_mod_p256_sub>
   1f55a:	4631      	mov	r1, r6
   1f55c:	4628      	mov	r0, r5
   1f55e:	f7e1 fc57 	bl	e10 <ocrypto_mod_p256_sqr>
   1f562:	466a      	mov	r2, sp
   1f564:	a908      	add	r1, sp, #32
   1f566:	4620      	mov	r0, r4
   1f568:	f7e1 fb64 	bl	c34 <ocrypto_mod_p256_add>
   1f56c:	4622      	mov	r2, r4
   1f56e:	4629      	mov	r1, r5
   1f570:	4628      	mov	r0, r5
   1f572:	f7e1 fb9d 	bl	cb0 <ocrypto_mod_p256_sub>
   1f576:	466a      	mov	r2, sp
   1f578:	a908      	add	r1, sp, #32
   1f57a:	4668      	mov	r0, sp
   1f57c:	f7e1 fb98 	bl	cb0 <ocrypto_mod_p256_sub>
   1f580:	466a      	mov	r2, sp
   1f582:	4639      	mov	r1, r7
   1f584:	4638      	mov	r0, r7
   1f586:	f7e1 fc2b 	bl	de0 <ocrypto_mod_p256_mul>
   1f58a:	462a      	mov	r2, r5
   1f58c:	a908      	add	r1, sp, #32
   1f58e:	4668      	mov	r0, sp
   1f590:	f7e1 fb8e 	bl	cb0 <ocrypto_mod_p256_sub>
   1f594:	466a      	mov	r2, sp
   1f596:	4631      	mov	r1, r6
   1f598:	4630      	mov	r0, r6
   1f59a:	f7e1 fc21 	bl	de0 <ocrypto_mod_p256_mul>
   1f59e:	463a      	mov	r2, r7
   1f5a0:	4631      	mov	r1, r6
   1f5a2:	4630      	mov	r0, r6
   1f5a4:	f7e1 fb84 	bl	cb0 <ocrypto_mod_p256_sub>
   1f5a8:	a910      	add	r1, sp, #64	; 0x40
   1f5aa:	4668      	mov	r0, sp
   1f5ac:	f7e1 fc30 	bl	e10 <ocrypto_mod_p256_sqr>
   1f5b0:	4622      	mov	r2, r4
   1f5b2:	4669      	mov	r1, sp
   1f5b4:	4620      	mov	r0, r4
   1f5b6:	f7e1 fb7b 	bl	cb0 <ocrypto_mod_p256_sub>
   1f5ba:	a908      	add	r1, sp, #32
   1f5bc:	4622      	mov	r2, r4
   1f5be:	4608      	mov	r0, r1
   1f5c0:	f7e1 fb76 	bl	cb0 <ocrypto_mod_p256_sub>
   1f5c4:	a910      	add	r1, sp, #64	; 0x40
   1f5c6:	aa08      	add	r2, sp, #32
   1f5c8:	4608      	mov	r0, r1
   1f5ca:	f7e1 fc09 	bl	de0 <ocrypto_mod_p256_mul>
   1f5ce:	463a      	mov	r2, r7
   1f5d0:	a910      	add	r1, sp, #64	; 0x40
   1f5d2:	4638      	mov	r0, r7
   1f5d4:	f7e1 fb6c 	bl	cb0 <ocrypto_mod_p256_sub>
   1f5d8:	b019      	add	sp, #100	; 0x64
   1f5da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f5dc <p256_zaddu>:
   1f5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f5e0:	b088      	sub	sp, #32
   1f5e2:	460c      	mov	r4, r1
   1f5e4:	4605      	mov	r5, r0
   1f5e6:	4690      	mov	r8, r2
   1f5e8:	460a      	mov	r2, r1
   1f5ea:	4601      	mov	r1, r0
   1f5ec:	4668      	mov	r0, sp
   1f5ee:	f7e1 fb5f 	bl	cb0 <ocrypto_mod_p256_sub>
   1f5f2:	4669      	mov	r1, sp
   1f5f4:	4668      	mov	r0, sp
   1f5f6:	f7e1 fc0b 	bl	e10 <ocrypto_mod_p256_sqr>
   1f5fa:	466a      	mov	r2, sp
   1f5fc:	4629      	mov	r1, r5
   1f5fe:	4628      	mov	r0, r5
   1f600:	f104 0620 	add.w	r6, r4, #32
   1f604:	f7e1 fbec 	bl	de0 <ocrypto_mod_p256_mul>
   1f608:	f105 0720 	add.w	r7, r5, #32
   1f60c:	466a      	mov	r2, sp
   1f60e:	4621      	mov	r1, r4
   1f610:	4668      	mov	r0, sp
   1f612:	f7e1 fbe5 	bl	de0 <ocrypto_mod_p256_mul>
   1f616:	4632      	mov	r2, r6
   1f618:	4639      	mov	r1, r7
   1f61a:	4630      	mov	r0, r6
   1f61c:	f7e1 fb48 	bl	cb0 <ocrypto_mod_p256_sub>
   1f620:	4631      	mov	r1, r6
   1f622:	4620      	mov	r0, r4
   1f624:	f7e1 fbf4 	bl	e10 <ocrypto_mod_p256_sqr>
   1f628:	462a      	mov	r2, r5
   1f62a:	4621      	mov	r1, r4
   1f62c:	4620      	mov	r0, r4
   1f62e:	f7e1 fb3f 	bl	cb0 <ocrypto_mod_p256_sub>
   1f632:	466a      	mov	r2, sp
   1f634:	4621      	mov	r1, r4
   1f636:	4620      	mov	r0, r4
   1f638:	f7e1 fb3a 	bl	cb0 <ocrypto_mod_p256_sub>
   1f63c:	466a      	mov	r2, sp
   1f63e:	4629      	mov	r1, r5
   1f640:	4640      	mov	r0, r8
   1f642:	f7e1 fb35 	bl	cb0 <ocrypto_mod_p256_sub>
   1f646:	4642      	mov	r2, r8
   1f648:	4639      	mov	r1, r7
   1f64a:	4638      	mov	r0, r7
   1f64c:	f7e1 fbc8 	bl	de0 <ocrypto_mod_p256_mul>
   1f650:	4622      	mov	r2, r4
   1f652:	4629      	mov	r1, r5
   1f654:	4668      	mov	r0, sp
   1f656:	f7e1 fb2b 	bl	cb0 <ocrypto_mod_p256_sub>
   1f65a:	466a      	mov	r2, sp
   1f65c:	4631      	mov	r1, r6
   1f65e:	4630      	mov	r0, r6
   1f660:	f7e1 fbbe 	bl	de0 <ocrypto_mod_p256_mul>
   1f664:	463a      	mov	r2, r7
   1f666:	4631      	mov	r1, r6
   1f668:	4630      	mov	r0, r6
   1f66a:	f7e1 fb21 	bl	cb0 <ocrypto_mod_p256_sub>
   1f66e:	b008      	add	sp, #32
   1f670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f674 <ocrypto_curve_p256_from64bytes>:
   1f674:	b570      	push	{r4, r5, r6, lr}
   1f676:	f100 0620 	add.w	r6, r0, #32
   1f67a:	b090      	sub	sp, #64	; 0x40
   1f67c:	460d      	mov	r5, r1
   1f67e:	4604      	mov	r4, r0
   1f680:	f000 f914 	bl	1f8ac <ocrypto_mod_p256_from_bytes>
   1f684:	f105 0120 	add.w	r1, r5, #32
   1f688:	4630      	mov	r0, r6
   1f68a:	f000 f90f 	bl	1f8ac <ocrypto_mod_p256_from_bytes>
   1f68e:	4621      	mov	r1, r4
   1f690:	a808      	add	r0, sp, #32
   1f692:	f7e1 fbbd 	bl	e10 <ocrypto_mod_p256_sqr>
   1f696:	a908      	add	r1, sp, #32
   1f698:	4608      	mov	r0, r1
   1f69a:	4a0d      	ldr	r2, [pc, #52]	; (1f6d0 <ocrypto_curve_p256_from64bytes+0x5c>)
   1f69c:	f7e1 faca 	bl	c34 <ocrypto_mod_p256_add>
   1f6a0:	a908      	add	r1, sp, #32
   1f6a2:	4622      	mov	r2, r4
   1f6a4:	4608      	mov	r0, r1
   1f6a6:	f7e1 fb9b 	bl	de0 <ocrypto_mod_p256_mul>
   1f6aa:	a908      	add	r1, sp, #32
   1f6ac:	4a09      	ldr	r2, [pc, #36]	; (1f6d4 <ocrypto_curve_p256_from64bytes+0x60>)
   1f6ae:	4608      	mov	r0, r1
   1f6b0:	f7e1 fac0 	bl	c34 <ocrypto_mod_p256_add>
   1f6b4:	4631      	mov	r1, r6
   1f6b6:	4668      	mov	r0, sp
   1f6b8:	f7e1 fbaa 	bl	e10 <ocrypto_mod_p256_sqr>
   1f6bc:	2220      	movs	r2, #32
   1f6be:	4669      	mov	r1, sp
   1f6c0:	eb0d 0002 	add.w	r0, sp, r2
   1f6c4:	f7e1 fa88 	bl	bd8 <ocrypto_constant_time_equal>
   1f6c8:	3801      	subs	r0, #1
   1f6ca:	b010      	add	sp, #64	; 0x40
   1f6cc:	bd70      	pop	{r4, r5, r6, pc}
   1f6ce:	bf00      	nop
   1f6d0:	00026138 	.word	0x00026138
   1f6d4:	00026158 	.word	0x00026158

0001f6d8 <ocrypto_curve_p256_to32bytes>:
   1f6d8:	f000 b902 	b.w	1f8e0 <ocrypto_mod_p256_to_bytes>

0001f6dc <ocrypto_curve_p256_to64bytes>:
   1f6dc:	b538      	push	{r3, r4, r5, lr}
   1f6de:	4604      	mov	r4, r0
   1f6e0:	460d      	mov	r5, r1
   1f6e2:	f000 f8fd 	bl	1f8e0 <ocrypto_mod_p256_to_bytes>
   1f6e6:	f105 0120 	add.w	r1, r5, #32
   1f6ea:	f104 0020 	add.w	r0, r4, #32
   1f6ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f6f2:	f000 b8f5 	b.w	1f8e0 <ocrypto_mod_p256_to_bytes>
   1f6f6:	bf00      	nop

0001f6f8 <ocrypto_curve_p256_scalarmult>:
   1f6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f6fc:	4613      	mov	r3, r2
   1f6fe:	b0b8      	sub	sp, #224	; 0xe0
   1f700:	4a54      	ldr	r2, [pc, #336]	; (1f854 <ocrypto_curve_p256_scalarmult+0x15c>)
   1f702:	4689      	mov	r9, r1
   1f704:	4680      	mov	r8, r0
   1f706:	4619      	mov	r1, r3
   1f708:	a810      	add	r0, sp, #64	; 0x40
   1f70a:	f7e1 f877 	bl	7fc <ocrypto_bigint_sub256>
   1f70e:	4952      	ldr	r1, [pc, #328]	; (1f858 <ocrypto_curve_p256_scalarmult+0x160>)
   1f710:	4602      	mov	r2, r0
   1f712:	a810      	add	r0, sp, #64	; 0x40
   1f714:	f7e1 f892 	bl	83c <ocrypto_bigint_cadd256>
   1f718:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1f71a:	494e      	ldr	r1, [pc, #312]	; (1f854 <ocrypto_curve_p256_scalarmult+0x15c>)
   1f71c:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   1f720:	4607      	mov	r7, r0
   1f722:	f1c6 0201 	rsb	r2, r6, #1
   1f726:	a810      	add	r0, sp, #64	; 0x40
   1f728:	f7e1 f888 	bl	83c <ocrypto_bigint_cadd256>
   1f72c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f72e:	464a      	mov	r2, r9
   1f730:	ea6f 0a03 	mvn.w	sl, r3
   1f734:	a928      	add	r1, sp, #160	; 0xa0
   1f736:	a818      	add	r0, sp, #96	; 0x60
   1f738:	f7ff fe8e 	bl	1f458 <p256_zdblu>
   1f73c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   1f740:	a920      	add	r1, sp, #128	; 0x80
   1f742:	f1ca 0201 	rsb	r2, sl, #1
   1f746:	4608      	mov	r0, r1
   1f748:	f000 f892 	bl	1f870 <ocrypto_mod_p256_cneg>
   1f74c:	f1c7 0701 	rsb	r7, r7, #1
   1f750:	24fe      	movs	r4, #254	; 0xfe
   1f752:	466a      	mov	r2, sp
   1f754:	a918      	add	r1, sp, #96	; 0x60
   1f756:	a828      	add	r0, sp, #160	; 0xa0
   1f758:	f7ff ff40 	bl	1f5dc <p256_zaddu>
   1f75c:	1162      	asrs	r2, r4, #5
   1f75e:	ab38      	add	r3, sp, #224	; 0xe0
   1f760:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1f764:	f004 011f 	and.w	r1, r4, #31
   1f768:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   1f76c:	40cb      	lsrs	r3, r1
   1f76e:	4655      	mov	r5, sl
   1f770:	f003 0a01 	and.w	sl, r3, #1
   1f774:	ea8a 0505 	eor.w	r5, sl, r5
   1f778:	462a      	mov	r2, r5
   1f77a:	a928      	add	r1, sp, #160	; 0xa0
   1f77c:	a818      	add	r0, sp, #96	; 0x60
   1f77e:	f7e1 f8b9 	bl	8f4 <ocrypto_bigint_cswap256>
   1f782:	462a      	mov	r2, r5
   1f784:	a930      	add	r1, sp, #192	; 0xc0
   1f786:	a820      	add	r0, sp, #128	; 0x80
   1f788:	f7e1 f8b4 	bl	8f4 <ocrypto_bigint_cswap256>
   1f78c:	3c01      	subs	r4, #1
   1f78e:	a928      	add	r1, sp, #160	; 0xa0
   1f790:	a818      	add	r0, sp, #96	; 0x60
   1f792:	f7ff febd 	bl	1f510 <p256_zaddc>
   1f796:	1c63      	adds	r3, r4, #1
   1f798:	d1db      	bne.n	1f752 <ocrypto_curve_p256_scalarmult+0x5a>
   1f79a:	f1ca 0201 	rsb	r2, sl, #1
   1f79e:	a920      	add	r1, sp, #128	; 0x80
   1f7a0:	a808      	add	r0, sp, #32
   1f7a2:	f000 f865 	bl	1f870 <ocrypto_mod_p256_cneg>
   1f7a6:	ea86 060a 	eor.w	r6, r6, sl
   1f7aa:	466a      	mov	r2, sp
   1f7ac:	a918      	add	r1, sp, #96	; 0x60
   1f7ae:	a828      	add	r0, sp, #160	; 0xa0
   1f7b0:	f7ff ff14 	bl	1f5dc <p256_zaddu>
   1f7b4:	a928      	add	r1, sp, #160	; 0xa0
   1f7b6:	4632      	mov	r2, r6
   1f7b8:	a818      	add	r0, sp, #96	; 0x60
   1f7ba:	f7e1 f89b 	bl	8f4 <ocrypto_bigint_cswap256>
   1f7be:	4632      	mov	r2, r6
   1f7c0:	a930      	add	r1, sp, #192	; 0xc0
   1f7c2:	a820      	add	r0, sp, #128	; 0x80
   1f7c4:	f7e1 f896 	bl	8f4 <ocrypto_bigint_cswap256>
   1f7c8:	a908      	add	r1, sp, #32
   1f7ca:	466a      	mov	r2, sp
   1f7cc:	4608      	mov	r0, r1
   1f7ce:	f7e1 fb07 	bl	de0 <ocrypto_mod_p256_mul>
   1f7d2:	a908      	add	r1, sp, #32
   1f7d4:	4608      	mov	r0, r1
   1f7d6:	f000 f89d 	bl	1f914 <ocrypto_mod_p256_inv>
   1f7da:	a908      	add	r1, sp, #32
   1f7dc:	f108 0420 	add.w	r4, r8, #32
   1f7e0:	f109 0220 	add.w	r2, r9, #32
   1f7e4:	4608      	mov	r0, r1
   1f7e6:	f7e1 fafb 	bl	de0 <ocrypto_mod_p256_mul>
   1f7ea:	a920      	add	r1, sp, #128	; 0x80
   1f7ec:	aa08      	add	r2, sp, #32
   1f7ee:	4620      	mov	r0, r4
   1f7f0:	f7e1 faf6 	bl	de0 <ocrypto_mod_p256_mul>
   1f7f4:	aa08      	add	r2, sp, #32
   1f7f6:	a918      	add	r1, sp, #96	; 0x60
   1f7f8:	4668      	mov	r0, sp
   1f7fa:	f7e1 faf1 	bl	de0 <ocrypto_mod_p256_mul>
   1f7fe:	4669      	mov	r1, sp
   1f800:	4668      	mov	r0, sp
   1f802:	f7e1 fb05 	bl	e10 <ocrypto_mod_p256_sqr>
   1f806:	aa18      	add	r2, sp, #96	; 0x60
   1f808:	4669      	mov	r1, sp
   1f80a:	a808      	add	r0, sp, #32
   1f80c:	f7e1 fae8 	bl	de0 <ocrypto_mod_p256_mul>
   1f810:	4621      	mov	r1, r4
   1f812:	4668      	mov	r0, sp
   1f814:	f7e1 fafc 	bl	e10 <ocrypto_mod_p256_sqr>
   1f818:	aa08      	add	r2, sp, #32
   1f81a:	4669      	mov	r1, sp
   1f81c:	4610      	mov	r0, r2
   1f81e:	f7e1 fa47 	bl	cb0 <ocrypto_mod_p256_sub>
   1f822:	4a0e      	ldr	r2, [pc, #56]	; (1f85c <ocrypto_curve_p256_scalarmult+0x164>)
   1f824:	a908      	add	r1, sp, #32
   1f826:	4668      	mov	r0, sp
   1f828:	f7e1 fa42 	bl	cb0 <ocrypto_mod_p256_sub>
   1f82c:	4620      	mov	r0, r4
   1f82e:	2120      	movs	r1, #32
   1f830:	f7e1 f9e6 	bl	c00 <ocrypto_constant_time_is_zero>
   1f834:	a908      	add	r1, sp, #32
   1f836:	4243      	negs	r3, r0
   1f838:	4602      	mov	r2, r0
   1f83a:	4668      	mov	r0, sp
   1f83c:	431f      	orrs	r7, r3
   1f83e:	f7e1 f859 	bl	8f4 <ocrypto_bigint_cswap256>
   1f842:	4640      	mov	r0, r8
   1f844:	4a06      	ldr	r2, [pc, #24]	; (1f860 <ocrypto_curve_p256_scalarmult+0x168>)
   1f846:	4669      	mov	r1, sp
   1f848:	f7e1 faca 	bl	de0 <ocrypto_mod_p256_mul>
   1f84c:	4638      	mov	r0, r7
   1f84e:	b038      	add	sp, #224	; 0xe0
   1f850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f854:	00026178 	.word	0x00026178
   1f858:	000260f8 	.word	0x000260f8
   1f85c:	00026158 	.word	0x00026158
   1f860:	00026118 	.word	0x00026118

0001f864 <ocrypto_curve_p256_scalarmult_base>:
   1f864:	460a      	mov	r2, r1
   1f866:	4901      	ldr	r1, [pc, #4]	; (1f86c <ocrypto_curve_p256_scalarmult_base+0x8>)
   1f868:	f7ff bf46 	b.w	1f6f8 <ocrypto_curve_p256_scalarmult>
   1f86c:	000260b8 	.word	0x000260b8

0001f870 <ocrypto_mod_p256_cneg>:
   1f870:	b570      	push	{r4, r5, r6, lr}
   1f872:	b088      	sub	sp, #32
   1f874:	4604      	mov	r4, r0
   1f876:	460d      	mov	r5, r1
   1f878:	4616      	mov	r6, r2
   1f87a:	2100      	movs	r1, #0
   1f87c:	2220      	movs	r2, #32
   1f87e:	4668      	mov	r0, sp
   1f880:	f003 fe7d 	bl	2357e <memset>
   1f884:	2300      	movs	r3, #0
   1f886:	4629      	mov	r1, r5
   1f888:	2220      	movs	r2, #32
   1f88a:	4620      	mov	r0, r4
   1f88c:	9300      	str	r3, [sp, #0]
   1f88e:	f003 fe6b 	bl	23568 <memcpy>
   1f892:	462a      	mov	r2, r5
   1f894:	4669      	mov	r1, sp
   1f896:	4668      	mov	r0, sp
   1f898:	f7e1 fa0a 	bl	cb0 <ocrypto_mod_p256_sub>
   1f89c:	4632      	mov	r2, r6
   1f89e:	4669      	mov	r1, sp
   1f8a0:	4620      	mov	r0, r4
   1f8a2:	f7e1 f827 	bl	8f4 <ocrypto_bigint_cswap256>
   1f8a6:	b008      	add	sp, #32
   1f8a8:	bd70      	pop	{r4, r5, r6, pc}
   1f8aa:	bf00      	nop

0001f8ac <ocrypto_mod_p256_from_bytes>:
   1f8ac:	680b      	ldr	r3, [r1, #0]
   1f8ae:	ba1b      	rev	r3, r3
   1f8b0:	61c3      	str	r3, [r0, #28]
   1f8b2:	684b      	ldr	r3, [r1, #4]
   1f8b4:	ba1b      	rev	r3, r3
   1f8b6:	6183      	str	r3, [r0, #24]
   1f8b8:	688b      	ldr	r3, [r1, #8]
   1f8ba:	ba1b      	rev	r3, r3
   1f8bc:	6143      	str	r3, [r0, #20]
   1f8be:	68cb      	ldr	r3, [r1, #12]
   1f8c0:	ba1b      	rev	r3, r3
   1f8c2:	6103      	str	r3, [r0, #16]
   1f8c4:	690b      	ldr	r3, [r1, #16]
   1f8c6:	ba1b      	rev	r3, r3
   1f8c8:	60c3      	str	r3, [r0, #12]
   1f8ca:	694b      	ldr	r3, [r1, #20]
   1f8cc:	ba1b      	rev	r3, r3
   1f8ce:	6083      	str	r3, [r0, #8]
   1f8d0:	698b      	ldr	r3, [r1, #24]
   1f8d2:	ba1b      	rev	r3, r3
   1f8d4:	6043      	str	r3, [r0, #4]
   1f8d6:	69cb      	ldr	r3, [r1, #28]
   1f8d8:	ba1b      	rev	r3, r3
   1f8da:	6003      	str	r3, [r0, #0]
   1f8dc:	4770      	bx	lr
   1f8de:	bf00      	nop

0001f8e0 <ocrypto_mod_p256_to_bytes>:
   1f8e0:	69cb      	ldr	r3, [r1, #28]
   1f8e2:	ba1b      	rev	r3, r3
   1f8e4:	6003      	str	r3, [r0, #0]
   1f8e6:	698b      	ldr	r3, [r1, #24]
   1f8e8:	ba1b      	rev	r3, r3
   1f8ea:	6043      	str	r3, [r0, #4]
   1f8ec:	694b      	ldr	r3, [r1, #20]
   1f8ee:	ba1b      	rev	r3, r3
   1f8f0:	6083      	str	r3, [r0, #8]
   1f8f2:	690b      	ldr	r3, [r1, #16]
   1f8f4:	ba1b      	rev	r3, r3
   1f8f6:	60c3      	str	r3, [r0, #12]
   1f8f8:	68cb      	ldr	r3, [r1, #12]
   1f8fa:	ba1b      	rev	r3, r3
   1f8fc:	6103      	str	r3, [r0, #16]
   1f8fe:	688b      	ldr	r3, [r1, #8]
   1f900:	ba1b      	rev	r3, r3
   1f902:	6143      	str	r3, [r0, #20]
   1f904:	684b      	ldr	r3, [r1, #4]
   1f906:	ba1b      	rev	r3, r3
   1f908:	6183      	str	r3, [r0, #24]
   1f90a:	680b      	ldr	r3, [r1, #0]
   1f90c:	ba1b      	rev	r3, r3
   1f90e:	61c3      	str	r3, [r0, #28]
   1f910:	4770      	bx	lr
   1f912:	bf00      	nop

0001f914 <ocrypto_mod_p256_inv>:
   1f914:	b570      	push	{r4, r5, r6, lr}
   1f916:	b098      	sub	sp, #96	; 0x60
   1f918:	460d      	mov	r5, r1
   1f91a:	4606      	mov	r6, r0
   1f91c:	a810      	add	r0, sp, #64	; 0x40
   1f91e:	f7e1 fa77 	bl	e10 <ocrypto_mod_p256_sqr>
   1f922:	462a      	mov	r2, r5
   1f924:	a910      	add	r1, sp, #64	; 0x40
   1f926:	4668      	mov	r0, sp
   1f928:	f7e1 fa5a 	bl	de0 <ocrypto_mod_p256_mul>
   1f92c:	4669      	mov	r1, sp
   1f92e:	a810      	add	r0, sp, #64	; 0x40
   1f930:	f7e1 fa6e 	bl	e10 <ocrypto_mod_p256_sqr>
   1f934:	a910      	add	r1, sp, #64	; 0x40
   1f936:	4608      	mov	r0, r1
   1f938:	f7e1 fa6a 	bl	e10 <ocrypto_mod_p256_sqr>
   1f93c:	466a      	mov	r2, sp
   1f93e:	a910      	add	r1, sp, #64	; 0x40
   1f940:	a808      	add	r0, sp, #32
   1f942:	f7e1 fa4d 	bl	de0 <ocrypto_mod_p256_mul>
   1f946:	a908      	add	r1, sp, #32
   1f948:	a810      	add	r0, sp, #64	; 0x40
   1f94a:	f7e1 fa61 	bl	e10 <ocrypto_mod_p256_sqr>
   1f94e:	a910      	add	r1, sp, #64	; 0x40
   1f950:	4608      	mov	r0, r1
   1f952:	f7e1 fa5d 	bl	e10 <ocrypto_mod_p256_sqr>
   1f956:	a910      	add	r1, sp, #64	; 0x40
   1f958:	4608      	mov	r0, r1
   1f95a:	f7e1 fa59 	bl	e10 <ocrypto_mod_p256_sqr>
   1f95e:	a910      	add	r1, sp, #64	; 0x40
   1f960:	4608      	mov	r0, r1
   1f962:	f7e1 fa55 	bl	e10 <ocrypto_mod_p256_sqr>
   1f966:	a910      	add	r1, sp, #64	; 0x40
   1f968:	aa08      	add	r2, sp, #32
   1f96a:	4608      	mov	r0, r1
   1f96c:	f7e1 fa38 	bl	de0 <ocrypto_mod_p256_mul>
   1f970:	a910      	add	r1, sp, #64	; 0x40
   1f972:	4608      	mov	r0, r1
   1f974:	f7e1 fa4c 	bl	e10 <ocrypto_mod_p256_sqr>
   1f978:	a910      	add	r1, sp, #64	; 0x40
   1f97a:	4608      	mov	r0, r1
   1f97c:	f7e1 fa48 	bl	e10 <ocrypto_mod_p256_sqr>
   1f980:	a910      	add	r1, sp, #64	; 0x40
   1f982:	466a      	mov	r2, sp
   1f984:	a808      	add	r0, sp, #32
   1f986:	f7e1 fa2b 	bl	de0 <ocrypto_mod_p256_mul>
   1f98a:	2405      	movs	r4, #5
   1f98c:	a908      	add	r1, sp, #32
   1f98e:	a810      	add	r0, sp, #64	; 0x40
   1f990:	f7e1 fa3e 	bl	e10 <ocrypto_mod_p256_sqr>
   1f994:	a910      	add	r1, sp, #64	; 0x40
   1f996:	4608      	mov	r0, r1
   1f998:	f7e1 fa3a 	bl	e10 <ocrypto_mod_p256_sqr>
   1f99c:	3c01      	subs	r4, #1
   1f99e:	a910      	add	r1, sp, #64	; 0x40
   1f9a0:	d1f5      	bne.n	1f98e <ocrypto_mod_p256_inv+0x7a>
   1f9a2:	aa08      	add	r2, sp, #32
   1f9a4:	4608      	mov	r0, r1
   1f9a6:	f7e1 fa1b 	bl	de0 <ocrypto_mod_p256_mul>
   1f9aa:	2405      	movs	r4, #5
   1f9ac:	a910      	add	r1, sp, #64	; 0x40
   1f9ae:	4608      	mov	r0, r1
   1f9b0:	f7e1 fa2e 	bl	e10 <ocrypto_mod_p256_sqr>
   1f9b4:	a910      	add	r1, sp, #64	; 0x40
   1f9b6:	4608      	mov	r0, r1
   1f9b8:	f7e1 fa2a 	bl	e10 <ocrypto_mod_p256_sqr>
   1f9bc:	3c01      	subs	r4, #1
   1f9be:	d1f5      	bne.n	1f9ac <ocrypto_mod_p256_inv+0x98>
   1f9c0:	a910      	add	r1, sp, #64	; 0x40
   1f9c2:	aa08      	add	r2, sp, #32
   1f9c4:	4608      	mov	r0, r1
   1f9c6:	f7e1 fa0b 	bl	de0 <ocrypto_mod_p256_mul>
   1f9ca:	a910      	add	r1, sp, #64	; 0x40
   1f9cc:	a808      	add	r0, sp, #32
   1f9ce:	f7e1 fa1f 	bl	e10 <ocrypto_mod_p256_sqr>
   1f9d2:	a908      	add	r1, sp, #32
   1f9d4:	4608      	mov	r0, r1
   1f9d6:	f7e1 fa1b 	bl	e10 <ocrypto_mod_p256_sqr>
   1f9da:	a908      	add	r1, sp, #32
   1f9dc:	466a      	mov	r2, sp
   1f9de:	4668      	mov	r0, sp
   1f9e0:	f7e1 f9fe 	bl	de0 <ocrypto_mod_p256_mul>
   1f9e4:	2410      	movs	r4, #16
   1f9e6:	4669      	mov	r1, sp
   1f9e8:	a810      	add	r0, sp, #64	; 0x40
   1f9ea:	f7e1 fa11 	bl	e10 <ocrypto_mod_p256_sqr>
   1f9ee:	a910      	add	r1, sp, #64	; 0x40
   1f9f0:	4608      	mov	r0, r1
   1f9f2:	f7e1 fa0d 	bl	e10 <ocrypto_mod_p256_sqr>
   1f9f6:	3c01      	subs	r4, #1
   1f9f8:	a910      	add	r1, sp, #64	; 0x40
   1f9fa:	d1f5      	bne.n	1f9e8 <ocrypto_mod_p256_inv+0xd4>
   1f9fc:	462a      	mov	r2, r5
   1f9fe:	4608      	mov	r0, r1
   1fa00:	f7e1 f9ee 	bl	de0 <ocrypto_mod_p256_mul>
   1fa04:	2440      	movs	r4, #64	; 0x40
   1fa06:	a910      	add	r1, sp, #64	; 0x40
   1fa08:	4608      	mov	r0, r1
   1fa0a:	f7e1 fa01 	bl	e10 <ocrypto_mod_p256_sqr>
   1fa0e:	a910      	add	r1, sp, #64	; 0x40
   1fa10:	4608      	mov	r0, r1
   1fa12:	f7e1 f9fd 	bl	e10 <ocrypto_mod_p256_sqr>
   1fa16:	3c01      	subs	r4, #1
   1fa18:	d1f5      	bne.n	1fa06 <ocrypto_mod_p256_inv+0xf2>
   1fa1a:	a910      	add	r1, sp, #64	; 0x40
   1fa1c:	466a      	mov	r2, sp
   1fa1e:	4608      	mov	r0, r1
   1fa20:	f7e1 f9de 	bl	de0 <ocrypto_mod_p256_mul>
   1fa24:	2410      	movs	r4, #16
   1fa26:	a910      	add	r1, sp, #64	; 0x40
   1fa28:	4608      	mov	r0, r1
   1fa2a:	f7e1 f9f1 	bl	e10 <ocrypto_mod_p256_sqr>
   1fa2e:	a910      	add	r1, sp, #64	; 0x40
   1fa30:	4608      	mov	r0, r1
   1fa32:	f7e1 f9ed 	bl	e10 <ocrypto_mod_p256_sqr>
   1fa36:	3c01      	subs	r4, #1
   1fa38:	d1f5      	bne.n	1fa26 <ocrypto_mod_p256_inv+0x112>
   1fa3a:	a910      	add	r1, sp, #64	; 0x40
   1fa3c:	466a      	mov	r2, sp
   1fa3e:	4608      	mov	r0, r1
   1fa40:	f7e1 f9ce 	bl	de0 <ocrypto_mod_p256_mul>
   1fa44:	2410      	movs	r4, #16
   1fa46:	a910      	add	r1, sp, #64	; 0x40
   1fa48:	4608      	mov	r0, r1
   1fa4a:	f7e1 f9e1 	bl	e10 <ocrypto_mod_p256_sqr>
   1fa4e:	a910      	add	r1, sp, #64	; 0x40
   1fa50:	4608      	mov	r0, r1
   1fa52:	f7e1 f9dd 	bl	e10 <ocrypto_mod_p256_sqr>
   1fa56:	3c01      	subs	r4, #1
   1fa58:	d1f5      	bne.n	1fa46 <ocrypto_mod_p256_inv+0x132>
   1fa5a:	a910      	add	r1, sp, #64	; 0x40
   1fa5c:	aa08      	add	r2, sp, #32
   1fa5e:	4608      	mov	r0, r1
   1fa60:	f7e1 f9be 	bl	de0 <ocrypto_mod_p256_mul>
   1fa64:	462a      	mov	r2, r5
   1fa66:	a910      	add	r1, sp, #64	; 0x40
   1fa68:	4630      	mov	r0, r6
   1fa6a:	f7e1 f9b9 	bl	de0 <ocrypto_mod_p256_mul>
   1fa6e:	b018      	add	sp, #96	; 0x60
   1fa70:	bd70      	pop	{r4, r5, r6, pc}
   1fa72:	bf00      	nop

0001fa74 <alNfcCallback>:
   1fa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fa78:	4cb0      	ldr	r4, [pc, #704]	; (1fd3c <alNfcCallback+0x2c8>)
   1fa7a:	4284      	cmp	r4, r0
   1fa7c:	d001      	beq.n	1fa82 <alNfcCallback+0xe>
   1fa7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fa82:	2903      	cmp	r1, #3
   1fa84:	d8fb      	bhi.n	1fa7e <alNfcCallback+0xa>
   1fa86:	e8df f001 	tbb	[pc, r1]
   1fa8a:	acd9      	.short	0xacd9
   1fa8c:	021a      	.short	0x021a
   1fa8e:	7823      	ldrb	r3, [r4, #0]
   1fa90:	2b05      	cmp	r3, #5
   1fa92:	d1f4      	bne.n	1fa7e <alNfcCallback+0xa>
   1fa94:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
   1fa98:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
   1fa9c:	2104      	movs	r1, #4
   1fa9e:	429a      	cmp	r2, r3
   1faa0:	7021      	strb	r1, [r4, #0]
   1faa2:	d1ec      	bne.n	1fa7e <alNfcCallback+0xa>
   1faa4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1faa8:	2b00      	cmp	r3, #0
   1faaa:	d1e8      	bne.n	1fa7e <alNfcCallback+0xa>
   1faac:	461a      	mov	r2, r3
   1faae:	6865      	ldr	r5, [r4, #4]
   1fab0:	68a0      	ldr	r0, [r4, #8]
   1fab2:	2103      	movs	r1, #3
   1fab4:	47a8      	blx	r5
   1fab6:	2301      	movs	r3, #1
   1fab8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
   1fabc:	e7df      	b.n	1fa7e <alNfcCallback+0xa>
   1fabe:	2b00      	cmp	r3, #0
   1fac0:	d0dd      	beq.n	1fa7e <alNfcCallback+0xa>
   1fac2:	2a00      	cmp	r2, #0
   1fac4:	d0db      	beq.n	1fa7e <alNfcCallback+0xa>
   1fac6:	7811      	ldrb	r1, [r2, #0]
   1fac8:	2930      	cmp	r1, #48	; 0x30
   1faca:	d1d8      	bne.n	1fa7e <alNfcCallback+0xa>
   1facc:	2b02      	cmp	r3, #2
   1face:	d1d6      	bne.n	1fa7e <alNfcCallback+0xa>
   1fad0:	7823      	ldrb	r3, [r4, #0]
   1fad2:	2b04      	cmp	r3, #4
   1fad4:	d1d3      	bne.n	1fa7e <alNfcCallback+0xa>
   1fad6:	7851      	ldrb	r1, [r2, #1]
   1fad8:	6963      	ldr	r3, [r4, #20]
   1fada:	2005      	movs	r0, #5
   1fadc:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1fae0:	7020      	strb	r0, [r4, #0]
   1fae2:	4688      	mov	r8, r1
   1fae4:	ea4f 0581 	mov.w	r5, r1, lsl #2
   1fae8:	f200 80d1 	bhi.w	1fc8e <alNfcCallback+0x21a>
   1faec:	69a2      	ldr	r2, [r4, #24]
   1faee:	3a10      	subs	r2, #16
   1faf0:	4295      	cmp	r5, r2
   1faf2:	f200 80cc 	bhi.w	1fc8e <alNfcCallback+0x21a>
   1faf6:	68e0      	ldr	r0, [r4, #12]
   1faf8:	1aeb      	subs	r3, r5, r3
   1fafa:	4418      	add	r0, r3
   1fafc:	2110      	movs	r1, #16
   1fafe:	ea4f 07d8 	mov.w	r7, r8, lsr #3
   1fb02:	f000 fb61 	bl	201c8 <nfc_t2t_lib_al_send>
   1fb06:	eba8 01c7 	sub.w	r1, r8, r7, lsl #3
   1fb0a:	f1b8 0f03 	cmp.w	r8, #3
   1fb0e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
   1fb12:	463b      	mov	r3, r7
   1fb14:	f1c1 0507 	rsb	r5, r1, #7
   1fb18:	f240 80d7 	bls.w	1fcca <alNfcCallback+0x256>
   1fb1c:	eb04 0c07 	add.w	ip, r4, r7
   1fb20:	2001      	movs	r0, #1
   1fb22:	fa00 f605 	lsl.w	r6, r0, r5
   1fb26:	f89c 5048 	ldrb.w	r5, [ip, #72]	; 0x48
   1fb2a:	ea15 0e06 	ands.w	lr, r5, r6
   1fb2e:	f040 80ce 	bne.w	1fcce <alNfcCallback+0x25a>
   1fb32:	4670      	mov	r0, lr
   1fb34:	4402      	add	r2, r0
   1fb36:	b2d2      	uxtb	r2, r2
   1fb38:	2501      	movs	r5, #1
   1fb3a:	f1d1 0106 	rsbs	r1, r1, #6
   1fb3e:	f108 0001 	add.w	r0, r8, #1
   1fb42:	bf44      	itt	mi
   1fb44:	1c7b      	addmi	r3, r7, #1
   1fb46:	2107      	movmi	r1, #7
   1fb48:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   1fb4c:	f000 809c 	beq.w	1fc88 <alNfcCallback+0x214>
   1fb50:	2803      	cmp	r0, #3
   1fb52:	d90d      	bls.n	1fb70 <alNfcCallback+0xfc>
   1fb54:	18e7      	adds	r7, r4, r3
   1fb56:	2001      	movs	r0, #1
   1fb58:	f897 5048 	ldrb.w	r5, [r7, #72]	; 0x48
   1fb5c:	fa00 f601 	lsl.w	r6, r0, r1
   1fb60:	ea15 0c06 	ands.w	ip, r5, r6
   1fb64:	f040 80ce 	bne.w	1fd04 <alNfcCallback+0x290>
   1fb68:	4660      	mov	r0, ip
   1fb6a:	4402      	add	r2, r0
   1fb6c:	b2d2      	uxtb	r2, r2
   1fb6e:	2501      	movs	r5, #1
   1fb70:	1e4e      	subs	r6, r1, #1
   1fb72:	b909      	cbnz	r1, 1fb78 <alNfcCallback+0x104>
   1fb74:	3301      	adds	r3, #1
   1fb76:	2607      	movs	r6, #7
   1fb78:	f108 0102 	add.w	r1, r8, #2
   1fb7c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   1fb80:	f000 8082 	beq.w	1fc88 <alNfcCallback+0x214>
   1fb84:	2903      	cmp	r1, #3
   1fb86:	d90d      	bls.n	1fba4 <alNfcCallback+0x130>
   1fb88:	18e7      	adds	r7, r4, r3
   1fb8a:	2101      	movs	r1, #1
   1fb8c:	f897 0048 	ldrb.w	r0, [r7, #72]	; 0x48
   1fb90:	fa01 f506 	lsl.w	r5, r1, r6
   1fb94:	ea10 0c05 	ands.w	ip, r0, r5
   1fb98:	f040 80af 	bne.w	1fcfa <alNfcCallback+0x286>
   1fb9c:	4661      	mov	r1, ip
   1fb9e:	440a      	add	r2, r1
   1fba0:	b2d2      	uxtb	r2, r2
   1fba2:	2501      	movs	r5, #1
   1fba4:	1e70      	subs	r0, r6, #1
   1fba6:	b90e      	cbnz	r6, 1fbac <alNfcCallback+0x138>
   1fba8:	3301      	adds	r3, #1
   1fbaa:	2007      	movs	r0, #7
   1fbac:	f108 0603 	add.w	r6, r8, #3
   1fbb0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   1fbb4:	d068      	beq.n	1fc88 <alNfcCallback+0x214>
   1fbb6:	2e03      	cmp	r6, #3
   1fbb8:	d066      	beq.n	1fc88 <alNfcCallback+0x214>
   1fbba:	4423      	add	r3, r4
   1fbbc:	2701      	movs	r7, #1
   1fbbe:	f893 5048 	ldrb.w	r5, [r3, #72]	; 0x48
   1fbc2:	fa07 f000 	lsl.w	r0, r7, r0
   1fbc6:	ea15 0100 	ands.w	r1, r5, r0
   1fbca:	bf1b      	ittet	ne
   1fbcc:	ea25 0000 	bicne.w	r0, r5, r0
   1fbd0:	f883 0048 	strbne.w	r0, [r3, #72]	; 0x48
   1fbd4:	460b      	moveq	r3, r1
   1fbd6:	463b      	movne	r3, r7
   1fbd8:	441a      	add	r2, r3
   1fbda:	b2d2      	uxtb	r2, r2
   1fbdc:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
   1fbe0:	e74d      	b.n	1fa7e <alNfcCallback+0xa>
   1fbe2:	7823      	ldrb	r3, [r4, #0]
   1fbe4:	2b04      	cmp	r3, #4
   1fbe6:	d038      	beq.n	1fc5a <alNfcCallback+0x1e6>
   1fbe8:	2b05      	cmp	r3, #5
   1fbea:	d044      	beq.n	1fc76 <alNfcCallback+0x202>
   1fbec:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
   1fbf0:	2d00      	cmp	r5, #0
   1fbf2:	d042      	beq.n	1fc7a <alNfcCallback+0x206>
   1fbf4:	2d01      	cmp	r5, #1
   1fbf6:	d043      	beq.n	1fc80 <alNfcCallback+0x20c>
   1fbf8:	2101      	movs	r1, #1
   1fbfa:	2202      	movs	r2, #2
   1fbfc:	f04f 0c00 	mov.w	ip, #0
   1fc00:	2308      	movs	r3, #8
   1fc02:	468e      	mov	lr, r1
   1fc04:	fa0e f002 	lsl.w	r0, lr, r2
   1fc08:	3a01      	subs	r2, #1
   1fc0a:	4303      	orrs	r3, r0
   1fc0c:	1c50      	adds	r0, r2, #1
   1fc0e:	f101 0101 	add.w	r1, r1, #1
   1fc12:	b2db      	uxtb	r3, r3
   1fc14:	d107      	bne.n	1fc26 <alNfcCallback+0x1b2>
   1fc16:	eb04 020c 	add.w	r2, r4, ip
   1fc1a:	f10c 0c01 	add.w	ip, ip, #1
   1fc1e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
   1fc22:	2207      	movs	r2, #7
   1fc24:	2300      	movs	r3, #0
   1fc26:	42a9      	cmp	r1, r5
   1fc28:	d1ec      	bne.n	1fc04 <alNfcCallback+0x190>
   1fc2a:	44a4      	add	ip, r4
   1fc2c:	2200      	movs	r2, #0
   1fc2e:	f88c 3048 	strb.w	r3, [ip, #72]	; 0x48
   1fc32:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
   1fc36:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
   1fc3a:	e720      	b.n	1fa7e <alNfcCallback+0xa>
   1fc3c:	7823      	ldrb	r3, [r4, #0]
   1fc3e:	2b03      	cmp	r3, #3
   1fc40:	f47f af1d 	bne.w	1fa7e <alNfcCallback+0xa>
   1fc44:	6865      	ldr	r5, [r4, #4]
   1fc46:	68a0      	ldr	r0, [r4, #8]
   1fc48:	2204      	movs	r2, #4
   1fc4a:	2300      	movs	r3, #0
   1fc4c:	7022      	strb	r2, [r4, #0]
   1fc4e:	46ac      	mov	ip, r5
   1fc50:	461a      	mov	r2, r3
   1fc52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fc56:	2101      	movs	r1, #1
   1fc58:	4760      	bx	ip
   1fc5a:	2301      	movs	r3, #1
   1fc5c:	4a38      	ldr	r2, [pc, #224]	; (1fd40 <alNfcCallback+0x2cc>)
   1fc5e:	6865      	ldr	r5, [r4, #4]
   1fc60:	68a0      	ldr	r0, [r4, #8]
   1fc62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1fc66:	441a      	add	r2, r3
   1fc68:	2300      	movs	r3, #0
   1fc6a:	7892      	ldrb	r2, [r2, #2]
   1fc6c:	7022      	strb	r2, [r4, #0]
   1fc6e:	2102      	movs	r1, #2
   1fc70:	461a      	mov	r2, r3
   1fc72:	47a8      	blx	r5
   1fc74:	e7ba      	b.n	1fbec <alNfcCallback+0x178>
   1fc76:	2304      	movs	r3, #4
   1fc78:	e7f0      	b.n	1fc5c <alNfcCallback+0x1e8>
   1fc7a:	46ac      	mov	ip, r5
   1fc7c:	462b      	mov	r3, r5
   1fc7e:	e7d4      	b.n	1fc2a <alNfcCallback+0x1b6>
   1fc80:	f04f 0c00 	mov.w	ip, #0
   1fc84:	2308      	movs	r3, #8
   1fc86:	e7d0      	b.n	1fc2a <alNfcCallback+0x1b6>
   1fc88:	2d00      	cmp	r5, #0
   1fc8a:	d1a7      	bne.n	1fbdc <alNfcCallback+0x168>
   1fc8c:	e6f7      	b.n	1fa7e <alNfcCallback+0xa>
   1fc8e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1fd44 <alNfcCallback+0x2d0>
   1fc92:	2210      	movs	r2, #16
   1fc94:	2100      	movs	r1, #0
   1fc96:	4648      	mov	r0, r9
   1fc98:	f003 fc71 	bl	2357e <memset>
   1fc9c:	6966      	ldr	r6, [r4, #20]
   1fc9e:	42b5      	cmp	r5, r6
   1fca0:	d31a      	bcc.n	1fcd8 <alNfcCallback+0x264>
   1fca2:	2710      	movs	r7, #16
   1fca4:	69a3      	ldr	r3, [r4, #24]
   1fca6:	42ab      	cmp	r3, r5
   1fca8:	d84e      	bhi.n	1fd48 <alNfcCallback+0x2d4>
   1fcaa:	69a3      	ldr	r3, [r4, #24]
   1fcac:	42ab      	cmp	r3, r5
   1fcae:	d070      	beq.n	1fd92 <alNfcCallback+0x31e>
   1fcb0:	69e3      	ldr	r3, [r4, #28]
   1fcb2:	42ab      	cmp	r3, r5
   1fcb4:	d85e      	bhi.n	1fd74 <alNfcCallback+0x300>
   1fcb6:	6a23      	ldr	r3, [r4, #32]
   1fcb8:	42ab      	cmp	r3, r5
   1fcba:	d828      	bhi.n	1fd0e <alNfcCallback+0x29a>
   1fcbc:	463a      	mov	r2, r7
   1fcbe:	2100      	movs	r1, #0
   1fcc0:	4648      	mov	r0, r9
   1fcc2:	f003 fc5c 	bl	2357e <memset>
   1fcc6:	481f      	ldr	r0, [pc, #124]	; (1fd44 <alNfcCallback+0x2d0>)
   1fcc8:	e718      	b.n	1fafc <alNfcCallback+0x88>
   1fcca:	2500      	movs	r5, #0
   1fccc:	e735      	b.n	1fb3a <alNfcCallback+0xc6>
   1fcce:	ea25 0506 	bic.w	r5, r5, r6
   1fcd2:	f88c 5048 	strb.w	r5, [ip, #72]	; 0x48
   1fcd6:	e72d      	b.n	1fb34 <alNfcCallback+0xc0>
   1fcd8:	1b76      	subs	r6, r6, r5
   1fcda:	2e10      	cmp	r6, #16
   1fcdc:	bf28      	it	cs
   1fcde:	2610      	movcs	r6, #16
   1fce0:	f1a9 0114 	sub.w	r1, r9, #20
   1fce4:	4429      	add	r1, r5
   1fce6:	4632      	mov	r2, r6
   1fce8:	4648      	mov	r0, r9
   1fcea:	f003 fc3d 	bl	23568 <memcpy>
   1fcee:	f1d6 0710 	rsbs	r7, r6, #16
   1fcf2:	d0e8      	beq.n	1fcc6 <alNfcCallback+0x252>
   1fcf4:	4435      	add	r5, r6
   1fcf6:	44b1      	add	r9, r6
   1fcf8:	e7d4      	b.n	1fca4 <alNfcCallback+0x230>
   1fcfa:	ea20 0005 	bic.w	r0, r0, r5
   1fcfe:	f887 0048 	strb.w	r0, [r7, #72]	; 0x48
   1fd02:	e74c      	b.n	1fb9e <alNfcCallback+0x12a>
   1fd04:	ea25 0506 	bic.w	r5, r5, r6
   1fd08:	f887 5048 	strb.w	r5, [r7, #72]	; 0x48
   1fd0c:	e72d      	b.n	1fb6a <alNfcCallback+0xf6>
   1fd0e:	1b5b      	subs	r3, r3, r5
   1fd10:	42bb      	cmp	r3, r7
   1fd12:	bf28      	it	cs
   1fd14:	463b      	movcs	r3, r7
   1fd16:	461a      	mov	r2, r3
   1fd18:	21ff      	movs	r1, #255	; 0xff
   1fd1a:	4648      	mov	r0, r9
   1fd1c:	461e      	mov	r6, r3
   1fd1e:	f003 fc2e 	bl	2357e <memset>
   1fd22:	69e3      	ldr	r3, [r4, #28]
   1fd24:	330e      	adds	r3, #14
   1fd26:	1b5d      	subs	r5, r3, r5
   1fd28:	42bd      	cmp	r5, r7
   1fd2a:	bf9c      	itt	ls
   1fd2c:	233f      	movls	r3, #63	; 0x3f
   1fd2e:	f809 3005 	strbls.w	r3, [r9, r5]
   1fd32:	1bbf      	subs	r7, r7, r6
   1fd34:	d0c7      	beq.n	1fcc6 <alNfcCallback+0x252>
   1fd36:	44b1      	add	r9, r6
   1fd38:	e7c0      	b.n	1fcbc <alNfcCallback+0x248>
   1fd3a:	bf00      	nop
   1fd3c:	20002fbc 	.word	0x20002fbc
   1fd40:	000261a4 	.word	0x000261a4
   1fd44:	20002ff4 	.word	0x20002ff4
   1fd48:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   1fd4c:	18ca      	adds	r2, r1, r3
   1fd4e:	1b52      	subs	r2, r2, r5
   1fd50:	42ba      	cmp	r2, r7
   1fd52:	68e3      	ldr	r3, [r4, #12]
   1fd54:	bf28      	it	cs
   1fd56:	463a      	movcs	r2, r7
   1fd58:	1a69      	subs	r1, r5, r1
   1fd5a:	4616      	mov	r6, r2
   1fd5c:	4648      	mov	r0, r9
   1fd5e:	4419      	add	r1, r3
   1fd60:	4415      	add	r5, r2
   1fd62:	4491      	add	r9, r2
   1fd64:	f003 fc00 	bl	23568 <memcpy>
   1fd68:	1bbf      	subs	r7, r7, r6
   1fd6a:	d19e      	bne.n	1fcaa <alNfcCallback+0x236>
   1fd6c:	e7ab      	b.n	1fcc6 <alNfcCallback+0x252>
   1fd6e:	69e3      	ldr	r3, [r4, #28]
   1fd70:	42ab      	cmp	r3, r5
   1fd72:	d9a3      	bls.n	1fcbc <alNfcCallback+0x248>
   1fd74:	1b5b      	subs	r3, r3, r5
   1fd76:	42bb      	cmp	r3, r7
   1fd78:	bf28      	it	cs
   1fd7a:	463b      	movcs	r3, r7
   1fd7c:	461e      	mov	r6, r3
   1fd7e:	4648      	mov	r0, r9
   1fd80:	461a      	mov	r2, r3
   1fd82:	2100      	movs	r1, #0
   1fd84:	441d      	add	r5, r3
   1fd86:	4499      	add	r9, r3
   1fd88:	f003 fbf9 	bl	2357e <memset>
   1fd8c:	1bbf      	subs	r7, r7, r6
   1fd8e:	d192      	bne.n	1fcb6 <alNfcCallback+0x242>
   1fd90:	e799      	b.n	1fcc6 <alNfcCallback+0x252>
   1fd92:	6a23      	ldr	r3, [r4, #32]
   1fd94:	2b00      	cmp	r3, #0
   1fd96:	d0ea      	beq.n	1fd6e <alNfcCallback+0x2fa>
   1fd98:	69e3      	ldr	r3, [r4, #28]
   1fd9a:	42ab      	cmp	r3, r5
   1fd9c:	d08b      	beq.n	1fcb6 <alNfcCallback+0x242>
   1fd9e:	4648      	mov	r0, r9
   1fda0:	2201      	movs	r2, #1
   1fda2:	21fe      	movs	r1, #254	; 0xfe
   1fda4:	f003 fbeb 	bl	2357e <memset>
   1fda8:	3f01      	subs	r7, #1
   1fdaa:	f105 0501 	add.w	r5, r5, #1
   1fdae:	f109 0901 	add.w	r9, r9, #1
   1fdb2:	f47f af7d 	bne.w	1fcb0 <alNfcCallback+0x23c>
   1fdb6:	e786      	b.n	1fcc6 <alNfcCallback+0x252>

0001fdb8 <nfc_t2t_setup>:
   1fdb8:	b1e8      	cbz	r0, 1fdf6 <nfc_t2t_setup+0x3e>
   1fdba:	b510      	push	{r4, lr}
   1fdbc:	4c0f      	ldr	r4, [pc, #60]	; (1fdfc <nfc_t2t_setup+0x44>)
   1fdbe:	7822      	ldrb	r2, [r4, #0]
   1fdc0:	b112      	cbz	r2, 1fdc8 <nfc_t2t_setup+0x10>
   1fdc2:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   1fdc6:	bd10      	pop	{r4, pc}
   1fdc8:	460b      	mov	r3, r1
   1fdca:	2201      	movs	r2, #1
   1fdcc:	e9c4 0301 	strd	r0, r3, [r4, #4]
   1fdd0:	7022      	strb	r2, [r4, #0]
   1fdd2:	490b      	ldr	r1, [pc, #44]	; (1fe00 <nfc_t2t_setup+0x48>)
   1fdd4:	220a      	movs	r2, #10
   1fdd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1fdda:	f003 fbc5 	bl	23568 <memcpy>
   1fdde:	4a09      	ldr	r2, [pc, #36]	; (1fe04 <nfc_t2t_setup+0x4c>)
   1fde0:	f8c4 202e 	str.w	r2, [r4, #46]	; 0x2e
   1fde4:	f640 737c 	movw	r3, #3964	; 0xf7c
   1fde8:	4621      	mov	r1, r4
   1fdea:	8663      	strh	r3, [r4, #50]	; 0x32
   1fdec:	4806      	ldr	r0, [pc, #24]	; (1fe08 <nfc_t2t_setup+0x50>)
   1fdee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fdf2:	f000 b9b9 	b.w	20168 <nfc_t2t_lib_al_setup>
   1fdf6:	f06f 0015 	mvn.w	r0, #21
   1fdfa:	4770      	bx	lr
   1fdfc:	20002fbc 	.word	0x20002fbc
   1fe00:	00026198 	.word	0x00026198
   1fe04:	10e1ffff 	.word	0x10e1ffff
   1fe08:	0001fa75 	.word	0x0001fa75

0001fe0c <nfc_t2t_payload_set>:
   1fe0c:	f5b1 7f77 	cmp.w	r1, #988	; 0x3dc
   1fe10:	d878      	bhi.n	1ff04 <nfc_t2t_payload_set+0xf8>
   1fe12:	b530      	push	{r4, r5, lr}
   1fe14:	4c3d      	ldr	r4, [pc, #244]	; (1ff0c <nfc_t2t_payload_set+0x100>)
   1fe16:	7822      	ldrb	r2, [r4, #0]
   1fe18:	2a01      	cmp	r2, #1
   1fe1a:	d004      	beq.n	1fe26 <nfc_t2t_payload_set+0x1a>
   1fe1c:	2a02      	cmp	r2, #2
   1fe1e:	d048      	beq.n	1feb2 <nfc_t2t_payload_set+0xa6>
   1fe20:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   1fe24:	bd30      	pop	{r4, r5, pc}
   1fe26:	2309      	movs	r3, #9
   1fe28:	4a39      	ldr	r2, [pc, #228]	; (1ff10 <nfc_t2t_payload_set+0x104>)
   1fe2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1fe2e:	4413      	add	r3, r2
   1fe30:	789b      	ldrb	r3, [r3, #2]
   1fe32:	7023      	strb	r3, [r4, #0]
   1fe34:	2800      	cmp	r0, #0
   1fe36:	d03e      	beq.n	1feb6 <nfc_t2t_payload_set+0xaa>
   1fe38:	2303      	movs	r3, #3
   1fe3a:	29fe      	cmp	r1, #254	; 0xfe
   1fe3c:	e9c4 0103 	strd	r0, r1, [r4, #12]
   1fe40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
   1fe44:	d949      	bls.n	1feda <nfc_t2t_payload_set+0xce>
   1fe46:	f101 0314 	add.w	r3, r1, #20
   1fe4a:	1dcd      	adds	r5, r1, #7
   1fe4c:	ba48      	rev16	r0, r1
   1fe4e:	22ff      	movs	r2, #255	; 0xff
   1fe50:	2114      	movs	r1, #20
   1fe52:	e9c4 1305 	strd	r1, r3, [r4, #20]
   1fe56:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
   1fe5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1fe5e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
   1fe62:	e9c4 2307 	strd	r2, r3, [r4, #28]
   1fe66:	08ad      	lsrs	r5, r5, #2
   1fe68:	86e0      	strh	r0, [r4, #54]	; 0x36
   1fe6a:	f884 5069 	strb.w	r5, [r4, #105]	; 0x69
   1fe6e:	2101      	movs	r1, #1
   1fe70:	2202      	movs	r2, #2
   1fe72:	2000      	movs	r0, #0
   1fe74:	2308      	movs	r3, #8
   1fe76:	468e      	mov	lr, r1
   1fe78:	fa0e fc02 	lsl.w	ip, lr, r2
   1fe7c:	3a01      	subs	r2, #1
   1fe7e:	ea4c 0303 	orr.w	r3, ip, r3
   1fe82:	f1b2 3fff 	cmp.w	r2, #4294967295
   1fe86:	f101 0101 	add.w	r1, r1, #1
   1fe8a:	b2db      	uxtb	r3, r3
   1fe8c:	d106      	bne.n	1fe9c <nfc_t2t_payload_set+0x90>
   1fe8e:	eb04 0c00 	add.w	ip, r4, r0
   1fe92:	2207      	movs	r2, #7
   1fe94:	f88c 3048 	strb.w	r3, [ip, #72]	; 0x48
   1fe98:	3001      	adds	r0, #1
   1fe9a:	2300      	movs	r3, #0
   1fe9c:	42a9      	cmp	r1, r5
   1fe9e:	d1eb      	bne.n	1fe78 <nfc_t2t_payload_set+0x6c>
   1fea0:	1822      	adds	r2, r4, r0
   1fea2:	2000      	movs	r0, #0
   1fea4:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
   1fea8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
   1feac:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
   1feb0:	bd30      	pop	{r4, r5, pc}
   1feb2:	230c      	movs	r3, #12
   1feb4:	e7b8      	b.n	1fe28 <nfc_t2t_payload_set+0x1c>
   1feb6:	2312      	movs	r3, #18
   1feb8:	2203      	movs	r2, #3
   1feba:	e9c4 3305 	strd	r3, r3, [r4, #20]
   1febe:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
   1fec2:	2301      	movs	r3, #1
   1fec4:	86a2      	strh	r2, [r4, #52]	; 0x34
   1fec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1feca:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
   1fece:	e9c4 0003 	strd	r0, r0, [r4, #12]
   1fed2:	e9c4 1207 	strd	r1, r2, [r4, #28]
   1fed6:	2308      	movs	r3, #8
   1fed8:	e7e2      	b.n	1fea0 <nfc_t2t_payload_set+0x94>
   1feda:	1d4d      	adds	r5, r1, #5
   1fedc:	2312      	movs	r3, #18
   1fede:	08ad      	lsrs	r5, r5, #2
   1fee0:	18c8      	adds	r0, r1, r3
   1fee2:	6163      	str	r3, [r4, #20]
   1fee4:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
   1fee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1feec:	2d01      	cmp	r5, #1
   1feee:	e9c4 0206 	strd	r0, r2, [r4, #24]
   1fef2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
   1fef6:	6223      	str	r3, [r4, #32]
   1fef8:	f884 5069 	strb.w	r5, [r4, #105]	; 0x69
   1fefc:	d1b7      	bne.n	1fe6e <nfc_t2t_payload_set+0x62>
   1fefe:	2000      	movs	r0, #0
   1ff00:	2308      	movs	r3, #8
   1ff02:	e7cd      	b.n	1fea0 <nfc_t2t_payload_set+0x94>
   1ff04:	f06f 0015 	mvn.w	r0, #21
   1ff08:	4770      	bx	lr
   1ff0a:	bf00      	nop
   1ff0c:	20002fbc 	.word	0x20002fbc
   1ff10:	000261a4 	.word	0x000261a4

0001ff14 <nfc_t2t_internal_set>:
   1ff14:	b510      	push	{r4, lr}
   1ff16:	4604      	mov	r4, r0
   1ff18:	b140      	cbz	r0, 1ff2c <nfc_t2t_internal_set+0x18>
   1ff1a:	290a      	cmp	r1, #10
   1ff1c:	460a      	mov	r2, r1
   1ff1e:	d10c      	bne.n	1ff3a <nfc_t2t_internal_set+0x26>
   1ff20:	4621      	mov	r1, r4
   1ff22:	4807      	ldr	r0, [pc, #28]	; (1ff40 <nfc_t2t_internal_set+0x2c>)
   1ff24:	f003 fb20 	bl	23568 <memcpy>
   1ff28:	2000      	movs	r0, #0
   1ff2a:	bd10      	pop	{r4, pc}
   1ff2c:	4905      	ldr	r1, [pc, #20]	; (1ff44 <nfc_t2t_internal_set+0x30>)
   1ff2e:	4804      	ldr	r0, [pc, #16]	; (1ff40 <nfc_t2t_internal_set+0x2c>)
   1ff30:	220a      	movs	r2, #10
   1ff32:	f003 fb19 	bl	23568 <memcpy>
   1ff36:	4620      	mov	r0, r4
   1ff38:	bd10      	pop	{r4, pc}
   1ff3a:	f06f 0015 	mvn.w	r0, #21
   1ff3e:	bd10      	pop	{r4, pc}
   1ff40:	20002fe0 	.word	0x20002fe0
   1ff44:	00026198 	.word	0x00026198

0001ff48 <nfc_t2t_emulation_start>:
   1ff48:	b508      	push	{r3, lr}
   1ff4a:	4b06      	ldr	r3, [pc, #24]	; (1ff64 <nfc_t2t_emulation_start+0x1c>)
   1ff4c:	781a      	ldrb	r2, [r3, #0]
   1ff4e:	2a02      	cmp	r2, #2
   1ff50:	d002      	beq.n	1ff58 <nfc_t2t_emulation_start+0x10>
   1ff52:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   1ff56:	bd08      	pop	{r3, pc}
   1ff58:	2203      	movs	r2, #3
   1ff5a:	701a      	strb	r2, [r3, #0]
   1ff5c:	f000 f932 	bl	201c4 <nfc_t2t_lib_al_start>
   1ff60:	2000      	movs	r0, #0
   1ff62:	bd08      	pop	{r3, pc}
   1ff64:	20002fbc 	.word	0x20002fbc

0001ff68 <nrfx_nfct_evt_handler>:
   1ff68:	b570      	push	{r4, r5, r6, lr}
   1ff6a:	4604      	mov	r4, r0
   1ff6c:	f7fa ff54 	bl	1ae18 <nfc_platform_event_handler>
   1ff70:	6823      	ldr	r3, [r4, #0]
   1ff72:	2b40      	cmp	r3, #64	; 0x40
   1ff74:	d03b      	beq.n	1ffee <nrfx_nfct_evt_handler+0x86>
   1ff76:	d913      	bls.n	1ffa0 <nrfx_nfct_evt_handler+0x38>
   1ff78:	2b80      	cmp	r3, #128	; 0x80
   1ff7a:	d024      	beq.n	1ffc6 <nrfx_nfct_evt_handler+0x5e>
   1ff7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1ff80:	d127      	bne.n	1ffd2 <nrfx_nfct_evt_handler+0x6a>
   1ff82:	4831      	ldr	r0, [pc, #196]	; (20048 <nrfx_nfct_evt_handler+0xe0>)
   1ff84:	f7fb fde0 	bl	1bb48 <nrfx_nfct_rx>
   1ff88:	4b30      	ldr	r3, [pc, #192]	; (2004c <nrfx_nfct_evt_handler+0xe4>)
   1ff8a:	681c      	ldr	r4, [r3, #0]
   1ff8c:	b30c      	cbz	r4, 1ffd2 <nrfx_nfct_evt_handler+0x6a>
   1ff8e:	4a30      	ldr	r2, [pc, #192]	; (20050 <nrfx_nfct_evt_handler+0xe8>)
   1ff90:	2300      	movs	r3, #0
   1ff92:	6810      	ldr	r0, [r2, #0]
   1ff94:	46a4      	mov	ip, r4
   1ff96:	461a      	mov	r2, r3
   1ff98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ff9c:	4619      	mov	r1, r3
   1ff9e:	4760      	bx	ip
   1ffa0:	2b04      	cmp	r3, #4
   1ffa2:	d017      	beq.n	1ffd4 <nrfx_nfct_evt_handler+0x6c>
   1ffa4:	2b10      	cmp	r3, #16
   1ffa6:	d114      	bne.n	1ffd2 <nrfx_nfct_evt_handler+0x6a>
   1ffa8:	4827      	ldr	r0, [pc, #156]	; (20048 <nrfx_nfct_evt_handler+0xe0>)
   1ffaa:	f7fb fdcd 	bl	1bb48 <nrfx_nfct_rx>
   1ffae:	4b27      	ldr	r3, [pc, #156]	; (2004c <nrfx_nfct_evt_handler+0xe4>)
   1ffb0:	681c      	ldr	r4, [r3, #0]
   1ffb2:	b174      	cbz	r4, 1ffd2 <nrfx_nfct_evt_handler+0x6a>
   1ffb4:	4a26      	ldr	r2, [pc, #152]	; (20050 <nrfx_nfct_evt_handler+0xe8>)
   1ffb6:	2300      	movs	r3, #0
   1ffb8:	6810      	ldr	r0, [r2, #0]
   1ffba:	46a4      	mov	ip, r4
   1ffbc:	461a      	mov	r2, r3
   1ffbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ffc2:	2103      	movs	r1, #3
   1ffc4:	4760      	bx	ip
   1ffc6:	7923      	ldrb	r3, [r4, #4]
   1ffc8:	b91b      	cbnz	r3, 1ffd2 <nrfx_nfct_evt_handler+0x6a>
   1ffca:	4a22      	ldr	r2, [pc, #136]	; (20054 <nrfx_nfct_evt_handler+0xec>)
   1ffcc:	7811      	ldrb	r1, [r2, #0]
   1ffce:	b101      	cbz	r1, 1ffd2 <nrfx_nfct_evt_handler+0x6a>
   1ffd0:	7013      	strb	r3, [r2, #0]
   1ffd2:	bd70      	pop	{r4, r5, r6, pc}
   1ffd4:	4b1d      	ldr	r3, [pc, #116]	; (2004c <nrfx_nfct_evt_handler+0xe4>)
   1ffd6:	681c      	ldr	r4, [r3, #0]
   1ffd8:	2c00      	cmp	r4, #0
   1ffda:	d0fa      	beq.n	1ffd2 <nrfx_nfct_evt_handler+0x6a>
   1ffdc:	4a1c      	ldr	r2, [pc, #112]	; (20050 <nrfx_nfct_evt_handler+0xe8>)
   1ffde:	2300      	movs	r3, #0
   1ffe0:	6810      	ldr	r0, [r2, #0]
   1ffe2:	46a4      	mov	ip, r4
   1ffe4:	461a      	mov	r2, r3
   1ffe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ffea:	2101      	movs	r1, #1
   1ffec:	4760      	bx	ip
   1ffee:	6863      	ldr	r3, [r4, #4]
   1fff0:	b94b      	cbnz	r3, 20006 <nrfx_nfct_evt_handler+0x9e>
   1fff2:	4a19      	ldr	r2, [pc, #100]	; (20058 <nrfx_nfct_evt_handler+0xf0>)
   1fff4:	7813      	ldrb	r3, [r2, #0]
   1fff6:	2b30      	cmp	r3, #48	; 0x30
   1fff8:	d01a      	beq.n	20030 <nrfx_nfct_evt_handler+0xc8>
   1fffa:	7813      	ldrb	r3, [r2, #0]
   1fffc:	2ba2      	cmp	r3, #162	; 0xa2
   1fffe:	d007      	beq.n	20010 <nrfx_nfct_evt_handler+0xa8>
   20000:	7813      	ldrb	r3, [r2, #0]
   20002:	2b50      	cmp	r3, #80	; 0x50
   20004:	d00c      	beq.n	20020 <nrfx_nfct_evt_handler+0xb8>
   20006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2000a:	2029      	movs	r0, #41	; 0x29
   2000c:	f7fb be34 	b.w	1bc78 <nrfx_nfct_init_substate_force>
   20010:	68a3      	ldr	r3, [r4, #8]
   20012:	2b06      	cmp	r3, #6
   20014:	d1f4      	bne.n	20000 <nrfx_nfct_evt_handler+0x98>
   20016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2001a:	480b      	ldr	r0, [pc, #44]	; (20048 <nrfx_nfct_evt_handler+0xe0>)
   2001c:	f7fb bd94 	b.w	1bb48 <nrfx_nfct_rx>
   20020:	4b0c      	ldr	r3, [pc, #48]	; (20054 <nrfx_nfct_evt_handler+0xec>)
   20022:	2201      	movs	r2, #1
   20024:	701a      	strb	r2, [r3, #0]
   20026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2002a:	2028      	movs	r0, #40	; 0x28
   2002c:	f7fb be24 	b.w	1bc78 <nrfx_nfct_init_substate_force>
   20030:	4b06      	ldr	r3, [pc, #24]	; (2004c <nrfx_nfct_evt_handler+0xe4>)
   20032:	681d      	ldr	r5, [r3, #0]
   20034:	2d00      	cmp	r5, #0
   20036:	d0cc      	beq.n	1ffd2 <nrfx_nfct_evt_handler+0x6a>
   20038:	4905      	ldr	r1, [pc, #20]	; (20050 <nrfx_nfct_evt_handler+0xe8>)
   2003a:	68a3      	ldr	r3, [r4, #8]
   2003c:	6808      	ldr	r0, [r1, #0]
   2003e:	46ac      	mov	ip, r5
   20040:	2102      	movs	r1, #2
   20042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20046:	4760      	bx	ip
   20048:	000261d0 	.word	0x000261d0
   2004c:	20003028 	.word	0x20003028
   20050:	2000302c 	.word	0x2000302c
   20054:	200058b9 	.word	0x200058b9
   20058:	20003030 	.word	0x20003030

0002005c <nfc_t2t_lib_al_parameter_set.part.0>:
   2005c:	b570      	push	{r4, r5, r6, lr}
   2005e:	460a      	mov	r2, r1
   20060:	2a01      	cmp	r2, #1
   20062:	b086      	sub	sp, #24
   20064:	4601      	mov	r1, r0
   20066:	d04f      	beq.n	20108 <nfc_t2t_lib_al_parameter_set.part.0+0xac>
   20068:	2a0a      	cmp	r2, #10
   2006a:	d904      	bls.n	20076 <nfc_t2t_lib_al_parameter_set.part.0+0x1a>
   2006c:	f06f 0415 	mvn.w	r4, #21
   20070:	4620      	mov	r0, r4
   20072:	b006      	add	sp, #24
   20074:	bd70      	pop	{r4, r5, r6, pc}
   20076:	f44f 6392 	mov.w	r3, #1168	; 0x490
   2007a:	40d3      	lsrs	r3, r2
   2007c:	07db      	lsls	r3, r3, #31
   2007e:	d5f5      	bpl.n	2006c <nfc_t2t_lib_al_parameter_set.part.0+0x10>
   20080:	4e37      	ldr	r6, [pc, #220]	; (20160 <nfc_t2t_lib_al_parameter_set.part.0+0x104>)
   20082:	4838      	ldr	r0, [pc, #224]	; (20164 <nfc_t2t_lib_al_parameter_set.part.0+0x108>)
   20084:	7032      	strb	r2, [r6, #0]
   20086:	f003 fa6f 	bl	23568 <memcpy>
   2008a:	7833      	ldrb	r3, [r6, #0]
   2008c:	4d35      	ldr	r5, [pc, #212]	; (20164 <nfc_t2t_lib_al_parameter_set.part.0+0x108>)
   2008e:	f88d 3014 	strb.w	r3, [sp, #20]
   20092:	2203      	movs	r2, #3
   20094:	a803      	add	r0, sp, #12
   20096:	f88d 200c 	strb.w	r2, [sp, #12]
   2009a:	9504      	str	r5, [sp, #16]
   2009c:	f7fb fe0c 	bl	1bcb8 <nrfx_nfct_parameter_set>
   200a0:	f7f2 f9bc 	bl	1241c <nfc_nrfx_error_to_nfc>
   200a4:	4604      	mov	r4, r0
   200a6:	2800      	cmp	r0, #0
   200a8:	d1e2      	bne.n	20070 <nfc_t2t_lib_al_parameter_set.part.0+0x14>
   200aa:	7831      	ldrb	r1, [r6, #0]
   200ac:	290a      	cmp	r1, #10
   200ae:	d053      	beq.n	20158 <nfc_t2t_lib_al_parameter_set.part.0+0xfc>
   200b0:	2907      	cmp	r1, #7
   200b2:	d13f      	bne.n	20134 <nfc_t2t_lib_al_parameter_set.part.0+0xd8>
   200b4:	78aa      	ldrb	r2, [r5, #2]
   200b6:	782b      	ldrb	r3, [r5, #0]
   200b8:	7869      	ldrb	r1, [r5, #1]
   200ba:	f88d 3000 	strb.w	r3, [sp]
   200be:	4053      	eors	r3, r2
   200c0:	404b      	eors	r3, r1
   200c2:	f083 0388 	eor.w	r3, r3, #136	; 0x88
   200c6:	f88d 3003 	strb.w	r3, [sp, #3]
   200ca:	f88d 1001 	strb.w	r1, [sp, #1]
   200ce:	78eb      	ldrb	r3, [r5, #3]
   200d0:	7929      	ldrb	r1, [r5, #4]
   200d2:	f88d 2002 	strb.w	r2, [sp, #2]
   200d6:	796a      	ldrb	r2, [r5, #5]
   200d8:	79a8      	ldrb	r0, [r5, #6]
   200da:	f88d 3004 	strb.w	r3, [sp, #4]
   200de:	404b      	eors	r3, r1
   200e0:	4053      	eors	r3, r2
   200e2:	4043      	eors	r3, r0
   200e4:	f88d 1005 	strb.w	r1, [sp, #5]
   200e8:	21ff      	movs	r1, #255	; 0xff
   200ea:	f88d 0007 	strb.w	r0, [sp, #7]
   200ee:	f88d 2006 	strb.w	r2, [sp, #6]
   200f2:	f88d 3008 	strb.w	r3, [sp, #8]
   200f6:	f88d 1009 	strb.w	r1, [sp, #9]
   200fa:	210a      	movs	r1, #10
   200fc:	4668      	mov	r0, sp
   200fe:	f7ff ff09 	bl	1ff14 <nfc_t2t_internal_set>
   20102:	4620      	mov	r0, r4
   20104:	b006      	add	sp, #24
   20106:	bd70      	pop	{r4, r5, r6, pc}
   20108:	7803      	ldrb	r3, [r0, #0]
   2010a:	2b0a      	cmp	r3, #10
   2010c:	d8ae      	bhi.n	2006c <nfc_t2t_lib_al_parameter_set.part.0+0x10>
   2010e:	f44f 6292 	mov.w	r2, #1168	; 0x490
   20112:	40da      	lsrs	r2, r3
   20114:	07d2      	lsls	r2, r2, #31
   20116:	d5a9      	bpl.n	2006c <nfc_t2t_lib_al_parameter_set.part.0+0x10>
   20118:	4e11      	ldr	r6, [pc, #68]	; (20160 <nfc_t2t_lib_al_parameter_set.part.0+0x104>)
   2011a:	4812      	ldr	r0, [pc, #72]	; (20164 <nfc_t2t_lib_al_parameter_set.part.0+0x108>)
   2011c:	7033      	strb	r3, [r6, #0]
   2011e:	210a      	movs	r1, #10
   20120:	f7fa fe40 	bl	1ada4 <nfc_platform_nfcid1_default_bytes_get>
   20124:	f7f2 f97a 	bl	1241c <nfc_nrfx_error_to_nfc>
   20128:	4604      	mov	r4, r0
   2012a:	2800      	cmp	r0, #0
   2012c:	d0ad      	beq.n	2008a <nfc_t2t_lib_al_parameter_set.part.0+0x2e>
   2012e:	4620      	mov	r0, r4
   20130:	b006      	add	sp, #24
   20132:	bd70      	pop	{r4, r5, r6, pc}
   20134:	786b      	ldrb	r3, [r5, #1]
   20136:	782a      	ldrb	r2, [r5, #0]
   20138:	6828      	ldr	r0, [r5, #0]
   2013a:	9000      	str	r0, [sp, #0]
   2013c:	405a      	eors	r2, r3
   2013e:	78ab      	ldrb	r3, [r5, #2]
   20140:	405a      	eors	r2, r3
   20142:	78eb      	ldrb	r3, [r5, #3]
   20144:	4053      	eors	r3, r2
   20146:	2205      	movs	r2, #5
   20148:	21ff      	movs	r1, #255	; 0xff
   2014a:	eb0d 0002 	add.w	r0, sp, r2
   2014e:	f88d 3004 	strb.w	r3, [sp, #4]
   20152:	f003 fa14 	bl	2357e <memset>
   20156:	e7d0      	b.n	200fa <nfc_t2t_lib_al_parameter_set.part.0+0x9e>
   20158:	4628      	mov	r0, r5
   2015a:	f7ff fedb 	bl	1ff14 <nfc_t2t_internal_set>
   2015e:	e787      	b.n	20070 <nfc_t2t_lib_al_parameter_set.part.0+0x14>
   20160:	200058b8 	.word	0x200058b8
   20164:	20003040 	.word	0x20003040

00020168 <nfc_t2t_lib_al_setup>:
   20168:	b530      	push	{r4, r5, lr}
   2016a:	4b12      	ldr	r3, [pc, #72]	; (201b4 <nfc_t2t_lib_al_setup+0x4c>)
   2016c:	4a12      	ldr	r2, [pc, #72]	; (201b8 <nfc_t2t_lib_al_setup+0x50>)
   2016e:	4604      	mov	r4, r0
   20170:	6014      	str	r4, [r2, #0]
   20172:	460d      	mov	r5, r1
   20174:	4a11      	ldr	r2, [pc, #68]	; (201bc <nfc_t2t_lib_al_setup+0x54>)
   20176:	e893 0003 	ldmia.w	r3, {r0, r1}
   2017a:	4b11      	ldr	r3, [pc, #68]	; (201c0 <nfc_t2t_lib_al_setup+0x58>)
   2017c:	6015      	str	r5, [r2, #0]
   2017e:	b083      	sub	sp, #12
   20180:	781a      	ldrb	r2, [r3, #0]
   20182:	466c      	mov	r4, sp
   20184:	e884 0003 	stmia.w	r4, {r0, r1}
   20188:	b932      	cbnz	r2, 20198 <nfc_t2t_lib_al_setup+0x30>
   2018a:	2207      	movs	r2, #7
   2018c:	2101      	movs	r1, #1
   2018e:	4618      	mov	r0, r3
   20190:	701a      	strb	r2, [r3, #0]
   20192:	f7ff ff63 	bl	2005c <nfc_t2t_lib_al_parameter_set.part.0>
   20196:	b920      	cbnz	r0, 201a2 <nfc_t2t_lib_al_setup+0x3a>
   20198:	f7fa fde0 	bl	1ad5c <nfc_platform_setup>
   2019c:	f7f2 f93e 	bl	1241c <nfc_nrfx_error_to_nfc>
   201a0:	b108      	cbz	r0, 201a6 <nfc_t2t_lib_al_setup+0x3e>
   201a2:	b003      	add	sp, #12
   201a4:	bd30      	pop	{r4, r5, pc}
   201a6:	4620      	mov	r0, r4
   201a8:	f7fb fbd4 	bl	1b954 <nrfx_nfct_init>
   201ac:	f7f2 f936 	bl	1241c <nfc_nrfx_error_to_nfc>
   201b0:	b003      	add	sp, #12
   201b2:	bd30      	pop	{r4, r5, pc}
   201b4:	00025aa4 	.word	0x00025aa4
   201b8:	20003028 	.word	0x20003028
   201bc:	2000302c 	.word	0x2000302c
   201c0:	200058b8 	.word	0x200058b8

000201c4 <nfc_t2t_lib_al_start>:
   201c4:	f7fb bc2a 	b.w	1ba1c <nrfx_nfct_enable>

000201c8 <nfc_t2t_lib_al_send>:
   201c8:	b500      	push	{lr}
   201ca:	b083      	sub	sp, #12
   201cc:	4603      	mov	r3, r0
   201ce:	460a      	mov	r2, r1
   201d0:	4668      	mov	r0, sp
   201d2:	2103      	movs	r1, #3
   201d4:	e9cd 2300 	strd	r2, r3, [sp]
   201d8:	f7fb fcde 	bl	1bb98 <nrfx_nfct_tx>
   201dc:	f7f2 f91e 	bl	1241c <nfc_nrfx_error_to_nfc>
   201e0:	b003      	add	sp, #12
   201e2:	f85d fb04 	ldr.w	pc, [sp], #4
   201e6:	bf00      	nop

000201e8 <nrf_cc3xx_platform_init>:
   201e8:	b510      	push	{r4, lr}
   201ea:	4c0c      	ldr	r4, [pc, #48]	; (2021c <nrf_cc3xx_platform_init+0x34>)
   201ec:	6823      	ldr	r3, [r4, #0]
   201ee:	b113      	cbz	r3, 201f6 <nrf_cc3xx_platform_init+0xe>
   201f0:	4b0b      	ldr	r3, [pc, #44]	; (20220 <nrf_cc3xx_platform_init+0x38>)
   201f2:	681b      	ldr	r3, [r3, #0]
   201f4:	b92b      	cbnz	r3, 20202 <nrf_cc3xx_platform_init+0x1a>
   201f6:	f000 fe99 	bl	20f2c <CC_LibInit>
   201fa:	b930      	cbnz	r0, 2020a <nrf_cc3xx_platform_init+0x22>
   201fc:	4b08      	ldr	r3, [pc, #32]	; (20220 <nrf_cc3xx_platform_init+0x38>)
   201fe:	2201      	movs	r2, #1
   20200:	601a      	str	r2, [r3, #0]
   20202:	2301      	movs	r3, #1
   20204:	6023      	str	r3, [r4, #0]
   20206:	2000      	movs	r0, #0
   20208:	bd10      	pop	{r4, pc}
   2020a:	3801      	subs	r0, #1
   2020c:	2806      	cmp	r0, #6
   2020e:	d901      	bls.n	20214 <nrf_cc3xx_platform_init+0x2c>
   20210:	4804      	ldr	r0, [pc, #16]	; (20224 <nrf_cc3xx_platform_init+0x3c>)
   20212:	bd10      	pop	{r4, pc}
   20214:	4b04      	ldr	r3, [pc, #16]	; (20228 <nrf_cc3xx_platform_init+0x40>)
   20216:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2021a:	bd10      	pop	{r4, pc}
   2021c:	2000304c 	.word	0x2000304c
   20220:	20003050 	.word	0x20003050
   20224:	ffff8ffe 	.word	0xffff8ffe
   20228:	000261d8 	.word	0x000261d8

0002022c <nrf_cc3xx_platform_abort>:
   2022c:	f3bf 8f4f 	dsb	sy
   20230:	4905      	ldr	r1, [pc, #20]	; (20248 <nrf_cc3xx_platform_abort+0x1c>)
   20232:	4b06      	ldr	r3, [pc, #24]	; (2024c <nrf_cc3xx_platform_abort+0x20>)
   20234:	68ca      	ldr	r2, [r1, #12]
   20236:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2023a:	4313      	orrs	r3, r2
   2023c:	60cb      	str	r3, [r1, #12]
   2023e:	f3bf 8f4f 	dsb	sy
   20242:	bf00      	nop
   20244:	e7fd      	b.n	20242 <nrf_cc3xx_platform_abort+0x16>
   20246:	bf00      	nop
   20248:	e000ed00 	.word	0xe000ed00
   2024c:	05fa0004 	.word	0x05fa0004

00020250 <CC_PalAbort>:
   20250:	b410      	push	{r4}
   20252:	4b09      	ldr	r3, [pc, #36]	; (20278 <CC_PalAbort+0x28>)
   20254:	4909      	ldr	r1, [pc, #36]	; (2027c <CC_PalAbort+0x2c>)
   20256:	4c0a      	ldr	r4, [pc, #40]	; (20280 <CC_PalAbort+0x30>)
   20258:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   2025c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   20260:	6849      	ldr	r1, [r1, #4]
   20262:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   20266:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2026a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2026e:	2300      	movs	r3, #0
   20270:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   20274:	bc10      	pop	{r4}
   20276:	4708      	bx	r1
   20278:	5002b000 	.word	0x5002b000
   2027c:	20000838 	.word	0x20000838
   20280:	5002a000 	.word	0x5002a000

00020284 <nrf_cc3xx_platform_set_abort>:
   20284:	e9d0 1200 	ldrd	r1, r2, [r0]
   20288:	4b01      	ldr	r3, [pc, #4]	; (20290 <nrf_cc3xx_platform_set_abort+0xc>)
   2028a:	e9c3 1200 	strd	r1, r2, [r3]
   2028e:	4770      	bx	lr
   20290:	20000838 	.word	0x20000838

00020294 <nrf_cc3xx_platform_ctr_drbg_init>:
   20294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20298:	4c14      	ldr	r4, [pc, #80]	; (202ec <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   2029a:	4e15      	ldr	r6, [pc, #84]	; (202f0 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   2029c:	2800      	cmp	r0, #0
   2029e:	bf18      	it	ne
   202a0:	4604      	movne	r4, r0
   202a2:	b083      	sub	sp, #12
   202a4:	6823      	ldr	r3, [r4, #0]
   202a6:	42b3      	cmp	r3, r6
   202a8:	d01c      	beq.n	202e4 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   202aa:	460d      	mov	r5, r1
   202ac:	4620      	mov	r0, r4
   202ae:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   202b2:	f104 0904 	add.w	r9, r4, #4
   202b6:	4617      	mov	r7, r2
   202b8:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   202bc:	f000 f8e8 	bl	20490 <mbedtls_platform_zeroize>
   202c0:	4648      	mov	r0, r9
   202c2:	f000 fd1d 	bl	20d00 <cc_mbedtls_entropy_init>
   202c6:	4640      	mov	r0, r8
   202c8:	f000 fb4a 	bl	20960 <cc_mbedtls_ctr_drbg_init>
   202cc:	4909      	ldr	r1, [pc, #36]	; (202f4 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   202ce:	9700      	str	r7, [sp, #0]
   202d0:	462b      	mov	r3, r5
   202d2:	464a      	mov	r2, r9
   202d4:	4640      	mov	r0, r8
   202d6:	f000 fb59 	bl	2098c <cc_mbedtls_ctr_drbg_seed>
   202da:	b900      	cbnz	r0, 202de <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   202dc:	6026      	str	r6, [r4, #0]
   202de:	b003      	add	sp, #12
   202e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   202e4:	2000      	movs	r0, #0
   202e6:	b003      	add	sp, #12
   202e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   202ec:	20003054 	.word	0x20003054
   202f0:	5ac9bca5 	.word	0x5ac9bca5
   202f4:	00020d89 	.word	0x00020d89

000202f8 <nrf_cc3xx_platform_ctr_drbg_get>:
   202f8:	b570      	push	{r4, r5, r6, lr}
   202fa:	4d0d      	ldr	r5, [pc, #52]	; (20330 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   202fc:	2800      	cmp	r0, #0
   202fe:	bf18      	it	ne
   20300:	4605      	movne	r5, r0
   20302:	461e      	mov	r6, r3
   20304:	6828      	ldr	r0, [r5, #0]
   20306:	4b0b      	ldr	r3, [pc, #44]	; (20334 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   20308:	4298      	cmp	r0, r3
   2030a:	b082      	sub	sp, #8
   2030c:	d10d      	bne.n	2032a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   2030e:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   20312:	2500      	movs	r5, #0
   20314:	9500      	str	r5, [sp, #0]
   20316:	462b      	mov	r3, r5
   20318:	4614      	mov	r4, r2
   2031a:	f000 fb85 	bl	20a28 <cc_mbedtls_ctr_drbg_random_with_add>
   2031e:	2800      	cmp	r0, #0
   20320:	bf18      	it	ne
   20322:	462c      	movne	r4, r5
   20324:	6034      	str	r4, [r6, #0]
   20326:	b002      	add	sp, #8
   20328:	bd70      	pop	{r4, r5, r6, pc}
   2032a:	4803      	ldr	r0, [pc, #12]	; (20338 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   2032c:	e7fb      	b.n	20326 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   2032e:	bf00      	nop
   20330:	20003054 	.word	0x20003054
   20334:	5ac9bca5 	.word	0x5ac9bca5
   20338:	ffff8fe8 	.word	0xffff8fe8

0002033c <mutex_free>:
   2033c:	b510      	push	{r4, lr}
   2033e:	4604      	mov	r4, r0
   20340:	b150      	cbz	r0, 20358 <mutex_free+0x1c>
   20342:	6863      	ldr	r3, [r4, #4]
   20344:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   20348:	d005      	beq.n	20356 <mutex_free+0x1a>
   2034a:	4a06      	ldr	r2, [pc, #24]	; (20364 <mutex_free+0x28>)
   2034c:	4293      	cmp	r3, r2
   2034e:	d002      	beq.n	20356 <mutex_free+0x1a>
   20350:	2300      	movs	r3, #0
   20352:	6023      	str	r3, [r4, #0]
   20354:	6062      	str	r2, [r4, #4]
   20356:	bd10      	pop	{r4, pc}
   20358:	4b03      	ldr	r3, [pc, #12]	; (20368 <mutex_free+0x2c>)
   2035a:	4804      	ldr	r0, [pc, #16]	; (2036c <mutex_free+0x30>)
   2035c:	685b      	ldr	r3, [r3, #4]
   2035e:	4798      	blx	r3
   20360:	e7ef      	b.n	20342 <mutex_free+0x6>
   20362:	bf00      	nop
   20364:	a95c5f2c 	.word	0xa95c5f2c
   20368:	20000838 	.word	0x20000838
   2036c:	000261f4 	.word	0x000261f4

00020370 <mutex_lock>:
   20370:	b1c8      	cbz	r0, 203a6 <mutex_lock+0x36>
   20372:	6843      	ldr	r3, [r0, #4]
   20374:	4a0d      	ldr	r2, [pc, #52]	; (203ac <mutex_lock+0x3c>)
   20376:	4293      	cmp	r3, r2
   20378:	d013      	beq.n	203a2 <mutex_lock+0x32>
   2037a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   2037e:	d00e      	beq.n	2039e <mutex_lock+0x2e>
   20380:	2301      	movs	r3, #1
   20382:	e850 2f00 	ldrex	r2, [r0]
   20386:	4619      	mov	r1, r3
   20388:	e840 1c00 	strex	ip, r1, [r0]
   2038c:	f09c 0f00 	teq	ip, #0
   20390:	d1f7      	bne.n	20382 <mutex_lock+0x12>
   20392:	2a01      	cmp	r2, #1
   20394:	d0f5      	beq.n	20382 <mutex_lock+0x12>
   20396:	f3bf 8f5f 	dmb	sy
   2039a:	2000      	movs	r0, #0
   2039c:	4770      	bx	lr
   2039e:	4804      	ldr	r0, [pc, #16]	; (203b0 <mutex_lock+0x40>)
   203a0:	4770      	bx	lr
   203a2:	4804      	ldr	r0, [pc, #16]	; (203b4 <mutex_lock+0x44>)
   203a4:	4770      	bx	lr
   203a6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   203aa:	4770      	bx	lr
   203ac:	a95c5f2c 	.word	0xa95c5f2c
   203b0:	ffff8fe9 	.word	0xffff8fe9
   203b4:	ffff8fea 	.word	0xffff8fea

000203b8 <mutex_unlock>:
   203b8:	b180      	cbz	r0, 203dc <mutex_unlock+0x24>
   203ba:	6843      	ldr	r3, [r0, #4]
   203bc:	4a09      	ldr	r2, [pc, #36]	; (203e4 <mutex_unlock+0x2c>)
   203be:	4293      	cmp	r3, r2
   203c0:	d00a      	beq.n	203d8 <mutex_unlock+0x20>
   203c2:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   203c6:	d005      	beq.n	203d4 <mutex_unlock+0x1c>
   203c8:	f3bf 8f5f 	dmb	sy
   203cc:	2300      	movs	r3, #0
   203ce:	6003      	str	r3, [r0, #0]
   203d0:	4618      	mov	r0, r3
   203d2:	4770      	bx	lr
   203d4:	4804      	ldr	r0, [pc, #16]	; (203e8 <mutex_unlock+0x30>)
   203d6:	4770      	bx	lr
   203d8:	4804      	ldr	r0, [pc, #16]	; (203ec <mutex_unlock+0x34>)
   203da:	4770      	bx	lr
   203dc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   203e0:	4770      	bx	lr
   203e2:	bf00      	nop
   203e4:	a95c5f2c 	.word	0xa95c5f2c
   203e8:	ffff8fe9 	.word	0xffff8fe9
   203ec:	ffff8fea 	.word	0xffff8fea

000203f0 <mutex_init>:
   203f0:	b510      	push	{r4, lr}
   203f2:	4604      	mov	r4, r0
   203f4:	b120      	cbz	r0, 20400 <mutex_init+0x10>
   203f6:	4b04      	ldr	r3, [pc, #16]	; (20408 <mutex_init+0x18>)
   203f8:	6063      	str	r3, [r4, #4]
   203fa:	2200      	movs	r2, #0
   203fc:	6022      	str	r2, [r4, #0]
   203fe:	bd10      	pop	{r4, pc}
   20400:	4802      	ldr	r0, [pc, #8]	; (2040c <mutex_init+0x1c>)
   20402:	f7ff ff25 	bl	20250 <CC_PalAbort>
   20406:	e7f6      	b.n	203f6 <mutex_init+0x6>
   20408:	3a00003a 	.word	0x3a00003a
   2040c:	0002621c 	.word	0x0002621c

00020410 <nrf_cc3xx_platform_set_mutexes>:
   20410:	b570      	push	{r4, r5, r6, lr}
   20412:	e9d0 2300 	ldrd	r2, r3, [r0]
   20416:	4c15      	ldr	r4, [pc, #84]	; (2046c <nrf_cc3xx_platform_set_mutexes+0x5c>)
   20418:	4d15      	ldr	r5, [pc, #84]	; (20470 <nrf_cc3xx_platform_set_mutexes+0x60>)
   2041a:	6063      	str	r3, [r4, #4]
   2041c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   20420:	e9c4 3002 	strd	r3, r0, [r4, #8]
   20424:	6022      	str	r2, [r4, #0]
   20426:	4b13      	ldr	r3, [pc, #76]	; (20474 <nrf_cc3xx_platform_set_mutexes+0x64>)
   20428:	6808      	ldr	r0, [r1, #0]
   2042a:	6018      	str	r0, [r3, #0]
   2042c:	6848      	ldr	r0, [r1, #4]
   2042e:	6058      	str	r0, [r3, #4]
   20430:	6888      	ldr	r0, [r1, #8]
   20432:	6098      	str	r0, [r3, #8]
   20434:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   20438:	60d8      	str	r0, [r3, #12]
   2043a:	6119      	str	r1, [r3, #16]
   2043c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   20440:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   20444:	d010      	beq.n	20468 <nrf_cc3xx_platform_set_mutexes+0x58>
   20446:	490c      	ldr	r1, [pc, #48]	; (20478 <nrf_cc3xx_platform_set_mutexes+0x68>)
   20448:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   2044c:	2300      	movs	r3, #0
   2044e:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   20452:	f505 708a 	add.w	r0, r5, #276	; 0x114
   20456:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   2045a:	4790      	blx	r2
   2045c:	6823      	ldr	r3, [r4, #0]
   2045e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   20462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20466:	4718      	bx	r3
   20468:	bd70      	pop	{r4, r5, r6, pc}
   2046a:	bf00      	nop
   2046c:	20000848 	.word	0x20000848
   20470:	20003054 	.word	0x20003054
   20474:	20000858 	.word	0x20000858
   20478:	a95c5f2c 	.word	0xa95c5f2c

0002047c <mbedtls_zeroize_internal>:
   2047c:	b138      	cbz	r0, 2048e <mbedtls_zeroize_internal+0x12>
   2047e:	b131      	cbz	r1, 2048e <mbedtls_zeroize_internal+0x12>
   20480:	4401      	add	r1, r0
   20482:	2200      	movs	r2, #0
   20484:	4603      	mov	r3, r0
   20486:	3001      	adds	r0, #1
   20488:	4281      	cmp	r1, r0
   2048a:	701a      	strb	r2, [r3, #0]
   2048c:	d1fa      	bne.n	20484 <mbedtls_zeroize_internal+0x8>
   2048e:	4770      	bx	lr

00020490 <mbedtls_platform_zeroize>:
   20490:	b138      	cbz	r0, 204a2 <mbedtls_platform_zeroize+0x12>
   20492:	b131      	cbz	r1, 204a2 <mbedtls_platform_zeroize+0x12>
   20494:	4401      	add	r1, r0
   20496:	2200      	movs	r2, #0
   20498:	4603      	mov	r3, r0
   2049a:	3001      	adds	r0, #1
   2049c:	4288      	cmp	r0, r1
   2049e:	701a      	strb	r2, [r3, #0]
   204a0:	d1fa      	bne.n	20498 <mbedtls_platform_zeroize+0x8>
   204a2:	4770      	bx	lr

000204a4 <block_cipher_df>:
   204a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204a8:	b0b7      	sub	sp, #220	; 0xdc
   204aa:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   204ae:	9005      	str	r0, [sp, #20]
   204b0:	f200 8147 	bhi.w	20742 <block_cipher_df+0x29e>
   204b4:	4614      	mov	r4, r2
   204b6:	460d      	mov	r5, r1
   204b8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   204bc:	2100      	movs	r1, #0
   204be:	48a2      	ldr	r0, [pc, #648]	; (20748 <block_cipher_df+0x2a4>)
   204c0:	f003 f85d 	bl	2357e <memset>
   204c4:	a819      	add	r0, sp, #100	; 0x64
   204c6:	f001 f9cf 	bl	21868 <cc_mbedtls_aes_init>
   204ca:	489f      	ldr	r0, [pc, #636]	; (20748 <block_cipher_df+0x2a4>)
   204cc:	2300      	movs	r3, #0
   204ce:	8203      	strh	r3, [r0, #16]
   204d0:	ba63      	rev16	r3, r4
   204d2:	8243      	strh	r3, [r0, #18]
   204d4:	2320      	movs	r3, #32
   204d6:	4629      	mov	r1, r5
   204d8:	75c3      	strb	r3, [r0, #23]
   204da:	4605      	mov	r5, r0
   204dc:	4622      	mov	r2, r4
   204de:	3018      	adds	r0, #24
   204e0:	f003 f842 	bl	23568 <memcpy>
   204e4:	462b      	mov	r3, r5
   204e6:	4423      	add	r3, r4
   204e8:	2280      	movs	r2, #128	; 0x80
   204ea:	761a      	strb	r2, [r3, #24]
   204ec:	4b97      	ldr	r3, [pc, #604]	; (2074c <block_cipher_df+0x2a8>)
   204ee:	930d      	str	r3, [sp, #52]	; 0x34
   204f0:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   204f4:	930e      	str	r3, [sp, #56]	; 0x38
   204f6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   204fa:	930f      	str	r3, [sp, #60]	; 0x3c
   204fc:	a90d      	add	r1, sp, #52	; 0x34
   204fe:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   20502:	a819      	add	r0, sp, #100	; 0x64
   20504:	9310      	str	r3, [sp, #64]	; 0x40
   20506:	f001 f9c5 	bl	21894 <cc_mbedtls_aes_setkey_enc>
   2050a:	4605      	mov	r5, r0
   2050c:	2800      	cmp	r0, #0
   2050e:	f040 80f4 	bne.w	206fa <block_cipher_df+0x256>
   20512:	f104 0319 	add.w	r3, r4, #25
   20516:	9306      	str	r3, [sp, #24]
   20518:	f10d 0820 	add.w	r8, sp, #32
   2051c:	ab11      	add	r3, sp, #68	; 0x44
   2051e:	9304      	str	r3, [sp, #16]
   20520:	9307      	str	r3, [sp, #28]
   20522:	46c1      	mov	r9, r8
   20524:	2210      	movs	r2, #16
   20526:	2100      	movs	r1, #0
   20528:	4648      	mov	r0, r9
   2052a:	f003 f828 	bl	2357e <memset>
   2052e:	f8df a220 	ldr.w	sl, [pc, #544]	; 20750 <block_cipher_df+0x2ac>
   20532:	9b06      	ldr	r3, [sp, #24]
   20534:	9300      	str	r3, [sp, #0]
   20536:	f8cd 900c 	str.w	r9, [sp, #12]
   2053a:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   2053e:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   20542:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   20546:	f89d 5020 	ldrb.w	r5, [sp, #32]
   2054a:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   2054e:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   20552:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   20556:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   2055a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   2055e:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   20562:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   20566:	406a      	eors	r2, r5
   20568:	ea8e 0e00 	eor.w	lr, lr, r0
   2056c:	9d00      	ldr	r5, [sp, #0]
   2056e:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   20572:	9202      	str	r2, [sp, #8]
   20574:	ea8c 0c03 	eor.w	ip, ip, r3
   20578:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   2057c:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   20580:	2d10      	cmp	r5, #16
   20582:	ea80 0003 	eor.w	r0, r0, r3
   20586:	462b      	mov	r3, r5
   20588:	bf8c      	ite	hi
   2058a:	3b10      	subhi	r3, #16
   2058c:	1b6b      	subls	r3, r5, r5
   2058e:	9300      	str	r3, [sp, #0]
   20590:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   20594:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   20598:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   2059c:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   205a0:	4061      	eors	r1, r4
   205a2:	405f      	eors	r7, r3
   205a4:	2400      	movs	r4, #0
   205a6:	406a      	eors	r2, r5
   205a8:	ea8b 0b06 	eor.w	fp, fp, r6
   205ac:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   205b0:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   205b4:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   205b8:	9601      	str	r6, [sp, #4]
   205ba:	4626      	mov	r6, r4
   205bc:	406b      	eors	r3, r5
   205be:	f36b 0607 	bfi	r6, fp, #0, #8
   205c2:	4625      	mov	r5, r4
   205c4:	f367 260f 	bfi	r6, r7, #8, #8
   205c8:	462f      	mov	r7, r5
   205ca:	f361 0707 	bfi	r7, r1, #0, #8
   205ce:	9902      	ldr	r1, [sp, #8]
   205d0:	f361 0507 	bfi	r5, r1, #0, #8
   205d4:	f362 250f 	bfi	r5, r2, #8, #8
   205d8:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   205dc:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   205e0:	f363 270f 	bfi	r7, r3, #8, #8
   205e4:	ea82 0909 	eor.w	r9, r2, r9
   205e8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   205ec:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   205f0:	ea83 0808 	eor.w	r8, r3, r8
   205f4:	404a      	eors	r2, r1
   205f6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   205fa:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   205fe:	f36e 0407 	bfi	r4, lr, #0, #8
   20602:	404b      	eors	r3, r1
   20604:	f368 4717 	bfi	r7, r8, #16, #8
   20608:	f36c 240f 	bfi	r4, ip, #8, #8
   2060c:	f363 671f 	bfi	r7, r3, #24, #8
   20610:	9b03      	ldr	r3, [sp, #12]
   20612:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   20616:	f8dd e004 	ldr.w	lr, [sp, #4]
   2061a:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   2061e:	ea8c 0c0e 	eor.w	ip, ip, lr
   20622:	f36c 4617 	bfi	r6, ip, #16, #8
   20626:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   2062a:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   2062e:	ea8c 0c08 	eor.w	ip, ip, r8
   20632:	f36c 661f 	bfi	r6, ip, #24, #8
   20636:	f369 4517 	bfi	r5, r9, #16, #8
   2063a:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   2063e:	960b      	str	r6, [sp, #44]	; 0x2c
   20640:	f362 651f 	bfi	r5, r2, #24, #8
   20644:	f360 4417 	bfi	r4, r0, #16, #8
   20648:	9508      	str	r5, [sp, #32]
   2064a:	ea8c 050e 	eor.w	r5, ip, lr
   2064e:	f365 641f 	bfi	r4, r5, #24, #8
   20652:	461a      	mov	r2, r3
   20654:	2101      	movs	r1, #1
   20656:	a819      	add	r0, sp, #100	; 0x64
   20658:	f10a 0a10 	add.w	sl, sl, #16
   2065c:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   20660:	f001 f932 	bl	218c8 <cc_mbedtls_aes_crypt_ecb>
   20664:	2800      	cmp	r0, #0
   20666:	d168      	bne.n	2073a <block_cipher_df+0x296>
   20668:	9b00      	ldr	r3, [sp, #0]
   2066a:	2b00      	cmp	r3, #0
   2066c:	f47f af65 	bne.w	2053a <block_cipher_df+0x96>
   20670:	9c07      	ldr	r4, [sp, #28]
   20672:	f8dd 900c 	ldr.w	r9, [sp, #12]
   20676:	4620      	mov	r0, r4
   20678:	2210      	movs	r2, #16
   2067a:	3410      	adds	r4, #16
   2067c:	4649      	mov	r1, r9
   2067e:	9407      	str	r4, [sp, #28]
   20680:	f002 ff72 	bl	23568 <memcpy>
   20684:	4a30      	ldr	r2, [pc, #192]	; (20748 <block_cipher_df+0x2a4>)
   20686:	78d3      	ldrb	r3, [r2, #3]
   20688:	3301      	adds	r3, #1
   2068a:	70d3      	strb	r3, [r2, #3]
   2068c:	ab19      	add	r3, sp, #100	; 0x64
   2068e:	429c      	cmp	r4, r3
   20690:	f47f af48 	bne.w	20524 <block_cipher_df+0x80>
   20694:	9904      	ldr	r1, [sp, #16]
   20696:	2280      	movs	r2, #128	; 0x80
   20698:	4618      	mov	r0, r3
   2069a:	f001 f8fb 	bl	21894 <cc_mbedtls_aes_setkey_enc>
   2069e:	46c8      	mov	r8, r9
   206a0:	4605      	mov	r5, r0
   206a2:	bb70      	cbnz	r0, 20702 <block_cipher_df+0x25e>
   206a4:	9c05      	ldr	r4, [sp, #20]
   206a6:	f104 0620 	add.w	r6, r4, #32
   206aa:	ab15      	add	r3, sp, #84	; 0x54
   206ac:	461a      	mov	r2, r3
   206ae:	2101      	movs	r1, #1
   206b0:	a819      	add	r0, sp, #100	; 0x64
   206b2:	f001 f909 	bl	218c8 <cc_mbedtls_aes_crypt_ecb>
   206b6:	2210      	movs	r2, #16
   206b8:	4605      	mov	r5, r0
   206ba:	bb10      	cbnz	r0, 20702 <block_cipher_df+0x25e>
   206bc:	4620      	mov	r0, r4
   206be:	a915      	add	r1, sp, #84	; 0x54
   206c0:	3410      	adds	r4, #16
   206c2:	f002 ff51 	bl	23568 <memcpy>
   206c6:	42b4      	cmp	r4, r6
   206c8:	d1ef      	bne.n	206aa <block_cipher_df+0x206>
   206ca:	a819      	add	r0, sp, #100	; 0x64
   206cc:	f001 f8dc 	bl	21888 <cc_mbedtls_aes_free>
   206d0:	481d      	ldr	r0, [pc, #116]	; (20748 <block_cipher_df+0x2a4>)
   206d2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   206d6:	f7ff fedb 	bl	20490 <mbedtls_platform_zeroize>
   206da:	9804      	ldr	r0, [sp, #16]
   206dc:	2120      	movs	r1, #32
   206de:	f7ff fed7 	bl	20490 <mbedtls_platform_zeroize>
   206e2:	a80d      	add	r0, sp, #52	; 0x34
   206e4:	2110      	movs	r1, #16
   206e6:	f7ff fed3 	bl	20490 <mbedtls_platform_zeroize>
   206ea:	4640      	mov	r0, r8
   206ec:	2110      	movs	r1, #16
   206ee:	f7ff fecf 	bl	20490 <mbedtls_platform_zeroize>
   206f2:	4628      	mov	r0, r5
   206f4:	b037      	add	sp, #220	; 0xdc
   206f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206fa:	ab11      	add	r3, sp, #68	; 0x44
   206fc:	9304      	str	r3, [sp, #16]
   206fe:	f10d 0820 	add.w	r8, sp, #32
   20702:	a819      	add	r0, sp, #100	; 0x64
   20704:	f001 f8c0 	bl	21888 <cc_mbedtls_aes_free>
   20708:	480f      	ldr	r0, [pc, #60]	; (20748 <block_cipher_df+0x2a4>)
   2070a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   2070e:	f7ff febf 	bl	20490 <mbedtls_platform_zeroize>
   20712:	9804      	ldr	r0, [sp, #16]
   20714:	2120      	movs	r1, #32
   20716:	f7ff febb 	bl	20490 <mbedtls_platform_zeroize>
   2071a:	a80d      	add	r0, sp, #52	; 0x34
   2071c:	2110      	movs	r1, #16
   2071e:	f7ff feb7 	bl	20490 <mbedtls_platform_zeroize>
   20722:	4640      	mov	r0, r8
   20724:	2110      	movs	r1, #16
   20726:	f7ff feb3 	bl	20490 <mbedtls_platform_zeroize>
   2072a:	9805      	ldr	r0, [sp, #20]
   2072c:	2120      	movs	r1, #32
   2072e:	f7ff feaf 	bl	20490 <mbedtls_platform_zeroize>
   20732:	4628      	mov	r0, r5
   20734:	b037      	add	sp, #220	; 0xdc
   20736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2073a:	f8dd 800c 	ldr.w	r8, [sp, #12]
   2073e:	4605      	mov	r5, r0
   20740:	e7df      	b.n	20702 <block_cipher_df+0x25e>
   20742:	f06f 0537 	mvn.w	r5, #55	; 0x37
   20746:	e7f4      	b.n	20732 <block_cipher_df+0x28e>
   20748:	20003224 	.word	0x20003224
   2074c:	03020100 	.word	0x03020100
   20750:	20003234 	.word	0x20003234

00020754 <ctr_drbg_update_internal>:
   20754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20758:	b088      	sub	sp, #32
   2075a:	4604      	mov	r4, r0
   2075c:	460d      	mov	r5, r1
   2075e:	2220      	movs	r2, #32
   20760:	2100      	movs	r1, #0
   20762:	4668      	mov	r0, sp
   20764:	f002 ff0b 	bl	2357e <memset>
   20768:	f104 0620 	add.w	r6, r4, #32
   2076c:	466f      	mov	r7, sp
   2076e:	7be2      	ldrb	r2, [r4, #15]
   20770:	3201      	adds	r2, #1
   20772:	b2d2      	uxtb	r2, r2
   20774:	73e2      	strb	r2, [r4, #15]
   20776:	2a00      	cmp	r2, #0
   20778:	d14d      	bne.n	20816 <ctr_drbg_update_internal+0xc2>
   2077a:	7ba2      	ldrb	r2, [r4, #14]
   2077c:	3201      	adds	r2, #1
   2077e:	b2d2      	uxtb	r2, r2
   20780:	73a2      	strb	r2, [r4, #14]
   20782:	2a00      	cmp	r2, #0
   20784:	d147      	bne.n	20816 <ctr_drbg_update_internal+0xc2>
   20786:	7b63      	ldrb	r3, [r4, #13]
   20788:	3301      	adds	r3, #1
   2078a:	b2db      	uxtb	r3, r3
   2078c:	7363      	strb	r3, [r4, #13]
   2078e:	2b00      	cmp	r3, #0
   20790:	d141      	bne.n	20816 <ctr_drbg_update_internal+0xc2>
   20792:	7b23      	ldrb	r3, [r4, #12]
   20794:	3301      	adds	r3, #1
   20796:	b2db      	uxtb	r3, r3
   20798:	7323      	strb	r3, [r4, #12]
   2079a:	2b00      	cmp	r3, #0
   2079c:	d13b      	bne.n	20816 <ctr_drbg_update_internal+0xc2>
   2079e:	7ae3      	ldrb	r3, [r4, #11]
   207a0:	3301      	adds	r3, #1
   207a2:	b2db      	uxtb	r3, r3
   207a4:	72e3      	strb	r3, [r4, #11]
   207a6:	2b00      	cmp	r3, #0
   207a8:	d135      	bne.n	20816 <ctr_drbg_update_internal+0xc2>
   207aa:	7aa3      	ldrb	r3, [r4, #10]
   207ac:	3301      	adds	r3, #1
   207ae:	b2db      	uxtb	r3, r3
   207b0:	72a3      	strb	r3, [r4, #10]
   207b2:	2b00      	cmp	r3, #0
   207b4:	d12f      	bne.n	20816 <ctr_drbg_update_internal+0xc2>
   207b6:	7a63      	ldrb	r3, [r4, #9]
   207b8:	3301      	adds	r3, #1
   207ba:	b2db      	uxtb	r3, r3
   207bc:	7263      	strb	r3, [r4, #9]
   207be:	bb53      	cbnz	r3, 20816 <ctr_drbg_update_internal+0xc2>
   207c0:	7a23      	ldrb	r3, [r4, #8]
   207c2:	3301      	adds	r3, #1
   207c4:	b2db      	uxtb	r3, r3
   207c6:	7223      	strb	r3, [r4, #8]
   207c8:	bb2b      	cbnz	r3, 20816 <ctr_drbg_update_internal+0xc2>
   207ca:	79e3      	ldrb	r3, [r4, #7]
   207cc:	3301      	adds	r3, #1
   207ce:	b2db      	uxtb	r3, r3
   207d0:	71e3      	strb	r3, [r4, #7]
   207d2:	bb03      	cbnz	r3, 20816 <ctr_drbg_update_internal+0xc2>
   207d4:	79a3      	ldrb	r3, [r4, #6]
   207d6:	3301      	adds	r3, #1
   207d8:	b2db      	uxtb	r3, r3
   207da:	71a3      	strb	r3, [r4, #6]
   207dc:	b9db      	cbnz	r3, 20816 <ctr_drbg_update_internal+0xc2>
   207de:	7963      	ldrb	r3, [r4, #5]
   207e0:	3301      	adds	r3, #1
   207e2:	b2db      	uxtb	r3, r3
   207e4:	7163      	strb	r3, [r4, #5]
   207e6:	b9b3      	cbnz	r3, 20816 <ctr_drbg_update_internal+0xc2>
   207e8:	7923      	ldrb	r3, [r4, #4]
   207ea:	3301      	adds	r3, #1
   207ec:	b2db      	uxtb	r3, r3
   207ee:	7123      	strb	r3, [r4, #4]
   207f0:	b98b      	cbnz	r3, 20816 <ctr_drbg_update_internal+0xc2>
   207f2:	78e3      	ldrb	r3, [r4, #3]
   207f4:	3301      	adds	r3, #1
   207f6:	b2db      	uxtb	r3, r3
   207f8:	70e3      	strb	r3, [r4, #3]
   207fa:	b963      	cbnz	r3, 20816 <ctr_drbg_update_internal+0xc2>
   207fc:	78a3      	ldrb	r3, [r4, #2]
   207fe:	3301      	adds	r3, #1
   20800:	b2db      	uxtb	r3, r3
   20802:	70a3      	strb	r3, [r4, #2]
   20804:	b93b      	cbnz	r3, 20816 <ctr_drbg_update_internal+0xc2>
   20806:	7863      	ldrb	r3, [r4, #1]
   20808:	3301      	adds	r3, #1
   2080a:	b2db      	uxtb	r3, r3
   2080c:	7063      	strb	r3, [r4, #1]
   2080e:	b913      	cbnz	r3, 20816 <ctr_drbg_update_internal+0xc2>
   20810:	7823      	ldrb	r3, [r4, #0]
   20812:	3301      	adds	r3, #1
   20814:	7023      	strb	r3, [r4, #0]
   20816:	463b      	mov	r3, r7
   20818:	4622      	mov	r2, r4
   2081a:	2101      	movs	r1, #1
   2081c:	4630      	mov	r0, r6
   2081e:	f001 f853 	bl	218c8 <cc_mbedtls_aes_crypt_ecb>
   20822:	4680      	mov	r8, r0
   20824:	bb50      	cbnz	r0, 2087c <ctr_drbg_update_internal+0x128>
   20826:	3710      	adds	r7, #16
   20828:	ab08      	add	r3, sp, #32
   2082a:	429f      	cmp	r7, r3
   2082c:	d19f      	bne.n	2076e <ctr_drbg_update_internal+0x1a>
   2082e:	9a00      	ldr	r2, [sp, #0]
   20830:	682b      	ldr	r3, [r5, #0]
   20832:	9906      	ldr	r1, [sp, #24]
   20834:	4053      	eors	r3, r2
   20836:	9300      	str	r3, [sp, #0]
   20838:	9a01      	ldr	r2, [sp, #4]
   2083a:	686b      	ldr	r3, [r5, #4]
   2083c:	4053      	eors	r3, r2
   2083e:	9301      	str	r3, [sp, #4]
   20840:	9a02      	ldr	r2, [sp, #8]
   20842:	68ab      	ldr	r3, [r5, #8]
   20844:	4053      	eors	r3, r2
   20846:	9302      	str	r3, [sp, #8]
   20848:	9a03      	ldr	r2, [sp, #12]
   2084a:	68eb      	ldr	r3, [r5, #12]
   2084c:	4053      	eors	r3, r2
   2084e:	9303      	str	r3, [sp, #12]
   20850:	9a04      	ldr	r2, [sp, #16]
   20852:	692b      	ldr	r3, [r5, #16]
   20854:	4053      	eors	r3, r2
   20856:	9304      	str	r3, [sp, #16]
   20858:	9a05      	ldr	r2, [sp, #20]
   2085a:	696b      	ldr	r3, [r5, #20]
   2085c:	4053      	eors	r3, r2
   2085e:	69aa      	ldr	r2, [r5, #24]
   20860:	9305      	str	r3, [sp, #20]
   20862:	404a      	eors	r2, r1
   20864:	69eb      	ldr	r3, [r5, #28]
   20866:	9206      	str	r2, [sp, #24]
   20868:	9a07      	ldr	r2, [sp, #28]
   2086a:	4630      	mov	r0, r6
   2086c:	4053      	eors	r3, r2
   2086e:	4669      	mov	r1, sp
   20870:	2280      	movs	r2, #128	; 0x80
   20872:	9307      	str	r3, [sp, #28]
   20874:	f001 f80e 	bl	21894 <cc_mbedtls_aes_setkey_enc>
   20878:	4680      	mov	r8, r0
   2087a:	b138      	cbz	r0, 2088c <ctr_drbg_update_internal+0x138>
   2087c:	4668      	mov	r0, sp
   2087e:	2120      	movs	r1, #32
   20880:	f7ff fe06 	bl	20490 <mbedtls_platform_zeroize>
   20884:	4640      	mov	r0, r8
   20886:	b008      	add	sp, #32
   20888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2088c:	2210      	movs	r2, #16
   2088e:	eb0d 0102 	add.w	r1, sp, r2
   20892:	4620      	mov	r0, r4
   20894:	f002 fe68 	bl	23568 <memcpy>
   20898:	e7f0      	b.n	2087c <ctr_drbg_update_internal+0x128>
   2089a:	bf00      	nop

0002089c <mbedtls_ctr_drbg_reseed_internal>:
   2089c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   208a0:	4604      	mov	r4, r0
   208a2:	6980      	ldr	r0, [r0, #24]
   208a4:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   208a8:	d852      	bhi.n	20950 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   208aa:	461d      	mov	r5, r3
   208ac:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   208b0:	42ab      	cmp	r3, r5
   208b2:	d34d      	bcc.n	20950 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   208b4:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   208b8:	1a18      	subs	r0, r3, r0
   208ba:	4290      	cmp	r0, r2
   208bc:	4616      	mov	r6, r2
   208be:	d347      	bcc.n	20950 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   208c0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2095c <mbedtls_ctr_drbg_reseed_internal+0xc0>
   208c4:	f44f 72c0 	mov.w	r2, #384	; 0x180
   208c8:	460f      	mov	r7, r1
   208ca:	4648      	mov	r0, r9
   208cc:	2100      	movs	r1, #0
   208ce:	f002 fe56 	bl	2357e <memset>
   208d2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   208d6:	69a2      	ldr	r2, [r4, #24]
   208d8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   208dc:	4649      	mov	r1, r9
   208de:	4798      	blx	r3
   208e0:	2800      	cmp	r0, #0
   208e2:	d138      	bne.n	20956 <mbedtls_ctr_drbg_reseed_internal+0xba>
   208e4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   208e8:	b13d      	cbz	r5, 208fa <mbedtls_ctr_drbg_reseed_internal+0x5e>
   208ea:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   208ee:	462a      	mov	r2, r5
   208f0:	eb09 0108 	add.w	r1, r9, r8
   208f4:	4798      	blx	r3
   208f6:	bb70      	cbnz	r0, 20956 <mbedtls_ctr_drbg_reseed_internal+0xba>
   208f8:	44a8      	add	r8, r5
   208fa:	b107      	cbz	r7, 208fe <mbedtls_ctr_drbg_reseed_internal+0x62>
   208fc:	b9c6      	cbnz	r6, 20930 <mbedtls_ctr_drbg_reseed_internal+0x94>
   208fe:	4917      	ldr	r1, [pc, #92]	; (2095c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   20900:	4642      	mov	r2, r8
   20902:	4608      	mov	r0, r1
   20904:	f7ff fdce 	bl	204a4 <block_cipher_df>
   20908:	4605      	mov	r5, r0
   2090a:	b138      	cbz	r0, 2091c <mbedtls_ctr_drbg_reseed_internal+0x80>
   2090c:	4813      	ldr	r0, [pc, #76]	; (2095c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2090e:	f44f 71c0 	mov.w	r1, #384	; 0x180
   20912:	f7ff fdbd 	bl	20490 <mbedtls_platform_zeroize>
   20916:	4628      	mov	r0, r5
   20918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2091c:	490f      	ldr	r1, [pc, #60]	; (2095c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2091e:	4620      	mov	r0, r4
   20920:	f7ff ff18 	bl	20754 <ctr_drbg_update_internal>
   20924:	4605      	mov	r5, r0
   20926:	2800      	cmp	r0, #0
   20928:	d1f0      	bne.n	2090c <mbedtls_ctr_drbg_reseed_internal+0x70>
   2092a:	2301      	movs	r3, #1
   2092c:	6123      	str	r3, [r4, #16]
   2092e:	e7ed      	b.n	2090c <mbedtls_ctr_drbg_reseed_internal+0x70>
   20930:	eb09 0008 	add.w	r0, r9, r8
   20934:	4639      	mov	r1, r7
   20936:	4632      	mov	r2, r6
   20938:	f002 fe16 	bl	23568 <memcpy>
   2093c:	4907      	ldr	r1, [pc, #28]	; (2095c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2093e:	44b0      	add	r8, r6
   20940:	4642      	mov	r2, r8
   20942:	4608      	mov	r0, r1
   20944:	f7ff fdae 	bl	204a4 <block_cipher_df>
   20948:	4605      	mov	r5, r0
   2094a:	2800      	cmp	r0, #0
   2094c:	d1de      	bne.n	2090c <mbedtls_ctr_drbg_reseed_internal+0x70>
   2094e:	e7e5      	b.n	2091c <mbedtls_ctr_drbg_reseed_internal+0x80>
   20950:	f06f 0537 	mvn.w	r5, #55	; 0x37
   20954:	e7df      	b.n	20916 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   20956:	f06f 0533 	mvn.w	r5, #51	; 0x33
   2095a:	e7dc      	b.n	20916 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   2095c:	200033c4 	.word	0x200033c4

00020960 <cc_mbedtls_ctr_drbg_init>:
   20960:	b510      	push	{r4, lr}
   20962:	22a4      	movs	r2, #164	; 0xa4
   20964:	4604      	mov	r4, r0
   20966:	2100      	movs	r1, #0
   20968:	f002 fe09 	bl	2357e <memset>
   2096c:	4b06      	ldr	r3, [pc, #24]	; (20988 <cc_mbedtls_ctr_drbg_init+0x28>)
   2096e:	f04f 31ff 	mov.w	r1, #4294967295
   20972:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   20976:	6121      	str	r1, [r4, #16]
   20978:	61e2      	str	r2, [r4, #28]
   2097a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   2097e:	681b      	ldr	r3, [r3, #0]
   20980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20984:	4718      	bx	r3
   20986:	bf00      	nop
   20988:	2000089c 	.word	0x2000089c

0002098c <cc_mbedtls_ctr_drbg_seed>:
   2098c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20990:	b085      	sub	sp, #20
   20992:	4605      	mov	r5, r0
   20994:	460f      	mov	r7, r1
   20996:	4616      	mov	r6, r2
   20998:	2100      	movs	r1, #0
   2099a:	2210      	movs	r2, #16
   2099c:	4668      	mov	r0, sp
   2099e:	4699      	mov	r9, r3
   209a0:	f002 fded 	bl	2357e <memset>
   209a4:	4b1e      	ldr	r3, [pc, #120]	; (20a20 <cc_mbedtls_ctr_drbg_seed+0x94>)
   209a6:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   209aa:	681b      	ldr	r3, [r3, #0]
   209ac:	4640      	mov	r0, r8
   209ae:	4798      	blx	r3
   209b0:	b120      	cbz	r0, 209bc <cc_mbedtls_ctr_drbg_seed+0x30>
   209b2:	4604      	mov	r4, r0
   209b4:	4620      	mov	r0, r4
   209b6:	b005      	add	sp, #20
   209b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   209bc:	f105 0420 	add.w	r4, r5, #32
   209c0:	4620      	mov	r0, r4
   209c2:	f000 ff51 	bl	21868 <cc_mbedtls_aes_init>
   209c6:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   209ca:	69ae      	ldr	r6, [r5, #24]
   209cc:	692b      	ldr	r3, [r5, #16]
   209ce:	b9ee      	cbnz	r6, 20a0c <cc_mbedtls_ctr_drbg_seed+0x80>
   209d0:	2220      	movs	r2, #32
   209d2:	2b00      	cmp	r3, #0
   209d4:	61aa      	str	r2, [r5, #24]
   209d6:	db20      	blt.n	20a1a <cc_mbedtls_ctr_drbg_seed+0x8e>
   209d8:	461e      	mov	r6, r3
   209da:	4620      	mov	r0, r4
   209dc:	4669      	mov	r1, sp
   209de:	2280      	movs	r2, #128	; 0x80
   209e0:	f000 ff58 	bl	21894 <cc_mbedtls_aes_setkey_enc>
   209e4:	4604      	mov	r4, r0
   209e6:	b930      	cbnz	r0, 209f6 <cc_mbedtls_ctr_drbg_seed+0x6a>
   209e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   209ea:	4633      	mov	r3, r6
   209ec:	4649      	mov	r1, r9
   209ee:	4628      	mov	r0, r5
   209f0:	f7ff ff54 	bl	2089c <mbedtls_ctr_drbg_reseed_internal>
   209f4:	4604      	mov	r4, r0
   209f6:	4b0b      	ldr	r3, [pc, #44]	; (20a24 <cc_mbedtls_ctr_drbg_seed+0x98>)
   209f8:	4640      	mov	r0, r8
   209fa:	681b      	ldr	r3, [r3, #0]
   209fc:	4798      	blx	r3
   209fe:	2800      	cmp	r0, #0
   20a00:	bf18      	it	ne
   20a02:	4604      	movne	r4, r0
   20a04:	4620      	mov	r0, r4
   20a06:	b005      	add	sp, #20
   20a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20a0c:	2b00      	cmp	r3, #0
   20a0e:	dae3      	bge.n	209d8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   20a10:	2e17      	cmp	r6, #23
   20a12:	d802      	bhi.n	20a1a <cc_mbedtls_ctr_drbg_seed+0x8e>
   20a14:	3601      	adds	r6, #1
   20a16:	0876      	lsrs	r6, r6, #1
   20a18:	e7df      	b.n	209da <cc_mbedtls_ctr_drbg_seed+0x4e>
   20a1a:	2600      	movs	r6, #0
   20a1c:	e7dd      	b.n	209da <cc_mbedtls_ctr_drbg_seed+0x4e>
   20a1e:	bf00      	nop
   20a20:	200008a0 	.word	0x200008a0
   20a24:	200008a4 	.word	0x200008a4

00020a28 <cc_mbedtls_ctr_drbg_random_with_add>:
   20a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a2c:	b08d      	sub	sp, #52	; 0x34
   20a2e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   20a32:	9f16      	ldr	r7, [sp, #88]	; 0x58
   20a34:	f200 80e3 	bhi.w	20bfe <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   20a38:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   20a3c:	f200 80dc 	bhi.w	20bf8 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   20a40:	4604      	mov	r4, r0
   20a42:	4615      	mov	r5, r2
   20a44:	460e      	mov	r6, r1
   20a46:	2220      	movs	r2, #32
   20a48:	2100      	movs	r1, #0
   20a4a:	a804      	add	r0, sp, #16
   20a4c:	4698      	mov	r8, r3
   20a4e:	f002 fd96 	bl	2357e <memset>
   20a52:	4b6c      	ldr	r3, [pc, #432]	; (20c04 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   20a54:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   20a58:	681b      	ldr	r3, [r3, #0]
   20a5a:	4648      	mov	r0, r9
   20a5c:	4798      	blx	r3
   20a5e:	4683      	mov	fp, r0
   20a60:	2800      	cmp	r0, #0
   20a62:	f040 8092 	bne.w	20b8a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   20a66:	6922      	ldr	r2, [r4, #16]
   20a68:	69e3      	ldr	r3, [r4, #28]
   20a6a:	429a      	cmp	r2, r3
   20a6c:	f300 8091 	bgt.w	20b92 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   20a70:	6963      	ldr	r3, [r4, #20]
   20a72:	2b00      	cmp	r3, #0
   20a74:	f040 808d 	bne.w	20b92 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   20a78:	2f00      	cmp	r7, #0
   20a7a:	f040 80a9 	bne.w	20bd0 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   20a7e:	f8df a188 	ldr.w	sl, [pc, #392]	; 20c08 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   20a82:	466f      	mov	r7, sp
   20a84:	2d00      	cmp	r5, #0
   20a86:	f000 8098 	beq.w	20bba <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   20a8a:	f104 0820 	add.w	r8, r4, #32
   20a8e:	466f      	mov	r7, sp
   20a90:	e00e      	b.n	20ab0 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   20a92:	2d10      	cmp	r5, #16
   20a94:	46ab      	mov	fp, r5
   20a96:	bf28      	it	cs
   20a98:	f04f 0b10 	movcs.w	fp, #16
   20a9c:	4630      	mov	r0, r6
   20a9e:	465a      	mov	r2, fp
   20aa0:	4639      	mov	r1, r7
   20aa2:	f002 fd61 	bl	23568 <memcpy>
   20aa6:	ebb5 050b 	subs.w	r5, r5, fp
   20aaa:	445e      	add	r6, fp
   20aac:	f000 8085 	beq.w	20bba <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   20ab0:	7be3      	ldrb	r3, [r4, #15]
   20ab2:	3301      	adds	r3, #1
   20ab4:	b2db      	uxtb	r3, r3
   20ab6:	73e3      	strb	r3, [r4, #15]
   20ab8:	2b00      	cmp	r3, #0
   20aba:	d14d      	bne.n	20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20abc:	7ba3      	ldrb	r3, [r4, #14]
   20abe:	3301      	adds	r3, #1
   20ac0:	b2db      	uxtb	r3, r3
   20ac2:	73a3      	strb	r3, [r4, #14]
   20ac4:	2b00      	cmp	r3, #0
   20ac6:	d147      	bne.n	20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20ac8:	7b63      	ldrb	r3, [r4, #13]
   20aca:	3301      	adds	r3, #1
   20acc:	b2db      	uxtb	r3, r3
   20ace:	7363      	strb	r3, [r4, #13]
   20ad0:	2b00      	cmp	r3, #0
   20ad2:	d141      	bne.n	20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20ad4:	7b23      	ldrb	r3, [r4, #12]
   20ad6:	3301      	adds	r3, #1
   20ad8:	b2db      	uxtb	r3, r3
   20ada:	7323      	strb	r3, [r4, #12]
   20adc:	2b00      	cmp	r3, #0
   20ade:	d13b      	bne.n	20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20ae0:	7ae3      	ldrb	r3, [r4, #11]
   20ae2:	3301      	adds	r3, #1
   20ae4:	b2db      	uxtb	r3, r3
   20ae6:	72e3      	strb	r3, [r4, #11]
   20ae8:	2b00      	cmp	r3, #0
   20aea:	d135      	bne.n	20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20aec:	7aa3      	ldrb	r3, [r4, #10]
   20aee:	3301      	adds	r3, #1
   20af0:	b2db      	uxtb	r3, r3
   20af2:	72a3      	strb	r3, [r4, #10]
   20af4:	2b00      	cmp	r3, #0
   20af6:	d12f      	bne.n	20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20af8:	7a63      	ldrb	r3, [r4, #9]
   20afa:	3301      	adds	r3, #1
   20afc:	b2db      	uxtb	r3, r3
   20afe:	7263      	strb	r3, [r4, #9]
   20b00:	bb53      	cbnz	r3, 20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20b02:	7a23      	ldrb	r3, [r4, #8]
   20b04:	3301      	adds	r3, #1
   20b06:	b2db      	uxtb	r3, r3
   20b08:	7223      	strb	r3, [r4, #8]
   20b0a:	bb2b      	cbnz	r3, 20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20b0c:	79e3      	ldrb	r3, [r4, #7]
   20b0e:	3301      	adds	r3, #1
   20b10:	b2db      	uxtb	r3, r3
   20b12:	71e3      	strb	r3, [r4, #7]
   20b14:	bb03      	cbnz	r3, 20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20b16:	79a3      	ldrb	r3, [r4, #6]
   20b18:	3301      	adds	r3, #1
   20b1a:	b2db      	uxtb	r3, r3
   20b1c:	71a3      	strb	r3, [r4, #6]
   20b1e:	b9db      	cbnz	r3, 20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20b20:	7963      	ldrb	r3, [r4, #5]
   20b22:	3301      	adds	r3, #1
   20b24:	b2db      	uxtb	r3, r3
   20b26:	7163      	strb	r3, [r4, #5]
   20b28:	b9b3      	cbnz	r3, 20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20b2a:	7923      	ldrb	r3, [r4, #4]
   20b2c:	3301      	adds	r3, #1
   20b2e:	b2db      	uxtb	r3, r3
   20b30:	7123      	strb	r3, [r4, #4]
   20b32:	b98b      	cbnz	r3, 20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20b34:	78e3      	ldrb	r3, [r4, #3]
   20b36:	3301      	adds	r3, #1
   20b38:	b2db      	uxtb	r3, r3
   20b3a:	70e3      	strb	r3, [r4, #3]
   20b3c:	b963      	cbnz	r3, 20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20b3e:	78a3      	ldrb	r3, [r4, #2]
   20b40:	3301      	adds	r3, #1
   20b42:	b2db      	uxtb	r3, r3
   20b44:	70a3      	strb	r3, [r4, #2]
   20b46:	b93b      	cbnz	r3, 20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20b48:	7863      	ldrb	r3, [r4, #1]
   20b4a:	3301      	adds	r3, #1
   20b4c:	b2db      	uxtb	r3, r3
   20b4e:	7063      	strb	r3, [r4, #1]
   20b50:	b913      	cbnz	r3, 20b58 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   20b52:	7823      	ldrb	r3, [r4, #0]
   20b54:	3301      	adds	r3, #1
   20b56:	7023      	strb	r3, [r4, #0]
   20b58:	463b      	mov	r3, r7
   20b5a:	4622      	mov	r2, r4
   20b5c:	2101      	movs	r1, #1
   20b5e:	4640      	mov	r0, r8
   20b60:	f000 feb2 	bl	218c8 <cc_mbedtls_aes_crypt_ecb>
   20b64:	4683      	mov	fp, r0
   20b66:	2800      	cmp	r0, #0
   20b68:	d093      	beq.n	20a92 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   20b6a:	f8da 3000 	ldr.w	r3, [sl]
   20b6e:	4648      	mov	r0, r9
   20b70:	4798      	blx	r3
   20b72:	2120      	movs	r1, #32
   20b74:	4603      	mov	r3, r0
   20b76:	a804      	add	r0, sp, #16
   20b78:	2b00      	cmp	r3, #0
   20b7a:	bf18      	it	ne
   20b7c:	469b      	movne	fp, r3
   20b7e:	f7ff fc87 	bl	20490 <mbedtls_platform_zeroize>
   20b82:	2110      	movs	r1, #16
   20b84:	4638      	mov	r0, r7
   20b86:	f7ff fc83 	bl	20490 <mbedtls_platform_zeroize>
   20b8a:	4658      	mov	r0, fp
   20b8c:	b00d      	add	sp, #52	; 0x34
   20b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b92:	463a      	mov	r2, r7
   20b94:	4641      	mov	r1, r8
   20b96:	2300      	movs	r3, #0
   20b98:	4620      	mov	r0, r4
   20b9a:	f7ff fe7f 	bl	2089c <mbedtls_ctr_drbg_reseed_internal>
   20b9e:	f8df a068 	ldr.w	sl, [pc, #104]	; 20c08 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   20ba2:	2800      	cmp	r0, #0
   20ba4:	f43f af6d 	beq.w	20a82 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   20ba8:	f8da 3000 	ldr.w	r3, [sl]
   20bac:	4648      	mov	r0, r9
   20bae:	4798      	blx	r3
   20bb0:	4683      	mov	fp, r0
   20bb2:	2800      	cmp	r0, #0
   20bb4:	f43f af65 	beq.w	20a82 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   20bb8:	e7e7      	b.n	20b8a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   20bba:	a904      	add	r1, sp, #16
   20bbc:	4620      	mov	r0, r4
   20bbe:	f7ff fdc9 	bl	20754 <ctr_drbg_update_internal>
   20bc2:	4683      	mov	fp, r0
   20bc4:	2800      	cmp	r0, #0
   20bc6:	d1d0      	bne.n	20b6a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   20bc8:	6923      	ldr	r3, [r4, #16]
   20bca:	3301      	adds	r3, #1
   20bcc:	6123      	str	r3, [r4, #16]
   20bce:	e7cc      	b.n	20b6a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   20bd0:	463a      	mov	r2, r7
   20bd2:	4641      	mov	r1, r8
   20bd4:	a804      	add	r0, sp, #16
   20bd6:	f7ff fc65 	bl	204a4 <block_cipher_df>
   20bda:	4683      	mov	fp, r0
   20bdc:	b118      	cbz	r0, 20be6 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   20bde:	f8df a028 	ldr.w	sl, [pc, #40]	; 20c08 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   20be2:	466f      	mov	r7, sp
   20be4:	e7c1      	b.n	20b6a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   20be6:	a904      	add	r1, sp, #16
   20be8:	4620      	mov	r0, r4
   20bea:	f7ff fdb3 	bl	20754 <ctr_drbg_update_internal>
   20bee:	4683      	mov	fp, r0
   20bf0:	2800      	cmp	r0, #0
   20bf2:	f43f af44 	beq.w	20a7e <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   20bf6:	e7f2      	b.n	20bde <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   20bf8:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   20bfc:	e7c5      	b.n	20b8a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   20bfe:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   20c02:	e7c2      	b.n	20b8a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   20c04:	200008a0 	.word	0x200008a0
   20c08:	200008a4 	.word	0x200008a4

00020c0c <entropy_update>:
   20c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20c10:	2b20      	cmp	r3, #32
   20c12:	b08b      	sub	sp, #44	; 0x2c
   20c14:	461d      	mov	r5, r3
   20c16:	4606      	mov	r6, r0
   20c18:	4688      	mov	r8, r1
   20c1a:	4691      	mov	r9, r2
   20c1c:	d826      	bhi.n	20c6c <entropy_update+0x60>
   20c1e:	b2db      	uxtb	r3, r3
   20c20:	af02      	add	r7, sp, #8
   20c22:	f88d 8004 	strb.w	r8, [sp, #4]
   20c26:	46b0      	mov	r8, r6
   20c28:	f88d 3005 	strb.w	r3, [sp, #5]
   20c2c:	f858 1b04 	ldr.w	r1, [r8], #4
   20c30:	b921      	cbnz	r1, 20c3c <entropy_update+0x30>
   20c32:	4640      	mov	r0, r8
   20c34:	f000 fe8c 	bl	21950 <cc_mbedtls_sha256_starts>
   20c38:	4604      	mov	r4, r0
   20c3a:	b940      	cbnz	r0, 20c4e <entropy_update+0x42>
   20c3c:	2301      	movs	r3, #1
   20c3e:	6033      	str	r3, [r6, #0]
   20c40:	2202      	movs	r2, #2
   20c42:	a901      	add	r1, sp, #4
   20c44:	4640      	mov	r0, r8
   20c46:	f000 fe97 	bl	21978 <cc_mbedtls_sha256_update>
   20c4a:	4604      	mov	r4, r0
   20c4c:	b138      	cbz	r0, 20c5e <entropy_update+0x52>
   20c4e:	4638      	mov	r0, r7
   20c50:	2120      	movs	r1, #32
   20c52:	f7ff fc1d 	bl	20490 <mbedtls_platform_zeroize>
   20c56:	4620      	mov	r0, r4
   20c58:	b00b      	add	sp, #44	; 0x2c
   20c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20c5e:	462a      	mov	r2, r5
   20c60:	4649      	mov	r1, r9
   20c62:	4640      	mov	r0, r8
   20c64:	f000 fe88 	bl	21978 <cc_mbedtls_sha256_update>
   20c68:	4604      	mov	r4, r0
   20c6a:	e7f0      	b.n	20c4e <entropy_update+0x42>
   20c6c:	af02      	add	r7, sp, #8
   20c6e:	4619      	mov	r1, r3
   20c70:	4610      	mov	r0, r2
   20c72:	2300      	movs	r3, #0
   20c74:	463a      	mov	r2, r7
   20c76:	f001 f807 	bl	21c88 <cc_mbedtls_sha256>
   20c7a:	4604      	mov	r4, r0
   20c7c:	2800      	cmp	r0, #0
   20c7e:	d1e6      	bne.n	20c4e <entropy_update+0x42>
   20c80:	2320      	movs	r3, #32
   20c82:	46b9      	mov	r9, r7
   20c84:	461d      	mov	r5, r3
   20c86:	e7cc      	b.n	20c22 <entropy_update+0x16>

00020c88 <entropy_gather_internal.part.0>:
   20c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c8a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   20c8e:	b0a7      	sub	sp, #156	; 0x9c
   20c90:	2b00      	cmp	r3, #0
   20c92:	bfd8      	it	le
   20c94:	ae02      	addle	r6, sp, #8
   20c96:	dd2c      	ble.n	20cf2 <entropy_gather_internal.part.0+0x6a>
   20c98:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   20c9c:	4605      	mov	r5, r0
   20c9e:	2300      	movs	r3, #0
   20ca0:	ae02      	add	r6, sp, #8
   20ca2:	9301      	str	r3, [sp, #4]
   20ca4:	f1a4 0701 	sub.w	r7, r4, #1
   20ca8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   20cac:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   20cb0:	ab01      	add	r3, sp, #4
   20cb2:	2290      	movs	r2, #144	; 0x90
   20cb4:	4631      	mov	r1, r6
   20cb6:	47a0      	blx	r4
   20cb8:	fab7 f787 	clz	r7, r7
   20cbc:	097f      	lsrs	r7, r7, #5
   20cbe:	4604      	mov	r4, r0
   20cc0:	b910      	cbnz	r0, 20cc8 <entropy_gather_internal.part.0+0x40>
   20cc2:	9b01      	ldr	r3, [sp, #4]
   20cc4:	b93b      	cbnz	r3, 20cd6 <entropy_gather_internal.part.0+0x4e>
   20cc6:	b1a7      	cbz	r7, 20cf2 <entropy_gather_internal.part.0+0x6a>
   20cc8:	4630      	mov	r0, r6
   20cca:	2190      	movs	r1, #144	; 0x90
   20ccc:	f7ff fbe0 	bl	20490 <mbedtls_platform_zeroize>
   20cd0:	4620      	mov	r0, r4
   20cd2:	b027      	add	sp, #156	; 0x9c
   20cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20cd6:	4601      	mov	r1, r0
   20cd8:	4632      	mov	r2, r6
   20cda:	4628      	mov	r0, r5
   20cdc:	f7ff ff96 	bl	20c0c <entropy_update>
   20ce0:	b950      	cbnz	r0, 20cf8 <entropy_gather_internal.part.0+0x70>
   20ce2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   20ce6:	9a01      	ldr	r2, [sp, #4]
   20ce8:	4413      	add	r3, r2
   20cea:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   20cee:	2f00      	cmp	r7, #0
   20cf0:	d1ea      	bne.n	20cc8 <entropy_gather_internal.part.0+0x40>
   20cf2:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   20cf6:	e7e7      	b.n	20cc8 <entropy_gather_internal.part.0+0x40>
   20cf8:	4604      	mov	r4, r0
   20cfa:	4620      	mov	r0, r4
   20cfc:	b027      	add	sp, #156	; 0x9c
   20cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020d00 <cc_mbedtls_entropy_init>:
   20d00:	b570      	push	{r4, r5, r6, lr}
   20d02:	2500      	movs	r5, #0
   20d04:	4604      	mov	r4, r0
   20d06:	f504 7688 	add.w	r6, r4, #272	; 0x110
   20d0a:	2214      	movs	r2, #20
   20d0c:	4629      	mov	r1, r5
   20d0e:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   20d12:	30fc      	adds	r0, #252	; 0xfc
   20d14:	f002 fc33 	bl	2357e <memset>
   20d18:	2208      	movs	r2, #8
   20d1a:	4629      	mov	r1, r5
   20d1c:	4630      	mov	r0, r6
   20d1e:	f002 fc2e 	bl	2357e <memset>
   20d22:	4b15      	ldr	r3, [pc, #84]	; (20d78 <cc_mbedtls_entropy_init+0x78>)
   20d24:	4630      	mov	r0, r6
   20d26:	681b      	ldr	r3, [r3, #0]
   20d28:	4798      	blx	r3
   20d2a:	4620      	mov	r0, r4
   20d2c:	f840 5b04 	str.w	r5, [r0], #4
   20d30:	f000 fdf4 	bl	2191c <cc_mbedtls_sha256_init>
   20d34:	4b11      	ldr	r3, [pc, #68]	; (20d7c <cc_mbedtls_entropy_init+0x7c>)
   20d36:	4630      	mov	r0, r6
   20d38:	681b      	ldr	r3, [r3, #0]
   20d3a:	4798      	blx	r3
   20d3c:	b9d8      	cbnz	r0, 20d76 <cc_mbedtls_entropy_init+0x76>
   20d3e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   20d42:	42ab      	cmp	r3, r5
   20d44:	dc11      	bgt.n	20d6a <cc_mbedtls_entropy_init+0x6a>
   20d46:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   20d4a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   20d4e:	2120      	movs	r1, #32
   20d50:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   20d54:	2101      	movs	r1, #1
   20d56:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   20d5a:	3301      	adds	r3, #1
   20d5c:	4908      	ldr	r1, [pc, #32]	; (20d80 <cc_mbedtls_entropy_init+0x80>)
   20d5e:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   20d62:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   20d66:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   20d6a:	4b06      	ldr	r3, [pc, #24]	; (20d84 <cc_mbedtls_entropy_init+0x84>)
   20d6c:	4630      	mov	r0, r6
   20d6e:	681b      	ldr	r3, [r3, #0]
   20d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20d74:	4718      	bx	r3
   20d76:	bd70      	pop	{r4, r5, r6, pc}
   20d78:	2000089c 	.word	0x2000089c
   20d7c:	200008a0 	.word	0x200008a0
   20d80:	0002176d 	.word	0x0002176d
   20d84:	200008a4 	.word	0x200008a4

00020d88 <cc_mbedtls_entropy_func>:
   20d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20d8c:	2a20      	cmp	r2, #32
   20d8e:	b088      	sub	sp, #32
   20d90:	d876      	bhi.n	20e80 <cc_mbedtls_entropy_func+0xf8>
   20d92:	4b3d      	ldr	r3, [pc, #244]	; (20e88 <cc_mbedtls_entropy_func+0x100>)
   20d94:	f500 7988 	add.w	r9, r0, #272	; 0x110
   20d98:	681b      	ldr	r3, [r3, #0]
   20d9a:	4604      	mov	r4, r0
   20d9c:	4648      	mov	r0, r9
   20d9e:	4617      	mov	r7, r2
   20da0:	4688      	mov	r8, r1
   20da2:	4798      	blx	r3
   20da4:	4605      	mov	r5, r0
   20da6:	bba0      	cbnz	r0, 20e12 <cc_mbedtls_entropy_func+0x8a>
   20da8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   20dac:	f240 1601 	movw	r6, #257	; 0x101
   20db0:	e001      	b.n	20db6 <cc_mbedtls_entropy_func+0x2e>
   20db2:	3e01      	subs	r6, #1
   20db4:	d060      	beq.n	20e78 <cc_mbedtls_entropy_func+0xf0>
   20db6:	4620      	mov	r0, r4
   20db8:	b37b      	cbz	r3, 20e1a <cc_mbedtls_entropy_func+0x92>
   20dba:	f7ff ff65 	bl	20c88 <entropy_gather_internal.part.0>
   20dbe:	4605      	mov	r5, r0
   20dc0:	bb68      	cbnz	r0, 20e1e <cc_mbedtls_entropy_func+0x96>
   20dc2:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   20dc6:	2b00      	cmp	r3, #0
   20dc8:	ddf3      	ble.n	20db2 <cc_mbedtls_entropy_func+0x2a>
   20dca:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   20dce:	4290      	cmp	r0, r2
   20dd0:	d3ef      	bcc.n	20db2 <cc_mbedtls_entropy_func+0x2a>
   20dd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20dd6:	2a01      	cmp	r2, #1
   20dd8:	d1eb      	bne.n	20db2 <cc_mbedtls_entropy_func+0x2a>
   20dda:	281f      	cmp	r0, #31
   20ddc:	d9e9      	bls.n	20db2 <cc_mbedtls_entropy_func+0x2a>
   20dde:	466e      	mov	r6, sp
   20de0:	4629      	mov	r1, r5
   20de2:	2220      	movs	r2, #32
   20de4:	4630      	mov	r0, r6
   20de6:	f104 0a04 	add.w	sl, r4, #4
   20dea:	f002 fbc8 	bl	2357e <memset>
   20dee:	4631      	mov	r1, r6
   20df0:	4650      	mov	r0, sl
   20df2:	f000 fdeb 	bl	219cc <cc_mbedtls_sha256_finish>
   20df6:	4605      	mov	r5, r0
   20df8:	b198      	cbz	r0, 20e22 <cc_mbedtls_entropy_func+0x9a>
   20dfa:	2120      	movs	r1, #32
   20dfc:	4630      	mov	r0, r6
   20dfe:	f7ff fb47 	bl	20490 <mbedtls_platform_zeroize>
   20e02:	4b22      	ldr	r3, [pc, #136]	; (20e8c <cc_mbedtls_entropy_func+0x104>)
   20e04:	4648      	mov	r0, r9
   20e06:	681b      	ldr	r3, [r3, #0]
   20e08:	4798      	blx	r3
   20e0a:	2800      	cmp	r0, #0
   20e0c:	bf18      	it	ne
   20e0e:	f06f 051d 	mvnne.w	r5, #29
   20e12:	4628      	mov	r0, r5
   20e14:	b008      	add	sp, #32
   20e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20e1a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   20e1e:	466e      	mov	r6, sp
   20e20:	e7eb      	b.n	20dfa <cc_mbedtls_entropy_func+0x72>
   20e22:	4650      	mov	r0, sl
   20e24:	f000 fd8e 	bl	21944 <cc_mbedtls_sha256_free>
   20e28:	4650      	mov	r0, sl
   20e2a:	f000 fd77 	bl	2191c <cc_mbedtls_sha256_init>
   20e2e:	4629      	mov	r1, r5
   20e30:	4650      	mov	r0, sl
   20e32:	f000 fd8d 	bl	21950 <cc_mbedtls_sha256_starts>
   20e36:	4605      	mov	r5, r0
   20e38:	2800      	cmp	r0, #0
   20e3a:	d1de      	bne.n	20dfa <cc_mbedtls_entropy_func+0x72>
   20e3c:	4650      	mov	r0, sl
   20e3e:	2220      	movs	r2, #32
   20e40:	4631      	mov	r1, r6
   20e42:	f000 fd99 	bl	21978 <cc_mbedtls_sha256_update>
   20e46:	4605      	mov	r5, r0
   20e48:	2800      	cmp	r0, #0
   20e4a:	d1d6      	bne.n	20dfa <cc_mbedtls_entropy_func+0x72>
   20e4c:	4603      	mov	r3, r0
   20e4e:	4632      	mov	r2, r6
   20e50:	2120      	movs	r1, #32
   20e52:	4630      	mov	r0, r6
   20e54:	f000 ff18 	bl	21c88 <cc_mbedtls_sha256>
   20e58:	4605      	mov	r5, r0
   20e5a:	2800      	cmp	r0, #0
   20e5c:	d1cd      	bne.n	20dfa <cc_mbedtls_entropy_func+0x72>
   20e5e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   20e62:	2b00      	cmp	r3, #0
   20e64:	bfc4      	itt	gt
   20e66:	2300      	movgt	r3, #0
   20e68:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   20e6c:	463a      	mov	r2, r7
   20e6e:	4640      	mov	r0, r8
   20e70:	4631      	mov	r1, r6
   20e72:	f002 fb79 	bl	23568 <memcpy>
   20e76:	e7c0      	b.n	20dfa <cc_mbedtls_entropy_func+0x72>
   20e78:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   20e7c:	466e      	mov	r6, sp
   20e7e:	e7bc      	b.n	20dfa <cc_mbedtls_entropy_func+0x72>
   20e80:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   20e84:	e7c5      	b.n	20e12 <cc_mbedtls_entropy_func+0x8a>
   20e86:	bf00      	nop
   20e88:	200008a0 	.word	0x200008a0
   20e8c:	200008a4 	.word	0x200008a4

00020e90 <RndStartupTest.constprop.0>:
   20e90:	b530      	push	{r4, r5, lr}
   20e92:	b08d      	sub	sp, #52	; 0x34
   20e94:	2100      	movs	r1, #0
   20e96:	2228      	movs	r2, #40	; 0x28
   20e98:	a802      	add	r0, sp, #8
   20e9a:	9101      	str	r1, [sp, #4]
   20e9c:	f002 fb6f 	bl	2357e <memset>
   20ea0:	a802      	add	r0, sp, #8
   20ea2:	f000 ff19 	bl	21cd8 <RNG_PLAT_SetUserRngParameters>
   20ea6:	4604      	mov	r4, r0
   20ea8:	b110      	cbz	r0, 20eb0 <RndStartupTest.constprop.0+0x20>
   20eaa:	4620      	mov	r0, r4
   20eac:	b00d      	add	sp, #52	; 0x34
   20eae:	bd30      	pop	{r4, r5, pc}
   20eb0:	4d18      	ldr	r5, [pc, #96]	; (20f14 <RndStartupTest.constprop.0+0x84>)
   20eb2:	f04f 31ff 	mov.w	r1, #4294967295
   20eb6:	6828      	ldr	r0, [r5, #0]
   20eb8:	f000 f946 	bl	21148 <CC_PalMutexLock>
   20ebc:	4604      	mov	r4, r0
   20ebe:	b9c0      	cbnz	r0, 20ef2 <RndStartupTest.constprop.0+0x62>
   20ec0:	2000      	movs	r0, #0
   20ec2:	f000 f971 	bl	211a8 <CC_PalPowerSaveModeSelect>
   20ec6:	bb00      	cbnz	r0, 20f0a <RndStartupTest.constprop.0+0x7a>
   20ec8:	4a13      	ldr	r2, [pc, #76]	; (20f18 <RndStartupTest.constprop.0+0x88>)
   20eca:	a902      	add	r1, sp, #8
   20ecc:	a801      	add	r0, sp, #4
   20ece:	f000 fc3f 	bl	21750 <LLF_RND_RunTrngStartupTest>
   20ed2:	4604      	mov	r4, r0
   20ed4:	2001      	movs	r0, #1
   20ed6:	f000 f967 	bl	211a8 <CC_PalPowerSaveModeSelect>
   20eda:	b990      	cbnz	r0, 20f02 <RndStartupTest.constprop.0+0x72>
   20edc:	6828      	ldr	r0, [r5, #0]
   20ede:	f000 f93b 	bl	21158 <CC_PalMutexUnlock>
   20ee2:	2800      	cmp	r0, #0
   20ee4:	d0e1      	beq.n	20eaa <RndStartupTest.constprop.0+0x1a>
   20ee6:	480d      	ldr	r0, [pc, #52]	; (20f1c <RndStartupTest.constprop.0+0x8c>)
   20ee8:	f7ff f9b2 	bl	20250 <CC_PalAbort>
   20eec:	4620      	mov	r0, r4
   20eee:	b00d      	add	sp, #52	; 0x34
   20ef0:	bd30      	pop	{r4, r5, pc}
   20ef2:	480b      	ldr	r0, [pc, #44]	; (20f20 <RndStartupTest.constprop.0+0x90>)
   20ef4:	f7ff f9ac 	bl	20250 <CC_PalAbort>
   20ef8:	2c01      	cmp	r4, #1
   20efa:	bf08      	it	eq
   20efc:	2405      	moveq	r4, #5
   20efe:	d0ed      	beq.n	20edc <RndStartupTest.constprop.0+0x4c>
   20f00:	e7de      	b.n	20ec0 <RndStartupTest.constprop.0+0x30>
   20f02:	4808      	ldr	r0, [pc, #32]	; (20f24 <RndStartupTest.constprop.0+0x94>)
   20f04:	f7ff f9a4 	bl	20250 <CC_PalAbort>
   20f08:	e7e8      	b.n	20edc <RndStartupTest.constprop.0+0x4c>
   20f0a:	4807      	ldr	r0, [pc, #28]	; (20f28 <RndStartupTest.constprop.0+0x98>)
   20f0c:	f7ff f9a0 	bl	20250 <CC_PalAbort>
   20f10:	e7da      	b.n	20ec8 <RndStartupTest.constprop.0+0x38>
   20f12:	bf00      	nop
   20f14:	20000898 	.word	0x20000898
   20f18:	200035b0 	.word	0x200035b0
   20f1c:	00026298 	.word	0x00026298
   20f20:	00026240 	.word	0x00026240
   20f24:	00026278 	.word	0x00026278
   20f28:	00026258 	.word	0x00026258

00020f2c <CC_LibInit>:
   20f2c:	b530      	push	{r4, r5, lr}
   20f2e:	b083      	sub	sp, #12
   20f30:	f000 f85c 	bl	20fec <CC_HalInit>
   20f34:	b128      	cbz	r0, 20f42 <CC_LibInit+0x16>
   20f36:	f000 f8ab 	bl	21090 <CC_PalTerminate>
   20f3a:	2403      	movs	r4, #3
   20f3c:	4620      	mov	r0, r4
   20f3e:	b003      	add	sp, #12
   20f40:	bd30      	pop	{r4, r5, pc}
   20f42:	f000 f877 	bl	21034 <CC_PalInit>
   20f46:	b9d8      	cbnz	r0, 20f80 <CC_LibInit+0x54>
   20f48:	f000 f92e 	bl	211a8 <CC_PalPowerSaveModeSelect>
   20f4c:	b9e0      	cbnz	r0, 20f88 <CC_LibInit+0x5c>
   20f4e:	4c22      	ldr	r4, [pc, #136]	; (20fd8 <CC_LibInit+0xac>)
   20f50:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   20f54:	0e1b      	lsrs	r3, r3, #24
   20f56:	2bf0      	cmp	r3, #240	; 0xf0
   20f58:	d10a      	bne.n	20f70 <CC_LibInit+0x44>
   20f5a:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   20f5e:	4b1f      	ldr	r3, [pc, #124]	; (20fdc <CC_LibInit+0xb0>)
   20f60:	429a      	cmp	r2, r3
   20f62:	d031      	beq.n	20fc8 <CC_LibInit+0x9c>
   20f64:	f000 f844 	bl	20ff0 <CC_HalTerminate>
   20f68:	2407      	movs	r4, #7
   20f6a:	f000 f891 	bl	21090 <CC_PalTerminate>
   20f6e:	e7e5      	b.n	20f3c <CC_LibInit+0x10>
   20f70:	f000 f83e 	bl	20ff0 <CC_HalTerminate>
   20f74:	f000 f88c 	bl	21090 <CC_PalTerminate>
   20f78:	2406      	movs	r4, #6
   20f7a:	4620      	mov	r0, r4
   20f7c:	b003      	add	sp, #12
   20f7e:	bd30      	pop	{r4, r5, pc}
   20f80:	2404      	movs	r4, #4
   20f82:	4620      	mov	r0, r4
   20f84:	b003      	add	sp, #12
   20f86:	bd30      	pop	{r4, r5, pc}
   20f88:	f000 f832 	bl	20ff0 <CC_HalTerminate>
   20f8c:	f000 f880 	bl	21090 <CC_PalTerminate>
   20f90:	f7ff ff7e 	bl	20e90 <RndStartupTest.constprop.0>
   20f94:	4604      	mov	r4, r0
   20f96:	b998      	cbnz	r0, 20fc0 <CC_LibInit+0x94>
   20f98:	4d11      	ldr	r5, [pc, #68]	; (20fe0 <CC_LibInit+0xb4>)
   20f9a:	682b      	ldr	r3, [r5, #0]
   20f9c:	2b00      	cmp	r3, #0
   20f9e:	d1cd      	bne.n	20f3c <CC_LibInit+0x10>
   20fa0:	4602      	mov	r2, r0
   20fa2:	4601      	mov	r1, r0
   20fa4:	f7ff f976 	bl	20294 <nrf_cc3xx_platform_ctr_drbg_init>
   20fa8:	b950      	cbnz	r0, 20fc0 <CC_LibInit+0x94>
   20faa:	490e      	ldr	r1, [pc, #56]	; (20fe4 <CC_LibInit+0xb8>)
   20fac:	ab01      	add	r3, sp, #4
   20fae:	2268      	movs	r2, #104	; 0x68
   20fb0:	f7ff f9a2 	bl	202f8 <nrf_cc3xx_platform_ctr_drbg_get>
   20fb4:	b920      	cbnz	r0, 20fc0 <CC_LibInit+0x94>
   20fb6:	4b0c      	ldr	r3, [pc, #48]	; (20fe8 <CC_LibInit+0xbc>)
   20fb8:	602b      	str	r3, [r5, #0]
   20fba:	4620      	mov	r0, r4
   20fbc:	b003      	add	sp, #12
   20fbe:	bd30      	pop	{r4, r5, pc}
   20fc0:	2405      	movs	r4, #5
   20fc2:	4620      	mov	r0, r4
   20fc4:	b003      	add	sp, #12
   20fc6:	bd30      	pop	{r4, r5, pc}
   20fc8:	2001      	movs	r0, #1
   20fca:	f000 f8ed 	bl	211a8 <CC_PalPowerSaveModeSelect>
   20fce:	2800      	cmp	r0, #0
   20fd0:	d1da      	bne.n	20f88 <CC_LibInit+0x5c>
   20fd2:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   20fd6:	e7db      	b.n	20f90 <CC_LibInit+0x64>
   20fd8:	5002b000 	.word	0x5002b000
   20fdc:	20e00000 	.word	0x20e00000
   20fe0:	200035ac 	.word	0x200035ac
   20fe4:	20003544 	.word	0x20003544
   20fe8:	5a5aea5a 	.word	0x5a5aea5a

00020fec <CC_HalInit>:
   20fec:	2000      	movs	r0, #0
   20fee:	4770      	bx	lr

00020ff0 <CC_HalTerminate>:
   20ff0:	2000      	movs	r0, #0
   20ff2:	4770      	bx	lr

00020ff4 <CC_HalClearInterruptBit>:
   20ff4:	0543      	lsls	r3, r0, #21
   20ff6:	d504      	bpl.n	21002 <CC_HalClearInterruptBit+0xe>
   20ff8:	4b04      	ldr	r3, [pc, #16]	; (2100c <CC_HalClearInterruptBit+0x18>)
   20ffa:	f04f 32ff 	mov.w	r2, #4294967295
   20ffe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   21002:	4b02      	ldr	r3, [pc, #8]	; (2100c <CC_HalClearInterruptBit+0x18>)
   21004:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   21008:	4770      	bx	lr
   2100a:	bf00      	nop
   2100c:	5002b000 	.word	0x5002b000

00021010 <CC_HalMaskInterrupt>:
   21010:	4b01      	ldr	r3, [pc, #4]	; (21018 <CC_HalMaskInterrupt+0x8>)
   21012:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   21016:	4770      	bx	lr
   21018:	5002b000 	.word	0x5002b000

0002101c <CC_HalWaitInterrupt>:
   2101c:	b108      	cbz	r0, 21022 <CC_HalWaitInterrupt+0x6>
   2101e:	f000 b86b 	b.w	210f8 <CC_PalWaitInterrupt>
   21022:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   21026:	4770      	bx	lr

00021028 <CC_HalWaitInterruptRND>:
   21028:	b108      	cbz	r0, 2102e <CC_HalWaitInterruptRND+0x6>
   2102a:	f000 b84f 	b.w	210cc <CC_PalWaitInterruptRND>
   2102e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   21032:	4770      	bx	lr

00021034 <CC_PalInit>:
   21034:	b510      	push	{r4, lr}
   21036:	4811      	ldr	r0, [pc, #68]	; (2107c <CC_PalInit+0x48>)
   21038:	f000 f872 	bl	21120 <CC_PalMutexCreate>
   2103c:	b100      	cbz	r0, 21040 <CC_PalInit+0xc>
   2103e:	bd10      	pop	{r4, pc}
   21040:	480f      	ldr	r0, [pc, #60]	; (21080 <CC_PalInit+0x4c>)
   21042:	f000 f86d 	bl	21120 <CC_PalMutexCreate>
   21046:	2800      	cmp	r0, #0
   21048:	d1f9      	bne.n	2103e <CC_PalInit+0xa>
   2104a:	4c0e      	ldr	r4, [pc, #56]	; (21084 <CC_PalInit+0x50>)
   2104c:	4620      	mov	r0, r4
   2104e:	f000 f867 	bl	21120 <CC_PalMutexCreate>
   21052:	2800      	cmp	r0, #0
   21054:	d1f3      	bne.n	2103e <CC_PalInit+0xa>
   21056:	4b0c      	ldr	r3, [pc, #48]	; (21088 <CC_PalInit+0x54>)
   21058:	480c      	ldr	r0, [pc, #48]	; (2108c <CC_PalInit+0x58>)
   2105a:	601c      	str	r4, [r3, #0]
   2105c:	f000 f860 	bl	21120 <CC_PalMutexCreate>
   21060:	4601      	mov	r1, r0
   21062:	2800      	cmp	r0, #0
   21064:	d1eb      	bne.n	2103e <CC_PalInit+0xa>
   21066:	f000 f82d 	bl	210c4 <CC_PalDmaInit>
   2106a:	4604      	mov	r4, r0
   2106c:	b108      	cbz	r0, 21072 <CC_PalInit+0x3e>
   2106e:	4620      	mov	r0, r4
   21070:	bd10      	pop	{r4, pc}
   21072:	f000 f87b 	bl	2116c <CC_PalPowerSaveModeInit>
   21076:	4620      	mov	r0, r4
   21078:	e7fa      	b.n	21070 <CC_PalInit+0x3c>
   2107a:	bf00      	nop
   2107c:	20000894 	.word	0x20000894
   21080:	20000888 	.word	0x20000888
   21084:	20000890 	.word	0x20000890
   21088:	20000898 	.word	0x20000898
   2108c:	2000088c 	.word	0x2000088c

00021090 <CC_PalTerminate>:
   21090:	b508      	push	{r3, lr}
   21092:	4808      	ldr	r0, [pc, #32]	; (210b4 <CC_PalTerminate+0x24>)
   21094:	f000 f84e 	bl	21134 <CC_PalMutexDestroy>
   21098:	4807      	ldr	r0, [pc, #28]	; (210b8 <CC_PalTerminate+0x28>)
   2109a:	f000 f84b 	bl	21134 <CC_PalMutexDestroy>
   2109e:	4807      	ldr	r0, [pc, #28]	; (210bc <CC_PalTerminate+0x2c>)
   210a0:	f000 f848 	bl	21134 <CC_PalMutexDestroy>
   210a4:	4806      	ldr	r0, [pc, #24]	; (210c0 <CC_PalTerminate+0x30>)
   210a6:	f000 f845 	bl	21134 <CC_PalMutexDestroy>
   210aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   210ae:	f000 b80b 	b.w	210c8 <CC_PalDmaTerminate>
   210b2:	bf00      	nop
   210b4:	20000894 	.word	0x20000894
   210b8:	20000888 	.word	0x20000888
   210bc:	20000890 	.word	0x20000890
   210c0:	2000088c 	.word	0x2000088c

000210c4 <CC_PalDmaInit>:
   210c4:	2000      	movs	r0, #0
   210c6:	4770      	bx	lr

000210c8 <CC_PalDmaTerminate>:
   210c8:	4770      	bx	lr
   210ca:	bf00      	nop

000210cc <CC_PalWaitInterruptRND>:
   210cc:	b410      	push	{r4}
   210ce:	4c09      	ldr	r4, [pc, #36]	; (210f4 <CC_PalWaitInterruptRND+0x28>)
   210d0:	4602      	mov	r2, r0
   210d2:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   210d6:	4213      	tst	r3, r2
   210d8:	d0fb      	beq.n	210d2 <CC_PalWaitInterruptRND+0x6>
   210da:	b121      	cbz	r1, 210e6 <CC_PalWaitInterruptRND+0x1a>
   210dc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   210e0:	600b      	str	r3, [r1, #0]
   210e2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   210e6:	4b03      	ldr	r3, [pc, #12]	; (210f4 <CC_PalWaitInterruptRND+0x28>)
   210e8:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   210ec:	2000      	movs	r0, #0
   210ee:	bc10      	pop	{r4}
   210f0:	4770      	bx	lr
   210f2:	bf00      	nop
   210f4:	5002b000 	.word	0x5002b000

000210f8 <CC_PalWaitInterrupt>:
   210f8:	4a04      	ldr	r2, [pc, #16]	; (2110c <CC_PalWaitInterrupt+0x14>)
   210fa:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   210fe:	4218      	tst	r0, r3
   21100:	d0fb      	beq.n	210fa <CC_PalWaitInterrupt+0x2>
   21102:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   21106:	2000      	movs	r0, #0
   21108:	4770      	bx	lr
   2110a:	bf00      	nop
   2110c:	5002b000 	.word	0x5002b000

00021110 <CC_PalMemCopyPlat>:
   21110:	f002 ba13 	b.w	2353a <memmove>

00021114 <CC_PalMemSetPlat>:
   21114:	f002 ba33 	b.w	2357e <memset>

00021118 <CC_PalMemSetZeroPlat>:
   21118:	460a      	mov	r2, r1
   2111a:	2100      	movs	r1, #0
   2111c:	f002 ba2f 	b.w	2357e <memset>

00021120 <CC_PalMutexCreate>:
   21120:	b508      	push	{r3, lr}
   21122:	4b03      	ldr	r3, [pc, #12]	; (21130 <CC_PalMutexCreate+0x10>)
   21124:	6802      	ldr	r2, [r0, #0]
   21126:	681b      	ldr	r3, [r3, #0]
   21128:	6810      	ldr	r0, [r2, #0]
   2112a:	4798      	blx	r3
   2112c:	2000      	movs	r0, #0
   2112e:	bd08      	pop	{r3, pc}
   21130:	20000848 	.word	0x20000848

00021134 <CC_PalMutexDestroy>:
   21134:	b508      	push	{r3, lr}
   21136:	4b03      	ldr	r3, [pc, #12]	; (21144 <CC_PalMutexDestroy+0x10>)
   21138:	6802      	ldr	r2, [r0, #0]
   2113a:	685b      	ldr	r3, [r3, #4]
   2113c:	6810      	ldr	r0, [r2, #0]
   2113e:	4798      	blx	r3
   21140:	2000      	movs	r0, #0
   21142:	bd08      	pop	{r3, pc}
   21144:	20000848 	.word	0x20000848

00021148 <CC_PalMutexLock>:
   21148:	4b02      	ldr	r3, [pc, #8]	; (21154 <CC_PalMutexLock+0xc>)
   2114a:	6802      	ldr	r2, [r0, #0]
   2114c:	689b      	ldr	r3, [r3, #8]
   2114e:	6810      	ldr	r0, [r2, #0]
   21150:	4718      	bx	r3
   21152:	bf00      	nop
   21154:	20000848 	.word	0x20000848

00021158 <CC_PalMutexUnlock>:
   21158:	b508      	push	{r3, lr}
   2115a:	4b03      	ldr	r3, [pc, #12]	; (21168 <CC_PalMutexUnlock+0x10>)
   2115c:	6802      	ldr	r2, [r0, #0]
   2115e:	68db      	ldr	r3, [r3, #12]
   21160:	6810      	ldr	r0, [r2, #0]
   21162:	4798      	blx	r3
   21164:	2000      	movs	r0, #0
   21166:	bd08      	pop	{r3, pc}
   21168:	20000848 	.word	0x20000848

0002116c <CC_PalPowerSaveModeInit>:
   2116c:	b570      	push	{r4, r5, r6, lr}
   2116e:	4c09      	ldr	r4, [pc, #36]	; (21194 <CC_PalPowerSaveModeInit+0x28>)
   21170:	4d09      	ldr	r5, [pc, #36]	; (21198 <CC_PalPowerSaveModeInit+0x2c>)
   21172:	6920      	ldr	r0, [r4, #16]
   21174:	68ab      	ldr	r3, [r5, #8]
   21176:	4798      	blx	r3
   21178:	b118      	cbz	r0, 21182 <CC_PalPowerSaveModeInit+0x16>
   2117a:	4b08      	ldr	r3, [pc, #32]	; (2119c <CC_PalPowerSaveModeInit+0x30>)
   2117c:	4808      	ldr	r0, [pc, #32]	; (211a0 <CC_PalPowerSaveModeInit+0x34>)
   2117e:	685b      	ldr	r3, [r3, #4]
   21180:	4798      	blx	r3
   21182:	4a08      	ldr	r2, [pc, #32]	; (211a4 <CC_PalPowerSaveModeInit+0x38>)
   21184:	68eb      	ldr	r3, [r5, #12]
   21186:	6920      	ldr	r0, [r4, #16]
   21188:	2100      	movs	r1, #0
   2118a:	6011      	str	r1, [r2, #0]
   2118c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21190:	4718      	bx	r3
   21192:	bf00      	nop
   21194:	20000858 	.word	0x20000858
   21198:	20000848 	.word	0x20000848
   2119c:	20000838 	.word	0x20000838
   211a0:	000262b0 	.word	0x000262b0
   211a4:	200037d0 	.word	0x200037d0

000211a8 <CC_PalPowerSaveModeSelect>:
   211a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   211aa:	4d1a      	ldr	r5, [pc, #104]	; (21214 <CC_PalPowerSaveModeSelect+0x6c>)
   211ac:	4e1a      	ldr	r6, [pc, #104]	; (21218 <CC_PalPowerSaveModeSelect+0x70>)
   211ae:	4604      	mov	r4, r0
   211b0:	68b2      	ldr	r2, [r6, #8]
   211b2:	6928      	ldr	r0, [r5, #16]
   211b4:	4790      	blx	r2
   211b6:	b9e8      	cbnz	r0, 211f4 <CC_PalPowerSaveModeSelect+0x4c>
   211b8:	4f18      	ldr	r7, [pc, #96]	; (2121c <CC_PalPowerSaveModeSelect+0x74>)
   211ba:	683b      	ldr	r3, [r7, #0]
   211bc:	b14c      	cbz	r4, 211d2 <CC_PalPowerSaveModeSelect+0x2a>
   211be:	b1a3      	cbz	r3, 211ea <CC_PalPowerSaveModeSelect+0x42>
   211c0:	2b01      	cmp	r3, #1
   211c2:	d019      	beq.n	211f8 <CC_PalPowerSaveModeSelect+0x50>
   211c4:	3b01      	subs	r3, #1
   211c6:	603b      	str	r3, [r7, #0]
   211c8:	6928      	ldr	r0, [r5, #16]
   211ca:	68f3      	ldr	r3, [r6, #12]
   211cc:	4798      	blx	r3
   211ce:	2000      	movs	r0, #0
   211d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   211d2:	b943      	cbnz	r3, 211e6 <CC_PalPowerSaveModeSelect+0x3e>
   211d4:	4a12      	ldr	r2, [pc, #72]	; (21220 <CC_PalPowerSaveModeSelect+0x78>)
   211d6:	2101      	movs	r1, #1
   211d8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   211dc:	4911      	ldr	r1, [pc, #68]	; (21224 <CC_PalPowerSaveModeSelect+0x7c>)
   211de:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   211e2:	2a00      	cmp	r2, #0
   211e4:	d1fb      	bne.n	211de <CC_PalPowerSaveModeSelect+0x36>
   211e6:	3301      	adds	r3, #1
   211e8:	603b      	str	r3, [r7, #0]
   211ea:	68f3      	ldr	r3, [r6, #12]
   211ec:	6928      	ldr	r0, [r5, #16]
   211ee:	4798      	blx	r3
   211f0:	2000      	movs	r0, #0
   211f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   211f4:	480c      	ldr	r0, [pc, #48]	; (21228 <CC_PalPowerSaveModeSelect+0x80>)
   211f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   211f8:	4a0a      	ldr	r2, [pc, #40]	; (21224 <CC_PalPowerSaveModeSelect+0x7c>)
   211fa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   211fe:	2b00      	cmp	r3, #0
   21200:	d1fb      	bne.n	211fa <CC_PalPowerSaveModeSelect+0x52>
   21202:	4a07      	ldr	r2, [pc, #28]	; (21220 <CC_PalPowerSaveModeSelect+0x78>)
   21204:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   21208:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   2120c:	f7ff ff00 	bl	21010 <CC_HalMaskInterrupt>
   21210:	683b      	ldr	r3, [r7, #0]
   21212:	e7d7      	b.n	211c4 <CC_PalPowerSaveModeSelect+0x1c>
   21214:	20000858 	.word	0x20000858
   21218:	20000848 	.word	0x20000848
   2121c:	200037d0 	.word	0x200037d0
   21220:	5002a000 	.word	0x5002a000
   21224:	5002b000 	.word	0x5002b000
   21228:	ffff8fe9 	.word	0xffff8fe9

0002122c <mutex_init>:
   2122c:	4b01      	ldr	r3, [pc, #4]	; (21234 <mutex_init+0x8>)
   2122e:	681b      	ldr	r3, [r3, #0]
   21230:	4718      	bx	r3
   21232:	bf00      	nop
   21234:	20000848 	.word	0x20000848

00021238 <mutex_lock>:
   21238:	4b01      	ldr	r3, [pc, #4]	; (21240 <mutex_lock+0x8>)
   2123a:	689b      	ldr	r3, [r3, #8]
   2123c:	4718      	bx	r3
   2123e:	bf00      	nop
   21240:	20000848 	.word	0x20000848

00021244 <mutex_unlock>:
   21244:	4b01      	ldr	r3, [pc, #4]	; (2124c <mutex_unlock+0x8>)
   21246:	68db      	ldr	r3, [r3, #12]
   21248:	4718      	bx	r3
   2124a:	bf00      	nop
   2124c:	20000848 	.word	0x20000848

00021250 <startTrngHW>:
   21250:	2800      	cmp	r0, #0
   21252:	f000 8084 	beq.w	2135e <startTrngHW+0x10e>
   21256:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2125a:	460c      	mov	r4, r1
   2125c:	b083      	sub	sp, #12
   2125e:	2900      	cmp	r1, #0
   21260:	d078      	beq.n	21354 <startTrngHW+0x104>
   21262:	461d      	mov	r5, r3
   21264:	2b00      	cmp	r3, #0
   21266:	d075      	beq.n	21354 <startTrngHW+0x104>
   21268:	4607      	mov	r7, r0
   2126a:	b11a      	cbz	r2, 21274 <startTrngHW+0x24>
   2126c:	2201      	movs	r2, #1
   2126e:	2300      	movs	r3, #0
   21270:	602a      	str	r2, [r5, #0]
   21272:	6003      	str	r3, [r0, #0]
   21274:	682b      	ldr	r3, [r5, #0]
   21276:	2b00      	cmp	r3, #0
   21278:	d067      	beq.n	2134a <startTrngHW+0xfa>
   2127a:	4629      	mov	r1, r5
   2127c:	4620      	mov	r0, r4
   2127e:	f000 fde9 	bl	21e54 <LLF_RND_GetFastestRosc>
   21282:	4603      	mov	r3, r0
   21284:	2800      	cmp	r0, #0
   21286:	d161      	bne.n	2134c <startTrngHW+0xfc>
   21288:	6828      	ldr	r0, [r5, #0]
   2128a:	4621      	mov	r1, r4
   2128c:	f000 fdc4 	bl	21e18 <LLF_RND_GetRoscSampleCnt>
   21290:	4603      	mov	r3, r0
   21292:	2800      	cmp	r0, #0
   21294:	d15a      	bne.n	2134c <startTrngHW+0xfc>
   21296:	682a      	ldr	r2, [r5, #0]
   21298:	2a08      	cmp	r2, #8
   2129a:	d072      	beq.n	21382 <startTrngHW+0x132>
   2129c:	2a04      	cmp	r2, #4
   2129e:	d073      	beq.n	21388 <startTrngHW+0x138>
   212a0:	f1a2 0802 	sub.w	r8, r2, #2
   212a4:	fab8 f888 	clz	r8, r8
   212a8:	ea4f 1858 	mov.w	r8, r8, lsr #5
   212ac:	4e38      	ldr	r6, [pc, #224]	; (21390 <startTrngHW+0x140>)
   212ae:	2001      	movs	r0, #1
   212b0:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   212b4:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   212b8:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   212bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   212be:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   212c2:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   212c6:	428a      	cmp	r2, r1
   212c8:	d1f6      	bne.n	212b8 <startTrngHW+0x68>
   212ca:	f04f 0900 	mov.w	r9, #0
   212ce:	9301      	str	r3, [sp, #4]
   212d0:	f04f 30ff 	mov.w	r0, #4294967295
   212d4:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   212d8:	f7ff fe8c 	bl	20ff4 <CC_HalClearInterruptBit>
   212dc:	f06f 021b 	mvn.w	r2, #27
   212e0:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   212e4:	4648      	mov	r0, r9
   212e6:	f7ff fe93 	bl	21010 <CC_HalMaskInterrupt>
   212ea:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   212ee:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   212f2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   212f6:	f7ff fe8b 	bl	21010 <CC_HalMaskInterrupt>
   212fa:	220a      	movs	r2, #10
   212fc:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   21300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21302:	2b01      	cmp	r3, #1
   21304:	9b01      	ldr	r3, [sp, #4]
   21306:	d02d      	beq.n	21364 <startTrngHW+0x114>
   21308:	6922      	ldr	r2, [r4, #16]
   2130a:	4922      	ldr	r1, [pc, #136]	; (21394 <startTrngHW+0x144>)
   2130c:	fba1 1202 	umull	r1, r2, r1, r2
   21310:	0912      	lsrs	r2, r2, #4
   21312:	6a61      	ldr	r1, [r4, #36]	; 0x24
   21314:	fb01 f202 	mul.w	r2, r1, r2
   21318:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2131c:	491c      	ldr	r1, [pc, #112]	; (21390 <startTrngHW+0x140>)
   2131e:	03d2      	lsls	r2, r2, #15
   21320:	0992      	lsrs	r2, r2, #6
   21322:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   21326:	2201      	movs	r2, #1
   21328:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   2132c:	683a      	ldr	r2, [r7, #0]
   2132e:	6829      	ldr	r1, [r5, #0]
   21330:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   21334:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   21338:	603a      	str	r2, [r7, #0]
   2133a:	6829      	ldr	r1, [r5, #0]
   2133c:	4618      	mov	r0, r3
   2133e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   21342:	603a      	str	r2, [r7, #0]
   21344:	b003      	add	sp, #12
   21346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2134a:	4b13      	ldr	r3, [pc, #76]	; (21398 <startTrngHW+0x148>)
   2134c:	4618      	mov	r0, r3
   2134e:	b003      	add	sp, #12
   21350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21354:	4b11      	ldr	r3, [pc, #68]	; (2139c <startTrngHW+0x14c>)
   21356:	4618      	mov	r0, r3
   21358:	b003      	add	sp, #12
   2135a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2135e:	4b0f      	ldr	r3, [pc, #60]	; (2139c <startTrngHW+0x14c>)
   21360:	4618      	mov	r0, r3
   21362:	4770      	bx	lr
   21364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21368:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   2136c:	3101      	adds	r1, #1
   2136e:	d006      	beq.n	2137e <startTrngHW+0x12e>
   21370:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   21374:	4907      	ldr	r1, [pc, #28]	; (21394 <startTrngHW+0x144>)
   21376:	fba1 1202 	umull	r1, r2, r1, r2
   2137a:	0912      	lsrs	r2, r2, #4
   2137c:	e7c9      	b.n	21312 <startTrngHW+0xc2>
   2137e:	2216      	movs	r2, #22
   21380:	e7c7      	b.n	21312 <startTrngHW+0xc2>
   21382:	f04f 0803 	mov.w	r8, #3
   21386:	e791      	b.n	212ac <startTrngHW+0x5c>
   21388:	f04f 0802 	mov.w	r8, #2
   2138c:	e78e      	b.n	212ac <startTrngHW+0x5c>
   2138e:	bf00      	nop
   21390:	5002b000 	.word	0x5002b000
   21394:	aaaaaaab 	.word	0xaaaaaaab
   21398:	00f10c31 	.word	0x00f10c31
   2139c:	00f10c35 	.word	0x00f10c35

000213a0 <LLF_RND_RepetitionCounterTest.part.0>:
   213a0:	b570      	push	{r4, r5, r6, lr}
   213a2:	00c9      	lsls	r1, r1, #3
   213a4:	2400      	movs	r4, #0
   213a6:	1e4e      	subs	r6, r1, #1
   213a8:	f04f 0c01 	mov.w	ip, #1
   213ac:	4625      	mov	r5, r4
   213ae:	46a6      	mov	lr, r4
   213b0:	e008      	b.n	213c4 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   213b2:	459e      	cmp	lr, r3
   213b4:	d015      	beq.n	213e2 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   213b6:	2501      	movs	r5, #1
   213b8:	45b4      	cmp	ip, r6
   213ba:	d817      	bhi.n	213ec <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   213bc:	3401      	adds	r4, #1
   213be:	f10c 0c01 	add.w	ip, ip, #1
   213c2:	469e      	mov	lr, r3
   213c4:	0963      	lsrs	r3, r4, #5
   213c6:	f004 011f 	and.w	r1, r4, #31
   213ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   213ce:	291f      	cmp	r1, #31
   213d0:	fa23 f301 	lsr.w	r3, r3, r1
   213d4:	bf18      	it	ne
   213d6:	f003 0301 	andne.w	r3, r3, #1
   213da:	2c00      	cmp	r4, #0
   213dc:	d1e9      	bne.n	213b2 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   213de:	2501      	movs	r5, #1
   213e0:	e7ec      	b.n	213bc <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   213e2:	3501      	adds	r5, #1
   213e4:	4295      	cmp	r5, r2
   213e6:	d1e7      	bne.n	213b8 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   213e8:	4801      	ldr	r0, [pc, #4]	; (213f0 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   213ea:	bd70      	pop	{r4, r5, r6, pc}
   213ec:	2000      	movs	r0, #0
   213ee:	bd70      	pop	{r4, r5, r6, pc}
   213f0:	00f10c36 	.word	0x00f10c36

000213f4 <LLF_RND_AdaptiveProportionTest>:
   213f4:	2800      	cmp	r0, #0
   213f6:	d03f      	beq.n	21478 <LLF_RND_AdaptiveProportionTest+0x84>
   213f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   213fc:	1e4c      	subs	r4, r1, #1
   213fe:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   21402:	d228      	bcs.n	21456 <LLF_RND_AdaptiveProportionTest+0x62>
   21404:	b33b      	cbz	r3, 21456 <LLF_RND_AdaptiveProportionTest+0x62>
   21406:	b332      	cbz	r2, 21456 <LLF_RND_AdaptiveProportionTest+0x62>
   21408:	f04f 0e00 	mov.w	lr, #0
   2140c:	00cf      	lsls	r7, r1, #3
   2140e:	4676      	mov	r6, lr
   21410:	4675      	mov	r5, lr
   21412:	4674      	mov	r4, lr
   21414:	f103 38ff 	add.w	r8, r3, #4294967295
   21418:	0961      	lsrs	r1, r4, #5
   2141a:	f004 0c1f 	and.w	ip, r4, #31
   2141e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   21422:	f1bc 0f1f 	cmp.w	ip, #31
   21426:	fa21 f10c 	lsr.w	r1, r1, ip
   2142a:	bf18      	it	ne
   2142c:	f001 0101 	andne.w	r1, r1, #1
   21430:	b1a4      	cbz	r4, 2145c <LLF_RND_AdaptiveProportionTest+0x68>
   21432:	42ab      	cmp	r3, r5
   21434:	d018      	beq.n	21468 <LLF_RND_AdaptiveProportionTest+0x74>
   21436:	428e      	cmp	r6, r1
   21438:	bf08      	it	eq
   2143a:	f10e 0e01 	addeq.w	lr, lr, #1
   2143e:	45a8      	cmp	r8, r5
   21440:	d015      	beq.n	2146e <LLF_RND_AdaptiveProportionTest+0x7a>
   21442:	3501      	adds	r5, #1
   21444:	4631      	mov	r1, r6
   21446:	3401      	adds	r4, #1
   21448:	42bc      	cmp	r4, r7
   2144a:	d001      	beq.n	21450 <LLF_RND_AdaptiveProportionTest+0x5c>
   2144c:	460e      	mov	r6, r1
   2144e:	e7e3      	b.n	21418 <LLF_RND_AdaptiveProportionTest+0x24>
   21450:	2000      	movs	r0, #0
   21452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21456:	4809      	ldr	r0, [pc, #36]	; (2147c <LLF_RND_AdaptiveProportionTest+0x88>)
   21458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2145c:	f04f 0e01 	mov.w	lr, #1
   21460:	4674      	mov	r4, lr
   21462:	4675      	mov	r5, lr
   21464:	460e      	mov	r6, r1
   21466:	e7d7      	b.n	21418 <LLF_RND_AdaptiveProportionTest+0x24>
   21468:	2501      	movs	r5, #1
   2146a:	46ae      	mov	lr, r5
   2146c:	e7eb      	b.n	21446 <LLF_RND_AdaptiveProportionTest+0x52>
   2146e:	4572      	cmp	r2, lr
   21470:	d3f1      	bcc.n	21456 <LLF_RND_AdaptiveProportionTest+0x62>
   21472:	4631      	mov	r1, r6
   21474:	461d      	mov	r5, r3
   21476:	e7e6      	b.n	21446 <LLF_RND_AdaptiveProportionTest+0x52>
   21478:	4800      	ldr	r0, [pc, #0]	; (2147c <LLF_RND_AdaptiveProportionTest+0x88>)
   2147a:	4770      	bx	lr
   2147c:	00f10c37 	.word	0x00f10c37

00021480 <getTrngSource>:
   21480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21484:	b091      	sub	sp, #68	; 0x44
   21486:	460d      	mov	r5, r1
   21488:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   2148c:	4681      	mov	r9, r0
   2148e:	2900      	cmp	r1, #0
   21490:	d14c      	bne.n	2152c <getTrngSource+0xac>
   21492:	6928      	ldr	r0, [r5, #16]
   21494:	9006      	str	r0, [sp, #24]
   21496:	981a      	ldr	r0, [sp, #104]	; 0x68
   21498:	601c      	str	r4, [r3, #0]
   2149a:	2300      	movs	r3, #0
   2149c:	6003      	str	r3, [r0, #0]
   2149e:	2a00      	cmp	r2, #0
   214a0:	f000 8124 	beq.w	216ec <getTrngSource+0x26c>
   214a4:	4b9d      	ldr	r3, [pc, #628]	; (2171c <getTrngSource+0x29c>)
   214a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   214a8:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   214ac:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   214b0:	429a      	cmp	r2, r3
   214b2:	d147      	bne.n	21544 <getTrngSource+0xc4>
   214b4:	290a      	cmp	r1, #10
   214b6:	d145      	bne.n	21544 <getTrngSource+0xc4>
   214b8:	f899 3003 	ldrb.w	r3, [r9, #3]
   214bc:	9308      	str	r3, [sp, #32]
   214be:	f104 0308 	add.w	r3, r4, #8
   214c2:	9a06      	ldr	r2, [sp, #24]
   214c4:	9307      	str	r3, [sp, #28]
   214c6:	4b96      	ldr	r3, [pc, #600]	; (21720 <getTrngSource+0x2a0>)
   214c8:	4c94      	ldr	r4, [pc, #592]	; (2171c <getTrngSource+0x29c>)
   214ca:	fba3 1302 	umull	r1, r3, r3, r2
   214ce:	089b      	lsrs	r3, r3, #2
   214d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   214d4:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   214d8:	9303      	str	r3, [sp, #12]
   214da:	2304      	movs	r3, #4
   214dc:	9305      	str	r3, [sp, #20]
   214de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   214e0:	9e06      	ldr	r6, [sp, #24]
   214e2:	601e      	str	r6, [r3, #0]
   214e4:	2e00      	cmp	r6, #0
   214e6:	d033      	beq.n	21550 <getTrngSource+0xd0>
   214e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
   214ec:	2700      	movs	r7, #0
   214ee:	f04f 0a01 	mov.w	sl, #1
   214f2:	f000 fcbf 	bl	21e74 <LLF_RND_TurnOffTrng>
   214f6:	2300      	movs	r3, #0
   214f8:	9309      	str	r3, [sp, #36]	; 0x24
   214fa:	f1b9 0f00 	cmp.w	r9, #0
   214fe:	f000 80df 	beq.w	216c0 <getTrngSource+0x240>
   21502:	2d00      	cmp	r5, #0
   21504:	f000 80dc 	beq.w	216c0 <getTrngSource+0x240>
   21508:	9b08      	ldr	r3, [sp, #32]
   2150a:	b1eb      	cbz	r3, 21548 <getTrngSource+0xc8>
   2150c:	a908      	add	r1, sp, #32
   2150e:	4628      	mov	r0, r5
   21510:	f000 fca0 	bl	21e54 <LLF_RND_GetFastestRosc>
   21514:	2800      	cmp	r0, #0
   21516:	d03e      	beq.n	21596 <getTrngSource+0x116>
   21518:	4b82      	ldr	r3, [pc, #520]	; (21724 <getTrngSource+0x2a4>)
   2151a:	4298      	cmp	r0, r3
   2151c:	d118      	bne.n	21550 <getTrngSource+0xd0>
   2151e:	9003      	str	r0, [sp, #12]
   21520:	f000 fca8 	bl	21e74 <LLF_RND_TurnOffTrng>
   21524:	9803      	ldr	r0, [sp, #12]
   21526:	b011      	add	sp, #68	; 0x44
   21528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2152c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   21530:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   21534:	3601      	adds	r6, #1
   21536:	bf14      	ite	ne
   21538:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   2153c:	f44f 7004 	moveq.w	r0, #528	; 0x210
   21540:	9006      	str	r0, [sp, #24]
   21542:	e7a8      	b.n	21496 <getTrngSource+0x16>
   21544:	4878      	ldr	r0, [pc, #480]	; (21728 <getTrngSource+0x2a8>)
   21546:	e7ea      	b.n	2151e <getTrngSource+0x9e>
   21548:	4878      	ldr	r0, [pc, #480]	; (2172c <getTrngSource+0x2ac>)
   2154a:	4b76      	ldr	r3, [pc, #472]	; (21724 <getTrngSource+0x2a4>)
   2154c:	4298      	cmp	r0, r3
   2154e:	d0e6      	beq.n	2151e <getTrngSource+0x9e>
   21550:	9b08      	ldr	r3, [sp, #32]
   21552:	2b08      	cmp	r3, #8
   21554:	f000 80c8 	beq.w	216e8 <getTrngSource+0x268>
   21558:	005b      	lsls	r3, r3, #1
   2155a:	2200      	movs	r2, #0
   2155c:	9308      	str	r3, [sp, #32]
   2155e:	9200      	str	r2, [sp, #0]
   21560:	ab08      	add	r3, sp, #32
   21562:	4629      	mov	r1, r5
   21564:	4648      	mov	r0, r9
   21566:	f7ff fe73 	bl	21250 <startTrngHW>
   2156a:	4b70      	ldr	r3, [pc, #448]	; (2172c <getTrngSource+0x2ac>)
   2156c:	4298      	cmp	r0, r3
   2156e:	f000 80b7 	beq.w	216e0 <getTrngSource+0x260>
   21572:	2800      	cmp	r0, #0
   21574:	d1d3      	bne.n	2151e <getTrngSource+0x9e>
   21576:	f8d9 2000 	ldr.w	r2, [r9]
   2157a:	0a13      	lsrs	r3, r2, #8
   2157c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   21580:	4313      	orrs	r3, r2
   21582:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   21586:	f8c9 3000 	str.w	r3, [r9]
   2158a:	9b05      	ldr	r3, [sp, #20]
   2158c:	3b01      	subs	r3, #1
   2158e:	9305      	str	r3, [sp, #20]
   21590:	d1a5      	bne.n	214de <getTrngSource+0x5e>
   21592:	2000      	movs	r0, #0
   21594:	e7c3      	b.n	2151e <getTrngSource+0x9e>
   21596:	9808      	ldr	r0, [sp, #32]
   21598:	4629      	mov	r1, r5
   2159a:	f000 fc3d 	bl	21e18 <LLF_RND_GetRoscSampleCnt>
   2159e:	2800      	cmp	r0, #0
   215a0:	d1ba      	bne.n	21518 <getTrngSource+0x98>
   215a2:	9b08      	ldr	r3, [sp, #32]
   215a4:	2b08      	cmp	r3, #8
   215a6:	f000 8095 	beq.w	216d4 <getTrngSource+0x254>
   215aa:	2b04      	cmp	r3, #4
   215ac:	f000 8095 	beq.w	216da <getTrngSource+0x25a>
   215b0:	f1a3 0302 	sub.w	r3, r3, #2
   215b4:	fab3 f383 	clz	r3, r3
   215b8:	095b      	lsrs	r3, r3, #5
   215ba:	9304      	str	r3, [sp, #16]
   215bc:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   215c0:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   215c4:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   215c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   215ca:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   215ce:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   215d2:	4293      	cmp	r3, r2
   215d4:	d1f6      	bne.n	215c4 <getTrngSource+0x144>
   215d6:	f04f 0b00 	mov.w	fp, #0
   215da:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   215de:	f04f 30ff 	mov.w	r0, #4294967295
   215e2:	f7ff fd07 	bl	20ff4 <CC_HalClearInterruptBit>
   215e6:	f06f 031b 	mvn.w	r3, #27
   215ea:	4658      	mov	r0, fp
   215ec:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   215f0:	f7ff fd0e 	bl	21010 <CC_HalMaskInterrupt>
   215f4:	9b04      	ldr	r3, [sp, #16]
   215f6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   215fa:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   215fe:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   21602:	f7ff fd05 	bl	21010 <CC_HalMaskInterrupt>
   21606:	230a      	movs	r3, #10
   21608:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   2160c:	692b      	ldr	r3, [r5, #16]
   2160e:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   21612:	fbab 2303 	umull	r2, r3, fp, r3
   21616:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   21618:	091b      	lsrs	r3, r3, #4
   2161a:	fb02 f303 	mul.w	r3, r2, r3
   2161e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   21622:	03db      	lsls	r3, r3, #15
   21624:	099b      	lsrs	r3, r3, #6
   21626:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   2162a:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   2162e:	9908      	ldr	r1, [sp, #32]
   21630:	f8d9 2000 	ldr.w	r2, [r9]
   21634:	020b      	lsls	r3, r1, #8
   21636:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   2163a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   2163e:	4313      	orrs	r3, r2
   21640:	f8c9 3000 	str.w	r3, [r9]
   21644:	a809      	add	r0, sp, #36	; 0x24
   21646:	f000 fbd7 	bl	21df8 <LLF_RND_WaitRngInterrupt>
   2164a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2164c:	f003 031a 	and.w	r3, r3, #26
   21650:	4303      	orrs	r3, r0
   21652:	f47f af7d 	bne.w	21550 <getTrngSource+0xd0>
   21656:	fbab 3b06 	umull	r3, fp, fp, r6
   2165a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   2165e:	930a      	str	r3, [sp, #40]	; 0x28
   21660:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   21664:	930b      	str	r3, [sp, #44]	; 0x2c
   21666:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   2166a:	930c      	str	r3, [sp, #48]	; 0x30
   2166c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   21670:	930d      	str	r3, [sp, #52]	; 0x34
   21672:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   21676:	930e      	str	r3, [sp, #56]	; 0x38
   21678:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2167c:	930f      	str	r3, [sp, #60]	; 0x3c
   2167e:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   21682:	d101      	bne.n	21688 <getTrngSource+0x208>
   21684:	9b03      	ldr	r3, [sp, #12]
   21686:	b9eb      	cbnz	r3, 216c4 <getTrngSource+0x244>
   21688:	4640      	mov	r0, r8
   2168a:	2218      	movs	r2, #24
   2168c:	a90a      	add	r1, sp, #40	; 0x28
   2168e:	3e18      	subs	r6, #24
   21690:	f108 0818 	add.w	r8, r8, #24
   21694:	f7ff fd3c 	bl	21110 <CC_PalMemCopyPlat>
   21698:	3701      	adds	r7, #1
   2169a:	2e00      	cmp	r6, #0
   2169c:	f47f af29 	bne.w	214f2 <getTrngSource+0x72>
   216a0:	9b06      	ldr	r3, [sp, #24]
   216a2:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   216a6:	d836      	bhi.n	21716 <getTrngSource+0x296>
   216a8:	9e07      	ldr	r6, [sp, #28]
   216aa:	696a      	ldr	r2, [r5, #20]
   216ac:	4619      	mov	r1, r3
   216ae:	4630      	mov	r0, r6
   216b0:	461f      	mov	r7, r3
   216b2:	f7ff fe75 	bl	213a0 <LLF_RND_RepetitionCounterTest.part.0>
   216b6:	b320      	cbz	r0, 21702 <getTrngSource+0x282>
   216b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   216ba:	2300      	movs	r3, #0
   216bc:	6013      	str	r3, [r2, #0]
   216be:	e72b      	b.n	21518 <getTrngSource+0x98>
   216c0:	481b      	ldr	r0, [pc, #108]	; (21730 <getTrngSource+0x2b0>)
   216c2:	e729      	b.n	21518 <getTrngSource+0x98>
   216c4:	4640      	mov	r0, r8
   216c6:	461a      	mov	r2, r3
   216c8:	a90a      	add	r1, sp, #40	; 0x28
   216ca:	1af6      	subs	r6, r6, r3
   216cc:	4498      	add	r8, r3
   216ce:	f7ff fd1f 	bl	21110 <CC_PalMemCopyPlat>
   216d2:	e7e1      	b.n	21698 <getTrngSource+0x218>
   216d4:	2303      	movs	r3, #3
   216d6:	9304      	str	r3, [sp, #16]
   216d8:	e770      	b.n	215bc <getTrngSource+0x13c>
   216da:	2302      	movs	r3, #2
   216dc:	9304      	str	r3, [sp, #16]
   216de:	e76d      	b.n	215bc <getTrngSource+0x13c>
   216e0:	6a2b      	ldr	r3, [r5, #32]
   216e2:	2b00      	cmp	r3, #0
   216e4:	f43f af1b 	beq.w	2151e <getTrngSource+0x9e>
   216e8:	4812      	ldr	r0, [pc, #72]	; (21734 <getTrngSource+0x2b4>)
   216ea:	e718      	b.n	2151e <getTrngSource+0x9e>
   216ec:	9100      	str	r1, [sp, #0]
   216ee:	ab08      	add	r3, sp, #32
   216f0:	2201      	movs	r2, #1
   216f2:	4629      	mov	r1, r5
   216f4:	4648      	mov	r0, r9
   216f6:	f7ff fdab 	bl	21250 <startTrngHW>
   216fa:	2800      	cmp	r0, #0
   216fc:	f43f aedf 	beq.w	214be <getTrngSource+0x3e>
   21700:	e70d      	b.n	2151e <getTrngSource+0x9e>
   21702:	69aa      	ldr	r2, [r5, #24]
   21704:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21708:	4639      	mov	r1, r7
   2170a:	4630      	mov	r0, r6
   2170c:	f7ff fe72 	bl	213f4 <LLF_RND_AdaptiveProportionTest>
   21710:	2800      	cmp	r0, #0
   21712:	d1d1      	bne.n	216b8 <getTrngSource+0x238>
   21714:	e73d      	b.n	21592 <getTrngSource+0x112>
   21716:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   21718:	601e      	str	r6, [r3, #0]
   2171a:	e719      	b.n	21550 <getTrngSource+0xd0>
   2171c:	5002b000 	.word	0x5002b000
   21720:	aaaaaaab 	.word	0xaaaaaaab
   21724:	00f10c02 	.word	0x00f10c02
   21728:	00f10c30 	.word	0x00f10c30
   2172c:	00f10c31 	.word	0x00f10c31
   21730:	00f10c35 	.word	0x00f10c35
   21734:	00f10c32 	.word	0x00f10c32

00021738 <LLF_RND_GetTrngSource>:
   21738:	b410      	push	{r4}
   2173a:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   2173e:	9401      	str	r4, [sp, #4]
   21740:	9c03      	ldr	r4, [sp, #12]
   21742:	9402      	str	r4, [sp, #8]
   21744:	2400      	movs	r4, #0
   21746:	9403      	str	r4, [sp, #12]
   21748:	bc10      	pop	{r4}
   2174a:	f7ff be99 	b.w	21480 <getTrngSource>
   2174e:	bf00      	nop

00021750 <LLF_RND_RunTrngStartupTest>:
   21750:	b510      	push	{r4, lr}
   21752:	b086      	sub	sp, #24
   21754:	ab05      	add	r3, sp, #20
   21756:	2401      	movs	r4, #1
   21758:	e9cd 2401 	strd	r2, r4, [sp, #4]
   2175c:	9300      	str	r3, [sp, #0]
   2175e:	2200      	movs	r2, #0
   21760:	ab04      	add	r3, sp, #16
   21762:	f7ff fe8d 	bl	21480 <getTrngSource>
   21766:	b006      	add	sp, #24
   21768:	bd10      	pop	{r4, pc}
   2176a:	bf00      	nop

0002176c <mbedtls_hardware_poll>:
   2176c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2176e:	b089      	sub	sp, #36	; 0x24
   21770:	9205      	str	r2, [sp, #20]
   21772:	2900      	cmp	r1, #0
   21774:	d064      	beq.n	21840 <mbedtls_hardware_poll+0xd4>
   21776:	461c      	mov	r4, r3
   21778:	2b00      	cmp	r3, #0
   2177a:	d061      	beq.n	21840 <mbedtls_hardware_poll+0xd4>
   2177c:	4615      	mov	r5, r2
   2177e:	2a00      	cmp	r2, #0
   21780:	d05e      	beq.n	21840 <mbedtls_hardware_poll+0xd4>
   21782:	4f31      	ldr	r7, [pc, #196]	; (21848 <mbedtls_hardware_poll+0xdc>)
   21784:	460e      	mov	r6, r1
   21786:	6838      	ldr	r0, [r7, #0]
   21788:	f04f 31ff 	mov.w	r1, #4294967295
   2178c:	f7ff fcdc 	bl	21148 <CC_PalMutexLock>
   21790:	2800      	cmp	r0, #0
   21792:	d14b      	bne.n	2182c <mbedtls_hardware_poll+0xc0>
   21794:	2000      	movs	r0, #0
   21796:	f7ff fd07 	bl	211a8 <CC_PalPowerSaveModeSelect>
   2179a:	2800      	cmp	r0, #0
   2179c:	d142      	bne.n	21824 <mbedtls_hardware_poll+0xb8>
   2179e:	482b      	ldr	r0, [pc, #172]	; (2184c <mbedtls_hardware_poll+0xe0>)
   217a0:	f000 fa9a 	bl	21cd8 <RNG_PLAT_SetUserRngParameters>
   217a4:	b1d8      	cbz	r0, 217de <mbedtls_hardware_poll+0x72>
   217a6:	2001      	movs	r0, #1
   217a8:	f04f 36ff 	mov.w	r6, #4294967295
   217ac:	f7ff fcfc 	bl	211a8 <CC_PalPowerSaveModeSelect>
   217b0:	2800      	cmp	r0, #0
   217b2:	d133      	bne.n	2181c <mbedtls_hardware_poll+0xb0>
   217b4:	4826      	ldr	r0, [pc, #152]	; (21850 <mbedtls_hardware_poll+0xe4>)
   217b6:	f44f 7108 	mov.w	r1, #544	; 0x220
   217ba:	f7fe fe5f 	bl	2047c <mbedtls_zeroize_internal>
   217be:	4825      	ldr	r0, [pc, #148]	; (21854 <mbedtls_hardware_poll+0xe8>)
   217c0:	2104      	movs	r1, #4
   217c2:	f7fe fe5b 	bl	2047c <mbedtls_zeroize_internal>
   217c6:	4821      	ldr	r0, [pc, #132]	; (2184c <mbedtls_hardware_poll+0xe0>)
   217c8:	2128      	movs	r1, #40	; 0x28
   217ca:	f7fe fe57 	bl	2047c <mbedtls_zeroize_internal>
   217ce:	6838      	ldr	r0, [r7, #0]
   217d0:	f7ff fcc2 	bl	21158 <CC_PalMutexUnlock>
   217d4:	2800      	cmp	r0, #0
   217d6:	d12d      	bne.n	21834 <mbedtls_hardware_poll+0xc8>
   217d8:	4630      	mov	r0, r6
   217da:	b009      	add	sp, #36	; 0x24
   217dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217de:	4b1c      	ldr	r3, [pc, #112]	; (21850 <mbedtls_hardware_poll+0xe4>)
   217e0:	9302      	str	r3, [sp, #8]
   217e2:	ab07      	add	r3, sp, #28
   217e4:	9003      	str	r0, [sp, #12]
   217e6:	4602      	mov	r2, r0
   217e8:	9300      	str	r3, [sp, #0]
   217ea:	4918      	ldr	r1, [pc, #96]	; (2184c <mbedtls_hardware_poll+0xe0>)
   217ec:	4819      	ldr	r0, [pc, #100]	; (21854 <mbedtls_hardware_poll+0xe8>)
   217ee:	9401      	str	r4, [sp, #4]
   217f0:	ab05      	add	r3, sp, #20
   217f2:	f7ff ffa1 	bl	21738 <LLF_RND_GetTrngSource>
   217f6:	4603      	mov	r3, r0
   217f8:	2800      	cmp	r0, #0
   217fa:	d1d4      	bne.n	217a6 <mbedtls_hardware_poll+0x3a>
   217fc:	6822      	ldr	r2, [r4, #0]
   217fe:	42aa      	cmp	r2, r5
   21800:	d3d1      	bcc.n	217a6 <mbedtls_hardware_poll+0x3a>
   21802:	9907      	ldr	r1, [sp, #28]
   21804:	4630      	mov	r0, r6
   21806:	3108      	adds	r1, #8
   21808:	462a      	mov	r2, r5
   2180a:	461e      	mov	r6, r3
   2180c:	f7ff fc80 	bl	21110 <CC_PalMemCopyPlat>
   21810:	6025      	str	r5, [r4, #0]
   21812:	2001      	movs	r0, #1
   21814:	f7ff fcc8 	bl	211a8 <CC_PalPowerSaveModeSelect>
   21818:	2800      	cmp	r0, #0
   2181a:	d0cb      	beq.n	217b4 <mbedtls_hardware_poll+0x48>
   2181c:	480e      	ldr	r0, [pc, #56]	; (21858 <mbedtls_hardware_poll+0xec>)
   2181e:	f7fe fd17 	bl	20250 <CC_PalAbort>
   21822:	e7c7      	b.n	217b4 <mbedtls_hardware_poll+0x48>
   21824:	480d      	ldr	r0, [pc, #52]	; (2185c <mbedtls_hardware_poll+0xf0>)
   21826:	f7fe fd13 	bl	20250 <CC_PalAbort>
   2182a:	e7b8      	b.n	2179e <mbedtls_hardware_poll+0x32>
   2182c:	480c      	ldr	r0, [pc, #48]	; (21860 <mbedtls_hardware_poll+0xf4>)
   2182e:	f7fe fd0f 	bl	20250 <CC_PalAbort>
   21832:	e7af      	b.n	21794 <mbedtls_hardware_poll+0x28>
   21834:	480b      	ldr	r0, [pc, #44]	; (21864 <mbedtls_hardware_poll+0xf8>)
   21836:	f7fe fd0b 	bl	20250 <CC_PalAbort>
   2183a:	4630      	mov	r0, r6
   2183c:	b009      	add	sp, #36	; 0x24
   2183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21840:	f04f 36ff 	mov.w	r6, #4294967295
   21844:	e7c8      	b.n	217d8 <mbedtls_hardware_poll+0x6c>
   21846:	bf00      	nop
   21848:	20000898 	.word	0x20000898
   2184c:	200039f8 	.word	0x200039f8
   21850:	200037d8 	.word	0x200037d8
   21854:	200037d4 	.word	0x200037d4
   21858:	00026278 	.word	0x00026278
   2185c:	00026258 	.word	0x00026258
   21860:	00026240 	.word	0x00026240
   21864:	000262d0 	.word	0x000262d0

00021868 <cc_mbedtls_aes_init>:
   21868:	b510      	push	{r4, lr}
   2186a:	4604      	mov	r4, r0
   2186c:	b130      	cbz	r0, 2187c <cc_mbedtls_aes_init+0x14>
   2186e:	2200      	movs	r2, #0
   21870:	2301      	movs	r3, #1
   21872:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   21876:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   2187a:	bd10      	pop	{r4, pc}
   2187c:	4801      	ldr	r0, [pc, #4]	; (21884 <cc_mbedtls_aes_init+0x1c>)
   2187e:	f7fe fce7 	bl	20250 <CC_PalAbort>
   21882:	e7f4      	b.n	2186e <cc_mbedtls_aes_init+0x6>
   21884:	000262e8 	.word	0x000262e8

00021888 <cc_mbedtls_aes_free>:
   21888:	b118      	cbz	r0, 21892 <cc_mbedtls_aes_free+0xa>
   2188a:	2274      	movs	r2, #116	; 0x74
   2188c:	2100      	movs	r1, #0
   2188e:	f7ff bc41 	b.w	21114 <CC_PalMemSetPlat>
   21892:	4770      	bx	lr

00021894 <cc_mbedtls_aes_setkey_enc>:
   21894:	b190      	cbz	r0, 218bc <cc_mbedtls_aes_setkey_enc+0x28>
   21896:	b1a1      	cbz	r1, 218c2 <cc_mbedtls_aes_setkey_enc+0x2e>
   21898:	b510      	push	{r4, lr}
   2189a:	2a80      	cmp	r2, #128	; 0x80
   2189c:	f04f 0400 	mov.w	r4, #0
   218a0:	6384      	str	r4, [r0, #56]	; 0x38
   218a2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   218a6:	d106      	bne.n	218b6 <cc_mbedtls_aes_setkey_enc+0x22>
   218a8:	2210      	movs	r2, #16
   218aa:	6304      	str	r4, [r0, #48]	; 0x30
   218ac:	4410      	add	r0, r2
   218ae:	f7ff fc2f 	bl	21110 <CC_PalMemCopyPlat>
   218b2:	4620      	mov	r0, r4
   218b4:	bd10      	pop	{r4, pc}
   218b6:	f06f 001f 	mvn.w	r0, #31
   218ba:	bd10      	pop	{r4, pc}
   218bc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   218c0:	4770      	bx	lr
   218c2:	f06f 001f 	mvn.w	r0, #31
   218c6:	4770      	bx	lr

000218c8 <cc_mbedtls_aes_crypt_ecb>:
   218c8:	b328      	cbz	r0, 21916 <cc_mbedtls_aes_crypt_ecb+0x4e>
   218ca:	b322      	cbz	r2, 21916 <cc_mbedtls_aes_crypt_ecb+0x4e>
   218cc:	b31b      	cbz	r3, 21916 <cc_mbedtls_aes_crypt_ecb+0x4e>
   218ce:	2901      	cmp	r1, #1
   218d0:	d821      	bhi.n	21916 <cc_mbedtls_aes_crypt_ecb+0x4e>
   218d2:	b570      	push	{r4, r5, r6, lr}
   218d4:	4604      	mov	r4, r0
   218d6:	6b81      	ldr	r1, [r0, #56]	; 0x38
   218d8:	b086      	sub	sp, #24
   218da:	d017      	beq.n	2190c <cc_mbedtls_aes_crypt_ecb+0x44>
   218dc:	2901      	cmp	r1, #1
   218de:	d117      	bne.n	21910 <cc_mbedtls_aes_crypt_ecb+0x48>
   218e0:	2510      	movs	r5, #16
   218e2:	2100      	movs	r1, #0
   218e4:	eb0d 0605 	add.w	r6, sp, r5
   218e8:	6361      	str	r1, [r4, #52]	; 0x34
   218ea:	4610      	mov	r0, r2
   218ec:	9500      	str	r5, [sp, #0]
   218ee:	9601      	str	r6, [sp, #4]
   218f0:	aa02      	add	r2, sp, #8
   218f2:	4629      	mov	r1, r5
   218f4:	f000 faca 	bl	21e8c <SetDataBuffersInfo>
   218f8:	b950      	cbnz	r0, 21910 <cc_mbedtls_aes_crypt_ecb+0x48>
   218fa:	462b      	mov	r3, r5
   218fc:	4632      	mov	r2, r6
   218fe:	a902      	add	r1, sp, #8
   21900:	4620      	mov	r0, r4
   21902:	f000 fd4b 	bl	2239c <ProcessAesDrv>
   21906:	b918      	cbnz	r0, 21910 <cc_mbedtls_aes_crypt_ecb+0x48>
   21908:	b006      	add	sp, #24
   2190a:	bd70      	pop	{r4, r5, r6, pc}
   2190c:	2900      	cmp	r1, #0
   2190e:	d0e7      	beq.n	218e0 <cc_mbedtls_aes_crypt_ecb+0x18>
   21910:	f06f 0021 	mvn.w	r0, #33	; 0x21
   21914:	e7f8      	b.n	21908 <cc_mbedtls_aes_crypt_ecb+0x40>
   21916:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2191a:	4770      	bx	lr

0002191c <cc_mbedtls_sha256_init>:
   2191c:	b510      	push	{r4, lr}
   2191e:	4604      	mov	r4, r0
   21920:	b128      	cbz	r0, 2192e <cc_mbedtls_sha256_init+0x12>
   21922:	4620      	mov	r0, r4
   21924:	21f4      	movs	r1, #244	; 0xf4
   21926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2192a:	f7ff bbf5 	b.w	21118 <CC_PalMemSetZeroPlat>
   2192e:	4804      	ldr	r0, [pc, #16]	; (21940 <cc_mbedtls_sha256_init+0x24>)
   21930:	f7fe fc8e 	bl	20250 <CC_PalAbort>
   21934:	4620      	mov	r0, r4
   21936:	21f4      	movs	r1, #244	; 0xf4
   21938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2193c:	f7ff bbec 	b.w	21118 <CC_PalMemSetZeroPlat>
   21940:	000262fc 	.word	0x000262fc

00021944 <cc_mbedtls_sha256_free>:
   21944:	b110      	cbz	r0, 2194c <cc_mbedtls_sha256_free+0x8>
   21946:	21f4      	movs	r1, #244	; 0xf4
   21948:	f7fe bd98 	b.w	2047c <mbedtls_zeroize_internal>
   2194c:	4770      	bx	lr
   2194e:	bf00      	nop

00021950 <cc_mbedtls_sha256_starts>:
   21950:	b508      	push	{r3, lr}
   21952:	b161      	cbz	r1, 2196e <cc_mbedtls_sha256_starts+0x1e>
   21954:	2901      	cmp	r1, #1
   21956:	d107      	bne.n	21968 <cc_mbedtls_sha256_starts+0x18>
   21958:	2102      	movs	r1, #2
   2195a:	f000 f85b 	bl	21a14 <mbedtls_sha_starts_internal>
   2195e:	2800      	cmp	r0, #0
   21960:	bf18      	it	ne
   21962:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   21966:	bd08      	pop	{r3, pc}
   21968:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2196c:	bd08      	pop	{r3, pc}
   2196e:	2101      	movs	r1, #1
   21970:	f000 f850 	bl	21a14 <mbedtls_sha_starts_internal>
   21974:	e7f3      	b.n	2195e <cc_mbedtls_sha256_starts+0xe>
   21976:	bf00      	nop

00021978 <cc_mbedtls_sha256_update>:
   21978:	b530      	push	{r4, r5, lr}
   2197a:	4605      	mov	r5, r0
   2197c:	1888      	adds	r0, r1, r2
   2197e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   21982:	b0a1      	sub	sp, #132	; 0x84
   21984:	460b      	mov	r3, r1
   21986:	4614      	mov	r4, r2
   21988:	d801      	bhi.n	2198e <cc_mbedtls_sha256_update+0x16>
   2198a:	2a80      	cmp	r2, #128	; 0x80
   2198c:	d90c      	bls.n	219a8 <cc_mbedtls_sha256_update+0x30>
   2198e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   21992:	d917      	bls.n	219c4 <cc_mbedtls_sha256_update+0x4c>
   21994:	4622      	mov	r2, r4
   21996:	4619      	mov	r1, r3
   21998:	4628      	mov	r0, r5
   2199a:	f000 f87d 	bl	21a98 <mbedtls_sha_update_internal>
   2199e:	4604      	mov	r4, r0
   219a0:	b984      	cbnz	r4, 219c4 <cc_mbedtls_sha256_update+0x4c>
   219a2:	4620      	mov	r0, r4
   219a4:	b021      	add	sp, #132	; 0x84
   219a6:	bd30      	pop	{r4, r5, pc}
   219a8:	4668      	mov	r0, sp
   219aa:	f7ff fbb1 	bl	21110 <CC_PalMemCopyPlat>
   219ae:	4622      	mov	r2, r4
   219b0:	4669      	mov	r1, sp
   219b2:	4628      	mov	r0, r5
   219b4:	f000 f870 	bl	21a98 <mbedtls_sha_update_internal>
   219b8:	2180      	movs	r1, #128	; 0x80
   219ba:	4604      	mov	r4, r0
   219bc:	4668      	mov	r0, sp
   219be:	f7ff fbab 	bl	21118 <CC_PalMemSetZeroPlat>
   219c2:	e7ed      	b.n	219a0 <cc_mbedtls_sha256_update+0x28>
   219c4:	f06f 0436 	mvn.w	r4, #54	; 0x36
   219c8:	e7eb      	b.n	219a2 <cc_mbedtls_sha256_update+0x2a>
   219ca:	bf00      	nop

000219cc <cc_mbedtls_sha256_finish>:
   219cc:	b570      	push	{r4, r5, r6, lr}
   219ce:	b1e8      	cbz	r0, 21a0c <cc_mbedtls_sha256_finish+0x40>
   219d0:	460e      	mov	r6, r1
   219d2:	b1d9      	cbz	r1, 21a0c <cc_mbedtls_sha256_finish+0x40>
   219d4:	4604      	mov	r4, r0
   219d6:	f000 f831 	bl	21a3c <mbedtls_sha_finish_internal>
   219da:	4605      	mov	r5, r0
   219dc:	b9b0      	cbnz	r0, 21a0c <cc_mbedtls_sha256_finish+0x40>
   219de:	6823      	ldr	r3, [r4, #0]
   219e0:	2b01      	cmp	r3, #1
   219e2:	d00b      	beq.n	219fc <cc_mbedtls_sha256_finish+0x30>
   219e4:	2b02      	cmp	r3, #2
   219e6:	d001      	beq.n	219ec <cc_mbedtls_sha256_finish+0x20>
   219e8:	4628      	mov	r0, r5
   219ea:	bd70      	pop	{r4, r5, r6, pc}
   219ec:	221c      	movs	r2, #28
   219ee:	f104 0108 	add.w	r1, r4, #8
   219f2:	4630      	mov	r0, r6
   219f4:	f7ff fb8c 	bl	21110 <CC_PalMemCopyPlat>
   219f8:	4628      	mov	r0, r5
   219fa:	bd70      	pop	{r4, r5, r6, pc}
   219fc:	2220      	movs	r2, #32
   219fe:	f104 0108 	add.w	r1, r4, #8
   21a02:	4630      	mov	r0, r6
   21a04:	f7ff fb84 	bl	21110 <CC_PalMemCopyPlat>
   21a08:	4628      	mov	r0, r5
   21a0a:	bd70      	pop	{r4, r5, r6, pc}
   21a0c:	f06f 0536 	mvn.w	r5, #54	; 0x36
   21a10:	e7ea      	b.n	219e8 <cc_mbedtls_sha256_finish+0x1c>
   21a12:	bf00      	nop

00021a14 <mbedtls_sha_starts_internal>:
   21a14:	b178      	cbz	r0, 21a36 <mbedtls_sha_starts_internal+0x22>
   21a16:	b538      	push	{r3, r4, r5, lr}
   21a18:	4604      	mov	r4, r0
   21a1a:	460d      	mov	r5, r1
   21a1c:	21f0      	movs	r1, #240	; 0xf0
   21a1e:	f7ff fb7b 	bl	21118 <CC_PalMemSetZeroPlat>
   21a22:	2340      	movs	r3, #64	; 0x40
   21a24:	6025      	str	r5, [r4, #0]
   21a26:	65e3      	str	r3, [r4, #92]	; 0x5c
   21a28:	4620      	mov	r0, r4
   21a2a:	f000 fa63 	bl	21ef4 <InitHashDrv>
   21a2e:	3800      	subs	r0, #0
   21a30:	bf18      	it	ne
   21a32:	2001      	movne	r0, #1
   21a34:	bd38      	pop	{r3, r4, r5, pc}
   21a36:	2001      	movs	r0, #1
   21a38:	4770      	bx	lr
   21a3a:	bf00      	nop

00021a3c <mbedtls_sha_finish_internal>:
   21a3c:	b570      	push	{r4, r5, r6, lr}
   21a3e:	6e05      	ldr	r5, [r0, #96]	; 0x60
   21a40:	b0a4      	sub	sp, #144	; 0x90
   21a42:	4604      	mov	r4, r0
   21a44:	ae04      	add	r6, sp, #16
   21a46:	b9e5      	cbnz	r5, 21a82 <mbedtls_sha_finish_internal+0x46>
   21a48:	2201      	movs	r2, #1
   21a4a:	2300      	movs	r3, #0
   21a4c:	6062      	str	r2, [r4, #4]
   21a4e:	4630      	mov	r0, r6
   21a50:	e9cd 3300 	strd	r3, r3, [sp]
   21a54:	aa02      	add	r2, sp, #8
   21a56:	4629      	mov	r1, r5
   21a58:	f000 fa18 	bl	21e8c <SetDataBuffersInfo>
   21a5c:	b110      	cbz	r0, 21a64 <mbedtls_sha_finish_internal+0x28>
   21a5e:	2001      	movs	r0, #1
   21a60:	b024      	add	sp, #144	; 0x90
   21a62:	bd70      	pop	{r4, r5, r6, pc}
   21a64:	462a      	mov	r2, r5
   21a66:	a902      	add	r1, sp, #8
   21a68:	4620      	mov	r0, r4
   21a6a:	f000 fa6d 	bl	21f48 <ProcessHashDrv>
   21a6e:	2800      	cmp	r0, #0
   21a70:	d1f5      	bne.n	21a5e <mbedtls_sha_finish_internal+0x22>
   21a72:	4620      	mov	r0, r4
   21a74:	f000 fb7e 	bl	22174 <FinishHashDrv>
   21a78:	2800      	cmp	r0, #0
   21a7a:	d1f0      	bne.n	21a5e <mbedtls_sha_finish_internal+0x22>
   21a7c:	6620      	str	r0, [r4, #96]	; 0x60
   21a7e:	b024      	add	sp, #144	; 0x90
   21a80:	bd70      	pop	{r4, r5, r6, pc}
   21a82:	2d80      	cmp	r5, #128	; 0x80
   21a84:	462a      	mov	r2, r5
   21a86:	f100 0164 	add.w	r1, r0, #100	; 0x64
   21a8a:	bf28      	it	cs
   21a8c:	2280      	movcs	r2, #128	; 0x80
   21a8e:	4630      	mov	r0, r6
   21a90:	f7ff fb3e 	bl	21110 <CC_PalMemCopyPlat>
   21a94:	6e25      	ldr	r5, [r4, #96]	; 0x60
   21a96:	e7d7      	b.n	21a48 <mbedtls_sha_finish_internal+0xc>

00021a98 <mbedtls_sha_update_internal>:
   21a98:	2800      	cmp	r0, #0
   21a9a:	f000 80cd 	beq.w	21c38 <mbedtls_sha_update_internal+0x1a0>
   21a9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21aa2:	4615      	mov	r5, r2
   21aa4:	b0a5      	sub	sp, #148	; 0x94
   21aa6:	2a00      	cmp	r2, #0
   21aa8:	f000 80b4 	beq.w	21c14 <mbedtls_sha_update_internal+0x17c>
   21aac:	460f      	mov	r7, r1
   21aae:	2900      	cmp	r1, #0
   21ab0:	f000 80ac 	beq.w	21c0c <mbedtls_sha_update_internal+0x174>
   21ab4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   21ab8:	4606      	mov	r6, r0
   21aba:	6e00      	ldr	r0, [r0, #96]	; 0x60
   21abc:	d37d      	bcc.n	21bba <mbedtls_sha_update_internal+0x122>
   21abe:	f64f 78ff 	movw	r8, #65535	; 0xffff
   21ac2:	f106 0964 	add.w	r9, r6, #100	; 0x64
   21ac6:	e014      	b.n	21af2 <mbedtls_sha_update_internal+0x5a>
   21ac8:	4283      	cmp	r3, r0
   21aca:	46ba      	mov	sl, r7
   21acc:	f64f 74ff 	movw	r4, #65535	; 0xffff
   21ad0:	d029      	beq.n	21b26 <mbedtls_sha_update_internal+0x8e>
   21ad2:	fbb4 fbf3 	udiv	fp, r4, r3
   21ad6:	fb03 fb0b 	mul.w	fp, r3, fp
   21ada:	f1bb 0f00 	cmp.w	fp, #0
   21ade:	d144      	bne.n	21b6a <mbedtls_sha_update_internal+0xd2>
   21ae0:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   21ae4:	4447      	add	r7, r8
   21ae6:	3dff      	subs	r5, #255	; 0xff
   21ae8:	2c00      	cmp	r4, #0
   21aea:	d159      	bne.n	21ba0 <mbedtls_sha_update_internal+0x108>
   21aec:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   21af0:	d363      	bcc.n	21bba <mbedtls_sha_update_internal+0x122>
   21af2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   21af4:	1a1c      	subs	r4, r3, r0
   21af6:	fbb4 f2f3 	udiv	r2, r4, r3
   21afa:	fb03 4412 	mls	r4, r3, r2, r4
   21afe:	2c00      	cmp	r4, #0
   21b00:	d0e2      	beq.n	21ac8 <mbedtls_sha_update_internal+0x30>
   21b02:	4544      	cmp	r4, r8
   21b04:	bf28      	it	cs
   21b06:	4644      	movcs	r4, r8
   21b08:	4622      	mov	r2, r4
   21b0a:	4448      	add	r0, r9
   21b0c:	4639      	mov	r1, r7
   21b0e:	f7ff faff 	bl	21110 <CC_PalMemCopyPlat>
   21b12:	6e30      	ldr	r0, [r6, #96]	; 0x60
   21b14:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   21b16:	4420      	add	r0, r4
   21b18:	4283      	cmp	r3, r0
   21b1a:	eb07 0a04 	add.w	sl, r7, r4
   21b1e:	6630      	str	r0, [r6, #96]	; 0x60
   21b20:	eba8 0404 	sub.w	r4, r8, r4
   21b24:	d1d5      	bne.n	21ad2 <mbedtls_sha_update_internal+0x3a>
   21b26:	2b80      	cmp	r3, #128	; 0x80
   21b28:	bf28      	it	cs
   21b2a:	2380      	movcs	r3, #128	; 0x80
   21b2c:	461a      	mov	r2, r3
   21b2e:	4649      	mov	r1, r9
   21b30:	a804      	add	r0, sp, #16
   21b32:	f7ff faed 	bl	21110 <CC_PalMemCopyPlat>
   21b36:	2300      	movs	r3, #0
   21b38:	e9cd 3300 	strd	r3, r3, [sp]
   21b3c:	aa02      	add	r2, sp, #8
   21b3e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   21b40:	a804      	add	r0, sp, #16
   21b42:	f000 f9a3 	bl	21e8c <SetDataBuffersInfo>
   21b46:	2800      	cmp	r0, #0
   21b48:	d160      	bne.n	21c0c <mbedtls_sha_update_internal+0x174>
   21b4a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   21b4c:	a902      	add	r1, sp, #8
   21b4e:	4630      	mov	r0, r6
   21b50:	f000 f9fa 	bl	21f48 <ProcessHashDrv>
   21b54:	2800      	cmp	r0, #0
   21b56:	d159      	bne.n	21c0c <mbedtls_sha_update_internal+0x174>
   21b58:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   21b5a:	fbb4 fbf3 	udiv	fp, r4, r3
   21b5e:	fb03 fb0b 	mul.w	fp, r3, fp
   21b62:	6630      	str	r0, [r6, #96]	; 0x60
   21b64:	f1bb 0f00 	cmp.w	fp, #0
   21b68:	d0ba      	beq.n	21ae0 <mbedtls_sha_update_internal+0x48>
   21b6a:	2300      	movs	r3, #0
   21b6c:	e9cd 3300 	strd	r3, r3, [sp]
   21b70:	aa02      	add	r2, sp, #8
   21b72:	4659      	mov	r1, fp
   21b74:	4650      	mov	r0, sl
   21b76:	f000 f989 	bl	21e8c <SetDataBuffersInfo>
   21b7a:	2800      	cmp	r0, #0
   21b7c:	d146      	bne.n	21c0c <mbedtls_sha_update_internal+0x174>
   21b7e:	a902      	add	r1, sp, #8
   21b80:	465a      	mov	r2, fp
   21b82:	4630      	mov	r0, r6
   21b84:	f000 f9e0 	bl	21f48 <ProcessHashDrv>
   21b88:	2800      	cmp	r0, #0
   21b8a:	d13f      	bne.n	21c0c <mbedtls_sha_update_internal+0x174>
   21b8c:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   21b90:	eba4 040b 	sub.w	r4, r4, fp
   21b94:	6e30      	ldr	r0, [r6, #96]	; 0x60
   21b96:	44da      	add	sl, fp
   21b98:	4447      	add	r7, r8
   21b9a:	3dff      	subs	r5, #255	; 0xff
   21b9c:	2c00      	cmp	r4, #0
   21b9e:	d0a5      	beq.n	21aec <mbedtls_sha_update_internal+0x54>
   21ba0:	3019      	adds	r0, #25
   21ba2:	4651      	mov	r1, sl
   21ba4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   21ba8:	4622      	mov	r2, r4
   21baa:	f7ff fab1 	bl	21110 <CC_PalMemCopyPlat>
   21bae:	6e30      	ldr	r0, [r6, #96]	; 0x60
   21bb0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   21bb4:	4420      	add	r0, r4
   21bb6:	6630      	str	r0, [r6, #96]	; 0x60
   21bb8:	d29b      	bcs.n	21af2 <mbedtls_sha_update_internal+0x5a>
   21bba:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   21bbc:	1a14      	subs	r4, r2, r0
   21bbe:	fbb4 f3f2 	udiv	r3, r4, r2
   21bc2:	fb02 4413 	mls	r4, r2, r3, r4
   21bc6:	42ac      	cmp	r4, r5
   21bc8:	bf28      	it	cs
   21bca:	462c      	movcs	r4, r5
   21bcc:	bb34      	cbnz	r4, 21c1c <mbedtls_sha_update_internal+0x184>
   21bce:	4290      	cmp	r0, r2
   21bd0:	d034      	beq.n	21c3c <mbedtls_sha_update_internal+0x1a4>
   21bd2:	fbb5 f4f2 	udiv	r4, r5, r2
   21bd6:	fb02 f404 	mul.w	r4, r2, r4
   21bda:	b96c      	cbnz	r4, 21bf8 <mbedtls_sha_update_internal+0x160>
   21bdc:	b1d5      	cbz	r5, 21c14 <mbedtls_sha_update_internal+0x17c>
   21bde:	6e33      	ldr	r3, [r6, #96]	; 0x60
   21be0:	3319      	adds	r3, #25
   21be2:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   21be6:	462a      	mov	r2, r5
   21be8:	4639      	mov	r1, r7
   21bea:	f7ff fa91 	bl	21110 <CC_PalMemCopyPlat>
   21bee:	6e33      	ldr	r3, [r6, #96]	; 0x60
   21bf0:	442b      	add	r3, r5
   21bf2:	2000      	movs	r0, #0
   21bf4:	6633      	str	r3, [r6, #96]	; 0x60
   21bf6:	e00a      	b.n	21c0e <mbedtls_sha_update_internal+0x176>
   21bf8:	2300      	movs	r3, #0
   21bfa:	e9cd 3300 	strd	r3, r3, [sp]
   21bfe:	aa02      	add	r2, sp, #8
   21c00:	4621      	mov	r1, r4
   21c02:	4638      	mov	r0, r7
   21c04:	f000 f942 	bl	21e8c <SetDataBuffersInfo>
   21c08:	2800      	cmp	r0, #0
   21c0a:	d033      	beq.n	21c74 <mbedtls_sha_update_internal+0x1dc>
   21c0c:	2001      	movs	r0, #1
   21c0e:	b025      	add	sp, #148	; 0x94
   21c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c14:	4628      	mov	r0, r5
   21c16:	b025      	add	sp, #148	; 0x94
   21c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c1c:	f106 0364 	add.w	r3, r6, #100	; 0x64
   21c20:	4639      	mov	r1, r7
   21c22:	4622      	mov	r2, r4
   21c24:	4418      	add	r0, r3
   21c26:	f7ff fa73 	bl	21110 <CC_PalMemCopyPlat>
   21c2a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   21c2c:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   21c2e:	4420      	add	r0, r4
   21c30:	1b2d      	subs	r5, r5, r4
   21c32:	4427      	add	r7, r4
   21c34:	6630      	str	r0, [r6, #96]	; 0x60
   21c36:	e7ca      	b.n	21bce <mbedtls_sha_update_internal+0x136>
   21c38:	2001      	movs	r0, #1
   21c3a:	4770      	bx	lr
   21c3c:	2a80      	cmp	r2, #128	; 0x80
   21c3e:	bf28      	it	cs
   21c40:	2280      	movcs	r2, #128	; 0x80
   21c42:	f106 0164 	add.w	r1, r6, #100	; 0x64
   21c46:	a804      	add	r0, sp, #16
   21c48:	f7ff fa62 	bl	21110 <CC_PalMemCopyPlat>
   21c4c:	2300      	movs	r3, #0
   21c4e:	e9cd 3300 	strd	r3, r3, [sp]
   21c52:	a804      	add	r0, sp, #16
   21c54:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   21c56:	aa02      	add	r2, sp, #8
   21c58:	f000 f918 	bl	21e8c <SetDataBuffersInfo>
   21c5c:	2800      	cmp	r0, #0
   21c5e:	d1d5      	bne.n	21c0c <mbedtls_sha_update_internal+0x174>
   21c60:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   21c62:	a902      	add	r1, sp, #8
   21c64:	4630      	mov	r0, r6
   21c66:	f000 f96f 	bl	21f48 <ProcessHashDrv>
   21c6a:	2800      	cmp	r0, #0
   21c6c:	d1ce      	bne.n	21c0c <mbedtls_sha_update_internal+0x174>
   21c6e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   21c70:	6630      	str	r0, [r6, #96]	; 0x60
   21c72:	e7ae      	b.n	21bd2 <mbedtls_sha_update_internal+0x13a>
   21c74:	a902      	add	r1, sp, #8
   21c76:	4622      	mov	r2, r4
   21c78:	4630      	mov	r0, r6
   21c7a:	f000 f965 	bl	21f48 <ProcessHashDrv>
   21c7e:	2800      	cmp	r0, #0
   21c80:	d1c4      	bne.n	21c0c <mbedtls_sha_update_internal+0x174>
   21c82:	4427      	add	r7, r4
   21c84:	1b2d      	subs	r5, r5, r4
   21c86:	e7a9      	b.n	21bdc <mbedtls_sha_update_internal+0x144>

00021c88 <cc_mbedtls_sha256>:
   21c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c8a:	461c      	mov	r4, r3
   21c8c:	4605      	mov	r5, r0
   21c8e:	4811      	ldr	r0, [pc, #68]	; (21cd4 <cc_mbedtls_sha256+0x4c>)
   21c90:	460e      	mov	r6, r1
   21c92:	4617      	mov	r7, r2
   21c94:	f7ff fe42 	bl	2191c <cc_mbedtls_sha256_init>
   21c98:	4621      	mov	r1, r4
   21c9a:	480e      	ldr	r0, [pc, #56]	; (21cd4 <cc_mbedtls_sha256+0x4c>)
   21c9c:	f7ff fe58 	bl	21950 <cc_mbedtls_sha256_starts>
   21ca0:	4604      	mov	r4, r0
   21ca2:	b120      	cbz	r0, 21cae <cc_mbedtls_sha256+0x26>
   21ca4:	480b      	ldr	r0, [pc, #44]	; (21cd4 <cc_mbedtls_sha256+0x4c>)
   21ca6:	f7ff fe4d 	bl	21944 <cc_mbedtls_sha256_free>
   21caa:	4620      	mov	r0, r4
   21cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21cae:	4809      	ldr	r0, [pc, #36]	; (21cd4 <cc_mbedtls_sha256+0x4c>)
   21cb0:	4632      	mov	r2, r6
   21cb2:	4629      	mov	r1, r5
   21cb4:	f7ff fe60 	bl	21978 <cc_mbedtls_sha256_update>
   21cb8:	4604      	mov	r4, r0
   21cba:	2800      	cmp	r0, #0
   21cbc:	d1f2      	bne.n	21ca4 <cc_mbedtls_sha256+0x1c>
   21cbe:	4639      	mov	r1, r7
   21cc0:	4804      	ldr	r0, [pc, #16]	; (21cd4 <cc_mbedtls_sha256+0x4c>)
   21cc2:	f7ff fe83 	bl	219cc <cc_mbedtls_sha256_finish>
   21cc6:	4604      	mov	r4, r0
   21cc8:	4802      	ldr	r0, [pc, #8]	; (21cd4 <cc_mbedtls_sha256+0x4c>)
   21cca:	f7ff fe3b 	bl	21944 <cc_mbedtls_sha256_free>
   21cce:	4620      	mov	r0, r4
   21cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21cd2:	bf00      	nop
   21cd4:	20003a20 	.word	0x20003a20

00021cd8 <RNG_PLAT_SetUserRngParameters>:
   21cd8:	b530      	push	{r4, r5, lr}
   21cda:	b083      	sub	sp, #12
   21cdc:	231c      	movs	r3, #28
   21cde:	a901      	add	r1, sp, #4
   21ce0:	4604      	mov	r4, r0
   21ce2:	9301      	str	r3, [sp, #4]
   21ce4:	f000 f834 	bl	21d50 <CC_PalTrngParamGet>
   21ce8:	4605      	mov	r5, r0
   21cea:	b938      	cbnz	r0, 21cfc <RNG_PLAT_SetUserRngParameters+0x24>
   21cec:	9b01      	ldr	r3, [sp, #4]
   21cee:	2b1c      	cmp	r3, #28
   21cf0:	d007      	beq.n	21d02 <RNG_PLAT_SetUserRngParameters+0x2a>
   21cf2:	4d15      	ldr	r5, [pc, #84]	; (21d48 <RNG_PLAT_SetUserRngParameters+0x70>)
   21cf4:	211c      	movs	r1, #28
   21cf6:	4620      	mov	r0, r4
   21cf8:	f7ff fa0e 	bl	21118 <CC_PalMemSetZeroPlat>
   21cfc:	4628      	mov	r0, r5
   21cfe:	b003      	add	sp, #12
   21d00:	bd30      	pop	{r4, r5, pc}
   21d02:	e9d4 3200 	ldrd	r3, r2, [r4]
   21d06:	2101      	movs	r1, #1
   21d08:	3b00      	subs	r3, #0
   21d0a:	61e1      	str	r1, [r4, #28]
   21d0c:	bf18      	it	ne
   21d0e:	2301      	movne	r3, #1
   21d10:	b10a      	cbz	r2, 21d16 <RNG_PLAT_SetUserRngParameters+0x3e>
   21d12:	f043 0302 	orr.w	r3, r3, #2
   21d16:	68a2      	ldr	r2, [r4, #8]
   21d18:	b932      	cbnz	r2, 21d28 <RNG_PLAT_SetUserRngParameters+0x50>
   21d1a:	68e2      	ldr	r2, [r4, #12]
   21d1c:	b942      	cbnz	r2, 21d30 <RNG_PLAT_SetUserRngParameters+0x58>
   21d1e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   21d22:	b97b      	cbnz	r3, 21d44 <RNG_PLAT_SetUserRngParameters+0x6c>
   21d24:	4d09      	ldr	r5, [pc, #36]	; (21d4c <RNG_PLAT_SetUserRngParameters+0x74>)
   21d26:	e7e5      	b.n	21cf4 <RNG_PLAT_SetUserRngParameters+0x1c>
   21d28:	68e2      	ldr	r2, [r4, #12]
   21d2a:	f043 0304 	orr.w	r3, r3, #4
   21d2e:	b13a      	cbz	r2, 21d40 <RNG_PLAT_SetUserRngParameters+0x68>
   21d30:	f043 0308 	orr.w	r3, r3, #8
   21d34:	2200      	movs	r2, #0
   21d36:	4628      	mov	r0, r5
   21d38:	e9c4 3208 	strd	r3, r2, [r4, #32]
   21d3c:	b003      	add	sp, #12
   21d3e:	bd30      	pop	{r4, r5, pc}
   21d40:	e9c4 3208 	strd	r3, r2, [r4, #32]
   21d44:	4615      	mov	r5, r2
   21d46:	e7d9      	b.n	21cfc <RNG_PLAT_SetUserRngParameters+0x24>
   21d48:	00f00c37 	.word	0x00f00c37
   21d4c:	00f00c0e 	.word	0x00f00c0e

00021d50 <CC_PalTrngParamGet>:
   21d50:	b118      	cbz	r0, 21d5a <CC_PalTrngParamGet+0xa>
   21d52:	b111      	cbz	r1, 21d5a <CC_PalTrngParamGet+0xa>
   21d54:	680b      	ldr	r3, [r1, #0]
   21d56:	2b1c      	cmp	r3, #28
   21d58:	d001      	beq.n	21d5e <CC_PalTrngParamGet+0xe>
   21d5a:	2001      	movs	r0, #1
   21d5c:	4770      	bx	lr
   21d5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21d62:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   21d66:	3201      	adds	r2, #1
   21d68:	bf14      	ite	ne
   21d6a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   21d6e:	f241 225c 	movweq	r2, #4700	; 0x125c
   21d72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21d76:	6002      	str	r2, [r0, #0]
   21d78:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   21d7c:	3201      	adds	r2, #1
   21d7e:	bf14      	ite	ne
   21d80:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   21d84:	f641 1264 	movweq	r2, #6500	; 0x1964
   21d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21d8c:	6042      	str	r2, [r0, #4]
   21d8e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   21d92:	3201      	adds	r2, #1
   21d94:	bf14      	ite	ne
   21d96:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   21d9a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   21d9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21da2:	6082      	str	r2, [r0, #8]
   21da4:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   21da8:	3201      	adds	r2, #1
   21daa:	bf14      	ite	ne
   21dac:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   21db0:	f241 3288 	movweq	r2, #5000	; 0x1388
   21db4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21db8:	60c2      	str	r2, [r0, #12]
   21dba:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   21dbe:	3201      	adds	r2, #1
   21dc0:	bf14      	ite	ne
   21dc2:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   21dc6:	2290      	moveq	r2, #144	; 0x90
   21dc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21dcc:	6102      	str	r2, [r0, #16]
   21dce:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   21dd2:	3201      	adds	r2, #1
   21dd4:	bf14      	ite	ne
   21dd6:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   21dda:	2251      	moveq	r2, #81	; 0x51
   21ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21de0:	6142      	str	r2, [r0, #20]
   21de2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   21de6:	3201      	adds	r2, #1
   21de8:	bf14      	ite	ne
   21dea:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   21dee:	f240 3337 	movweq	r3, #823	; 0x337
   21df2:	6183      	str	r3, [r0, #24]
   21df4:	2000      	movs	r0, #0
   21df6:	4770      	bx	lr

00021df8 <LLF_RND_WaitRngInterrupt>:
   21df8:	b508      	push	{r3, lr}
   21dfa:	4601      	mov	r1, r0
   21dfc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   21e00:	f7ff f912 	bl	21028 <CC_HalWaitInterruptRND>
   21e04:	4b03      	ldr	r3, [pc, #12]	; (21e14 <LLF_RND_WaitRngInterrupt+0x1c>)
   21e06:	2200      	movs	r2, #0
   21e08:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   21e0c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   21e10:	bd08      	pop	{r3, pc}
   21e12:	bf00      	nop
   21e14:	5002b000 	.word	0x5002b000

00021e18 <LLF_RND_GetRoscSampleCnt>:
   21e18:	3801      	subs	r0, #1
   21e1a:	2807      	cmp	r0, #7
   21e1c:	d805      	bhi.n	21e2a <LLF_RND_GetRoscSampleCnt+0x12>
   21e1e:	e8df f000 	tbb	[pc, r0]
   21e22:	0e12      	.short	0x0e12
   21e24:	04040a04 	.word	0x04040a04
   21e28:	0604      	.short	0x0604
   21e2a:	4809      	ldr	r0, [pc, #36]	; (21e50 <LLF_RND_GetRoscSampleCnt+0x38>)
   21e2c:	4770      	bx	lr
   21e2e:	68cb      	ldr	r3, [r1, #12]
   21e30:	624b      	str	r3, [r1, #36]	; 0x24
   21e32:	2000      	movs	r0, #0
   21e34:	4770      	bx	lr
   21e36:	688b      	ldr	r3, [r1, #8]
   21e38:	624b      	str	r3, [r1, #36]	; 0x24
   21e3a:	2000      	movs	r0, #0
   21e3c:	4770      	bx	lr
   21e3e:	684b      	ldr	r3, [r1, #4]
   21e40:	624b      	str	r3, [r1, #36]	; 0x24
   21e42:	2000      	movs	r0, #0
   21e44:	4770      	bx	lr
   21e46:	680b      	ldr	r3, [r1, #0]
   21e48:	624b      	str	r3, [r1, #36]	; 0x24
   21e4a:	2000      	movs	r0, #0
   21e4c:	4770      	bx	lr
   21e4e:	bf00      	nop
   21e50:	00f10c31 	.word	0x00f10c31

00021e54 <LLF_RND_GetFastestRosc>:
   21e54:	680b      	ldr	r3, [r1, #0]
   21e56:	e002      	b.n	21e5e <LLF_RND_GetFastestRosc+0xa>
   21e58:	2b08      	cmp	r3, #8
   21e5a:	600b      	str	r3, [r1, #0]
   21e5c:	d806      	bhi.n	21e6c <LLF_RND_GetFastestRosc+0x18>
   21e5e:	6a02      	ldr	r2, [r0, #32]
   21e60:	4213      	tst	r3, r2
   21e62:	ea4f 0343 	mov.w	r3, r3, lsl #1
   21e66:	d0f7      	beq.n	21e58 <LLF_RND_GetFastestRosc+0x4>
   21e68:	2000      	movs	r0, #0
   21e6a:	4770      	bx	lr
   21e6c:	4800      	ldr	r0, [pc, #0]	; (21e70 <LLF_RND_GetFastestRosc+0x1c>)
   21e6e:	4770      	bx	lr
   21e70:	00f10c31 	.word	0x00f10c31

00021e74 <LLF_RND_TurnOffTrng>:
   21e74:	4b04      	ldr	r3, [pc, #16]	; (21e88 <LLF_RND_TurnOffTrng+0x14>)
   21e76:	2200      	movs	r2, #0
   21e78:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   21e7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   21e80:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   21e84:	f7ff b8b6 	b.w	20ff4 <CC_HalClearInterruptBit>
   21e88:	5002b000 	.word	0x5002b000

00021e8c <SetDataBuffersInfo>:
   21e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21e8e:	b083      	sub	sp, #12
   21e90:	461d      	mov	r5, r3
   21e92:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   21e96:	f04f 0300 	mov.w	r3, #0
   21e9a:	f88d 3007 	strb.w	r3, [sp, #7]
   21e9e:	d324      	bcc.n	21eea <SetDataBuffersInfo+0x5e>
   21ea0:	468c      	mov	ip, r1
   21ea2:	4484      	add	ip, r0
   21ea4:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   21ea8:	4604      	mov	r4, r0
   21eaa:	d81e      	bhi.n	21eea <SetDataBuffersInfo+0x5e>
   21eac:	4617      	mov	r7, r2
   21eae:	f10d 0307 	add.w	r3, sp, #7
   21eb2:	2201      	movs	r2, #1
   21eb4:	f000 fe68 	bl	22b88 <CC_PalDataBufferAttrGet>
   21eb8:	4606      	mov	r6, r0
   21eba:	b9b0      	cbnz	r0, 21eea <SetDataBuffersInfo+0x5e>
   21ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21ebe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21ec2:	603c      	str	r4, [r7, #0]
   21ec4:	713b      	strb	r3, [r7, #4]
   21ec6:	b192      	cbz	r2, 21eee <SetDataBuffersInfo+0x62>
   21ec8:	b14d      	cbz	r5, 21ede <SetDataBuffersInfo+0x52>
   21eca:	4602      	mov	r2, r0
   21ecc:	9908      	ldr	r1, [sp, #32]
   21ece:	f10d 0307 	add.w	r3, sp, #7
   21ed2:	4628      	mov	r0, r5
   21ed4:	f000 fe58 	bl	22b88 <CC_PalDataBufferAttrGet>
   21ed8:	b938      	cbnz	r0, 21eea <SetDataBuffersInfo+0x5e>
   21eda:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21ee0:	4630      	mov	r0, r6
   21ee2:	6015      	str	r5, [r2, #0]
   21ee4:	7113      	strb	r3, [r2, #4]
   21ee6:	b003      	add	sp, #12
   21ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21eea:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   21eee:	4630      	mov	r0, r6
   21ef0:	b003      	add	sp, #12
   21ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021ef4 <InitHashDrv>:
   21ef4:	b1e8      	cbz	r0, 21f32 <InitHashDrv+0x3e>
   21ef6:	b510      	push	{r4, lr}
   21ef8:	6804      	ldr	r4, [r0, #0]
   21efa:	2c01      	cmp	r4, #1
   21efc:	d004      	beq.n	21f08 <InitHashDrv+0x14>
   21efe:	2c02      	cmp	r4, #2
   21f00:	d010      	beq.n	21f24 <InitHashDrv+0x30>
   21f02:	b144      	cbz	r4, 21f16 <InitHashDrv+0x22>
   21f04:	480c      	ldr	r0, [pc, #48]	; (21f38 <InitHashDrv+0x44>)
   21f06:	bd10      	pop	{r4, pc}
   21f08:	490c      	ldr	r1, [pc, #48]	; (21f3c <InitHashDrv+0x48>)
   21f0a:	2220      	movs	r2, #32
   21f0c:	3008      	adds	r0, #8
   21f0e:	f7ff f8ff 	bl	21110 <CC_PalMemCopyPlat>
   21f12:	2000      	movs	r0, #0
   21f14:	bd10      	pop	{r4, pc}
   21f16:	490a      	ldr	r1, [pc, #40]	; (21f40 <InitHashDrv+0x4c>)
   21f18:	2214      	movs	r2, #20
   21f1a:	3008      	adds	r0, #8
   21f1c:	f7ff f8f8 	bl	21110 <CC_PalMemCopyPlat>
   21f20:	4620      	mov	r0, r4
   21f22:	bd10      	pop	{r4, pc}
   21f24:	4907      	ldr	r1, [pc, #28]	; (21f44 <InitHashDrv+0x50>)
   21f26:	2220      	movs	r2, #32
   21f28:	3008      	adds	r0, #8
   21f2a:	f7ff f8f1 	bl	21110 <CC_PalMemCopyPlat>
   21f2e:	2000      	movs	r0, #0
   21f30:	bd10      	pop	{r4, pc}
   21f32:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   21f36:	4770      	bx	lr
   21f38:	00f30001 	.word	0x00f30001
   21f3c:	00026340 	.word	0x00026340
   21f40:	0002630c 	.word	0x0002630c
   21f44:	00026320 	.word	0x00026320

00021f48 <ProcessHashDrv>:
   21f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21f4c:	2900      	cmp	r1, #0
   21f4e:	f000 80f9 	beq.w	22144 <ProcessHashDrv+0x1fc>
   21f52:	4604      	mov	r4, r0
   21f54:	2800      	cmp	r0, #0
   21f56:	f000 80f9 	beq.w	2214c <ProcessHashDrv+0x204>
   21f5a:	6803      	ldr	r3, [r0, #0]
   21f5c:	4690      	mov	r8, r2
   21f5e:	460f      	mov	r7, r1
   21f60:	2b00      	cmp	r3, #0
   21f62:	f000 80c3 	beq.w	220ec <ProcessHashDrv+0x1a4>
   21f66:	3b01      	subs	r3, #1
   21f68:	2b01      	cmp	r3, #1
   21f6a:	f200 80d7 	bhi.w	2211c <ProcessHashDrv+0x1d4>
   21f6e:	4879      	ldr	r0, [pc, #484]	; (22154 <ProcessHashDrv+0x20c>)
   21f70:	f04f 31ff 	mov.w	r1, #4294967295
   21f74:	f04f 0902 	mov.w	r9, #2
   21f78:	f7ff f8e6 	bl	21148 <CC_PalMutexLock>
   21f7c:	2800      	cmp	r0, #0
   21f7e:	f040 80bf 	bne.w	22100 <ProcessHashDrv+0x1b8>
   21f82:	2000      	movs	r0, #0
   21f84:	f7ff f910 	bl	211a8 <CC_PalPowerSaveModeSelect>
   21f88:	4606      	mov	r6, r0
   21f8a:	2800      	cmp	r0, #0
   21f8c:	f040 80c2 	bne.w	22114 <ProcessHashDrv+0x1cc>
   21f90:	4a71      	ldr	r2, [pc, #452]	; (22158 <ProcessHashDrv+0x210>)
   21f92:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   21f96:	2b00      	cmp	r3, #0
   21f98:	d1fb      	bne.n	21f92 <ProcessHashDrv+0x4a>
   21f9a:	4d6f      	ldr	r5, [pc, #444]	; (22158 <ProcessHashDrv+0x210>)
   21f9c:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   21fa0:	2b00      	cmp	r3, #0
   21fa2:	d1fb      	bne.n	21f9c <ProcessHashDrv+0x54>
   21fa4:	f04f 30ff 	mov.w	r0, #4294967295
   21fa8:	f7ff f824 	bl	20ff4 <CC_HalClearInterruptBit>
   21fac:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   21fb0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   21fb4:	f7ff f82c 	bl	21010 <CC_HalMaskInterrupt>
   21fb8:	2301      	movs	r3, #1
   21fba:	2207      	movs	r2, #7
   21fbc:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   21fc0:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   21fc4:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   21fc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   21fca:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   21fce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   21fd0:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   21fd4:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   21fd8:	6823      	ldr	r3, [r4, #0]
   21fda:	b15b      	cbz	r3, 21ff4 <ProcessHashDrv+0xac>
   21fdc:	3b01      	subs	r3, #1
   21fde:	2b01      	cmp	r3, #1
   21fe0:	d818      	bhi.n	22014 <ProcessHashDrv+0xcc>
   21fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21fe4:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   21fe8:	6a23      	ldr	r3, [r4, #32]
   21fea:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   21fee:	69e3      	ldr	r3, [r4, #28]
   21ff0:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   21ff4:	4b58      	ldr	r3, [pc, #352]	; (22158 <ProcessHashDrv+0x210>)
   21ff6:	69a2      	ldr	r2, [r4, #24]
   21ff8:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   21ffc:	6962      	ldr	r2, [r4, #20]
   21ffe:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   22002:	6922      	ldr	r2, [r4, #16]
   22004:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   22008:	68e2      	ldr	r2, [r4, #12]
   2200a:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   2200e:	68a2      	ldr	r2, [r4, #8]
   22010:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   22014:	4a50      	ldr	r2, [pc, #320]	; (22158 <ProcessHashDrv+0x210>)
   22016:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2201a:	2b00      	cmp	r3, #0
   2201c:	d1fb      	bne.n	22016 <ProcessHashDrv+0xce>
   2201e:	f1b8 0f00 	cmp.w	r8, #0
   22022:	d05f      	beq.n	220e4 <ProcessHashDrv+0x19c>
   22024:	6863      	ldr	r3, [r4, #4]
   22026:	2b01      	cmp	r3, #1
   22028:	bf08      	it	eq
   2202a:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   2202e:	4b4a      	ldr	r3, [pc, #296]	; (22158 <ProcessHashDrv+0x210>)
   22030:	683a      	ldr	r2, [r7, #0]
   22032:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   22036:	2040      	movs	r0, #64	; 0x40
   22038:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   2203c:	f7fe ffee 	bl	2101c <CC_HalWaitInterrupt>
   22040:	4606      	mov	r6, r0
   22042:	4a45      	ldr	r2, [pc, #276]	; (22158 <ProcessHashDrv+0x210>)
   22044:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22048:	2b00      	cmp	r3, #0
   2204a:	d1fb      	bne.n	22044 <ProcessHashDrv+0xfc>
   2204c:	4a42      	ldr	r2, [pc, #264]	; (22158 <ProcessHashDrv+0x210>)
   2204e:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   22052:	2b00      	cmp	r3, #0
   22054:	d1fb      	bne.n	2204e <ProcessHashDrv+0x106>
   22056:	6823      	ldr	r3, [r4, #0]
   22058:	b15b      	cbz	r3, 22072 <ProcessHashDrv+0x12a>
   2205a:	3b01      	subs	r3, #1
   2205c:	2b01      	cmp	r3, #1
   2205e:	d818      	bhi.n	22092 <ProcessHashDrv+0x14a>
   22060:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   22064:	6263      	str	r3, [r4, #36]	; 0x24
   22066:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   2206a:	6223      	str	r3, [r4, #32]
   2206c:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   22070:	61e3      	str	r3, [r4, #28]
   22072:	4b39      	ldr	r3, [pc, #228]	; (22158 <ProcessHashDrv+0x210>)
   22074:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   22078:	61a2      	str	r2, [r4, #24]
   2207a:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   2207e:	6162      	str	r2, [r4, #20]
   22080:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   22084:	6122      	str	r2, [r4, #16]
   22086:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   2208a:	60e2      	str	r2, [r4, #12]
   2208c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   22090:	60a3      	str	r3, [r4, #8]
   22092:	4a31      	ldr	r2, [pc, #196]	; (22158 <ProcessHashDrv+0x210>)
   22094:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   22098:	64a1      	str	r1, [r4, #72]	; 0x48
   2209a:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   2209e:	64e1      	str	r1, [r4, #76]	; 0x4c
   220a0:	2300      	movs	r3, #0
   220a2:	2101      	movs	r1, #1
   220a4:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   220a8:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   220ac:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   220b0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   220b4:	2b00      	cmp	r3, #0
   220b6:	d1fb      	bne.n	220b0 <ProcessHashDrv+0x168>
   220b8:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   220bc:	2e00      	cmp	r6, #0
   220be:	d13b      	bne.n	22138 <ProcessHashDrv+0x1f0>
   220c0:	4b25      	ldr	r3, [pc, #148]	; (22158 <ProcessHashDrv+0x210>)
   220c2:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   220c6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   220ca:	f7fe ffa1 	bl	21010 <CC_HalMaskInterrupt>
   220ce:	2001      	movs	r0, #1
   220d0:	f7ff f86a 	bl	211a8 <CC_PalPowerSaveModeSelect>
   220d4:	bb60      	cbnz	r0, 22130 <ProcessHashDrv+0x1e8>
   220d6:	481f      	ldr	r0, [pc, #124]	; (22154 <ProcessHashDrv+0x20c>)
   220d8:	f7ff f83e 	bl	21158 <CC_PalMutexUnlock>
   220dc:	bb10      	cbnz	r0, 22124 <ProcessHashDrv+0x1dc>
   220de:	4630      	mov	r0, r6
   220e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   220e4:	2304      	movs	r3, #4
   220e6:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   220ea:	e7aa      	b.n	22042 <ProcessHashDrv+0xfa>
   220ec:	4819      	ldr	r0, [pc, #100]	; (22154 <ProcessHashDrv+0x20c>)
   220ee:	f04f 31ff 	mov.w	r1, #4294967295
   220f2:	f04f 0901 	mov.w	r9, #1
   220f6:	f7ff f827 	bl	21148 <CC_PalMutexLock>
   220fa:	2800      	cmp	r0, #0
   220fc:	f43f af41 	beq.w	21f82 <ProcessHashDrv+0x3a>
   22100:	4816      	ldr	r0, [pc, #88]	; (2215c <ProcessHashDrv+0x214>)
   22102:	f7fe f8a5 	bl	20250 <CC_PalAbort>
   22106:	2000      	movs	r0, #0
   22108:	f7ff f84e 	bl	211a8 <CC_PalPowerSaveModeSelect>
   2210c:	4606      	mov	r6, r0
   2210e:	2800      	cmp	r0, #0
   22110:	f43f af3e 	beq.w	21f90 <ProcessHashDrv+0x48>
   22114:	4812      	ldr	r0, [pc, #72]	; (22160 <ProcessHashDrv+0x218>)
   22116:	f7fe f89b 	bl	20250 <CC_PalAbort>
   2211a:	e739      	b.n	21f90 <ProcessHashDrv+0x48>
   2211c:	4e11      	ldr	r6, [pc, #68]	; (22164 <ProcessHashDrv+0x21c>)
   2211e:	4630      	mov	r0, r6
   22120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22124:	4810      	ldr	r0, [pc, #64]	; (22168 <ProcessHashDrv+0x220>)
   22126:	f7fe f893 	bl	20250 <CC_PalAbort>
   2212a:	4630      	mov	r0, r6
   2212c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22130:	480e      	ldr	r0, [pc, #56]	; (2216c <ProcessHashDrv+0x224>)
   22132:	f7fe f88d 	bl	20250 <CC_PalAbort>
   22136:	e7ce      	b.n	220d6 <ProcessHashDrv+0x18e>
   22138:	2110      	movs	r1, #16
   2213a:	f104 0008 	add.w	r0, r4, #8
   2213e:	f7fe ffeb 	bl	21118 <CC_PalMemSetZeroPlat>
   22142:	e7bd      	b.n	220c0 <ProcessHashDrv+0x178>
   22144:	4e0a      	ldr	r6, [pc, #40]	; (22170 <ProcessHashDrv+0x228>)
   22146:	4630      	mov	r0, r6
   22148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2214c:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   22150:	e7c5      	b.n	220de <ProcessHashDrv+0x196>
   22152:	bf00      	nop
   22154:	20000894 	.word	0x20000894
   22158:	5002b000 	.word	0x5002b000
   2215c:	00026240 	.word	0x00026240
   22160:	00026258 	.word	0x00026258
   22164:	00f30001 	.word	0x00f30001
   22168:	00026298 	.word	0x00026298
   2216c:	00026278 	.word	0x00026278
   22170:	00f30003 	.word	0x00f30003

00022174 <FinishHashDrv>:
   22174:	b398      	cbz	r0, 221de <FinishHashDrv+0x6a>
   22176:	b470      	push	{r4, r5, r6}
   22178:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   2217c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   22180:	ba26      	rev	r6, r4
   22182:	ba0d      	rev	r5, r1
   22184:	ba14      	rev	r4, r2
   22186:	ba19      	rev	r1, r3
   22188:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   2218c:	ba12      	rev	r2, r2
   2218e:	e9c0 4104 	strd	r4, r1, [r0, #16]
   22192:	6182      	str	r2, [r0, #24]
   22194:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   22198:	e9c0 6502 	strd	r6, r5, [r0, #8]
   2219c:	ba1b      	rev	r3, r3
   2219e:	ba25      	rev	r5, r4
   221a0:	e9c0 3507 	strd	r3, r5, [r0, #28]
   221a4:	ba14      	rev	r4, r2
   221a6:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   221aa:	6a81      	ldr	r1, [r0, #40]	; 0x28
   221ac:	ba12      	rev	r2, r2
   221ae:	ba09      	rev	r1, r1
   221b0:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   221b4:	62c2      	str	r2, [r0, #44]	; 0x2c
   221b6:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   221ba:	ba1b      	rev	r3, r3
   221bc:	ba25      	rev	r5, r4
   221be:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   221c2:	ba14      	rev	r4, r2
   221c4:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   221c8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   221ca:	ba12      	rev	r2, r2
   221cc:	ba09      	rev	r1, r1
   221ce:	ba1b      	rev	r3, r3
   221d0:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   221d4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   221d8:	2000      	movs	r0, #0
   221da:	bc70      	pop	{r4, r5, r6}
   221dc:	4770      	bx	lr
   221de:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   221e2:	4770      	bx	lr

000221e4 <LoadAesKey>:
   221e4:	2800      	cmp	r0, #0
   221e6:	d046      	beq.n	22276 <LoadAesKey+0x92>
   221e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   221ec:	2b00      	cmp	r3, #0
   221ee:	d033      	beq.n	22258 <LoadAesKey+0x74>
   221f0:	2b03      	cmp	r3, #3
   221f2:	b510      	push	{r4, lr}
   221f4:	d013      	beq.n	2221e <LoadAesKey+0x3a>
   221f6:	4821      	ldr	r0, [pc, #132]	; (2227c <LoadAesKey+0x98>)
   221f8:	4c21      	ldr	r4, [pc, #132]	; (22280 <LoadAesKey+0x9c>)
   221fa:	6822      	ldr	r2, [r4, #0]
   221fc:	4b21      	ldr	r3, [pc, #132]	; (22284 <LoadAesKey+0xa0>)
   221fe:	6812      	ldr	r2, [r2, #0]
   22200:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   22204:	6822      	ldr	r2, [r4, #0]
   22206:	6852      	ldr	r2, [r2, #4]
   22208:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   2220c:	6822      	ldr	r2, [r4, #0]
   2220e:	6892      	ldr	r2, [r2, #8]
   22210:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   22214:	6822      	ldr	r2, [r4, #0]
   22216:	68d2      	ldr	r2, [r2, #12]
   22218:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2221c:	bd10      	pop	{r4, pc}
   2221e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   22220:	6c00      	ldr	r0, [r0, #64]	; 0x40
   22222:	4c17      	ldr	r4, [pc, #92]	; (22280 <LoadAesKey+0x9c>)
   22224:	f000 fbac 	bl	22980 <kmu_validate_kdr_slot_and_size>
   22228:	2800      	cmp	r0, #0
   2222a:	d1e6      	bne.n	221fa <LoadAesKey+0x16>
   2222c:	6822      	ldr	r2, [r4, #0]
   2222e:	4b15      	ldr	r3, [pc, #84]	; (22284 <LoadAesKey+0xa0>)
   22230:	6812      	ldr	r2, [r2, #0]
   22232:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   22236:	6822      	ldr	r2, [r4, #0]
   22238:	6852      	ldr	r2, [r2, #4]
   2223a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   2223e:	6822      	ldr	r2, [r4, #0]
   22240:	6892      	ldr	r2, [r2, #8]
   22242:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   22246:	6822      	ldr	r2, [r4, #0]
   22248:	68d2      	ldr	r2, [r2, #12]
   2224a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2224e:	f000 fba3 	bl	22998 <kmu_use_kdr_key>
   22252:	2800      	cmp	r0, #0
   22254:	d1d1      	bne.n	221fa <LoadAesKey+0x16>
   22256:	bd10      	pop	{r4, pc}
   22258:	4a0a      	ldr	r2, [pc, #40]	; (22284 <LoadAesKey+0xa0>)
   2225a:	6901      	ldr	r1, [r0, #16]
   2225c:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   22260:	6941      	ldr	r1, [r0, #20]
   22262:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   22266:	6981      	ldr	r1, [r0, #24]
   22268:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   2226c:	69c1      	ldr	r1, [r0, #28]
   2226e:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   22272:	4618      	mov	r0, r3
   22274:	4770      	bx	lr
   22276:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   2227a:	4770      	bx	lr
   2227c:	00f10009 	.word	0x00f10009
   22280:	20000884 	.word	0x20000884
   22284:	5002b000 	.word	0x5002b000

00022288 <InitAes.part.0>:
   22288:	4a37      	ldr	r2, [pc, #220]	; (22368 <InitAes.part.0+0xe0>)
   2228a:	b538      	push	{r3, r4, r5, lr}
   2228c:	4604      	mov	r4, r0
   2228e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22292:	2b00      	cmp	r3, #0
   22294:	d1fb      	bne.n	2228e <InitAes.part.0+0x6>
   22296:	4a34      	ldr	r2, [pc, #208]	; (22368 <InitAes.part.0+0xe0>)
   22298:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   2229c:	2b00      	cmp	r3, #0
   2229e:	d1fb      	bne.n	22298 <InitAes.part.0+0x10>
   222a0:	4a31      	ldr	r2, [pc, #196]	; (22368 <InitAes.part.0+0xe0>)
   222a2:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   222a6:	2b00      	cmp	r3, #0
   222a8:	d1fb      	bne.n	222a2 <InitAes.part.0+0x1a>
   222aa:	4a2f      	ldr	r2, [pc, #188]	; (22368 <InitAes.part.0+0xe0>)
   222ac:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   222b0:	2b00      	cmp	r3, #0
   222b2:	d1fb      	bne.n	222ac <InitAes.part.0+0x24>
   222b4:	4a2c      	ldr	r2, [pc, #176]	; (22368 <InitAes.part.0+0xe0>)
   222b6:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   222ba:	2b00      	cmp	r3, #0
   222bc:	d1fb      	bne.n	222b6 <InitAes.part.0+0x2e>
   222be:	4d2a      	ldr	r5, [pc, #168]	; (22368 <InitAes.part.0+0xe0>)
   222c0:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   222c4:	2b00      	cmp	r3, #0
   222c6:	d1fb      	bne.n	222c0 <InitAes.part.0+0x38>
   222c8:	f04f 30ff 	mov.w	r0, #4294967295
   222cc:	f7fe fe92 	bl	20ff4 <CC_HalClearInterruptBit>
   222d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   222d2:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   222d6:	f023 0304 	bic.w	r3, r3, #4
   222da:	2b03      	cmp	r3, #3
   222dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   222de:	d039      	beq.n	22354 <InitAes.part.0+0xcc>
   222e0:	2b01      	cmp	r3, #1
   222e2:	bf0c      	ite	eq
   222e4:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   222e8:	f020 0020 	bicne.w	r0, r0, #32
   222ec:	f7fe fe90 	bl	21010 <CC_HalMaskInterrupt>
   222f0:	4a1d      	ldr	r2, [pc, #116]	; (22368 <InitAes.part.0+0xe0>)
   222f2:	2301      	movs	r3, #1
   222f4:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   222f8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   222fc:	2b00      	cmp	r3, #0
   222fe:	d1fb      	bne.n	222f8 <InitAes.part.0+0x70>
   22300:	4a19      	ldr	r2, [pc, #100]	; (22368 <InitAes.part.0+0xe0>)
   22302:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   22306:	2b00      	cmp	r3, #0
   22308:	d1fb      	bne.n	22302 <InitAes.part.0+0x7a>
   2230a:	4917      	ldr	r1, [pc, #92]	; (22368 <InitAes.part.0+0xe0>)
   2230c:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   22310:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   22314:	2b00      	cmp	r3, #0
   22316:	d1fb      	bne.n	22310 <InitAes.part.0+0x88>
   22318:	4a13      	ldr	r2, [pc, #76]	; (22368 <InitAes.part.0+0xe0>)
   2231a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   2231e:	2b00      	cmp	r3, #0
   22320:	d1fb      	bne.n	2231a <InitAes.part.0+0x92>
   22322:	6b62      	ldr	r2, [r4, #52]	; 0x34
   22324:	f022 0104 	bic.w	r1, r2, #4
   22328:	2903      	cmp	r1, #3
   2232a:	bf18      	it	ne
   2232c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   2232e:	490e      	ldr	r1, [pc, #56]	; (22368 <InitAes.part.0+0xe0>)
   22330:	ea4f 0282 	mov.w	r2, r2, lsl #2
   22334:	bf18      	it	ne
   22336:	f003 0301 	andne.w	r3, r3, #1
   2233a:	f002 021c 	and.w	r2, r2, #28
   2233e:	4313      	orrs	r3, r2
   22340:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   22344:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22346:	2b07      	cmp	r3, #7
   22348:	bf04      	itt	eq
   2234a:	2301      	moveq	r3, #1
   2234c:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   22350:	2000      	movs	r0, #0
   22352:	bd38      	pop	{r3, r4, r5, pc}
   22354:	2b01      	cmp	r3, #1
   22356:	bf0c      	ite	eq
   22358:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   2235c:	f020 0010 	bicne.w	r0, r0, #16
   22360:	f7fe fe56 	bl	21010 <CC_HalMaskInterrupt>
   22364:	e7c4      	b.n	222f0 <InitAes.part.0+0x68>
   22366:	bf00      	nop
   22368:	5002b000 	.word	0x5002b000

0002236c <write_invalid_key>:
   2236c:	4a09      	ldr	r2, [pc, #36]	; (22394 <write_invalid_key+0x28>)
   2236e:	4b0a      	ldr	r3, [pc, #40]	; (22398 <write_invalid_key+0x2c>)
   22370:	6811      	ldr	r1, [r2, #0]
   22372:	6809      	ldr	r1, [r1, #0]
   22374:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   22378:	6811      	ldr	r1, [r2, #0]
   2237a:	6849      	ldr	r1, [r1, #4]
   2237c:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   22380:	6811      	ldr	r1, [r2, #0]
   22382:	6889      	ldr	r1, [r1, #8]
   22384:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   22388:	6812      	ldr	r2, [r2, #0]
   2238a:	68d2      	ldr	r2, [r2, #12]
   2238c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   22390:	4770      	bx	lr
   22392:	bf00      	nop
   22394:	20000884 	.word	0x20000884
   22398:	5002b000 	.word	0x5002b000

0002239c <ProcessAesDrv>:
   2239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223a0:	b085      	sub	sp, #20
   223a2:	2900      	cmp	r1, #0
   223a4:	f000 80a3 	beq.w	224ee <ProcessAesDrv+0x152>
   223a8:	4690      	mov	r8, r2
   223aa:	2a00      	cmp	r2, #0
   223ac:	f000 809f 	beq.w	224ee <ProcessAesDrv+0x152>
   223b0:	4605      	mov	r5, r0
   223b2:	2800      	cmp	r0, #0
   223b4:	f000 813c 	beq.w	22630 <ProcessAesDrv+0x294>
   223b8:	4699      	mov	r9, r3
   223ba:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   223bc:	460e      	mov	r6, r1
   223be:	2b00      	cmp	r3, #0
   223c0:	d151      	bne.n	22466 <ProcessAesDrv+0xca>
   223c2:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   223c6:	d253      	bcs.n	22470 <ProcessAesDrv+0xd4>
   223c8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   223cc:	2b04      	cmp	r3, #4
   223ce:	f000 8112 	beq.w	225f6 <ProcessAesDrv+0x25a>
   223d2:	2700      	movs	r7, #0
   223d4:	48a6      	ldr	r0, [pc, #664]	; (22670 <ProcessAesDrv+0x2d4>)
   223d6:	f04f 31ff 	mov.w	r1, #4294967295
   223da:	f7fe feb5 	bl	21148 <CC_PalMutexLock>
   223de:	2800      	cmp	r0, #0
   223e0:	f040 80e8 	bne.w	225b4 <ProcessAesDrv+0x218>
   223e4:	2000      	movs	r0, #0
   223e6:	f7fe fedf 	bl	211a8 <CC_PalPowerSaveModeSelect>
   223ea:	2800      	cmp	r0, #0
   223ec:	f040 80eb 	bne.w	225c6 <ProcessAesDrv+0x22a>
   223f0:	48a0      	ldr	r0, [pc, #640]	; (22674 <ProcessAesDrv+0x2d8>)
   223f2:	2301      	movs	r3, #1
   223f4:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   223f8:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   223fc:	2c00      	cmp	r4, #0
   223fe:	d1fb      	bne.n	223f8 <ProcessAesDrv+0x5c>
   22400:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   22402:	2b03      	cmp	r3, #3
   22404:	dc39      	bgt.n	2247a <ProcessAesDrv+0xde>
   22406:	2b00      	cmp	r3, #0
   22408:	da3a      	bge.n	22480 <ProcessAesDrv+0xe4>
   2240a:	4c9b      	ldr	r4, [pc, #620]	; (22678 <ProcessAesDrv+0x2dc>)
   2240c:	4a99      	ldr	r2, [pc, #612]	; (22674 <ProcessAesDrv+0x2d8>)
   2240e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22412:	2b00      	cmp	r3, #0
   22414:	d1fb      	bne.n	2240e <ProcessAesDrv+0x72>
   22416:	2f00      	cmp	r7, #0
   22418:	f040 80e4 	bne.w	225e4 <ProcessAesDrv+0x248>
   2241c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2241e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   22420:	f023 0304 	bic.w	r3, r3, #4
   22424:	2b03      	cmp	r3, #3
   22426:	4b93      	ldr	r3, [pc, #588]	; (22674 <ProcessAesDrv+0x2d8>)
   22428:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   2242c:	d056      	beq.n	224dc <ProcessAesDrv+0x140>
   2242e:	2a01      	cmp	r2, #1
   22430:	bf0c      	ite	eq
   22432:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   22436:	f040 0020 	orrne.w	r0, r0, #32
   2243a:	f7fe fde9 	bl	21010 <CC_HalMaskInterrupt>
   2243e:	4b8d      	ldr	r3, [pc, #564]	; (22674 <ProcessAesDrv+0x2d8>)
   22440:	2200      	movs	r2, #0
   22442:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   22446:	2001      	movs	r0, #1
   22448:	f7fe feae 	bl	211a8 <CC_PalPowerSaveModeSelect>
   2244c:	2800      	cmp	r0, #0
   2244e:	f040 80c5 	bne.w	225dc <ProcessAesDrv+0x240>
   22452:	4887      	ldr	r0, [pc, #540]	; (22670 <ProcessAesDrv+0x2d4>)
   22454:	f7fe fe80 	bl	21158 <CC_PalMutexUnlock>
   22458:	2800      	cmp	r0, #0
   2245a:	f040 80b8 	bne.w	225ce <ProcessAesDrv+0x232>
   2245e:	4620      	mov	r0, r4
   22460:	b005      	add	sp, #20
   22462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22466:	2b01      	cmp	r3, #1
   22468:	d1ae      	bne.n	223c8 <ProcessAesDrv+0x2c>
   2246a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   2246e:	d3ab      	bcc.n	223c8 <ProcessAesDrv+0x2c>
   22470:	4c82      	ldr	r4, [pc, #520]	; (2267c <ProcessAesDrv+0x2e0>)
   22472:	4620      	mov	r0, r4
   22474:	b005      	add	sp, #20
   22476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2247a:	3b06      	subs	r3, #6
   2247c:	2b01      	cmp	r3, #1
   2247e:	d8c4      	bhi.n	2240a <ProcessAesDrv+0x6e>
   22480:	6bab      	ldr	r3, [r5, #56]	; 0x38
   22482:	2b01      	cmp	r3, #1
   22484:	f200 80d2 	bhi.w	2262c <ProcessAesDrv+0x290>
   22488:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2248a:	2b01      	cmp	r3, #1
   2248c:	d834      	bhi.n	224f8 <ProcessAesDrv+0x15c>
   2248e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   22490:	2b01      	cmp	r3, #1
   22492:	f200 8122 	bhi.w	226da <ProcessAesDrv+0x33e>
   22496:	4628      	mov	r0, r5
   22498:	f7ff fef6 	bl	22288 <InitAes.part.0>
   2249c:	4604      	mov	r4, r0
   2249e:	2800      	cmp	r0, #0
   224a0:	d1b4      	bne.n	2240c <ProcessAesDrv+0x70>
   224a2:	4628      	mov	r0, r5
   224a4:	f7ff fe9e 	bl	221e4 <LoadAesKey>
   224a8:	4604      	mov	r4, r0
   224aa:	2800      	cmp	r0, #0
   224ac:	d1ae      	bne.n	2240c <ProcessAesDrv+0x70>
   224ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   224b0:	2b07      	cmp	r3, #7
   224b2:	d8aa      	bhi.n	2240a <ProcessAesDrv+0x6e>
   224b4:	a201      	add	r2, pc, #4	; (adr r2, 224bc <ProcessAesDrv+0x120>)
   224b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   224ba:	bf00      	nop
   224bc:	00022519 	.word	0x00022519
   224c0:	000224fd 	.word	0x000224fd
   224c4:	000226a1 	.word	0x000226a1
   224c8:	000224fd 	.word	0x000224fd
   224cc:	0002240b 	.word	0x0002240b
   224d0:	0002240b 	.word	0x0002240b
   224d4:	000226a1 	.word	0x000226a1
   224d8:	000224fd 	.word	0x000224fd
   224dc:	2a01      	cmp	r2, #1
   224de:	bf0c      	ite	eq
   224e0:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   224e4:	f040 0010 	orrne.w	r0, r0, #16
   224e8:	f7fe fd92 	bl	21010 <CC_HalMaskInterrupt>
   224ec:	e7a7      	b.n	2243e <ProcessAesDrv+0xa2>
   224ee:	4c64      	ldr	r4, [pc, #400]	; (22680 <ProcessAesDrv+0x2e4>)
   224f0:	4620      	mov	r0, r4
   224f2:	b005      	add	sp, #20
   224f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224f8:	4c62      	ldr	r4, [pc, #392]	; (22684 <ProcessAesDrv+0x2e8>)
   224fa:	e787      	b.n	2240c <ProcessAesDrv+0x70>
   224fc:	4b5d      	ldr	r3, [pc, #372]	; (22674 <ProcessAesDrv+0x2d8>)
   224fe:	682a      	ldr	r2, [r5, #0]
   22500:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   22504:	686a      	ldr	r2, [r5, #4]
   22506:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   2250a:	68aa      	ldr	r2, [r5, #8]
   2250c:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   22510:	68ea      	ldr	r2, [r5, #12]
   22512:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   22516:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   22518:	6832      	ldr	r2, [r6, #0]
   2251a:	f023 0304 	bic.w	r3, r3, #4
   2251e:	2b03      	cmp	r3, #3
   22520:	d00d      	beq.n	2253e <ProcessAesDrv+0x1a2>
   22522:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   22524:	f8d8 1000 	ldr.w	r1, [r8]
   22528:	2b01      	cmp	r3, #1
   2252a:	4b52      	ldr	r3, [pc, #328]	; (22674 <ProcessAesDrv+0x2d8>)
   2252c:	bf0b      	itete	eq
   2252e:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   22532:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   22536:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   2253a:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   2253e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   22540:	2b01      	cmp	r3, #1
   22542:	4b4c      	ldr	r3, [pc, #304]	; (22674 <ProcessAesDrv+0x2d8>)
   22544:	bf0b      	itete	eq
   22546:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   2254a:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   2254e:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   22552:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   22556:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   22558:	f023 0304 	bic.w	r3, r3, #4
   2255c:	2b03      	cmp	r3, #3
   2255e:	d06a      	beq.n	22636 <ProcessAesDrv+0x29a>
   22560:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   22562:	2b01      	cmp	r3, #1
   22564:	bf0c      	ite	eq
   22566:	2080      	moveq	r0, #128	; 0x80
   22568:	2020      	movne	r0, #32
   2256a:	f7fe fd57 	bl	2101c <CC_HalWaitInterrupt>
   2256e:	4604      	mov	r4, r0
   22570:	2800      	cmp	r0, #0
   22572:	f47f af4b 	bne.w	2240c <ProcessAesDrv+0x70>
   22576:	4b3f      	ldr	r3, [pc, #252]	; (22674 <ProcessAesDrv+0x2d8>)
   22578:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   2257c:	2c00      	cmp	r4, #0
   2257e:	d1fb      	bne.n	22578 <ProcessAesDrv+0x1dc>
   22580:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   22582:	3b01      	subs	r3, #1
   22584:	2b06      	cmp	r3, #6
   22586:	d812      	bhi.n	225ae <ProcessAesDrv+0x212>
   22588:	e8df f003 	tbb	[pc, r3]
   2258c:	11049904 	.word	0x11049904
   22590:	9911      	.short	0x9911
   22592:	04          	.byte	0x04
   22593:	00          	.byte	0x00
   22594:	4b37      	ldr	r3, [pc, #220]	; (22674 <ProcessAesDrv+0x2d8>)
   22596:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2259a:	602a      	str	r2, [r5, #0]
   2259c:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   225a0:	606a      	str	r2, [r5, #4]
   225a2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   225a6:	60aa      	str	r2, [r5, #8]
   225a8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   225ac:	60eb      	str	r3, [r5, #12]
   225ae:	2301      	movs	r3, #1
   225b0:	65ab      	str	r3, [r5, #88]	; 0x58
   225b2:	e72b      	b.n	2240c <ProcessAesDrv+0x70>
   225b4:	4834      	ldr	r0, [pc, #208]	; (22688 <ProcessAesDrv+0x2ec>)
   225b6:	f7fd fe4b 	bl	20250 <CC_PalAbort>
   225ba:	2000      	movs	r0, #0
   225bc:	f7fe fdf4 	bl	211a8 <CC_PalPowerSaveModeSelect>
   225c0:	2800      	cmp	r0, #0
   225c2:	f43f af15 	beq.w	223f0 <ProcessAesDrv+0x54>
   225c6:	4831      	ldr	r0, [pc, #196]	; (2268c <ProcessAesDrv+0x2f0>)
   225c8:	f7fd fe42 	bl	20250 <CC_PalAbort>
   225cc:	e710      	b.n	223f0 <ProcessAesDrv+0x54>
   225ce:	4830      	ldr	r0, [pc, #192]	; (22690 <ProcessAesDrv+0x2f4>)
   225d0:	f7fd fe3e 	bl	20250 <CC_PalAbort>
   225d4:	4620      	mov	r0, r4
   225d6:	b005      	add	sp, #20
   225d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225dc:	482d      	ldr	r0, [pc, #180]	; (22694 <ProcessAesDrv+0x2f8>)
   225de:	f7fd fe37 	bl	20250 <CC_PalAbort>
   225e2:	e736      	b.n	22452 <ProcessAesDrv+0xb6>
   225e4:	2304      	movs	r3, #4
   225e6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   225ea:	2120      	movs	r1, #32
   225ec:	f105 0010 	add.w	r0, r5, #16
   225f0:	f7fe fd92 	bl	21118 <CC_PalMemSetZeroPlat>
   225f4:	e712      	b.n	2241c <ProcessAesDrv+0x80>
   225f6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   225f8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   225fa:	f000 f9b5 	bl	22968 <kmu_validate_slot_and_size>
   225fe:	b998      	cbnz	r0, 22628 <ProcessAesDrv+0x28c>
   22600:	4f25      	ldr	r7, [pc, #148]	; (22698 <ProcessAesDrv+0x2fc>)
   22602:	4c1c      	ldr	r4, [pc, #112]	; (22674 <ProcessAesDrv+0x2d8>)
   22604:	683b      	ldr	r3, [r7, #0]
   22606:	681b      	ldr	r3, [r3, #0]
   22608:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   2260c:	683b      	ldr	r3, [r7, #0]
   2260e:	685b      	ldr	r3, [r3, #4]
   22610:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   22614:	683b      	ldr	r3, [r7, #0]
   22616:	689b      	ldr	r3, [r3, #8]
   22618:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   2261c:	683b      	ldr	r3, [r7, #0]
   2261e:	68db      	ldr	r3, [r3, #12]
   22620:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   22624:	6b29      	ldr	r1, [r5, #48]	; 0x30
   22626:	b161      	cbz	r1, 22642 <ProcessAesDrv+0x2a6>
   22628:	2701      	movs	r7, #1
   2262a:	e6d3      	b.n	223d4 <ProcessAesDrv+0x38>
   2262c:	4c1b      	ldr	r4, [pc, #108]	; (2269c <ProcessAesDrv+0x300>)
   2262e:	e6ed      	b.n	2240c <ProcessAesDrv+0x70>
   22630:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   22634:	e713      	b.n	2245e <ProcessAesDrv+0xc2>
   22636:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   22638:	2b01      	cmp	r3, #1
   2263a:	bf0c      	ite	eq
   2263c:	2040      	moveq	r0, #64	; 0x40
   2263e:	2010      	movne	r0, #16
   22640:	e793      	b.n	2256a <ProcessAesDrv+0x1ce>
   22642:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   22644:	9301      	str	r3, [sp, #4]
   22646:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   22648:	9300      	str	r3, [sp, #0]
   2264a:	f105 0a10 	add.w	sl, r5, #16
   2264e:	f04f 0b10 	mov.w	fp, #16
   22652:	f8cd a008 	str.w	sl, [sp, #8]
   22656:	f8cd b00c 	str.w	fp, [sp, #12]
   2265a:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   2265e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   22660:	f000 f9a4 	bl	229ac <kmu_derive_cmac>
   22664:	2800      	cmp	r0, #0
   22666:	d13a      	bne.n	226de <ProcessAesDrv+0x342>
   22668:	2300      	movs	r3, #0
   2266a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   2266e:	e7db      	b.n	22628 <ProcessAesDrv+0x28c>
   22670:	20000894 	.word	0x20000894
   22674:	5002b000 	.word	0x5002b000
   22678:	00f10001 	.word	0x00f10001
   2267c:	00f10005 	.word	0x00f10005
   22680:	00f1000b 	.word	0x00f1000b
   22684:	00f10003 	.word	0x00f10003
   22688:	00026240 	.word	0x00026240
   2268c:	00026258 	.word	0x00026258
   22690:	00026298 	.word	0x00026298
   22694:	00026278 	.word	0x00026278
   22698:	20000884 	.word	0x20000884
   2269c:	00f10002 	.word	0x00f10002
   226a0:	4b19      	ldr	r3, [pc, #100]	; (22708 <ProcessAesDrv+0x36c>)
   226a2:	682a      	ldr	r2, [r5, #0]
   226a4:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   226a8:	686a      	ldr	r2, [r5, #4]
   226aa:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   226ae:	68aa      	ldr	r2, [r5, #8]
   226b0:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   226b4:	68ea      	ldr	r2, [r5, #12]
   226b6:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   226ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   226bc:	e72c      	b.n	22518 <ProcessAesDrv+0x17c>
   226be:	4b12      	ldr	r3, [pc, #72]	; (22708 <ProcessAesDrv+0x36c>)
   226c0:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   226c4:	602a      	str	r2, [r5, #0]
   226c6:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   226ca:	606a      	str	r2, [r5, #4]
   226cc:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   226d0:	60aa      	str	r2, [r5, #8]
   226d2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   226d6:	60eb      	str	r3, [r5, #12]
   226d8:	e769      	b.n	225ae <ProcessAesDrv+0x212>
   226da:	4c0c      	ldr	r4, [pc, #48]	; (2270c <ProcessAesDrv+0x370>)
   226dc:	e696      	b.n	2240c <ProcessAesDrv+0x70>
   226de:	683b      	ldr	r3, [r7, #0]
   226e0:	681b      	ldr	r3, [r3, #0]
   226e2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   226e6:	683b      	ldr	r3, [r7, #0]
   226e8:	685b      	ldr	r3, [r3, #4]
   226ea:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   226ee:	683b      	ldr	r3, [r7, #0]
   226f0:	689b      	ldr	r3, [r3, #8]
   226f2:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   226f6:	683b      	ldr	r3, [r7, #0]
   226f8:	68db      	ldr	r3, [r3, #12]
   226fa:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   226fe:	4659      	mov	r1, fp
   22700:	4650      	mov	r0, sl
   22702:	f7fe fd09 	bl	21118 <CC_PalMemSetZeroPlat>
   22706:	e7af      	b.n	22668 <ProcessAesDrv+0x2cc>
   22708:	5002b000 	.word	0x5002b000
   2270c:	00f10004 	.word	0x00f10004

00022710 <FinishAesDrv>:
   22710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22714:	b301      	cbz	r1, 22758 <FinishAesDrv+0x48>
   22716:	b1fa      	cbz	r2, 22758 <FinishAesDrv+0x48>
   22718:	4604      	mov	r4, r0
   2271a:	2800      	cmp	r0, #0
   2271c:	d07c      	beq.n	22818 <FinishAesDrv+0x108>
   2271e:	461d      	mov	r5, r3
   22720:	6b43      	ldr	r3, [r0, #52]	; 0x34
   22722:	2b07      	cmp	r3, #7
   22724:	460e      	mov	r6, r1
   22726:	d01b      	beq.n	22760 <FinishAesDrv+0x50>
   22728:	b95d      	cbnz	r5, 22742 <FinishAesDrv+0x32>
   2272a:	2b03      	cmp	r3, #3
   2272c:	d110      	bne.n	22750 <FinishAesDrv+0x40>
   2272e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   22730:	b973      	cbnz	r3, 22750 <FinishAesDrv+0x40>
   22732:	f100 0364 	add.w	r3, r0, #100	; 0x64
   22736:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2273a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   2273e:	600b      	str	r3, [r1, #0]
   22740:	2510      	movs	r5, #16
   22742:	462b      	mov	r3, r5
   22744:	4631      	mov	r1, r6
   22746:	4620      	mov	r0, r4
   22748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2274c:	f7ff be26 	b.w	2239c <ProcessAesDrv>
   22750:	462f      	mov	r7, r5
   22752:	4638      	mov	r0, r7
   22754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22758:	4f77      	ldr	r7, [pc, #476]	; (22938 <FinishAesDrv+0x228>)
   2275a:	4638      	mov	r0, r7
   2275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22760:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   22762:	2b00      	cmp	r3, #0
   22764:	d15b      	bne.n	2281e <FinishAesDrv+0x10e>
   22766:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2276a:	d25d      	bcs.n	22828 <FinishAesDrv+0x118>
   2276c:	b915      	cbnz	r5, 22774 <FinishAesDrv+0x64>
   2276e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   22770:	2b00      	cmp	r3, #0
   22772:	d159      	bne.n	22828 <FinishAesDrv+0x118>
   22774:	4871      	ldr	r0, [pc, #452]	; (2293c <FinishAesDrv+0x22c>)
   22776:	f04f 31ff 	mov.w	r1, #4294967295
   2277a:	f7fe fce5 	bl	21148 <CC_PalMutexLock>
   2277e:	2800      	cmp	r0, #0
   22780:	f040 80b8 	bne.w	228f4 <FinishAesDrv+0x1e4>
   22784:	2000      	movs	r0, #0
   22786:	f7fe fd0f 	bl	211a8 <CC_PalPowerSaveModeSelect>
   2278a:	2800      	cmp	r0, #0
   2278c:	f040 80ae 	bne.w	228ec <FinishAesDrv+0x1dc>
   22790:	4a6b      	ldr	r2, [pc, #428]	; (22940 <FinishAesDrv+0x230>)
   22792:	2301      	movs	r3, #1
   22794:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   22798:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2279c:	2b00      	cmp	r3, #0
   2279e:	d1fb      	bne.n	22798 <FinishAesDrv+0x88>
   227a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   227a2:	2b03      	cmp	r3, #3
   227a4:	dd20      	ble.n	227e8 <FinishAesDrv+0xd8>
   227a6:	3b06      	subs	r3, #6
   227a8:	2b01      	cmp	r3, #1
   227aa:	d81f      	bhi.n	227ec <FinishAesDrv+0xdc>
   227ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   227ae:	2b01      	cmp	r3, #1
   227b0:	d83c      	bhi.n	2282c <FinishAesDrv+0x11c>
   227b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   227b4:	2b01      	cmp	r3, #1
   227b6:	f200 80a5 	bhi.w	22904 <FinishAesDrv+0x1f4>
   227ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
   227bc:	2b01      	cmp	r3, #1
   227be:	f200 80a3 	bhi.w	22908 <FinishAesDrv+0x1f8>
   227c2:	4620      	mov	r0, r4
   227c4:	f7ff fd60 	bl	22288 <InitAes.part.0>
   227c8:	4607      	mov	r7, r0
   227ca:	b980      	cbnz	r0, 227ee <FinishAesDrv+0xde>
   227cc:	4620      	mov	r0, r4
   227ce:	f7ff fd09 	bl	221e4 <LoadAesKey>
   227d2:	4607      	mov	r7, r0
   227d4:	b958      	cbnz	r0, 227ee <FinishAesDrv+0xde>
   227d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   227d8:	2b07      	cmp	r3, #7
   227da:	d807      	bhi.n	227ec <FinishAesDrv+0xdc>
   227dc:	e8df f003 	tbb	[pc, r3]
   227e0:	285c2835 	.word	0x285c2835
   227e4:	285c0606 	.word	0x285c0606
   227e8:	2b00      	cmp	r3, #0
   227ea:	dadf      	bge.n	227ac <FinishAesDrv+0x9c>
   227ec:	4f55      	ldr	r7, [pc, #340]	; (22944 <FinishAesDrv+0x234>)
   227ee:	4a54      	ldr	r2, [pc, #336]	; (22940 <FinishAesDrv+0x230>)
   227f0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   227f4:	2b00      	cmp	r3, #0
   227f6:	d1fb      	bne.n	227f0 <FinishAesDrv+0xe0>
   227f8:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   227fc:	2001      	movs	r0, #1
   227fe:	f7fe fcd3 	bl	211a8 <CC_PalPowerSaveModeSelect>
   22802:	2800      	cmp	r0, #0
   22804:	d17a      	bne.n	228fc <FinishAesDrv+0x1ec>
   22806:	484d      	ldr	r0, [pc, #308]	; (2293c <FinishAesDrv+0x22c>)
   22808:	f7fe fca6 	bl	21158 <CC_PalMutexUnlock>
   2280c:	2800      	cmp	r0, #0
   2280e:	d0a0      	beq.n	22752 <FinishAesDrv+0x42>
   22810:	484d      	ldr	r0, [pc, #308]	; (22948 <FinishAesDrv+0x238>)
   22812:	f7fd fd1d 	bl	20250 <CC_PalAbort>
   22816:	e79c      	b.n	22752 <FinishAesDrv+0x42>
   22818:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   2281c:	e799      	b.n	22752 <FinishAesDrv+0x42>
   2281e:	2b01      	cmp	r3, #1
   22820:	d1a4      	bne.n	2276c <FinishAesDrv+0x5c>
   22822:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   22826:	d3a1      	bcc.n	2276c <FinishAesDrv+0x5c>
   22828:	4f48      	ldr	r7, [pc, #288]	; (2294c <FinishAesDrv+0x23c>)
   2282a:	e792      	b.n	22752 <FinishAesDrv+0x42>
   2282c:	4f48      	ldr	r7, [pc, #288]	; (22950 <FinishAesDrv+0x240>)
   2282e:	e7de      	b.n	227ee <FinishAesDrv+0xde>
   22830:	4b43      	ldr	r3, [pc, #268]	; (22940 <FinishAesDrv+0x230>)
   22832:	6822      	ldr	r2, [r4, #0]
   22834:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   22838:	6862      	ldr	r2, [r4, #4]
   2283a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   2283e:	68a2      	ldr	r2, [r4, #8]
   22840:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   22844:	68e2      	ldr	r2, [r4, #12]
   22846:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2284a:	4b3d      	ldr	r3, [pc, #244]	; (22940 <FinishAesDrv+0x230>)
   2284c:	2201      	movs	r2, #1
   2284e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   22852:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   22856:	2d00      	cmp	r5, #0
   22858:	d158      	bne.n	2290c <FinishAesDrv+0x1fc>
   2285a:	6da1      	ldr	r1, [r4, #88]	; 0x58
   2285c:	b909      	cbnz	r1, 22862 <FinishAesDrv+0x152>
   2285e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   22862:	4b37      	ldr	r3, [pc, #220]	; (22940 <FinishAesDrv+0x230>)
   22864:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   22868:	2f00      	cmp	r7, #0
   2286a:	d1fb      	bne.n	22864 <FinishAesDrv+0x154>
   2286c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2286e:	3b01      	subs	r3, #1
   22870:	2b06      	cmp	r3, #6
   22872:	d8bc      	bhi.n	227ee <FinishAesDrv+0xde>
   22874:	a201      	add	r2, pc, #4	; (adr r2, 2287c <FinishAesDrv+0x16c>)
   22876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2287a:	bf00      	nop
   2287c:	000228b5 	.word	0x000228b5
   22880:	000228d1 	.word	0x000228d1
   22884:	000228b5 	.word	0x000228b5
   22888:	000227ef 	.word	0x000227ef
   2288c:	000227ef 	.word	0x000227ef
   22890:	000228d1 	.word	0x000228d1
   22894:	000228b5 	.word	0x000228b5
   22898:	4b29      	ldr	r3, [pc, #164]	; (22940 <FinishAesDrv+0x230>)
   2289a:	6822      	ldr	r2, [r4, #0]
   2289c:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   228a0:	6862      	ldr	r2, [r4, #4]
   228a2:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   228a6:	68a2      	ldr	r2, [r4, #8]
   228a8:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   228ac:	68e2      	ldr	r2, [r4, #12]
   228ae:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   228b2:	e7ca      	b.n	2284a <FinishAesDrv+0x13a>
   228b4:	4b22      	ldr	r3, [pc, #136]	; (22940 <FinishAesDrv+0x230>)
   228b6:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   228ba:	6022      	str	r2, [r4, #0]
   228bc:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   228c0:	6062      	str	r2, [r4, #4]
   228c2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   228c6:	60a2      	str	r2, [r4, #8]
   228c8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   228cc:	60e3      	str	r3, [r4, #12]
   228ce:	e78e      	b.n	227ee <FinishAesDrv+0xde>
   228d0:	4b1b      	ldr	r3, [pc, #108]	; (22940 <FinishAesDrv+0x230>)
   228d2:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   228d6:	6022      	str	r2, [r4, #0]
   228d8:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   228dc:	6062      	str	r2, [r4, #4]
   228de:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   228e2:	60a2      	str	r2, [r4, #8]
   228e4:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   228e8:	60e3      	str	r3, [r4, #12]
   228ea:	e780      	b.n	227ee <FinishAesDrv+0xde>
   228ec:	4819      	ldr	r0, [pc, #100]	; (22954 <FinishAesDrv+0x244>)
   228ee:	f7fd fcaf 	bl	20250 <CC_PalAbort>
   228f2:	e74d      	b.n	22790 <FinishAesDrv+0x80>
   228f4:	4818      	ldr	r0, [pc, #96]	; (22958 <FinishAesDrv+0x248>)
   228f6:	f7fd fcab 	bl	20250 <CC_PalAbort>
   228fa:	e743      	b.n	22784 <FinishAesDrv+0x74>
   228fc:	4817      	ldr	r0, [pc, #92]	; (2295c <FinishAesDrv+0x24c>)
   228fe:	f7fd fca7 	bl	20250 <CC_PalAbort>
   22902:	e780      	b.n	22806 <FinishAesDrv+0xf6>
   22904:	4f16      	ldr	r7, [pc, #88]	; (22960 <FinishAesDrv+0x250>)
   22906:	e772      	b.n	227ee <FinishAesDrv+0xde>
   22908:	4f16      	ldr	r7, [pc, #88]	; (22964 <FinishAesDrv+0x254>)
   2290a:	e770      	b.n	227ee <FinishAesDrv+0xde>
   2290c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   2290e:	6832      	ldr	r2, [r6, #0]
   22910:	2901      	cmp	r1, #1
   22912:	d00a      	beq.n	2292a <FinishAesDrv+0x21a>
   22914:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   22918:	2010      	movs	r0, #16
   2291a:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   2291e:	f7fe fb7d 	bl	2101c <CC_HalWaitInterrupt>
   22922:	4607      	mov	r7, r0
   22924:	2800      	cmp	r0, #0
   22926:	d09c      	beq.n	22862 <FinishAesDrv+0x152>
   22928:	e761      	b.n	227ee <FinishAesDrv+0xde>
   2292a:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   2292e:	2040      	movs	r0, #64	; 0x40
   22930:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   22934:	e7f3      	b.n	2291e <FinishAesDrv+0x20e>
   22936:	bf00      	nop
   22938:	00f1000b 	.word	0x00f1000b
   2293c:	20000894 	.word	0x20000894
   22940:	5002b000 	.word	0x5002b000
   22944:	00f10001 	.word	0x00f10001
   22948:	00026298 	.word	0x00026298
   2294c:	00f10005 	.word	0x00f10005
   22950:	00f10002 	.word	0x00f10002
   22954:	00026258 	.word	0x00026258
   22958:	00026240 	.word	0x00026240
   2295c:	00026278 	.word	0x00026278
   22960:	00f10003 	.word	0x00f10003
   22964:	00f10004 	.word	0x00f10004

00022968 <kmu_validate_slot_and_size>:
   22968:	b921      	cbnz	r1, 22974 <kmu_validate_slot_and_size+0xc>
   2296a:	4b03      	ldr	r3, [pc, #12]	; (22978 <kmu_validate_slot_and_size+0x10>)
   2296c:	2800      	cmp	r0, #0
   2296e:	bf18      	it	ne
   22970:	4618      	movne	r0, r3
   22972:	4770      	bx	lr
   22974:	4801      	ldr	r0, [pc, #4]	; (2297c <kmu_validate_slot_and_size+0x14>)
   22976:	4770      	bx	lr
   22978:	00f70001 	.word	0x00f70001
   2297c:	00f70003 	.word	0x00f70003

00022980 <kmu_validate_kdr_slot_and_size>:
   22980:	b921      	cbnz	r1, 2298c <kmu_validate_kdr_slot_and_size+0xc>
   22982:	4b03      	ldr	r3, [pc, #12]	; (22990 <kmu_validate_kdr_slot_and_size+0x10>)
   22984:	2800      	cmp	r0, #0
   22986:	bf18      	it	ne
   22988:	4618      	movne	r0, r3
   2298a:	4770      	bx	lr
   2298c:	4801      	ldr	r0, [pc, #4]	; (22994 <kmu_validate_kdr_slot_and_size+0x14>)
   2298e:	4770      	bx	lr
   22990:	00f70001 	.word	0x00f70001
   22994:	00f70003 	.word	0x00f70003

00022998 <kmu_use_kdr_key>:
   22998:	4b03      	ldr	r3, [pc, #12]	; (229a8 <kmu_use_kdr_key+0x10>)
   2299a:	2000      	movs	r0, #0
   2299c:	2201      	movs	r2, #1
   2299e:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   229a2:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   229a6:	4770      	bx	lr
   229a8:	5002b000 	.word	0x5002b000

000229ac <kmu_derive_cmac>:
   229ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   229b0:	b0cc      	sub	sp, #304	; 0x130
   229b2:	2400      	movs	r4, #0
   229b4:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   229b6:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   229ba:	4682      	mov	sl, r0
   229bc:	4689      	mov	r9, r1
   229be:	4616      	mov	r6, r2
   229c0:	4621      	mov	r1, r4
   229c2:	2274      	movs	r2, #116	; 0x74
   229c4:	a80e      	add	r0, sp, #56	; 0x38
   229c6:	461f      	mov	r7, r3
   229c8:	f000 fdd9 	bl	2357e <memset>
   229cc:	2280      	movs	r2, #128	; 0x80
   229ce:	4621      	mov	r1, r4
   229d0:	a82c      	add	r0, sp, #176	; 0xb0
   229d2:	942b      	str	r4, [sp, #172]	; 0xac
   229d4:	f000 fdd3 	bl	2357e <memset>
   229d8:	2384      	movs	r3, #132	; 0x84
   229da:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   229de:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   229e2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   229e6:	9305      	str	r3, [sp, #20]
   229e8:	d863      	bhi.n	22ab2 <kmu_derive_cmac+0x106>
   229ea:	f7ff fcbf 	bl	2236c <write_invalid_key>
   229ee:	ab05      	add	r3, sp, #20
   229f0:	4630      	mov	r0, r6
   229f2:	ae2b      	add	r6, sp, #172	; 0xac
   229f4:	9301      	str	r3, [sp, #4]
   229f6:	9502      	str	r5, [sp, #8]
   229f8:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   229fc:	4639      	mov	r1, r7
   229fe:	9600      	str	r6, [sp, #0]
   22a00:	f000 f862 	bl	22ac8 <UtilCmacBuildDataForDerivation>
   22a04:	2800      	cmp	r0, #0
   22a06:	d14f      	bne.n	22aa8 <kmu_derive_cmac+0xfc>
   22a08:	2303      	movs	r3, #3
   22a0a:	f88d 3013 	strb.w	r3, [sp, #19]
   22a0e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   22a12:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   22a16:	2307      	movs	r3, #7
   22a18:	2200      	movs	r2, #0
   22a1a:	901c      	str	r0, [sp, #112]	; 0x70
   22a1c:	2110      	movs	r1, #16
   22a1e:	a80e      	add	r0, sp, #56	; 0x38
   22a20:	931b      	str	r3, [sp, #108]	; 0x6c
   22a22:	2401      	movs	r4, #1
   22a24:	2301      	movs	r3, #1
   22a26:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   22a2a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   22a2e:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   22a32:	9426      	str	r4, [sp, #152]	; 0x98
   22a34:	f10d 0920 	add.w	r9, sp, #32
   22a38:	f7fe fb6e 	bl	21118 <CC_PalMemSetZeroPlat>
   22a3c:	2210      	movs	r2, #16
   22a3e:	9200      	str	r2, [sp, #0]
   22a40:	9905      	ldr	r1, [sp, #20]
   22a42:	f8cd 9004 	str.w	r9, [sp, #4]
   22a46:	ab0a      	add	r3, sp, #40	; 0x28
   22a48:	4630      	mov	r0, r6
   22a4a:	aa06      	add	r2, sp, #24
   22a4c:	f7ff fa1e 	bl	21e8c <SetDataBuffersInfo>
   22a50:	4607      	mov	r7, r0
   22a52:	b170      	cbz	r0, 22a72 <kmu_derive_cmac+0xc6>
   22a54:	e01d      	b.n	22a92 <kmu_derive_cmac+0xe6>
   22a56:	a90e      	add	r1, sp, #56	; 0x38
   22a58:	eb08 0007 	add.w	r0, r8, r7
   22a5c:	f7fe fb58 	bl	21110 <CC_PalMemCopyPlat>
   22a60:	2110      	movs	r1, #16
   22a62:	a80e      	add	r0, sp, #56	; 0x38
   22a64:	f7fe fb58 	bl	21118 <CC_PalMemSetZeroPlat>
   22a68:	3401      	adds	r4, #1
   22a6a:	1bad      	subs	r5, r5, r6
   22a6c:	4437      	add	r7, r6
   22a6e:	b2e4      	uxtb	r4, r4
   22a70:	d024      	beq.n	22abc <kmu_derive_cmac+0x110>
   22a72:	2d10      	cmp	r5, #16
   22a74:	464a      	mov	r2, r9
   22a76:	9b05      	ldr	r3, [sp, #20]
   22a78:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   22a7c:	a906      	add	r1, sp, #24
   22a7e:	a80e      	add	r0, sp, #56	; 0x38
   22a80:	462e      	mov	r6, r5
   22a82:	bf28      	it	cs
   22a84:	2610      	movcs	r6, #16
   22a86:	f7ff fe43 	bl	22710 <FinishAesDrv>
   22a8a:	4632      	mov	r2, r6
   22a8c:	2800      	cmp	r0, #0
   22a8e:	d0e2      	beq.n	22a56 <kmu_derive_cmac+0xaa>
   22a90:	4607      	mov	r7, r0
   22a92:	a80e      	add	r0, sp, #56	; 0x38
   22a94:	2274      	movs	r2, #116	; 0x74
   22a96:	2100      	movs	r1, #0
   22a98:	f7fe fb3c 	bl	21114 <CC_PalMemSetPlat>
   22a9c:	f7ff fc66 	bl	2236c <write_invalid_key>
   22aa0:	4638      	mov	r0, r7
   22aa2:	b04c      	add	sp, #304	; 0x130
   22aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22aa8:	4f05      	ldr	r7, [pc, #20]	; (22ac0 <kmu_derive_cmac+0x114>)
   22aaa:	4638      	mov	r0, r7
   22aac:	b04c      	add	sp, #304	; 0x130
   22aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22ab2:	4f04      	ldr	r7, [pc, #16]	; (22ac4 <kmu_derive_cmac+0x118>)
   22ab4:	4638      	mov	r0, r7
   22ab6:	b04c      	add	sp, #304	; 0x130
   22ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22abc:	462f      	mov	r7, r5
   22abe:	e7e8      	b.n	22a92 <kmu_derive_cmac+0xe6>
   22ac0:	00f1000e 	.word	0x00f1000e
   22ac4:	00f1000f 	.word	0x00f1000f

00022ac8 <UtilCmacBuildDataForDerivation>:
   22ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22acc:	b082      	sub	sp, #8
   22ace:	461e      	mov	r6, r3
   22ad0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   22ad2:	2300      	movs	r3, #0
   22ad4:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   22ad8:	9301      	str	r3, [sp, #4]
   22ada:	d83e      	bhi.n	22b5a <UtilCmacBuildDataForDerivation+0x92>
   22adc:	00e4      	lsls	r4, r4, #3
   22ade:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   22ae2:	4617      	mov	r7, r2
   22ae4:	f101 32ff 	add.w	r2, r1, #4294967295
   22ae8:	bf34      	ite	cc
   22aea:	2303      	movcc	r3, #3
   22aec:	2304      	movcs	r3, #4
   22aee:	2a3f      	cmp	r2, #63	; 0x3f
   22af0:	460d      	mov	r5, r1
   22af2:	9300      	str	r3, [sp, #0]
   22af4:	d831      	bhi.n	22b5a <UtilCmacBuildDataForDerivation+0x92>
   22af6:	b380      	cbz	r0, 22b5a <UtilCmacBuildDataForDerivation+0x92>
   22af8:	b116      	cbz	r6, 22b00 <UtilCmacBuildDataForDerivation+0x38>
   22afa:	b377      	cbz	r7, 22b5a <UtilCmacBuildDataForDerivation+0x92>
   22afc:	2e40      	cmp	r6, #64	; 0x40
   22afe:	d82c      	bhi.n	22b5a <UtilCmacBuildDataForDerivation+0x92>
   22b00:	9a08      	ldr	r2, [sp, #32]
   22b02:	b352      	cbz	r2, 22b5a <UtilCmacBuildDataForDerivation+0x92>
   22b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22b06:	6811      	ldr	r1, [r2, #0]
   22b08:	b339      	cbz	r1, 22b5a <UtilCmacBuildDataForDerivation+0x92>
   22b0a:	19aa      	adds	r2, r5, r6
   22b0c:	4413      	add	r3, r2
   22b0e:	4299      	cmp	r1, r3
   22b10:	d323      	bcc.n	22b5a <UtilCmacBuildDataForDerivation+0x92>
   22b12:	9b08      	ldr	r3, [sp, #32]
   22b14:	4601      	mov	r1, r0
   22b16:	462a      	mov	r2, r5
   22b18:	1c58      	adds	r0, r3, #1
   22b1a:	f7fe faf9 	bl	21110 <CC_PalMemCopyPlat>
   22b1e:	9b08      	ldr	r3, [sp, #32]
   22b20:	f105 0802 	add.w	r8, r5, #2
   22b24:	441d      	add	r5, r3
   22b26:	2300      	movs	r3, #0
   22b28:	706b      	strb	r3, [r5, #1]
   22b2a:	bb0e      	cbnz	r6, 22b70 <UtilCmacBuildDataForDerivation+0xa8>
   22b2c:	9b08      	ldr	r3, [sp, #32]
   22b2e:	9400      	str	r4, [sp, #0]
   22b30:	2cff      	cmp	r4, #255	; 0xff
   22b32:	eb03 0008 	add.w	r0, r3, r8
   22b36:	d914      	bls.n	22b62 <UtilCmacBuildDataForDerivation+0x9a>
   22b38:	0223      	lsls	r3, r4, #8
   22b3a:	b29b      	uxth	r3, r3
   22b3c:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   22b40:	2202      	movs	r2, #2
   22b42:	a901      	add	r1, sp, #4
   22b44:	9401      	str	r4, [sp, #4]
   22b46:	f7fe fae3 	bl	21110 <CC_PalMemCopyPlat>
   22b4a:	f108 0302 	add.w	r3, r8, #2
   22b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22b50:	2000      	movs	r0, #0
   22b52:	6013      	str	r3, [r2, #0]
   22b54:	b002      	add	sp, #8
   22b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22b5a:	480a      	ldr	r0, [pc, #40]	; (22b84 <UtilCmacBuildDataForDerivation+0xbc>)
   22b5c:	b002      	add	sp, #8
   22b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22b62:	2201      	movs	r2, #1
   22b64:	4669      	mov	r1, sp
   22b66:	f7fe fad3 	bl	21110 <CC_PalMemCopyPlat>
   22b6a:	f108 0301 	add.w	r3, r8, #1
   22b6e:	e7ee      	b.n	22b4e <UtilCmacBuildDataForDerivation+0x86>
   22b70:	9b08      	ldr	r3, [sp, #32]
   22b72:	4632      	mov	r2, r6
   22b74:	eb03 0008 	add.w	r0, r3, r8
   22b78:	4639      	mov	r1, r7
   22b7a:	f7fe fac9 	bl	21110 <CC_PalMemCopyPlat>
   22b7e:	44b0      	add	r8, r6
   22b80:	e7d4      	b.n	22b2c <UtilCmacBuildDataForDerivation+0x64>
   22b82:	bf00      	nop
   22b84:	80000006 	.word	0x80000006

00022b88 <CC_PalDataBufferAttrGet>:
   22b88:	2000      	movs	r0, #0
   22b8a:	7018      	strb	r0, [r3, #0]
   22b8c:	4770      	bx	lr
   22b8e:	bf00      	nop

00022b90 <ccc_cfg_changed>:
}
   22b90:	4770      	bx	lr

00022b92 <ccc_cfg_timer>:
static void ccc_cfg_timer(const struct bt_gatt_attr *attr, uint16_t value)
   22b92:	4770      	bx	lr

00022b94 <k_uptime_get_32>:
{
   22b94:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   22b96:	f002 fc5e 	bl	25456 <z_impl_k_uptime_ticks>
   22b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22b9e:	fba0 0302 	umull	r0, r3, r0, r2
   22ba2:	fb02 3301 	mla	r3, r2, r1, r3
   22ba6:	0bc0      	lsrs	r0, r0, #15
}
   22ba8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   22bac:	bd08      	pop	{r3, pc}

00022bae <arch_printk_char_out>:
}
   22bae:	2000      	movs	r0, #0
   22bb0:	4770      	bx	lr

00022bb2 <str_out>:
{
   22bb2:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   22bb4:	688a      	ldr	r2, [r1, #8]
   22bb6:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   22bb8:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   22bba:	b114      	cbz	r4, 22bc2 <str_out+0x10>
   22bbc:	684b      	ldr	r3, [r1, #4]
   22bbe:	4293      	cmp	r3, r2
   22bc0:	dc01      	bgt.n	22bc6 <str_out+0x14>
		ctx->count++;
   22bc2:	608d      	str	r5, [r1, #8]
}
   22bc4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   22bc6:	3b01      	subs	r3, #1
   22bc8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   22bca:	bf08      	it	eq
   22bcc:	2200      	moveq	r2, #0
   22bce:	608d      	str	r5, [r1, #8]
   22bd0:	bf0c      	ite	eq
   22bd2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   22bd4:	54a0      	strbne	r0, [r4, r2]
   22bd6:	e7f5      	b.n	22bc4 <str_out+0x12>

00022bd8 <printk>:
{
   22bd8:	b40f      	push	{r0, r1, r2, r3}
   22bda:	b507      	push	{r0, r1, r2, lr}
   22bdc:	a904      	add	r1, sp, #16
   22bde:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   22be2:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   22be4:	f7ee f9c2 	bl	10f6c <vprintk>
}
   22be8:	b003      	add	sp, #12
   22bea:	f85d eb04 	ldr.w	lr, [sp], #4
   22bee:	b004      	add	sp, #16
   22bf0:	4770      	bx	lr

00022bf2 <snprintk>:
{
   22bf2:	b40c      	push	{r2, r3}
   22bf4:	b507      	push	{r0, r1, r2, lr}
   22bf6:	ab04      	add	r3, sp, #16
   22bf8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   22bfc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   22bfe:	f7ee f9c3 	bl	10f88 <vsnprintk>
}
   22c02:	b003      	add	sp, #12
   22c04:	f85d eb04 	ldr.w	lr, [sp], #4
   22c08:	b002      	add	sp, #8
   22c0a:	4770      	bx	lr

00022c0c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   22c0c:	4604      	mov	r4, r0
   22c0e:	b508      	push	{r3, lr}
   22c10:	4608      	mov	r0, r1
   22c12:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   22c14:	461a      	mov	r2, r3
   22c16:	47a0      	blx	r4
	return z_impl_z_current_get();
   22c18:	f7fb fd7e 	bl	1e718 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   22c1c:	f7f0 f940 	bl	12ea0 <z_impl_k_thread_abort>

00022c20 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   22c20:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   22c24:	8840      	ldrh	r0, [r0, #2]
}
   22c26:	0840      	lsrs	r0, r0, #1
   22c28:	4770      	bx	lr

00022c2a <free_list_add>:
{
   22c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c2c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   22c2e:	f7ff fff7 	bl	22c20 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   22c32:	fab0 f080 	clz	r0, r0
   22c36:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   22c3a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   22c3e:	00ca      	lsls	r2, r1, #3
   22c40:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   22c44:	1d17      	adds	r7, r2, #4
{
   22c46:	460c      	mov	r4, r1
   22c48:	3206      	adds	r2, #6
   22c4a:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   22c4c:	b956      	cbnz	r6, 22c64 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   22c4e:	2101      	movs	r1, #1
   22c50:	fa01 f000 	lsl.w	r0, r1, r0
   22c54:	68d9      	ldr	r1, [r3, #12]
   22c56:	4301      	orrs	r1, r0
   22c58:	60d9      	str	r1, [r3, #12]
		b->next = c;
   22c5a:	f8cc 4010 	str.w	r4, [ip, #16]
   22c5e:	53dd      	strh	r5, [r3, r7]
   22c60:	529d      	strh	r5, [r3, r2]
}
   22c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   22c64:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   22c66:	3104      	adds	r1, #4
   22c68:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   22c6a:	53d8      	strh	r0, [r3, r7]
   22c6c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   22c70:	529e      	strh	r6, [r3, r2]
   22c72:	80c5      	strh	r5, [r0, #6]
   22c74:	525d      	strh	r5, [r3, r1]
   22c76:	e7f4      	b.n	22c62 <free_list_add+0x38>

00022c78 <free_list_remove_bidx>:
{
   22c78:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   22c7a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   22c7e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   22c80:	4299      	cmp	r1, r3
   22c82:	f102 0104 	add.w	r1, r2, #4
   22c86:	d10a      	bne.n	22c9e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   22c88:	2301      	movs	r3, #1
   22c8a:	fa03 f202 	lsl.w	r2, r3, r2
   22c8e:	68c3      	ldr	r3, [r0, #12]
   22c90:	ea23 0302 	bic.w	r3, r3, r2
   22c94:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   22c96:	2300      	movs	r3, #0
   22c98:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   22c9c:	bd10      	pop	{r4, pc}
   22c9e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   22ca0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   22ca4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   22ca8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   22cac:	80cb      	strh	r3, [r1, #6]
   22cae:	8082      	strh	r2, [r0, #4]
}
   22cb0:	e7f4      	b.n	22c9c <free_list_remove_bidx+0x24>

00022cb2 <free_list_remove>:
{
   22cb2:	b508      	push	{r3, lr}
   22cb4:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   22cb6:	f7ff ffb3 	bl	22c20 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   22cba:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   22cbe:	f1c2 021f 	rsb	r2, r2, #31
   22cc2:	4618      	mov	r0, r3
}
   22cc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   22cc8:	f7ff bfd6 	b.w	22c78 <free_list_remove_bidx>

00022ccc <alloc_chunk>:
{
   22ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22cd0:	fab1 f581 	clz	r5, r1
   22cd4:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   22cd8:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   22cdc:	4603      	mov	r3, r0
	if (b->next) {
   22cde:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   22ce2:	460e      	mov	r6, r1
	if (b->next) {
   22ce4:	b1c2      	cbz	r2, 22d18 <alloc_chunk+0x4c>
   22ce6:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   22ce8:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   22cec:	4618      	mov	r0, r3
   22cee:	4621      	mov	r1, r4
   22cf0:	f7ff ff96 	bl	22c20 <chunk_size>
   22cf4:	42b0      	cmp	r0, r6
   22cf6:	d306      	bcc.n	22d06 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   22cf8:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   22cfa:	4618      	mov	r0, r3
   22cfc:	f7ff ffbc 	bl	22c78 <free_list_remove_bidx>
}
   22d00:	4620      	mov	r0, r4
   22d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   22d06:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   22d0a:	3f01      	subs	r7, #1
   22d0c:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   22d0e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   22d12:	d001      	beq.n	22d18 <alloc_chunk+0x4c>
   22d14:	4282      	cmp	r2, r0
   22d16:	d1e7      	bne.n	22ce8 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   22d18:	f1c5 0220 	rsb	r2, r5, #32
   22d1c:	f04f 34ff 	mov.w	r4, #4294967295
   22d20:	4094      	lsls	r4, r2
   22d22:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   22d24:	4014      	ands	r4, r2
   22d26:	d0eb      	beq.n	22d00 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   22d28:	fa94 f2a4 	rbit	r2, r4
   22d2c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   22d30:	1d11      	adds	r1, r2, #4
   22d32:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   22d36:	4621      	mov	r1, r4
   22d38:	e7df      	b.n	22cfa <alloc_chunk+0x2e>

00022d3a <merge_chunks>:
{
   22d3a:	b538      	push	{r3, r4, r5, lr}
   22d3c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   22d3e:	f7ff ff6f 	bl	22c20 <chunk_size>
{
   22d42:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   22d44:	4604      	mov	r4, r0
   22d46:	4611      	mov	r1, r2
   22d48:	4618      	mov	r0, r3
   22d4a:	f7ff ff69 	bl	22c20 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   22d4e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   22d52:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   22d54:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   22d56:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   22d58:	4618      	mov	r0, r3
   22d5a:	f7ff ff61 	bl	22c20 <chunk_size>
	void *cmem = &buf[c];
   22d5e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   22d60:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   22d64:	bd38      	pop	{r3, r4, r5, pc}

00022d66 <split_chunks>:
{
   22d66:	b538      	push	{r3, r4, r5, lr}
   22d68:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   22d6a:	f7ff ff59 	bl	22c20 <chunk_size>
{
   22d6e:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   22d70:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   22d72:	1a51      	subs	r1, r2, r1
   22d74:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   22d78:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   22d7a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   22d7c:	8060      	strh	r0, [r4, #2]
   22d7e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   22d82:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   22d84:	8044      	strh	r4, [r0, #2]
   22d86:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   22d8a:	4618      	mov	r0, r3
   22d8c:	4611      	mov	r1, r2
   22d8e:	f7ff ff47 	bl	22c20 <chunk_size>
	void *cmem = &buf[c];
   22d92:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   22d94:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   22d98:	bd38      	pop	{r3, r4, r5, pc}

00022d9a <free_chunk>:
{
   22d9a:	b538      	push	{r3, r4, r5, lr}
   22d9c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   22d9e:	f7ff ff3f 	bl	22c20 <chunk_size>
   22da2:	460c      	mov	r4, r1
   22da4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   22da6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   22daa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   22dac:	07da      	lsls	r2, r3, #31
   22dae:	d40a      	bmi.n	22dc6 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   22db0:	4628      	mov	r0, r5
   22db2:	f7ff ff7e 	bl	22cb2 <free_list_remove>
	return c + chunk_size(h, c);
   22db6:	4621      	mov	r1, r4
   22db8:	4628      	mov	r0, r5
   22dba:	f7ff ff31 	bl	22c20 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   22dbe:	1822      	adds	r2, r4, r0
   22dc0:	4628      	mov	r0, r5
   22dc2:	f7ff ffba 	bl	22d3a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   22dc6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   22dca:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   22dcc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   22dd0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   22dd2:	07db      	lsls	r3, r3, #31
   22dd4:	d40c      	bmi.n	22df0 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   22dd6:	4628      	mov	r0, r5
   22dd8:	f7ff ff6b 	bl	22cb2 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   22ddc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   22de0:	4622      	mov	r2, r4
   22de2:	1a61      	subs	r1, r4, r1
   22de4:	4628      	mov	r0, r5
   22de6:	f7ff ffa8 	bl	22d3a <merge_chunks>
   22dea:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   22dee:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   22df0:	4621      	mov	r1, r4
   22df2:	4628      	mov	r0, r5
}
   22df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   22df8:	f7ff bf17 	b.w	22c2a <free_list_add>

00022dfc <sys_heap_alloc>:
{
   22dfc:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   22dfe:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   22e00:	b909      	cbnz	r1, 22e06 <sys_heap_alloc+0xa>
		return NULL;
   22e02:	2000      	movs	r0, #0
}
   22e04:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   22e06:	68ab      	ldr	r3, [r5, #8]
   22e08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   22e0c:	d9f9      	bls.n	22e02 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22e0e:	310b      	adds	r1, #11
   22e10:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   22e12:	4621      	mov	r1, r4
   22e14:	4628      	mov	r0, r5
   22e16:	f7ff ff59 	bl	22ccc <alloc_chunk>
	if (c == 0U) {
   22e1a:	4606      	mov	r6, r0
   22e1c:	2800      	cmp	r0, #0
   22e1e:	d0f0      	beq.n	22e02 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   22e20:	4601      	mov	r1, r0
   22e22:	4628      	mov	r0, r5
   22e24:	f7ff fefc 	bl	22c20 <chunk_size>
   22e28:	42a0      	cmp	r0, r4
   22e2a:	d907      	bls.n	22e3c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   22e2c:	1932      	adds	r2, r6, r4
   22e2e:	4628      	mov	r0, r5
   22e30:	f7ff ff99 	bl	22d66 <split_chunks>
		free_list_add(h, c + chunk_sz);
   22e34:	4611      	mov	r1, r2
   22e36:	4628      	mov	r0, r5
   22e38:	f7ff fef7 	bl	22c2a <free_list_add>
	void *cmem = &buf[c];
   22e3c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   22e40:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   22e42:	8853      	ldrh	r3, [r2, #2]
   22e44:	f043 0301 	orr.w	r3, r3, #1
   22e48:	8053      	strh	r3, [r2, #2]
   22e4a:	3004      	adds	r0, #4
	return mem;
   22e4c:	e7da      	b.n	22e04 <sys_heap_alloc+0x8>

00022e4e <sys_slist_find_and_remove>:
	return list->head;
   22e4e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22e50:	2200      	movs	r2, #0
   22e52:	b90b      	cbnz	r3, 22e58 <sys_slist_find_and_remove+0xa>
   22e54:	4618      	mov	r0, r3
   22e56:	4770      	bx	lr
   22e58:	428b      	cmp	r3, r1
   22e5a:	d110      	bne.n	22e7e <sys_slist_find_and_remove+0x30>
	return node->next;
   22e5c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   22e5e:	b942      	cbnz	r2, 22e72 <sys_slist_find_and_remove+0x24>
   22e60:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   22e62:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   22e64:	4291      	cmp	r1, r2
   22e66:	d100      	bne.n	22e6a <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   22e68:	6043      	str	r3, [r0, #4]
	parent->next = child;
   22e6a:	2300      	movs	r3, #0
   22e6c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22e6e:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   22e70:	4770      	bx	lr
	parent->next = child;
   22e72:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   22e74:	6843      	ldr	r3, [r0, #4]
   22e76:	4299      	cmp	r1, r3
	list->tail = node;
   22e78:	bf08      	it	eq
   22e7a:	6042      	streq	r2, [r0, #4]
}
   22e7c:	e7f5      	b.n	22e6a <sys_slist_find_and_remove+0x1c>
	return node->next;
   22e7e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22e80:	681b      	ldr	r3, [r3, #0]
   22e82:	e7e6      	b.n	22e52 <sys_slist_find_and_remove+0x4>

00022e84 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22e84:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   22e86:	f013 0307 	ands.w	r3, r3, #7
   22e8a:	d105      	bne.n	22e98 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   22e8c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   22e8e:	2b00      	cmp	r3, #0
   22e90:	bf0c      	ite	eq
   22e92:	2000      	moveq	r0, #0
   22e94:	2003      	movne	r0, #3
   22e96:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   22e98:	2b02      	cmp	r3, #2
   22e9a:	d105      	bne.n	22ea8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   22e9c:	8bc0      	ldrh	r0, [r0, #30]
   22e9e:	fab0 f080 	clz	r0, r0
   22ea2:	0940      	lsrs	r0, r0, #5
   22ea4:	0080      	lsls	r0, r0, #2
   22ea6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   22ea8:	2b01      	cmp	r3, #1
   22eaa:	d105      	bne.n	22eb8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   22eac:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   22eae:	2b00      	cmp	r3, #0
   22eb0:	bf0c      	ite	eq
   22eb2:	2000      	moveq	r0, #0
   22eb4:	2005      	movne	r0, #5
   22eb6:	4770      	bx	lr
	int evt = EVT_NOP;
   22eb8:	2000      	movs	r0, #0
}
   22eba:	4770      	bx	lr

00022ebc <validate_args>:
{
   22ebc:	b510      	push	{r4, lr}
   22ebe:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   22ec0:	b100      	cbz	r0, 22ec4 <validate_args+0x8>
   22ec2:	b911      	cbnz	r1, 22eca <validate_args+0xe>
		return -EINVAL;
   22ec4:	f06f 0015 	mvn.w	r0, #21
}
   22ec8:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   22eca:	1d08      	adds	r0, r1, #4
   22ecc:	f000 f82f 	bl	22f2e <sys_notify_validate>
	if ((rv == 0)
   22ed0:	2800      	cmp	r0, #0
   22ed2:	d1f9      	bne.n	22ec8 <validate_args+0xc>
	    && ((cli->notify.flags
   22ed4:	68a3      	ldr	r3, [r4, #8]
   22ed6:	2b03      	cmp	r3, #3
   22ed8:	d9f6      	bls.n	22ec8 <validate_args+0xc>
   22eda:	e7f3      	b.n	22ec4 <validate_args+0x8>

00022edc <notify_one>:
{
   22edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ee0:	460d      	mov	r5, r1
   22ee2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   22ee4:	4619      	mov	r1, r3
   22ee6:	1d28      	adds	r0, r5, #4
{
   22ee8:	4690      	mov	r8, r2
   22eea:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   22eec:	f7ee fc6e 	bl	117cc <sys_notify_finalize>
	if (cb) {
   22ef0:	4604      	mov	r4, r0
   22ef2:	b138      	cbz	r0, 22f04 <notify_one+0x28>
		cb(mgr, cli, state, res);
   22ef4:	4633      	mov	r3, r6
   22ef6:	4642      	mov	r2, r8
   22ef8:	4629      	mov	r1, r5
   22efa:	4638      	mov	r0, r7
   22efc:	46a4      	mov	ip, r4
}
   22efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   22f02:	4760      	bx	ip
}
   22f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022f08 <onoff_manager_init>:
{
   22f08:	b538      	push	{r3, r4, r5, lr}
   22f0a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   22f0c:	4605      	mov	r5, r0
   22f0e:	b158      	cbz	r0, 22f28 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   22f10:	b151      	cbz	r1, 22f28 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   22f12:	680b      	ldr	r3, [r1, #0]
   22f14:	b143      	cbz	r3, 22f28 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   22f16:	684b      	ldr	r3, [r1, #4]
   22f18:	b133      	cbz	r3, 22f28 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   22f1a:	2220      	movs	r2, #32
   22f1c:	2100      	movs	r1, #0
   22f1e:	f000 fb2e 	bl	2357e <memset>
   22f22:	612c      	str	r4, [r5, #16]
	return 0;
   22f24:	2000      	movs	r0, #0
}
   22f26:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22f28:	f06f 0015 	mvn.w	r0, #21
   22f2c:	e7fb      	b.n	22f26 <onoff_manager_init+0x1e>

00022f2e <sys_notify_validate>:
	if (notify == NULL) {
   22f2e:	4603      	mov	r3, r0
   22f30:	b140      	cbz	r0, 22f44 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   22f32:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   22f34:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   22f38:	2a02      	cmp	r2, #2
   22f3a:	d006      	beq.n	22f4a <sys_notify_validate+0x1c>
   22f3c:	2a03      	cmp	r2, #3
   22f3e:	d004      	beq.n	22f4a <sys_notify_validate+0x1c>
   22f40:	2a01      	cmp	r2, #1
   22f42:	d005      	beq.n	22f50 <sys_notify_validate+0x22>
   22f44:	f06f 0015 	mvn.w	r0, #21
}
   22f48:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   22f4a:	681a      	ldr	r2, [r3, #0]
   22f4c:	2a00      	cmp	r2, #0
   22f4e:	d0f9      	beq.n	22f44 <sys_notify_validate+0x16>
		notify->result = 0;
   22f50:	2000      	movs	r0, #0
   22f52:	6098      	str	r0, [r3, #8]
   22f54:	4770      	bx	lr

00022f56 <encode_uint>:
{
   22f56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f5a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   22f5c:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   22f5e:	2b6f      	cmp	r3, #111	; 0x6f
{
   22f60:	4680      	mov	r8, r0
   22f62:	460f      	mov	r7, r1
   22f64:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   22f66:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   22f6a:	d029      	beq.n	22fc0 <encode_uint+0x6a>
   22f6c:	d824      	bhi.n	22fb8 <encode_uint+0x62>
		return 10;
   22f6e:	2b58      	cmp	r3, #88	; 0x58
   22f70:	bf0c      	ite	eq
   22f72:	2610      	moveq	r6, #16
   22f74:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   22f76:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   22f7a:	4632      	mov	r2, r6
   22f7c:	2300      	movs	r3, #0
   22f7e:	4640      	mov	r0, r8
   22f80:	4639      	mov	r1, r7
   22f82:	f7dd fc01 	bl	788 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22f86:	2a09      	cmp	r2, #9
   22f88:	b2d4      	uxtb	r4, r2
   22f8a:	d81e      	bhi.n	22fca <encode_uint+0x74>
   22f8c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   22f8e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22f90:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   22f92:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22f96:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   22f9a:	d301      	bcc.n	22fa0 <encode_uint+0x4a>
   22f9c:	45d1      	cmp	r9, sl
   22f9e:	d811      	bhi.n	22fc4 <encode_uint+0x6e>
	if (conv->flag_hash) {
   22fa0:	782b      	ldrb	r3, [r5, #0]
   22fa2:	069b      	lsls	r3, r3, #26
   22fa4:	d505      	bpl.n	22fb2 <encode_uint+0x5c>
		if (radix == 8) {
   22fa6:	2e08      	cmp	r6, #8
   22fa8:	d115      	bne.n	22fd6 <encode_uint+0x80>
			conv->altform_0 = true;
   22faa:	78ab      	ldrb	r3, [r5, #2]
   22fac:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   22fb0:	70ab      	strb	r3, [r5, #2]
}
   22fb2:	4648      	mov	r0, r9
   22fb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   22fb8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   22fbc:	2b70      	cmp	r3, #112	; 0x70
   22fbe:	e7d7      	b.n	22f70 <encode_uint+0x1a>
	switch (specifier) {
   22fc0:	2608      	movs	r6, #8
   22fc2:	e7d8      	b.n	22f76 <encode_uint+0x20>
		value /= radix;
   22fc4:	4680      	mov	r8, r0
   22fc6:	460f      	mov	r7, r1
   22fc8:	e7d7      	b.n	22f7a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22fca:	f1bb 0f19 	cmp.w	fp, #25
   22fce:	bf94      	ite	ls
   22fd0:	3437      	addls	r4, #55	; 0x37
   22fd2:	3457      	addhi	r4, #87	; 0x57
   22fd4:	e7db      	b.n	22f8e <encode_uint+0x38>
		} else if (radix == 16) {
   22fd6:	2e10      	cmp	r6, #16
   22fd8:	d1eb      	bne.n	22fb2 <encode_uint+0x5c>
			conv->altform_0c = true;
   22fda:	78ab      	ldrb	r3, [r5, #2]
   22fdc:	f043 0310 	orr.w	r3, r3, #16
   22fe0:	e7e6      	b.n	22fb0 <encode_uint+0x5a>

00022fe2 <outs>:
{
   22fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22fe6:	4607      	mov	r7, r0
   22fe8:	4688      	mov	r8, r1
   22fea:	4615      	mov	r5, r2
   22fec:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   22fee:	4614      	mov	r4, r2
   22ff0:	42b4      	cmp	r4, r6
   22ff2:	d305      	bcc.n	23000 <outs+0x1e>
   22ff4:	b10e      	cbz	r6, 22ffa <outs+0x18>
	return (int)count;
   22ff6:	1b60      	subs	r0, r4, r5
   22ff8:	e008      	b.n	2300c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   22ffa:	7823      	ldrb	r3, [r4, #0]
   22ffc:	2b00      	cmp	r3, #0
   22ffe:	d0fa      	beq.n	22ff6 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   23000:	f814 0b01 	ldrb.w	r0, [r4], #1
   23004:	4641      	mov	r1, r8
   23006:	47b8      	blx	r7
		if (rc < 0) {
   23008:	2800      	cmp	r0, #0
   2300a:	daf1      	bge.n	22ff0 <outs+0xe>
}
   2300c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023010 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   23010:	4040      	eors	r0, r0
   23012:	f380 8811 	msr	BASEPRI, r0
   23016:	f04f 0004 	mov.w	r0, #4
   2301a:	df02      	svc	2
}
   2301c:	4770      	bx	lr

0002301e <assert_print>:

void assert_print(const char *fmt, ...)
{
   2301e:	b40f      	push	{r0, r1, r2, r3}
   23020:	b507      	push	{r0, r1, r2, lr}
   23022:	a904      	add	r1, sp, #16
   23024:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   23028:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2302a:	f7ed ff9f 	bl	10f6c <vprintk>

	va_end(ap);
}
   2302e:	b003      	add	sp, #12
   23030:	f85d eb04 	ldr.w	lr, [sp], #4
   23034:	b004      	add	sp, #16
   23036:	4770      	bx	lr

00023038 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   23038:	4770      	bx	lr

0002303a <z_log_minimal_printk>:
{
   2303a:	b40f      	push	{r0, r1, r2, r3}
   2303c:	b507      	push	{r0, r1, r2, lr}
   2303e:	a904      	add	r1, sp, #16
   23040:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   23044:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   23046:	f7ed ff91 	bl	10f6c <vprintk>
}
   2304a:	b003      	add	sp, #12
   2304c:	f85d eb04 	ldr.w	lr, [sp], #4
   23050:	b004      	add	sp, #16
   23052:	4770      	bx	lr

00023054 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   23054:	b538      	push	{r3, r4, r5, lr}
   23056:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   23058:	42ab      	cmp	r3, r5
{
   2305a:	4611      	mov	r1, r2
   2305c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2305e:	d804      	bhi.n	2306a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   23060:	461a      	mov	r2, r3
   23062:	f000 fa81 	bl	23568 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   23066:	4620      	mov	r0, r4
   23068:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2306a:	2400      	movs	r4, #0
   2306c:	e7fb      	b.n	23066 <_copy+0x12>

0002306e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2306e:	f000 ba86 	b.w	2357e <memset>

00023072 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   23072:	09c3      	lsrs	r3, r0, #7
   23074:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23078:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2307c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   23080:	b2c0      	uxtb	r0, r0
   23082:	4770      	bx	lr

00023084 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   23084:	78cb      	ldrb	r3, [r1, #3]
   23086:	7802      	ldrb	r2, [r0, #0]
   23088:	4053      	eors	r3, r2
   2308a:	7003      	strb	r3, [r0, #0]
   2308c:	884b      	ldrh	r3, [r1, #2]
   2308e:	7842      	ldrb	r2, [r0, #1]
   23090:	4053      	eors	r3, r2
   23092:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   23094:	680a      	ldr	r2, [r1, #0]
   23096:	7883      	ldrb	r3, [r0, #2]
   23098:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2309c:	7083      	strb	r3, [r0, #2]
   2309e:	680a      	ldr	r2, [r1, #0]
   230a0:	78c3      	ldrb	r3, [r0, #3]
   230a2:	4053      	eors	r3, r2
   230a4:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   230a6:	79cb      	ldrb	r3, [r1, #7]
   230a8:	7902      	ldrb	r2, [r0, #4]
   230aa:	4053      	eors	r3, r2
   230ac:	7103      	strb	r3, [r0, #4]
   230ae:	88cb      	ldrh	r3, [r1, #6]
   230b0:	7942      	ldrb	r2, [r0, #5]
   230b2:	4053      	eors	r3, r2
   230b4:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   230b6:	684a      	ldr	r2, [r1, #4]
   230b8:	7983      	ldrb	r3, [r0, #6]
   230ba:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   230be:	7183      	strb	r3, [r0, #6]
   230c0:	684a      	ldr	r2, [r1, #4]
   230c2:	79c3      	ldrb	r3, [r0, #7]
   230c4:	4053      	eors	r3, r2
   230c6:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   230c8:	7acb      	ldrb	r3, [r1, #11]
   230ca:	7a02      	ldrb	r2, [r0, #8]
   230cc:	4053      	eors	r3, r2
   230ce:	7203      	strb	r3, [r0, #8]
   230d0:	7a42      	ldrb	r2, [r0, #9]
   230d2:	894b      	ldrh	r3, [r1, #10]
   230d4:	4053      	eors	r3, r2
   230d6:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   230d8:	688a      	ldr	r2, [r1, #8]
   230da:	7a83      	ldrb	r3, [r0, #10]
   230dc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   230e0:	7283      	strb	r3, [r0, #10]
   230e2:	688a      	ldr	r2, [r1, #8]
   230e4:	7ac3      	ldrb	r3, [r0, #11]
   230e6:	4053      	eors	r3, r2
   230e8:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   230ea:	7bcb      	ldrb	r3, [r1, #15]
   230ec:	7b02      	ldrb	r2, [r0, #12]
   230ee:	4053      	eors	r3, r2
   230f0:	7303      	strb	r3, [r0, #12]
   230f2:	89cb      	ldrh	r3, [r1, #14]
   230f4:	7b42      	ldrb	r2, [r0, #13]
   230f6:	4053      	eors	r3, r2
   230f8:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   230fa:	68ca      	ldr	r2, [r1, #12]
   230fc:	7b83      	ldrb	r3, [r0, #14]
   230fe:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23102:	7383      	strb	r3, [r0, #14]
   23104:	68ca      	ldr	r2, [r1, #12]
   23106:	7bc3      	ldrb	r3, [r0, #15]
   23108:	4053      	eors	r3, r2
   2310a:	73c3      	strb	r3, [r0, #15]
}
   2310c:	4770      	bx	lr

0002310e <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2310e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   23110:	7802      	ldrb	r2, [r0, #0]
   23112:	f88d 2000 	strb.w	r2, [sp]
   23116:	7942      	ldrb	r2, [r0, #5]
   23118:	f88d 2001 	strb.w	r2, [sp, #1]
   2311c:	7a82      	ldrb	r2, [r0, #10]
   2311e:	f88d 2002 	strb.w	r2, [sp, #2]
   23122:	7bc2      	ldrb	r2, [r0, #15]
   23124:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   23128:	7902      	ldrb	r2, [r0, #4]
   2312a:	f88d 2004 	strb.w	r2, [sp, #4]
   2312e:	7a42      	ldrb	r2, [r0, #9]
   23130:	f88d 2005 	strb.w	r2, [sp, #5]
   23134:	7b82      	ldrb	r2, [r0, #14]
   23136:	f88d 2006 	strb.w	r2, [sp, #6]
   2313a:	78c2      	ldrb	r2, [r0, #3]
   2313c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   23140:	7a02      	ldrb	r2, [r0, #8]
   23142:	f88d 2008 	strb.w	r2, [sp, #8]
   23146:	7b42      	ldrb	r2, [r0, #13]
   23148:	f88d 2009 	strb.w	r2, [sp, #9]
   2314c:	7882      	ldrb	r2, [r0, #2]
   2314e:	f88d 200a 	strb.w	r2, [sp, #10]
   23152:	79c2      	ldrb	r2, [r0, #7]
   23154:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   23158:	7b02      	ldrb	r2, [r0, #12]
   2315a:	f88d 200c 	strb.w	r2, [sp, #12]
   2315e:	7842      	ldrb	r2, [r0, #1]
   23160:	7ac3      	ldrb	r3, [r0, #11]
   23162:	f88d 200d 	strb.w	r2, [sp, #13]
   23166:	7982      	ldrb	r2, [r0, #6]
   23168:	f88d 200e 	strb.w	r2, [sp, #14]
   2316c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   23170:	2310      	movs	r3, #16
   23172:	466a      	mov	r2, sp
   23174:	4619      	mov	r1, r3
   23176:	f7ff ff6d 	bl	23054 <_copy>
}
   2317a:	b005      	add	sp, #20
   2317c:	f85d fb04 	ldr.w	pc, [sp], #4

00023180 <mult_row_column>:
{
   23180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23182:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   23184:	7808      	ldrb	r0, [r1, #0]
{
   23186:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   23188:	f7ff ff73 	bl	23072 <_double_byte>
   2318c:	4605      	mov	r5, r0
   2318e:	7860      	ldrb	r0, [r4, #1]
   23190:	f7ff ff6f 	bl	23072 <_double_byte>
   23194:	78a2      	ldrb	r2, [r4, #2]
   23196:	7863      	ldrb	r3, [r4, #1]
   23198:	4053      	eors	r3, r2
   2319a:	78e2      	ldrb	r2, [r4, #3]
   2319c:	4053      	eors	r3, r2
   2319e:	405d      	eors	r5, r3
   231a0:	4068      	eors	r0, r5
   231a2:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   231a4:	7860      	ldrb	r0, [r4, #1]
   231a6:	7827      	ldrb	r7, [r4, #0]
   231a8:	f7ff ff63 	bl	23072 <_double_byte>
   231ac:	4605      	mov	r5, r0
   231ae:	78a0      	ldrb	r0, [r4, #2]
   231b0:	f7ff ff5f 	bl	23072 <_double_byte>
   231b4:	78a3      	ldrb	r3, [r4, #2]
   231b6:	405f      	eors	r7, r3
   231b8:	78e3      	ldrb	r3, [r4, #3]
   231ba:	405f      	eors	r7, r3
   231bc:	407d      	eors	r5, r7
   231be:	4068      	eors	r0, r5
   231c0:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   231c2:	7863      	ldrb	r3, [r4, #1]
   231c4:	7827      	ldrb	r7, [r4, #0]
   231c6:	78a0      	ldrb	r0, [r4, #2]
   231c8:	405f      	eors	r7, r3
   231ca:	f7ff ff52 	bl	23072 <_double_byte>
   231ce:	4605      	mov	r5, r0
   231d0:	78e0      	ldrb	r0, [r4, #3]
   231d2:	f7ff ff4e 	bl	23072 <_double_byte>
   231d6:	78e3      	ldrb	r3, [r4, #3]
   231d8:	405f      	eors	r7, r3
   231da:	407d      	eors	r5, r7
   231dc:	4068      	eors	r0, r5
   231de:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   231e0:	7820      	ldrb	r0, [r4, #0]
   231e2:	f7ff ff46 	bl	23072 <_double_byte>
   231e6:	7862      	ldrb	r2, [r4, #1]
   231e8:	7823      	ldrb	r3, [r4, #0]
   231ea:	4053      	eors	r3, r2
   231ec:	78a2      	ldrb	r2, [r4, #2]
   231ee:	4053      	eors	r3, r2
   231f0:	ea80 0503 	eor.w	r5, r0, r3
   231f4:	78e0      	ldrb	r0, [r4, #3]
   231f6:	f7ff ff3c 	bl	23072 <_double_byte>
   231fa:	b2ed      	uxtb	r5, r5
   231fc:	4045      	eors	r5, r0
   231fe:	70f5      	strb	r5, [r6, #3]
}
   23200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023202 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   23202:	b570      	push	{r4, r5, r6, lr}
   23204:	4614      	mov	r4, r2
   23206:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   23208:	4605      	mov	r5, r0
   2320a:	2800      	cmp	r0, #0
   2320c:	d049      	beq.n	232a2 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2320e:	2900      	cmp	r1, #0
   23210:	d049      	beq.n	232a6 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   23212:	2a00      	cmp	r2, #0
   23214:	d049      	beq.n	232aa <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   23216:	2310      	movs	r3, #16
   23218:	460a      	mov	r2, r1
   2321a:	4668      	mov	r0, sp
   2321c:	4619      	mov	r1, r3
   2321e:	f7ff ff19 	bl	23054 <_copy>
	add_round_key(state, s->words);
   23222:	4621      	mov	r1, r4
   23224:	4668      	mov	r0, sp
   23226:	f7ff ff2d 	bl	23084 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2322a:	3410      	adds	r4, #16
   2322c:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   23230:	4668      	mov	r0, sp
   23232:	f7ef f895 	bl	12360 <sub_bytes>
		shift_rows(state);
   23236:	4668      	mov	r0, sp
   23238:	f7ff ff69 	bl	2310e <shift_rows>
	mult_row_column(t, s);
   2323c:	4669      	mov	r1, sp
   2323e:	a804      	add	r0, sp, #16
   23240:	f7ff ff9e 	bl	23180 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   23244:	a901      	add	r1, sp, #4
   23246:	a805      	add	r0, sp, #20
   23248:	f7ff ff9a 	bl	23180 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2324c:	a902      	add	r1, sp, #8
   2324e:	a806      	add	r0, sp, #24
   23250:	f7ff ff96 	bl	23180 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   23254:	a903      	add	r1, sp, #12
   23256:	a807      	add	r0, sp, #28
   23258:	f7ff ff92 	bl	23180 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2325c:	2310      	movs	r3, #16
   2325e:	4619      	mov	r1, r3
   23260:	eb0d 0203 	add.w	r2, sp, r3
   23264:	4668      	mov	r0, sp
   23266:	f7ff fef5 	bl	23054 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2326a:	4621      	mov	r1, r4
   2326c:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2326e:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   23270:	f7ff ff08 	bl	23084 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   23274:	42b4      	cmp	r4, r6
   23276:	d1db      	bne.n	23230 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   23278:	f7ef f872 	bl	12360 <sub_bytes>
	shift_rows(state);
   2327c:	4668      	mov	r0, sp
   2327e:	f7ff ff46 	bl	2310e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   23282:	4621      	mov	r1, r4
   23284:	4668      	mov	r0, sp
   23286:	f7ff fefd 	bl	23084 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2328a:	2310      	movs	r3, #16
   2328c:	4619      	mov	r1, r3
   2328e:	466a      	mov	r2, sp
   23290:	4628      	mov	r0, r5
   23292:	f7ff fedf 	bl	23054 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   23296:	4668      	mov	r0, sp
   23298:	2210      	movs	r2, #16
   2329a:	2100      	movs	r1, #0
   2329c:	f7ff fee7 	bl	2306e <_set>

	return TC_CRYPTO_SUCCESS;
   232a0:	2001      	movs	r0, #1
}
   232a2:	b008      	add	sp, #32
   232a4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   232a6:	4608      	mov	r0, r1
   232a8:	e7fb      	b.n	232a2 <tc_aes_encrypt+0xa0>
   232aa:	4610      	mov	r0, r2
   232ac:	e7f9      	b.n	232a2 <tc_aes_encrypt+0xa0>

000232ae <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   232ae:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   232b0:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   232b2:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   232b4:	f912 3b10 	ldrsb.w	r3, [r2], #16
   232b8:	2b00      	cmp	r3, #0
   232ba:	bfac      	ite	ge
   232bc:	2300      	movge	r3, #0
   232be:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   232c0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   232c4:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   232c8:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   232ca:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   232ce:	d002      	beq.n	232d6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   232d0:	7813      	ldrb	r3, [r2, #0]
   232d2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   232d4:	e7f4      	b.n	232c0 <gf_double+0x12>
	}
}
   232d6:	bd10      	pop	{r4, pc}

000232d8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   232d8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   232da:	b120      	cbz	r0, 232e6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   232dc:	2258      	movs	r2, #88	; 0x58
   232de:	2100      	movs	r1, #0
   232e0:	f7ff fec5 	bl	2306e <_set>
   232e4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   232e6:	bd08      	pop	{r3, pc}

000232e8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   232e8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   232ea:	4604      	mov	r4, r0
   232ec:	b188      	cbz	r0, 23312 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   232ee:	2210      	movs	r2, #16
   232f0:	2100      	movs	r1, #0
   232f2:	f7ff febc 	bl	2306e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   232f6:	2210      	movs	r2, #16
   232f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   232fc:	2100      	movs	r1, #0
   232fe:	f7ff feb6 	bl	2306e <_set>
	s->leftover_offset = 0;
   23302:	2300      	movs	r3, #0
   23304:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   23306:	2200      	movs	r2, #0
   23308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2330c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   23310:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23312:	bd10      	pop	{r4, pc}

00023314 <tc_cmac_setup>:
{
   23314:	b570      	push	{r4, r5, r6, lr}
   23316:	4604      	mov	r4, r0
   23318:	460d      	mov	r5, r1
   2331a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2331c:	b310      	cbz	r0, 23364 <tc_cmac_setup+0x50>
   2331e:	b311      	cbz	r1, 23366 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   23320:	2258      	movs	r2, #88	; 0x58
   23322:	2100      	movs	r1, #0
   23324:	f7ff fea3 	bl	2306e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   23328:	4629      	mov	r1, r5
	s->sched = sched;
   2332a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2332c:	4630      	mov	r0, r6
   2332e:	f7ef f823 	bl	12378 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23332:	2210      	movs	r2, #16
   23334:	2100      	movs	r1, #0
   23336:	4620      	mov	r0, r4
   23338:	f7ff fe99 	bl	2306e <_set>
	gf_double (s->K1, s->iv);
   2333c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   23340:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23342:	4621      	mov	r1, r4
   23344:	4620      	mov	r0, r4
   23346:	f7ff ff5c 	bl	23202 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2334a:	4621      	mov	r1, r4
   2334c:	4628      	mov	r0, r5
   2334e:	f7ff ffae 	bl	232ae <gf_double>
	gf_double (s->K2, s->K1);
   23352:	4629      	mov	r1, r5
   23354:	f104 0020 	add.w	r0, r4, #32
   23358:	f7ff ffa9 	bl	232ae <gf_double>
	tc_cmac_init(s);
   2335c:	4620      	mov	r0, r4
   2335e:	f7ff ffc3 	bl	232e8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   23362:	2001      	movs	r0, #1
}
   23364:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   23366:	4608      	mov	r0, r1
   23368:	e7fc      	b.n	23364 <tc_cmac_setup+0x50>

0002336a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2336a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2336e:	460e      	mov	r6, r1
   23370:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   23372:	4604      	mov	r4, r0
   23374:	2800      	cmp	r0, #0
   23376:	d060      	beq.n	2343a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   23378:	b1fa      	cbz	r2, 233ba <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2337a:	2900      	cmp	r1, #0
   2337c:	d05d      	beq.n	2343a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2337e:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   23382:	ea53 0102 	orrs.w	r1, r3, r2
   23386:	d058      	beq.n	2343a <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   23388:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2338a:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2338e:	f142 32ff 	adc.w	r2, r2, #4294967295
   23392:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   23396:	f1b8 0f00 	cmp.w	r8, #0
   2339a:	d02c      	beq.n	233f6 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2339c:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   233a0:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   233a4:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   233a6:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   233a8:	d20a      	bcs.n	233c0 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   233aa:	462b      	mov	r3, r5
   233ac:	4632      	mov	r2, r6
   233ae:	4629      	mov	r1, r5
   233b0:	f7ff fe50 	bl	23054 <_copy>
			s->leftover_offset += data_length;
   233b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   233b6:	442b      	add	r3, r5
   233b8:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   233ba:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   233bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   233c0:	463b      	mov	r3, r7
   233c2:	4632      	mov	r2, r6
   233c4:	4639      	mov	r1, r7
   233c6:	f7ff fe45 	bl	23054 <_copy>
		data_length -= remaining_space;
   233ca:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   233cc:	2300      	movs	r3, #0
   233ce:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   233d0:	4445      	add	r5, r8
		data += remaining_space;
   233d2:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   233d4:	1e63      	subs	r3, r4, #1
   233d6:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   233da:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   233de:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   233e2:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   233e4:	ea82 0200 	eor.w	r2, r2, r0
   233e8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   233ea:	d1f6      	bne.n	233da <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   233ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   233ee:	4621      	mov	r1, r4
   233f0:	4620      	mov	r0, r4
   233f2:	f7ff ff06 	bl	23202 <tc_aes_encrypt>
   233f6:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   233fa:	2d10      	cmp	r5, #16
   233fc:	d80a      	bhi.n	23414 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   233fe:	2d00      	cmp	r5, #0
   23400:	d0db      	beq.n	233ba <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   23402:	462b      	mov	r3, r5
   23404:	4632      	mov	r2, r6
   23406:	4629      	mov	r1, r5
   23408:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2340c:	f7ff fe22 	bl	23054 <_copy>
		s->leftover_offset = data_length;
   23410:	6465      	str	r5, [r4, #68]	; 0x44
   23412:	e7d2      	b.n	233ba <tc_cmac_update+0x50>
   23414:	1e63      	subs	r3, r4, #1
   23416:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   23418:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2341c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23420:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   23422:	ea82 0200 	eor.w	r2, r2, r0
   23426:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23428:	d1f6      	bne.n	23418 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2342a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2342c:	4621      	mov	r1, r4
   2342e:	4620      	mov	r0, r4
   23430:	f7ff fee7 	bl	23202 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   23434:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   23436:	3d10      	subs	r5, #16
   23438:	e7df      	b.n	233fa <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2343a:	2000      	movs	r0, #0
   2343c:	e7be      	b.n	233bc <tc_cmac_update+0x52>

0002343e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2343e:	b570      	push	{r4, r5, r6, lr}
   23440:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   23442:	4605      	mov	r5, r0
   23444:	b1e8      	cbz	r0, 23482 <tc_cmac_final+0x44>
   23446:	b369      	cbz	r1, 234a4 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   23448:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2344a:	2a10      	cmp	r2, #16
   2344c:	d11a      	bne.n	23484 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2344e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23450:	1e63      	subs	r3, r4, #1
   23452:	3901      	subs	r1, #1
   23454:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   23458:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2345c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   23460:	4072      	eors	r2, r6
   23462:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23466:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   23468:	ea82 0206 	eor.w	r2, r2, r6
   2346c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2346e:	d1f3      	bne.n	23458 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   23470:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23472:	4621      	mov	r1, r4
   23474:	4628      	mov	r0, r5
   23476:	f7ff fec4 	bl	23202 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2347a:	4620      	mov	r0, r4
   2347c:	f7ff ff2c 	bl	232d8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   23480:	2001      	movs	r0, #1
}
   23482:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   23484:	f102 0030 	add.w	r0, r2, #48	; 0x30
   23488:	2100      	movs	r1, #0
   2348a:	f1c2 0210 	rsb	r2, r2, #16
   2348e:	4420      	add	r0, r4
   23490:	f7ff fded 	bl	2306e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   23494:	6c63      	ldr	r3, [r4, #68]	; 0x44
   23496:	4423      	add	r3, r4
   23498:	2280      	movs	r2, #128	; 0x80
   2349a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2349e:	f104 0120 	add.w	r1, r4, #32
   234a2:	e7d5      	b.n	23450 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   234a4:	4608      	mov	r0, r1
   234a6:	e7ec      	b.n	23482 <tc_cmac_final+0x44>

000234a8 <abort_function>:
{
   234a8:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   234aa:	2000      	movs	r0, #0
   234ac:	f7ee fd6a 	bl	11f84 <sys_reboot>

000234b0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   234b0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   234b2:	6800      	ldr	r0, [r0, #0]
   234b4:	f7ef b8ca 	b.w	1264c <z_arm_fatal_error>

000234b8 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   234b8:	2100      	movs	r1, #0
   234ba:	2001      	movs	r0, #1
   234bc:	f7ef b8c6 	b.w	1264c <z_arm_fatal_error>

000234c0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   234c0:	b508      	push	{r3, lr}
	handler();
   234c2:	f7ef f959 	bl	12778 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   234c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   234ca:	f7ef ba31 	b.w	12930 <z_arm_exc_exit>

000234ce <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   234ce:	3901      	subs	r1, #1
   234d0:	4603      	mov	r3, r0
   234d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   234d6:	b90a      	cbnz	r2, 234dc <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   234d8:	701a      	strb	r2, [r3, #0]

	return dest;
}
   234da:	4770      	bx	lr
		*d = *s;
   234dc:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   234e0:	e7f7      	b.n	234d2 <strcpy+0x4>

000234e2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   234e2:	4603      	mov	r3, r0
	size_t n = 0;
   234e4:	2000      	movs	r0, #0

	while (*s != '\0') {
   234e6:	5c1a      	ldrb	r2, [r3, r0]
   234e8:	b902      	cbnz	r2, 234ec <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   234ea:	4770      	bx	lr
		n++;
   234ec:	3001      	adds	r0, #1
   234ee:	e7fa      	b.n	234e6 <strlen+0x4>

000234f0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   234f0:	4603      	mov	r3, r0
	size_t n = 0;
   234f2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   234f4:	5c1a      	ldrb	r2, [r3, r0]
   234f6:	b10a      	cbz	r2, 234fc <strnlen+0xc>
   234f8:	4288      	cmp	r0, r1
   234fa:	d100      	bne.n	234fe <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   234fc:	4770      	bx	lr
		n++;
   234fe:	3001      	adds	r0, #1
   23500:	e7f8      	b.n	234f4 <strnlen+0x4>

00023502 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   23502:	1e43      	subs	r3, r0, #1
   23504:	3901      	subs	r1, #1
   23506:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2350a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2350e:	4282      	cmp	r2, r0
   23510:	d101      	bne.n	23516 <strcmp+0x14>
   23512:	2a00      	cmp	r2, #0
   23514:	d1f7      	bne.n	23506 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   23516:	1a10      	subs	r0, r2, r0
   23518:	4770      	bx	lr

0002351a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2351a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2351c:	b15a      	cbz	r2, 23536 <memcmp+0x1c>
   2351e:	3901      	subs	r1, #1
   23520:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   23522:	f810 2b01 	ldrb.w	r2, [r0], #1
   23526:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2352a:	42a0      	cmp	r0, r4
   2352c:	d001      	beq.n	23532 <memcmp+0x18>
   2352e:	429a      	cmp	r2, r3
   23530:	d0f7      	beq.n	23522 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   23532:	1ad0      	subs	r0, r2, r3
}
   23534:	bd10      	pop	{r4, pc}
		return 0;
   23536:	4610      	mov	r0, r2
   23538:	e7fc      	b.n	23534 <memcmp+0x1a>

0002353a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2353a:	1a43      	subs	r3, r0, r1
   2353c:	4293      	cmp	r3, r2
{
   2353e:	b510      	push	{r4, lr}
   23540:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   23544:	d308      	bcc.n	23558 <memmove+0x1e>
   23546:	3901      	subs	r1, #1
	char *dest = d;
   23548:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2354a:	429a      	cmp	r2, r3
   2354c:	d00b      	beq.n	23566 <memmove+0x2c>
			*dest = *src;
   2354e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   23552:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   23556:	e7f8      	b.n	2354a <memmove+0x10>
   23558:	440a      	add	r2, r1
			dest[n] = src[n];
   2355a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2355e:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   23562:	428a      	cmp	r2, r1
   23564:	d1f9      	bne.n	2355a <memmove+0x20>
		}
	}

	return d;
}
   23566:	bd10      	pop	{r4, pc}

00023568 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   23568:	b510      	push	{r4, lr}
   2356a:	1e43      	subs	r3, r0, #1
   2356c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2356e:	4291      	cmp	r1, r2
   23570:	d100      	bne.n	23574 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   23572:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   23574:	f811 4b01 	ldrb.w	r4, [r1], #1
   23578:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2357c:	e7f7      	b.n	2356e <memcpy+0x6>

0002357e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2357e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   23580:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   23582:	4603      	mov	r3, r0
	while (n > 0) {
   23584:	4293      	cmp	r3, r2
   23586:	d100      	bne.n	2358a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   23588:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2358a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2358e:	e7f9      	b.n	23584 <memset+0x6>

00023590 <_stdout_hook_default>:
}
   23590:	f04f 30ff 	mov.w	r0, #4294967295
   23594:	4770      	bx	lr

00023596 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   23596:	2806      	cmp	r0, #6
   23598:	d108      	bne.n	235ac <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2359a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2359e:	2201      	movs	r2, #1
   235a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   235a4:	f3bf 8f4f 	dsb	sy
        __WFE();
   235a8:	bf20      	wfe
    while (true)
   235aa:	e7fd      	b.n	235a8 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   235ac:	4770      	bx	lr

000235ae <pm_state_exit_post_ops>:
   235ae:	2300      	movs	r3, #0
   235b0:	f383 8811 	msr	BASEPRI, r3
   235b4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   235b8:	4770      	bx	lr

000235ba <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   235ba:	b510      	push	{r4, lr}
   235bc:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   235be:	7801      	ldrb	r1, [r0, #0]
   235c0:	7822      	ldrb	r2, [r4, #0]
   235c2:	428a      	cmp	r2, r1
{
   235c4:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   235c6:	d00f      	beq.n	235e8 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   235c8:	4669      	mov	r1, sp
   235ca:	f7ef fe69 	bl	132a0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   235ce:	a905      	add	r1, sp, #20
   235d0:	4620      	mov	r0, r4
   235d2:	f7ef fe65 	bl	132a0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   235d6:	2210      	movs	r2, #16
   235d8:	f10d 0115 	add.w	r1, sp, #21
   235dc:	f10d 0001 	add.w	r0, sp, #1
   235e0:	f7ff ff9b 	bl	2351a <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   235e4:	b00a      	add	sp, #40	; 0x28
   235e6:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   235e8:	2a01      	cmp	r2, #1
   235ea:	d006      	beq.n	235fa <bt_uuid_cmp+0x40>
   235ec:	2a02      	cmp	r2, #2
   235ee:	d007      	beq.n	23600 <bt_uuid_cmp+0x46>
   235f0:	b972      	cbnz	r2, 23610 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   235f2:	8840      	ldrh	r0, [r0, #2]
   235f4:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   235f6:	1ac0      	subs	r0, r0, r3
   235f8:	e7f4      	b.n	235e4 <bt_uuid_cmp+0x2a>
   235fa:	6840      	ldr	r0, [r0, #4]
   235fc:	6863      	ldr	r3, [r4, #4]
   235fe:	e7fa      	b.n	235f6 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   23600:	2210      	movs	r2, #16
   23602:	1c61      	adds	r1, r4, #1
   23604:	3001      	adds	r0, #1
}
   23606:	b00a      	add	sp, #40	; 0x28
   23608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2360c:	f7ff bf85 	b.w	2351a <memcmp>
	switch (u1->type) {
   23610:	f06f 0015 	mvn.w	r0, #21
   23614:	e7e6      	b.n	235e4 <bt_uuid_cmp+0x2a>

00023616 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   23616:	2a04      	cmp	r2, #4
{
   23618:	b510      	push	{r4, lr}
	switch (data_len) {
   2361a:	d00a      	beq.n	23632 <bt_uuid_create+0x1c>
   2361c:	2a10      	cmp	r2, #16
   2361e:	d00d      	beq.n	2363c <bt_uuid_create+0x26>
   23620:	2a02      	cmp	r2, #2
   23622:	f04f 0300 	mov.w	r3, #0
   23626:	d10f      	bne.n	23648 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   23628:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2362a:	880b      	ldrh	r3, [r1, #0]
   2362c:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2362e:	2001      	movs	r0, #1
}
   23630:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   23632:	2301      	movs	r3, #1
   23634:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   23636:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   23638:	6043      	str	r3, [r0, #4]
		break;
   2363a:	e7f8      	b.n	2362e <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   2363c:	2302      	movs	r3, #2
   2363e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   23642:	f7ff ff91 	bl	23568 <memcpy>
		break;
   23646:	e7f2      	b.n	2362e <bt_uuid_create+0x18>
	switch (data_len) {
   23648:	4618      	mov	r0, r3
   2364a:	e7f1      	b.n	23630 <bt_uuid_create+0x1a>

0002364c <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2364c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2364e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   23650:	2106      	movs	r1, #6
{
   23652:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   23654:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   23658:	f7f7 f94e 	bl	1a8f8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2365c:	b918      	cbnz	r0, 23666 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2365e:	79a3      	ldrb	r3, [r4, #6]
   23660:	f063 033f 	orn	r3, r3, #63	; 0x3f
   23664:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   23666:	bd10      	pop	{r4, pc}

00023668 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   23668:	280f      	cmp	r0, #15
   2366a:	d807      	bhi.n	2367c <bt_hci_evt_get_flags+0x14>
   2366c:	280d      	cmp	r0, #13
   2366e:	d80b      	bhi.n	23688 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   23670:	2805      	cmp	r0, #5
   23672:	bf08      	it	eq
   23674:	2003      	moveq	r0, #3
   23676:	bf18      	it	ne
   23678:	2002      	movne	r0, #2
   2367a:	4770      	bx	lr
	switch (evt) {
   2367c:	2813      	cmp	r0, #19
   2367e:	d003      	beq.n	23688 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   23680:	281a      	cmp	r0, #26
   23682:	bf08      	it	eq
   23684:	2001      	moveq	r0, #1
   23686:	e7f6      	b.n	23676 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   23688:	2001      	movs	r0, #1
	}
}
   2368a:	4770      	bx	lr

0002368c <hci_vendor_event>:
}
   2368c:	4770      	bx	lr

0002368e <bt_addr_le_copy>:
   2368e:	2207      	movs	r2, #7
   23690:	f7ff bf6a 	b.w	23568 <memcpy>

00023694 <atomic_or>:
{
   23694:	b510      	push	{r4, lr}
   23696:	4603      	mov	r3, r0
}
   23698:	f3bf 8f5b 	dmb	ish
   2369c:	e853 0f00 	ldrex	r0, [r3]
   236a0:	ea40 0201 	orr.w	r2, r0, r1
   236a4:	e843 2400 	strex	r4, r2, [r3]
   236a8:	2c00      	cmp	r4, #0
   236aa:	d1f7      	bne.n	2369c <atomic_or+0x8>
   236ac:	f3bf 8f5b 	dmb	ish
   236b0:	bd10      	pop	{r4, pc}

000236b2 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   236b2:	f3bf 8f5b 	dmb	ish
   236b6:	e850 3f00 	ldrex	r3, [r0]
   236ba:	400b      	ands	r3, r1
   236bc:	e840 3200 	strex	r2, r3, [r0]
   236c0:	2a00      	cmp	r2, #0
   236c2:	d1f8      	bne.n	236b6 <atomic_and.isra.0+0x4>
   236c4:	f3bf 8f5b 	dmb	ish
}
   236c8:	4770      	bx	lr

000236ca <bt_hci_disconnect>:
{
   236ca:	b570      	push	{r4, r5, r6, lr}
   236cc:	4606      	mov	r6, r0
   236ce:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   236d0:	f240 4006 	movw	r0, #1030	; 0x406
   236d4:	2103      	movs	r1, #3
   236d6:	f7f0 f9b1 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   236da:	4604      	mov	r4, r0
   236dc:	b168      	cbz	r0, 236fa <bt_hci_disconnect+0x30>
   236de:	2103      	movs	r1, #3
   236e0:	3008      	adds	r0, #8
   236e2:	f7f5 f909 	bl	188f8 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   236e6:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   236e8:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   236ea:	4621      	mov	r1, r4
   236ec:	2200      	movs	r2, #0
}
   236ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   236f2:	f240 4006 	movw	r0, #1030	; 0x406
   236f6:	f7f0 b9eb 	b.w	13ad0 <bt_hci_cmd_send_sync>
}
   236fa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   236fe:	bd70      	pop	{r4, r5, r6, pc}

00023700 <bt_le_set_data_len>:
{
   23700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23702:	4607      	mov	r7, r0
   23704:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   23706:	f242 0022 	movw	r0, #8226	; 0x2022
   2370a:	2106      	movs	r1, #6
{
   2370c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2370e:	f7f0 f995 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   23712:	4604      	mov	r4, r0
   23714:	b178      	cbz	r0, 23736 <bt_le_set_data_len+0x36>
   23716:	2106      	movs	r1, #6
   23718:	3008      	adds	r0, #8
   2371a:	f7f5 f8ed 	bl	188f8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2371e:	883b      	ldrh	r3, [r7, #0]
   23720:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   23722:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   23724:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   23726:	4621      	mov	r1, r4
   23728:	2200      	movs	r2, #0
}
   2372a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2372e:	f242 0022 	movw	r0, #8226	; 0x2022
   23732:	f7f0 b9cd 	b.w	13ad0 <bt_hci_cmd_send_sync>
}
   23736:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2373a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002373c <bt_le_set_phy>:
{
   2373c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23740:	4681      	mov	r9, r0
   23742:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   23744:	f242 0032 	movw	r0, #8242	; 0x2032
   23748:	2107      	movs	r1, #7
{
   2374a:	f89d a020 	ldrb.w	sl, [sp, #32]
   2374e:	4617      	mov	r7, r2
   23750:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   23752:	f7f0 f973 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   23756:	4605      	mov	r5, r0
   23758:	b1a0      	cbz	r0, 23784 <bt_le_set_phy+0x48>
   2375a:	2107      	movs	r1, #7
   2375c:	3008      	adds	r0, #8
   2375e:	f7f5 f8cb 	bl	188f8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   23762:	f8b9 3000 	ldrh.w	r3, [r9]
   23766:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   23768:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2376c:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2376e:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   23770:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   23774:	4629      	mov	r1, r5
   23776:	2200      	movs	r2, #0
}
   23778:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2377c:	f242 0032 	movw	r0, #8242	; 0x2032
   23780:	f7f0 b9a6 	b.w	13ad0 <bt_hci_cmd_send_sync>
}
   23784:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002378c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2378c:	6880      	ldr	r0, [r0, #8]
   2378e:	f7f0 ba4b 	b.w	13c28 <bt_hci_le_enh_conn_complete>

00023792 <bt_le_conn_params_valid>:
{
   23792:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   23794:	8803      	ldrh	r3, [r0, #0]
   23796:	8842      	ldrh	r2, [r0, #2]
   23798:	4293      	cmp	r3, r2
   2379a:	d819      	bhi.n	237d0 <bt_le_conn_params_valid+0x3e>
   2379c:	2b05      	cmp	r3, #5
   2379e:	d917      	bls.n	237d0 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   237a0:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   237a4:	d814      	bhi.n	237d0 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   237a6:	8883      	ldrh	r3, [r0, #4]
   237a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   237ac:	d210      	bcs.n	237d0 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   237ae:	88c0      	ldrh	r0, [r0, #6]
   237b0:	f1a0 010a 	sub.w	r1, r0, #10
   237b4:	b289      	uxth	r1, r1
   237b6:	f640 4476 	movw	r4, #3190	; 0xc76
   237ba:	42a1      	cmp	r1, r4
   237bc:	d808      	bhi.n	237d0 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   237be:	3301      	adds	r3, #1
   237c0:	b29b      	uxth	r3, r3
   237c2:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   237c4:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   237c8:	bf34      	ite	cc
   237ca:	2001      	movcc	r0, #1
   237cc:	2000      	movcs	r0, #0
}
   237ce:	bd10      	pop	{r4, pc}
		return false;
   237d0:	2000      	movs	r0, #0
   237d2:	e7fc      	b.n	237ce <bt_le_conn_params_valid+0x3c>

000237d4 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   237d4:	2000      	movs	r0, #0
   237d6:	4770      	bx	lr

000237d8 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   237d8:	2000      	movs	r0, #0
   237da:	4770      	bx	lr

000237dc <bt_addr_le_eq>:
{
   237dc:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   237de:	2207      	movs	r2, #7
   237e0:	f7ff fe9b 	bl	2351a <memcmp>
}
   237e4:	fab0 f080 	clz	r0, r0
   237e8:	0940      	lsrs	r0, r0, #5
   237ea:	bd08      	pop	{r3, pc}

000237ec <bt_lookup_id_addr>:
	return addr;
   237ec:	2800      	cmp	r0, #0
}
   237ee:	bf0c      	ite	eq
   237f0:	4608      	moveq	r0, r1
   237f2:	2000      	movne	r0, #0
   237f4:	4770      	bx	lr

000237f6 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   237f6:	b118      	cbz	r0, 23800 <bt_id_set_adv_random_addr+0xa>
   237f8:	b111      	cbz	r1, 23800 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   237fa:	4608      	mov	r0, r1
   237fc:	f7f0 bffe 	b.w	147fc <set_random_address>
}
   23800:	f06f 0015 	mvn.w	r0, #21
   23804:	4770      	bx	lr

00023806 <bt_id_set_adv_private_addr>:
{
   23806:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   23808:	4604      	mov	r4, r0
   2380a:	b180      	cbz	r0, 2382e <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2380c:	2106      	movs	r1, #6
   2380e:	4668      	mov	r0, sp
   23810:	f7f7 f872 	bl	1a8f8 <bt_rand>
	if (err) {
   23814:	b948      	cbnz	r0, 2382a <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   23816:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2381a:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   23820:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   23822:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   23826:	f7ff ffe6 	bl	237f6 <bt_id_set_adv_random_addr>
}
   2382a:	b002      	add	sp, #8
   2382c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2382e:	f06f 0015 	mvn.w	r0, #21
   23832:	e7fa      	b.n	2382a <bt_id_set_adv_private_addr+0x24>

00023834 <bt_id_adv_random_addr_check>:
}
   23834:	3800      	subs	r0, #0
   23836:	bf18      	it	ne
   23838:	2001      	movne	r0, #1
   2383a:	4770      	bx	lr

0002383c <get_adv_channel_map>:
{
   2383c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2383e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   23842:	bf0c      	ite	eq
   23844:	2007      	moveq	r0, #7
   23846:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   23848:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2384a:	bf48      	it	mi
   2384c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   23850:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   23852:	bf48      	it	mi
   23854:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   23858:	4770      	bx	lr

0002385a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2385a:	f3bf 8f5b 	dmb	ish
   2385e:	6800      	ldr	r0, [r0, #0]
   23860:	f3bf 8f5b 	dmb	ish
}
   23864:	4770      	bx	lr

00023866 <atomic_and>:
{
   23866:	b510      	push	{r4, lr}
   23868:	4603      	mov	r3, r0
}
   2386a:	f3bf 8f5b 	dmb	ish
   2386e:	e853 0f00 	ldrex	r0, [r3]
   23872:	ea00 0201 	and.w	r2, r0, r1
   23876:	e843 2400 	strex	r4, r2, [r3]
   2387a:	2c00      	cmp	r4, #0
   2387c:	d1f7      	bne.n	2386e <atomic_and+0x8>
   2387e:	f3bf 8f5b 	dmb	ish
   23882:	bd10      	pop	{r4, pc}

00023884 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   23884:	2301      	movs	r3, #1
{
   23886:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   23888:	fa03 f101 	lsl.w	r1, r3, r1
{
   2388c:	4604      	mov	r4, r0
	if (val) {
   2388e:	b162      	cbz	r2, 238aa <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23890:	f3bf 8f5b 	dmb	ish
   23894:	e854 3f00 	ldrex	r3, [r4]
   23898:	430b      	orrs	r3, r1
   2389a:	e844 3200 	strex	r2, r3, [r4]
   2389e:	2a00      	cmp	r2, #0
   238a0:	d1f8      	bne.n	23894 <atomic_set_bit_to+0x10>
   238a2:	f3bf 8f5b 	dmb	ish
	}
}
   238a6:	bc10      	pop	{r4}
   238a8:	4770      	bx	lr
   238aa:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   238ac:	43c9      	mvns	r1, r1
   238ae:	f7ff bfda 	b.w	23866 <atomic_and>

000238b2 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   238b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238b6:	b087      	sub	sp, #28
   238b8:	4605      	mov	r5, r0
   238ba:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   238be:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   238c2:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   238c6:	460c      	mov	r4, r1
   238c8:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   238ca:	2100      	movs	r1, #0
   238cc:	2210      	movs	r2, #16
   238ce:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   238d0:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   238d2:	f7ff fe54 	bl	2357e <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   238d6:	b9ee      	cbnz	r6, 23914 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   238d8:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   238dc:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   238de:	a902      	add	r1, sp, #8
   238e0:	f242 0008 	movw	r0, #8200	; 0x2008
   238e4:	f7f1 f974 	bl	14bd0 <hci_set_ad>
		if (err) {
   238e8:	4604      	mov	r4, r0
   238ea:	b978      	cbnz	r0, 2390c <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   238ec:	f1ba 0f00 	cmp.w	sl, #0
   238f0:	d13e      	bne.n	23970 <le_adv_update.constprop.0+0xbe>
   238f2:	3510      	adds	r5, #16
   238f4:	f3bf 8f5b 	dmb	ish
   238f8:	e855 3f00 	ldrex	r3, [r5]
   238fc:	f043 0304 	orr.w	r3, r3, #4
   23900:	e845 3200 	strex	r2, r3, [r5]
   23904:	2a00      	cmp	r2, #0
   23906:	d1f7      	bne.n	238f8 <le_adv_update.constprop.0+0x46>
   23908:	f3bf 8f5b 	dmb	ish
}
   2390c:	4620      	mov	r0, r4
   2390e:	b007      	add	sp, #28
   23910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   23914:	f7f0 ff56 	bl	147c4 <bt_get_name>
   23918:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2391a:	b9e4      	cbnz	r4, 23956 <le_adv_update.constprop.0+0xa4>
   2391c:	bb37      	cbnz	r7, 2396c <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   2391e:	4658      	mov	r0, fp
   23920:	f7ff fddf 	bl	234e2 <strlen>
   23924:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   23926:	2e01      	cmp	r6, #1
		d[0].data = ad;
   23928:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2392c:	f88d 3000 	strb.w	r3, [sp]
   23930:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   23934:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   23938:	d1d0      	bne.n	238dc <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   2393a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2393e:	9605      	str	r6, [sp, #20]
			d_len = 2;
   23940:	2202      	movs	r2, #2
   23942:	e7cc      	b.n	238de <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   23944:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   23948:	3a08      	subs	r2, #8
   2394a:	2a01      	cmp	r2, #1
   2394c:	d925      	bls.n	2399a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2394e:	3301      	adds	r3, #1
   23950:	4598      	cmp	r8, r3
   23952:	d1f7      	bne.n	23944 <le_adv_update.constprop.0+0x92>
   23954:	e7e2      	b.n	2391c <le_adv_update.constprop.0+0x6a>
   23956:	2300      	movs	r3, #0
   23958:	e7fa      	b.n	23950 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2395a:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2395e:	3a08      	subs	r2, #8
   23960:	2a01      	cmp	r2, #1
   23962:	d91a      	bls.n	2399a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   23964:	3301      	adds	r3, #1
   23966:	4599      	cmp	r9, r3
   23968:	d1f7      	bne.n	2395a <le_adv_update.constprop.0+0xa8>
   2396a:	e7d8      	b.n	2391e <le_adv_update.constprop.0+0x6c>
   2396c:	2300      	movs	r3, #0
   2396e:	e7fa      	b.n	23966 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   23970:	2e02      	cmp	r6, #2
   23972:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   23976:	bf08      	it	eq
   23978:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2397a:	a902      	add	r1, sp, #8
			d_len = 2;
   2397c:	bf08      	it	eq
   2397e:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   23980:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   23984:	bf08      	it	eq
   23986:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2398a:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2398e:	f7f1 f91f 	bl	14bd0 <hci_set_ad>
		if (err) {
   23992:	2800      	cmp	r0, #0
   23994:	d0ad      	beq.n	238f2 <le_adv_update.constprop.0+0x40>
   23996:	4604      	mov	r4, r0
   23998:	e7b8      	b.n	2390c <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   2399a:	f06f 0415 	mvn.w	r4, #21
   2399e:	e7b5      	b.n	2390c <le_adv_update.constprop.0+0x5a>

000239a0 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   239a0:	6843      	ldr	r3, [r0, #4]
   239a2:	f013 0008 	ands.w	r0, r3, #8
   239a6:	d00a      	beq.n	239be <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   239a8:	035a      	lsls	r2, r3, #13
   239aa:	d407      	bmi.n	239bc <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   239ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   239b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   239b4:	bf14      	ite	ne
   239b6:	2002      	movne	r0, #2
   239b8:	2001      	moveq	r0, #1
   239ba:	4770      	bx	lr
   239bc:	2001      	movs	r0, #1
}
   239be:	4770      	bx	lr

000239c0 <bt_le_adv_set_enable_legacy>:
{
   239c0:	b570      	push	{r4, r5, r6, lr}
   239c2:	4606      	mov	r6, r0
   239c4:	b086      	sub	sp, #24
   239c6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   239c8:	f242 000a 	movw	r0, #8202	; 0x200a
   239cc:	2101      	movs	r1, #1
   239ce:	f7f0 f835 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   239d2:	4604      	mov	r4, r0
   239d4:	b1b0      	cbz	r0, 23a04 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   239d6:	3008      	adds	r0, #8
	if (enable) {
   239d8:	b195      	cbz	r5, 23a00 <bt_le_adv_set_enable_legacy+0x40>
   239da:	2101      	movs	r1, #1
   239dc:	f000 ffdc 	bl	24998 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   239e0:	f106 0210 	add.w	r2, r6, #16
   239e4:	a903      	add	r1, sp, #12
   239e6:	4620      	mov	r0, r4
   239e8:	9500      	str	r5, [sp, #0]
   239ea:	2307      	movs	r3, #7
   239ec:	f7f0 f814 	bl	13a18 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   239f0:	2200      	movs	r2, #0
   239f2:	4621      	mov	r1, r4
   239f4:	f242 000a 	movw	r0, #8202	; 0x200a
   239f8:	f7f0 f86a 	bl	13ad0 <bt_hci_cmd_send_sync>
}
   239fc:	b006      	add	sp, #24
   239fe:	bd70      	pop	{r4, r5, r6, pc}
   23a00:	4629      	mov	r1, r5
   23a02:	e7eb      	b.n	239dc <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   23a04:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23a08:	e7f8      	b.n	239fc <bt_le_adv_set_enable_legacy+0x3c>

00023a0a <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   23a0a:	3018      	adds	r0, #24
   23a0c:	f7f9 bf2c 	b.w	1d868 <k_work_cancel_delayable>

00023a10 <tx_complete_work>:
	tx_notify(conn);
   23a10:	3828      	subs	r0, #40	; 0x28
   23a12:	f7f1 bbe5 	b.w	151e0 <tx_notify>

00023a16 <bt_conn_reset_rx_state>:
{
   23a16:	b510      	push	{r4, lr}
   23a18:	4604      	mov	r4, r0
	if (!conn->rx) {
   23a1a:	6900      	ldr	r0, [r0, #16]
   23a1c:	b118      	cbz	r0, 23a26 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   23a1e:	f7f4 fe65 	bl	186ec <net_buf_unref>
	conn->rx = NULL;
   23a22:	2300      	movs	r3, #0
   23a24:	6123      	str	r3, [r4, #16]
}
   23a26:	bd10      	pop	{r4, pc}

00023a28 <conn_lookup_handle>:
{
   23a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23a2c:	4607      	mov	r7, r0
   23a2e:	460e      	mov	r6, r1
   23a30:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   23a32:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   23a34:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   23a38:	42b4      	cmp	r4, r6
   23a3a:	d103      	bne.n	23a44 <conn_lookup_handle+0x1c>
	return NULL;
   23a3c:	2300      	movs	r3, #0
}
   23a3e:	4618      	mov	r0, r3
   23a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   23a44:	fb09 7004 	mla	r0, r9, r4, r7
   23a48:	f7f1 fe52 	bl	156f0 <bt_conn_ref>
   23a4c:	4603      	mov	r3, r0
		if (!conn) {
   23a4e:	b158      	cbz	r0, 23a68 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   23a50:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   23a52:	2d01      	cmp	r5, #1
   23a54:	d002      	beq.n	23a5c <conn_lookup_handle+0x34>
   23a56:	3d07      	subs	r5, #7
   23a58:	2d01      	cmp	r5, #1
   23a5a:	d803      	bhi.n	23a64 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   23a5c:	881a      	ldrh	r2, [r3, #0]
   23a5e:	4542      	cmp	r2, r8
   23a60:	d0ed      	beq.n	23a3e <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   23a62:	4618      	mov	r0, r3
   23a64:	f7f1 fe70 	bl	15748 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   23a68:	3401      	adds	r4, #1
   23a6a:	e7e5      	b.n	23a38 <conn_lookup_handle+0x10>

00023a6c <bt_conn_connected>:
{
   23a6c:	b510      	push	{r4, lr}
   23a6e:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   23a70:	f7f2 faae 	bl	15fd0 <bt_l2cap_connected>
	notify_connected(conn);
   23a74:	4620      	mov	r0, r4
}
   23a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   23a7a:	f7f1 bb83 	b.w	15184 <notify_connected>

00023a7e <bt_conn_disconnect>:
{
   23a7e:	b510      	push	{r4, lr}
	switch (conn->state) {
   23a80:	7a83      	ldrb	r3, [r0, #10]
   23a82:	3b02      	subs	r3, #2
{
   23a84:	4604      	mov	r4, r0
	switch (conn->state) {
   23a86:	2b06      	cmp	r3, #6
   23a88:	d816      	bhi.n	23ab8 <bt_conn_disconnect+0x3a>
   23a8a:	e8df f003 	tbb	[pc, r3]
   23a8e:	1504      	.short	0x1504
   23a90:	0b091515 	.word	0x0b091515
   23a94:	09          	.byte	0x09
   23a95:	00          	.byte	0x00
		conn->err = reason;
   23a96:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   23a98:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   23a9a:	4620      	mov	r0, r4
   23a9c:	f7f1 fe8c 	bl	157b8 <bt_conn_set_state>
{
   23aa0:	2000      	movs	r0, #0
}
   23aa2:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   23aa4:	8800      	ldrh	r0, [r0, #0]
   23aa6:	f7ff fe10 	bl	236ca <bt_hci_disconnect>
	if (err) {
   23aaa:	2800      	cmp	r0, #0
   23aac:	d1f9      	bne.n	23aa2 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   23aae:	7aa3      	ldrb	r3, [r4, #10]
   23ab0:	2b07      	cmp	r3, #7
   23ab2:	d1f5      	bne.n	23aa0 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   23ab4:	2108      	movs	r1, #8
   23ab6:	e7f0      	b.n	23a9a <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   23ab8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   23abc:	e7f1      	b.n	23aa2 <bt_conn_disconnect+0x24>

00023abe <bt_conn_get_security>:
}
   23abe:	2001      	movs	r0, #1
   23ac0:	4770      	bx	lr

00023ac2 <bt_conn_is_peer_addr_le>:
{
   23ac2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   23ac4:	7a03      	ldrb	r3, [r0, #8]
   23ac6:	428b      	cmp	r3, r1
{
   23ac8:	4604      	mov	r4, r0
   23aca:	4615      	mov	r5, r2
	if (id != conn->id) {
   23acc:	d115      	bne.n	23afa <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   23ace:	f100 0190 	add.w	r1, r0, #144	; 0x90
   23ad2:	2207      	movs	r2, #7
   23ad4:	4628      	mov	r0, r5
   23ad6:	f7ff fd20 	bl	2351a <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   23ada:	b180      	cbz	r0, 23afe <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   23adc:	78e3      	ldrb	r3, [r4, #3]
   23ade:	2207      	movs	r2, #7
   23ae0:	b943      	cbnz	r3, 23af4 <bt_conn_is_peer_addr_le+0x32>
   23ae2:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   23ae6:	4628      	mov	r0, r5
   23ae8:	f7ff fd17 	bl	2351a <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   23aec:	fab0 f080 	clz	r0, r0
   23af0:	0940      	lsrs	r0, r0, #5
}
   23af2:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   23af4:	f104 0197 	add.w	r1, r4, #151	; 0x97
   23af8:	e7f5      	b.n	23ae6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   23afa:	2000      	movs	r0, #0
   23afc:	e7f9      	b.n	23af2 <bt_conn_is_peer_addr_le+0x30>
		return true;
   23afe:	2001      	movs	r0, #1
   23b00:	e7f7      	b.n	23af2 <bt_conn_is_peer_addr_le+0x30>

00023b02 <bt_conn_get_dst>:
}
   23b02:	3090      	adds	r0, #144	; 0x90
   23b04:	4770      	bx	lr

00023b06 <bt_conn_le_conn_update>:
{
   23b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23b08:	4607      	mov	r7, r0
   23b0a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   23b0c:	f242 0013 	movw	r0, #8211	; 0x2013
   23b10:	210e      	movs	r1, #14
   23b12:	f7ef ff93 	bl	13a3c <bt_hci_cmd_create>
	if (!buf) {
   23b16:	4606      	mov	r6, r0
   23b18:	b1d0      	cbz	r0, 23b50 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   23b1a:	210e      	movs	r1, #14
   23b1c:	3008      	adds	r0, #8
   23b1e:	f7f4 feeb 	bl	188f8 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   23b22:	220e      	movs	r2, #14
   23b24:	4604      	mov	r4, r0
   23b26:	2100      	movs	r1, #0
   23b28:	f7ff fd29 	bl	2357e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   23b2c:	883b      	ldrh	r3, [r7, #0]
   23b2e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   23b30:	882b      	ldrh	r3, [r5, #0]
   23b32:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   23b34:	886b      	ldrh	r3, [r5, #2]
   23b36:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   23b38:	88ab      	ldrh	r3, [r5, #4]
   23b3a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   23b3c:	88eb      	ldrh	r3, [r5, #6]
   23b3e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   23b40:	4631      	mov	r1, r6
   23b42:	2200      	movs	r2, #0
}
   23b44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   23b48:	f242 0013 	movw	r0, #8211	; 0x2013
   23b4c:	f7ef bfc0 	b.w	13ad0 <bt_hci_cmd_send_sync>
}
   23b50:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023b56 <l2cap_connected>:
}
   23b56:	4770      	bx	lr

00023b58 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   23b58:	4770      	bx	lr

00023b5a <bt_l2cap_chan_del>:
{
   23b5a:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   23b5c:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   23b60:	4604      	mov	r4, r0
	if (!chan->conn) {
   23b62:	b123      	cbz	r3, 23b6e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   23b64:	686b      	ldr	r3, [r5, #4]
   23b66:	b103      	cbz	r3, 23b6a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   23b68:	4798      	blx	r3
	chan->conn = NULL;
   23b6a:	2300      	movs	r3, #0
   23b6c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   23b6e:	68e3      	ldr	r3, [r4, #12]
   23b70:	b10b      	cbz	r3, 23b76 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   23b72:	4620      	mov	r0, r4
   23b74:	4798      	blx	r3
	if (ops->released) {
   23b76:	6a2b      	ldr	r3, [r5, #32]
   23b78:	b11b      	cbz	r3, 23b82 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   23b7a:	4620      	mov	r0, r4
}
   23b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   23b80:	4718      	bx	r3
}
   23b82:	bd70      	pop	{r4, r5, r6, pc}

00023b84 <bt_l2cap_disconnected>:
{
   23b84:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   23b86:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23b88:	b130      	cbz	r0, 23b98 <bt_l2cap_disconnected+0x14>
	return node->next;
   23b8a:	f850 4908 	ldr.w	r4, [r0], #-8
   23b8e:	b104      	cbz	r4, 23b92 <bt_l2cap_disconnected+0xe>
   23b90:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   23b92:	f7ff ffe2 	bl	23b5a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23b96:	b904      	cbnz	r4, 23b9a <bt_l2cap_disconnected+0x16>
}
   23b98:	bd38      	pop	{r3, r4, r5, pc}
   23b9a:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23b9c:	b12d      	cbz	r5, 23baa <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   23b9e:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23ba0:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   23ba2:	f7ff ffda 	bl	23b5a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23ba6:	462c      	mov	r4, r5
   23ba8:	e7f7      	b.n	23b9a <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   23baa:	4620      	mov	r0, r4
}
   23bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   23bb0:	f7ff bfd3 	b.w	23b5a <bt_l2cap_chan_del>

00023bb4 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   23bb4:	3104      	adds	r1, #4
   23bb6:	f7f1 bef9 	b.w	159ac <bt_conn_create_pdu_timeout>

00023bba <bt_l2cap_send_cb>:
{
   23bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23bbe:	4614      	mov	r4, r2
   23bc0:	4605      	mov	r5, r0
   23bc2:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   23bc4:	f102 0008 	add.w	r0, r2, #8
   23bc8:	2104      	movs	r1, #4
   23bca:	461e      	mov	r6, r3
   23bcc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   23bd0:	f7f4 fe42 	bl	18858 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   23bd4:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   23bd6:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   23bd8:	3a04      	subs	r2, #4
   23bda:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   23bdc:	4643      	mov	r3, r8
   23bde:	4632      	mov	r2, r6
   23be0:	4621      	mov	r1, r4
   23be2:	4628      	mov	r0, r5
}
   23be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   23be8:	f7f1 bce4 	b.w	155b4 <bt_conn_send_cb>

00023bec <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   23bec:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23bee:	b130      	cbz	r0, 23bfe <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   23bf0:	8983      	ldrh	r3, [r0, #12]
   23bf2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23bf4:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   23bf8:	d001      	beq.n	23bfe <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   23bfa:	6880      	ldr	r0, [r0, #8]
   23bfc:	e7f7      	b.n	23bee <bt_l2cap_le_lookup_rx_cid+0x2>
}
   23bfe:	4770      	bx	lr

00023c00 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   23c00:	4770      	bx	lr

00023c02 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   23c02:	4603      	mov	r3, r0
	return list->head;
   23c04:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   23c06:	b128      	cbz	r0, 23c14 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23c08:	6859      	ldr	r1, [r3, #4]
	return node->next;
   23c0a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   23c0c:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23c0e:	4288      	cmp	r0, r1
	list->tail = node;
   23c10:	bf08      	it	eq
   23c12:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   23c14:	4770      	bx	lr

00023c16 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   23c16:	4603      	mov	r3, r0
	size_t bytes = 0;
   23c18:	2000      	movs	r0, #0

	while (buf) {
   23c1a:	b903      	cbnz	r3, 23c1e <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   23c1c:	4770      	bx	lr
		bytes += buf->len;
   23c1e:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   23c20:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   23c22:	4410      	add	r0, r2
		buf = buf->frags;
   23c24:	e7f9      	b.n	23c1a <net_buf_frags_len+0x4>

00023c26 <attr_read_type_cb>:
{
   23c26:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   23c28:	68d4      	ldr	r4, [r2, #12]
   23c2a:	7823      	ldrb	r3, [r4, #0]
   23c2c:	3102      	adds	r1, #2
   23c2e:	b913      	cbnz	r3, 23c36 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   23c30:	7021      	strb	r1, [r4, #0]
	return true;
   23c32:	2001      	movs	r0, #1
}
   23c34:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   23c36:	428b      	cmp	r3, r1
   23c38:	d0fb      	beq.n	23c32 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   23c3a:	8983      	ldrh	r3, [r0, #12]
   23c3c:	3b02      	subs	r3, #2
   23c3e:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   23c40:	2000      	movs	r0, #0
   23c42:	6110      	str	r0, [r2, #16]
		return false;
   23c44:	e7f6      	b.n	23c34 <attr_read_type_cb+0xe>

00023c46 <att_prepare_write_req>:
}
   23c46:	2006      	movs	r0, #6
   23c48:	4770      	bx	lr

00023c4a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23c4a:	f3bf 8f5b 	dmb	ish
   23c4e:	6800      	ldr	r0, [r0, #0]
   23c50:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   23c54:	4108      	asrs	r0, r1
}
   23c56:	f000 0001 	and.w	r0, r0, #1
   23c5a:	4770      	bx	lr

00023c5c <write_cb>:
{
   23c5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23c5e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   23c60:	4601      	mov	r1, r0
{
   23c62:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   23c64:	f44f 7295 	mov.w	r2, #298	; 0x12a
   23c68:	6820      	ldr	r0, [r4, #0]
   23c6a:	f000 fdd4 	bl	24816 <bt_gatt_check_perm>
   23c6e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   23c70:	bb00      	cbnz	r0, 23cb4 <write_cb+0x58>
	if (!data->req) {
   23c72:	7a23      	ldrb	r3, [r4, #8]
   23c74:	b1b3      	cbz	r3, 23ca4 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   23c76:	f1a3 0218 	sub.w	r2, r3, #24
   23c7a:	4253      	negs	r3, r2
   23c7c:	4153      	adcs	r3, r2
   23c7e:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   23c80:	9301      	str	r3, [sp, #4]
   23c82:	8a63      	ldrh	r3, [r4, #18]
   23c84:	9300      	str	r3, [sp, #0]
   23c86:	68ae      	ldr	r6, [r5, #8]
   23c88:	8a23      	ldrh	r3, [r4, #16]
   23c8a:	68e2      	ldr	r2, [r4, #12]
   23c8c:	6820      	ldr	r0, [r4, #0]
   23c8e:	4629      	mov	r1, r5
   23c90:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   23c92:	2800      	cmp	r0, #0
   23c94:	db08      	blt.n	23ca8 <write_cb+0x4c>
   23c96:	8a23      	ldrh	r3, [r4, #16]
   23c98:	4298      	cmp	r0, r3
   23c9a:	d10e      	bne.n	23cba <write_cb+0x5e>
	data->err = 0U;
   23c9c:	2300      	movs	r3, #0
   23c9e:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   23ca0:	2001      	movs	r0, #1
   23ca2:	e008      	b.n	23cb6 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   23ca4:	2302      	movs	r3, #2
   23ca6:	e7eb      	b.n	23c80 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   23ca8:	f110 0fff 	cmn.w	r0, #255	; 0xff
   23cac:	d305      	bcc.n	23cba <write_cb+0x5e>
		return -err;
   23cae:	4240      	negs	r0, r0
   23cb0:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   23cb2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   23cb4:	2000      	movs	r0, #0
}
   23cb6:	b002      	add	sp, #8
   23cb8:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   23cba:	200e      	movs	r0, #14
   23cbc:	e7f9      	b.n	23cb2 <write_cb+0x56>

00023cbe <bt_gatt_foreach_attr>:
{
   23cbe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   23cc0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   23cc4:	2300      	movs	r3, #0
   23cc6:	9300      	str	r3, [sp, #0]
   23cc8:	461a      	mov	r2, r3
   23cca:	f7f3 fd81 	bl	177d0 <bt_gatt_foreach_attr_type>
}
   23cce:	b005      	add	sp, #20
   23cd0:	f85d fb04 	ldr.w	pc, [sp], #4

00023cd4 <find_info_cb>:
{
   23cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   23cd6:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   23cd8:	6817      	ldr	r7, [r2, #0]
{
   23cda:	4605      	mov	r5, r0
   23cdc:	460e      	mov	r6, r1
   23cde:	4614      	mov	r4, r2
	if (!data->rsp) {
   23ce0:	b963      	cbnz	r3, 23cfc <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   23ce2:	6850      	ldr	r0, [r2, #4]
   23ce4:	2101      	movs	r1, #1
   23ce6:	3008      	adds	r0, #8
   23ce8:	f7f4 fe06 	bl	188f8 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   23cec:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   23cee:	682b      	ldr	r3, [r5, #0]
   23cf0:	781b      	ldrb	r3, [r3, #0]
   23cf2:	2b00      	cmp	r3, #0
   23cf4:	bf14      	ite	ne
   23cf6:	2302      	movne	r3, #2
   23cf8:	2301      	moveq	r3, #1
   23cfa:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   23cfc:	68a3      	ldr	r3, [r4, #8]
   23cfe:	781b      	ldrb	r3, [r3, #0]
   23d00:	2b01      	cmp	r3, #1
   23d02:	d003      	beq.n	23d0c <find_info_cb+0x38>
   23d04:	2b02      	cmp	r3, #2
   23d06:	d019      	beq.n	23d3c <find_info_cb+0x68>
   23d08:	2000      	movs	r0, #0
   23d0a:	e016      	b.n	23d3a <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   23d0c:	682b      	ldr	r3, [r5, #0]
   23d0e:	781b      	ldrb	r3, [r3, #0]
   23d10:	2b00      	cmp	r3, #0
   23d12:	d1f9      	bne.n	23d08 <find_info_cb+0x34>
   23d14:	6860      	ldr	r0, [r4, #4]
   23d16:	2104      	movs	r1, #4
   23d18:	3008      	adds	r0, #8
   23d1a:	f7f4 fded 	bl	188f8 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   23d1e:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   23d20:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   23d22:	682a      	ldr	r2, [r5, #0]
   23d24:	68e3      	ldr	r3, [r4, #12]
   23d26:	8852      	ldrh	r2, [r2, #2]
   23d28:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   23d2a:	6863      	ldr	r3, [r4, #4]
   23d2c:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   23d2e:	899b      	ldrh	r3, [r3, #12]
   23d30:	1ac0      	subs	r0, r0, r3
   23d32:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   23d34:	bf94      	ite	ls
   23d36:	2000      	movls	r0, #0
   23d38:	2001      	movhi	r0, #1
}
   23d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   23d3c:	682b      	ldr	r3, [r5, #0]
   23d3e:	781b      	ldrb	r3, [r3, #0]
   23d40:	2b02      	cmp	r3, #2
   23d42:	d1e1      	bne.n	23d08 <find_info_cb+0x34>
   23d44:	6860      	ldr	r0, [r4, #4]
   23d46:	2112      	movs	r1, #18
   23d48:	3008      	adds	r0, #8
   23d4a:	f7f4 fdd5 	bl	188f8 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   23d4e:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   23d50:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   23d52:	6829      	ldr	r1, [r5, #0]
   23d54:	68e0      	ldr	r0, [r4, #12]
   23d56:	2210      	movs	r2, #16
   23d58:	3101      	adds	r1, #1
   23d5a:	3002      	adds	r0, #2
   23d5c:	f7ff fc04 	bl	23568 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   23d60:	6863      	ldr	r3, [r4, #4]
   23d62:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   23d64:	899b      	ldrh	r3, [r3, #12]
   23d66:	1ac0      	subs	r0, r0, r3
   23d68:	2812      	cmp	r0, #18
   23d6a:	e7e3      	b.n	23d34 <find_info_cb+0x60>

00023d6c <att_chan_mtu_updated>:
{
   23d6c:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   23d6e:	6805      	ldr	r5, [r0, #0]
	return list->head;
   23d70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23d72:	b352      	cbz	r2, 23dca <att_chan_mtu_updated+0x5e>
	return node->next;
   23d74:	6813      	ldr	r3, [r2, #0]
   23d76:	b103      	cbz	r3, 23d7a <att_chan_mtu_updated+0xe>
   23d78:	3bf0      	subs	r3, #240	; 0xf0
   23d7a:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   23d7e:	2200      	movs	r2, #0
   23d80:	4611      	mov	r1, r2
   23d82:	e000      	b.n	23d86 <att_chan_mtu_updated+0x1a>
   23d84:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   23d86:	4284      	cmp	r4, r0
   23d88:	d007      	beq.n	23d9a <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   23d8a:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   23d8c:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   23d8e:	42b1      	cmp	r1, r6
   23d90:	bf38      	it	cc
   23d92:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   23d94:	42a2      	cmp	r2, r4
   23d96:	bf38      	it	cc
   23d98:	4622      	movcc	r2, r4
   23d9a:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23d9c:	b12b      	cbz	r3, 23daa <att_chan_mtu_updated+0x3e>
   23d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   23da2:	2b00      	cmp	r3, #0
   23da4:	d1ee      	bne.n	23d84 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   23da6:	4284      	cmp	r4, r0
   23da8:	d1ef      	bne.n	23d8a <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   23daa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   23dac:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   23dae:	428b      	cmp	r3, r1
   23db0:	d801      	bhi.n	23db6 <att_chan_mtu_updated+0x4a>
   23db2:	4290      	cmp	r0, r2
   23db4:	d90b      	bls.n	23dce <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   23db6:	4282      	cmp	r2, r0
   23db8:	bf38      	it	cc
   23dba:	4602      	movcc	r2, r0
   23dbc:	4299      	cmp	r1, r3
   23dbe:	6828      	ldr	r0, [r5, #0]
   23dc0:	bf38      	it	cc
   23dc2:	4619      	movcc	r1, r3
}
   23dc4:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   23dc6:	f7f4 b9fd 	b.w	181c4 <bt_gatt_att_max_mtu_changed>
   23dca:	4611      	mov	r1, r2
   23dcc:	e7ed      	b.n	23daa <att_chan_mtu_updated+0x3e>
}
   23dce:	bc70      	pop	{r4, r5, r6}
   23dd0:	4770      	bx	lr

00023dd2 <attr_read_group_cb>:
	if (!data->rsp->len) {
   23dd2:	68d0      	ldr	r0, [r2, #12]
   23dd4:	7803      	ldrb	r3, [r0, #0]
   23dd6:	3104      	adds	r1, #4
   23dd8:	b913      	cbnz	r3, 23de0 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   23dda:	7001      	strb	r1, [r0, #0]
	return true;
   23ddc:	2001      	movs	r0, #1
   23dde:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   23de0:	428b      	cmp	r3, r1
   23de2:	d0fb      	beq.n	23ddc <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   23de4:	6891      	ldr	r1, [r2, #8]
   23de6:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   23de8:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   23dea:	3b04      	subs	r3, #4
   23dec:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   23dee:	6110      	str	r0, [r2, #16]
}
   23df0:	4770      	bx	lr

00023df2 <chan_req_send>:
{
   23df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23df4:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   23df6:	6888      	ldr	r0, [r1, #8]
   23df8:	f7ff ff0d 	bl	23c16 <net_buf_frags_len>
   23dfc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   23dfe:	4283      	cmp	r3, r0
{
   23e00:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   23e02:	d30d      	bcc.n	23e20 <chan_req_send+0x2e>
	chan->req = req;
   23e04:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   23e08:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   23e0a:	2600      	movs	r6, #0
   23e0c:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   23e0e:	4628      	mov	r0, r5
   23e10:	4639      	mov	r1, r7
   23e12:	f7f2 fb1d 	bl	16450 <chan_send>
	if (err) {
   23e16:	b110      	cbz	r0, 23e1e <chan_req_send+0x2c>
		req->buf = buf;
   23e18:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   23e1a:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   23e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   23e20:	f06f 0079 	mvn.w	r0, #121	; 0x79
   23e24:	e7fb      	b.n	23e1e <chan_req_send+0x2c>

00023e26 <bt_att_chan_send_rsp>:
{
   23e26:	b538      	push	{r3, r4, r5, lr}
   23e28:	4604      	mov	r4, r0
   23e2a:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   23e2c:	f7f2 fb10 	bl	16450 <chan_send>
	if (err) {
   23e30:	b130      	cbz	r0, 23e40 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   23e32:	4629      	mov	r1, r5
   23e34:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   23e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   23e3c:	f7f4 bc2c 	b.w	18698 <net_buf_put>
}
   23e40:	bd38      	pop	{r3, r4, r5, pc}

00023e42 <process_queue>:
{
   23e42:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   23e44:	2200      	movs	r2, #0
{
   23e46:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   23e48:	2300      	movs	r3, #0
   23e4a:	4608      	mov	r0, r1
{
   23e4c:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   23e4e:	f7f4 fb1b 	bl	18488 <net_buf_get>
	if (buf) {
   23e52:	4605      	mov	r5, r0
   23e54:	b158      	cbz	r0, 23e6e <process_queue+0x2c>
	return chan_send(chan, buf);
   23e56:	4601      	mov	r1, r0
   23e58:	4620      	mov	r0, r4
   23e5a:	f7f2 faf9 	bl	16450 <chan_send>
		if (err) {
   23e5e:	4604      	mov	r4, r0
   23e60:	b118      	cbz	r0, 23e6a <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   23e62:	4629      	mov	r1, r5
   23e64:	4630      	mov	r0, r6
   23e66:	f001 fa43 	bl	252f0 <k_queue_prepend>
}
   23e6a:	4620      	mov	r0, r4
   23e6c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   23e6e:	f06f 0401 	mvn.w	r4, #1
   23e72:	e7fa      	b.n	23e6a <process_queue+0x28>

00023e74 <att_chan_read>:
{
   23e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e78:	4680      	mov	r8, r0
   23e7a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   23e7c:	4610      	mov	r0, r2
{
   23e7e:	4699      	mov	r9, r3
   23e80:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   23e82:	f7ff fec8 	bl	23c16 <net_buf_frags_len>
   23e86:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   23e8a:	4283      	cmp	r3, r0
{
   23e8c:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   23e8e:	d97a      	bls.n	23f86 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   23e90:	f8d8 3004 	ldr.w	r3, [r8, #4]
   23e94:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   23e96:	4630      	mov	r0, r6
   23e98:	f7f4 fc80 	bl	1879c <net_buf_frag_last>
	size_t len, total = 0;
   23e9c:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   23ea0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   23ea2:	4630      	mov	r0, r6
   23ea4:	f7ff feb7 	bl	23c16 <net_buf_frags_len>
   23ea8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   23eac:	f105 0708 	add.w	r7, r5, #8
   23eb0:	1a24      	subs	r4, r4, r0
   23eb2:	4638      	mov	r0, r7
   23eb4:	f000 fd5c 	bl	24970 <net_buf_simple_tailroom>
   23eb8:	4284      	cmp	r4, r0
   23eba:	d211      	bcs.n	23ee0 <att_chan_read+0x6c>
   23ebc:	4630      	mov	r0, r6
   23ebe:	f7ff feaa 	bl	23c16 <net_buf_frags_len>
   23ec2:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   23ec6:	1a24      	subs	r4, r4, r0
		if (!len) {
   23ec8:	bb34      	cbnz	r4, 23f18 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   23eca:	79b0      	ldrb	r0, [r6, #6]
   23ecc:	f7f4 f9d2 	bl	18274 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   23ed0:	2200      	movs	r2, #0
   23ed2:	2300      	movs	r3, #0
   23ed4:	f000 fd3b 	bl	2494e <net_buf_alloc_fixed>
			if (!frag) {
   23ed8:	4605      	mov	r5, r0
   23eda:	b930      	cbnz	r0, 23eea <att_chan_read+0x76>
	return total;
   23edc:	4657      	mov	r7, sl
   23ede:	e02c      	b.n	23f3a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   23ee0:	4638      	mov	r0, r7
   23ee2:	f000 fd45 	bl	24970 <net_buf_simple_tailroom>
   23ee6:	4604      	mov	r4, r0
   23ee8:	e7ee      	b.n	23ec8 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   23eea:	4601      	mov	r1, r0
   23eec:	4630      	mov	r0, r6
   23eee:	f7f4 fc93 	bl	18818 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   23ef2:	4630      	mov	r0, r6
   23ef4:	f7ff fe8f 	bl	23c16 <net_buf_frags_len>
   23ef8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   23efc:	f105 0708 	add.w	r7, r5, #8
   23f00:	1a24      	subs	r4, r4, r0
   23f02:	4638      	mov	r0, r7
   23f04:	f000 fd34 	bl	24970 <net_buf_simple_tailroom>
   23f08:	4284      	cmp	r4, r0
   23f0a:	d21a      	bcs.n	23f42 <att_chan_read+0xce>
   23f0c:	4630      	mov	r0, r6
   23f0e:	f7ff fe82 	bl	23c16 <net_buf_frags_len>
   23f12:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   23f16:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   23f18:	68a9      	ldr	r1, [r5, #8]
   23f1a:	89aa      	ldrh	r2, [r5, #12]
   23f1c:	f8cd 9000 	str.w	r9, [sp]
   23f20:	f8db 7004 	ldr.w	r7, [fp, #4]
   23f24:	9803      	ldr	r0, [sp, #12]
   23f26:	440a      	add	r2, r1
   23f28:	b2a3      	uxth	r3, r4
   23f2a:	4659      	mov	r1, fp
   23f2c:	47b8      	blx	r7
		if (read < 0) {
   23f2e:	1e07      	subs	r7, r0, #0
   23f30:	da0c      	bge.n	23f4c <att_chan_read+0xd8>
				return total;
   23f32:	f1ba 0f00 	cmp.w	sl, #0
   23f36:	bf18      	it	ne
   23f38:	4657      	movne	r7, sl
}
   23f3a:	4638      	mov	r0, r7
   23f3c:	b005      	add	sp, #20
   23f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f42:	4638      	mov	r0, r7
   23f44:	f000 fd14 	bl	24970 <net_buf_simple_tailroom>
   23f48:	4604      	mov	r4, r0
   23f4a:	e7e5      	b.n	23f18 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   23f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23f4e:	b993      	cbnz	r3, 23f76 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   23f50:	4639      	mov	r1, r7
   23f52:	f105 0008 	add.w	r0, r5, #8
   23f56:	f7f4 fccf 	bl	188f8 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   23f5a:	4630      	mov	r0, r6
   23f5c:	f7ff fe5b 	bl	23c16 <net_buf_frags_len>
   23f60:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   23f64:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   23f66:	4283      	cmp	r3, r0
		total += read;
   23f68:	44ba      	add	sl, r7
		offset += read;
   23f6a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   23f6e:	d9b5      	bls.n	23edc <att_chan_read+0x68>
   23f70:	42a7      	cmp	r7, r4
   23f72:	d096      	beq.n	23ea2 <att_chan_read+0x2e>
   23f74:	e7b2      	b.n	23edc <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   23f76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   23f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23f7a:	4639      	mov	r1, r7
   23f7c:	4628      	mov	r0, r5
   23f7e:	4798      	blx	r3
   23f80:	2800      	cmp	r0, #0
   23f82:	d1e5      	bne.n	23f50 <att_chan_read+0xdc>
   23f84:	e7aa      	b.n	23edc <att_chan_read+0x68>
		return 0;
   23f86:	2700      	movs	r7, #0
   23f88:	e7d7      	b.n	23f3a <att_chan_read+0xc6>

00023f8a <sys_slist_find_and_remove.isra.0>:
	return list->head;
   23f8a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23f8c:	2200      	movs	r2, #0
   23f8e:	b903      	cbnz	r3, 23f92 <sys_slist_find_and_remove.isra.0+0x8>
   23f90:	4770      	bx	lr
   23f92:	428b      	cmp	r3, r1
   23f94:	d10f      	bne.n	23fb6 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   23f96:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   23f98:	b93a      	cbnz	r2, 23faa <sys_slist_find_and_remove.isra.0+0x20>
   23f9a:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   23f9c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   23f9e:	4291      	cmp	r1, r2
   23fa0:	d100      	bne.n	23fa4 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   23fa2:	6043      	str	r3, [r0, #4]
	parent->next = child;
   23fa4:	2300      	movs	r3, #0
   23fa6:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   23fa8:	4770      	bx	lr
	parent->next = child;
   23faa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   23fac:	6843      	ldr	r3, [r0, #4]
   23fae:	4299      	cmp	r1, r3
	list->tail = node;
   23fb0:	bf08      	it	eq
   23fb2:	6042      	streq	r2, [r0, #4]
}
   23fb4:	e7f6      	b.n	23fa4 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   23fb6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23fb8:	681b      	ldr	r3, [r3, #0]
   23fba:	e7e8      	b.n	23f8e <sys_slist_find_and_remove.isra.0+0x4>

00023fbc <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   23fbc:	2006      	movs	r0, #6
   23fbe:	4770      	bx	lr

00023fc0 <atomic_test_and_set_bit>:
{
   23fc0:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   23fc2:	2301      	movs	r3, #1
   23fc4:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23fc8:	f3bf 8f5b 	dmb	ish
   23fcc:	e850 3f00 	ldrex	r3, [r0]
   23fd0:	ea43 0201 	orr.w	r2, r3, r1
   23fd4:	e840 2400 	strex	r4, r2, [r0]
   23fd8:	2c00      	cmp	r4, #0
   23fda:	d1f7      	bne.n	23fcc <atomic_test_and_set_bit+0xc>
   23fdc:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   23fe0:	4219      	tst	r1, r3
}
   23fe2:	bf14      	ite	ne
   23fe4:	2001      	movne	r0, #1
   23fe6:	2000      	moveq	r0, #0
   23fe8:	bd10      	pop	{r4, pc}

00023fea <read_cb>:
{
   23fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   23fec:	6816      	ldr	r6, [r2, #0]
{
   23fee:	4605      	mov	r5, r0
	data->err = 0x00;
   23ff0:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   23ff2:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   23ff4:	7313      	strb	r3, [r2, #12]
{
   23ff6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   23ff8:	4629      	mov	r1, r5
   23ffa:	2295      	movs	r2, #149	; 0x95
   23ffc:	f000 fc0b 	bl	24816 <bt_gatt_check_perm>
   24000:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   24002:	b980      	cbnz	r0, 24026 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   24004:	e9cd 0000 	strd	r0, r0, [sp]
   24008:	4629      	mov	r1, r5
   2400a:	88a3      	ldrh	r3, [r4, #4]
   2400c:	68a2      	ldr	r2, [r4, #8]
   2400e:	4630      	mov	r0, r6
   24010:	f7ff ff30 	bl	23e74 <att_chan_read>
	if (ret < 0) {
   24014:	2800      	cmp	r0, #0
   24016:	da09      	bge.n	2402c <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   24018:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2401c:	bf26      	itte	cs
   2401e:	4240      	negcs	r0, r0
   24020:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   24022:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   24024:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   24026:	2000      	movs	r0, #0
}
   24028:	b002      	add	sp, #8
   2402a:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2402c:	2001      	movs	r0, #1
   2402e:	e7fb      	b.n	24028 <read_cb+0x3e>

00024030 <read_vl_cb>:
{
   24030:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   24034:	f8d2 8000 	ldr.w	r8, [r2]
{
   24038:	4606      	mov	r6, r0
	data->err = 0x00;
   2403a:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2403c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   24040:	7313      	strb	r3, [r2, #12]
{
   24042:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   24044:	4631      	mov	r1, r6
   24046:	2295      	movs	r2, #149	; 0x95
   24048:	f000 fbe5 	bl	24816 <bt_gatt_check_perm>
   2404c:	4605      	mov	r5, r0
   2404e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   24050:	b9e0      	cbnz	r0, 2408c <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   24052:	68a0      	ldr	r0, [r4, #8]
   24054:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   24058:	8982      	ldrh	r2, [r0, #12]
   2405a:	1a9b      	subs	r3, r3, r2
   2405c:	2b01      	cmp	r3, #1
   2405e:	dd15      	ble.n	2408c <read_vl_cb+0x5c>
   24060:	2102      	movs	r1, #2
   24062:	3008      	adds	r0, #8
   24064:	f7f4 fc48 	bl	188f8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   24068:	e9cd 5500 	strd	r5, r5, [sp]
   2406c:	4607      	mov	r7, r0
   2406e:	88a3      	ldrh	r3, [r4, #4]
   24070:	68a2      	ldr	r2, [r4, #8]
   24072:	4631      	mov	r1, r6
   24074:	4640      	mov	r0, r8
   24076:	f7ff fefd 	bl	23e74 <att_chan_read>
	if (read < 0) {
   2407a:	1e03      	subs	r3, r0, #0
   2407c:	da0a      	bge.n	24094 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2407e:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   24082:	bf26      	itte	cs
   24084:	425b      	negcs	r3, r3
   24086:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   24088:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   2408a:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2408c:	2000      	movs	r0, #0
}
   2408e:	b002      	add	sp, #8
   24090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   24094:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   24096:	2001      	movs	r0, #1
   24098:	e7f9      	b.n	2408e <read_vl_cb+0x5e>

0002409a <bt_att_sent>:
{
   2409a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2409c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2409e:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   240a0:	f100 0394 	add.w	r3, r0, #148	; 0x94
	struct bt_att *att = chan->att;
   240a4:	f850 4c04 	ldr.w	r4, [r0, #-4]
   240a8:	f3bf 8f5b 	dmb	ish
   240ac:	e853 1f00 	ldrex	r1, [r3]
   240b0:	f021 0110 	bic.w	r1, r1, #16
   240b4:	e843 1200 	strex	r2, r1, [r3]
   240b8:	2a00      	cmp	r2, #0
   240ba:	d1f7      	bne.n	240ac <bt_att_sent+0x12>
   240bc:	f3bf 8f5b 	dmb	ish
	if (!att) {
   240c0:	b30c      	cbz	r4, 24106 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   240c2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   240c6:	b98b      	cbnz	r3, 240ec <bt_att_sent+0x52>
   240c8:	6863      	ldr	r3, [r4, #4]
   240ca:	b17b      	cbz	r3, 240ec <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   240cc:	1d20      	adds	r0, r4, #4
   240ce:	f7ff fd98 	bl	23c02 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   240d2:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   240d4:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   240d6:	4638      	mov	r0, r7
   240d8:	f7ff fe8b 	bl	23df2 <chan_req_send>
   240dc:	2800      	cmp	r0, #0
   240de:	da12      	bge.n	24106 <bt_att_sent+0x6c>
	return list->head;
   240e0:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   240e2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   240e4:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   240e6:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   240e8:	b903      	cbnz	r3, 240ec <bt_att_sent+0x52>
	list->tail = node;
   240ea:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   240ec:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   240f0:	4638      	mov	r0, r7
   240f2:	f7ff fea6 	bl	23e42 <process_queue>
	if (!err) {
   240f6:	b130      	cbz	r0, 24106 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   240f8:	f104 010c 	add.w	r1, r4, #12
   240fc:	4638      	mov	r0, r7
}
   240fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   24102:	f7ff be9e 	b.w	23e42 <process_queue>
}
   24106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024108 <att_req_send_process>:
{
   24108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2410c:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2410e:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24110:	2c00      	cmp	r4, #0
   24112:	d03b      	beq.n	2418c <att_req_send_process+0x84>
	return node->next;
   24114:	f854 69f0 	ldr.w	r6, [r4], #-240
   24118:	b106      	cbz	r6, 2411c <att_req_send_process+0x14>
   2411a:	3ef0      	subs	r6, #240	; 0xf0
{
   2411c:	2300      	movs	r3, #0
   2411e:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   24120:	f108 0704 	add.w	r7, r8, #4
   24124:	e013      	b.n	2414e <att_req_send_process+0x46>
		if (!req && prev &&
   24126:	b1c3      	cbz	r3, 2415a <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   24128:	2103      	movs	r1, #3
   2412a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2412e:	f7ff fd8c 	bl	23c4a <atomic_test_bit>
   24132:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   24134:	f103 0098 	add.w	r0, r3, #152	; 0x98
   24138:	f7ff fd87 	bl	23c4a <atomic_test_bit>
		if (!req && prev &&
   2413c:	4282      	cmp	r2, r0
   2413e:	d10c      	bne.n	2415a <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24140:	b326      	cbz	r6, 2418c <att_req_send_process+0x84>
   24142:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   24146:	b102      	cbz	r2, 2414a <att_req_send_process+0x42>
   24148:	3af0      	subs	r2, #240	; 0xf0
{
   2414a:	4634      	mov	r4, r6
   2414c:	4616      	mov	r6, r2
		if (chan->req) {
   2414e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   24152:	2a00      	cmp	r2, #0
   24154:	d1f4      	bne.n	24140 <att_req_send_process+0x38>
		if (!req && prev &&
   24156:	2d00      	cmp	r5, #0
   24158:	d0e5      	beq.n	24126 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2415a:	4638      	mov	r0, r7
   2415c:	f7ff fd51 	bl	23c02 <sys_slist_get>
	if (node) {
   24160:	4605      	mov	r5, r0
   24162:	b908      	cbnz	r0, 24168 <att_req_send_process+0x60>
   24164:	4623      	mov	r3, r4
   24166:	e7eb      	b.n	24140 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   24168:	4601      	mov	r1, r0
   2416a:	4620      	mov	r0, r4
   2416c:	f7f2 f9d0 	bl	16510 <bt_att_chan_req_send>
   24170:	2800      	cmp	r0, #0
   24172:	da0b      	bge.n	2418c <att_req_send_process+0x84>
	return list->head;
   24174:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   24178:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2417a:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2417e:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   24182:	2b00      	cmp	r3, #0
   24184:	d1ee      	bne.n	24164 <att_req_send_process+0x5c>
	list->tail = node;
   24186:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2418a:	e7eb      	b.n	24164 <att_req_send_process+0x5c>
}
   2418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024190 <bt_att_status>:
{
   24190:	b538      	push	{r3, r4, r5, lr}
   24192:	4605      	mov	r5, r0
   24194:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   24196:	2100      	movs	r1, #0
   24198:	f7ff fd57 	bl	23c4a <atomic_test_bit>
   2419c:	b1c0      	cbz	r0, 241d0 <bt_att_status+0x40>
	if (!chan->att) {
   2419e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   241a2:	b1a8      	cbz	r0, 241d0 <bt_att_status+0x40>
	if (chan->req) {
   241a4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   241a8:	b993      	cbnz	r3, 241d0 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   241aa:	3004      	adds	r0, #4
   241ac:	f7ff fd29 	bl	23c02 <sys_slist_get>
	if (!node) {
   241b0:	4604      	mov	r4, r0
   241b2:	b168      	cbz	r0, 241d0 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   241b4:	4601      	mov	r1, r0
   241b6:	1f28      	subs	r0, r5, #4
   241b8:	f7f2 f9aa 	bl	16510 <bt_att_chan_req_send>
   241bc:	2800      	cmp	r0, #0
   241be:	da07      	bge.n	241d0 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   241c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   241c4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   241c6:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   241c8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   241ca:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   241cc:	b902      	cbnz	r2, 241d0 <bt_att_status+0x40>
	list->tail = node;
   241ce:	609c      	str	r4, [r3, #8]
}
   241d0:	bd38      	pop	{r3, r4, r5, pc}

000241d2 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   241d2:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   241d4:	6883      	ldr	r3, [r0, #8]
   241d6:	699b      	ldr	r3, [r3, #24]
   241d8:	b10b      	cbz	r3, 241de <att_sent+0xc>
		chan->ops->sent(chan);
   241da:	3004      	adds	r0, #4
   241dc:	4718      	bx	r3
}
   241de:	4770      	bx	lr

000241e0 <att_tx_complete>:
{
   241e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   241e4:	4606      	mov	r6, r0
   241e6:	460d      	mov	r5, r1
	if (!err) {
   241e8:	4614      	mov	r4, r2
   241ea:	b122      	cbz	r2, 241f6 <att_tx_complete+0x16>
}
   241ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   241f0:	4608      	mov	r0, r1
   241f2:	f7f2 b911 	b.w	16418 <tx_meta_data_free>
		att_sent(conn, user_data);
   241f6:	f7ff ffec 	bl	241d2 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   241fa:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   241fc:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   24200:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   24204:	4628      	mov	r0, r5
   24206:	f7f2 f907 	bl	16418 <tx_meta_data_free>
	if (!err && func) {
   2420a:	b92f      	cbnz	r7, 24218 <att_tx_complete+0x38>
}
   2420c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   24210:	4649      	mov	r1, r9
   24212:	4630      	mov	r0, r6
   24214:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   24216:	3401      	adds	r4, #1
   24218:	b2a3      	uxth	r3, r4
   2421a:	4543      	cmp	r3, r8
   2421c:	d3f8      	bcc.n	24210 <att_tx_complete+0x30>
   2421e:	e7f5      	b.n	2420c <att_tx_complete+0x2c>

00024220 <att_req_sent>:
{
   24220:	b510      	push	{r4, lr}
   24222:	460c      	mov	r4, r1
	if (!err) {
   24224:	b90a      	cbnz	r2, 2422a <att_req_sent+0xa>
		att_sent(conn, user_data);
   24226:	f7ff ffd4 	bl	241d2 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2422a:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2422c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   24230:	b12b      	cbz	r3, 2423e <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   24232:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   24236:	2300      	movs	r3, #0
   24238:	30c0      	adds	r0, #192	; 0xc0
   2423a:	f7f9 fb0f 	bl	1d85c <k_work_reschedule>
	tx_meta_data_free(user_data);
   2423e:	4620      	mov	r0, r4
}
   24240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   24244:	f7f2 b8e8 	b.w	16418 <tx_meta_data_free>

00024248 <att_cfm_sent>:
{
   24248:	b510      	push	{r4, lr}
   2424a:	460c      	mov	r4, r1
	if (!err) {
   2424c:	b90a      	cbnz	r2, 24252 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2424e:	f7ff ffc0 	bl	241d2 <att_sent>
   24252:	6823      	ldr	r3, [r4, #0]
   24254:	f3bf 8f5b 	dmb	ish
   24258:	3398      	adds	r3, #152	; 0x98
   2425a:	e853 1f00 	ldrex	r1, [r3]
   2425e:	f021 0102 	bic.w	r1, r1, #2
   24262:	e843 1200 	strex	r2, r1, [r3]
   24266:	2a00      	cmp	r2, #0
   24268:	d1f7      	bne.n	2425a <att_cfm_sent+0x12>
   2426a:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2426e:	4620      	mov	r0, r4
}
   24270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   24274:	f7f2 b8d0 	b.w	16418 <tx_meta_data_free>

00024278 <att_rsp_sent>:
{
   24278:	b510      	push	{r4, lr}
   2427a:	460c      	mov	r4, r1
	if (!err) {
   2427c:	b90a      	cbnz	r2, 24282 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2427e:	f7ff ffa8 	bl	241d2 <att_sent>
   24282:	6823      	ldr	r3, [r4, #0]
   24284:	f3bf 8f5b 	dmb	ish
   24288:	3398      	adds	r3, #152	; 0x98
   2428a:	e853 1f00 	ldrex	r1, [r3]
   2428e:	f021 0101 	bic.w	r1, r1, #1
   24292:	e843 1200 	strex	r2, r1, [r3]
   24296:	2a00      	cmp	r2, #0
   24298:	d1f7      	bne.n	2428a <att_rsp_sent+0x12>
   2429a:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2429e:	4620      	mov	r0, r4
}
   242a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   242a4:	f7f2 b8b8 	b.w	16418 <tx_meta_data_free>

000242a8 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   242a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   242ac:	4688      	mov	r8, r1
   242ae:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   242b0:	2101      	movs	r1, #1
   242b2:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   242b4:	4605      	mov	r5, r0
   242b6:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   242b8:	f7f2 fa96 	bl	167e8 <bt_att_chan_create_pdu>
	if (!buf) {
   242bc:	4604      	mov	r4, r0
   242be:	b170      	cbz	r0, 242de <send_err_rsp.part.0+0x36>
   242c0:	2104      	movs	r1, #4
   242c2:	3008      	adds	r0, #8
   242c4:	f7f4 fb18 	bl	188f8 <net_buf_simple_add>
	rsp->request = req;
   242c8:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   242cc:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   242d0:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   242d2:	4621      	mov	r1, r4
   242d4:	4628      	mov	r0, r5
}
   242d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   242da:	f7ff bda4 	b.w	23e26 <bt_att_chan_send_rsp>
}
   242de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000242e2 <att_write_req>:
{
   242e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   242e4:	460c      	mov	r4, r1
   242e6:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   242e8:	f101 0008 	add.w	r0, r1, #8
   242ec:	f000 fb34 	bl	24958 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   242f0:	89a2      	ldrh	r2, [r4, #12]
   242f2:	9201      	str	r2, [sp, #4]
   242f4:	68a2      	ldr	r2, [r4, #8]
   242f6:	9200      	str	r2, [sp, #0]
   242f8:	4603      	mov	r3, r0
   242fa:	2213      	movs	r2, #19
   242fc:	2112      	movs	r1, #18
   242fe:	4628      	mov	r0, r5
   24300:	f7f2 fb38 	bl	16974 <att_write_rsp.constprop.0>
}
   24304:	b003      	add	sp, #12
   24306:	bd30      	pop	{r4, r5, pc}

00024308 <att_write_cmd>:
{
   24308:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2430a:	460c      	mov	r4, r1
   2430c:	4605      	mov	r5, r0
   2430e:	f101 0008 	add.w	r0, r1, #8
   24312:	f000 fb21 	bl	24958 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   24316:	89a2      	ldrh	r2, [r4, #12]
   24318:	9201      	str	r2, [sp, #4]
   2431a:	68a2      	ldr	r2, [r4, #8]
   2431c:	9200      	str	r2, [sp, #0]
   2431e:	2200      	movs	r2, #0
   24320:	4603      	mov	r3, r0
   24322:	4611      	mov	r1, r2
   24324:	4628      	mov	r0, r5
   24326:	f7f2 fb25 	bl	16974 <att_write_rsp.constprop.0>
}
   2432a:	b003      	add	sp, #12
   2432c:	bd30      	pop	{r4, r5, pc}

0002432e <att_read_blob_req>:
{
   2432e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   24330:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   24332:	8813      	ldrh	r3, [r2, #0]
   24334:	8852      	ldrh	r2, [r2, #2]
   24336:	9200      	str	r2, [sp, #0]
   24338:	210c      	movs	r1, #12
   2433a:	220d      	movs	r2, #13
   2433c:	f7f2 fcd2 	bl	16ce4 <att_read_rsp>
}
   24340:	b003      	add	sp, #12
   24342:	f85d fb04 	ldr.w	pc, [sp], #4

00024346 <att_read_req>:
{
   24346:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   24348:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2434a:	2200      	movs	r2, #0
   2434c:	881b      	ldrh	r3, [r3, #0]
   2434e:	9200      	str	r2, [sp, #0]
   24350:	210a      	movs	r1, #10
   24352:	220b      	movs	r2, #11
   24354:	f7f2 fcc6 	bl	16ce4 <att_read_rsp>
}
   24358:	b003      	add	sp, #12
   2435a:	f85d fb04 	ldr.w	pc, [sp], #4

0002435e <att_mtu_req>:
{
   2435e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24360:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   24362:	f850 2b98 	ldr.w	r2, [r0], #152
{
   24366:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   24368:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2436a:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2436c:	f7ff fc6d 	bl	23c4a <atomic_test_bit>
   24370:	4604      	mov	r4, r0
   24372:	b9d8      	cbnz	r0, 243ac <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   24374:	689b      	ldr	r3, [r3, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   24376:	881b      	ldrh	r3, [r3, #0]
   24378:	2b16      	cmp	r3, #22
   2437a:	d919      	bls.n	243b0 <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2437c:	4630      	mov	r0, r6
   2437e:	2202      	movs	r2, #2
   24380:	f7f2 fb5c 	bl	16a3c <bt_att_create_pdu>
	if (!pdu) {
   24384:	4606      	mov	r6, r0
   24386:	b1a8      	cbz	r0, 243b4 <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   24388:	2102      	movs	r1, #2
   2438a:	3008      	adds	r0, #8
   2438c:	f7f4 fab4 	bl	188f8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   24390:	2717      	movs	r7, #23
   24392:	7007      	strb	r7, [r0, #0]
   24394:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   24396:	4631      	mov	r1, r6
   24398:	4628      	mov	r0, r5
   2439a:	f7ff fd44 	bl	23e26 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   2439e:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   243a0:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   243a2:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   243a4:	f7ff fce2 	bl	23d6c <att_chan_mtu_updated>
	return 0;
   243a8:	4620      	mov	r0, r4
}
   243aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   243ac:	2006      	movs	r0, #6
   243ae:	e7fc      	b.n	243aa <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   243b0:	2004      	movs	r0, #4
   243b2:	e7fa      	b.n	243aa <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   243b4:	200e      	movs	r0, #14
   243b6:	e7f8      	b.n	243aa <att_mtu_req+0x4c>

000243b8 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   243b8:	898a      	ldrh	r2, [r1, #12]
   243ba:	6889      	ldr	r1, [r1, #8]
   243bc:	2300      	movs	r3, #0
   243be:	f7f2 be39 	b.w	17034 <att_handle_rsp>

000243c2 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   243c2:	2001      	movs	r0, #1
   243c4:	4770      	bx	lr

000243c6 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   243c6:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   243c8:	f7f1 ff4a 	bl	16260 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   243cc:	b198      	cbz	r0, 243f6 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   243ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   243d0:	b18b      	cbz	r3, 243f6 <bt_att_clear_out_of_sync_sent+0x30>
   243d2:	f3bf 8f5b 	dmb	ish
   243d6:	3bf0      	subs	r3, #240	; 0xf0
   243d8:	f103 0298 	add.w	r2, r3, #152	; 0x98
   243dc:	e852 0f00 	ldrex	r0, [r2]
   243e0:	f020 0020 	bic.w	r0, r0, #32
   243e4:	e842 0100 	strex	r1, r0, [r2]
   243e8:	2900      	cmp	r1, #0
   243ea:	d1f7      	bne.n	243dc <bt_att_clear_out_of_sync_sent+0x16>
   243ec:	f3bf 8f5b 	dmb	ish
	return node->next;
   243f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   243f4:	e7ec      	b.n	243d0 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   243f6:	bd08      	pop	{r3, pc}

000243f8 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   243f8:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   243fa:	2104      	movs	r1, #4
   243fc:	f7ff fbf6 	bl	23bec <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   24400:	b128      	cbz	r0, 2440e <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   24402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   24406:	2105      	movs	r1, #5
   24408:	3094      	adds	r0, #148	; 0x94
   2440a:	f7ff bc1e 	b.w	23c4a <atomic_test_bit>
}
   2440e:	bd08      	pop	{r3, pc}

00024410 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   24410:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   24412:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   24416:	2201      	movs	r2, #1
   24418:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2441a:	7403      	strb	r3, [r0, #16]
}
   2441c:	4770      	bx	lr

0002441e <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2441e:	6010      	str	r0, [r2, #0]
}
   24420:	2000      	movs	r0, #0
   24422:	4770      	bx	lr

00024424 <gatt_ccc_changed>:
{
   24424:	b430      	push	{r4, r5}
   24426:	460b      	mov	r3, r1
   24428:	460a      	mov	r2, r1
   2442a:	f101 0450 	add.w	r4, r1, #80	; 0x50
	uint16_t value = 0x0000;
   2442e:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   24430:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   24432:	320a      	adds	r2, #10
   24434:	42a9      	cmp	r1, r5
   24436:	bf38      	it	cc
   24438:	4629      	movcc	r1, r5
   2443a:	42a2      	cmp	r2, r4
   2443c:	d1f8      	bne.n	24430 <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   2443e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
   24442:	428a      	cmp	r2, r1
   24444:	d005      	beq.n	24452 <gatt_ccc_changed+0x2e>
		ccc->value = value;
   24446:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
		if (ccc->cfg_changed) {
   2444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2444c:	b10b      	cbz	r3, 24452 <gatt_ccc_changed+0x2e>
}
   2444e:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   24450:	4718      	bx	r3
}
   24452:	bc30      	pop	{r4, r5}
   24454:	4770      	bx	lr

00024456 <gatt_indicate_rsp>:
{
   24456:	b510      	push	{r4, lr}
   24458:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2445a:	68a3      	ldr	r3, [r4, #8]
{
   2445c:	460a      	mov	r2, r1
	if (params->func) {
   2445e:	b10b      	cbz	r3, 24464 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   24460:	4621      	mov	r1, r4
   24462:	4798      	blx	r3
	params->_ref--;
   24464:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   24466:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   24468:	3b01      	subs	r3, #1
   2446a:	b2db      	uxtb	r3, r3
   2446c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2446e:	b122      	cbz	r2, 2447a <gatt_indicate_rsp+0x24>
   24470:	b91b      	cbnz	r3, 2447a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   24472:	4620      	mov	r0, r4
}
   24474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   24478:	4710      	bx	r2
}
   2447a:	bd10      	pop	{r4, pc}

0002447c <match_uuid>:
	data->attr = attr;
   2447c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2447e:	8091      	strh	r1, [r2, #4]
}
   24480:	2000      	movs	r0, #0
   24482:	4770      	bx	lr

00024484 <gen_hash_m>:
{
   24484:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   24486:	6807      	ldr	r7, [r0, #0]
   24488:	783d      	ldrb	r5, [r7, #0]
{
   2448a:	b089      	sub	sp, #36	; 0x24
   2448c:	4606      	mov	r6, r0
   2448e:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   24490:	b9dd      	cbnz	r5, 244ca <gen_hash_m+0x46>
	switch (u16->val) {
   24492:	887b      	ldrh	r3, [r7, #2]
   24494:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   24498:	d004      	beq.n	244a4 <gen_hash_m+0x20>
   2449a:	d810      	bhi.n	244be <gen_hash_m+0x3a>
   2449c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   244a0:	2b03      	cmp	r3, #3
   244a2:	d812      	bhi.n	244ca <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   244a4:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   244a8:	2202      	movs	r2, #2
   244aa:	f10d 010a 	add.w	r1, sp, #10
   244ae:	4620      	mov	r0, r4
   244b0:	f7fe ff5b 	bl	2336a <tc_cmac_update>
   244b4:	b968      	cbnz	r0, 244d2 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   244b6:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   244ba:	65a2      	str	r2, [r4, #88]	; 0x58
   244bc:	e006      	b.n	244cc <gen_hash_m+0x48>
	switch (u16->val) {
   244be:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   244c2:	33ff      	adds	r3, #255	; 0xff
   244c4:	b29b      	uxth	r3, r3
   244c6:	2b04      	cmp	r3, #4
   244c8:	d91e      	bls.n	24508 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   244ca:	2501      	movs	r5, #1
}
   244cc:	4628      	mov	r0, r5
   244ce:	b009      	add	sp, #36	; 0x24
   244d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   244d2:	887b      	ldrh	r3, [r7, #2]
   244d4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   244d8:	2202      	movs	r2, #2
   244da:	f10d 010a 	add.w	r1, sp, #10
   244de:	4620      	mov	r0, r4
   244e0:	f7fe ff43 	bl	2336a <tc_cmac_update>
   244e4:	2800      	cmp	r0, #0
   244e6:	d0e6      	beq.n	244b6 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   244e8:	2000      	movs	r0, #0
   244ea:	9000      	str	r0, [sp, #0]
   244ec:	aa03      	add	r2, sp, #12
   244ee:	6877      	ldr	r7, [r6, #4]
   244f0:	2313      	movs	r3, #19
   244f2:	4631      	mov	r1, r6
   244f4:	47b8      	blx	r7
		if (len < 0) {
   244f6:	1e02      	subs	r2, r0, #0
   244f8:	dbdf      	blt.n	244ba <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   244fa:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   244fc:	4620      	mov	r0, r4
   244fe:	f7fe ff34 	bl	2336a <tc_cmac_update>
   24502:	2800      	cmp	r0, #0
   24504:	d1e1      	bne.n	244ca <gen_hash_m+0x46>
   24506:	e7d6      	b.n	244b6 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   24508:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2450c:	2202      	movs	r2, #2
   2450e:	f10d 010a 	add.w	r1, sp, #10
   24512:	4620      	mov	r0, r4
   24514:	f7fe ff29 	bl	2336a <tc_cmac_update>
   24518:	2800      	cmp	r0, #0
   2451a:	d0cc      	beq.n	244b6 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2451c:	887b      	ldrh	r3, [r7, #2]
   2451e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24522:	2202      	movs	r2, #2
   24524:	f10d 010a 	add.w	r1, sp, #10
   24528:	e7e8      	b.n	244fc <gen_hash_m+0x78>

0002452a <bt_addr_le_eq>:
{
   2452a:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2452c:	2207      	movs	r2, #7
   2452e:	f7fe fff4 	bl	2351a <memcmp>
}
   24532:	fab0 f080 	clz	r0, r0
   24536:	0940      	lsrs	r0, r0, #5
   24538:	bd08      	pop	{r3, pc}

0002453a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2453a:	2207      	movs	r2, #7
   2453c:	f7ff b814 	b.w	23568 <memcpy>

00024540 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   24540:	2301      	movs	r3, #1
   24542:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24544:	f3bf 8f5b 	dmb	ish
   24548:	e850 2f00 	ldrex	r2, [r0]
   2454c:	431a      	orrs	r2, r3
   2454e:	e840 2100 	strex	r1, r2, [r0]
   24552:	2900      	cmp	r1, #0
   24554:	d1f8      	bne.n	24548 <atomic_set_bit+0x8>
   24556:	f3bf 8f5b 	dmb	ish
}
   2455a:	4770      	bx	lr

0002455c <sc_restore_rsp>:
{
   2455c:	b538      	push	{r3, r4, r5, lr}
   2455e:	4604      	mov	r4, r0
   24560:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   24562:	f7ff ff2e 	bl	243c2 <bt_att_fixed_chan_only>
   24566:	b150      	cbz	r0, 2457e <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   24568:	4620      	mov	r0, r4
   2456a:	f7f2 fe9b 	bl	172a4 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2456e:	b130      	cbz	r0, 2457e <sc_restore_rsp+0x22>
   24570:	7a03      	ldrb	r3, [r0, #8]
   24572:	07db      	lsls	r3, r3, #31
   24574:	d503      	bpl.n	2457e <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   24576:	2100      	movs	r1, #0
   24578:	300c      	adds	r0, #12
   2457a:	f7ff ffe1 	bl	24540 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2457e:	b965      	cbnz	r5, 2459a <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   24580:	7a20      	ldrb	r0, [r4, #8]
   24582:	f104 0190 	add.w	r1, r4, #144	; 0x90
   24586:	f7f2 feaf 	bl	172e8 <find_sc_cfg>
		if (sc_cfg) {
   2458a:	b130      	cbz	r0, 2459a <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2458c:	4629      	mov	r1, r5
   2458e:	2204      	movs	r2, #4
}
   24590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   24594:	3008      	adds	r0, #8
   24596:	f7fe bff2 	b.w	2357e <memset>
}
   2459a:	bd38      	pop	{r3, r4, r5, pc}

0002459c <sc_clear>:
{
   2459c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2459e:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   245a2:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   245a4:	4631      	mov	r1, r6
   245a6:	7a00      	ldrb	r0, [r0, #8]
   245a8:	f7ff f916 	bl	237d8 <bt_addr_le_is_bonded>
   245ac:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   245ae:	4631      	mov	r1, r6
   245b0:	f7f2 fe9a 	bl	172e8 <find_sc_cfg>
	if (!cfg) {
   245b4:	b128      	cbz	r0, 245c2 <sc_clear+0x26>
}
   245b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   245ba:	220c      	movs	r2, #12
   245bc:	2100      	movs	r1, #0
   245be:	f7fe bfde 	b.w	2357e <memset>
}
   245c2:	bd70      	pop	{r4, r5, r6, pc}

000245c4 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   245c4:	2a02      	cmp	r2, #2
{
   245c6:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   245c8:	d108      	bne.n	245dc <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   245ca:	2300      	movs	r3, #0
   245cc:	f100 0190 	add.w	r1, r0, #144	; 0x90
   245d0:	461a      	mov	r2, r3
   245d2:	7a00      	ldrb	r0, [r0, #8]
   245d4:	f7f2 ff36 	bl	17444 <sc_save>
}
   245d8:	2002      	movs	r0, #2
   245da:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   245dc:	f7ff ffde 	bl	2459c <sc_clear>
   245e0:	e7fa      	b.n	245d8 <sc_ccc_cfg_write+0x14>

000245e2 <read_appearance>:
{
   245e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   245e4:	4615      	mov	r5, r2
   245e6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   245ea:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   245ec:	f7ff f8f2 	bl	237d4 <bt_get_appearance>
	if (offset > value_len) {
   245f0:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   245f2:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   245f6:	d80e      	bhi.n	24616 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   245f8:	f1c6 0402 	rsb	r4, r6, #2
   245fc:	42bc      	cmp	r4, r7
   245fe:	bfa8      	it	ge
   24600:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   24602:	f10d 0306 	add.w	r3, sp, #6
   24606:	4622      	mov	r2, r4
   24608:	1999      	adds	r1, r3, r6
   2460a:	4628      	mov	r0, r5
   2460c:	f7fe ffac 	bl	23568 <memcpy>
}
   24610:	4620      	mov	r0, r4
   24612:	b003      	add	sp, #12
   24614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24616:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2461a:	e7f9      	b.n	24610 <read_appearance+0x2e>

0002461c <read_name>:
{
   2461c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24620:	4698      	mov	r8, r3
   24622:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   24626:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   24628:	f7f0 f8cc 	bl	147c4 <bt_get_name>
   2462c:	4607      	mov	r7, r0
				 strlen(name));
   2462e:	f7fe ff58 	bl	234e2 <strlen>
	if (offset > value_len) {
   24632:	b283      	uxth	r3, r0
   24634:	42b3      	cmp	r3, r6
   24636:	d30c      	bcc.n	24652 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   24638:	1b9c      	subs	r4, r3, r6
   2463a:	4544      	cmp	r4, r8
   2463c:	bfa8      	it	ge
   2463e:	4644      	movge	r4, r8
   24640:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   24642:	4622      	mov	r2, r4
   24644:	19b9      	adds	r1, r7, r6
   24646:	4628      	mov	r0, r5
   24648:	f7fe ff8e 	bl	23568 <memcpy>
}
   2464c:	4620      	mov	r0, r4
   2464e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24652:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   24656:	e7f9      	b.n	2464c <read_name+0x30>

00024658 <cf_read>:
{
   24658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2465a:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2465c:	2300      	movs	r3, #0
{
   2465e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   24662:	f88d 3004 	strb.w	r3, [sp, #4]
{
   24666:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   24668:	f7f2 fe1c 	bl	172a4 <find_cf_cfg>
	if (cfg) {
   2466c:	b128      	cbz	r0, 2467a <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2466e:	f100 0108 	add.w	r1, r0, #8
   24672:	2201      	movs	r2, #1
   24674:	a801      	add	r0, sp, #4
   24676:	f7fe ff77 	bl	23568 <memcpy>
	if (offset > value_len) {
   2467a:	2e01      	cmp	r6, #1
   2467c:	d80d      	bhi.n	2469a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2467e:	f1c6 0401 	rsb	r4, r6, #1
   24682:	42bc      	cmp	r4, r7
   24684:	bfa8      	it	ge
   24686:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   24688:	ab01      	add	r3, sp, #4
   2468a:	4622      	mov	r2, r4
   2468c:	1999      	adds	r1, r3, r6
   2468e:	4628      	mov	r0, r5
   24690:	f7fe ff6a 	bl	23568 <memcpy>
}
   24694:	4620      	mov	r0, r4
   24696:	b003      	add	sp, #12
   24698:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2469a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2469e:	e7f9      	b.n	24694 <cf_read+0x3c>

000246a0 <bt_gatt_attr_read_service>:
{
   246a0:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   246a2:	68c9      	ldr	r1, [r1, #12]
{
   246a4:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   246a6:	780a      	ldrb	r2, [r1, #0]
{
   246a8:	461c      	mov	r4, r3
   246aa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   246ae:	b992      	cbnz	r2, 246d6 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   246b0:	884a      	ldrh	r2, [r1, #2]
   246b2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   246b6:	2b02      	cmp	r3, #2
   246b8:	d818      	bhi.n	246ec <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   246ba:	f1c3 0202 	rsb	r2, r3, #2
   246be:	4294      	cmp	r4, r2
   246c0:	bfa8      	it	ge
   246c2:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   246c4:	4622      	mov	r2, r4
   246c6:	f10d 0106 	add.w	r1, sp, #6
   246ca:	4419      	add	r1, r3
   246cc:	f7fe ff4c 	bl	23568 <memcpy>
}
   246d0:	4620      	mov	r0, r4
   246d2:	b002      	add	sp, #8
   246d4:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   246d6:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   246d8:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   246dc:	d806      	bhi.n	246ec <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   246de:	f1c3 0210 	rsb	r2, r3, #16
   246e2:	4294      	cmp	r4, r2
   246e4:	bfa8      	it	ge
   246e6:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   246e8:	4622      	mov	r2, r4
   246ea:	e7ee      	b.n	246ca <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   246ec:	f06f 0406 	mvn.w	r4, #6
   246f0:	e7ee      	b.n	246d0 <bt_gatt_attr_read_service+0x30>

000246f2 <bt_gatt_attr_read_ccc>:
{
   246f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   246f4:	68c9      	ldr	r1, [r1, #12]
{
   246f6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   246fa:	4615      	mov	r5, r2
   246fc:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   246fe:	f7f2 fe0f 	bl	17320 <find_ccc_cfg>
	if (cfg) {
   24702:	b100      	cbz	r0, 24706 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   24704:	8900      	ldrh	r0, [r0, #8]
   24706:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2470a:	2e02      	cmp	r6, #2
   2470c:	d80e      	bhi.n	2472c <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2470e:	f1c6 0402 	rsb	r4, r6, #2
   24712:	42bc      	cmp	r4, r7
   24714:	bfa8      	it	ge
   24716:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   24718:	f10d 0306 	add.w	r3, sp, #6
   2471c:	4622      	mov	r2, r4
   2471e:	1999      	adds	r1, r3, r6
   24720:	4628      	mov	r0, r5
   24722:	f7fe ff21 	bl	23568 <memcpy>
}
   24726:	4620      	mov	r0, r4
   24728:	b003      	add	sp, #12
   2472a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2472c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   24730:	e7f9      	b.n	24726 <bt_gatt_attr_read_ccc+0x34>

00024732 <bt_gatt_attr_read>:
{
   24732:	b510      	push	{r4, lr}
   24734:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   24738:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2473c:	42a1      	cmp	r1, r4
{
   2473e:	4610      	mov	r0, r2
	if (offset > value_len) {
   24740:	d80b      	bhi.n	2475a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   24742:	1a64      	subs	r4, r4, r1
   24744:	429c      	cmp	r4, r3
   24746:	bfa8      	it	ge
   24748:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2474a:	9b03      	ldr	r3, [sp, #12]
   2474c:	b2a4      	uxth	r4, r4
   2474e:	4622      	mov	r2, r4
   24750:	4419      	add	r1, r3
   24752:	f7fe ff09 	bl	23568 <memcpy>
}
   24756:	4620      	mov	r0, r4
   24758:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2475a:	f06f 0406 	mvn.w	r4, #6
   2475e:	e7fa      	b.n	24756 <bt_gatt_attr_read+0x24>

00024760 <bt_gatt_attr_value_handle>:
{
   24760:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   24762:	4604      	mov	r4, r0
   24764:	b910      	cbnz	r0, 2476c <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   24766:	2000      	movs	r0, #0
}
   24768:	b002      	add	sp, #8
   2476a:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2476c:	2300      	movs	r3, #0
   2476e:	f88d 3004 	strb.w	r3, [sp, #4]
   24772:	6800      	ldr	r0, [r0, #0]
   24774:	f642 0303 	movw	r3, #10243	; 0x2803
   24778:	a901      	add	r1, sp, #4
   2477a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2477e:	f7fe ff1c 	bl	235ba <bt_uuid_cmp>
   24782:	2800      	cmp	r0, #0
   24784:	d1ef      	bne.n	24766 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   24786:	68e3      	ldr	r3, [r4, #12]
   24788:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2478a:	2800      	cmp	r0, #0
   2478c:	d1ec      	bne.n	24768 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2478e:	4620      	mov	r0, r4
   24790:	f7f2 ffde 	bl	17750 <bt_gatt_attr_get_handle>
   24794:	3001      	adds	r0, #1
   24796:	b280      	uxth	r0, r0
	return handle;
   24798:	e7e6      	b.n	24768 <bt_gatt_attr_value_handle+0x8>

0002479a <bt_gatt_attr_read_chrc>:
{
   2479a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2479c:	68cc      	ldr	r4, [r1, #12]
{
   2479e:	b087      	sub	sp, #28
   247a0:	4608      	mov	r0, r1
   247a2:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   247a4:	79a3      	ldrb	r3, [r4, #6]
   247a6:	f88d 3004 	strb.w	r3, [sp, #4]
{
   247aa:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   247ae:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   247b0:	f7ff ffd6 	bl	24760 <bt_gatt_attr_value_handle>
   247b4:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   247b8:	6821      	ldr	r1, [r4, #0]
   247ba:	780b      	ldrb	r3, [r1, #0]
   247bc:	b99b      	cbnz	r3, 247e6 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   247be:	884b      	ldrh	r3, [r1, #2]
   247c0:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   247c4:	2405      	movs	r4, #5
	if (offset > value_len) {
   247c6:	42b4      	cmp	r4, r6
   247c8:	d315      	bcc.n	247f6 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   247ca:	1ba4      	subs	r4, r4, r6
   247cc:	42bc      	cmp	r4, r7
   247ce:	bfa8      	it	ge
   247d0:	463c      	movge	r4, r7
   247d2:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   247d4:	ab01      	add	r3, sp, #4
   247d6:	4622      	mov	r2, r4
   247d8:	1999      	adds	r1, r3, r6
   247da:	4628      	mov	r0, r5
   247dc:	f7fe fec4 	bl	23568 <memcpy>
}
   247e0:	4620      	mov	r0, r4
   247e2:	b007      	add	sp, #28
   247e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   247e6:	2210      	movs	r2, #16
   247e8:	3101      	adds	r1, #1
   247ea:	f10d 0007 	add.w	r0, sp, #7
   247ee:	f7fe febb 	bl	23568 <memcpy>
		value_len += 16U;
   247f2:	2413      	movs	r4, #19
   247f4:	e7e7      	b.n	247c6 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   247f6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   247fa:	e7f1      	b.n	247e0 <bt_gatt_attr_read_chrc+0x46>

000247fc <bt_gatt_foreach_attr>:
{
   247fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   247fe:	e9cd 2301 	strd	r2, r3, [sp, #4]
   24802:	2300      	movs	r3, #0
   24804:	9300      	str	r3, [sp, #0]
   24806:	461a      	mov	r2, r3
   24808:	f7f2 ffe2 	bl	177d0 <bt_gatt_foreach_attr_type>
}
   2480c:	b005      	add	sp, #20
   2480e:	f85d fb04 	ldr.w	pc, [sp], #4

00024812 <db_hash_process>:
	db_hash_gen(true);
   24812:	f7f3 b845 	b.w	178a0 <db_hash_gen.constprop.0>

00024816 <bt_gatt_check_perm>:
{
   24816:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   24818:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2481a:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2481c:	d504      	bpl.n	24828 <bt_gatt_check_perm+0x12>
   2481e:	f013 0f95 	tst.w	r3, #149	; 0x95
   24822:	d01d      	beq.n	24860 <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   24824:	684c      	ldr	r4, [r1, #4]
   24826:	b1dc      	cbz	r4, 24860 <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   24828:	0794      	lsls	r4, r2, #30
   2482a:	d504      	bpl.n	24836 <bt_gatt_check_perm+0x20>
   2482c:	f413 7f95 	tst.w	r3, #298	; 0x12a
   24830:	d018      	beq.n	24864 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   24832:	6889      	ldr	r1, [r1, #8]
   24834:	b1b1      	cbz	r1, 24864 <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   24836:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2483a:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2483e:	d001      	beq.n	24844 <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   24840:	2005      	movs	r0, #5
}
   24842:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   24844:	f014 0f30 	tst.w	r4, #48	; 0x30
   24848:	d105      	bne.n	24856 <bt_gatt_check_perm+0x40>
	return 0;
   2484a:	f014 0f0c 	tst.w	r4, #12
   2484e:	bf14      	ite	ne
   24850:	200f      	movne	r0, #15
   24852:	2000      	moveq	r0, #0
   24854:	e7f5      	b.n	24842 <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   24856:	f7ff f932 	bl	23abe <bt_conn_get_security>
   2485a:	2802      	cmp	r0, #2
   2485c:	d8f5      	bhi.n	2484a <bt_gatt_check_perm+0x34>
   2485e:	e7ef      	b.n	24840 <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   24860:	2002      	movs	r0, #2
   24862:	e7ee      	b.n	24842 <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   24864:	2003      	movs	r0, #3
   24866:	e7ec      	b.n	24842 <bt_gatt_check_perm+0x2c>

00024868 <bt_gatt_change_aware>:
{
   24868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2486a:	4606      	mov	r6, r0
   2486c:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   2486e:	f7f2 fd19 	bl	172a4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   24872:	b318      	cbz	r0, 248bc <bt_gatt_change_aware+0x54>
   24874:	7a03      	ldrb	r3, [r0, #8]
   24876:	07db      	lsls	r3, r3, #31
   24878:	d520      	bpl.n	248bc <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2487a:	f3bf 8f5b 	dmb	ish
   2487e:	68c5      	ldr	r5, [r0, #12]
   24880:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   24884:	f015 0501 	ands.w	r5, r5, #1
   24888:	f100 040c 	add.w	r4, r0, #12
   2488c:	d116      	bne.n	248bc <bt_gatt_change_aware+0x54>
	if (!req) {
   2488e:	b1b7      	cbz	r7, 248be <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24890:	f3bf 8f5b 	dmb	ish
   24894:	e854 1f00 	ldrex	r1, [r4]
   24898:	f021 0302 	bic.w	r3, r1, #2
   2489c:	e844 3200 	strex	r2, r3, [r4]
   248a0:	2a00      	cmp	r2, #0
   248a2:	d1f7      	bne.n	24894 <bt_gatt_change_aware+0x2c>
   248a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   248a8:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   248ac:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   248ae:	d008      	beq.n	248c2 <bt_gatt_change_aware+0x5a>
		bt_att_clear_out_of_sync_sent(conn);
   248b0:	f7ff fd89 	bl	243c6 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   248b4:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   248b6:	4620      	mov	r0, r4
   248b8:	f7ff fe42 	bl	24540 <atomic_set_bit>
		return true;
   248bc:	2501      	movs	r5, #1
}
   248be:	4628      	mov	r0, r5
   248c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   248c2:	f7ff fd7e 	bl	243c2 <bt_att_fixed_chan_only>
   248c6:	2800      	cmp	r0, #0
   248c8:	d0f9      	beq.n	248be <bt_gatt_change_aware+0x56>
   248ca:	4630      	mov	r0, r6
   248cc:	f7ff fd94 	bl	243f8 <bt_att_out_of_sync_sent_on_fixed>
   248d0:	2800      	cmp	r0, #0
   248d2:	d0f4      	beq.n	248be <bt_gatt_change_aware+0x56>
   248d4:	f3bf 8f5b 	dmb	ish
   248d8:	e854 3f00 	ldrex	r3, [r4]
   248dc:	f023 0302 	bic.w	r3, r3, #2
   248e0:	e844 3200 	strex	r2, r3, [r4]
   248e4:	2a00      	cmp	r2, #0
   248e6:	d1f7      	bne.n	248d8 <bt_gatt_change_aware+0x70>
   248e8:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   248ec:	4630      	mov	r0, r6
   248ee:	f7ff fd6a 	bl	243c6 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   248f2:	4639      	mov	r1, r7
   248f4:	e7df      	b.n	248b6 <bt_gatt_change_aware+0x4e>

000248f6 <bt_smp_recv>:
{
   248f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   248f8:	2100      	movs	r1, #0
   248fa:	f04f 32ff 	mov.w	r2, #4294967295
   248fe:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   24902:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   24904:	4608      	mov	r0, r1
   24906:	f7ff f955 	bl	23bb4 <bt_l2cap_create_pdu_timeout>
   2490a:	f100 0608 	add.w	r6, r0, #8
   2490e:	4604      	mov	r4, r0
   24910:	2101      	movs	r1, #1
   24912:	4630      	mov	r0, r6
   24914:	f7f3 fff0 	bl	188f8 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   24918:	2505      	movs	r5, #5
   2491a:	7005      	strb	r5, [r0, #0]
   2491c:	2101      	movs	r1, #1
   2491e:	4630      	mov	r0, r6
   24920:	f7f3 ffea 	bl	188f8 <net_buf_simple_add>
   24924:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   24926:	7005      	strb	r5, [r0, #0]
   24928:	4622      	mov	r2, r4
   2492a:	9300      	str	r3, [sp, #0]
   2492c:	2106      	movs	r1, #6
   2492e:	4638      	mov	r0, r7
   24930:	f7ff f943 	bl	23bba <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   24934:	b110      	cbz	r0, 2493c <bt_smp_recv+0x46>
		net_buf_unref(buf);
   24936:	4620      	mov	r0, r4
   24938:	f7f3 fed8 	bl	186ec <net_buf_unref>
}
   2493c:	2000      	movs	r0, #0
   2493e:	b003      	add	sp, #12
   24940:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024942 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   24942:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24946:	4770      	bx	lr

00024948 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   24948:	2000      	movs	r0, #0
   2494a:	4770      	bx	lr

0002494c <fixed_data_unref>:
}
   2494c:	4770      	bx	lr

0002494e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2494e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   24950:	6849      	ldr	r1, [r1, #4]
   24952:	6809      	ldr	r1, [r1, #0]
   24954:	f7f3 bcc0 	b.w	182d8 <net_buf_alloc_len>

00024958 <net_buf_simple_pull_le16>:
{
   24958:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2495a:	6803      	ldr	r3, [r0, #0]
   2495c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2495e:	2102      	movs	r1, #2
   24960:	f7f3 ff96 	bl	18890 <net_buf_simple_pull>
}
   24964:	4620      	mov	r0, r4
   24966:	bd10      	pop	{r4, pc}

00024968 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   24968:	6802      	ldr	r2, [r0, #0]
   2496a:	6880      	ldr	r0, [r0, #8]
}
   2496c:	1a10      	subs	r0, r2, r0
   2496e:	4770      	bx	lr

00024970 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   24970:	8883      	ldrh	r3, [r0, #4]
   24972:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   24974:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   24976:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   24978:	6803      	ldr	r3, [r0, #0]
   2497a:	1a5b      	subs	r3, r3, r1
}
   2497c:	1ad0      	subs	r0, r2, r3
   2497e:	4770      	bx	lr

00024980 <net_buf_simple_add_mem>:
{
   24980:	b538      	push	{r3, r4, r5, lr}
   24982:	460d      	mov	r5, r1
   24984:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   24986:	4611      	mov	r1, r2
   24988:	f7f3 ffb6 	bl	188f8 <net_buf_simple_add>
   2498c:	4622      	mov	r2, r4
   2498e:	4629      	mov	r1, r5
}
   24990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   24994:	f7fe bde8 	b.w	23568 <memcpy>

00024998 <net_buf_simple_add_u8>:
{
   24998:	b510      	push	{r4, lr}
   2499a:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2499c:	2101      	movs	r1, #1
   2499e:	f7f3 ffab 	bl	188f8 <net_buf_simple_add>
	*u8 = val;
   249a2:	7004      	strb	r4, [r0, #0]
}
   249a4:	bd10      	pop	{r4, pc}

000249a6 <set_on_state>:
	__asm__ volatile(
   249a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   249aa:	f3ef 8211 	mrs	r2, BASEPRI
   249ae:	f383 8812 	msr	BASEPRI_MAX, r3
   249b2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   249b6:	6803      	ldr	r3, [r0, #0]
   249b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   249bc:	f043 0302 	orr.w	r3, r3, #2
   249c0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   249c2:	f382 8811 	msr	BASEPRI, r2
   249c6:	f3bf 8f6f 	isb	sy
}
   249ca:	4770      	bx	lr

000249cc <async_start>:
{
   249cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   249ce:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   249d0:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   249d2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   249d4:	f04f 0540 	mov.w	r5, #64	; 0x40
   249d8:	f3ef 8611 	mrs	r6, BASEPRI
   249dc:	f385 8812 	msr	BASEPRI_MAX, r5
   249e0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   249e4:	250c      	movs	r5, #12
   249e6:	4369      	muls	r1, r5
   249e8:	440c      	add	r4, r1
   249ea:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   249ec:	f005 0c07 	and.w	ip, r5, #7
   249f0:	f1bc 0f01 	cmp.w	ip, #1
   249f4:	d10b      	bne.n	24a0e <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   249f6:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   249f8:	f386 8811 	msr	BASEPRI, r6
   249fc:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   24a00:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   24a04:	6843      	ldr	r3, [r0, #4]
   24a06:	585b      	ldr	r3, [r3, r1]
   24a08:	4798      	blx	r3
	return 0;
   24a0a:	2000      	movs	r0, #0
}
   24a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   24a0e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   24a12:	42af      	cmp	r7, r5
   24a14:	f386 8811 	msr	BASEPRI, r6
   24a18:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   24a1c:	bf0c      	ite	eq
   24a1e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   24a22:	f04f 30ff 	movne.w	r0, #4294967295
   24a26:	e7f1      	b.n	24a0c <async_start+0x40>

00024a28 <api_start>:
{
   24a28:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   24a2a:	2480      	movs	r4, #128	; 0x80
   24a2c:	9400      	str	r4, [sp, #0]
   24a2e:	f7ff ffcd 	bl	249cc <async_start>
}
   24a32:	b002      	add	sp, #8
   24a34:	bd10      	pop	{r4, pc}

00024a36 <onoff_started_callback>:
	return &data->mgr[type];
   24a36:	6900      	ldr	r0, [r0, #16]
   24a38:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   24a3a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   24a3e:	2100      	movs	r1, #0
   24a40:	4710      	bx	r2

00024a42 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   24a42:	2000      	movs	r0, #0
   24a44:	f7f6 ba2a 	b.w	1ae9c <nrfx_clock_start>

00024a48 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   24a48:	2000      	movs	r0, #0
   24a4a:	f7f6 ba47 	b.w	1aedc <nrfx_clock_stop>

00024a4e <blocking_start_callback>:
{
   24a4e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   24a50:	f7f8 baaa 	b.w	1cfa8 <z_impl_k_sem_give>

00024a54 <api_stop>:
	return stop(dev, subsys, CTX_API);
   24a54:	2280      	movs	r2, #128	; 0x80
   24a56:	f7f3 bfb1 	b.w	189bc <stop>

00024a5a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24a5a:	6843      	ldr	r3, [r0, #4]
   24a5c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   24a5e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   24a62:	600b      	str	r3, [r1, #0]
}
   24a64:	2000      	movs	r0, #0
   24a66:	4770      	bx	lr

00024a68 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24a68:	6843      	ldr	r3, [r0, #4]
   24a6a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   24a6c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   24a70:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   24a74:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   24a78:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   24a7c:	2000      	movs	r0, #0
   24a7e:	4770      	bx	lr

00024a80 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24a80:	6843      	ldr	r3, [r0, #4]
   24a82:	685b      	ldr	r3, [r3, #4]
}
   24a84:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   24a86:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   24a8a:	4770      	bx	lr

00024a8c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24a8c:	6843      	ldr	r3, [r0, #4]
   24a8e:	685b      	ldr	r3, [r3, #4]
}
   24a90:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   24a92:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   24a96:	4770      	bx	lr

00024a98 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24a98:	6843      	ldr	r3, [r0, #4]
   24a9a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   24a9c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   24aa0:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   24aa4:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   24aa6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   24aaa:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   24aae:	2000      	movs	r0, #0
   24ab0:	4770      	bx	lr

00024ab2 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   24ab2:	6902      	ldr	r2, [r0, #16]
{
   24ab4:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   24ab6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   24aba:	e883 0003 	stmia.w	r3, {r0, r1}
}
   24abe:	2000      	movs	r0, #0
   24ac0:	4770      	bx	lr

00024ac2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   24ac2:	6843      	ldr	r3, [r0, #4]
   24ac4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   24ac6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   24aca:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   24ace:	4770      	bx	lr

00024ad0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   24ad0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   24ad2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   24ad4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24ad6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   24ada:	b150      	cbz	r0, 24af2 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   24adc:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24ade:	2000      	movs	r0, #0
   24ae0:	7812      	ldrb	r2, [r2, #0]
   24ae2:	700a      	strb	r2, [r1, #0]
   24ae4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   24ae8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24aec:	2201      	movs	r2, #1
   24aee:	601a      	str	r2, [r3, #0]
	return 0;
   24af0:	4770      	bx	lr
		return -1;
   24af2:	f04f 30ff 	mov.w	r0, #4294967295
}
   24af6:	4770      	bx	lr

00024af8 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   24af8:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   24afa:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24afc:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   24b00:	b940      	cbnz	r0, 24b14 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   24b02:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   24b04:	079b      	lsls	r3, r3, #30
   24b06:	d406      	bmi.n	24b16 <is_tx_ready.isra.0+0x1e>
   24b08:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   24b0c:	3800      	subs	r0, #0
   24b0e:	bf18      	it	ne
   24b10:	2001      	movne	r0, #1
   24b12:	4770      	bx	lr
   24b14:	2001      	movs	r0, #1
}
   24b16:	4770      	bx	lr

00024b18 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   24b18:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   24b1a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   24b1c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   24b20:	05c9      	lsls	r1, r1, #23
   24b22:	d518      	bpl.n	24b56 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24b24:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   24b28:	b1a9      	cbz	r1, 24b56 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   24b2a:	f04f 0040 	mov.w	r0, #64	; 0x40
   24b2e:	f3ef 8111 	mrs	r1, BASEPRI
   24b32:	f380 8812 	msr	BASEPRI_MAX, r0
   24b36:	f3bf 8f6f 	isb	sy
   24b3a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   24b3e:	b130      	cbz	r0, 24b4e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24b40:	2000      	movs	r0, #0
   24b42:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   24b46:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24b4a:	2001      	movs	r0, #1
   24b4c:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   24b4e:	f381 8811 	msr	BASEPRI, r1
   24b52:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   24b56:	6852      	ldr	r2, [r2, #4]
   24b58:	06d2      	lsls	r2, r2, #27
   24b5a:	d515      	bpl.n	24b88 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   24b5c:	f04f 0140 	mov.w	r1, #64	; 0x40
   24b60:	f3ef 8211 	mrs	r2, BASEPRI
   24b64:	f381 8812 	msr	BASEPRI_MAX, r1
   24b68:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24b6c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   24b70:	b111      	cbz	r1, 24b78 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   24b72:	2100      	movs	r1, #0
   24b74:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   24b78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   24b7c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   24b80:	f382 8811 	msr	BASEPRI, r2
   24b84:	f3bf 8f6f 	isb	sy
}
   24b88:	4770      	bx	lr

00024b8a <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   24b8a:	b510      	push	{r4, lr}
   24b8c:	2200      	movs	r2, #0
   24b8e:	4604      	mov	r4, r0
   24b90:	2101      	movs	r1, #1
   24b92:	2028      	movs	r0, #40	; 0x28
   24b94:	f7ed fdb8 	bl	12708 <z_arm_irq_priority_set>
   24b98:	2028      	movs	r0, #40	; 0x28
   24b9a:	f7ed fd85 	bl	126a8 <arch_irq_enable>
   24b9e:	4620      	mov	r0, r4
   24ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24ba4:	f7f4 bb72 	b.w	1928c <uarte_instance_init.constprop.0>

00024ba8 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   24ba8:	b510      	push	{r4, lr}
   24baa:	2200      	movs	r2, #0
   24bac:	4604      	mov	r4, r0
   24bae:	2101      	movs	r1, #1
   24bb0:	2002      	movs	r0, #2
   24bb2:	f7ed fda9 	bl	12708 <z_arm_irq_priority_set>
   24bb6:	2002      	movs	r0, #2
   24bb8:	f7ed fd76 	bl	126a8 <arch_irq_enable>
   24bbc:	4620      	mov	r0, r4
   24bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24bc2:	f7f4 bb63 	b.w	1928c <uarte_instance_init.constprop.0>

00024bc6 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   24bc6:	2000      	movs	r0, #0
   24bc8:	4770      	bx	lr

00024bca <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   24bca:	b538      	push	{r3, r4, r5, lr}
   24bcc:	460c      	mov	r4, r1
   24bce:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   24bd0:	f7ef fdec 	bl	147ac <bt_is_ready>
   24bd4:	b128      	cbz	r0, 24be2 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   24bd6:	4629      	mov	r1, r5
   24bd8:	4620      	mov	r0, r4
}
   24bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   24bde:	f7ee bff7 	b.w	13bd0 <bt_hci_le_rand>
}
   24be2:	f06f 000a 	mvn.w	r0, #10
   24be6:	bd38      	pop	{r3, r4, r5, pc}

00024be8 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   24be8:	2200      	movs	r2, #0
{
   24bea:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   24bec:	4611      	mov	r1, r2
   24bee:	4610      	mov	r0, r2
   24bf0:	f7fb fb50 	bl	20294 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   24bf4:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   24bf6:	bf18      	it	ne
   24bf8:	f06f 0015 	mvnne.w	r0, #21
   24bfc:	bd08      	pop	{r3, pc}

00024bfe <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   24bfe:	4770      	bx	lr

00024c00 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   24c00:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
   24c02:	6843      	ldr	r3, [r0, #4]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   24c04:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
   24c08:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   24c0a:	7a05      	ldrb	r5, [r0, #8]
   24c0c:	6844      	ldr	r4, [r0, #4]
   24c0e:	4435      	add	r5, r6
   24c10:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   24c14:	42a3      	cmp	r3, r4
   24c16:	d902      	bls.n	24c1e <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
   24c18:	f06f 0001 	mvn.w	r0, #1
}
   24c1c:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
   24c1e:	795c      	ldrb	r4, [r3, #5]
   24c20:	428c      	cmp	r4, r1
   24c22:	d001      	beq.n	24c28 <pinctrl_lookup_state+0x28>
		(*state)++;
   24c24:	3308      	adds	r3, #8
   24c26:	e7ef      	b.n	24c08 <pinctrl_lookup_state+0x8>
			return 0;
   24c28:	2000      	movs	r0, #0
   24c2a:	e7f7      	b.n	24c1c <pinctrl_lookup_state+0x1c>

00024c2c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   24c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c30:	4615      	mov	r5, r2
   24c32:	b085      	sub	sp, #20
   24c34:	4682      	mov	sl, r0
   24c36:	eb00 0881 	add.w	r8, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   24c3a:	f04f 0901 	mov.w	r9, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   24c3e:	45d0      	cmp	r8, sl
   24c40:	d103      	bne.n	24c4a <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   24c42:	2000      	movs	r0, #0
}
   24c44:	b005      	add	sp, #20
   24c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   24c4a:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   24c4e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   24c52:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   24c56:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   24c58:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   24c5c:	bf08      	it	eq
   24c5e:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   24c62:	2b22      	cmp	r3, #34	; 0x22
   24c64:	f200 808e 	bhi.w	24d84 <pinctrl_configure_pins+0x158>
   24c68:	e8df f003 	tbb	[pc, r3]
   24c6c:	3a241f12 	.word	0x3a241f12
   24c70:	8c3a3627 	.word	0x8c3a3627
   24c74:	3d8c8c8c 	.word	0x3d8c8c8c
   24c78:	8c8c8c62 	.word	0x8c8c8c62
   24c7c:	8c8c8c8c 	.word	0x8c8c8c8c
   24c80:	6e658c8c 	.word	0x6e658c8c
   24c84:	8c8c7471 	.word	0x8c8c7471
   24c88:	807d778c 	.word	0x807d778c
   24c8c:	8683      	.short	0x8683
   24c8e:	89          	.byte	0x89
   24c8f:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   24c90:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24c94:	a803      	add	r0, sp, #12
   24c96:	9403      	str	r4, [sp, #12]
   24c98:	f7f4 ff7e 	bl	19b98 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   24c9c:	9b03      	ldr	r3, [sp, #12]
   24c9e:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   24ca2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   24ca6:	2601      	movs	r6, #1
   24ca8:	e002      	b.n	24cb0 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   24caa:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   24cae:	2600      	movs	r6, #0
   24cb0:	46b3      	mov	fp, r6
   24cb2:	e01f      	b.n	24cf4 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
   24cb4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   24cb8:	e7ec      	b.n	24c94 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   24cba:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   24cbe:	2600      	movs	r6, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24cc0:	a803      	add	r0, sp, #12
   24cc2:	9403      	str	r4, [sp, #12]
   24cc4:	f7f4 ff68 	bl	19b98 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   24cc8:	9b03      	ldr	r3, [sp, #12]
   24cca:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   24cce:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   24cd2:	f04f 0b01 	mov.w	fp, #1
   24cd6:	e00d      	b.n	24cf4 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   24cd8:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   24cdc:	2601      	movs	r6, #1
   24cde:	e7ef      	b.n	24cc0 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   24ce0:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   24ce4:	e7e3      	b.n	24cae <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   24ce6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   24cea:	2f00      	cmp	r7, #0
   24cec:	d1df      	bne.n	24cae <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   24cee:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   24cf0:	46b3      	mov	fp, r6
				drive = NRF_DRIVE_S0D1;
   24cf2:	2706      	movs	r7, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   24cf4:	f85a 3b04 	ldr.w	r3, [sl], #4
   24cf8:	9301      	str	r3, [sp, #4]
   24cfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   24cfe:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24d00:	a803      	add	r0, sp, #12
   24d02:	bf1c      	itt	ne
   24d04:	2601      	movne	r6, #1
   24d06:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   24d0a:	9403      	str	r4, [sp, #12]
   24d0c:	f7f4 ff44 	bl	19b98 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   24d10:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   24d12:	023f      	lsls	r7, r7, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   24d14:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   24d18:	ea47 0783 	orr.w	r7, r7, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   24d1c:	9b03      	ldr	r3, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   24d1e:	ea47 070b 	orr.w	r7, r7, fp
    reg->PIN_CNF[pin_number] = cnf;
   24d22:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   24d26:	ea47 0746 	orr.w	r7, r7, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   24d2a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   24d2e:	e786      	b.n	24c3e <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   24d30:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   24d34:	e7d9      	b.n	24cea <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   24d36:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   24d3a:	f8da 3000 	ldr.w	r3, [sl]
   24d3e:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   24d42:	2b00      	cmp	r3, #0
   24d44:	d0ca      	beq.n	24cdc <pinctrl_configure_pins+0xb0>
   24d46:	e7a5      	b.n	24c94 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   24d48:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   24d4c:	e7f5      	b.n	24d3a <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   24d4e:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   24d52:	e7f2      	b.n	24d3a <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   24d54:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   24d58:	e7ef      	b.n	24d3a <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   24d5a:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   24d5e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   24d60:	f04f 0b00 	mov.w	fp, #0
   24d64:	e7c6      	b.n	24cf4 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   24d66:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   24d6a:	e793      	b.n	24c94 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   24d6c:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   24d70:	e7f5      	b.n	24d5e <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   24d72:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   24d76:	e7f2      	b.n	24d5e <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   24d78:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   24d7c:	e7ef      	b.n	24d5e <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   24d7e:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   24d82:	e7ec      	b.n	24d5e <pinctrl_configure_pins+0x132>
		switch (NRF_GET_FUN(pins[i])) {
   24d84:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24d88:	e75c      	b.n	24c44 <pinctrl_configure_pins+0x18>

00024d8a <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   24d8a:	2101      	movs	r1, #1
   24d8c:	f7f5 b818 	b.w	19dc0 <dk_set_led>

00024d90 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   24d90:	2100      	movs	r1, #0
   24d92:	f7f5 b815 	b.w	19dc0 <dk_set_led>

00024d96 <hci_driver_close>:
{
   24d96:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   24d98:	f7f5 ff0e 	bl	1abb8 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   24d9c:	f04f 30ff 	mov.w	r0, #4294967295
   24da0:	f04f 31ff 	mov.w	r1, #4294967295
   24da4:	f7f5 f82e 	bl	19e04 <multithreading_lock_acquire>
	if (err) {
   24da8:	4604      	mov	r4, r0
   24daa:	b920      	cbnz	r0, 24db6 <hci_driver_close+0x20>
	err = sdc_disable();
   24dac:	f7df fdfa 	bl	49a4 <sdc_disable>
	if (err) {
   24db0:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   24db2:	f7f5 f82f 	bl	19e14 <multithreading_lock_release>
}
   24db6:	4620      	mov	r0, r4
   24db8:	bd10      	pop	{r4, pc}

00024dba <hci_driver_send>:
{
   24dba:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   24dbc:	8983      	ldrh	r3, [r0, #12]
{
   24dbe:	4605      	mov	r5, r0
	if (!buf->len) {
   24dc0:	b373      	cbz	r3, 24e20 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   24dc2:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   24dc4:	b1a3      	cbz	r3, 24df0 <hci_driver_send+0x36>
   24dc6:	2b02      	cmp	r3, #2
   24dc8:	d12a      	bne.n	24e20 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   24dca:	f04f 30ff 	mov.w	r0, #4294967295
   24dce:	f04f 31ff 	mov.w	r1, #4294967295
   24dd2:	f7f5 f817 	bl	19e04 <multithreading_lock_acquire>
	if (!errcode) {
   24dd6:	4604      	mov	r4, r0
   24dd8:	b940      	cbnz	r0, 24dec <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   24dda:	68a8      	ldr	r0, [r5, #8]
   24ddc:	f7e7 ff83 	bl	cce6 <sdc_hci_data_put>
   24de0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   24de2:	f7f5 f817 	bl	19e14 <multithreading_lock_release>
		if (errcode) {
   24de6:	b1b4      	cbz	r4, 24e16 <hci_driver_send+0x5c>
			receive_signal_raise();
   24de8:	f7f5 f94c 	bl	1a084 <receive_signal_raise>
}
   24dec:	4620      	mov	r0, r4
   24dee:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   24df0:	f04f 30ff 	mov.w	r0, #4294967295
   24df4:	f04f 31ff 	mov.w	r1, #4294967295
   24df8:	f7f5 f804 	bl	19e04 <multithreading_lock_acquire>
	if (!errcode) {
   24dfc:	4604      	mov	r4, r0
   24dfe:	2800      	cmp	r0, #0
   24e00:	d1f4      	bne.n	24dec <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   24e02:	68a8      	ldr	r0, [r5, #8]
   24e04:	f7f5 f9d8 	bl	1a1b8 <hci_internal_cmd_put>
   24e08:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   24e0a:	f7f5 f803 	bl	19e14 <multithreading_lock_release>
	if (errcode) {
   24e0e:	2c00      	cmp	r4, #0
   24e10:	d1ec      	bne.n	24dec <hci_driver_send+0x32>
	receive_signal_raise();
   24e12:	f7f5 f937 	bl	1a084 <receive_signal_raise>
		net_buf_unref(buf);
   24e16:	4628      	mov	r0, r5
   24e18:	f7f3 fc68 	bl	186ec <net_buf_unref>
   24e1c:	2400      	movs	r4, #0
   24e1e:	e7e5      	b.n	24dec <hci_driver_send+0x32>
	switch (type) {
   24e20:	f06f 0415 	mvn.w	r4, #21
   24e24:	e7e2      	b.n	24dec <hci_driver_send+0x32>

00024e26 <receive_work_handler>:
	hci_driver_receive_process();
   24e26:	f7f5 b955 	b.w	1a0d4 <hci_driver_receive_process>

00024e2a <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   24e2a:	2100      	movs	r1, #0
   24e2c:	f7f5 bee6 	b.w	1abfc <cmd_le_generate_dhkey>

00024e30 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   24e30:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   24e34:	2901      	cmp	r1, #1
   24e36:	d801      	bhi.n	24e3c <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   24e38:	f7f5 bee0 	b.w	1abfc <cmd_le_generate_dhkey>
}
   24e3c:	2012      	movs	r0, #18
   24e3e:	4770      	bx	lr

00024e40 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   24e40:	4668      	mov	r0, sp
   24e42:	f020 0107 	bic.w	r1, r0, #7
   24e46:	468d      	mov	sp, r1
   24e48:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   24e4a:	f7de fb81 	bl	3550 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   24e4e:	f7ed fc85 	bl	1275c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   24e52:	f7ed fd6d 	bl	12930 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   24e56:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24e5a:	4685      	mov	sp, r0
   24e5c:	4770      	bx	lr

00024e5e <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   24e5e:	4668      	mov	r0, sp
   24e60:	f020 0107 	bic.w	r1, r0, #7
   24e64:	468d      	mov	sp, r1
   24e66:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   24e68:	f7de fae8 	bl	343c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   24e6c:	f7ed fc76 	bl	1275c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   24e70:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24e74:	4685      	mov	sp, r0
   24e76:	4770      	bx	lr

00024e78 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   24e78:	4668      	mov	r0, sp
   24e7a:	f020 0107 	bic.w	r1, r0, #7
   24e7e:	468d      	mov	sp, r1
   24e80:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   24e82:	f7dc f861 	bl	f48 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   24e86:	f7ed fc69 	bl	1275c <_arch_isr_direct_pm>
   24e8a:	f7ed fd51 	bl	12930 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   24e8e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24e92:	4685      	mov	sp, r0
   24e94:	4770      	bx	lr

00024e96 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   24e96:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   24e98:	f7e7 fc62 	bl	c760 <mpsl_fem_init>

	return 0;
}
   24e9c:	2000      	movs	r0, #0
   24e9e:	bd08      	pop	{r3, pc}

00024ea0 <nfc_ndef_msg_encode>:
}

int nfc_ndef_msg_encode(struct nfc_ndef_msg_desc const *ndef_msg_desc,
			uint8_t *msg_buffer,
			uint32_t *msg_len)
{
   24ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24ea4:	4688      	mov	r8, r1
   24ea6:	4615      	mov	r5, r2
	uint32_t sum_of_len = 0;

	if (!ndef_msg_desc || !msg_len) {
   24ea8:	4607      	mov	r7, r0
   24eaa:	b378      	cbz	r0, 24f0c <nfc_ndef_msg_encode+0x6c>
   24eac:	b372      	cbz	r2, 24f0c <nfc_ndef_msg_encode+0x6c>
		return -EINVAL;
	}

	struct nfc_ndef_record_desc const **pp_record_rec_desc =
   24eae:	f8d0 9000 	ldr.w	r9, [r0]
						ndef_msg_desc->record;

	if (!ndef_msg_desc->record) {
   24eb2:	f1b9 0f00 	cmp.w	r9, #0
   24eb6:	d029      	beq.n	24f0c <nfc_ndef_msg_encode+0x6c>
		return -EINVAL;
	}

	for (uint32_t i = 0; i < ndef_msg_desc->record_count; i++) {
   24eb8:	2400      	movs	r4, #0
	uint32_t sum_of_len = 0;
   24eba:	4626      	mov	r6, r4
	for (uint32_t i = 0; i < ndef_msg_desc->record_count; i++) {
   24ebc:	68bb      	ldr	r3, [r7, #8]
   24ebe:	42a3      	cmp	r3, r4
   24ec0:	d804      	bhi.n	24ecc <nfc_ndef_msg_encode+0x2c>

		/* next record */
		pp_record_rec_desc++;
	}

	*msg_len = sum_of_len;
   24ec2:	602e      	str	r6, [r5, #0]

	return 0;
   24ec4:	2000      	movs	r0, #0
}
   24ec6:	b003      	add	sp, #12
   24ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!index) {
   24ecc:	b9b4      	cbnz	r4, 24efc <nfc_ndef_msg_encode+0x5c>
			record_location = NDEF_LONE_RECORD;
   24ece:	2b01      	cmp	r3, #1
   24ed0:	bf14      	ite	ne
   24ed2:	2180      	movne	r1, #128	; 0x80
   24ed4:	21c0      	moveq	r1, #192	; 0xc0
		temp_len = *msg_len - sum_of_len;
   24ed6:	682b      	ldr	r3, [r5, #0]
   24ed8:	1b9b      	subs	r3, r3, r6
   24eda:	9301      	str	r3, [sp, #4]
		err = nfc_ndef_record_encode(*pp_record_rec_desc,
   24edc:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   24ee0:	f1b8 0f00 	cmp.w	r8, #0
   24ee4:	d010      	beq.n	24f08 <nfc_ndef_msg_encode+0x68>
   24ee6:	eb08 0206 	add.w	r2, r8, r6
   24eea:	ab01      	add	r3, sp, #4
   24eec:	f000 f820 	bl	24f30 <nfc_ndef_record_encode>
		if (err) {
   24ef0:	2800      	cmp	r0, #0
   24ef2:	d1e8      	bne.n	24ec6 <nfc_ndef_msg_encode+0x26>
		sum_of_len += temp_len;
   24ef4:	9b01      	ldr	r3, [sp, #4]
	for (uint32_t i = 0; i < ndef_msg_desc->record_count; i++) {
   24ef6:	3401      	adds	r4, #1
		sum_of_len += temp_len;
   24ef8:	441e      	add	r6, r3
	for (uint32_t i = 0; i < ndef_msg_desc->record_count; i++) {
   24efa:	e7df      	b.n	24ebc <nfc_ndef_msg_encode+0x1c>
	} else if (index == UINT32_MAX || record_count == index + 1) {
   24efc:	1c61      	adds	r1, r4, #1
   24efe:	1acb      	subs	r3, r1, r3
   24f00:	4259      	negs	r1, r3
   24f02:	4159      	adcs	r1, r3
   24f04:	0189      	lsls	r1, r1, #6
   24f06:	e7e6      	b.n	24ed6 <nfc_ndef_msg_encode+0x36>
		err = nfc_ndef_record_encode(*pp_record_rec_desc,
   24f08:	4642      	mov	r2, r8
   24f0a:	e7ee      	b.n	24eea <nfc_ndef_msg_encode+0x4a>
		return -EINVAL;
   24f0c:	f06f 0015 	mvn.w	r0, #21
   24f10:	e7d9      	b.n	24ec6 <nfc_ndef_msg_encode+0x26>

00024f12 <nfc_ndef_msg_record_add>:
}

int nfc_ndef_msg_record_add(struct nfc_ndef_msg_desc *msg,
			    struct nfc_ndef_record_desc const *record)
{
	if (msg->record_count >= msg->max_record_count) {
   24f12:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   24f16:	4293      	cmp	r3, r2
		return -ENOSR;
	}

	msg->record[msg->record_count] = record;
   24f18:	bf3f      	itttt	cc
   24f1a:	6802      	ldrcc	r2, [r0, #0]
   24f1c:	f842 1023 	strcc.w	r1, [r2, r3, lsl #2]
	msg->record_count++;
   24f20:	6883      	ldrcc	r3, [r0, #8]
   24f22:	3301      	addcc	r3, #1
   24f24:	bf3a      	itte	cc
   24f26:	6083      	strcc	r3, [r0, #8]

	return 0;
   24f28:	2000      	movcc	r0, #0
		return -ENOSR;
   24f2a:	f06f 003e 	mvncs.w	r0, #62	; 0x3e
}
   24f2e:	4770      	bx	lr

00024f30 <nfc_ndef_record_encode>:

int nfc_ndef_record_encode(struct nfc_ndef_record_desc const *ndef_record_desc,
			   enum nfc_ndef_record_location const record_location,
			   uint8_t *record_buffer,
			   uint32_t *record_len)
{
   24f30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24f34:	4614      	mov	r4, r2
   24f36:	461f      	mov	r7, r3
	uint8_t *payload_len = NULL; /* use as pointer to payload length field */
	uint32_t record_payload_len;

	if (!ndef_record_desc) {
   24f38:	4605      	mov	r5, r0
   24f3a:	b920      	cbnz	r0, 24f46 <nfc_ndef_record_encode+0x16>
		return -EINVAL;
   24f3c:	f06f 0015 	mvn.w	r0, #21
	}

	*record_len = record_header_len + record_payload_len;

	return 0;
}
   24f40:	b002      	add	sp, #8
   24f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t record_header_len = record_header_size_calc(ndef_record_desc);
   24f46:	7843      	ldrb	r3, [r0, #1]
			ndef_record_desc->type_length;
   24f48:	7a02      	ldrb	r2, [r0, #8]
	len = NDEF_RECORD_BASE_LONG_SIZE + ndef_record_desc->id_length +
   24f4a:	1d9e      	adds	r6, r3, #6
   24f4c:	4416      	add	r6, r2
	if (ndef_record_desc->id_length > 0) {
   24f4e:	b103      	cbz	r3, 24f52 <nfc_ndef_record_encode+0x22>
		len++;
   24f50:	3601      	adds	r6, #1
	if (record_buffer) {
   24f52:	b944      	cbnz	r4, 24f66 <nfc_ndef_record_encode+0x36>
	if (ndef_record_desc->tnf == TNF_EMPTY) {
   24f54:	782b      	ldrb	r3, [r5, #0]
   24f56:	2b00      	cmp	r3, #0
   24f58:	d135      	bne.n	24fc6 <nfc_ndef_record_encode+0x96>
		record_payload_len = 0;
   24f5a:	9401      	str	r4, [sp, #4]
	*record_len = record_header_len + record_payload_len;
   24f5c:	9b01      	ldr	r3, [sp, #4]
   24f5e:	4433      	add	r3, r6
   24f60:	603b      	str	r3, [r7, #0]
	return 0;
   24f62:	2000      	movs	r0, #0
   24f64:	e7ec      	b.n	24f40 <nfc_ndef_record_encode+0x10>
		if (record_location & (~NDEF_RECORD_LOCATION_MASK)) {
   24f66:	068b      	lsls	r3, r1, #26
   24f68:	d1e8      	bne.n	24f3c <nfc_ndef_record_encode+0xc>
		if (record_header_len > *record_len) {
   24f6a:	683b      	ldr	r3, [r7, #0]
   24f6c:	42b3      	cmp	r3, r6
   24f6e:	d337      	bcc.n	24fe0 <nfc_ndef_record_encode+0xb0>
		*flags = record_location;
   24f70:	7021      	strb	r1, [r4, #0]
		*flags |= ndef_record_desc->tnf;
   24f72:	782b      	ldrb	r3, [r5, #0]
   24f74:	4319      	orrs	r1, r3
   24f76:	7021      	strb	r1, [r4, #0]
		*record_buffer = ndef_record_desc->type_length;
   24f78:	7a2b      	ldrb	r3, [r5, #8]
   24f7a:	7063      	strb	r3, [r4, #1]
		if (ndef_record_desc->id_length > 0) {
   24f7c:	786b      	ldrb	r3, [r5, #1]
		record_buffer++;
   24f7e:	f104 0802 	add.w	r8, r4, #2
		if (ndef_record_desc->id_length > 0) {
   24f82:	b9d3      	cbnz	r3, 24fba <nfc_ndef_record_encode+0x8a>
		record_buffer += NDEF_RECORD_PAYLOAD_LEN_LONG_SIZE;
   24f84:	3406      	adds	r4, #6
		memcpy(record_buffer,
   24f86:	7a2a      	ldrb	r2, [r5, #8]
   24f88:	68e9      	ldr	r1, [r5, #12]
   24f8a:	4620      	mov	r0, r4
   24f8c:	f7fe faec 	bl	23568 <memcpy>
		record_buffer += ndef_record_desc->type_length;
   24f90:	7a2b      	ldrb	r3, [r5, #8]
		if (ndef_record_desc->id_length > 0) {
   24f92:	786a      	ldrb	r2, [r5, #1]
		record_buffer += ndef_record_desc->type_length;
   24f94:	441c      	add	r4, r3
		if (ndef_record_desc->id_length > 0) {
   24f96:	b12a      	cbz	r2, 24fa4 <nfc_ndef_record_encode+0x74>
			memcpy(record_buffer,
   24f98:	4620      	mov	r0, r4
   24f9a:	6869      	ldr	r1, [r5, #4]
   24f9c:	f7fe fae4 	bl	23568 <memcpy>
			record_buffer += ndef_record_desc->id_length;
   24fa0:	786b      	ldrb	r3, [r5, #1]
   24fa2:	441c      	add	r4, r3
		record_payload_len = (*record_len - record_header_len);
   24fa4:	683b      	ldr	r3, [r7, #0]
   24fa6:	1b9b      	subs	r3, r3, r6
   24fa8:	9301      	str	r3, [sp, #4]
	if (ndef_record_desc->tnf == TNF_EMPTY) {
   24faa:	782b      	ldrb	r3, [r5, #0]
   24fac:	b963      	cbnz	r3, 24fc8 <nfc_ndef_record_encode+0x98>
		record_payload_len = 0;
   24fae:	9301      	str	r3, [sp, #4]
		*(uint32_t *)payload_len = sys_cpu_to_be32(record_payload_len);
   24fb0:	9b01      	ldr	r3, [sp, #4]
   24fb2:	ba1b      	rev	r3, r3
   24fb4:	f8c8 3000 	str.w	r3, [r8]
   24fb8:	e7d0      	b.n	24f5c <nfc_ndef_record_encode+0x2c>
			*flags |= NDEF_RECORD_IL_MASK;
   24fba:	f041 0108 	orr.w	r1, r1, #8
			*record_buffer = ndef_record_desc->id_length;
   24fbe:	71a3      	strb	r3, [r4, #6]
			*flags |= NDEF_RECORD_IL_MASK;
   24fc0:	f804 1b07 	strb.w	r1, [r4], #7
   24fc4:	e7df      	b.n	24f86 <nfc_ndef_record_encode+0x56>
	uint8_t *payload_len = NULL; /* use as pointer to payload length field */
   24fc6:	46a0      	mov	r8, r4
	} else if (ndef_record_desc->payload_constructor) {
   24fc8:	692b      	ldr	r3, [r5, #16]
   24fca:	2b00      	cmp	r3, #0
   24fcc:	d0b6      	beq.n	24f3c <nfc_ndef_record_encode+0xc>
		err = ndef_record_desc->payload_constructor(
   24fce:	6968      	ldr	r0, [r5, #20]
   24fd0:	aa01      	add	r2, sp, #4
   24fd2:	4621      	mov	r1, r4
   24fd4:	4798      	blx	r3
		if (err) {
   24fd6:	2800      	cmp	r0, #0
   24fd8:	d1b2      	bne.n	24f40 <nfc_ndef_record_encode+0x10>
	if (record_buffer) {
   24fda:	2c00      	cmp	r4, #0
   24fdc:	d1e8      	bne.n	24fb0 <nfc_ndef_record_encode+0x80>
   24fde:	e7bd      	b.n	24f5c <nfc_ndef_record_encode+0x2c>
			return -ENOSR;
   24fe0:	f06f 003e 	mvn.w	r0, #62	; 0x3e
   24fe4:	e7ac      	b.n	24f40 <nfc_ndef_record_encode+0x10>

00024fe6 <nfc_ndef_text_rec_payload_encode>:

int nfc_ndef_text_rec_payload_encode(
		struct nfc_ndef_text_rec_payload *nfc_rec_text_payload_desc,
		uint8_t *buff,
		uint32_t *len)
{
   24fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24fe8:	4617      	mov	r7, r2
	if ((!nfc_rec_text_payload_desc->lang_code_len)			||
   24fea:	f990 2008 	ldrsb.w	r2, [r0, #8]
   24fee:	7a03      	ldrb	r3, [r0, #8]
   24ff0:	2a00      	cmp	r2, #0
{
   24ff2:	4604      	mov	r4, r0
   24ff4:	460d      	mov	r5, r1
	if ((!nfc_rec_text_payload_desc->lang_code_len)			||
   24ff6:	dd21      	ble.n	2503c <nfc_ndef_text_rec_payload_encode+0x56>
   24ff8:	065a      	lsls	r2, r3, #25
   24ffa:	d41f      	bmi.n	2503c <nfc_ndef_text_rec_payload_encode+0x56>
	    (nfc_rec_text_payload_desc->lang_code_len &
					(1 << TEXT_REC_RESERVED_POS))	||
	    (nfc_rec_text_payload_desc->lang_code_len &
					(1 << TEXT_REC_STATUS_UTF_POS))	||
   24ffc:	6842      	ldr	r2, [r0, #4]
   24ffe:	b1ea      	cbz	r2, 2503c <nfc_ndef_text_rec_payload_encode+0x56>
	    (!nfc_rec_text_payload_desc->lang_code)			||
	    (!nfc_rec_text_payload_desc->data_len)			||
   25000:	6906      	ldr	r6, [r0, #16]
	    (!nfc_rec_text_payload_desc->lang_code)			||
   25002:	b1de      	cbz	r6, 2503c <nfc_ndef_text_rec_payload_encode+0x56>
	    (!nfc_rec_text_payload_desc->data_len)			||
   25004:	68c2      	ldr	r2, [r0, #12]
   25006:	b1ca      	cbz	r2, 2503c <nfc_ndef_text_rec_payload_encode+0x56>
	    (!nfc_rec_text_payload_desc->data)				||
   25008:	b1c7      	cbz	r7, 2503c <nfc_ndef_text_rec_payload_encode+0x56>
		nfc_rec_text_payload_desc->lang_code_len +
   2500a:	3601      	adds	r6, #1
   2500c:	441e      	add	r6, r3
	}

	uint32_t payload_size =
		    nfc_text_rec_payload_size_get(nfc_rec_text_payload_desc);

	if (buff) {
   2500e:	b191      	cbz	r1, 25036 <nfc_ndef_text_rec_payload_encode+0x50>
		if (payload_size > *len) {
   25010:	683a      	ldr	r2, [r7, #0]
   25012:	42b2      	cmp	r2, r6
   25014:	d315      	bcc.n	25042 <nfc_ndef_text_rec_payload_encode+0x5c>
			return -ENOSR;
		}
		*buff = (nfc_rec_text_payload_desc->lang_code_len +
			   (nfc_rec_text_payload_desc->utf <<
   25016:	7802      	ldrb	r2, [r0, #0]
		*buff = (nfc_rec_text_payload_desc->lang_code_len +
   25018:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   2501c:	f805 3b01 	strb.w	r3, [r5], #1
					   TEXT_REC_STATUS_UTF_POS));
		buff += TEXT_REC_STATUS_SIZE;

		memcpy(buff,
   25020:	7a02      	ldrb	r2, [r0, #8]
   25022:	6841      	ldr	r1, [r0, #4]
   25024:	4628      	mov	r0, r5
   25026:	f7fe fa9f 	bl	23568 <memcpy>
		       nfc_rec_text_payload_desc->lang_code,
		       nfc_rec_text_payload_desc->lang_code_len);
		buff += nfc_rec_text_payload_desc->lang_code_len;
   2502a:	7a20      	ldrb	r0, [r4, #8]

		memcpy(buff,
   2502c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   25030:	4428      	add	r0, r5
   25032:	f7fe fa99 	bl	23568 <memcpy>
		       nfc_rec_text_payload_desc->data,
		       nfc_rec_text_payload_desc->data_len);
	}
	*len = payload_size;
   25036:	603e      	str	r6, [r7, #0]

	return 0;
   25038:	2000      	movs	r0, #0
}
   2503a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2503c:	f06f 0015 	mvn.w	r0, #21
   25040:	e7fb      	b.n	2503a <nfc_ndef_text_rec_payload_encode+0x54>
			return -ENOSR;
   25042:	f06f 003e 	mvn.w	r0, #62	; 0x3e
   25046:	e7f8      	b.n	2503a <nfc_ndef_text_rec_payload_encode+0x54>

00025048 <clock_handler>:
	nrfx_nfct_state_force(NRFX_NFCT_STATE_ACTIVATED);
   25048:	2000      	movs	r0, #0
   2504a:	f7f6 be07 	b.w	1bc5c <nrfx_nfct_state_force>

0002504e <nfc_isr_wrapper>:
ISR_DIRECT_DECLARE(nfc_isr_wrapper)
   2504e:	4668      	mov	r0, sp
   25050:	f020 0107 	bic.w	r1, r0, #7
   25054:	468d      	mov	sp, r1
   25056:	b501      	push	{r0, lr}
	nrfx_nfct_irq_handler();
   25058:	f7f6 fea8 	bl	1bdac <nrfx_nfct_irq_handler>
	ISR_DIRECT_PM();
   2505c:	f7ed fb7e 	bl	1275c <_arch_isr_direct_pm>
   25060:	f7ed fc66 	bl	12930 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(nfc_isr_wrapper)
   25064:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   25068:	4685      	mov	sp, r0
   2506a:	4770      	bx	lr

0002506c <nrfx_clock_enable>:
}
   2506c:	4770      	bx	lr

0002506e <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2506e:	f7de bedf 	b.w	3e30 <MPSL_IRQ_CLOCK_Handler>

00025072 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   25072:	f7fb b8b9 	b.w	201e8 <nrf_cc3xx_platform_init>

00025076 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   25076:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   25078:	f7ed f9de 	bl	12438 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2507c:	f7ed fab2 	bl	125e4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   25080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   25084:	f7fb b8b0 	b.w	201e8 <nrf_cc3xx_platform_init>

00025088 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   25088:	4700      	bx	r0

0002508a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2508a:	f000 b9e6 	b.w	2545a <z_impl_k_busy_wait>

0002508e <nrf_gpio_pin_present_check>:
    switch (port)
   2508e:	0943      	lsrs	r3, r0, #5
   25090:	d00b      	beq.n	250aa <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   25092:	2b01      	cmp	r3, #1
   25094:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25098:	bf18      	it	ne
   2509a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2509c:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   250a0:	fa23 f000 	lsr.w	r0, r3, r0
}
   250a4:	f000 0001 	and.w	r0, r0, #1
   250a8:	4770      	bx	lr
    switch (port)
   250aa:	f04f 33ff 	mov.w	r3, #4294967295
   250ae:	e7f5      	b.n	2509c <nrf_gpio_pin_present_check+0xe>

000250b0 <pin_is_task_output>:
{
   250b0:	b508      	push	{r3, lr}
   250b2:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   250b4:	f7f6 f884 	bl	1b1c0 <pin_is_output>
   250b8:	b110      	cbz	r0, 250c0 <pin_is_task_output+0x10>
   250ba:	4610      	mov	r0, r2
   250bc:	f7f6 f86a 	bl	1b194 <pin_in_use_by_te>
}
   250c0:	f000 0001 	and.w	r0, r0, #1
   250c4:	bd08      	pop	{r3, pc}

000250c6 <nrf_gpio_reconfigure>:
{
   250c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   250ca:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   250cc:	a801      	add	r0, sp, #4
{
   250ce:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   250d2:	460c      	mov	r4, r1
   250d4:	4617      	mov	r7, r2
   250d6:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   250d8:	f7f6 f8f2 	bl	1b2c0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   250dc:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   250de:	1e39      	subs	r1, r7, #0
   250e0:	bf18      	it	ne
   250e2:	2101      	movne	r1, #1
   250e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   250e8:	1e23      	subs	r3, r4, #0
   250ea:	bf18      	it	ne
   250ec:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   250ee:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   250f0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   250f4:	bf14      	ite	ne
   250f6:	210c      	movne	r1, #12
   250f8:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   250fa:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   250fc:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   25100:	bf14      	ite	ne
   25102:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   25106:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   25108:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2510c:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   25110:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   25114:	bf14      	ite	ne
   25116:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2511a:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2511c:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2511e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   25122:	b104      	cbz	r4, 25126 <nrf_gpio_reconfigure+0x60>
   25124:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   25126:	b10f      	cbz	r7, 2512c <nrf_gpio_reconfigure+0x66>
   25128:	783f      	ldrb	r7, [r7, #0]
   2512a:	007f      	lsls	r7, r7, #1
   2512c:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2512e:	b10e      	cbz	r6, 25134 <nrf_gpio_reconfigure+0x6e>
   25130:	7836      	ldrb	r6, [r6, #0]
   25132:	00b6      	lsls	r6, r6, #2
   25134:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   25136:	b18d      	cbz	r5, 2515c <nrf_gpio_reconfigure+0x96>
   25138:	7829      	ldrb	r1, [r5, #0]
   2513a:	0209      	lsls	r1, r1, #8
   2513c:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2513e:	f1b8 0f00 	cmp.w	r8, #0
   25142:	d003      	beq.n	2514c <nrf_gpio_reconfigure+0x86>
   25144:	f898 8000 	ldrb.w	r8, [r8]
   25148:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2514c:	4321      	orrs	r1, r4
   2514e:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   25152:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   25156:	b002      	add	sp, #8
   25158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2515c:	4629      	mov	r1, r5
   2515e:	e7ed      	b.n	2513c <nrf_gpio_reconfigure+0x76>

00025160 <nrf_gpio_cfg_sense_set>:
{
   25160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   25162:	f10d 030f 	add.w	r3, sp, #15
   25166:	9301      	str	r3, [sp, #4]
   25168:	2300      	movs	r3, #0
{
   2516a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2516e:	9300      	str	r3, [sp, #0]
   25170:	461a      	mov	r2, r3
   25172:	4619      	mov	r1, r3
   25174:	f7ff ffa7 	bl	250c6 <nrf_gpio_reconfigure>
}
   25178:	b005      	add	sp, #20
   2517a:	f85d fb04 	ldr.w	pc, [sp], #4

0002517e <nrfx_timer_compare>:
{
   2517e:	b570      	push	{r4, r5, r6, lr}
    return (nrf_timer_int_mask_t)
   25180:	f44f 3480 	mov.w	r4, #65536	; 0x10000
        nrf_timer_event_clear(p_instance->p_reg, nrf_timer_compare_event_get(cc_channel));
   25184:	6805      	ldr	r5, [r0, #0]
   25186:	408c      	lsls	r4, r1
    if (enable_int)
   25188:	b173      	cbz	r3, 251a8 <nrfx_timer_compare+0x2a>
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
   2518a:	008b      	lsls	r3, r1, #2
   2518c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25190:	2600      	movs	r6, #0
   25192:	50ee      	str	r6, [r5, r3]
   25194:	58eb      	ldr	r3, [r5, r3]
        nrf_timer_int_enable(p_instance->p_reg, timer_int);
   25196:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENSET = mask;
   25198:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    nrf_timer_cc_set(p_instance->p_reg, cc_channel, cc_value);
   2519c:	6803      	ldr	r3, [r0, #0]
    p_reg->CC[cc_channel] = cc_value;
   2519e:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   251a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
   251a6:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   251a8:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
}
   251ac:	e7f6      	b.n	2519c <nrfx_timer_compare+0x1e>

000251ae <nrfx_timer_extended_compare>:
{
   251ae:	b4f0      	push	{r4, r5, r6, r7}
    nrf_timer_shorts_disable(p_instance->p_reg,
   251b0:	6807      	ldr	r7, [r0, #0]
        (TIMER_SHORTS_COMPARE0_CLEAR_Msk << cc_channel));
   251b2:	f240 1601 	movw	r6, #257	; 0x101
    p_reg->SHORTS &= ~(mask);
   251b6:	f8d7 5200 	ldr.w	r5, [r7, #512]	; 0x200
        (TIMER_SHORTS_COMPARE0_STOP_Msk  << cc_channel) |
   251ba:	408e      	lsls	r6, r1
   251bc:	ea25 0506 	bic.w	r5, r5, r6
   251c0:	f8c7 5200 	str.w	r5, [r7, #512]	; 0x200
    nrf_timer_shorts_enable(p_instance->p_reg, timer_short_mask);
   251c4:	6804      	ldr	r4, [r0, #0]
    p_reg->SHORTS |= mask;
   251c6:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
   251ca:	432b      	orrs	r3, r5
   251cc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    nrfx_timer_compare(p_instance,
   251d0:	f89d 3010 	ldrb.w	r3, [sp, #16]
}
   251d4:	bcf0      	pop	{r4, r5, r6, r7}
    nrfx_timer_compare(p_instance,
   251d6:	f7ff bfd2 	b.w	2517e <nrfx_timer_compare>

000251da <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   251da:	f7f7 b807 	b.w	1c1ec <_DoInit>

000251de <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   251de:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   251e0:	f7ff fffb 	bl	251da <SEGGER_RTT_Init>

	return 0;
}
   251e4:	2000      	movs	r0, #0
   251e6:	bd08      	pop	{r3, pc}

000251e8 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   251e8:	4770      	bx	lr

000251ea <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   251ea:	b140      	cbz	r0, 251fe <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   251ec:	68c3      	ldr	r3, [r0, #12]
   251ee:	7858      	ldrb	r0, [r3, #1]
   251f0:	f010 0001 	ands.w	r0, r0, #1
   251f4:	bf1e      	ittt	ne
   251f6:	7818      	ldrbne	r0, [r3, #0]
   251f8:	fab0 f080 	clzne	r0, r0
   251fc:	0940      	lsrne	r0, r0, #5
}
   251fe:	4770      	bx	lr

00025200 <z_early_memset>:
	(void) memset(dst, c, n);
   25200:	f7fe b9bd 	b.w	2357e <memset>

00025204 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   25204:	f7fe b9b0 	b.w	23568 <memcpy>

00025208 <k_heap_init>:
{
   25208:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2520a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2520e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   25212:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   25214:	f7eb bf7a 	b.w	1110c <sys_heap_init>

00025218 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   25218:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   2521c:	4313      	orrs	r3, r2
   2521e:	f013 0303 	ands.w	r3, r3, #3
   25222:	d10c      	bne.n	2523e <create_free_list+0x26>
	slab->free_list = NULL;
   25224:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   25226:	68c1      	ldr	r1, [r0, #12]
   25228:	4299      	cmp	r1, r3
   2522a:	d801      	bhi.n	25230 <create_free_list+0x18>
	return 0;
   2522c:	2000      	movs	r0, #0
   2522e:	4770      	bx	lr
		*(char **)p = slab->free_list;
   25230:	6981      	ldr	r1, [r0, #24]
   25232:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   25234:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   25236:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   25238:	3301      	adds	r3, #1
		p += slab->block_size;
   2523a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2523c:	e7f3      	b.n	25226 <create_free_list+0xe>
		return -EINVAL;
   2523e:	f06f 0015 	mvn.w	r0, #21
}
   25242:	4770      	bx	lr

00025244 <k_mem_slab_init>:
{
   25244:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   25246:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->num_used = 0U;
   2524a:	2300      	movs	r3, #0
	slab->buffer = buffer;
   2524c:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   2524e:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   25250:	6083      	str	r3, [r0, #8]
{
   25252:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   25254:	f7ff ffe0 	bl	25218 <create_free_list>
	if (rc < 0) {
   25258:	2800      	cmp	r0, #0
   2525a:	bfa8      	it	ge
   2525c:	e9c4 4400 	strdge	r4, r4, [r4]
}
   25260:	bd10      	pop	{r4, pc}

00025262 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25262:	f3ef 8005 	mrs	r0, IPSR
}
   25266:	3800      	subs	r0, #0
   25268:	bf18      	it	ne
   2526a:	2001      	movne	r0, #1
   2526c:	4770      	bx	lr

0002526e <z_impl_k_thread_name_set>:
}
   2526e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   25272:	4770      	bx	lr

00025274 <k_thread_name_get>:
}
   25274:	2000      	movs	r0, #0
   25276:	4770      	bx	lr

00025278 <z_impl_k_thread_start>:
	z_sched_start(thread);
   25278:	f7f8 bcf2 	b.w	1dc60 <z_sched_start>

0002527c <z_pm_save_idle_exit>:
{
   2527c:	b508      	push	{r3, lr}
	pm_system_resume();
   2527e:	f7ec ff45 	bl	1210c <pm_system_resume>
}
   25282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   25286:	f7ff bcba 	b.w	24bfe <sys_clock_idle_exit>

0002528a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2528a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2528e:	428b      	cmp	r3, r1
   25290:	d001      	beq.n	25296 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   25292:	f7f8 bf5f 	b.w	1e154 <z_set_prio>
}
   25296:	2000      	movs	r0, #0
   25298:	4770      	bx	lr

0002529a <z_impl_k_mutex_init>:
{
   2529a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2529c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2529e:	e9c3 0002 	strd	r0, r0, [r3, #8]
   252a2:	e9c3 3300 	strd	r3, r3, [r3]
}
   252a6:	4770      	bx	lr

000252a8 <z_queue_node_peek>:
{
   252a8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   252aa:	4604      	mov	r4, r0
   252ac:	b130      	cbz	r0, 252bc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   252ae:	6802      	ldr	r2, [r0, #0]
   252b0:	0793      	lsls	r3, r2, #30
   252b2:	d003      	beq.n	252bc <z_queue_node_peek+0x14>
		ret = anode->data;
   252b4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   252b6:	b109      	cbz	r1, 252bc <z_queue_node_peek+0x14>
			k_free(anode);
   252b8:	f000 f996 	bl	255e8 <k_free>
}
   252bc:	4620      	mov	r0, r4
   252be:	bd10      	pop	{r4, pc}

000252c0 <z_impl_k_queue_init>:
	list->head = NULL;
   252c0:	2300      	movs	r3, #0
	list->tail = NULL;
   252c2:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   252c6:	6083      	str	r3, [r0, #8]
   252c8:	f100 030c 	add.w	r3, r0, #12
   252cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   252d0:	f100 0314 	add.w	r3, r0, #20
   252d4:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   252d8:	4770      	bx	lr

000252da <k_queue_append>:
{
   252da:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   252dc:	2301      	movs	r3, #1
   252de:	9300      	str	r3, [sp, #0]
   252e0:	2300      	movs	r3, #0
{
   252e2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   252e4:	4619      	mov	r1, r3
   252e6:	f7f7 fd2b 	bl	1cd40 <queue_insert>
}
   252ea:	b003      	add	sp, #12
   252ec:	f85d fb04 	ldr.w	pc, [sp], #4

000252f0 <k_queue_prepend>:
{
   252f0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   252f2:	2300      	movs	r3, #0
{
   252f4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   252f6:	9300      	str	r3, [sp, #0]
   252f8:	4619      	mov	r1, r3
   252fa:	f7f7 fd21 	bl	1cd40 <queue_insert>
}
   252fe:	b003      	add	sp, #12
   25300:	f85d fb04 	ldr.w	pc, [sp], #4

00025304 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   25304:	b15a      	cbz	r2, 2531e <z_impl_k_sem_init+0x1a>
   25306:	428a      	cmp	r2, r1
   25308:	d309      	bcc.n	2531e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2530a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2530e:	e9c0 1202 	strd	r1, r2, [r0, #8]
   25312:	e9c0 0000 	strd	r0, r0, [r0]
   25316:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2531a:	2000      	movs	r0, #0
   2531c:	4770      	bx	lr
		return -EINVAL;
   2531e:	f06f 0015 	mvn.w	r0, #21
}
   25322:	4770      	bx	lr

00025324 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   25324:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   25326:	2301      	movs	r3, #1
   25328:	408b      	lsls	r3, r1
   2532a:	ea22 0303 	bic.w	r3, r2, r3
   2532e:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   25330:	fa22 f001 	lsr.w	r0, r2, r1
}
   25334:	f000 0001 	and.w	r0, r0, #1
   25338:	4770      	bx	lr

0002533a <unschedule_locked>:
{
   2533a:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2533c:	2103      	movs	r1, #3
{
   2533e:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   25340:	300c      	adds	r0, #12
   25342:	f7ff ffef 	bl	25324 <flag_test_and_clear>
   25346:	4604      	mov	r4, r0
   25348:	b118      	cbz	r0, 25352 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2534a:	f105 0010 	add.w	r0, r5, #16
   2534e:	f7f9 fbfd 	bl	1eb4c <z_abort_timeout>
}
   25352:	4620      	mov	r0, r4
   25354:	bd38      	pop	{r3, r4, r5, pc}

00025356 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   25356:	b120      	cbz	r0, 25362 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   25358:	2200      	movs	r2, #0
   2535a:	4611      	mov	r1, r2
   2535c:	3088      	adds	r0, #136	; 0x88
   2535e:	f7f9 ba83 	b.w	1e868 <z_sched_wake>
}
   25362:	4770      	bx	lr

00025364 <cancel_async_locked>:
{
   25364:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   25366:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25368:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2536c:	079b      	lsls	r3, r3, #30
{
   2536e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25370:	d416      	bmi.n	253a0 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   25372:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   25374:	2102      	movs	r1, #2
   25376:	300c      	adds	r0, #12
   25378:	f7ff ffd4 	bl	25324 <flag_test_and_clear>
   2537c:	b180      	cbz	r0, 253a0 <cancel_async_locked+0x3c>
	return list->head;
   2537e:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25382:	b16a      	cbz	r2, 253a0 <cancel_async_locked+0x3c>
   25384:	4294      	cmp	r4, r2
   25386:	d11d      	bne.n	253c4 <cancel_async_locked+0x60>
	return node->next;
   25388:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2538a:	b99e      	cbnz	r6, 253b4 <cancel_async_locked+0x50>
   2538c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   25390:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   25394:	429c      	cmp	r4, r3
   25396:	d101      	bne.n	2539c <cancel_async_locked+0x38>
	list->tail = node;
   25398:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   2539c:	2300      	movs	r3, #0
   2539e:	6023      	str	r3, [r4, #0]
	return *flagp;
   253a0:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   253a2:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   253a6:	bf1e      	ittt	ne
   253a8:	f043 0302 	orrne.w	r3, r3, #2
   253ac:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   253ae:	f040 0002 	orrne.w	r0, r0, #2
}
   253b2:	bd70      	pop	{r4, r5, r6, pc}
   253b4:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   253b6:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   253ba:	4294      	cmp	r4, r2
	list->tail = node;
   253bc:	bf08      	it	eq
   253be:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   253c2:	e7eb      	b.n	2539c <cancel_async_locked+0x38>
	return node->next;
   253c4:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   253c6:	6812      	ldr	r2, [r2, #0]
   253c8:	e7db      	b.n	25382 <cancel_async_locked+0x1e>

000253ca <k_work_submit_to_queue>:
{
   253ca:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   253cc:	f7f8 f89a 	bl	1d504 <z_work_submit_to_queue>
	if (ret > 0) {
   253d0:	1e04      	subs	r4, r0, #0
   253d2:	dd09      	ble.n	253e8 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   253d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   253d8:	f3ef 8011 	mrs	r0, BASEPRI
   253dc:	f383 8812 	msr	BASEPRI_MAX, r3
   253e0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   253e4:	f000 f80d 	bl	25402 <z_reschedule_irqlock>
}
   253e8:	4620      	mov	r0, r4
   253ea:	bd10      	pop	{r4, pc}

000253ec <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   253ec:	f7f8 b856 	b.w	1d49c <k_work_busy_get>

000253f0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   253f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   253f4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   253f8:	4283      	cmp	r3, r0
		return b2 - b1;
   253fa:	bf14      	ite	ne
   253fc:	1ac0      	subne	r0, r0, r3
	return 0;
   253fe:	2000      	moveq	r0, #0
}
   25400:	4770      	bx	lr

00025402 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25402:	4603      	mov	r3, r0
   25404:	b920      	cbnz	r0, 25410 <z_reschedule_irqlock+0xe>
   25406:	f3ef 8205 	mrs	r2, IPSR
   2540a:	b90a      	cbnz	r2, 25410 <z_reschedule_irqlock+0xe>
   2540c:	f7ed b9d4 	b.w	127b8 <arch_swap>
	__asm__ volatile(
   25410:	f383 8811 	msr	BASEPRI, r3
   25414:	f3bf 8f6f 	isb	sy
}
   25418:	4770      	bx	lr

0002541a <z_reschedule_unlocked>:
	__asm__ volatile(
   2541a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2541e:	f3ef 8011 	mrs	r0, BASEPRI
   25422:	f383 8812 	msr	BASEPRI_MAX, r3
   25426:	f3bf 8f6f 	isb	sy
   2542a:	f7ff bfea 	b.w	25402 <z_reschedule_irqlock>

0002542e <z_unpend_all>:
{
   2542e:	b538      	push	{r3, r4, r5, lr}
   25430:	4605      	mov	r5, r0
	int need_sched = 0;
   25432:	2000      	movs	r0, #0
	return list->head == list;
   25434:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25436:	42a5      	cmp	r5, r4
   25438:	d000      	beq.n	2543c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2543a:	b904      	cbnz	r4, 2543e <z_unpend_all+0x10>
}
   2543c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2543e:	4620      	mov	r0, r4
   25440:	f7f8 ff78 	bl	1e334 <z_unpend_thread>
		z_ready_thread(thread);
   25444:	4620      	mov	r0, r4
   25446:	f7f8 fba3 	bl	1db90 <z_ready_thread>
		need_sched = 1;
   2544a:	2001      	movs	r0, #1
   2544c:	e7f2      	b.n	25434 <z_unpend_all+0x6>

0002544e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2544e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   25450:	f7f9 fcb6 	bl	1edc0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   25454:	bd08      	pop	{r3, pc}

00025456 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   25456:	f7f9 bcb3 	b.w	1edc0 <sys_clock_tick_get>

0002545a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2545a:	b108      	cbz	r0, 25460 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2545c:	f7ed be94 	b.w	13188 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   25460:	4770      	bx	lr

00025462 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25462:	f1b1 3fff 	cmp.w	r1, #4294967295
   25466:	bf08      	it	eq
   25468:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2546c:	b538      	push	{r3, r4, r5, lr}
   2546e:	460c      	mov	r4, r1
   25470:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25472:	d014      	beq.n	2549e <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25474:	4308      	orrs	r0, r1
   25476:	d103      	bne.n	25480 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   25478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2547c:	f7f9 bca0 	b.w	1edc0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   25480:	f06f 0001 	mvn.w	r0, #1
   25484:	1b40      	subs	r0, r0, r5
   25486:	f04f 33ff 	mov.w	r3, #4294967295
   2548a:	eb63 0101 	sbc.w	r1, r3, r1
   2548e:	2900      	cmp	r1, #0
   25490:	da04      	bge.n	2549c <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   25492:	f7f9 fc95 	bl	1edc0 <sys_clock_tick_get>
   25496:	1940      	adds	r0, r0, r5
   25498:	eb41 0104 	adc.w	r1, r1, r4
}
   2549c:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2549e:	f04f 30ff 	mov.w	r0, #4294967295
   254a2:	4601      	mov	r1, r0
   254a4:	e7fa      	b.n	2549c <sys_clock_timeout_end_calc+0x3a>

000254a6 <add_event>:
{
   254a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   254a8:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   254aa:	e9d0 1300 	ldrd	r1, r3, [r0]
   254ae:	4288      	cmp	r0, r1
   254b0:	4604      	mov	r4, r0
   254b2:	d105      	bne.n	254c0 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   254b4:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   254b6:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   254ba:	601d      	str	r5, [r3, #0]
	list->tail = node;
   254bc:	6065      	str	r5, [r4, #4]
   254be:	e01d      	b.n	254fc <add_event+0x56>
	if ((pending == NULL) ||
   254c0:	2b00      	cmp	r3, #0
   254c2:	d0f7      	beq.n	254b4 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   254c4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   254c6:	b100      	cbz	r0, 254ca <add_event+0x24>
   254c8:	3860      	subs	r0, #96	; 0x60
   254ca:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   254ce:	4639      	mov	r1, r7
   254d0:	f7ff ff8e 	bl	253f0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   254d4:	2800      	cmp	r0, #0
   254d6:	dced      	bgt.n	254b4 <add_event+0xe>
	return list->head == list;
   254d8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   254da:	42b4      	cmp	r4, r6
   254dc:	d0ea      	beq.n	254b4 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   254de:	2e00      	cmp	r6, #0
   254e0:	d0e8      	beq.n	254b4 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   254e2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   254e4:	b101      	cbz	r1, 254e8 <add_event+0x42>
   254e6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   254e8:	4638      	mov	r0, r7
   254ea:	f7ff ff81 	bl	253f0 <z_sched_prio_cmp>
   254ee:	2800      	cmp	r0, #0
   254f0:	dd05      	ble.n	254fe <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   254f2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   254f4:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   254f8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   254fa:	6075      	str	r5, [r6, #4]
}
   254fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   254fe:	6863      	ldr	r3, [r4, #4]
   25500:	429e      	cmp	r6, r3
   25502:	d0d7      	beq.n	254b4 <add_event+0xe>
   25504:	6836      	ldr	r6, [r6, #0]
   25506:	e7ea      	b.n	254de <add_event+0x38>

00025508 <signal_poll_event>:
{
   25508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2550c:	6884      	ldr	r4, [r0, #8]
{
   2550e:	4605      	mov	r5, r0
   25510:	460e      	mov	r6, r1
	if (poller != NULL) {
   25512:	b144      	cbz	r4, 25526 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   25514:	7863      	ldrb	r3, [r4, #1]
   25516:	2b01      	cmp	r3, #1
   25518:	d12e      	bne.n	25578 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2551a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2551e:	f013 0302 	ands.w	r3, r3, #2
   25522:	d10a      	bne.n	2553a <signal_poll_event+0x32>
		poller->is_polling = false;
   25524:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   25526:	68eb      	ldr	r3, [r5, #12]
   25528:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2552c:	4316      	orrs	r6, r2
	event->poller = NULL;
   2552e:	2000      	movs	r0, #0
	event->state |= state;
   25530:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   25534:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   25536:	60eb      	str	r3, [r5, #12]
	return retcode;
   25538:	e03e      	b.n	255b8 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2553a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2553e:	f1b3 3fff 	cmp.w	r3, #4294967295
   25542:	bf08      	it	eq
   25544:	f112 0f02 	cmneq.w	r2, #2
   25548:	d032      	beq.n	255b0 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2554a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2554e:	4640      	mov	r0, r8
   25550:	f7f8 fef0 	bl	1e334 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   25554:	2e08      	cmp	r6, #8
   25556:	bf0c      	ite	eq
   25558:	f06f 0303 	mvneq.w	r3, #3
   2555c:	2300      	movne	r3, #0
   2555e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25560:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   25564:	06db      	lsls	r3, r3, #27
   25566:	d109      	bne.n	2557c <signal_poll_event+0x74>
   25568:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2556c:	b937      	cbnz	r7, 2557c <signal_poll_event+0x74>
	z_ready_thread(thread);
   2556e:	4640      	mov	r0, r8
   25570:	f7f8 fb0e 	bl	1db90 <z_ready_thread>
		poller->is_polling = false;
   25574:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   25576:	e7d6      	b.n	25526 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   25578:	2b02      	cmp	r3, #2
   2557a:	d001      	beq.n	25580 <signal_poll_event+0x78>
		poller->is_polling = false;
   2557c:	2300      	movs	r3, #0
   2557e:	e7d1      	b.n	25524 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   25580:	7823      	ldrb	r3, [r4, #0]
   25582:	2b00      	cmp	r3, #0
   25584:	d0cf      	beq.n	25526 <signal_poll_event+0x1e>
   25586:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2558a:	2f00      	cmp	r7, #0
   2558c:	d0f2      	beq.n	25574 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2558e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   25592:	f1a4 0914 	sub.w	r9, r4, #20
   25596:	f104 0014 	add.w	r0, r4, #20
   2559a:	f7f9 fad7 	bl	1eb4c <z_abort_timeout>
		twork->poll_result = 0;
   2559e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   255a2:	4649      	mov	r1, r9
   255a4:	4638      	mov	r0, r7
   255a6:	f7f7 ffad 	bl	1d504 <z_work_submit_to_queue>
		poller->is_polling = false;
   255aa:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   255ae:	e7ba      	b.n	25526 <signal_poll_event+0x1e>
		poller->is_polling = false;
   255b0:	2300      	movs	r3, #0
   255b2:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   255b4:	f06f 000a 	mvn.w	r0, #10
}
   255b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000255bc <z_handle_obj_poll_events>:
{
   255bc:	4603      	mov	r3, r0
	return list->head == list;
   255be:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   255c0:	4283      	cmp	r3, r0
   255c2:	d008      	beq.n	255d6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   255c4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   255c8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   255ca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   255cc:	2300      	movs	r3, #0
	node->prev = NULL;
   255ce:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   255d2:	f7ff bf99 	b.w	25508 <signal_poll_event>
}
   255d6:	4770      	bx	lr

000255d8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   255d8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   255da:	e9c0 0000 	strd	r0, r0, [r0]
   255de:	6083      	str	r3, [r0, #8]
}
   255e0:	4770      	bx	lr

000255e2 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   255e2:	2300      	movs	r3, #0
   255e4:	6083      	str	r3, [r0, #8]
}
   255e6:	4770      	bx	lr

000255e8 <k_free>:
	if (ptr != NULL) {
   255e8:	b120      	cbz	r0, 255f4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   255ea:	1f01      	subs	r1, r0, #4
   255ec:	f850 0c04 	ldr.w	r0, [r0, #-4]
   255f0:	f7f7 b822 	b.w	1c638 <k_heap_free>
}
   255f4:	4770      	bx	lr

000255f6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   255f6:	4770      	bx	lr
